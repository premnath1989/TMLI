//
//  EverLifeViewController.m
//  iMobile Planner
//
//  Created by infoconnect on 8/15/13.
//  Copyright (c) 2013 InfoConnect Sdn Bhd. All rights reserved.
//

#import "EverLifeViewController.h"
#import "DBController.h"
#import "DataTable.h"
#import "AppDelegate.h"

@interface EverLifeViewController ()

@end

const double PolicyFee = 5, IncreasePrem =0, CYFactor = 1, ExcessAllo = 0.95, RegularAllo =0.95, OADLimit = 1000000.00;
const double Bump_Annual = 1.00, Bump_SemiAnnual = 0.5, Bump_Quarter = 0.25, Bump_Month = 0.0833333;
int YearDiff2023, YearDiff2025, YearDiff2028, YearDiff2030, YearDiff2035, CommMonth;
int MonthDiff2023, MonthDiff2025, MonthDiff2028, MonthDiff2030, MonthDiff2035;
int FundTermPrev2023, FundTerm2023, FundTermPrev2025, FundTerm2025,FundTermPrev2028, FundTerm2028;
int FundTermPrev2030, FundTerm2030, FundTermPrev2035, FundTerm2035;
int VU2023Factor,VU2025Factor,VU2028Factor,VU2030Factor,VU2035Factor,VUCashFactor,VURetFactor,VURetOptFactor,VUCashOptFactor,VUDanaFactor,VUDanaOptFactor,VUSmartFactor,VUSmartOptFactor,VUVentureFactor,VUVentureOptFactor;
int RegWithdrawalStartYear, RegWithdrawalEndYear, RegWithdrawalIntYear;
double PremReq;
//double VU2023Fac,VU2025Fac,VU2028Fac,VU2030Fac,VU2035Fac,VUCashFac,VURetFac,VURetOptFac,VUCashOptFac;
double VUCash_FundAllo_Percen,VURet_FundAllo_Percen,VUDana_FundAllo_Percen,VU2023_FundAllo_Percen,VU2025_FundAllo_Percen,VUSmart_FundAllo_Percen,VUVenture_FundAllo_Percen;
double VU2028_FundAllo_Percen,VU2030_FundAllo_Percen, VU2035_FundAllo_Percen, RegWithdrawalAmount;
double VU2023InstHigh, VU2023InstMedian, VU2023InstLow,VU2025InstHigh, VU2025InstMedian, VU2025InstLow;
double VU2028InstHigh, VU2028InstMedian, VU2028InstLow,VU2030InstHigh, VU2030InstMedian, VU2030InstLow;
double VU2035InstHigh, VU2035InstMedian, VU2035InstLow, NegativeValueOfMaxCashFundHigh,NegativeValueOfMaxCashFundMedian,NegativeValueOfMaxCashFundLow ;
double HSurrenderValue,MSurrenderValue,LSurrenderValue,HRiderSurrenderValue,MRiderSurrenderValue,LRiderSurrenderValue;
double VUCashValueHigh, VU2023ValueHigh,VU2025ValueHigh,VU2028ValueHigh,VU2030ValueHigh,VU2035ValueHigh,VURetValueHigh,VUDanaValueHigh, VUSmartValueHigh, VUVentureValueHigh;
double VU2023PrevValuehigh, VU2025PrevValuehigh,VU2028PrevValuehigh, VU2030PrevValuehigh, VU2035PrevValuehigh,VUCashPrevValueHigh,VURetPrevValueHigh,VUDanaPrevValueHigh,VUSmartPrevValueHigh,VUVenturePrevValueHigh;
double MonthVU2023PrevValuehigh, MonthVU2025PrevValuehigh,MonthVU2028PrevValuehigh, MonthVU2030PrevValuehigh, MonthVU2035PrevValuehigh,MonthVUCashPrevValueHigh, MonthVURetPrevValueHigh,MonthVUDanaPrevValueHigh,      MonthVUSmartPrevValueHigh,MonthVUVenturePrevValueHigh;
double VUCashValueMedian, VU2023ValueMedian,VU2025ValueMedian,VU2028ValueMedian,VU2030ValueMedian,VU2035ValueMedian,VURetValueMedian,VUDanaValueMedian,VUSmartValueMedian,VUVentureValueMedian;
double VUCashValueLow, VU2023ValueLow,VU2025ValueLow,VU2028ValueLow,VU2030ValueLow,VU2035ValueLow,VURetValueLow,VUDanaValueLow,VUSmartValueLow,VUVentureValueLow;
double VU2023PrevValueMedian, VU2025PrevValueMedian,VU2028PrevValueMedian, VU2030PrevValueMedian, VU2035PrevValueMedian,VUCashPrevValueMedian,VURetPrevValueMedian,VUDanaPrevValueMedian, VUSmartPrevValueMedian,VUVenturePrevValueMedian;
double VU2023PrevValueLow, VU2025PrevValueLow,VU2028PrevValueLow, VU2030PrevValueLow, VU2035PrevValueLow,VUCashPrevValueLow,VURetPrevValueLow,VUDanaPrevValueLow, VUSmartPrevValueLow,VUVenturePrevValueLow;
double MonthVU2023PrevValueMedian, MonthVU2025PrevValueMedian,MonthVU2028PrevValueMedian, MonthVU2030PrevValueMedian;
double  MonthVU2035PrevValueMedian,MonthVUCashPrevValueMedian,MonthVURetPrevValueMedian,MonthVUDanaPrevValueMedian,MonthVUSmartPrevValueMedian,MonthVUVenturePrevValueMedian;
double MonthVU2023PrevValueLow, MonthVU2025PrevValueLow,MonthVU2028PrevValueLow, MonthVU2030PrevValueLow;
double  MonthVU2035PrevValueLow,MonthVUCashPrevValueLow,MonthVURetPrevValueLow,MonthVUDanaPrevValueLow,MonthVUSmartPrevValueLow,MonthVUVenturePrevValueLow;
double Allo2023, Allo2025,Allo2028,Allo2030,Allo2035;
double Fund2023PartialReinvest, Fund2025PartialReinvest,Fund2028PartialReinvest,Fund2030PartialReinvest,Fund2035PartialReinvest;
double MonthFundMaturityValue2023_Bull, MonthFundMaturityValue2023_Flat,MonthFundMaturityValue2023_Bear;
double MonthFundMaturityValue2025_Bull, MonthFundMaturityValue2025_Flat,MonthFundMaturityValue2025_Bear;
double MonthFundMaturityValue2028_Bull, MonthFundMaturityValue2028_Flat,MonthFundMaturityValue2028_Bear;
double MonthFundMaturityValue2030_Bull, MonthFundMaturityValue2030_Flat,MonthFundMaturityValue2030_Bear;
double MonthFundMaturityValue2035_Bull, MonthFundMaturityValue2035_Flat,MonthFundMaturityValue2035_Bear;
double Fund2023ReinvestTo2025Fac,Fund2023ReinvestTo2028Fac,Fund2023ReinvestTo2030Fac,Fund2023ReinvestTo2035Fac,Fund2023ReinvestToCashFac,Fund2023ReinvestToRetFac,Fund2023ReinvestToDanaFac,Fund2023ReinvestToSmartFac,Fund2023ReinvestToVentureFac;
double Fund2025ReinvestTo2028Fac,Fund2025ReinvestTo2030Fac,Fund2025ReinvestTo2035Fac,Fund2025ReinvestToCashFac,Fund2025ReinvestToRetFac,Fund2025ReinvestToDanaFac,Fund2025ReinvestToSmartFac,Fund2025ReinvestToVentureFac  ;
double Fund2028ReinvestTo2030Fac,Fund2028ReinvestTo2035Fac,Fund2028ReinvestToCashFac,Fund2028ReinvestToRetFac,Fund2028ReinvestToDanaFac, Fund2028ReinvestToSmartFac,Fund2028ReinvestToVentureFac;
double Fund2030ReinvestTo2035Fac,Fund2030ReinvestToCashFac,Fund2030ReinvestToRetFac,Fund2030ReinvestToDanaFac,Fund2030ReinvestToSmartFac,Fund2030ReinvestToVentureFac;
double Fund2035ReinvestToCashFac,Fund2035ReinvestToRetFac,Fund2035ReinvestToDanaFac,Fund2035ReinvestToSmartFac,Fund2035ReinvestToVentureFac;;
double temp2023High, temp2023Median,temp2023Low,temp2025High, temp2025Median,temp2025Low,temp2028High, temp2028Median,temp2028Low;
double temp2030High, temp2030Median,temp2030Low, temp2035High, temp2035Median,temp2035Low;
double Withdrawtemp2023High, Withdrawtemp2023Median,Withdrawtemp2023Low,Withdrawtemp2025High, Withdrawtemp2025Median,Withdrawtemp2025Low,Withdrawtemp2028High, Withdrawtemp2028Median,Withdrawtemp2028Low;
double Withdrawtemp2030High, Withdrawtemp2030Median,Withdrawtemp2030Low, Withdrawtemp2035High, Withdrawtemp2035Median,Withdrawtemp2035Low;
double FundValueOfTheYearValueTotalHigh,FundValueOfTheYearValueTotalMedian, FundValueOfTheYearValueTotalLow;
double MonthFundValueOfTheYearValueTotalHigh,MonthFundValueOfTheYearValueTotalMedian, MonthFundValueOfTheYearValueTotalLow;
double MonthVU2023ValueHigh,MonthVU2023ValueMedian,MonthVU2023ValueLow,MonthVU2025ValueHigh,MonthVU2025ValueMedian,MonthVU2025ValueLow;
double MonthVU2028ValueHigh,MonthVU2028ValueMedian,MonthVU2028ValueLow,MonthVU2030ValueHigh,MonthVU2030ValueMedian,MonthVU2030ValueLow;
double MonthVU2035ValueHigh,MonthVU2035ValueMedian,MonthVU2035ValueLow,MonthVURetValueHigh,MonthVURetValueMedian,MonthVURetValueLow,MonthVUSmartValueHigh,MonthVUSmartValueMedian,MonthVUSmartValueLow;
double MonthVUDanaValueHigh,MonthVUDanaValueMedian,MonthVUDanaValueLow,MonthVUVentureValueHigh,MonthVUVentureValueMedian,MonthVUVentureValueLow;
BOOL VUCashValueNegative,RiderVUCashValueNegative, CIRDExist, HideRPUOPage;
double CIRDSA, CIRDTerm;

double RiderVUCashValueHigh, RiderVU2023ValueHigh,RiderVU2025ValueHigh,RiderVU2028ValueHigh,RiderVU2030ValueHigh,RiderVU2035ValueHigh,RiderVURetValueHigh,RiderVUDanaValueHigh,RiderVUSmartValueHigh,RiderVUVentureValueHigh;
double RiderVU2023PrevValuehigh, RiderVU2025PrevValuehigh,RiderVU2028PrevValuehigh, RiderVU2030PrevValuehigh, RiderVU2035PrevValuehigh,RiderVUCashPrevValueHigh,RiderVURetPrevValueHigh,RiderVUDanaPrevValueHigh,
RiderVUSmartPrevValueHigh,RiderVUVenturePrevValueHigh;
double RiderMonthVU2023PrevValuehigh, RiderMonthVU2025PrevValuehigh,RiderMonthVU2028PrevValuehigh, RiderMonthVU2030PrevValuehigh, RiderMonthVU2035PrevValuehigh,RiderMonthVUCashPrevValueHigh, RiderMonthVURetPrevValueHigh, RiderMonthVUDanaPrevValueHigh,RiderMonthVUSmartPrevValueHigh, RiderMonthVUVenturePrevValueHigh;
double RiderVUCashValueMedian, RiderVU2023ValueMedian,RiderVU2025ValueMedian,RiderVU2028ValueMedian,RiderVU2030ValueMedian,RiderVU2035ValueMedian,RiderVURetValueMedian,RiderVUDanaValueMedian,RiderVUSmartValueMedian,RiderVUVentureValueMedian;
double RiderVUCashValueLow, RiderVU2023ValueLow,RiderVU2025ValueLow,RiderVU2028ValueLow,RiderVU2030ValueLow,RiderVU2035ValueLow,RiderVURetValueLow,RiderVUDanaValueLow,RiderVUSmartValueLow,RiderVUVentureValueLow;
double RiderVU2023PrevValueMedian, RiderVU2025PrevValueMedian,RiderVU2028PrevValueMedian, RiderVU2030PrevValueMedian, RiderVU2035PrevValueMedian,RiderVUCashPrevValueMedian,RiderVURetPrevValueMedian,RiderVUDanaPrevValueMedian,RiderVUSmartPrevValueMedian,RiderVUVenturePrevValueMedian;
double RiderVU2023PrevValueLow, RiderVU2025PrevValueLow,RiderVU2028PrevValueLow, RiderVU2030PrevValueLow, RiderVU2035PrevValueLow,RiderVUCashPrevValueLow,RiderVURetPrevValueLow,RiderVUDanaPrevValueLow,RiderVUSmartPrevValueLow,RiderVUVenturePrevValueLow;
double RiderMonthVU2023PrevValueMedian, RiderMonthVU2025PrevValueMedian,RiderMonthVU2028PrevValueMedian, RiderMonthVU2030PrevValueMedian;
double  RiderMonthVU2035PrevValueMedian,RiderMonthVUCashPrevValueMedian,RiderMonthVURetPrevValueMedian,RiderMonthVUDanaPrevValueMedian,RiderMonthVUSmartPrevValueMedian,RiderMonthVUVenturePrevValueMedian;
double RiderMonthVU2023PrevValueLow, RiderMonthVU2025PrevValueLow,RiderMonthVU2028PrevValueLow, RiderMonthVU2030PrevValueLow;
double  RiderMonthVU2035PrevValueLow,RiderMonthVUCashPrevValueLow,RiderMonthVURetPrevValueLow,RiderMonthVUDanaPrevValueLow, RiderMonthVUSmartPrevValueLow,RiderMonthVUVenturePrevValueLow;
double RiderFundValueOfTheYearValueTotalHigh,RiderFundValueOfTheYearValueTotalMedian, RiderFundValueOfTheYearValueTotalLow;
double RiderMonthFundValueOfTheYearValueTotalHigh,RiderMonthFundValueOfTheYearValueTotalMedian, RiderMonthFundValueOfTheYearValueTotalLow;
double RiderMonthVU2023ValueHigh,RiderMonthVU2023ValueMedian,RiderMonthVU2023ValueLow,RiderMonthVU2025ValueHigh,RiderMonthVU2025ValueMedian,RiderMonthVU2025ValueLow;
double RiderMonthVU2028ValueHigh,RiderMonthVU2028ValueMedian,RiderMonthVU2028ValueLow,RiderMonthVU2030ValueHigh,RiderMonthVU2030ValueMedian,RiderMonthVU2030ValueLow;
double RiderMonthVU2035ValueHigh,RiderMonthVU2035ValueMedian,RiderMonthVU2035ValueLow,RiderMonthVURetValueHigh,RiderMonthVURetValueMedian,RiderMonthVURetValueLow, RiderMonthVUSmartValueMedian,RiderMonthVUVentureValueLow;
double RiderMonthVUDanaValueHigh,RiderMonthVUDanaValueMedian,RiderMonthVUDanaValueLow, RiderMonthVUSmartValueHigh,RiderMonthVUSmartValueMedian,RiderMonthVUSmartValueLow,RiderMonthVUVentureValueHigh,RiderMonthVUVentureValueMedian,RiderMonthVUVentureValueLow;
double RiderNegativeValueOfMaxCashFundHigh,RiderNegativeValueOfMaxCashFundMedian,RiderNegativeValueOfMaxCashFundLow ;
double Ridertemp2023High, Ridertemp2023Median,Ridertemp2023Low,Ridertemp2025High, Ridertemp2025Median,Ridertemp2025Low,Ridertemp2028High, Ridertemp2028Median,Ridertemp2028Low;
double Ridertemp2030High, Ridertemp2030Median,Ridertemp2030Low, Ridertemp2035High, Ridertemp2035Median,Ridertemp2035Low;;
double RiderWithdrawtemp2023High, RiderWithdrawtemp2023Median,RiderWithdrawtemp2023Low,RiderWithdrawtemp2025High, RiderWithdrawtemp2025Median;
double RiderWithdrawtemp2025Low,RiderWithdrawtemp2028High, RiderWithdrawtemp2028Median,RiderWithdrawtemp2028Low;
double RiderWithdrawtemp2030High, RiderWithdrawtemp2030Median,RiderWithdrawtemp2030Low, RiderWithdrawtemp2035High, RiderWithdrawtemp2035Median,RiderWithdrawtemp2035Low;;

double FundValueOfTheYearVURetValueHigh_Basic,FundValueOfTheYearVURetValueMedian_Basic,FundValueOfTheYearVURetValueLow_Basic;
double FundValueOfTheYearVUSmartValueHigh_Basic,FundValueOfTheYearVUSmartValueMedian_Basic,FundValueOfTheYearVUSmartValueLow_Basic;
double FundValueOfTheYearVUVentureValueHigh_Basic,FundValueOfTheYearVUVentureValueMedian_Basic,FundValueOfTheYearVUVentureValueLow_Basic;
double FundValueOfTheYearVUDanaValueHigh_Basic,FundValueOfTheYearVUDanaValueMedian_Basic,FundValueOfTheYearVUDanaValueLow_Basic;
double FundValueOfTheYearVU2023ValueHigh_Basic,FundValueOfTheYearVU2023ValueMedian_Basic,FundValueOfTheYearVU2023ValueLow_Basic;
double FundValueOfTheYearVU2025ValueHigh_Basic,FundValueOfTheYearVU2025ValueMedian_Basic,FundValueOfTheYearVU2025ValueLow_Basic;
double FundValueOfTheYearVU2028ValueHigh_Basic,FundValueOfTheYearVU2028ValueMedian_Basic,FundValueOfTheYearVU2028ValueLow_Basic;
double FundValueOfTheYearVU2030ValueHigh_Basic,FundValueOfTheYearVU2030ValueMedian_Basic,FundValueOfTheYearVU2030ValueLow_Basic;
double FundValueOfTheYearVU2035ValueHigh_Basic,FundValueOfTheYearVU2035ValueMedian_Basic,FundValueOfTheYearVU2035ValueLow_Basic;



double MonthFundValueOfTheYearVURetValueHigh_Basic,MonthFundValueOfTheYearVURetValueMedian_Basic,MonthFundValueOfTheYearVURetValueLow_Basic;
double MonthFundValueOfTheYearVUDanaValueHigh_Basic,MonthFundValueOfTheYearVUDanaValueMedian_Basic,MonthFundValueOfTheYearVUDanaValueLow_Basic;
double MonthFundValueOfTheYearVUSmartValueHigh_Basic,MonthFundValueOfTheYearVUSmartValueMedian_Basic,MonthFundValueOfTheYearVUSmartValueLow_Basic;
double MonthFundValueOfTheYearVUVentureValueHigh_Basic,MonthFundValueOfTheYearVUVentureValueMedian_Basic,MonthFundValueOfTheYearVUVentureValueLow_Basic;
double MonthFundValueOfTheYearVU2023ValueHigh_Basic,MonthFundValueOfTheYearVU2023ValueMedian_Basic,MonthFundValueOfTheYearVU2023ValueLow_Basic;
double MonthFundValueOfTheYearVU2025ValueHigh_Basic,MonthFundValueOfTheYearVU2025ValueMedian_Basic,MonthFundValueOfTheYearVU2025ValueLow_Basic;
double MonthFundValueOfTheYearVU2028ValueHigh_Basic,MonthFundValueOfTheYearVU2028ValueMedian_Basic,MonthFundValueOfTheYearVU2028ValueLow_Basic;
double MonthFundValueOfTheYearVU2030ValueHigh_Basic,MonthFundValueOfTheYearVU2030ValueMedian_Basic,MonthFundValueOfTheYearVU2030ValueLow_Basic;
double MonthFundValueOfTheYearVU2035ValueHigh_Basic,MonthFundValueOfTheYearVU2035ValueMedian_Basic,MonthFundValueOfTheYearVU2035ValueLow_Basic;

double RiderFundValueOfTheYearVURetValueHigh_Basic,RiderFundValueOfTheYearVURetValueMedian_Basic,RiderFundValueOfTheYearVURetValueLow_Basic;
double RiderFundValueOfTheYearVUDanaValueHigh_Basic,RiderFundValueOfTheYearVUDanaValueMedian_Basic,RiderFundValueOfTheYearVUDanaValueLow_Basic;
double RiderFundValueOfTheYearVUSmartValueHigh_Basic,RiderFundValueOfTheYearVUSmartValueMedian_Basic,RiderFundValueOfTheYearVUSmartValueLow_Basic;
double RiderFundValueOfTheYearVUVentureValueHigh_Basic,RiderFundValueOfTheYearVUVentureValueMedian_Basic,RiderFundValueOfTheYearVUVentureValueLow_Basic;
double RiderFundValueOfTheYearVU2023ValueHigh_Basic,RiderFundValueOfTheYearVU2023ValueMedian_Basic,RiderFundValueOfTheYearVU2023ValueLow_Basic;
double RiderFundValueOfTheYearVU2025ValueHigh_Basic,RiderFundValueOfTheYearVU2025ValueMedian_Basic,RiderFundValueOfTheYearVU2025ValueLow_Basic;
double RiderFundValueOfTheYearVU2028ValueHigh_Basic,RiderFundValueOfTheYearVU2028ValueMedian_Basic,RiderFundValueOfTheYearVU2028ValueLow_Basic;
double RiderFundValueOfTheYearVU2030ValueHigh_Basic,RiderFundValueOfTheYearVU2030ValueMedian_Basic,RiderFundValueOfTheYearVU2030ValueLow_Basic;
double RiderFundValueOfTheYearVU2035ValueHigh_Basic,RiderFundValueOfTheYearVU2035ValueMedian_Basic,RiderFundValueOfTheYearVU2035ValueLow_Basic;

double RiderMonthFundValueOfTheYearVURetValueHigh_Basic,RiderMonthFundValueOfTheYearVURetValueMedian_Basic,RiderMonthFundValueOfTheYearVURetValueLow_Basic;
double RiderMonthFundValueOfTheYearVUDanaValueHigh_Basic,RiderMonthFundValueOfTheYearVUDanaValueMedian_Basic,RiderMonthFundValueOfTheYearVUDanaValueLow_Basic;
double RiderMonthFundValueOfTheYearVUSmartValueHigh_Basic,RiderMonthFundValueOfTheYearVUSmartValueMedian_Basic,RiderMonthFundValueOfTheYearVUSmartValueLow_Basic;
double RiderMonthFundValueOfTheYearVUVentureValueHigh_Basic,RiderMonthFundValueOfTheYearVUVentureValueMedian_Basic,RiderMonthFundValueOfTheYearVUVentureValueLow_Basic;
double RiderMonthFundValueOfTheYearVU2023ValueHigh_Basic,RiderMonthFundValueOfTheYearVU2023ValueMedian_Basic,RiderMonthFundValueOfTheYearVU2023ValueLow_Basic;
double RiderMonthFundValueOfTheYearVU2025ValueHigh_Basic,RiderMonthFundValueOfTheYearVU2025ValueMedian_Basic,RiderMonthFundValueOfTheYearVU2025ValueLow_Basic;
double RiderMonthFundValueOfTheYearVU2028ValueHigh_Basic,RiderMonthFundValueOfTheYearVU2028ValueMedian_Basic,RiderMonthFundValueOfTheYearVU2028ValueLow_Basic;
double RiderMonthFundValueOfTheYearVU2030ValueHigh_Basic,RiderMonthFundValueOfTheYearVU2030ValueMedian_Basic,RiderMonthFundValueOfTheYearVU2030ValueLow_Basic;
double RiderMonthFundValueOfTheYearVU2035ValueHigh_Basic,RiderMonthFundValueOfTheYearVU2035ValueMedian_Basic,RiderMonthFundValueOfTheYearVU2035ValueLow_Basic;

double VU2023Value_EverCash1, VU2025Value_EverCash1, VU2028Value_EverCash1, VU2030Value_EverCash1, VU2035Value_EverCash1, VURetValue_EverCash1, VUDanaValue_EverCash1, VUSmartValue_EverCash1, VUVentureValue_EverCash1, VUCashValue_EverCash1;
double VU2023Value_EverCash6, VU2025Value_EverCash6, VU2028Value_EverCash6, VU2030Value_EverCash6, VU2035Value_EverCash6, VURetValue_EverCash6, VUDanaValue_EverCash6, VUSmartValue_EverCash6, VUVentureValue_EverCash6, VUCashValue_EverCash6;
double VU2023Value_EverCash55, VU2025Value_EverCash55, VU2028Value_EverCash55, VU2030Value_EverCash55, VU2035Value_EverCash55, VURetValue_EverCash55, VUDanaValue_EverCash55, VUCashValue_EverCash55;
double VU2023Value_EverCash60, VU2025Value_EverCash60, VU2028Value_EverCash60, VU2030Value_EverCash60, VU2035Value_EverCash60, VURetValue_EverCash60, VUDanaValue_EverCash60, VUSmartValue_EverCash60, VUVentureValue_EverCash60, VUCashValue_EverCash60;
double PrevVU2023Value_EverCash55, PrevVU2025Value_EverCash55, PrevVU2028Value_EverCash55, PrevVU2030Value_EverCash55, PrevVU2035Value_EverCash55, PrevVURetValue_EverCash55, PrevVUDanaValue_EverCash55, PrevVUCashValue_EverCash55;
double PrevVU2023Value_EverCash60, PrevVU2025Value_EverCash60, PrevVU2028Value_EverCash60, PrevVU2030Value_EverCash60, PrevVU2035Value_EverCash60, PrevVURetValue_EverCash60, PrevVUDanaValue_EverCash60, PrevVUSmartValue_EverCash60, PrevVUVentureValue_EverCash60,PrevVUCashValue_EverCash60;
double CashFactor;

NSString *getHL, *getHLPct,*getHLTerm, *getHLPctTerm, *getOccLoading, *strBumpMode, *strBasicPremium, *strBasicPremium_Bump, *strBasicSA, *strRTUPFrom, *strRTUPFor,*strRTUPAmount,*strGrayRTUPAmount, *strCovPeriod;
NSString *strRRTUOPrem,*strRRTUOFrom,*strRRTUOFor, *PYSex, *SecSex;
NSString *ECAR1RiderTerm, *ECAR1RiderDesc, *ECAR1SumAssured, *ECAR1HLoading, *ECAR1HLoadingPct, *ECAR1Premium;
NSString *ECAR1PaymentTerm, *ECAR1ReinvestGYI, *ECAR1HLoadingTerm, *ECAR1HLoadingPctTerm, *ECAR1LoadingPremium;

NSString *ECAR6RiderTerm, *ECAR6RiderDesc, *ECAR6SumAssured, *ECAR6HLoading, *ECAR6HLoadingPct, *ECAR6Premium;
NSString *ECAR6PaymentTerm, *ECAR6ReinvestGYI, *ECAR6HLoadingTerm, *ECAR6HLoadingPctTerm, *ECAR6LoadingPremium;

NSString *ECAR55RiderTerm = @"", *ECAR55RiderDesc, *ECAR55SumAssured, *ECAR55HLoading, *ECAR55HLoadingPct, *ECAR55Premium;
NSString *ECAR55PaymentTerm, *ECAR55ReinvestGYI, *ECAR55HLoadingTerm, *ECAR55HLoadingPctTerm;

NSString *ECAR60RiderTerm = @"", *ECAR60RiderDesc, *ECAR60SumAssured, *ECAR60HLoading, *ECAR60HLoadingPct, *ECAR60Premium;
NSString *ECAR60PaymentTerm, *ECAR60ReinvestGYI, *ECAR60HLoadingTerm, *ECAR60HLoadingPctTerm, *ECAR60LoadingPrem;

NSString *TopupStart, *TopupEnd, *TopupAmount;

int PYAge, SecAge;
double CurrentBump, minSA;
BOOL ECAR1Exist = FALSE;
BOOL ECAR6Exist = FALSE;
BOOL ECAR55Exist = FALSE;
BOOL ECAR60Exist = FALSE;
BOOL RPUOExist = FALSE;
BOOL NegativeBump = FALSE;
 
//BOOL StopExec = FALSE; //flag for sustainability purpose

NSString *RPUOYear,*RPUOSA;
double OneTimePayOut,OneTimePayOutRate,OneTimePayOutWithMinSA, PaidOpChargeCash_H, PaidOpCharge2023_H,PaidOpCharge2025_H,PaidOpCharge2028_H,PaidOpCharge2030_H,PaidOpCharge2035_H,PaidOpChargeRet_H,PaidOpChargeDana_H,PaidOpChargeSmart_H,PaidOpChargeVenture_H;
double PaidOpChargeCash_M,PaidOpCharge2023_M,PaidOpCharge2025_M,PaidOpCharge2028_M,PaidOpCharge2030_M,PaidOpCharge2035_M,PaidOpChargeRet_M,PaidOpChargeDana_M,PaidOpChargeSmart_M,PaidOpChargeVenture_M;
double PaidOpChargeCash_L,PaidOpCharge2023_L,PaidOpCharge2025_L,PaidOpCharge2028_L,PaidOpCharge2030_L,PaidOpCharge2035_L,PaidOpChargeRet_L,PaidOpChargeDana_L,PaidOpChargeSmart_L,PaidOpChargeVenture_L;
double PaidOpChargeSum_H,PaidOpChargeSum_M,PaidOpChargeSum_L, ProjDeduction2023_H;
double ProjDeduction2023_H,ProjDeduction2025_H,ProjDeduction2028_H,ProjDeduction2030_H,ProjDeduction2035_H,ProjDeductionRet_H,ProjDeductionDana_H,ProjDeductionSmart_H,ProjDeductionVenture_H,ProjDeductionCash_H,ProjDeductionSum_H;
double ProjDeduction2023_M,ProjDeduction2025_M,ProjDeduction2028_M,ProjDeduction2030_M,ProjDeduction2035_M,ProjDeductionRet_M,ProjDeductionDana_M,ProjDeductionSmart_M,ProjDeductionVenture_M,ProjDeductionCash_M,ProjDeductionSum_M;
double ProjDeduction2023_L,ProjDeduction2025_L,ProjDeduction2028_L,ProjDeduction2030_L,ProjDeduction2035_L,ProjDeductionRet_L,ProjDeductionDana_L,ProjDeductionSmart_L,ProjDeductionVenture_L,ProjDeductionCash_L,ProjDeductionSum_L;
double ReinvestCashFund2023_H,ReinvestCashFund2025_H,ReinvestCashFund2028_H,ReinvestCashFund2030_H,ReinvestCashFund2035_H,ReinvestCashFundRet_H,ReinvestCashFundDana_H,ReinvestCashFundSmart_H,ReinvestCashFundVenture_H,ReinvestCashFundSum_H;
double ReinvestCashFund2023_M,ReinvestCashFund2025_M,ReinvestCashFund2028_M,ReinvestCashFund2030_M,ReinvestCashFund2035_M,ReinvestCashFundRet_M,ReinvestCashFundDana_M,ReinvestCashFundSmart_M,ReinvestCashFundVenture_M,ReinvestCashFundSum_M;
double ReinvestCashFund2023_L,ReinvestCashFund2025_L,ReinvestCashFund2028_L,ReinvestCashFund2030_L,ReinvestCashFund2035_L,ReinvestCashFundRet_L,ReinvestCashFundDana_L,ReinvestCashFundSmart_L,ReinvestCashFundVenture_L,ReinvestCashFundSum_L;
double ReinvestCashFundCase_H,ReinvestCashFundCase_M,ReinvestCashFundCase_L, ProjValAfterReinvestCash_H,ProjValAfterReinvestCash_M,ProjValAfterReinvestCash_L;
double ProjValAfterReinvestSum_H,ProjValAfterReinvestSum_M,ProjValAfterReinvestSum_L;
double ProjValAfterReinvest2023_H,ProjValAfterReinvest2025_H,ProjValAfterReinvest2028_H,ProjValAfterReinvest2030_H,ProjValAfterReinvest2035_H,ProjValAfterReinvestRet_H,ProjValAfterReinvestDana_H, ProjValAfterReinvestSmart_H,ProjValAfterReinvestVenture_H,ProjValAfterReinvestCash_H,ProjValAfterReinvestSum_H;
double ProjValAfterReinvest2023_M,ProjValAfterReinvest2025_M,ProjValAfterReinvest2028_M,ProjValAfterReinvest2030_M,ProjValAfterReinvest2035_M,ProjValAfterReinvestRet_M,ProjValAfterReinvestDana_M,ProjValAfterReinvestSmart_M,ProjValAfterReinvestVenture_M,ProjValAfterReinvestCash_M,ProjValAfterReinvestSum_M;
double ProjValAfterReinvest2023_L,ProjValAfterReinvest2025_L,ProjValAfterReinvest2028_L,ProjValAfterReinvest2030_L,ProjValAfterReinvest2035_L,ProjValAfterReinvestRet_L,ProjValAfterReinvestDana_L,ProjValAfterReinvestSmart_L,ProjValAfterReinvestVenture_L,ProjValAfterReinvestCash_L,ProjValAfterReinvestSum_L;
double PrevPaidUpOptionTable_2023_High,PrevPaidUpOptionTable_2025_High,PrevPaidUpOptionTable_2028_High,PrevPaidUpOptionTable_2030_High,PrevPaidUpOptionTable_2035_High,PrevPaidUpOptionTable_Cash_High,PrevPaidUpOptionTable_Ret_High,PrevPaidUpOptionTable_Dana_High,PrevPaidUpOptionTable_Smart_High,PrevPaidUpOptionTable_Venture_High;
double PrevPaidUpOptionTable_2023_Median,PrevPaidUpOptionTable_2025_Median,PrevPaidUpOptionTable_2028_Median,PrevPaidUpOptionTable_2030_Median,PrevPaidUpOptionTable_2035_Median,PrevPaidUpOptionTable_Cash_Median,PrevPaidUpOptionTable_Ret_Median,PrevPaidUpOptionTable_Dana_Median,PrevPaidUpOptionTable_Smart_Median,PrevPaidUpOptionTable_Venture_Median;
double PrevPaidUpOptionTable_2023_Low,PrevPaidUpOptionTable_2025_Low,PrevPaidUpOptionTable_2028_Low,PrevPaidUpOptionTable_2030_Low,PrevPaidUpOptionTable_2035_Low,PrevPaidUpOptionTable_Cash_Low,PrevPaidUpOptionTable_Ret_Low,PrevPaidUpOptionTable_Dana_Low, PrevPaidUpOptionTable_Smart_Low,PrevPaidUpOptionTable_Venture_Low;
double ProjValueMaturity2023_H,ProjValueMaturity2023_M,ProjValueMaturity2023_L,ProjValueMaturity2025_H,ProjValueMaturity2025_M,ProjValueMaturity2025_L;
double ProjValueMaturity2028_H,ProjValueMaturity2028_M,ProjValueMaturity2028_L,ProjValueMaturity2030_H,ProjValueMaturity2030_M,ProjValueMaturity2030_L;
double ProjValueMaturity2035_H,ProjValueMaturity2035_M,ProjValueMaturity2035_L,ProjValueMaturityRet_H,ProjValueMaturityRet_M,ProjValueMaturityRet_L, ProjValueMaturitySmart_H,ProjValueMaturitySmart_M,ProjValueMaturitySmart_L;;
double ProjValueMaturityCash_H,ProjValueMaturityCash_M,ProjValueMaturityCash_L,ProjValueMaturityDana_H,ProjValueMaturityDana_M,ProjValueMaturityDana_L,ProjValueMaturityVenture_H,ProjValueMaturityVenture_M,ProjValueMaturityVenture_L;
double ProjWithdraw2023_H,ProjWithdraw2023_M,ProjWithdraw2023_L,ProjWithdraw2025_H,ProjWithdraw2025_M,ProjWithdraw2025_L;
double ProjWithdraw2028_H,ProjWithdraw2028_M,ProjWithdraw2028_L,ProjWithdraw2030_H,ProjWithdraw2030_M,ProjWithdraw2030_L;
double ProjWithdraw2035_H,ProjWithdraw2035_M,ProjWithdraw2035_L,ProjWithdrawRet_H,ProjWithdrawRet_M,ProjWithdrawRet_L,ProjWithdrawSmart_H,ProjWithdrawSmart_M,ProjWithdrawSmart_L;
double ProjWithdrawCash_H,ProjWithdrawCash_M,ProjWithdrawCash_L,ProjWithdrawDana_H,ProjWithdrawDana_M,ProjWithdrawDana_L,ProjWithdrawVenture_H,ProjWithdrawVenture_M,ProjWithdrawVenture_L;
double ProjReinvest2023_H,ProjReinvest2023_M,ProjReinvest2023_L,ProjReinvest2025_H,ProjReinvest2025_M,ProjReinvest2025_L;
double ProjReinvest2028_H,ProjReinvest2028_M,ProjReinvest2028_L,ProjReinvest2030_H,ProjReinvest2030_M,ProjReinvest2030_L;
double ProjReinvest2035_H,ProjReinvest2035_M,ProjReinvest2035_L,ProjReinvestRet_H,ProjReinvestRet_M,ProjReinvestRet_L,ProjReinvestSmart_H,ProjReinvestSmart_M,ProjReinvestSmart_L;
double ProjReinvestCash_H,ProjReinvestCash_M,ProjReinvestCash_L,ProjReinvestDana_H,ProjReinvestDana_M,ProjReinvestDana_L,ProjReinvestVenture_H,ProjReinvestVenture_M,ProjReinvestVenture_L;
double ReinvestAmount2023to2025_H, ReinvestAmount2023to2028_H,ReinvestAmount2023to2030_H,ReinvestAmount2023to2035_H,ReinvestAmount2023toRet_H,ReinvestAmount2023toCash_H,ReinvestAmount2023toDana_H;
double ReinvestAmount2025to2028_H,ReinvestAmount2025to2030_H,ReinvestAmount2025to2035_H,ReinvestAmount2025toRet_H,ReinvestAmount2025toCash_H,ReinvestAmount2025toDana_H, ReinvestAmount2025toSmart_H,ReinvestAmount2025toVenture_H;
double ReinvestAmount2028to2030_H,ReinvestAmount2028to2035_H,ReinvestAmount2028toRet_H,ReinvestAmount2028toCash_H,ReinvestAmount2028toDana_H,ReinvestAmount2028toSmart_H,ReinvestAmount2028toVenture_H;
double ReinvestAmount2030to2035_H,ReinvestAmount2030toRet_H,ReinvestAmount2030toCash_H,ReinvestAmount2030toDana_H,ReinvestAmount2030toSmart_H,ReinvestAmount2030toVenture_H;
double ReinvestAmount2035toRet_H,ReinvestAmount2035toCash_H,ReinvestAmount2035toDana_H,ReinvestAmount2035toSmart_H,ReinvestAmount2035toVenture_H;
double ReinvestAmount2023to2025_M, ReinvestAmount2023to2028_M,ReinvestAmount2023to2030_M,ReinvestAmount2023to2035_M,ReinvestAmount2023toRet_M,ReinvestAmount2023toCash_M,ReinvestAmount2023toDana_M;
double ReinvestAmount2025to2028_M,ReinvestAmount2025to2030_M,ReinvestAmount2025to2035_M,ReinvestAmount2025toRet_M,ReinvestAmount2025toCash_M,ReinvestAmount2025toDana_M,ReinvestAmount2025toSmart_M,ReinvestAmount2025toVenture_M;
double ReinvestAmount2028to2030_M,ReinvestAmount2028to2035_M,ReinvestAmount2028toRet_M,ReinvestAmount2028toCash_M,ReinvestAmount2028toDana_M,ReinvestAmount2028toSmart_M,ReinvestAmount2028toVenture_M;
double ReinvestAmount2030to2035_M,ReinvestAmount2030toRet_M,ReinvestAmount2030toCash_M,ReinvestAmount2030toDana_M,ReinvestAmount2030toSmart_M,ReinvestAmount2030toVenture_M;
double ReinvestAmount2035toRet_M,ReinvestAmount2035toCash_M,ReinvestAmount2035toDana_M,ReinvestAmount2035toSmart_M,ReinvestAmount2035toVenture_M;
double ReinvestAmount2023to2025_L, ReinvestAmount2023to2028_L,ReinvestAmount2023to2030_L,ReinvestAmount2023to2035_L,ReinvestAmount2023toRet_L,ReinvestAmount2023toCash_L,ReinvestAmount2023toDana_L;
double ReinvestAmount2025to2028_L,ReinvestAmount2025to2030_L,ReinvestAmount2025to2035_L,ReinvestAmount2025toRet_L,ReinvestAmount2025toCash_L,ReinvestAmount2025toDana_L,ReinvestAmount2025toSmart_L,ReinvestAmount2025toVenture_L;
double ReinvestAmount2028to2030_L,ReinvestAmount2028to2035_L,ReinvestAmount2028toRet_L,ReinvestAmount2028toCash_L,ReinvestAmount2028toDana_L,ReinvestAmount2028toSmart_L,ReinvestAmount2028toVenture_L;
double ReinvestAmount2030to2035_L,ReinvestAmount2030toRet_L,ReinvestAmount2030toCash_L,ReinvestAmount2030toDana_L,ReinvestAmount2030toSmart_L,ReinvestAmount2030toVenture_L;
double ReinvestAmount2035toRet_L,ReinvestAmount2035toCash_L,ReinvestAmount2035toDana_L,ReinvestAmount2035toSmart_L,ReinvestAmount2035toVenture_L;


///
double VUVentureGrowth_FundAllo_Percen,
VUVentureGrowthFactor,
VUVentureGrowthOptFactor,
VUVentureGrowthValueHigh,
VUVentureGrowthPrevValueHigh,
MonthVUVentureGrowthPrevValueHigh,
VUVentureGrowthValueMedian,
VUVentureGrowthValueLow,
VUVentureGrowthPrevValueMedian,
VUVentureGrowthPrevValueLow,
MonthVUVentureGrowthPrevValueMedian,
MonthVUVentureGrowthPrevValueLow,
Fund2023ReinvestToVentureGrowthFac,
Fund2025ReinvestToVentureGrowthFac,
Fund2028ReinvestToVentureGrowthFac,
Fund2030ReinvestToVentureGrowthFac,
Fund2035ReinvestToVentureGrowthFac,
MonthVUVentureGrowthValueHigh,
MonthVUVentureGrowthValueMedian,
MonthVUVentureGrowthValueLow,
RiderVUVentureGrowthValueHigh,
RiderVUVentureGrowthPrevValueHigh,
RiderMonthVUVentureGrowthPrevValueHigh,
RiderVUVentureGrowthValueMedian,
RiderVUVentureGrowthValueLow,
RiderVUVentureGrowthPrevValueMedian,
RiderVUVentureGrowthPrevValueLow,
RiderMonthVUVentureGrowthPrevValueMedian,
RiderMonthVUVentureGrowthPrevValueLow,
RiderMonthVUVentureGrowthValueHigh,
RiderMonthVUVentureGrowthValueMedian,
RiderMonthVUVentureGrowthValueLow,
FundValueOfTheYearVUVentureGrowthValueHigh_Basic,
FundValueOfTheYearVUVentureGrowthValueMedian_Basic,
FundValueOfTheYearVUVentureGrowthValueLow_Basic,
MonthFundValueOfTheYearVUVentureGrowthValueHigh_Basic,
MonthFundValueOfTheYearVUVentureGrowthValueMedian_Basic,
MonthFundValueOfTheYearVUVentureGrowthValueLow_Basic,
RiderFundValueOfTheYearVUVentureGrowthValueHigh_Basic,
RiderFundValueOfTheYearVUVentureGrowthValueMedian_Basic,
RiderFundValueOfTheYearVUVentureGrowthValueLow_Basic,
RiderMonthFundValueOfTheYearVUVentureGrowthValueHigh_Basic,
RiderMonthFundValueOfTheYearVUVentureGrowthValueMedian_Basic,
RiderMonthFundValueOfTheYearVUVentureGrowthValueLow_Basic,
VUVentureGrowthValue_EverCash1,
VUVentureGrowthValue_EverCash6,
VUVentureGrowthValue_EverCash55,
VUVentureGrowthValue_EverCash60,
PrevVUVentureGrowthValue_EverCash55,
PrevVUVentureGrowthValue_EverCash60,
PaidOpChargeVentureGrowth_H,
PaidOpChargeVentureGrowth_M,
PaidOpChargeVentureGrowth_L,
ProjDeductionVentureGrowth_H,
ProjDeductionVentureGrowth_M,
ProjDeductionVentureGrowth_L,
ReinvestCashFundVentureGrowth_H,
ReinvestCashFundVentureGrowth_M,
ReinvestCashFundVentureGrowth_L,
ProjValAfterReinvestVentureGrowth_H,
ProjValAfterReinvestVentureGrowth_M,
ProjValAfterReinvestVentureGrowth_L,
PrevPaidUpOptionTable_VentureGrowth_High,
PrevPaidUpOptionTable_VentureGrowth_Median,
PrevPaidUpOptionTable_VentureGrowth_Low,
ProjValueMaturityVentureGrowth_H,
ProjValueMaturityVentureGrowth_M,
ProjValueMaturityVentureGrowth_L,
ProjWithdrawVentureGrowth_H,
ProjWithdrawVentureGrowth_M,
ProjWithdrawVentureGrowth_L,
ProjReinvestVentureGrowth_H,
ProjReinvestVentureGrowth_M,ProjReinvestVentureGrowth_L,
ReinvestAmount2023toVentureGrowth_H,ReinvestAmount2025toVentureGrowth_H,ReinvestAmount2028toVentureGrowth_H,
ReinvestAmount2030toVentureGrowth_H,ReinvestAmount2035toVentureGrowth_H,ReinvestAmount2023toVentureGrowth_M,
ReinvestAmount2025toVentureGrowth_M,ReinvestAmount2028toVentureGrowth_M,ReinvestAmount2030toVentureGrowth_M,
ReinvestAmount2035toVentureGrowth_M,ReinvestAmount2023toVentureGrowth_L,ReinvestAmount2025toVentureGrowth_L,
ReinvestAmount2028toVentureGrowth_L,ReinvestAmount2030toVentureGrowth_L,ReinvestAmount2035toVentureGrowth_L;

double VUVentureBlueChip_FundAllo_Percen,
VUVentureBlueChipFactor,
VUVentureBlueChipOptFactor,
VUVentureBlueChipValueHigh,
VUVentureBlueChipPrevValueHigh,
MonthVUVentureBlueChipPrevValueHigh,
VUVentureBlueChipValueMedian,
VUVentureBlueChipValueLow,
VUVentureBlueChipPrevValueMedian,
VUVentureBlueChipPrevValueLow,
MonthVUVentureBlueChipPrevValueMedian,
MonthVUVentureBlueChipPrevValueLow,
Fund2023ReinvestToVentureBlueChipFac,
Fund2025ReinvestToVentureBlueChipFac,
Fund2028ReinvestToVentureBlueChipFac,
Fund2030ReinvestToVentureBlueChipFac,
Fund2035ReinvestToVentureBlueChipFac,
MonthVUVentureBlueChipValueHigh,
MonthVUVentureBlueChipValueMedian,
MonthVUVentureBlueChipValueLow,
RiderVUVentureBlueChipValueHigh,
RiderVUVentureBlueChipPrevValueHigh,
RiderMonthVUVentureBlueChipPrevValueHigh,
RiderVUVentureBlueChipValueMedian,
RiderVUVentureBlueChipValueLow,
RiderVUVentureBlueChipPrevValueMedian,
RiderVUVentureBlueChipPrevValueLow,
RiderMonthVUVentureBlueChipPrevValueMedian,
RiderMonthVUVentureBlueChipPrevValueLow,
RiderMonthVUVentureBlueChipValueHigh,
RiderMonthVUVentureBlueChipValueMedian,
RiderMonthVUVentureBlueChipValueLow,
FundValueOfTheYearVUVentureBlueChipValueHigh_Basic,
FundValueOfTheYearVUVentureBlueChipValueMedian_Basic,
FundValueOfTheYearVUVentureBlueChipValueLow_Basic,
MonthFundValueOfTheYearVUVentureBlueChipValueHigh_Basic,
MonthFundValueOfTheYearVUVentureBlueChipValueMedian_Basic,
MonthFundValueOfTheYearVUVentureBlueChipValueLow_Basic,
RiderFundValueOfTheYearVUVentureBlueChipValueHigh_Basic,
RiderFundValueOfTheYearVUVentureBlueChipValueMedian_Basic,
RiderFundValueOfTheYearVUVentureBlueChipValueLow_Basic,
RiderMonthFundValueOfTheYearVUVentureBlueChipValueHigh_Basic,
RiderMonthFundValueOfTheYearVUVentureBlueChipValueMedian_Basic,
RiderMonthFundValueOfTheYearVUVentureBlueChipValueLow_Basic,
VUVentureBlueChipValue_EverCash1,
VUVentureBlueChipValue_EverCash6,
VUVentureBlueChipValue_EverCash55,
VUVentureBlueChipValue_EverCash60,
PrevVUVentureBlueChipValue_EverCash55,
PrevVUVentureBlueChipValue_EverCash60,
PaidOpChargeVentureBlueChip_H,
PaidOpChargeVentureBlueChip_M,
PaidOpChargeVentureBlueChip_L,
ProjDeductionVentureBlueChip_H,
ProjDeductionVentureBlueChip_M,
ProjDeductionVentureBlueChip_L,
ReinvestCashFundVentureBlueChip_H,
ReinvestCashFundVentureBlueChip_M,
ReinvestCashFundVentureBlueChip_L,
ProjValAfterReinvestVentureBlueChip_H,
ProjValAfterReinvestVentureBlueChip_M,
ProjValAfterReinvestVentureBlueChip_L,
PrevPaidUpOptionTable_VentureBlueChip_High,
PrevPaidUpOptionTable_VentureBlueChip_Median,
PrevPaidUpOptionTable_VentureBlueChip_Low,
ProjValueMaturityVentureBlueChip_H,
ProjValueMaturityVentureBlueChip_M,
ProjValueMaturityVentureBlueChip_L,
ProjWithdrawVentureBlueChip_H,
ProjWithdrawVentureBlueChip_M,
ProjWithdrawVentureBlueChip_L,
ProjReinvestVentureBlueChip_H,
ProjReinvestVentureBlueChip_M,ProjReinvestVentureBlueChip_L,
ReinvestAmount2023toVentureBlueChip_H,ReinvestAmount2025toVentureBlueChip_H,ReinvestAmount2028toVentureBlueChip_H,
ReinvestAmount2030toVentureBlueChip_H,ReinvestAmount2035toVentureBlueChip_H,ReinvestAmount2023toVentureBlueChip_M,
ReinvestAmount2025toVentureBlueChip_M,ReinvestAmount2028toVentureBlueChip_M,ReinvestAmount2030toVentureBlueChip_M,
ReinvestAmount2035toVentureBlueChip_M,ReinvestAmount2023toVentureBlueChip_L,ReinvestAmount2025toVentureBlueChip_L,
ReinvestAmount2028toVentureBlueChip_L,ReinvestAmount2030toVentureBlueChip_L,ReinvestAmount2035toVentureBlueChip_L;


double VUVentureDana_FundAllo_Percen,
VUVentureDanaFactor,
VUVentureDanaOptFactor,
VUVentureDanaValueHigh,
VUVentureDanaPrevValueHigh,
MonthVUVentureDanaPrevValueHigh,
VUVentureDanaValueMedian,
VUVentureDanaValueLow,
VUVentureDanaPrevValueMedian,
VUVentureDanaPrevValueLow,
MonthVUVentureDanaPrevValueMedian,
MonthVUVentureDanaPrevValueLow,
Fund2023ReinvestToVentureDanaFac,
Fund2025ReinvestToVentureDanaFac,
Fund2028ReinvestToVentureDanaFac,
Fund2030ReinvestToVentureDanaFac,
Fund2035ReinvestToVentureDanaFac,
MonthVUVentureDanaValueHigh,
MonthVUVentureDanaValueMedian,
MonthVUVentureDanaValueLow,
RiderVUVentureDanaValueHigh,
RiderVUVentureDanaPrevValueHigh,
RiderMonthVUVentureDanaPrevValueHigh,
RiderVUVentureDanaValueMedian,
RiderVUVentureDanaValueLow,
RiderVUVentureDanaPrevValueMedian,
RiderVUVentureDanaPrevValueLow,
RiderMonthVUVentureDanaPrevValueMedian,
RiderMonthVUVentureDanaPrevValueLow,
RiderMonthVUVentureDanaValueHigh,
RiderMonthVUVentureDanaValueMedian,
RiderMonthVUVentureDanaValueLow,
FundValueOfTheYearVUVentureDanaValueHigh_Basic,
FundValueOfTheYearVUVentureDanaValueMedian_Basic,
FundValueOfTheYearVUVentureDanaValueLow_Basic,
MonthFundValueOfTheYearVUVentureDanaValueHigh_Basic,
MonthFundValueOfTheYearVUVentureDanaValueMedian_Basic,
MonthFundValueOfTheYearVUVentureDanaValueLow_Basic,
RiderFundValueOfTheYearVUVentureDanaValueHigh_Basic,
RiderFundValueOfTheYearVUVentureDanaValueMedian_Basic,
RiderFundValueOfTheYearVUVentureDanaValueLow_Basic,
RiderMonthFundValueOfTheYearVUVentureDanaValueHigh_Basic,
RiderMonthFundValueOfTheYearVUVentureDanaValueMedian_Basic,
RiderMonthFundValueOfTheYearVUVentureDanaValueLow_Basic,
VUVentureDanaValue_EverCash1,
VUVentureDanaValue_EverCash6,
VUVentureDanaValue_EverCash55,
VUVentureDanaValue_EverCash60,
PrevVUVentureDanaValue_EverCash55,
PrevVUVentureDanaValue_EverCash60,
PaidOpChargeVentureDana_H,
PaidOpChargeVentureDana_M,
PaidOpChargeVentureDana_L,
ProjDeductionVentureDana_H,
ProjDeductionVentureDana_M,
ProjDeductionVentureDana_L,
ReinvestCashFundVentureDana_H,
ReinvestCashFundVentureDana_M,
ReinvestCashFundVentureDana_L,
ProjValAfterReinvestVentureDana_H,
ProjValAfterReinvestVentureDana_M,
ProjValAfterReinvestVentureDana_L,
PrevPaidUpOptionTable_VentureDana_High,
PrevPaidUpOptionTable_VentureDana_Median,
PrevPaidUpOptionTable_VentureDana_Low,
ProjValueMaturityVentureDana_H,
ProjValueMaturityVentureDana_M,
ProjValueMaturityVentureDana_L,
ProjWithdrawVentureDana_H,
ProjWithdrawVentureDana_M,
ProjWithdrawVentureDana_L,
ProjReinvestVentureDana_H,
ProjReinvestVentureDana_M,ProjReinvestVentureDana_L,
ReinvestAmount2023toVentureDana_H,ReinvestAmount2025toVentureDana_H,ReinvestAmount2028toVentureDana_H,
ReinvestAmount2030toVentureDana_H,ReinvestAmount2035toVentureDana_H,ReinvestAmount2023toVentureDana_M,
ReinvestAmount2025toVentureDana_M,ReinvestAmount2028toVentureDana_M,ReinvestAmount2030toVentureDana_M,
ReinvestAmount2035toVentureDana_M,ReinvestAmount2023toVentureDana_L,ReinvestAmount2025toVentureDana_L,
ReinvestAmount2028toVentureDana_L,ReinvestAmount2030toVentureDana_L,ReinvestAmount2035toVentureDana_L;


double VUVentureManaged_FundAllo_Percen,
VUVentureManagedFactor,
VUVentureManagedOptFactor,
VUVentureManagedValueHigh,
VUVentureManagedPrevValueHigh,
MonthVUVentureManagedPrevValueHigh,
VUVentureManagedValueMedian,
VUVentureManagedValueLow,
VUVentureManagedPrevValueMedian,
VUVentureManagedPrevValueLow,
MonthVUVentureManagedPrevValueMedian,
MonthVUVentureManagedPrevValueLow,
Fund2023ReinvestToVentureManagedFac,
Fund2025ReinvestToVentureManagedFac,
Fund2028ReinvestToVentureManagedFac,
Fund2030ReinvestToVentureManagedFac,
Fund2035ReinvestToVentureManagedFac,
MonthVUVentureManagedValueHigh,
MonthVUVentureManagedValueMedian,
MonthVUVentureManagedValueLow,
RiderVUVentureManagedValueHigh,
RiderVUVentureManagedPrevValueHigh,
RiderMonthVUVentureManagedPrevValueHigh,
RiderVUVentureManagedValueMedian,
RiderVUVentureManagedValueLow,
RiderVUVentureManagedPrevValueMedian,
RiderVUVentureManagedPrevValueLow,
RiderMonthVUVentureManagedPrevValueMedian,
RiderMonthVUVentureManagedPrevValueLow,
RiderMonthVUVentureManagedValueHigh,
RiderMonthVUVentureManagedValueMedian,
RiderMonthVUVentureManagedValueLow,
FundValueOfTheYearVUVentureManagedValueHigh_Basic,
FundValueOfTheYearVUVentureManagedValueMedian_Basic,
FundValueOfTheYearVUVentureManagedValueLow_Basic,
MonthFundValueOfTheYearVUVentureManagedValueHigh_Basic,
MonthFundValueOfTheYearVUVentureManagedValueMedian_Basic,
MonthFundValueOfTheYearVUVentureManagedValueLow_Basic,
RiderFundValueOfTheYearVUVentureManagedValueHigh_Basic,
RiderFundValueOfTheYearVUVentureManagedValueMedian_Basic,
RiderFundValueOfTheYearVUVentureManagedValueLow_Basic,
RiderMonthFundValueOfTheYearVUVentureManagedValueHigh_Basic,
RiderMonthFundValueOfTheYearVUVentureManagedValueMedian_Basic,
RiderMonthFundValueOfTheYearVUVentureManagedValueLow_Basic,
VUVentureManagedValue_EverCash1,
VUVentureManagedValue_EverCash6,
VUVentureManagedValue_EverCash55,
VUVentureManagedValue_EverCash60,
PrevVUVentureManagedValue_EverCash55,
PrevVUVentureManagedValue_EverCash60,
PaidOpChargeVentureManaged_H,
PaidOpChargeVentureManaged_M,
PaidOpChargeVentureManaged_L,
ProjDeductionVentureManaged_H,
ProjDeductionVentureManaged_M,
ProjDeductionVentureManaged_L,
ReinvestCashFundVentureManaged_H,
ReinvestCashFundVentureManaged_M,
ReinvestCashFundVentureManaged_L,
ProjValAfterReinvestVentureManaged_H,
ProjValAfterReinvestVentureManaged_M,
ProjValAfterReinvestVentureManaged_L,
PrevPaidUpOptionTable_VentureManaged_High,
PrevPaidUpOptionTable_VentureManaged_Median,
PrevPaidUpOptionTable_VentureManaged_Low,
ProjValueMaturityVentureManaged_H,
ProjValueMaturityVentureManaged_M,
ProjValueMaturityVentureManaged_L,
ProjWithdrawVentureManaged_H,
ProjWithdrawVentureManaged_M,
ProjWithdrawVentureManaged_L,
ProjReinvestVentureManaged_H,
ProjReinvestVentureManaged_M,ProjReinvestVentureManaged_L,
ReinvestAmount2023toVentureManaged_H,ReinvestAmount2025toVentureManaged_H,ReinvestAmount2028toVentureManaged_H,
ReinvestAmount2030toVentureManaged_H,ReinvestAmount2035toVentureManaged_H,ReinvestAmount2023toVentureManaged_M,
ReinvestAmount2025toVentureManaged_M,ReinvestAmount2028toVentureManaged_M,ReinvestAmount2030toVentureManaged_M,
ReinvestAmount2035toVentureManaged_M,ReinvestAmount2023toVentureManaged_L,ReinvestAmount2025toVentureManaged_L,
ReinvestAmount2028toVentureManaged_L,ReinvestAmount2030toVentureManaged_L,ReinvestAmount2035toVentureManaged_L;


double VUVentureIncome_FundAllo_Percen,
VUVentureIncomeFactor,
VUVentureIncomeOptFactor,
VUVentureIncomeValueHigh,
VUVentureIncomePrevValueHigh,
MonthVUVentureIncomePrevValueHigh,
VUVentureIncomeValueMedian,
VUVentureIncomeValueLow,
VUVentureIncomePrevValueMedian,
VUVentureIncomePrevValueLow,
MonthVUVentureIncomePrevValueMedian,
MonthVUVentureIncomePrevValueLow,
Fund2023ReinvestToVentureIncomeFac,
Fund2025ReinvestToVentureIncomeFac,
Fund2028ReinvestToVentureIncomeFac,
Fund2030ReinvestToVentureIncomeFac,
Fund2035ReinvestToVentureIncomeFac,
MonthVUVentureIncomeValueHigh,
MonthVUVentureIncomeValueMedian,
MonthVUVentureIncomeValueLow,
RiderVUVentureIncomeValueHigh,
RiderVUVentureIncomePrevValueHigh,
RiderMonthVUVentureIncomePrevValueHigh,
RiderVUVentureIncomeValueMedian,
RiderVUVentureIncomeValueLow,
RiderVUVentureIncomePrevValueMedian,
RiderVUVentureIncomePrevValueLow,
RiderMonthVUVentureIncomePrevValueMedian,
RiderMonthVUVentureIncomePrevValueLow,
RiderMonthVUVentureIncomeValueHigh,
RiderMonthVUVentureIncomeValueMedian,
RiderMonthVUVentureIncomeValueLow,
FundValueOfTheYearVUVentureIncomeValueHigh_Basic,
FundValueOfTheYearVUVentureIncomeValueMedian_Basic,
FundValueOfTheYearVUVentureIncomeValueLow_Basic,
MonthFundValueOfTheYearVUVentureIncomeValueHigh_Basic,
MonthFundValueOfTheYearVUVentureIncomeValueMedian_Basic,
MonthFundValueOfTheYearVUVentureIncomeValueLow_Basic,
RiderFundValueOfTheYearVUVentureIncomeValueHigh_Basic,
RiderFundValueOfTheYearVUVentureIncomeValueMedian_Basic,
RiderFundValueOfTheYearVUVentureIncomeValueLow_Basic,
RiderMonthFundValueOfTheYearVUVentureIncomeValueHigh_Basic,
RiderMonthFundValueOfTheYearVUVentureIncomeValueMedian_Basic,
RiderMonthFundValueOfTheYearVUVentureIncomeValueLow_Basic,
VUVentureIncomeValue_EverCash1,
VUVentureIncomeValue_EverCash6,
VUVentureIncomeValue_EverCash55,
VUVentureIncomeValue_EverCash60,
PrevVUVentureIncomeValue_EverCash55,
PrevVUVentureIncomeValue_EverCash60,
PaidOpChargeVentureIncome_H,
PaidOpChargeVentureIncome_M,
PaidOpChargeVentureIncome_L,
ProjDeductionVentureIncome_H,
ProjDeductionVentureIncome_M,
ProjDeductionVentureIncome_L,
ReinvestCashFundVentureIncome_H,
ReinvestCashFundVentureIncome_M,
ReinvestCashFundVentureIncome_L,
ProjValAfterReinvestVentureIncome_H,
ProjValAfterReinvestVentureIncome_M,
ProjValAfterReinvestVentureIncome_L,
PrevPaidUpOptionTable_VentureIncome_High,
PrevPaidUpOptionTable_VentureIncome_Median,
PrevPaidUpOptionTable_VentureIncome_Low,
ProjValueMaturityVentureIncome_H,
ProjValueMaturityVentureIncome_M,
ProjValueMaturityVentureIncome_L,
ProjWithdrawVentureIncome_H,
ProjWithdrawVentureIncome_M,
ProjWithdrawVentureIncome_L,
ProjReinvestVentureIncome_H,
ProjReinvestVentureIncome_M,ProjReinvestVentureIncome_L,
ReinvestAmount2023toVentureIncome_H,ReinvestAmount2025toVentureIncome_H,ReinvestAmount2028toVentureIncome_H,
ReinvestAmount2030toVentureIncome_H,ReinvestAmount2035toVentureIncome_H,ReinvestAmount2023toVentureIncome_M,
ReinvestAmount2025toVentureIncome_M,ReinvestAmount2028toVentureIncome_M,ReinvestAmount2030toVentureIncome_M,
ReinvestAmount2035toVentureIncome_M,ReinvestAmount2023toVentureIncome_L,ReinvestAmount2025toVentureIncome_L,
ReinvestAmount2028toVentureIncome_L,ReinvestAmount2030toVentureIncome_L,ReinvestAmount2035toVentureIncome_L;

double VUVenture6666_FundAllo_Percen,
VUVenture6666Factor,
VUVenture6666OptFactor,
VUVenture6666ValueHigh,
VUVenture6666PrevValueHigh,
MonthVUVenture6666PrevValueHigh,
VUVenture6666ValueMedian,
VUVenture6666ValueLow,
VUVenture6666PrevValueMedian,
VUVenture6666PrevValueLow,
MonthVUVenture6666PrevValueMedian,
MonthVUVenture6666PrevValueLow,
Fund2023ReinvestToVenture6666Fac,
Fund2025ReinvestToVenture6666Fac,
Fund2028ReinvestToVenture6666Fac,
Fund2030ReinvestToVenture6666Fac,
Fund2035ReinvestToVenture6666Fac,
MonthVUVenture6666ValueHigh,
MonthVUVenture6666ValueMedian,
MonthVUVenture6666ValueLow,
RiderVUVenture6666ValueHigh,
RiderVUVenture6666PrevValueHigh,
RiderMonthVUVenture6666PrevValueHigh,
RiderVUVenture6666ValueMedian,
RiderVUVenture6666ValueLow,
RiderVUVenture6666PrevValueMedian,
RiderVUVenture6666PrevValueLow,
RiderMonthVUVenture6666PrevValueMedian,
RiderMonthVUVenture6666PrevValueLow,
RiderMonthVUVenture6666ValueHigh,
RiderMonthVUVenture6666ValueMedian,
RiderMonthVUVenture6666ValueLow,
FundValueOfTheYearVUVenture6666ValueHigh_Basic,
FundValueOfTheYearVUVenture6666ValueMedian_Basic,
FundValueOfTheYearVUVenture6666ValueLow_Basic,
MonthFundValueOfTheYearVUVenture6666ValueHigh_Basic,
MonthFundValueOfTheYearVUVenture6666ValueMedian_Basic,
MonthFundValueOfTheYearVUVenture6666ValueLow_Basic,
RiderFundValueOfTheYearVUVenture6666ValueHigh_Basic,
RiderFundValueOfTheYearVUVenture6666ValueMedian_Basic,
RiderFundValueOfTheYearVUVenture6666ValueLow_Basic,
RiderMonthFundValueOfTheYearVUVenture6666ValueHigh_Basic,
RiderMonthFundValueOfTheYearVUVenture6666ValueMedian_Basic,
RiderMonthFundValueOfTheYearVUVenture6666ValueLow_Basic,
VUVenture6666Value_EverCash1,
VUVenture6666Value_EverCash6,
VUVenture6666Value_EverCash55,
VUVenture6666Value_EverCash60,
PrevVUVenture6666Value_EverCash55,
PrevVUVenture6666Value_EverCash60,
PaidOpChargeVenture6666_H,
PaidOpChargeVenture6666_M,
PaidOpChargeVenture6666_L,
ProjDeductionVenture6666_H,
ProjDeductionVenture6666_M,
ProjDeductionVenture6666_L,
ReinvestCashFundVenture6666_H,
ReinvestCashFundVenture6666_M,
ReinvestCashFundVenture6666_L,
ProjValAfterReinvestVenture6666_H,
ProjValAfterReinvestVenture6666_M,
ProjValAfterReinvestVenture6666_L,
PrevPaidUpOptionTable_Venture6666_High,
PrevPaidUpOptionTable_Venture6666_Median,
PrevPaidUpOptionTable_Venture6666_Low,
ProjValueMaturityVenture6666_H,
ProjValueMaturityVenture6666_M,
ProjValueMaturityVenture6666_L,
ProjWithdrawVenture6666_H,
ProjWithdrawVenture6666_M,
ProjWithdrawVenture6666_L,
ProjReinvestVenture6666_H,
ProjReinvestVenture6666_M,ProjReinvestVenture6666_L,
ReinvestAmount2023toVenture6666_H,ReinvestAmount2025toVenture6666_H,ReinvestAmount2028toVenture6666_H,
ReinvestAmount2030toVenture6666_H,ReinvestAmount2035toVenture6666_H,ReinvestAmount2023toVenture6666_M,
ReinvestAmount2025toVenture6666_M,ReinvestAmount2028toVenture6666_M,ReinvestAmount2030toVenture6666_M,
ReinvestAmount2035toVenture6666_M,ReinvestAmount2023toVenture6666_L,ReinvestAmount2025toVenture6666_L,
ReinvestAmount2028toVenture6666_L,ReinvestAmount2030toVenture6666_L,ReinvestAmount2035toVenture6666_L;

double VUVenture7777_FundAllo_Percen,
VUVenture7777Factor,
VUVenture7777OptFactor,
VUVenture7777ValueHigh,
VUVenture7777PrevValueHigh,
MonthVUVenture7777PrevValueHigh,
VUVenture7777ValueMedian,
VUVenture7777ValueLow,
VUVenture7777PrevValueMedian,
VUVenture7777PrevValueLow,
MonthVUVenture7777PrevValueMedian,
MonthVUVenture7777PrevValueLow,
Fund2023ReinvestToVenture7777Fac,
Fund2025ReinvestToVenture7777Fac,
Fund2028ReinvestToVenture7777Fac,
Fund2030ReinvestToVenture7777Fac,
Fund2035ReinvestToVenture7777Fac,
MonthVUVenture7777ValueHigh,
MonthVUVenture7777ValueMedian,
MonthVUVenture7777ValueLow,
RiderVUVenture7777ValueHigh,
RiderVUVenture7777PrevValueHigh,
RiderMonthVUVenture7777PrevValueHigh,
RiderVUVenture7777ValueMedian,
RiderVUVenture7777ValueLow,
RiderVUVenture7777PrevValueMedian,
RiderVUVenture7777PrevValueLow,
RiderMonthVUVenture7777PrevValueMedian,
RiderMonthVUVenture7777PrevValueLow,
RiderMonthVUVenture7777ValueHigh,
RiderMonthVUVenture7777ValueMedian,
RiderMonthVUVenture7777ValueLow,
FundValueOfTheYearVUVenture7777ValueHigh_Basic,
FundValueOfTheYearVUVenture7777ValueMedian_Basic,
FundValueOfTheYearVUVenture7777ValueLow_Basic,
MonthFundValueOfTheYearVUVenture7777ValueHigh_Basic,
MonthFundValueOfTheYearVUVenture7777ValueMedian_Basic,
MonthFundValueOfTheYearVUVenture7777ValueLow_Basic,
RiderFundValueOfTheYearVUVenture7777ValueHigh_Basic,
RiderFundValueOfTheYearVUVenture7777ValueMedian_Basic,
RiderFundValueOfTheYearVUVenture7777ValueLow_Basic,
RiderMonthFundValueOfTheYearVUVenture7777ValueHigh_Basic,
RiderMonthFundValueOfTheYearVUVenture7777ValueMedian_Basic,
RiderMonthFundValueOfTheYearVUVenture7777ValueLow_Basic,
VUVenture7777Value_EverCash1,
VUVenture7777Value_EverCash6,
VUVenture7777Value_EverCash55,
VUVenture7777Value_EverCash60,
PrevVUVenture7777Value_EverCash55,
PrevVUVenture7777Value_EverCash60,
PaidOpChargeVenture7777_H,
PaidOpChargeVenture7777_M,
PaidOpChargeVenture7777_L,
ProjDeductionVenture7777_H,
ProjDeductionVenture7777_M,
ProjDeductionVenture7777_L,
ReinvestCashFundVenture7777_H,
ReinvestCashFundVenture7777_M,
ReinvestCashFundVenture7777_L,
ProjValAfterReinvestVenture7777_H,
ProjValAfterReinvestVenture7777_M,
ProjValAfterReinvestVenture7777_L,
PrevPaidUpOptionTable_Venture7777_High,
PrevPaidUpOptionTable_Venture7777_Median,
PrevPaidUpOptionTable_Venture7777_Low,
ProjValueMaturityVenture7777_H,
ProjValueMaturityVenture7777_M,
ProjValueMaturityVenture7777_L,
ProjWithdrawVenture7777_H,
ProjWithdrawVenture7777_M,
ProjWithdrawVenture7777_L,
ProjReinvestVenture7777_H,
ProjReinvestVenture7777_M,ProjReinvestVenture7777_L,
ReinvestAmount2023toVenture7777_H,ReinvestAmount2025toVenture7777_H,ReinvestAmount2028toVenture7777_H,
ReinvestAmount2030toVenture7777_H,ReinvestAmount2035toVenture7777_H,ReinvestAmount2023toVenture7777_M,
ReinvestAmount2025toVenture7777_M,ReinvestAmount2028toVenture7777_M,ReinvestAmount2030toVenture7777_M,
ReinvestAmount2035toVenture7777_M,ReinvestAmount2023toVenture7777_L,ReinvestAmount2025toVenture7777_L,
ReinvestAmount2028toVenture7777_L,ReinvestAmount2030toVenture7777_L,ReinvestAmount2035toVenture7777_L;

double VUVenture8888_FundAllo_Percen,
VUVenture8888Factor,
VUVenture8888OptFactor,
VUVenture8888ValueHigh,
VUVenture8888PrevValueHigh,
MonthVUVenture8888PrevValueHigh,
VUVenture8888ValueMedian,
VUVenture8888ValueLow,
VUVenture8888PrevValueMedian,
VUVenture8888PrevValueLow,
MonthVUVenture8888PrevValueMedian,
MonthVUVenture8888PrevValueLow,
Fund2023ReinvestToVenture8888Fac,
Fund2025ReinvestToVenture8888Fac,
Fund2028ReinvestToVenture8888Fac,
Fund2030ReinvestToVenture8888Fac,
Fund2035ReinvestToVenture8888Fac,
MonthVUVenture8888ValueHigh,
MonthVUVenture8888ValueMedian,
MonthVUVenture8888ValueLow,
RiderVUVenture8888ValueHigh,
RiderVUVenture8888PrevValueHigh,
RiderMonthVUVenture8888PrevValueHigh,
RiderVUVenture8888ValueMedian,
RiderVUVenture8888ValueLow,
RiderVUVenture8888PrevValueMedian,
RiderVUVenture8888PrevValueLow,
RiderMonthVUVenture8888PrevValueMedian,
RiderMonthVUVenture8888PrevValueLow,
RiderMonthVUVenture8888ValueHigh,
RiderMonthVUVenture8888ValueMedian,
RiderMonthVUVenture8888ValueLow,
FundValueOfTheYearVUVenture8888ValueHigh_Basic,
FundValueOfTheYearVUVenture8888ValueMedian_Basic,
FundValueOfTheYearVUVenture8888ValueLow_Basic,
MonthFundValueOfTheYearVUVenture8888ValueHigh_Basic,
MonthFundValueOfTheYearVUVenture8888ValueMedian_Basic,
MonthFundValueOfTheYearVUVenture8888ValueLow_Basic,
RiderFundValueOfTheYearVUVenture8888ValueHigh_Basic,
RiderFundValueOfTheYearVUVenture8888ValueMedian_Basic,
RiderFundValueOfTheYearVUVenture8888ValueLow_Basic,
RiderMonthFundValueOfTheYearVUVenture8888ValueHigh_Basic,
RiderMonthFundValueOfTheYearVUVenture8888ValueMedian_Basic,
RiderMonthFundValueOfTheYearVUVenture8888ValueLow_Basic,
VUVenture8888Value_EverCash1,
VUVenture8888Value_EverCash6,
VUVenture8888Value_EverCash55,
VUVenture8888Value_EverCash60,
PrevVUVenture8888Value_EverCash55,
PrevVUVenture8888Value_EverCash60,
PaidOpChargeVenture8888_H,
PaidOpChargeVenture8888_M,
PaidOpChargeVenture8888_L,
ProjDeductionVenture8888_H,
ProjDeductionVenture8888_M,
ProjDeductionVenture8888_L,
ReinvestCashFundVenture8888_H,
ReinvestCashFundVenture8888_M,
ReinvestCashFundVenture8888_L,
ProjValAfterReinvestVenture8888_H,
ProjValAfterReinvestVenture8888_M,
ProjValAfterReinvestVenture8888_L,
PrevPaidUpOptionTable_Venture8888_High,
PrevPaidUpOptionTable_Venture8888_Median,
PrevPaidUpOptionTable_Venture8888_Low,
ProjValueMaturityVenture8888_H,
ProjValueMaturityVenture8888_M,
ProjValueMaturityVenture8888_L,
ProjWithdrawVenture8888_H,
ProjWithdrawVenture8888_M,
ProjWithdrawVenture8888_L,
ProjReinvestVenture8888_H,
ProjReinvestVenture8888_M,ProjReinvestVenture8888_L,
ReinvestAmount2023toVenture8888_H,ReinvestAmount2025toVenture8888_H,ReinvestAmount2028toVenture8888_H,
ReinvestAmount2030toVenture8888_H,ReinvestAmount2035toVenture8888_H,ReinvestAmount2023toVenture8888_M,
ReinvestAmount2025toVenture8888_M,ReinvestAmount2028toVenture8888_M,ReinvestAmount2030toVenture8888_M,
ReinvestAmount2035toVenture8888_M,ReinvestAmount2023toVenture8888_L,ReinvestAmount2025toVenture8888_L,
ReinvestAmount2028toVenture8888_L,ReinvestAmount2030toVenture8888_L,ReinvestAmount2035toVenture8888_L;

double VUVenture9999_FundAllo_Percen,
VUVenture9999Factor,
VUVenture9999OptFactor,
VUVenture9999ValueHigh,
VUVenture9999PrevValueHigh,
MonthVUVenture9999PrevValueHigh,
VUVenture9999ValueMedian,
VUVenture9999ValueLow,
VUVenture9999PrevValueMedian,
VUVenture9999PrevValueLow,
MonthVUVenture9999PrevValueMedian,
MonthVUVenture9999PrevValueLow,
Fund2023ReinvestToVenture9999Fac,
Fund2025ReinvestToVenture9999Fac,
Fund2028ReinvestToVenture9999Fac,
Fund2030ReinvestToVenture9999Fac,
Fund2035ReinvestToVenture9999Fac,
MonthVUVenture9999ValueHigh,
MonthVUVenture9999ValueMedian,
MonthVUVenture9999ValueLow,
RiderVUVenture9999ValueHigh,
RiderVUVenture9999PrevValueHigh,
RiderMonthVUVenture9999PrevValueHigh,
RiderVUVenture9999ValueMedian,
RiderVUVenture9999ValueLow,
RiderVUVenture9999PrevValueMedian,
RiderVUVenture9999PrevValueLow,
RiderMonthVUVenture9999PrevValueMedian,
RiderMonthVUVenture9999PrevValueLow,
RiderMonthVUVenture9999ValueHigh,
RiderMonthVUVenture9999ValueMedian,
RiderMonthVUVenture9999ValueLow,
FundValueOfTheYearVUVenture9999ValueHigh_Basic,
FundValueOfTheYearVUVenture9999ValueMedian_Basic,
FundValueOfTheYearVUVenture9999ValueLow_Basic,
MonthFundValueOfTheYearVUVenture9999ValueHigh_Basic,
MonthFundValueOfTheYearVUVenture9999ValueMedian_Basic,
MonthFundValueOfTheYearVUVenture9999ValueLow_Basic,
RiderFundValueOfTheYearVUVenture9999ValueHigh_Basic,
RiderFundValueOfTheYearVUVenture9999ValueMedian_Basic,
RiderFundValueOfTheYearVUVenture9999ValueLow_Basic,
RiderMonthFundValueOfTheYearVUVenture9999ValueHigh_Basic,
RiderMonthFundValueOfTheYearVUVenture9999ValueMedian_Basic,
RiderMonthFundValueOfTheYearVUVenture9999ValueLow_Basic,
VUVenture9999Value_EverCash1,
VUVenture9999Value_EverCash6,
VUVenture9999Value_EverCash55,
VUVenture9999Value_EverCash60,
PrevVUVenture9999Value_EverCash55,
PrevVUVenture9999Value_EverCash60,
PaidOpChargeVenture9999_H,
PaidOpChargeVenture9999_M,
PaidOpChargeVenture9999_L,
ProjDeductionVenture9999_H,
ProjDeductionVenture9999_M,
ProjDeductionVenture9999_L,
ReinvestCashFundVenture9999_H,
ReinvestCashFundVenture9999_M,
ReinvestCashFundVenture9999_L,
ProjValAfterReinvestVenture9999_H,
ProjValAfterReinvestVenture9999_M,
ProjValAfterReinvestVenture9999_L,
PrevPaidUpOptionTable_Venture9999_High,
PrevPaidUpOptionTable_Venture9999_Median,
PrevPaidUpOptionTable_Venture9999_Low,
ProjValueMaturityVenture9999_H,
ProjValueMaturityVenture9999_M,
ProjValueMaturityVenture9999_L,
ProjWithdrawVenture9999_H,
ProjWithdrawVenture9999_M,
ProjWithdrawVenture9999_L,
ProjReinvestVenture9999_H,
ProjReinvestVenture9999_M,ProjReinvestVenture9999_L,
ReinvestAmount2023toVenture9999_H,ReinvestAmount2025toVenture9999_H,ReinvestAmount2028toVenture9999_H,
ReinvestAmount2030toVenture9999_H,ReinvestAmount2035toVenture9999_H,ReinvestAmount2023toVenture9999_M,
ReinvestAmount2025toVenture9999_M,ReinvestAmount2028toVenture9999_M,ReinvestAmount2030toVenture9999_M,
ReinvestAmount2035toVenture9999_M,ReinvestAmount2023toVenture9999_L,ReinvestAmount2025toVenture9999_L,
ReinvestAmount2028toVenture9999_L,ReinvestAmount2030toVenture9999_L,ReinvestAmount2035toVenture9999_L;

@implementation EverLifeViewController
@synthesize CustCode,SINo,Age,sex,Name, BasicSA, requestOccLoading, getPlanCommDate, requestPlanCommDate, requestDOB, getDOB;
@synthesize getSexLA,requestSexLA, getSmokerLA, requestSmokerLA, SimpleOrDetail, getOccpClass, requestOccpClass;
@synthesize OtherRiderCode,OtherRiderDeductible,OtherRiderDesc,OtherRiderHL,OtherRiderHLP,OtherRiderHLPTerm,OtherRiderHLTerm;
@synthesize OtherRiderPlanOption,OtherRiderSA,OtherRiderTerm,OtherRiderPaymentTerm, OtherRiderPremium;
@synthesize UnitizeRiderCode,UnitizeRiderDeductible,UnitizeRiderHL,UnitizeRiderHLPct, CheckSustainLevel;
@synthesize UnitizeRiderPlanChoice,UnitizeRiderSA,UnitizeRiderTerm, UnitizeRiderPremium,UniTotalRiderPremAtPolYear;
@synthesize UniTotalRiderPremWithAlloc, OverallAddTPDBegin, OverallAddTPDEOY,OverallEOYTotalOADBear,OverallEOYTotalOADBull,OverallEOYTotalOADFlat;
@synthesize OverallEOYTotalTPDBear,OverallEOYTotalTPDBull,OverallEOYTotalTPDFlat,OverallFullSurrenderValue,OverallMonthlyIncome,OverallOADBegin;
@synthesize OverallOADEOY,OverallTotalFundSurrenderValueBear,OverallTotalFundSurrenderValueBull,OverallTotalFundSurrenderValueFlat,OverallTotalPremiumPaid;
@synthesize OverallTPDBegin,OverallTPDEOY,OverallYearlyIncome, StopExec, StopMessage1,StopMessage2,StopMessage3,StopMessage4, HeaderMsg, PolicySustainYear;
@synthesize Solution1,Solution2, EngOrBm, getPlanCode, requestPlanCode, BullSurrender, FlatSurrender, BearSurrender, NeedFurtherInfo;
@synthesize PDFCreator, IsEDD;

- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil
{
    self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];
    if (self) {
        // Custom initialization
    }
    return self;
}

- (void)viewDidLoad
{
    [super viewDidLoad];
	// Do any additional setup after loading the view.
	
	NSArray *dirPaths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);
    NSString *docsDir = [dirPaths objectAtIndex:0];
    databasePath = [[NSString alloc] initWithString: [docsDir stringByAppendingPathComponent: @"hladb.sqlite"]];
    UL_RatesDatabasePath = [[NSString alloc] initWithString: [docsDir stringByAppendingPathComponent: @"UL_Rates.sqlite"]];
    
	if ([SimpleOrDetail isEqualToString:@"Detail"]) {
		
		sqlite3_stmt *statement;
		NSString *querySQL;
		
		if ([NeedFurtherInfo isEqualToString:@"YES"]) {
			if (sqlite3_open([databasePath UTF8String], &contactDB) == SQLITE_OK)
			{
				querySQL = [NSString stringWithFormat:@"Select ComDate, QuotationLang, plancode from UL_Details where sino = '%@' ", SINo];
				
				if (sqlite3_prepare_v2(contactDB, [querySQL UTF8String], -1, &statement, NULL) == SQLITE_OK)
				{
					if (sqlite3_step(statement) == SQLITE_ROW)
					{
						getPlanCommDate = [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 0)];
						EngOrBm = [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 1)];
						getPlanCode = [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 2)];
					}
					sqlite3_finalize(statement);
				}
				
				querySQL = [NSString stringWithFormat:@"Select CustCode From UL_LAPayor where sino = '%@' AND PTypeCode = 'LA' AND Seq = '1' ", SINo];
				
				if (sqlite3_prepare_v2(contactDB, [querySQL UTF8String], -1, &statement, NULL) == SQLITE_OK)
				{
					if (sqlite3_step(statement) == SQLITE_ROW)
					{
						CustCode = [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 0)];
					}
					sqlite3_finalize(statement);
				}
				
				querySQL = [NSString stringWithFormat:@"Select CustCode From UL_LAPayor where sino = '%@' AND PTypeCode = 'LA' AND Seq = '2' ", SINo];
				
				if (sqlite3_prepare_v2(contactDB, [querySQL UTF8String], -1, &statement, NULL) == SQLITE_OK)
				{
					if (sqlite3_step(statement) == SQLITE_ROW)
					{
						CustCode2nd = [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 0)];
					}
					else{
						CustCode2nd = @"";
					}
					sqlite3_finalize(statement);
				}
				
				querySQL = [NSString stringWithFormat:@"Select CustCode From UL_LAPayor where sino = '%@' AND PTypeCode = 'PY' AND Seq = '1' ",  SINo];
				
				if (sqlite3_prepare_v2(contactDB, [querySQL UTF8String], -1, &statement, NULL) == SQLITE_OK)
				{
					if (sqlite3_step(statement) == SQLITE_ROW)
					{
						CustCodePayor = [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 0)];
					}
					else{
						CustCodePayor = @"";
					}
					sqlite3_finalize(statement);
				}
				
				querySQL = [NSString stringWithFormat:@"Select Sex, Smoker, DOB, OccpCode From Clt_Profile where custcode = '%@' ", CustCode];
				
				if (sqlite3_prepare_v2(contactDB, [querySQL UTF8String], -1, &statement, NULL) == SQLITE_OK)
				{
					if (sqlite3_step(statement) == SQLITE_ROW)
					{
						getSexLA = [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 0)];
						getSmokerLA = [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 1)];
						getDOB = [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 2)];
						OccpCode = [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 3)];
					}
					sqlite3_finalize(statement);
				}
				
				querySQL = [NSString stringWithFormat:@"Select Sex, Smoker, DOB, OccpCode From Clt_Profile where custcode = '%@' ", CustCode2nd];
				
				if (sqlite3_prepare_v2(contactDB, [querySQL UTF8String], -1, &statement, NULL) == SQLITE_OK)
				{
					if (sqlite3_step(statement) == SQLITE_ROW)
					{
						getSex2nd = [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 0)];
						getSmoker2nd = [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 1)];
						getDOB2nd = [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 2)];
						OccpCode2nd = [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 3)];
					}
					sqlite3_finalize(statement);
				}
				
				querySQL = [NSString stringWithFormat:@"Select Sex, Smoker, DOB, OccpCode From Clt_Profile where custcode = '%@' ", CustCodePayor];
				
				if (sqlite3_prepare_v2(contactDB, [querySQL UTF8String], -1, &statement, NULL) == SQLITE_OK)
				{
					if (sqlite3_step(statement) == SQLITE_ROW)
					{
						getSexPayor = [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 0)];
						getSmokerPayor = [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 1)];
						getDOBPayor = [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 2)];
						OccpCodePayor = [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 3)];
					}
					sqlite3_finalize(statement);
				}
				
				querySQL = [NSString stringWithFormat:@"Select Class,OccLoading_UL From Adm_Occp_Loading_Penta where occpcode = '%@' ", OccpCode];
				
				if (sqlite3_prepare_v2(contactDB, [querySQL UTF8String], -1, &statement, NULL) == SQLITE_OK)
				{
					if (sqlite3_step(statement) == SQLITE_ROW)
					{
						getOccpClass = [[[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 0)] intValue];
						getOccLoading = [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 1)];
					}
					sqlite3_finalize(statement);
				}
				
				
				sqlite3_close(contactDB);
			}
		}
		else{
			getSmokerLA = [self.requestSmokerLA description];
			getOccLoading = [self.requestOccLoading description];
			getPlanCommDate = [self.requestPlanCommDate description];
			getDOB = [self.requestDOB description];
			getSexLA = [self.requestSexLA description];
			getOccpClass = self.requestOccpClass;
			getPlanCode = self.requestPlanCode;
		}
		
		
		
		
		OtherRiderCode = [[NSMutableArray alloc] init];
		OtherRiderDeductible= [[NSMutableArray alloc] init];
		OtherRiderDesc= [[NSMutableArray alloc] init];
		OtherRiderHL= [[NSMutableArray alloc] init];
		OtherRiderHLP= [[NSMutableArray alloc] init];
		OtherRiderHLPTerm= [[NSMutableArray alloc] init];
		OtherRiderHLTerm= [[NSMutableArray alloc] init];
		OtherRiderPlanOption= [[NSMutableArray alloc] init];
		OtherRiderSA = [[NSMutableArray alloc] init];
		OtherRiderTerm= [[NSMutableArray alloc] init];
		OtherRiderPremium = [[NSMutableArray alloc] init];
		OtherRiderPaymentTerm= [[NSMutableArray alloc] init];
        OtherRiderPaymentChoice = [[NSMutableArray alloc] init];
		OtherRiderLoadingPremium = [[NSMutableArray alloc] init];
        OtherRiderPTypeCode = [[NSMutableArray alloc] init];
		OtherRiderPTypeSeq = [[NSMutableArray alloc] init];
        
		UnitizeRiderCode = [[NSMutableArray alloc] init ];
		UnitizeRiderSA = [[NSMutableArray alloc] init ];
		UnitizeRiderHL= [[NSMutableArray alloc] init ];
		UnitizeRiderHLPct = [[NSMutableArray alloc] init ];
		UnitizeRiderTerm = [[NSMutableArray alloc] init ];
		//UnitizeRiderMort = [[NSMutableArray alloc] init ];
		UnitizeRiderPlanChoice = [[NSMutableArray alloc] init ];
		UnitizeRiderDeductible = [[NSMutableArray alloc] init ];
		//UnitizeRiderAlloc = [[NSMutableArray alloc] init ];
		UnitizeRiderPremium = [[NSMutableArray alloc] init ];
		UnitizeRiderPremium2 = [[NSMutableArray alloc] init ];
		UnitizeRiderPremium3 = [[NSMutableArray alloc] init ];
		UniTotalRiderPremAtPolYear = [[NSMutableArray alloc] init ];
		UniTotalRiderPremWithAlloc = [[NSMutableArray alloc] init ];
        UnitizeRiderHLPctTerm = [[NSMutableArray alloc] init ];
		UnitizeRiderHLTerm = [[NSMutableArray alloc] init ];
        UnitizeRiderPreDeductible = [[NSMutableArray alloc] init ];
		UnitizeRiderPostDeductible = [[NSMutableArray alloc] init ];
		UnitizeRiderUnits = [[NSMutableArray alloc] init ];
		
        
		OverallAddTPDBegin= [[NSMutableArray alloc] init];
		OverallAddTPDEOY= [[NSMutableArray alloc] init];
		OverallEOYTotalOADBear= [[NSMutableArray alloc] init];
		OverallEOYTotalOADBull= [[NSMutableArray alloc] init];
		OverallEOYTotalOADFlat= [[NSMutableArray alloc] init];
		OverallEOYTotalTPDBear= [[NSMutableArray alloc] init];
		OverallEOYTotalTPDBull= [[NSMutableArray alloc] init];
		OverallEOYTotalTPDFlat= [[NSMutableArray alloc] init];
		OverallFullSurrenderValue= [[NSMutableArray alloc] init];
		OverallMonthlyIncome= [[NSMutableArray alloc] init];
		OverallOADBegin= [[NSMutableArray alloc] init];
		OverallOADEOY= [[NSMutableArray alloc] init];
		OverallTotalFundSurrenderValueBear= [[NSMutableArray alloc] init ];
		OverallTotalFundSurrenderValueBull= [[NSMutableArray alloc] init ];
		OverallTotalFundSurrenderValueFlat= [[NSMutableArray alloc] init ];
		OverallTotalPremiumPaid= [[NSMutableArray alloc] init ];
		OverallTPDBegin= [[NSMutableArray alloc] init ];
		OverallTPDEOY = [[NSMutableArray alloc] init ];
		OverallYearlyIncome = [[NSMutableArray alloc] init ];
        
        OtherRiderOverallTPDEOY = [[NSMutableArray alloc] init];
		
		[self deleteTemp];
		[self PopulateData];
		[self GetRTUPData];
		[self getAllPreDetails];
		[self InsertToUL_Temp_Trad_LA];
		
		double SAFac = 0;
		
		if (Age < 17) {
			SAFac = 60;
		}
		else if (Age > 16 && Age < 26){ //17 - 25
			SAFac = 55;
		}
		else if (Age > 25 && Age < 36){ //26 - 35
			SAFac = 50;
		}
		else if (Age > 35 && Age < 46){ // 36 - 45
			SAFac = 35;
		}
		else if (Age > 45 && Age < 56){ //46 - 55
			SAFac = 25;
		}
		else if (Age > 55){
			SAFac = 15;
		}
		
		//minSA =  SAFac * [strBasicPremium_Bump doubleValue ];
        minSA =  SAFac * [strBasicPremium doubleValue ];
        double TempMinSA = 0.00;
		//double TempMinSA = SAFac * [strBasicPremium doubleValue ];
        
		CurrentBump = [self CalculateBUMP];
		if (CurrentBump < 0) {
			if (BasicSA > minSA) {
				
				NSString *PremRequired;
				int pct = 10;
				double tempOriPrem = [strBasicPremium_Bump doubleValue];
				
				//tempOriPrem = [strBasicPremium doubleValue] * tempOriginal;
				
				
				for (int i = 0; i < 50; i++) {
					PremRequired =  [NSString stringWithFormat:@"%.2f", (tempOriPrem + (tempOriPrem * pct/100.00)) ];
					strBasicPremium_Bump = PremRequired;
					
					if ([self CalculateBUMP] > 0) {
                        TempMinSA = SAFac * [PremRequired doubleValue ] * [self ReturnDivideMode];
                        
                        if (TempMinSA < BasicSA) {
                            if ([PremRequired  doubleValue] < 2 * tempOriPrem) {
                                HeaderMsg = @"";
                                StopMessage1 = [self ErrorMsg:@"T1" andInput1:PremRequired andInput2:@"" andInput3:@""];
                                StopMessage2 = @"";
                                StopMessage3 = @"";
                                StopMessage4 = @"";
                                StopExec = TRUE;
                                
                            }
                            else
                            {
                                HeaderMsg = @"";
                                StopMessage1 = [self ErrorMsg:@"D0" andInput1:@"" andInput2:@"" andInput3:@""];
                                StopMessage2 = @"";
                                StopMessage3 = @"";
                                StopMessage4 = @"";
                                StopExec = TRUE;
                                
                            }
                        }
                        
						break;
					}
                    
					pct = pct + 10;
				}

                if (TempMinSA > BasicSA) { //after calculate the min prem required in order to get positive bump but the new min SA is more than the existing SA
                    [self CheckSustainForNegativeBump:CurrentBump];
                    NegativeBump = TRUE;
                }
                else{
                    if (pct == 510) {
                        //[self CheckSustainForNegativeBump:CurrentBump];
                        NegativeBump = TRUE;
                    }
                    else{
                        NegativeBump = FALSE;
                        return;
                    }
                }
                
				
			}
			else{
                if ([getHL intValue] != 0 || [getHLPct intValue] != 0) {
                    NegativeBump = TRUE;
                }
                else{
                    [self CheckSustainForNegativeBump:CurrentBump];
                    NegativeBump = TRUE;
                }
				
			}
			
		}
		else{
			NegativeBump = FALSE;
		}
		
		[self getECAR1];
		[self getECAR6];
		//[self getECAR55];
		[self getECAR60];
		[self getRPUO];
		[self InsertToUL_Temp_Trad_Basic];
		if (StopExec == TRUE) {
			return;
		}
		
		[self InsertToUL_Temp_Trad_Rider];
        [self InsertToUL_Temp_Rider];
		//[self InsertToUL_Temp_ECAR55];
		[self InsertToUL_Temp_ECAR60];
		[self InsertToUL_Temp_ECAR1];
		[self InsertToUL_Temp_ECAR6];
		
        
		
		if ([OtherRiderCode count] != 0 || [UnitizeRiderCode count] != 0 || ECAR1Exist == TRUE ||
			ECAR60Exist == TRUE || ECAR6Exist == TRUE ) {
			[self InsertToUL_Temp_Summary];
		}
        
		NSString *databaseName = @"hladb.sqlite";
		self.db = [DBController sharedDatabaseController:databaseName];
        

		NSString *sqlStmt;
		int DBID;
		int pageNum = 0;
		int riderCount = 0;
		NSString *desc = @"Page";
		
		sqlStmt = @"Delete from UL_Temp_Pages";
		DBID = [_db ExecuteINSERT:sqlStmt];
		
		pageNum++;
		sqlStmt = [NSString stringWithFormat:@"INSERT INTO UL_Temp_Pages(htmlName, PageNum, PageDesc) VALUES ('Page1.html',%d,'%@')",pageNum,[desc stringByAppendingString:[NSString stringWithFormat:@"%d",pageNum]]];
		DBID = [_db ExecuteINSERT:sqlStmt];
		if (DBID <= 0){
			NSLog(@"Error inserting data into database.");
		}
        
        sqlStmt = [NSString stringWithFormat:@"SELECT RiderCode FROM UL_Rider_Details Where SINo = '%@' ", SINo];
		_dataTable = [_db  ExecuteQuery:sqlStmt];
        
        if( _dataTable.rows.count > 0){
            pageNum++;
            sqlStmt =[NSString stringWithFormat:@"INSERT INTO UL_Temp_Pages(htmlName, PageNum, PageDesc) VALUES ('Page16.html',%d,'%@')",pageNum,[desc stringByAppendingString:[NSString stringWithFormat:@"%d",pageNum]]];
            DBID = [_db ExecuteINSERT:sqlStmt];
            if (DBID <= 0){
                NSLog(@"Error inserting data into database.");
            }
        }
        
        
        sqlStmt = [NSString stringWithFormat:@"SELECT RiderCode FROM UL_Rider_Details Where SINo = '%@' AND Ridercode in ('MDSR1', 'MDSR2', 'LDYR', 'MSR', 'CCR', 'TCCR', 'JCCR')  ", SINo];
		_dataTable = [_db  ExecuteQuery:sqlStmt];
        
        if( _dataTable.rows.count > 0){
            pageNum++;
            sqlStmt = [NSString stringWithFormat:@"INSERT INTO UL_Temp_Pages(htmlName, PageNum, PageDesc) VALUES ('Page5.html',%d,'%@')",pageNum,[desc stringByAppendingString:[NSString stringWithFormat:@"%d",pageNum]]];
            DBID = [_db ExecuteINSERT:sqlStmt];
            if (DBID <= 0){
                NSLog(@"Error inserting data into database.");
            }
        }
		
		sqlStmt = [NSString stringWithFormat:@"SELECT * FROM UL_Temp_ECAR60 Where SINo = '%@' ",SINo];
		_dataTable = [_db  ExecuteQuery:sqlStmt];
		
		if(	_dataTable.rows.count > 0){
			pageNum++;
			sqlStmt = [NSString stringWithFormat:@"INSERT INTO UL_Temp_Pages(htmlName, PageNum, PageDesc) VALUES ('Page13.html',%d,'%@')",pageNum,[desc stringByAppendingString:[NSString stringWithFormat:@"%d",pageNum]]];
			DBID = [_db ExecuteINSERT:sqlStmt];
			if (DBID <= 0){
				NSLog(@"Error inserting data into database.");
			}
		}
        
		pageNum++;
		sqlStmt = [NSString stringWithFormat:@"INSERT INTO UL_Temp_Pages(htmlName, PageNum, PageDesc) VALUES ('Page2.html',%d,'%@')",pageNum,[desc stringByAppendingString:[NSString stringWithFormat:@"%d",pageNum]]];
		DBID = [_db ExecuteINSERT:sqlStmt];
		if (DBID <= 0){
			NSLog(@"Error inserting data into database.");
		}
		
		
		
		pageNum++;
		sqlStmt = [NSString stringWithFormat:@"INSERT INTO UL_Temp_Pages(htmlName, PageNum, PageDesc) VALUES ('Page3.html',%d,'%@')",pageNum,[desc stringByAppendingString:[NSString stringWithFormat:@"%d",pageNum]]];
		DBID = [_db ExecuteINSERT:sqlStmt];
		if (DBID <= 0){
			NSLog(@"Error inserting data into database.");
		}
		
		pageNum++;
		sqlStmt = [NSString stringWithFormat:@"INSERT INTO UL_Temp_Pages(htmlName, PageNum, PageDesc) VALUES ('Page4.html',%d,'%@')",pageNum,[desc stringByAppendingString:[NSString stringWithFormat:@"%d",pageNum]]];
		DBID = [_db ExecuteINSERT:sqlStmt];
		if (DBID <= 0){
			NSLog(@"Error inserting data into database.");
		}
		
		sqlStmt = [NSString stringWithFormat:@"SELECT * FROM UL_Fund_Maturity_Option Where SINo = '%@' ",SINo];
		_dataTable = [_db  ExecuteQuery:sqlStmt];
		if (_dataTable.rows.count > 0) {
			pageNum++;
			sqlStmt = [NSString stringWithFormat:@"INSERT INTO UL_Temp_Pages(htmlName, PageNum, PageDesc) VALUES ('Page14.html',%d,'%@')",pageNum,[desc stringByAppendingString:[NSString stringWithFormat:@"%d",pageNum]]];
			DBID = [_db ExecuteINSERT:sqlStmt];
			if (DBID <= 0){
				NSLog(@"Error inserting data into database.");
			}
		}
		
		
		
		pageNum++;
		sqlStmt = [NSString stringWithFormat:@"INSERT INTO UL_Temp_Pages(htmlName, PageNum, PageDesc) VALUES ('Page6.html',%d,'%@')",pageNum,[desc stringByAppendingString:[NSString stringWithFormat:@"%d",pageNum]]];
		DBID = [_db ExecuteINSERT:sqlStmt];
		if (DBID <= 0){
			NSLog(@"Error inserting data into database.");
		}
		
		
		
		riderCount = 0; //reset rider count
		int descRiderCountStart;
		if ([EngOrBm isEqualToString:@"Malay"]) {
			descRiderCountStart = 36;
		}
		else{
			descRiderCountStart = 35;
		}
        //start of rider description page
		int riderInPageCount = 0; //number of rider in a page, maximum 3
		NSString *riderInPage = @""; //rider in a page, write to db
		//NSString *riderInPage1 = @"";
		NSString *curRider; //current rider
		NSString *prevRider; //previous rider
		NSString *headerTitle = @"tblHeader;";
		
		
		
		
		
		NSArray* row;
		
		sqlStmt = [NSString stringWithFormat:@"SELECT RiderCode FROM UL_Rider_Details Where SINo = '%@' AND Ridercode not in ('LCWP', 'PR', 'MDSR1-ALW', 'MDSR1-OT', 'MDSR2-ALW', 'MDSR2-OT') ORDER BY RiderCode ASC ", SINo];
		//NSLog(@"%@",sqlStmt);
		_dataTable = [_db  ExecuteQuery:sqlStmt];
		
		for (row in _dataTable.rows)
		{
			riderCount++;
			curRider = [row objectAtIndex:0];
			
			//NSLog(@"%@",curRider);
			
			if ([curRider isEqualToString:@"CIRD"] || [curRider isEqualToString:@"DHI"] || [curRider isEqualToString:@"RRTUO"] ||
				[curRider isEqualToString:@"DCA"] || [curRider isEqualToString:@"ECAR"] || [curRider isEqualToString:@"ECAR6"] ||
				[curRider isEqualToString:@"ECAR60"] || [curRider isEqualToString:@"HMM"] || [curRider isEqualToString:@"LSR"] ||
				[curRider isEqualToString:@"MG_IV"] || [curRider isEqualToString:@"MR"] || [curRider isEqualToString:@"PA"] ||
				[curRider isEqualToString:@"WI"] || [curRider isEqualToString:@"TPDMLA"] ||
				[curRider isEqualToString:@"TPDWP"] || [curRider isEqualToString:@"TSR"] || [curRider isEqualToString:@"TSER"] ||
                [curRider isEqualToString:@"TPDYLA"]){
				riderInPageCount++;
				prevRider = curRider;
				
				if(riderCount == 1){
					riderInPage = [headerTitle stringByAppendingString:riderInPage];
				}
				
				riderInPage = [riderInPage stringByAppendingString:curRider];
				riderInPage = [riderInPage stringByAppendingString:@";"];
				if (riderInPageCount == 3){
					//NSLog(@"%@",riderInPage);
					pageNum++;
					//if(riderCount == 1)
					//  riderInPage = [headerTitle stringByAppendingString:riderInPage];
					//descRiderCountStart++;
					sqlStmt = [NSString stringWithFormat:@"INSERT INTO UL_Temp_Pages(riders,htmlName, PageNum, PageDesc) VALUES ('%@','Page%d.html',%d,'%@')",riderInPage,descRiderCountStart,pageNum,[desc stringByAppendingString:[NSString stringWithFormat:@"%d",pageNum]]];
					DBID = [_db ExecuteINSERT:sqlStmt];
					if (DBID <= 0){
						NSLog(@"Error inserting data into database.");
					}
					//NSLog(@"%@",sqlStmt);
					riderInPageCount = 0;
					riderInPage = @"";
					prevRider = @"";
				}
				
				if (riderInPageCount == 1 && riderCount == _dataTable.rows.count){
					//NSLog(@"%@",riderInPage);
					pageNum++;
					//descRiderCountStart++;
					sqlStmt = [NSString stringWithFormat:@"INSERT INTO UL_Temp_Pages(riders,htmlName, PageNum, PageDesc) VALUES ('%@','Page%d.html',%d,'%@')",riderInPage,descRiderCountStart,pageNum,[desc stringByAppendingString:[NSString stringWithFormat:@"%d",pageNum]]];
					DBID = [_db ExecuteINSERT:sqlStmt];
					if (DBID <= 0){
						NSLog(@"Error inserting data into database.");
					}
					//NSLog(@"%@",sqlStmt);
					riderInPageCount = 0;
					riderInPage = @"";
				}
				
				if (riderInPageCount == 2 && riderCount == _dataTable.rows.count) {
					pageNum++;
					//descRiderCountStart++;
					sqlStmt = [NSString stringWithFormat:@"INSERT INTO UL_Temp_Pages(riders,htmlName, PageNum, PageDesc) VALUES ('%@','Page%d.html',%d,'%@')",riderInPage,descRiderCountStart,pageNum,[desc stringByAppendingString:[NSString stringWithFormat:@"%d",pageNum]]];
					DBID = [_db ExecuteINSERT:sqlStmt];
					if (DBID <= 0){
						NSLog(@"Error inserting data into database.");
					}
					//NSLog(@"%@",sqlStmt);
					riderInPageCount = 0;
					riderInPage = @"";
				}
			}
			else{
				if (riderInPageCount == 2){
					//NSLog(@"%@",riderInPage);
					pageNum++;
					if(riderCount == 1)
						riderInPage = [headerTitle stringByAppendingString:riderInPage];
					//descRiderCountStart++;
					sqlStmt = [NSString stringWithFormat:@"INSERT INTO UL_Temp_Pages(riders,htmlName, PageNum, PageDesc) VALUES ('%@','Page%d.html',%d,'%@')",riderInPage,descRiderCountStart,pageNum,[desc stringByAppendingString:[NSString stringWithFormat:@"%d",pageNum]]];
					DBID = [_db ExecuteINSERT:sqlStmt];
					if (DBID <= 0){
						NSLog(@"Error inserting data into database.");
					}
					//NSLog(@"%@",sqlStmt);
					prevRider= @"";
					riderInPageCount = 0;
					riderInPage = @"";
				}
				if ([curRider isEqualToString:@"CIRD"] || [curRider isEqualToString:@"DHI"] || [curRider isEqualToString:@"RRTUO"] ||
					[curRider isEqualToString:@"DCA"] || [curRider isEqualToString:@"ECAR"] || [curRider isEqualToString:@"ECAR60"] ||
					[curRider isEqualToString:@"ECAR6"] || [curRider isEqualToString:@"HMM"] || [curRider isEqualToString:@"LSR"] ||
					[curRider isEqualToString:@"MG_IV"] || [curRider isEqualToString:@"MR"] || [curRider isEqualToString:@"PA"] ||
					[curRider isEqualToString:@"WI"] || [curRider isEqualToString:@"TPDMLA"] ||
					[curRider isEqualToString:@"TPDWP"] || [curRider isEqualToString:@"TSR"] || [curRider isEqualToString:@"TSER"] || [curRider isEqualToString:@"TPDYLA"]  ){
					if (![curRider isEqualToString:@"CIWP"] && ![curRider isEqualToString:@"ACIR"] && ![curRider isEqualToString:@"LCWP"]
						&& ![prevRider isEqualToString:@""]) {
						prevRider = [prevRider stringByAppendingString:@";"];
						curRider = [prevRider stringByAppendingString:curRider];
						riderInPageCount = 0;
						riderInPage = @"";
						
					}
					else{
						pageNum++;
						
						if(riderCount == 1){
							riderInPage = [headerTitle stringByAppendingString:riderInPage];
						}
						
						sqlStmt = [NSString stringWithFormat:@"INSERT INTO UL_Temp_Pages(riders,htmlName, PageNum, PageDesc) VALUES "
								   "('%@','Page%d.html',%d,'%@')",riderInPage,descRiderCountStart,pageNum,[desc stringByAppendingString:[NSString stringWithFormat:@"%d",pageNum]]];
						DBID = [_db ExecuteINSERT:sqlStmt];
						if (DBID <= 0){
							NSLog(@"Error inserting data into database.");  
						}
						prevRider = @"";
						riderInPage = @"";
						riderInPageCount = 0;
					}
					
				}
				//NSLog(@"%@",curRider);
				pageNum++;
				if(riderCount == 1)
					curRider = [headerTitle stringByAppendingString:curRider];
				//descRiderCountStart++;
				sqlStmt = [NSString stringWithFormat:@"INSERT INTO UL_Temp_Pages(riders,htmlName, PageNum, PageDesc) VALUES ('%@','Page%d.html',%d,'%@')",curRider,descRiderCountStart,pageNum,[desc stringByAppendingString:[NSString stringWithFormat:@"%d",pageNum]]];
				DBID = [_db ExecuteINSERT:sqlStmt];
				if (DBID <= 0){
					NSLog(@"Error inserting data into database.");  
				}
				//NSLog(@"%@",sqlStmt);
                
                if ([curRider isEqualToString:@"tblHeader;LDYR"] || [curRider isEqualToString:@"LDYR"]){
                    pageNum++;
                    
                    sqlStmt = [NSString stringWithFormat:@"INSERT INTO UL_Temp_Pages(riders,htmlName, PageNum, PageDesc) VALUES ('%@','%@',%d,'%@')",curRider,@"Page35_2.html",pageNum,[desc stringByAppendingString:[NSString stringWithFormat:@"%d",pageNum]]];
                    DBID = [_db ExecuteINSERT:sqlStmt];
                
                }
                else if ([curRider isEqualToString:@"tblHeader;JCCR"] || [curRider isEqualToString:@"JCCR"]){
                        pageNum++;
                        
                        sqlStmt = [NSString stringWithFormat:@"INSERT INTO UL_Temp_Pages(riders,htmlName, PageNum, PageDesc) VALUES ('%@','%@',%d,'%@')",curRider,@"Page35_2.html",pageNum,[desc stringByAppendingString:[NSString stringWithFormat:@"%d",pageNum]]];
                        DBID = [_db ExecuteINSERT:sqlStmt];
                        
                }
                else if ([curRider isEqualToString:@"tblHeader;MSR"] || [curRider isEqualToString:@"MSR"]){
                    pageNum++;
                    
                    sqlStmt = [NSString stringWithFormat:@"INSERT INTO UL_Temp_Pages(riders,htmlName, PageNum, PageDesc) VALUES ('%@','%@',%d,'%@')",curRider,@"Page35_2.html",pageNum,[desc stringByAppendingString:[NSString stringWithFormat:@"%d",pageNum]]];
                    DBID = [_db ExecuteINSERT:sqlStmt];
                    
                }
			}
        }
		
        
        sqlStmt = [NSString stringWithFormat:@"SELECT RiderCode FROM UL_Rider_Details Where SINo = '%@' AND Ridercode in ('LCWP', 'PR') AND PtypeCode = 'LA' ", SINo];
		_dataTable = [_db  ExecuteQuery:sqlStmt];
        
        for (row in _dataTable.rows){
            curRider = [[row objectAtIndex:0] stringByAppendingString:@"_SECOND" ];
            pageNum++;
            
            if ([EngOrBm isEqualToString:@"English"]) {
                    sqlStmt = [NSString stringWithFormat:@"INSERT INTO UL_Temp_Pages(riders,htmlName, PageNum, PageDesc) VALUES ('tblHeader;%@;','Page35.html',%d,'%@')",curRider ,pageNum, [desc stringByAppendingString:[NSString stringWithFormat:@"%d",pageNum]]];
            }
            else
            {
                    sqlStmt = [NSString stringWithFormat:@"INSERT INTO UL_Temp_Pages(riders,htmlName, PageNum, PageDesc) VALUES ('tblHeader;%@;','Page36.html',%d,'%@')",curRider ,pageNum, [desc stringByAppendingString:[NSString stringWithFormat:@"%d",pageNum]]];
            }

            DBID = [_db ExecuteINSERT:sqlStmt];
            if (DBID <= 0){
                NSLog(@"Error inserting data into database.");
            }
        }
        
        sqlStmt = [NSString stringWithFormat:@"SELECT RiderCode FROM UL_Rider_Details Where SINo = '%@' AND Ridercode in ('LCWP', 'PR') AND PtypeCode = 'PY' ", SINo];
		_dataTable = [_db  ExecuteQuery:sqlStmt];
        
		for (row in _dataTable.rows){
            curRider = [[row objectAtIndex:0] stringByAppendingString:@"_PAYOR" ];
            pageNum++;
            
            if ([EngOrBm isEqualToString:@"English"]) {
                sqlStmt = [NSString stringWithFormat:@"INSERT INTO UL_Temp_Pages(riders,htmlName, PageNum, PageDesc) VALUES ('tblHeader;%@;','Page35.html',%d,'%@')",curRider ,pageNum, [desc stringByAppendingString:[NSString stringWithFormat:@"%d",pageNum]]];
            }
            else
            {
                sqlStmt = [NSString stringWithFormat:@"INSERT INTO UL_Temp_Pages(riders,htmlName, PageNum, PageDesc) VALUES ('tblHeader;%@;','Page36.html',%d,'%@')",curRider ,pageNum, [desc stringByAppendingString:[NSString stringWithFormat:@"%d",pageNum]]];
            }
            
            DBID = [_db ExecuteINSERT:sqlStmt];
            if (DBID <= 0){
                NSLog(@"Error inserting data into database.");
            }
        }
        
        
		pageNum++;
		sqlStmt = [NSString stringWithFormat:@"INSERT INTO UL_Temp_Pages(htmlName, PageNum, PageDesc) VALUES ('Page7.html',%d,'%@')",pageNum,[desc stringByAppendingString:[NSString stringWithFormat:@"%d",pageNum]]];
		DBID = [_db ExecuteINSERT:sqlStmt];
		if (DBID <= 0){
			NSLog(@"Error inserting data into database.");
		}
        /*
		pageNum++;
		sqlStmt = [NSString stringWithFormat:@"INSERT INTO UL_Temp_Pages(htmlName, PageNum, PageDesc) VALUES ('Page8.html',%d,'%@')",pageNum,[desc stringByAppendingString:[NSString stringWithFormat:@"%d",pageNum]]];
		DBID = [_db ExecuteINSERT:sqlStmt];
		if (DBID <= 0){
			NSLog(@"Error inserting data into database.");
		}
		*/
        
        pageNum++; //added by Quek
        sqlStmt = [NSString stringWithFormat:@"INSERT INTO UL_Temp_Pages(htmlName, PageNum, PageDesc) VALUES ('Page7_2.html',%d,'%@')",pageNum,[desc stringByAppendingString:[NSString stringWithFormat:@"%d",pageNum]]];
        DBID = [_db ExecuteINSERT:sqlStmt];
        if (DBID <= 0){
            NSLog(@"Error inserting data into database.");
        }
        
		pageNum++;
		sqlStmt = [NSString stringWithFormat:@"INSERT INTO UL_Temp_Pages(htmlName, PageNum, PageDesc) VALUES ('Page9.html',%d,'%@')",pageNum,[desc stringByAppendingString:[NSString stringWithFormat:@"%d",pageNum]]];
		DBID = [_db ExecuteINSERT:sqlStmt];
		if (DBID <= 0){
			NSLog(@"Error inserting data into database.");
		}
		
		
		if([getPlanCode isEqualToString:@"UV" ] || [getPlanCode isEqualToString:@"UP" ] ){
			pageNum++;
			sqlStmt = [NSString stringWithFormat:@"INSERT INTO UL_Temp_Pages(htmlName, PageNum, PageDesc) VALUES ('Page10.html',%d,'%@')",pageNum,[desc stringByAppendingString:[NSString stringWithFormat:@"%d",pageNum]]];
			DBID = [_db ExecuteINSERT:sqlStmt];
			if (DBID <= 0){
				NSLog(@"Error inserting data into database.");
			}
		}
		
		
		//sqlStmt = [NSString stringWithFormat:@"SELECT * FROM UL_Temp_ECAR55 Where SINo = '%@' ", SINo];
		//_dataTable = [_db  ExecuteQuery:sqlStmt];
		
		if (ECAR60Exist == TRUE) {
            
			pageNum++;
			//EverCash 60
			sqlStmt = [NSString stringWithFormat:@"INSERT INTO UL_Temp_Pages(htmlName, PageNum, PageDesc) VALUES ('Page11.html',%d,'%@')",pageNum,[desc stringByAppendingString:[NSString stringWithFormat:@"%d",pageNum]]];
			DBID = [_db ExecuteINSERT:sqlStmt];
			if (DBID <= 0){
				NSLog(@"Error inserting data into database.");
			}
		}
		
		//sqlStmt = [NSString stringWithFormat:@"SELECT * FROM UL_Temp_ECAR6 Where SINo = '%@' ", SINo];
		//_dataTable = [_db  ExecuteQuery:sqlStmt];
		if (ECAR6Exist == TRUE) {
			
			pageNum++;
			//EverCash 6
			sqlStmt = [NSString stringWithFormat:@"INSERT INTO UL_Temp_Pages(htmlName, PageNum, PageDesc) VALUES ('Page15.html',%d,'%@')",pageNum,[desc stringByAppendingString:[NSString stringWithFormat:@"%d",pageNum]]];
			DBID = [_db ExecuteINSERT:sqlStmt];
			if (DBID <= 0){
				NSLog(@"Error inserting data into database.");
			}
		}
		
		//sqlStmt = [NSString stringWithFormat:@"SELECT * FROM UL_Temp_ECAR Where SINo = '%@' ", SINo];
		//_dataTable = [_db  ExecuteQuery:sqlStmt];
		if (ECAR1Exist == TRUE) {
			
			pageNum++;
			//EverCash 1
			sqlStmt = [NSString stringWithFormat:@"INSERT INTO UL_Temp_Pages(htmlName, PageNum, PageDesc) VALUES ('Page12.html',%d,'%@')",pageNum,[desc stringByAppendingString:[NSString stringWithFormat:@"%d",pageNum]]];
			DBID = [_db ExecuteINSERT:sqlStmt];
			if (DBID <= 0){
				NSLog(@"Error inserting data into database.");
			}
		}
		

        
		if ([OtherRiderCode count] > 0) {
            
            int ReportRiderPage = 0;
            
            if ([OtherRiderCode indexOfObject:@"LCWP"] != NSNotFound && [OtherRiderCode indexOfObject:@"PR"] != NSNotFound ){
                ReportRiderPage = ceil((OtherRiderCode.count - 2)/3.00);
                ReportRiderPage = ReportRiderPage == 0 ? 2 : ReportRiderPage;
                
                if (OtherRiderCode.count != 2) {
                    ReportRiderPage = ReportRiderPage + 2;
                }
            }
            else if ([OtherRiderCode indexOfObject:@"LCWP"] != NSNotFound || [OtherRiderCode indexOfObject:@"PR"] != NSNotFound ){
                ReportRiderPage = ceil((OtherRiderCode.count - 1)/3.00);
                ReportRiderPage = ReportRiderPage == 0 ? 1 : ReportRiderPage;
                
                if (OtherRiderCode.count != 1) {
                    ReportRiderPage++;
                }

            }
            else{
                ReportRiderPage = ceil(OtherRiderCode.count/3.00);
            }
			
            for (int i = 0; i < ReportRiderPage; i++) {
                pageNum++;
                sqlStmt = [NSString stringWithFormat:@"INSERT INTO UL_Temp_Pages(htmlName, PageNum, PageDesc) VALUES ('Page2%d.html',%d,'%@')",i, pageNum,[desc stringByAppendingString:[NSString stringWithFormat:@"%d",pageNum]]];
                DBID = [_db ExecuteINSERT:sqlStmt];
                if (DBID <= 0){
                    NSLog(@"Error inserting data into database.");
                }
            }
            
			
			/*
			if ([OtherRiderCode count] > 3) {
				pageNum++;
				sqlStmt = [NSString stringWithFormat:@"INSERT INTO UL_Temp_Pages(htmlName, PageNum, PageDesc) VALUES ('Page21.html',%d,'%@')",pageNum,[desc stringByAppendingString:[NSString stringWithFormat:@"%d",pageNum]]];
				DBID = [_db ExecuteINSERT:sqlStmt];
				if (DBID <= 0){
					NSLog(@"Error inserting data into database.");
				}
			}
            
            if ([OtherRiderCode indexOfObject:@"LCWP"] != NSNotFound || [OtherRiderCode indexOfObject:@"PR"] != NSNotFound ){

            }
             */
		}
		
		if ([OtherRiderCode count] != 0 || [UnitizeRiderCode count] != 0 || ECAR1Exist == TRUE || ECAR60Exist == TRUE || ECAR6Exist == TRUE ) {
			pageNum++;
			//Summary Page 1
			sqlStmt = [NSString stringWithFormat:@"INSERT INTO UL_Temp_Pages(htmlName, PageNum, PageDesc) VALUES ('Page30.html',%d,'%@')",pageNum,[desc stringByAppendingString:[NSString stringWithFormat:@"%d",pageNum]]];
			DBID = [_db ExecuteINSERT:sqlStmt];
			if (DBID <= 0){
				NSLog(@"Error inserting data into database.");
			}
			/*
			if ([getPlanCode isEqualToString:@"UP"]) {
				if (ECAR1Exist == TRUE || ECAR6Exist == TRUE) {
					pageNum++;
					//Summary Page 2
					sqlStmt = [NSString stringWithFormat:@"INSERT INTO UL_Temp_Pages(htmlName, PageNum, PageDesc) VALUES ('Page31.html',%d,'%@')",pageNum,[desc stringByAppendingString:[NSString stringWithFormat:@"%d",pageNum]]];
					DBID = [_db ExecuteINSERT:sqlStmt];
					if (DBID <= 0){
						NSLog(@"Error inserting data into database.");
					}
				}
			}
			else
			{
				pageNum++;
				//Summary Page 2
				sqlStmt = [NSString stringWithFormat:@"INSERT INTO UL_Temp_Pages(htmlName, PageNum, PageDesc) VALUES ('Page31.html',%d,'%@')",pageNum,[desc stringByAppendingString:[NSString stringWithFormat:@"%d",pageNum]]];
				DBID = [_db ExecuteINSERT:sqlStmt];
				if (DBID <= 0){
					NSLog(@"Error inserting data into database.");
				}
			}
			*/
            
            pageNum++; //added by Quek
            sqlStmt = [NSString stringWithFormat:@"INSERT INTO UL_Temp_Pages(htmlName, PageNum, PageDesc) VALUES ('Page30_2.html',%d,'%@')",pageNum,[desc stringByAppendingString:[NSString stringWithFormat:@"%d",pageNum]]];
            DBID = [_db ExecuteINSERT:sqlStmt];
            if (DBID <= 0){
                NSLog(@"Error inserting data into database.");
            }
            
            pageNum++;
            //Summary Page 2
            sqlStmt = [NSString stringWithFormat:@"INSERT INTO UL_Temp_Pages(htmlName, PageNum, PageDesc) VALUES ('Page31.html',%d,'%@')",pageNum,[desc stringByAppendingString:[NSString stringWithFormat:@"%d",pageNum]]];
            DBID = [_db ExecuteINSERT:sqlStmt];
            if (DBID <= 0){
                NSLog(@"Error inserting data into database.");
            }
			
		}
		
		
		pageNum++;
		sqlStmt = [NSString stringWithFormat:@"INSERT INTO UL_Temp_Pages(htmlName, PageNum, PageDesc) VALUES ('Page40.html',%d,'%@')",pageNum,[desc stringByAppendingString:[NSString stringWithFormat:@"%d",pageNum]]];
		DBID = [_db ExecuteINSERT:sqlStmt];
		if (DBID <= 0){
			NSLog(@"Error inserting data into database.");
		}
		
		pageNum++;
		sqlStmt = [NSString stringWithFormat:@"INSERT INTO UL_Temp_Pages(htmlName, PageNum, PageDesc) VALUES ('Page41.html',%d,'%@')",pageNum,[desc stringByAppendingString:[NSString stringWithFormat:@"%d",pageNum]]];
		DBID = [_db ExecuteINSERT:sqlStmt];
		if (DBID <= 0){
			NSLog(@"Error inserting data into database.");
		}
		
		if (UnitizeRiderCode.count > 0) {
			pageNum++;
			sqlStmt = [NSString stringWithFormat:@"INSERT INTO UL_Temp_Pages(htmlName, PageNum, PageDesc) VALUES ('Page42.html',%d,'%@')",pageNum,[desc stringByAppendingString:[NSString stringWithFormat:@"%d",pageNum]]];
			DBID = [_db ExecuteINSERT:sqlStmt];
			if (DBID <= 0){
				NSLog(@"Error inserting data into database.");
			}
		}
		
		pageNum++;
		sqlStmt = [NSString stringWithFormat:@"INSERT INTO UL_Temp_Pages(htmlName, PageNum, PageDesc) VALUES ('Page43.html',%d,'%@')",pageNum,[desc stringByAppendingString:[NSString stringWithFormat:@"%d",pageNum]]];
		DBID = [_db ExecuteINSERT:sqlStmt];
		if (DBID <= 0){
			NSLog(@"Error inserting data into database.");
		}
		
		sqlStmt = [NSString stringWithFormat:@"SELECT ReducedYear FROM UL_ReducedPaidUp Where SINo = '%@' ", SINo];
		_dataTable = [_db  ExecuteQuery:sqlStmt];
		
		if (_dataTable.rows.count > 0) {
			pageNum++;
			sqlStmt = [NSString stringWithFormat:@"INSERT INTO UL_Temp_Pages(htmlName, PageNum, PageDesc) VALUES ('Page50.html',%d,'%@')",pageNum,[desc stringByAppendingString:[NSString stringWithFormat:@"%d",pageNum]]];    
			DBID = [_db ExecuteINSERT:sqlStmt];
			if (DBID <= 0){
				NSLog(@"Error inserting data into database.");
			}
			
			if ([[[_dataTable.rows objectAtIndex:0] objectAtIndex:0 ] intValue ] < 25 && HideRPUOPage == FALSE) {
				pageNum++;
				sqlStmt = [NSString stringWithFormat:@"INSERT INTO UL_Temp_Pages(htmlName, PageNum, PageDesc) VALUES ('Page51.html',%d,'%@')",pageNum,[desc stringByAppendingString:[NSString stringWithFormat:@"%d",pageNum]]];
				DBID = [_db ExecuteINSERT:sqlStmt];
				if (DBID <= 0){
					NSLog(@"Error inserting data into database.");
				}
                
                pageNum++;
				sqlStmt = [NSString stringWithFormat:@"INSERT INTO UL_Temp_Pages(htmlName, PageNum, PageDesc) VALUES ('Page52.html',%d,'%@')",pageNum,[desc stringByAppendingString:[NSString stringWithFormat:@"%d",pageNum]]];
				DBID = [_db ExecuteINSERT:sqlStmt];
				if (DBID <= 0){
					NSLog(@"Error inserting data into database.");
				}
			}
			
		}
		
		pageNum++;
		sqlStmt = [NSString stringWithFormat:@"INSERT INTO UL_Temp_Pages(htmlName, PageNum, PageDesc) VALUES ('Page44.html',%d,'%@')",pageNum,[desc stringByAppendingString:[NSString stringWithFormat:@"%d",pageNum]]];
		DBID = [_db ExecuteINSERT:sqlStmt];
		if (DBID <= 0){
			NSLog(@"Error inserting data into database.");
		}
        
        pageNum++; //added by Quek
        sqlStmt = [NSString stringWithFormat:@"INSERT INTO UL_Temp_Pages(htmlName, PageNum, PageDesc) VALUES ('Page44_2.html',%d,'%@')",pageNum,[desc stringByAppendingString:[NSString stringWithFormat:@"%d",pageNum]]];
        DBID = [_db ExecuteINSERT:sqlStmt];
        if (DBID <= 0){
            NSLog(@"Error inserting data into database.");
        }
		
		pageNum++;
		sqlStmt = [NSString stringWithFormat:@"INSERT INTO UL_Temp_Pages(htmlName, PageNum, PageDesc) VALUES ('Page45.html',%d,'%@')",pageNum,[desc stringByAppendingString:[NSString stringWithFormat:@"%d",pageNum]]];
		DBID = [_db ExecuteINSERT:sqlStmt];
		if (DBID <= 0){
			NSLog(@"Error inserting data into database.");
		}
        
        pageNum++;
		sqlStmt = [NSString stringWithFormat:@"INSERT INTO UL_Temp_Pages(htmlName, PageNum, PageDesc) VALUES ('Page49.html',%d,'%@')",pageNum,[desc stringByAppendingString:[NSString stringWithFormat:@"%d",pageNum]]];
		DBID = [_db ExecuteINSERT:sqlStmt];
		if (DBID <= 0){
			NSLog(@"Error inserting data into database.");
		}
        
        if ([EngOrBm isEqualToString:@"Malay"]) { //added by Quek
            pageNum++;
            sqlStmt = [NSString stringWithFormat:@"INSERT INTO UL_Temp_Pages(htmlName, PageNum, PageDesc) VALUES ('Page49_2.html',%d,'%@')",pageNum,[desc stringByAppendingString:[NSString stringWithFormat:@"%d",pageNum]]];
            DBID = [_db ExecuteINSERT:sqlStmt];
            if (DBID <= 0){
                NSLog(@"Error inserting data into database.");
            }
        }
		
		pageNum++;
		sqlStmt = [NSString stringWithFormat:@"INSERT INTO UL_Temp_Pages(htmlName, PageNum, PageDesc) VALUES ('Page46.html',%d,'%@')",pageNum,[desc stringByAppendingString:[NSString stringWithFormat:@"%d",pageNum]]];
		DBID = [_db ExecuteINSERT:sqlStmt];
		if (DBID <= 0){
			NSLog(@"Error inserting data into database.");
		}
        
        pageNum++; //added by Quek
        sqlStmt = [NSString stringWithFormat:@"INSERT INTO UL_Temp_Pages(htmlName, PageNum, PageDesc) VALUES ('Page46_2.html',%d,'%@')",pageNum,[desc stringByAppendingString:[NSString stringWithFormat:@"%d",pageNum]]];
        DBID = [_db ExecuteINSERT:sqlStmt];
        if (DBID <= 0){
            NSLog(@"Error inserting data into database.");
        }
		
		pageNum++;
		sqlStmt = [NSString stringWithFormat:@"INSERT INTO UL_Temp_Pages(htmlName, PageNum, PageDesc) VALUES ('Page47.html',%d,'%@')",pageNum,[desc stringByAppendingString:[NSString stringWithFormat:@"%d",pageNum]]];
		DBID = [_db ExecuteINSERT:sqlStmt];
		if (DBID <= 0){
			NSLog(@"Error inserting data into database.");
		}
        
        pageNum++; //added by Quek
        sqlStmt = [NSString stringWithFormat:@"INSERT INTO UL_Temp_Pages(htmlName, PageNum, PageDesc) VALUES ('Page47_2.html',%d,'%@')",pageNum,[desc stringByAppendingString:[NSString stringWithFormat:@"%d",pageNum]]];
        DBID = [_db ExecuteINSERT:sqlStmt];
        if (DBID <= 0){
            NSLog(@"Error inserting data into database.");
        }
		/*
		sqlStmt = [NSString stringWithFormat:@"SELECT * FROM UL_Rider_Details Where SINo = '%@' AND ridercode in ('ACIR', 'CIRD', 'CIWP', 'HMM', 'MG_IV' ) ", SINo];
		_dataTable = [_db  ExecuteQuery:sqlStmt];
		
		if (_dataTable.rows.count > 0) {
			pageNum++;
			sqlStmt = [NSString stringWithFormat:@"INSERT INTO UL_Temp_Pages(htmlName, PageNum, PageDesc) VALUES ('Page48.html',%d,'%@')",pageNum,[desc stringByAppendingString:[NSString stringWithFormat:@"%d",pageNum]]];
			DBID = [_db ExecuteINSERT:sqlStmt];
			if (DBID <= 0){
				NSLog(@"Error inserting data into database.");
			}
		}
		*/
        
        
		if ([NeedFurtherInfo isEqualToString:@"YES"]) {
			[self generateJSON_UV];
            /*
			NSString *path;
			if ([EngOrBm isEqualToString:@"English"]) {
				[self copySIToDoc];
				path = [[NSBundle mainBundle] pathForResource:@"EverLife_SI/Page1" ofType:@"html"];
			}
			else{
				[self copySIToDoc_BM];
				path = [[NSBundle mainBundle] pathForResource:@"EverLife_SI_BM/Page1" ofType:@"html"];
			}
			
			NSURL *pathURL = [NSURL fileURLWithPath:path];
			NSArray* path_forDirectory = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory,NSUserDomainMask, YES);
			NSString* documentsDirectory = [path_forDirectory objectAtIndex:0];
			
			NSData* data = [NSData dataWithContentsOfURL:pathURL];
			[data writeToFile:[NSString stringWithFormat:@"%@/SI_Temp.html",documentsDirectory] atomically:YES];
			
			NSString *HTMLPath = [documentsDirectory stringByAppendingPathComponent:@"SI_Temp.html"];
			
			if([[NSFileManager defaultManager] fileExistsAtPath:HTMLPath]) {
				NSURL *targetURL = [NSURL fileURLWithPath:HTMLPath];
				
				
				
				NSString *SIPDFName = [NSString stringWithFormat:@"Forms/_%@.pdf", SINo];
				self.PDFCreator = [NDHTMLtoPDF exportPDFWithURL:targetURL
													 pathForPDF:[documentsDirectory stringByAppendingPathComponent:SIPDFName]
													   delegate:self
													   pageSize:kPaperSizeA4
														margins:UIEdgeInsetsMake(0, 0, 0, 0)
								   ];
				
				
				
			}
            */
		}
        
        OtherRiderCode = Nil;
		OtherRiderDeductible= Nil;
		OtherRiderDesc= Nil;
		OtherRiderHL= Nil;
		OtherRiderHLP= Nil;
		OtherRiderHLPTerm= Nil;
		OtherRiderHLTerm= Nil;
		OtherRiderPlanOption= Nil;
		OtherRiderSA = Nil;
		OtherRiderTerm= Nil;
		OtherRiderPremium = Nil;
		OtherRiderPaymentTerm= Nil;
        OtherRiderPaymentChoice = Nil;
		OtherRiderLoadingPremium = Nil;
        OtherRiderPTypeCode = Nil;
		OtherRiderPTypeSeq = Nil;
        
		UnitizeRiderCode = Nil;
		UnitizeRiderSA = Nil;
		UnitizeRiderHL= Nil;
		UnitizeRiderHLPct = Nil;
		UnitizeRiderTerm = Nil;
		UnitizeRiderPlanChoice = Nil;
		UnitizeRiderDeductible = Nil;
		UnitizeRiderPremium = Nil;
		UnitizeRiderPremium2 = Nil;
		UnitizeRiderPremium3 = Nil;
		UniTotalRiderPremAtPolYear = Nil;
		UniTotalRiderPremWithAlloc = Nil;
        UnitizeRiderHLPctTerm = Nil;
		UnitizeRiderHLTerm = Nil;
        UnitizeRiderPreDeductible = Nil;
		UnitizeRiderPostDeductible = Nil;
		
		OverallAddTPDBegin= Nil;
		OverallAddTPDEOY= Nil;
		OverallEOYTotalOADBear= Nil;
		OverallEOYTotalOADBull= Nil;
		OverallEOYTotalOADFlat= Nil;
		OverallEOYTotalTPDBear= Nil;
		OverallEOYTotalTPDBull= Nil;
		OverallEOYTotalTPDFlat= Nil;
		OverallFullSurrenderValue= Nil;
		OverallMonthlyIncome= Nil;
		OverallOADBegin= Nil;
		OverallOADEOY= Nil;
		OverallTotalFundSurrenderValueBear= Nil;
		OverallTotalFundSurrenderValueBull= Nil;
		OverallTotalFundSurrenderValueFlat= Nil;
		OverallTotalPremiumPaid= Nil;
		OverallTPDBegin= Nil;
		OverallTPDEOY = Nil;
		OverallYearlyIncome = Nil;
        
        OtherRiderOverallTPDEOY = Nil;
        
        BullSurrender = Nil;
        FlatSurrender = Nil;
        BearSurrender = Nil;

        getHL = Nil;
        getHLPct = Nil;
        getHLTerm = Nil;
        getHLPctTerm = Nil;
        getOccLoading = Nil;
        strBumpMode = Nil;
        strBasicPremium = Nil;
        strBasicPremium_Bump = Nil;
        strBasicSA = Nil;
        strRTUPFrom = Nil;
        strRTUPFor = Nil;
        strRTUPAmount = Nil;
        strGrayRTUPAmount = Nil;
        strCovPeriod = Nil;
        strRRTUOPrem = Nil;
        strRRTUOFrom = Nil;
        strRRTUOFor = Nil;
        PYSex = Nil;
        SecSex = Nil;
        ECAR1RiderTerm = Nil;
        ECAR1RiderDesc = Nil;
        ECAR1SumAssured = Nil;
        ECAR1HLoading = Nil;
        ECAR1HLoadingPct = Nil;
        ECAR1Premium = Nil;
        ECAR1PaymentTerm = Nil;
        ECAR1ReinvestGYI = Nil;
        ECAR1HLoadingTerm = Nil;
        ECAR1HLoadingPctTerm = Nil;
        ECAR1LoadingPremium = Nil;
        ECAR6RiderTerm = Nil;
        ECAR6RiderDesc = Nil;
        ECAR6SumAssured= Nil;
        ECAR6HLoading= Nil;
        ECAR6HLoadingPct= Nil;
        ECAR6Premium= Nil;
        ECAR6PaymentTerm= Nil;
        ECAR6ReinvestGYI= Nil;
        ECAR6HLoadingTerm= Nil;
        ECAR6HLoadingPctTerm= Nil;
        ECAR6LoadingPremium= Nil;
        ECAR55RiderTerm= Nil;
        ECAR55RiderDesc= Nil;
        ECAR55SumAssured= Nil;
        ECAR55HLoading= Nil;
        ECAR55HLoadingPct= Nil;
        ECAR55Premium= Nil;
        ECAR55PaymentTerm= Nil;
        ECAR55ReinvestGYI= Nil;
        ECAR55HLoadingTerm= Nil;
        ECAR55HLoadingPctTerm= Nil;
        ECAR60RiderTerm= Nil;
        ECAR60RiderDesc= Nil;
        ECAR60SumAssured= Nil;
        ECAR60HLoading= Nil;
        ECAR60HLoadingPct= Nil;
        ECAR60Premium= Nil;
        ECAR60PaymentTerm= Nil;
        ECAR60ReinvestGYI= Nil;
        ECAR60HLoadingTerm= Nil;
        ECAR60HLoadingPctTerm= Nil;
        ECAR60LoadingPrem= Nil;
        TopupStart= Nil;
        TopupEnd= Nil;
        TopupAmount= Nil;
		
	}
    
    
}

- (void)HTMLtoPDFDidSucceed:(NDHTMLtoPDF *)htmlToPDF{
	NSLog(@"succeed");
}

-(void)HTMLtoPDFDidFail:(NDHTMLtoPDF *)htmlToPDF{
	NSLog(@"error");
}

- (void)didReceiveMemoryWarning
{
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

-(void)deleteTemp{
    sqlite3_stmt *statement;
    NSString *QuerySQL;
    if (sqlite3_open([databasePath UTF8String], &contactDB) == SQLITE_OK){
        
		QuerySQL = @"Delete from UL_temp_RPUO";
        if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
            if (sqlite3_step(statement) == SQLITE_DONE) {
                
                
            }
            sqlite3_finalize(statement);
        }
		
        QuerySQL = @"Delete from UL_temp_ECAR60";
        if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
            if (sqlite3_step(statement) == SQLITE_DONE) {
                
                
            }
            sqlite3_finalize(statement);
        }
		
		QuerySQL = @"Delete from UL_temp_ECAR";
        if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
            if (sqlite3_step(statement) == SQLITE_DONE) {
                
                
            }
            sqlite3_finalize(statement);
        }
        
        QuerySQL = @"Delete from UL_temp_ECAR6";
        if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
            if (sqlite3_step(statement) == SQLITE_DONE) {
                
                
            }
            sqlite3_finalize(statement);
        }
        
		
		QuerySQL = @"Delete from UL_temp_Fund";
        if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
            if (sqlite3_step(statement) == SQLITE_DONE) {
                
                
            }
            sqlite3_finalize(statement);
        }
		
		QuerySQL = @"Delete from UL_temp_Summary";
        if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
            if (sqlite3_step(statement) == SQLITE_DONE) {
                
                
            }
            sqlite3_finalize(statement);
        }
		
        QuerySQL = @"Delete from UL_temp_Rider";
        if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
            if (sqlite3_step(statement) == SQLITE_DONE) {
                
                
            }
            sqlite3_finalize(statement);
        }
        
        QuerySQL = @"Delete from UL_temp_Trad";
        if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
            if (sqlite3_step(statement) == SQLITE_DONE) {
                
                
            }
            sqlite3_finalize(statement);
        }
        
        QuerySQL = @"Delete from UL_temp_Trad_Basic";
        if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
            if (sqlite3_step(statement) == SQLITE_DONE) {
                
                
            }
            sqlite3_finalize(statement);
        }
        
        QuerySQL = @"Delete from UL_temp_Trad_details";
        if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
            if (sqlite3_step(statement) == SQLITE_DONE) {
                
                
            }
            sqlite3_finalize(statement);
        }
        
        QuerySQL = @"Delete  from UL_temp_Trad_Overall";
        if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
            if (sqlite3_step(statement) == SQLITE_DONE) {
                
                
            }
            sqlite3_finalize(statement);
        }
        
        QuerySQL = @"Delete from UL_temp_Trad_Rider";
        if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
            if (sqlite3_step(statement) == SQLITE_DONE) {
                
                
            }
            sqlite3_finalize(statement);
        }
        
        QuerySQL = @"Delete from UL_temp_Trad_Riderillus";
        if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
            if (sqlite3_step(statement) == SQLITE_DONE) {
                
                
            }
            sqlite3_finalize(statement);
        }
        
        QuerySQL = @"Delete from UL_temp_Trad_Summary";
        if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
            if (sqlite3_step(statement) == SQLITE_DONE) {
                
                
            }
            sqlite3_finalize(statement);
        }
        
        QuerySQL = @"Delete from UL_temp_trad_LA";
        if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
            if (sqlite3_step(statement) == SQLITE_DONE) {
                
                
            }
            sqlite3_finalize(statement);
        }
        
        sqlite3_close(contactDB);
    }
    
    statement = Nil;
    QuerySQL = Nil;
    
}

-(void)InsertToUL_Temp_Trad_LA{
    sqlite3_stmt *statement;
    sqlite3_stmt *statement2;
    sqlite3_stmt *statement3;
    NSString *getCustomerCodeSQL;
    NSString *getFromCltProfileSQL;
    NSString *smoker;
    NSString *QuerySQL;
    
    NSLog(@"insert to UL Temp Trad LA --- start");
    
	if (sqlite3_open([databasePath UTF8String], &contactDB) == SQLITE_OK){
		getCustomerCodeSQL = [ NSString stringWithFormat:@"select CustCode from UL_LaPayor where sino = \"%@\" AND seq = %d ", SINo, 1];
		
		if(sqlite3_prepare_v2(contactDB, [getCustomerCodeSQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
			if (sqlite3_step(statement) == SQLITE_ROW) {
				CustCode  = [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 0)];
				
				getFromCltProfileSQL  = [NSString stringWithFormat:@"Select Name, Smoker, sex, ALB from clt_profile where custcode  = \"%@\"",  CustCode];
				
				if(sqlite3_prepare_v2(contactDB, [getFromCltProfileSQL UTF8String], -1, &statement2, NULL) == SQLITE_OK) {
					
					if (sqlite3_step(statement2) == SQLITE_ROW) {
						Name = [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement2, 0)]; 
						smoker = [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement2, 1)];
						sex = [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement2, 2)];
						Age = sqlite3_column_int(statement2, 3);
						
						QuerySQL  = [ NSString stringWithFormat:@"Insert INTO UL_Temp_Trad_LA (\"SINo\", \"LADesc\", "
									 "\"PtypeCode\", \"Seq\", \"Name\", \"Age\", \"Sex\", \"Smoker\", \"LADescM\") "
									 " VALUES (\"%@\",\"Life Assured\",\"LA\",\"%d\",\"%@\",\"%d\", \"%@\", \"%@\", "
									 " \"Hayat yang Diinsuranskan\")", SINo, 1, Name, Age, sex, smoker ];
						
						if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement3, NULL) == SQLITE_OK) {
							if (sqlite3_step(statement3) == SQLITE_DONE) {
								//NSLog(@"done insert to temp_trad_LA");
							}
							sqlite3_finalize(statement3);
						}
						
						smoker = Nil;
					}
					sqlite3_finalize(statement2);
				}
			}
			sqlite3_finalize(statement);
		}
        
        getCustomerCodeSQL = [ NSString stringWithFormat:@"select CustCode from UL_LaPayor where sino = \"%@\" AND seq = %d ", SINo, 2];
        
        if(sqlite3_prepare_v2(contactDB, [getCustomerCodeSQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
            if (sqlite3_step(statement) == SQLITE_ROW) {
                CustCode  = [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 0)];
                
                getFromCltProfileSQL  = [NSString stringWithFormat:@"Select Name, Smoker, sex, ALB from clt_profile where custcode  = \"%@\"",  CustCode];
                
                if(sqlite3_prepare_v2(contactDB, [getFromCltProfileSQL UTF8String], -1, &statement2, NULL) == SQLITE_OK) {
                    
                    if (sqlite3_step(statement2) == SQLITE_ROW) {
                        NSString *SecName = [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement2, 0)];
                        NSString *Secsmoker = [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement2, 1)];
						SecSex = [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement2, 2)];
						SecAge = sqlite3_column_int(statement2, 3);
                        
                        QuerySQL  = [ NSString stringWithFormat:@"Insert INTO UL_Temp_Trad_LA (\"SINo\", \"LADesc\", "
                                     "\"PtypeCode\", \"Seq\", \"Name\", \"Age\", \"Sex\", \"Smoker\", \"LADescM\") "
                                     " VALUES (\"%@\",\"2nd Life Assured\",\"LA\",\"%d\",\"%@\",\"%d\", \"%@\", \"%@\", "
                                     " \"Hayat yang Diinsuranskan ke-2\")", SINo, 2, SecName, SecAge, SecSex, Secsmoker ];
                        
                        if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement3, NULL) == SQLITE_OK) {
                            if (sqlite3_step(statement3) == SQLITE_DONE) {
                                //NSLog(@"done insert to temp_trad_LA");
                            }
                            sqlite3_finalize(statement3);
                        }
                        
                        SecName = Nil;
                        Secsmoker = Nil;
                        
                    }
                    sqlite3_finalize(statement2);
                }
            }
            sqlite3_finalize(statement);
        }
        
        getCustomerCodeSQL = [ NSString stringWithFormat:@"select CustCode from UL_LaPayor where sino = \"%@\" AND PtypeCode = 'PY' ", SINo];
        
        if(sqlite3_prepare_v2(contactDB, [getCustomerCodeSQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
            if (sqlite3_step(statement) == SQLITE_ROW) {
                CustCode  = [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 0)];
                
                getFromCltProfileSQL  = [NSString stringWithFormat:@"Select Name, Smoker, sex, ALB from clt_profile where custcode  = \"%@\"",  CustCode];
                
                if(sqlite3_prepare_v2(contactDB, [getFromCltProfileSQL UTF8String], -1, &statement2, NULL) == SQLITE_OK) {
                    
                    if (sqlite3_step(statement2) == SQLITE_ROW) {
                        NSString *PYName = [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement2, 0)];
                        NSString *PYsmoker = [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement2, 1)];
						PYSex = [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement2, 2)];
						PYAge = sqlite3_column_int(statement2, 3);
                        
                        QuerySQL  = [ NSString stringWithFormat:@"Insert INTO UL_Temp_Trad_LA (\"SINo\", \"LADesc\", "
                                     "\"PtypeCode\", \"Seq\", \"Name\", \"Age\", \"Sex\", \"Smoker\", \"LADescM\") "
                                     " VALUES (\"%@\",\"Policy Owner\",\"PY\",\"%d\",\"%@\",\"%d\", \"%@\", \"%@\", "
                                     " \"Pemunya Polisi\")", SINo, 1, PYName, PYAge, PYSex, PYsmoker ];
                        
                        if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement3, NULL) == SQLITE_OK) {
                            if (sqlite3_step(statement3) == SQLITE_DONE) {
                                
                            }
                            sqlite3_finalize(statement3);
                        }
                        
                        PYName = Nil;
                        PYsmoker = Nil;
                        
                    }
                    sqlite3_finalize(statement2);
                }
            }
            sqlite3_finalize(statement);
        }
		
         sqlite3_close(contactDB);
	}
    /*
    // check for 2nd life assured
    if (sqlite3_open([databasePath UTF8String], &contactDB) == SQLITE_OK){
        
        sqlite3_close(contactDB);
    }
    
    //check for payor
    if (sqlite3_open([databasePath UTF8String], &contactDB) == SQLITE_OK){
        
        sqlite3_close(contactDB);
    }
     */
    NSLog(@"insert to UL_Temp_Trad_LA --- End");
    statement = Nil;
    statement2 = Nil;
    statement3 = Nil;
    getCustomerCodeSQL = Nil;
    getFromCltProfileSQL = Nil;
    smoker = Nil;
    QuerySQL = Nil;
    
}

-(void)InsertToUL_Temp_Trad_Basic{
    sqlite3_stmt *statement;
    NSString *QuerySQL;
	int inputAge;
	NSMutableArray *AnnualPremium = [[NSMutableArray alloc] init ];
    NSMutableArray *BasicSumAssured = [[NSMutableArray alloc] init ];
	NSMutableArray *CumulativePremium = [[NSMutableArray alloc] init ];
	NSMutableArray *AllocatedBasicPrem = [[NSMutableArray alloc] init ];
	NSMutableArray *AllocatedRiderPrem = [[NSMutableArray alloc] init ];
	NSMutableArray *UnAllocatedAllPrem = [[NSMutableArray alloc] init ];
	NSMutableArray *CumAlloBasicPrem = [[NSMutableArray alloc] init ];
	NSMutableArray *CumAlloRiderPrem = [[NSMutableArray alloc] init ];
	NSMutableArray *TotalCumPrem = [[NSMutableArray alloc] init ];
	NSMutableArray *BasicInsCharge = [[NSMutableArray alloc] init ];
	NSMutableArray *RiderInsCharge = [[NSMutableArray alloc] init ];
	NSMutableArray *OtherCharge = [[NSMutableArray alloc] init ];
	NSMutableArray *DirectDistributionCost = [[NSMutableArray alloc] init ];
	BullSurrender = [[NSMutableArray alloc] init ];
	FlatSurrender = [[NSMutableArray alloc] init ];
	BearSurrender = [[NSMutableArray alloc] init ];
	NSMutableArray *RiderBullSurrender = [[NSMutableArray alloc] init ];
	NSMutableArray *RiderFlatSurrender = [[NSMutableArray alloc] init ];
	NSMutableArray *RiderBearSurrender = [[NSMutableArray alloc] init ];
	NSMutableArray *TotalBullSurrender = [[NSMutableArray alloc] init ];
	NSMutableArray *TotalFlatSurrender = [[NSMutableArray alloc] init ];
	NSMutableArray *TotalBearSurrender = [[NSMutableArray alloc] init ];
	NSMutableArray *EOFTPDBull = [[NSMutableArray alloc] init ];
	NSMutableArray *EOFTPDFlat = [[NSMutableArray alloc] init ];
	NSMutableArray *EOFTPDBear = [[NSMutableArray alloc] init ];
	NSMutableArray *EOFOADBull = [[NSMutableArray alloc] init ];
	NSMutableArray *EOFOADFlat = [[NSMutableArray alloc] init ];
	NSMutableArray *EOFOADBear = [[NSMutableArray alloc] init ];
	NSMutableArray *FundChargeBull = [[NSMutableArray alloc] init ];
	NSMutableArray *FundChargeFlat = [[NSMutableArray alloc] init ];
	NSMutableArray *FundChargeBear = [[NSMutableArray alloc] init ];
    
    
	
	NSLog(@"------------basic start --------");
	/*
	if (sqlite3_open([databasePath UTF8String], &contactDB) == SQLITE_OK){
		
         QuerySQL = [NSString stringWithFormat: @"Select BasicSA, ATPrem, replace(A.Hloading, '(null)', '0') as Hloading, replace(A.HLoadingPct, '(null)', '0') as HLoadingPct "
         ", BumpMode, sum(b.premium) as TotalRiderPrem from UL_Details A, ul_rider_details B Where  "
         "A.sino = B.sino AND A.sino = '%@' AND ridercode in ('CIRD', 'DCA', 'ACIR', 'HMM', 'MG_IV', "
         "'WI', 'MR', 'TPDMLA', 'PA', 'DHI')", SINo];
         */
		/*
         QuerySQL = [NSString stringWithFormat: @"Select BasicSA, ATPrem, replace(Hloading, '(null)', '0') as Hloading, replace(HLoadingPct, '(null)', '0') as HLoadingPct "
         ", BumpMode from UL_Details Where  "
         " sino = '%@' ", SINo];
         
         //NSLog(@"%@", QuerySQL);
         if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
         if (sqlite3_step(statement) == SQLITE_ROW) {
         
         BasicSA = [[[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 0)] doubleValue ];
         
         strBasicSA = [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 0)] ;
         
         strBasicPremium = [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 1)] ;
         
         const char *temp = (const char*)sqlite3_column_text(statement, 2);
         getHL = temp == NULL ? nil : [[NSString alloc] initWithUTF8String:temp];
         
         const char *temp2 = (const char*)sqlite3_column_text(statement, 3);
         getHLPct = temp2 == NULL ? nil : [[NSString alloc] initWithUTF8String:temp2];
         
         strBumpMode	= [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 4)] ;
         
         }
         sqlite3_finalize(statement);
         }
         */
		/*
         QuerySQL = [NSString stringWithFormat: @"Select sum(premium) as TotalRiderPrem from  ul_rider_details Where  "
         " sino = '%@' AND ridercode in ('CIRD', 'DCA', 'ACIR', 'HMM', 'MG_IV', "
         "'WI', 'MR', 'TPDMLA', 'PA', 'DHI')", SINo];
         if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
         if (sqlite3_step(statement) == SQLITE_ROW) {
         
         const char *temp3 = (const char*)sqlite3_column_text(statement, 0);
         strUnitizeRiderPrem = temp3 == NULL ? nil : [[NSString alloc] initWithUTF8String:temp3];
         
         }
         else{
         strUnitizeRiderPrem = @"0.00";
         }
         sqlite3_finalize(statement);
         }
		 
		
		
		sqlite3_close(contactDB);
	}
	*/
	if (sqlite3_open([UL_RatesDatabasePath UTF8String], &contactDB) == SQLITE_OK){
		if (UnitizeRiderCode.count > 0) {
			for (int i = 1; i <= [strCovPeriod intValue]; i++) {
				double tempUniRiderPrem = 0.00;
				double tempValue = 0.00;
				double tempUniRiderAlloc = 0.00;

				
				for (int j = 0; j < [UnitizeRiderCode count]; j++) {
					if ([[UnitizeRiderTerm objectAtIndex:j ] integerValue ] >= i ) {
                        if ([[UnitizeRiderCode objectAtIndex:j] isEqualToString:@"CCR"] || [[UnitizeRiderCode objectAtIndex:j] isEqualToString:@"TCCR"] ||
                            [[UnitizeRiderCode objectAtIndex:j] isEqualToString:@"LDYR"] || [[UnitizeRiderCode objectAtIndex:j] isEqualToString:@"MSR"]) {
                            if (i > 15) {
                                tempUniRiderPrem = tempUniRiderPrem + [[UnitizeRiderPremium3 objectAtIndex:j] doubleValue ];
                            }
                            else if (i > 5) {
                                tempUniRiderPrem = tempUniRiderPrem + [[UnitizeRiderPremium2 objectAtIndex:j] doubleValue ];
                            }
                            else
                            {
                                tempUniRiderPrem = tempUniRiderPrem + [[UnitizeRiderPremium objectAtIndex:j] doubleValue ];
                            }
                        }
                        else if ([[UnitizeRiderCode objectAtIndex:j] isEqualToString:@"LDYR-PCB"] || [[UnitizeRiderCode objectAtIndex:j] isEqualToString:@"LDYR-BBB"]) {
                            if (i <= 1) {
                                tempUniRiderPrem = tempUniRiderPrem + [[UnitizeRiderPremium objectAtIndex:j] doubleValue ];
                            }
                            else{
                                tempUniRiderPrem = tempUniRiderPrem + 0.00;
                            }
                                

                        }
                        else if ([[UnitizeRiderCode objectAtIndex:j] isEqualToString:@"JCCR"] ) {
                            if (i + Age > 30) {
                                tempUniRiderPrem = tempUniRiderPrem + [[UnitizeRiderPremium3 objectAtIndex:j] doubleValue ];
                            }
                            else if (i + Age > 16) {
                                tempUniRiderPrem = tempUniRiderPrem + [[UnitizeRiderPremium2 objectAtIndex:j] doubleValue ];
                            }
                            else
                            {
                                tempUniRiderPrem = tempUniRiderPrem + [[UnitizeRiderPremium objectAtIndex:j] doubleValue ];
                            }
                        }
                        else if ([[UnitizeRiderCode objectAtIndex:j] isEqualToString:@"MDSR1"] || [[UnitizeRiderCode objectAtIndex:j] isEqualToString:@"MDSR2"] ||
                                 [[UnitizeRiderCode objectAtIndex:j] isEqualToString:@"MDSR1-ALW"] || [[UnitizeRiderCode objectAtIndex:j] isEqualToString:@"MDSR2-ALW"] ||
                                 [[UnitizeRiderCode objectAtIndex:j] isEqualToString:@"MDSR1-OT"] || [[UnitizeRiderCode objectAtIndex:j] isEqualToString:@"MDSR2-OT"]) {
                            if (i + Age > 80) {
                                tempUniRiderPrem = tempUniRiderPrem + [[UnitizeRiderPremium3 objectAtIndex:j] doubleValue ];
                            }
                            else if (i + Age > 60) {
                                tempUniRiderPrem = tempUniRiderPrem + [[UnitizeRiderPremium2 objectAtIndex:j] doubleValue ];
                            }
                            else
                            {
                                tempUniRiderPrem = tempUniRiderPrem + [[UnitizeRiderPremium objectAtIndex:j] doubleValue ];
                            }
                        }
                        else{
                            tempUniRiderPrem = tempUniRiderPrem + [[UnitizeRiderPremium objectAtIndex:j] doubleValue ];
                        }
                        

                        
						
						
						QuerySQL = [NSString stringWithFormat: @"select Rate from ES_Sys_Rider_Allocation where Term = '%@' AND PolYear = '%d'",
									[UnitizeRiderTerm objectAtIndex:j], i];
						
						//NSLog(@"%@", QuerySQL);
						if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
							if (sqlite3_step(statement) == SQLITE_ROW) {
								tempValue = sqlite3_column_double(statement, 0);
								
							}
							else{
								tempValue = 0.00;
							}
							sqlite3_finalize(statement);
						}
						else{
							tempValue = 0.00;
						}
						
                        if ([[UnitizeRiderCode objectAtIndex:j] isEqualToString:@"CCR"] || [[UnitizeRiderCode objectAtIndex:j] isEqualToString:@"TCCR"] ||
                            [[UnitizeRiderCode objectAtIndex:j] isEqualToString:@"LDYR"] || [[UnitizeRiderCode objectAtIndex:j] isEqualToString:@"MSR"]) {
                            double PremAtLayer1 = [[UnitizeRiderPremium2 objectAtIndex:j] doubleValue] - [[UnitizeRiderPremium objectAtIndex:j] doubleValue];
                            double PremAtLayer2 = [[UnitizeRiderPremium3 objectAtIndex:j] doubleValue] - [[UnitizeRiderPremium2 objectAtIndex:j] doubleValue];
                            
                            if (i > 15) {
                                tempUniRiderAlloc = tempUniRiderAlloc + ([[UnitizeRiderPremium objectAtIndex:j] doubleValue ] * tempValue/100.00 );
                                
                                QuerySQL = [NSString stringWithFormat: @"select Rate from ES_Sys_Rider_Allocation where Term = '%d' AND PolYear = '%d'",
                                            [[UnitizeRiderTerm objectAtIndex:j] intValue] - 5, i - (6 - 1)];
                                
                                if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
                                    if (sqlite3_step(statement) == SQLITE_ROW) {
                                        tempValue = sqlite3_column_double(statement, 0);
                                    }
                                    
                                    sqlite3_finalize(statement);
                                }
                                
                                tempUniRiderAlloc = tempUniRiderAlloc + (PremAtLayer1 * tempValue/100.00 );
                                
                                QuerySQL = [NSString stringWithFormat: @"select Rate from ES_Sys_Rider_Allocation where Term = '%d' AND PolYear = '%d'",
                                            [[UnitizeRiderTerm objectAtIndex:j] intValue] - 15, i - (16 - 1)];
                                
                                if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
                                    if (sqlite3_step(statement) == SQLITE_ROW) {
                                        tempValue = sqlite3_column_double(statement, 0);
                                    }
                                    
                                    sqlite3_finalize(statement);
                                }
                                
                                tempUniRiderAlloc = tempUniRiderAlloc + (PremAtLayer2 * tempValue/100.00 );
                                
                            }
                            else if (i > 5) {
                                tempUniRiderAlloc = tempUniRiderAlloc + ([[UnitizeRiderPremium objectAtIndex:j] doubleValue ] * tempValue/100.00 );
                                
                                QuerySQL = [NSString stringWithFormat: @"select Rate from ES_Sys_Rider_Allocation where Term = '%d' AND PolYear = '%d'",
                                            [[UnitizeRiderTerm objectAtIndex:j] intValue] - 5, i - (6 - 1)];
                                
                                if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
                                    if (sqlite3_step(statement) == SQLITE_ROW) {
                                        tempValue = sqlite3_column_double(statement, 0);
                                    }
                                    
                                    sqlite3_finalize(statement);
                                }
                                
                                tempUniRiderAlloc = tempUniRiderAlloc + (PremAtLayer1 * tempValue/100.00 );
                            }
                            else
                            {
                                tempUniRiderAlloc = tempUniRiderAlloc + ([[UnitizeRiderPremium objectAtIndex:j] doubleValue ] * tempValue/100.00 );
                            }
                        }
                        else if ([[UnitizeRiderCode objectAtIndex:j] isEqualToString:@"LDYR-PCB"] ) {
                            
                            if(i <= 1)
                            {
                                tempUniRiderAlloc = tempUniRiderAlloc + ([[UnitizeRiderPremium objectAtIndex:j] doubleValue ] * 95.00/100.00 );
                            }
                            else{
                                tempUniRiderAlloc = tempUniRiderAlloc + 0.00;
                            }
                    
                        }
                        else if ( [[UnitizeRiderCode objectAtIndex:j] isEqualToString:@"LDYR-BBB"]) {
                            
                            if(i <= 1)
                            {
                                tempUniRiderAlloc = tempUniRiderAlloc + ([[UnitizeRiderPremium objectAtIndex:j] doubleValue ] * 96.75/100.00 );
                            }
                            else{
                                tempUniRiderAlloc = tempUniRiderAlloc + 0.00;
                            }
                            
                        }

                        else if ([[UnitizeRiderCode objectAtIndex:j] isEqualToString:@"MDSR1"] || [[UnitizeRiderCode objectAtIndex:j] isEqualToString:@"MDSR2"] ||
                                 [[UnitizeRiderCode objectAtIndex:j] isEqualToString:@"MDSR1-ALW"] || [[UnitizeRiderCode objectAtIndex:j] isEqualToString:@"MDSR2-ALW"] ||
                                 [[UnitizeRiderCode objectAtIndex:j] isEqualToString:@"MDSR1-OT"] || [[UnitizeRiderCode objectAtIndex:j] isEqualToString:@"MDSR2-OT"]) {
                            double PremAtLayer1 = [[UnitizeRiderPremium2 objectAtIndex:j] doubleValue] - [[UnitizeRiderPremium objectAtIndex:j] doubleValue];
                            double PremAtLayer2 = [[UnitizeRiderPremium3 objectAtIndex:j] doubleValue] - [[UnitizeRiderPremium2 objectAtIndex:j] doubleValue];
                            
                            if (i + Age > 80) {
                                tempUniRiderAlloc = tempUniRiderAlloc + ([[UnitizeRiderPremium objectAtIndex:j] doubleValue ] * tempValue/100.00 );
                                
                                tempUniRiderAlloc = tempUniRiderAlloc + (PremAtLayer1 * tempValue/100.00 );
                                
                                tempUniRiderAlloc = tempUniRiderAlloc + (PremAtLayer2 * tempValue/100.00 );
                                
                            }
                            else if (i + Age > 60) {
                                tempUniRiderAlloc = tempUniRiderAlloc + ([[UnitizeRiderPremium objectAtIndex:j] doubleValue ] * tempValue/100.00 );
                                
                                tempUniRiderAlloc = tempUniRiderAlloc + (PremAtLayer1 * tempValue/100.00 );
                            }
                            else
                            {
                                tempUniRiderAlloc = tempUniRiderAlloc + ([[UnitizeRiderPremium objectAtIndex:j] doubleValue ] * tempValue/100.00 );
                            }
                        }
                        else if ([[UnitizeRiderCode objectAtIndex:j] isEqualToString:@"JCCR"] ) {
                            double PremAtLayer1 = [[UnitizeRiderPremium2 objectAtIndex:j] doubleValue] - [[UnitizeRiderPremium objectAtIndex:j] doubleValue];
                            double PremAtLayer2 = [[UnitizeRiderPremium3 objectAtIndex:j] doubleValue] - [[UnitizeRiderPremium2 objectAtIndex:j] doubleValue];
                            
                            if (i + Age > 30) {
                                tempUniRiderAlloc = tempUniRiderAlloc + ([[UnitizeRiderPremium objectAtIndex:j] doubleValue ] * tempValue/100.00 );
                                
                                QuerySQL = [NSString stringWithFormat: @"select Rate from ES_Sys_Rider_Allocation where Term = '%d' AND PolYear = '%d'",
                                            [[UnitizeRiderTerm objectAtIndex:j] intValue] - (16 - Age), i - (16 - Age) ];
                                
                                if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
                                    if (sqlite3_step(statement) == SQLITE_ROW) {
                                        tempValue = sqlite3_column_double(statement, 0);
                                    }
                                    
                                    sqlite3_finalize(statement);
                                }
                                
                                tempUniRiderAlloc = tempUniRiderAlloc + (PremAtLayer1 * tempValue/100.00 );
                                
                                QuerySQL = [NSString stringWithFormat: @"select Rate from ES_Sys_Rider_Allocation where Term = '%d' AND PolYear = '%d'",
                                            [[UnitizeRiderTerm objectAtIndex:j] intValue] - (30 - Age), i - (30 -  Age)];
                                
                                if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
                                    if (sqlite3_step(statement) == SQLITE_ROW) {
                                        tempValue = sqlite3_column_double(statement, 0);
                                    }
                                    
                                    sqlite3_finalize(statement);
                                }
                                
                                tempUniRiderAlloc = tempUniRiderAlloc + (PremAtLayer2 * tempValue/100.00 );
                                
                            }
                            else if (i + Age > 16) {
                                tempUniRiderAlloc = tempUniRiderAlloc + ([[UnitizeRiderPremium objectAtIndex:j] doubleValue ] * tempValue/100.00 );
                                
                                QuerySQL = [NSString stringWithFormat: @"select Rate from ES_Sys_Rider_Allocation where Term = '%d' AND PolYear = '%d'",
                                            [[UnitizeRiderTerm objectAtIndex:j] intValue] - (16 - Age), i - (16 - Age)];
                                
                                if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
                                    if (sqlite3_step(statement) == SQLITE_ROW) {
                                        tempValue = sqlite3_column_double(statement, 0);
                                    }
                                    
                                    sqlite3_finalize(statement);
                                }
                                
                                tempUniRiderAlloc = tempUniRiderAlloc + (PremAtLayer1 * tempValue/100.00 );
                            }
                            else
                            {
                                tempUniRiderAlloc = tempUniRiderAlloc + ([[UnitizeRiderPremium objectAtIndex:j] doubleValue ] * tempValue/100.00 );
                            }
                        }
                        else{
                            tempUniRiderAlloc = tempUniRiderAlloc + ([[UnitizeRiderPremium objectAtIndex:j] doubleValue ] * tempValue/100.00 );
                        }
						
						
					}
				}
				
				[UniTotalRiderPremAtPolYear addObject:[NSString stringWithFormat:@"%f", tempUniRiderPrem]];
				[UniTotalRiderPremWithAlloc addObject:[NSString stringWithFormat:@"%f", tempUniRiderAlloc]];
			}
		}
		else{
			for (int i = 1; i <= [strCovPeriod intValue]; i++) {
				[UniTotalRiderPremAtPolYear addObject:[NSString stringWithFormat:@"0.00"]];
				[UniTotalRiderPremWithAlloc addObject:[NSString stringWithFormat:@"0.00"]];
			}
			
		}
        
        sqlite3_close(contactDB);
	}
	
	if (UniTotalRiderPremAtPolYear.count < [strCovPeriod intValue]) {
		NSLog(@" UniTotalRiderPremAtPolYear is less than 30");
		return;
	}
    
	if (UniTotalRiderPremWithAlloc.count < [strCovPeriod intValue]) {
		NSLog(@" UniTotalRiderAlloc is less than 30");
		return;
	}
	
	
	if ([strBasicPremium isEqualToString:@""]) {
		NSLog(@"no basic premium");
		return;
	}
	
	[self ResetData];
	//int tempSustainYear = PolicySustainYear == 0 ? 100 : PolicySustainYear;
	
    for (int i =1; i <= ([strCovPeriod intValue] > 30 ? 30 : [strCovPeriod intValue]); i++) {
		//if (Age + i <= tempSustainYear) {
        [BasicSumAssured addObject: [NSString stringWithFormat:@"%.0f", [strBasicSA doubleValue] * [self JuvenilienFactor:Age + i]]];
        [OverallTPDBegin addObject:[BasicSumAssured objectAtIndex:i - 1 ]];
        [OverallTPDEOY addObject:[BasicSumAssured objectAtIndex:i - 1 ]];
        [OverallFullSurrenderValue addObject:@"0.00"];
        
        double TotalPolicyPrem = 0;
        if ([TopupAmount intValue] == 0) {
            TotalPolicyPrem = [strBasicPremium doubleValue] + [[UniTotalRiderPremAtPolYear objectAtIndex:i -1] doubleValue];
            [AnnualPremium addObject: [NSString stringWithFormat:@"%.3f", TotalPolicyPrem]];
            //NSLog(@"premium ok");
            [OverallTotalPremiumPaid addObject:[AnnualPremium objectAtIndex:i - 1 ]];
        }
        else{
        /*
            if (i >= [TopupStart intValue] && i <= [TopupEnd intValue] + 1) {
                TotalPolicyPrem = [strBasicPremium doubleValue] + [[UniTotalRiderPremAtPolYear objectAtIndex:i -1] doubleValue] + [TopupAmount doubleValue];
                [AnnualPremium addObject: [NSString stringWithFormat:@"%.3f", TotalPolicyPrem]];
                [OverallTotalPremiumPaid addObject:[AnnualPremium objectAtIndex:i - 1 ]];
            }
            else{
                TotalPolicyPrem = [strBasicPremium doubleValue] + [[UniTotalRiderPremAtPolYear objectAtIndex:i -1] doubleValue];
                [AnnualPremium addObject: [NSString stringWithFormat:@"%.3f", TotalPolicyPrem]];
                //NSLog(@"premium ok");
                [OverallTotalPremiumPaid addObject:[AnnualPremium objectAtIndex:i - 1 ]];
            }
         */
            TotalPolicyPrem = [strBasicPremium doubleValue] + [[UniTotalRiderPremAtPolYear objectAtIndex:i -1] doubleValue] + [self ReturnExcessPrem:i];
            [AnnualPremium addObject: [NSString stringWithFormat:@"%.3f", TotalPolicyPrem]];
            [OverallTotalPremiumPaid addObject:[AnnualPremium objectAtIndex:i - 1 ]];
        }
        
        
        if (i == 1) {
            [CumulativePremium addObject: [AnnualPremium objectAtIndex: i -1]];
        }
        else{
            NSString *Prev = [NSString stringWithFormat:@"%.3f", [[CumulativePremium objectAtIndex:i - 2] doubleValue ] + [[AnnualPremium objectAtIndex: i -1] doubleValue ]];
            [CumulativePremium addObject: Prev];
        }
        //NSLog(@"cumPremium ok");
        
        double sss = [self ReturnPremAllocation:i];
        //[AllocatedBasicPrem addObject:[NSString stringWithFormat:@"%f", [strBasicPremium doubleValue ]  * sss]];
        [AllocatedBasicPrem addObject:[NSString stringWithFormat:@"%f", ([strBasicPremium doubleValue ]  * sss) +  ([self ReturnExcessPrem:i] *ExcessAllo ) + ([self ReturnRegTopUpPrem] * RegularAllo)]];
        [AllocatedRiderPrem addObject:[NSString stringWithFormat:@"%f", [[UniTotalRiderPremWithAlloc objectAtIndex:i -1] doubleValue ]]];
        
        [UnAllocatedAllPrem addObject:[NSString stringWithFormat:@"%f",
                                       TotalPolicyPrem - [[AllocatedBasicPrem objectAtIndex:i - 1] doubleValue] - [[AllocatedRiderPrem objectAtIndex:i - 1] doubleValue]]];
        
        if (i == 1) {
            [CumAlloBasicPrem addObject: [AllocatedBasicPrem objectAtIndex: i -1]];
        }
        else{
            NSString *Prev = [NSString stringWithFormat:@"%f", [[CumAlloBasicPrem objectAtIndex:i - 2] doubleValue ] + [[AllocatedBasicPrem objectAtIndex: i -1] doubleValue ]];
            [CumAlloBasicPrem addObject: Prev];
        }
        
        if (i == 1) {
            [CumAlloRiderPrem addObject: [AllocatedRiderPrem objectAtIndex: i -1]];
        }
        else{
            NSString *Prev = [NSString stringWithFormat:@"%f", [[CumAlloRiderPrem objectAtIndex:i - 2] doubleValue ] + [[AllocatedRiderPrem objectAtIndex: i -1] doubleValue ]];
            [CumAlloRiderPrem addObject: Prev];
        }
        
        [TotalCumPrem addObject:[NSString stringWithFormat:@"%f", [[CumAlloBasicPrem objectAtIndex:i - 1] doubleValue] + [[CumAlloRiderPrem objectAtIndex:i-1] doubleValue ]]];
        
        [BasicInsCharge addObject:[NSString stringWithFormat:@"%f",[self ReturnTotalBasicMortLow:i] * 12]];
        
        [RiderInsCharge addObject:[NSString stringWithFormat:@"%f", [self ReturnTotalRiderMort:i] * 12.00]];
        
        [OtherCharge addObject:[NSString stringWithFormat:@"%f", (PolicyFee + [self ReturnRiderPolicyFee:i]) * 12]];
        
        [DirectDistributionCost addObject:[NSString stringWithFormat:@"%f", ([strBasicPremium doubleValue ] * [self ReturnBasicCommisionFee:i]/100.00) +
                                           ([self ReturnRegTopUpPrem] * 0.0375) + ([self ReturnExcessPrem:i] * 0.0375) + [self ReturnRiderCommisionFee:i]  ]];
        
        
        
        
        //-----------
        if (i == 1) {
            [self CalcInst:@""];
            [self GetRegWithdrawal];
            [self ReturnFundFactor]; // get factor for each fund
            [self CalcYearDiff]; //get the yearDiff
            
        }
        
        if (i == YearDiff2023 || i == YearDiff2025 || i == YearDiff2028 || i == YearDiff2030 || i == YearDiff2035) {
            [self ReturnMonthEverCash1:i andMonth:12];
            [self ReturnMonthEverCash6:i andMonth:12];
            //[self ReturnMonthEverCash55:i andMonth:12];
            [self ReturnMonthEverCash60:i andMonth:12];
        }
        else
        {
            [self ReturnEverCash1:i];
            [self ReturnEverCash6:i];
            //[self ReturnEverCash55:i];
            [self ReturnEverCash60:i];
        }
        
        
        //---------
        
        double t2023High = ([[AllocatedBasicPrem objectAtIndex:i - 1]doubleValue ] * (i > FundTermPrev2023 ? 0 : [self ReturnVU2023Fac]) * [self ReturnFundChargeRate:@"Ever" andMOP:strBumpMode]) + VU2023PrevValuehigh * [self ReturnFundChargeRate:@"Ever" andMOP:@"A"];
        double t2025High = ([[AllocatedBasicPrem objectAtIndex:i - 1]doubleValue ] *[self ReturnVU2025Fac:i] * [self ReturnFundChargeRate:@"Ever" andMOP:strBumpMode]) + VU2025PrevValuehigh * [self ReturnFundChargeRate:@"Ever" andMOP:@"A"];
        double t2028High = ([[AllocatedBasicPrem objectAtIndex:i - 1]doubleValue ] *[self ReturnVU2028Fac:i] * [self ReturnFundChargeRate:@"Ever" andMOP:strBumpMode]) + VU2028PrevValuehigh * [self ReturnFundChargeRate:@"Ever" andMOP:@"A"];
        double t2030High = ([[AllocatedBasicPrem objectAtIndex:i - 1]doubleValue ] *[self ReturnVU2030Fac:i] * [self ReturnFundChargeRate:@"Ever" andMOP:strBumpMode]) + VU2030PrevValuehigh * [self ReturnFundChargeRate:@"Ever" andMOP:@"A"];
        double t2035High = ([[AllocatedBasicPrem objectAtIndex:i - 1]doubleValue ] *[self ReturnVU2035Fac:i] * [self ReturnFundChargeRate:@"Ever" andMOP:strBumpMode]) + VU2035PrevValuehigh * [self ReturnFundChargeRate:@"Ever" andMOP:@"A"];
        double tCashHigh = ([[AllocatedBasicPrem objectAtIndex:i - 1]doubleValue ] *[self ReturnVUCashFac:i] * [self ReturnFundChargeRate:@"Cash" andMOP:strBumpMode]) + VUCashPrevValueHigh * [self ReturnFundChargeRate:@"Cash" andMOP:@"A"];
        double tRetHigh = ([[AllocatedBasicPrem objectAtIndex:i - 1]doubleValue ] *[self ReturnVURetFac:i] * [self ReturnFundChargeRate:@"Secure" andMOP:strBumpMode]) + VURetPrevValueHigh * [self ReturnFundChargeRate:@"Secure" andMOP:@"A"];
        double tDanaHigh = ([[AllocatedBasicPrem objectAtIndex:i - 1]doubleValue ] *[self ReturnVUDanaFac:i] * [self ReturnFundChargeRate:@"Dana" andMOP:strBumpMode]) + VUDanaPrevValueHigh * [self ReturnFundChargeRate:@"Dana" andMOP:@"A"];
        double tSmartHigh = ([[AllocatedBasicPrem objectAtIndex:i - 1]doubleValue ] *[self ReturnVUSmartFac:i] * [self ReturnFundChargeRate:@"Smart" andMOP:strBumpMode]) + VUSmartPrevValueHigh * [self ReturnFundChargeRate:@"Smart" andMOP:@"A"];
        double tVentureHigh = ([[AllocatedBasicPrem objectAtIndex:i - 1]doubleValue ] *[self ReturnVUVentureFac:i] * [self ReturnFundChargeRate:@"Venture" andMOP:strBumpMode]) + VUVenturePrevValueHigh * [self ReturnFundChargeRate:@"Venture" andMOP:@"A"];
        double tVentureGrowthHigh = ([[AllocatedBasicPrem objectAtIndex:i - 1]doubleValue ] *[self ReturnVUVentureGrowthFac:i] * [self ReturnFundChargeRate:@"VentureGrowth" andMOP:strBumpMode]) + VUVentureGrowthPrevValueHigh * [self ReturnFundChargeRate:@"VentureGrowth" andMOP:@"A"];
        double tVentureBlueChipHigh = ([[AllocatedBasicPrem objectAtIndex:i - 1]doubleValue ] *[self ReturnVUVentureBlueChipFac:i] * [self ReturnFundChargeRate:@"VentureBlueChip" andMOP:strBumpMode]) + VUVentureBlueChipPrevValueHigh * [self ReturnFundChargeRate:@"VentureBlueChip" andMOP:@"A"];
        double tVentureDanathHigh = ([[AllocatedBasicPrem objectAtIndex:i - 1]doubleValue ] *[self ReturnVUVentureDanaFac:i] * [self ReturnFundChargeRate:@"VentureDana" andMOP:strBumpMode]) + VUVentureDanaPrevValueHigh * [self ReturnFundChargeRate:@"VentureDana" andMOP:@"A"];
        double tVentureManagedHigh = ([[AllocatedBasicPrem objectAtIndex:i - 1]doubleValue ] *[self ReturnVUVentureManagedFac:i] * [self ReturnFundChargeRate:@"VentureManaged" andMOP:strBumpMode]) + VUVentureManagedPrevValueHigh * [self ReturnFundChargeRate:@"VentureManaged" andMOP:@"A"];
        double tVentureIncomeHigh = ([[AllocatedBasicPrem objectAtIndex:i - 1]doubleValue ] *[self ReturnVUVentureIncomeFac:i] * [self ReturnFundChargeRate:@"VentureIncome" andMOP:strBumpMode]) + VUVentureIncomePrevValueHigh * [self ReturnFundChargeRate:@"VentureIncome" andMOP:@"A"];


		
        double FundManagementChargeHigh = t2023High + t2025High + t2028High + t2030High + t2035High + tCashHigh + tRetHigh + tDanaHigh + tSmartHigh + tVentureHigh + tVentureGrowthHigh + tVentureBlueChipHigh + tVentureDanathHigh + tVentureManagedHigh + tVentureIncomeHigh;
        FundManagementChargeHigh = FundManagementChargeHigh <= 0 ? 0 : FundManagementChargeHigh;
        
        double tRider2023High = ([[AllocatedRiderPrem objectAtIndex:i - 1]doubleValue ] * (i > FundTermPrev2023 ? 0 : [self ReturnVU2023Fac]) * [self ReturnFundChargeRate:@"Ever" andMOP:strBumpMode]) + RiderVU2023PrevValuehigh * [self ReturnFundChargeRate:@"Ever" andMOP:@"A"];
        double tRider2025High = ([[AllocatedRiderPrem objectAtIndex:i - 1]doubleValue ] *[self ReturnVU2025Fac:i] * [self ReturnFundChargeRate:@"Ever" andMOP:strBumpMode]) + RiderVU2025PrevValuehigh * [self ReturnFundChargeRate:@"Ever" andMOP:@"A"];
        double tRider2028High = ([[AllocatedRiderPrem objectAtIndex:i - 1]doubleValue ] *[self ReturnVU2028Fac:i] * [self ReturnFundChargeRate:@"Ever" andMOP:strBumpMode]) + RiderVU2028PrevValuehigh * [self ReturnFundChargeRate:@"Ever" andMOP:@"A"];
        double tRider2030High = ([[AllocatedRiderPrem objectAtIndex:i - 1]doubleValue ] *[self ReturnVU2030Fac:i] * [self ReturnFundChargeRate:@"Ever" andMOP:strBumpMode]) + RiderVU2030PrevValuehigh * [self ReturnFundChargeRate:@"Ever" andMOP:@"A"];
        double tRider2035High = ([[AllocatedRiderPrem objectAtIndex:i - 1]doubleValue ] *[self ReturnVU2035Fac:i] * [self ReturnFundChargeRate:@"Ever" andMOP:strBumpMode]) + RiderVU2035PrevValuehigh * [self ReturnFundChargeRate:@"Ever" andMOP:@"A"];
        double tRiderCashHigh = ([[AllocatedRiderPrem objectAtIndex:i - 1]doubleValue ] *[self ReturnVUCashFac:i] * [self ReturnFundChargeRate:@"Cash" andMOP:strBumpMode]) + RiderVUCashPrevValueHigh * [self ReturnFundChargeRate:@"Cash" andMOP:@"A"];
        double tRiderRetHigh = ([[AllocatedRiderPrem objectAtIndex:i - 1]doubleValue ] *[self ReturnVURetFac:i] * [self ReturnFundChargeRate:@"Secure" andMOP:strBumpMode]) + RiderVURetPrevValueHigh * [self ReturnFundChargeRate:@"Secure" andMOP:@"A"];
        double tRiderDanaHigh = ([[AllocatedRiderPrem objectAtIndex:i - 1]doubleValue ] *[self ReturnVUDanaFac:i] * [self ReturnFundChargeRate:@"Dana" andMOP:strBumpMode]) + RiderVUDanaPrevValueHigh * [self ReturnFundChargeRate:@"Dana" andMOP:@"A"];
        double tRiderSmartHigh = ([[AllocatedRiderPrem objectAtIndex:i - 1]doubleValue ] *[self ReturnVUSmartFac:i] * [self ReturnFundChargeRate:@"Smart" andMOP:strBumpMode]) + RiderVUSmartPrevValueHigh * [self ReturnFundChargeRate:@"Smart" andMOP:@"A"];
        double tRiderVentureHigh = ([[AllocatedRiderPrem objectAtIndex:i - 1]doubleValue ] *[self ReturnVUVentureFac:i] * [self ReturnFundChargeRate:@"Venture" andMOP:strBumpMode]) + RiderVUVenturePrevValueHigh * [self ReturnFundChargeRate:@"Venture" andMOP:@"A"];
        double tRiderVentureGrowthHigh = ([[AllocatedBasicPrem objectAtIndex:i - 1]doubleValue ] *[self ReturnVUVentureGrowthFac:i] * [self ReturnFundChargeRate:@"VentureGrowth" andMOP:strBumpMode]) + RiderVUVentureGrowthPrevValueHigh * [self ReturnFundChargeRate:@"VentureGrowth" andMOP:@"A"];
        double tRiderVentureBlueChipHigh = ([[AllocatedBasicPrem objectAtIndex:i - 1]doubleValue ] *[self ReturnVUVentureBlueChipFac:i] * [self ReturnFundChargeRate:@"VentureBlueChip" andMOP:strBumpMode]) + RiderVUVentureBlueChipPrevValueHigh * [self ReturnFundChargeRate:@"VentureBlueChip" andMOP:@"A"];
        double tRiderVentureDanaHigh = ([[AllocatedBasicPrem objectAtIndex:i - 1]doubleValue ] *[self ReturnVUVentureDanaFac:i] * [self ReturnFundChargeRate:@"VentureDana" andMOP:strBumpMode]) + RiderVUVentureDanaPrevValueHigh * [self ReturnFundChargeRate:@"VentureDana" andMOP:@"A"];
        double tRiderVentureManagedHigh = ([[AllocatedBasicPrem objectAtIndex:i - 1]doubleValue ] *[self ReturnVUVentureManagedFac:i] * [self ReturnFundChargeRate:@"VentureManaged" andMOP:strBumpMode]) + RiderVUVentureManagedPrevValueHigh * [self ReturnFundChargeRate:@"VentureManaged" andMOP:@"A"];
        double tRiderVentureIncomeHigh = ([[AllocatedBasicPrem objectAtIndex:i - 1]doubleValue ] *[self ReturnVUVentureIncomeFac:i] * [self ReturnFundChargeRate:@"VentureIncome" andMOP:strBumpMode]) + RiderVUVentureIncomePrevValueHigh * [self ReturnFundChargeRate:@"VentureIncome" andMOP:@"A"];
		
        double RiderFundManagementChargeHigh = tRider2023High + tRider2025High + tRider2028High + tRider2030High + tRider2035High + tRiderCashHigh + tRiderRetHigh + tRiderDanaHigh + tRiderSmartHigh + tRiderVentureHigh + tRiderVentureGrowthHigh + tRiderVentureBlueChipHigh + tRiderVentureDanaHigh + tRiderVentureManagedHigh + tRiderVentureIncomeHigh;
        RiderFundManagementChargeHigh = RiderFundManagementChargeHigh <= 0 ? 0 : RiderFundManagementChargeHigh;
        
        double t2023Med = ([[AllocatedBasicPrem objectAtIndex:i - 1]doubleValue ] * (i > FundTermPrev2023 ? 0 : [self ReturnVU2023Fac]) * [self ReturnFundChargeRate:@"Ever" andMOP:strBumpMode]) + VU2023PrevValueMedian * [self ReturnFundChargeRate:@"Ever" andMOP:@"A"];
        double t2025Med = ([[AllocatedBasicPrem objectAtIndex:i - 1]doubleValue ] *[self ReturnVU2025Fac:i] * [self ReturnFundChargeRate:@"Ever" andMOP:strBumpMode]) + VU2025PrevValueMedian * [self ReturnFundChargeRate:@"Ever" andMOP:@"A"];
        double t2028Med = ([[AllocatedBasicPrem objectAtIndex:i - 1]doubleValue ] *[self ReturnVU2028Fac:i] * [self ReturnFundChargeRate:@"Ever" andMOP:strBumpMode]) + VU2028PrevValueMedian * [self ReturnFundChargeRate:@"Ever" andMOP:@"A"];
        double t2030Med = ([[AllocatedBasicPrem objectAtIndex:i - 1]doubleValue ] *[self ReturnVU2030Fac:i] * [self ReturnFundChargeRate:@"Ever" andMOP:strBumpMode]) + VU2030PrevValueMedian * [self ReturnFundChargeRate:@"Ever" andMOP:@"A"];
        double t2035Med = ([[AllocatedBasicPrem objectAtIndex:i - 1]doubleValue ] *[self ReturnVU2035Fac:i] * [self ReturnFundChargeRate:@"Ever" andMOP:strBumpMode]) + VU2035PrevValueMedian * [self ReturnFundChargeRate:@"Ever" andMOP:@"A"];
        double tCashMed = ([[AllocatedBasicPrem objectAtIndex:i - 1]doubleValue ] *[self ReturnVUCashFac:i] * [self ReturnFundChargeRate:@"Cash" andMOP:strBumpMode]) + VUCashPrevValueMedian * [self ReturnFundChargeRate:@"Cash" andMOP:@"A"];
        double tRetMed = ([[AllocatedBasicPrem objectAtIndex:i - 1]doubleValue ] *[self ReturnVURetFac:i] * [self ReturnFundChargeRate:@"Secure" andMOP:strBumpMode]) + VURetPrevValueMedian * [self ReturnFundChargeRate:@"Secure" andMOP:@"A"];
        double tDanaMed = ([[AllocatedBasicPrem objectAtIndex:i - 1]doubleValue ] *[self ReturnVUDanaFac:i] * [self ReturnFundChargeRate:@"Dana" andMOP:strBumpMode]) + VUDanaPrevValueMedian * [self ReturnFundChargeRate:@"Dana" andMOP:@"A"];
		double tSmartMed = ([[AllocatedBasicPrem objectAtIndex:i - 1]doubleValue ] *[self ReturnVUSmartFac:i] * [self ReturnFundChargeRate:@"Smart" andMOP:strBumpMode]) + VUSmartPrevValueMedian * [self ReturnFundChargeRate:@"Smart" andMOP:@"A"];
        double tVentureMed = ([[AllocatedBasicPrem objectAtIndex:i - 1]doubleValue ] *[self ReturnVUVentureFac:i] * [self ReturnFundChargeRate:@"Venture" andMOP:strBumpMode]) + VUVenturePrevValueMedian * [self ReturnFundChargeRate:@"Venture" andMOP:@"A"];
        double tVentureGrowthMed = ([[AllocatedBasicPrem objectAtIndex:i - 1]doubleValue ] *[self ReturnVUVentureGrowthFac:i] * [self ReturnFundChargeRate:@"VentureGrowth" andMOP:strBumpMode]) + VUVentureGrowthPrevValueMedian * [self ReturnFundChargeRate:@"VentureGrowth" andMOP:@"A"];
        double tVentureBlueChipMed = ([[AllocatedBasicPrem objectAtIndex:i - 1]doubleValue ] *[self ReturnVUVentureBlueChipFac:i] * [self ReturnFundChargeRate:@"VentureBlueChip" andMOP:strBumpMode]) + VUVentureBlueChipPrevValueMedian * [self ReturnFundChargeRate:@"VentureBlueChip" andMOP:@"A"];
        double tVentureDanathMed = ([[AllocatedBasicPrem objectAtIndex:i - 1]doubleValue ] *[self ReturnVUVentureDanaFac:i] * [self ReturnFundChargeRate:@"VentureDana" andMOP:strBumpMode]) + VUVentureDanaPrevValueMedian * [self ReturnFundChargeRate:@"VentureDana" andMOP:@"A"];
        double tVentureManagedMed = ([[AllocatedBasicPrem objectAtIndex:i - 1]doubleValue ] *[self ReturnVUVentureManagedFac:i] * [self ReturnFundChargeRate:@"VentureManaged" andMOP:strBumpMode]) + VUVentureManagedPrevValueMedian * [self ReturnFundChargeRate:@"VentureManaged" andMOP:@"A"];
        double tVentureIncomeMed = ([[AllocatedBasicPrem objectAtIndex:i - 1]doubleValue ] *[self ReturnVUVentureIncomeFac:i] * [self ReturnFundChargeRate:@"VentureIncome" andMOP:strBumpMode]) + VUVentureIncomePrevValueMedian * [self ReturnFundChargeRate:@"VentureIncome" andMOP:@"A"];
        
        double FundManagementChargeMed = t2023Med + t2025Med + t2028Med + t2030Med + t2035Med + tCashMed + tRetMed + tDanaMed + tSmartMed + tVentureMed + tVentureGrowthMed + tVentureBlueChipMed + tVentureDanathMed + tVentureManagedMed + tVentureIncomeMed;
        FundManagementChargeMed = FundManagementChargeMed <= 0 ? 0 : FundManagementChargeMed;
        
        double tRider2023Med = ([[AllocatedRiderPrem objectAtIndex:i - 1]doubleValue ] * (i > FundTermPrev2023 ? 0 : [self ReturnVU2023Fac]) * [self ReturnFundChargeRate:@"Ever" andMOP:strBumpMode]) + RiderVU2023PrevValueMedian * [self ReturnFundChargeRate:@"Ever" andMOP:@"A"];
        double tRider2025Med = ([[AllocatedRiderPrem objectAtIndex:i - 1]doubleValue ] *[self ReturnVU2025Fac:i] * [self ReturnFundChargeRate:@"Ever" andMOP:strBumpMode]) + RiderVU2025PrevValueMedian * [self ReturnFundChargeRate:@"Ever" andMOP:@"A"];
        double tRider2028Med = ([[AllocatedRiderPrem objectAtIndex:i - 1]doubleValue ] *[self ReturnVU2028Fac:i] * [self ReturnFundChargeRate:@"Ever" andMOP:strBumpMode]) + RiderVU2028PrevValueMedian * [self ReturnFundChargeRate:@"Ever" andMOP:@"A"];
        double tRider2030Med = ([[AllocatedRiderPrem objectAtIndex:i - 1]doubleValue ] *[self ReturnVU2030Fac:i] * [self ReturnFundChargeRate:@"Ever" andMOP:strBumpMode]) + RiderVU2030PrevValueMedian * [self ReturnFundChargeRate:@"Ever" andMOP:@"A"];
        double tRider2035Med = ([[AllocatedRiderPrem objectAtIndex:i - 1]doubleValue ] *[self ReturnVU2035Fac:i] * [self ReturnFundChargeRate:@"Ever" andMOP:strBumpMode]) + RiderVU2035PrevValueMedian * [self ReturnFundChargeRate:@"Ever" andMOP:@"A"];
        double tRiderCashMed = ([[AllocatedRiderPrem objectAtIndex:i - 1]doubleValue ] *[self ReturnVUCashFac:i] * [self ReturnFundChargeRate:@"Cash" andMOP:strBumpMode]) + RiderVUCashPrevValueMedian * [self ReturnFundChargeRate:@"Cash" andMOP:@"A"];
        double tRiderRetMed = ([[AllocatedRiderPrem objectAtIndex:i - 1]doubleValue ] *[self ReturnVURetFac:i] * [self ReturnFundChargeRate:@"Secure" andMOP:strBumpMode]) + RiderVURetPrevValueMedian * [self ReturnFundChargeRate:@"Secure" andMOP:@"A"];
        double tRiderDanaMed = ([[AllocatedRiderPrem objectAtIndex:i - 1]doubleValue ] *[self ReturnVUDanaFac:i] * [self ReturnFundChargeRate:@"Dana" andMOP:strBumpMode]) + RiderVUDanaPrevValueMedian * [self ReturnFundChargeRate:@"Dana" andMOP:@"A"];
		double tRiderSmartMed = ([[AllocatedRiderPrem objectAtIndex:i - 1]doubleValue ] *[self ReturnVUSmartFac:i] * [self ReturnFundChargeRate:@"Smart" andMOP:strBumpMode]) + RiderVUSmartPrevValueMedian * [self ReturnFundChargeRate:@"Smart" andMOP:@"A"];
        double tRiderVentureMed = ([[AllocatedRiderPrem objectAtIndex:i - 1]doubleValue ] *[self ReturnVUVentureFac:i] * [self ReturnFundChargeRate:@"Venture" andMOP:strBumpMode]) + RiderVUVenturePrevValueMedian * [self ReturnFundChargeRate:@"Venture" andMOP:@"A"];
        double tRiderVentureGrowthMed = ([[AllocatedBasicPrem objectAtIndex:i - 1]doubleValue ] *[self ReturnVUVentureGrowthFac:i] * [self ReturnFundChargeRate:@"VentureGrowth" andMOP:strBumpMode]) + RiderVUVentureGrowthPrevValueMedian * [self ReturnFundChargeRate:@"VentureGrowth" andMOP:@"A"];
        double tRiderVentureBlueChipMed = ([[AllocatedBasicPrem objectAtIndex:i - 1]doubleValue ] *[self ReturnVUVentureBlueChipFac:i] * [self ReturnFundChargeRate:@"VentureBlueChip" andMOP:strBumpMode]) + RiderVUVentureBlueChipPrevValueMedian * [self ReturnFundChargeRate:@"VentureBlueChip" andMOP:@"A"];
        double tRiderVentureDanathMed = ([[AllocatedBasicPrem objectAtIndex:i - 1]doubleValue ] *[self ReturnVUVentureDanaFac:i] * [self ReturnFundChargeRate:@"VentureDana" andMOP:strBumpMode]) + RiderVUVentureDanaPrevValueMedian * [self ReturnFundChargeRate:@"VentureDana" andMOP:@"A"];
        double tRiderVentureManagedMed = ([[AllocatedBasicPrem objectAtIndex:i - 1]doubleValue ] *[self ReturnVUVentureManagedFac:i] * [self ReturnFundChargeRate:@"VentureManaged" andMOP:strBumpMode]) + RiderVUVentureManagedPrevValueMedian * [self ReturnFundChargeRate:@"VentureManaged" andMOP:@"A"];
        double tRiderVentureIncomeMed = ([[AllocatedBasicPrem objectAtIndex:i - 1]doubleValue ] *[self ReturnVUVentureIncomeFac:i] * [self ReturnFundChargeRate:@"VentureIncome" andMOP:strBumpMode]) + RiderVUVentureIncomePrevValueMedian * [self ReturnFundChargeRate:@"VentureIncome" andMOP:@"A"];
		
        double RiderFundManagementChargeMed = tRider2023Med + tRider2025Med + tRider2028Med + tRider2030Med + tRider2035Med + tRiderCashMed + tRiderRetMed + tRiderDanaMed + tRiderSmartMed + tRiderVentureMed
                                               + tRiderVentureGrowthMed + tRiderVentureBlueChipMed + tRiderVentureDanathMed + tRiderVentureManagedMed + tRiderVentureIncomeMed;
        RiderFundManagementChargeMed = RiderFundManagementChargeMed <= 0 ? 0 : RiderFundManagementChargeMed;
        
        double t2023Low = ([[AllocatedBasicPrem objectAtIndex:i - 1]doubleValue ] * (i > FundTermPrev2023 ? 0 : [self ReturnVU2023Fac]) * [self ReturnFundChargeRate:@"Ever" andMOP:strBumpMode]) + VU2023PrevValueLow * [self ReturnFundChargeRate:@"Ever" andMOP:@"A"];
        double t2025Low = ([[AllocatedBasicPrem objectAtIndex:i - 1]doubleValue ] *[self ReturnVU2025Fac:i] * [self ReturnFundChargeRate:@"Ever" andMOP:strBumpMode]) + VU2025PrevValueLow * [self ReturnFundChargeRate:@"Ever" andMOP:@"A"];
        double t2028Low = ([[AllocatedBasicPrem objectAtIndex:i - 1]doubleValue ] *[self ReturnVU2028Fac:i] * [self ReturnFundChargeRate:@"Ever" andMOP:strBumpMode]) + VU2028PrevValueLow * [self ReturnFundChargeRate:@"Ever" andMOP:@"A"];
        double t2030Low = ([[AllocatedBasicPrem objectAtIndex:i - 1]doubleValue ] *[self ReturnVU2030Fac:i] * [self ReturnFundChargeRate:@"Ever" andMOP:strBumpMode]) + VU2030PrevValueLow * [self ReturnFundChargeRate:@"Ever" andMOP:@"A"];
        double t2035Low = ([[AllocatedBasicPrem objectAtIndex:i - 1]doubleValue ] *[self ReturnVU2035Fac:i] * [self ReturnFundChargeRate:@"Ever" andMOP:strBumpMode]) + VU2035PrevValueLow * [self ReturnFundChargeRate:@"Ever" andMOP:@"A"];
        double tCashLow = ([[AllocatedBasicPrem objectAtIndex:i - 1]doubleValue ] *[self ReturnVUCashFac:i] * [self ReturnFundChargeRate:@"Cash" andMOP:strBumpMode]) + VUCashPrevValueLow * [self ReturnFundChargeRate:@"Cash" andMOP:@"A"];
        double tRetLow = ([[AllocatedBasicPrem objectAtIndex:i - 1]doubleValue ] *[self ReturnVURetFac:i] * [self ReturnFundChargeRate:@"Secure" andMOP:strBumpMode]) + VURetPrevValueLow * [self ReturnFundChargeRate:@"Secure" andMOP:@"A"];
        double tDanaLow = ([[AllocatedBasicPrem objectAtIndex:i - 1]doubleValue ] *[self ReturnVUDanaFac:i] * [self ReturnFundChargeRate:@"Dana" andMOP:strBumpMode]) + VUDanaPrevValueLow * [self ReturnFundChargeRate:@"Dana" andMOP:@"A"];
        double tSmartLow = ([[AllocatedBasicPrem objectAtIndex:i - 1]doubleValue ] *[self ReturnVUSmartFac:i] * [self ReturnFundChargeRate:@"Smart" andMOP:strBumpMode]) + VUSmartPrevValueLow * [self ReturnFundChargeRate:@"Smart" andMOP:@"A"];
        double tVentureLow = ([[AllocatedBasicPrem objectAtIndex:i - 1]doubleValue ] *[self ReturnVUVentureFac:i] * [self ReturnFundChargeRate:@"Venture" andMOP:strBumpMode]) + VUVenturePrevValueLow * [self ReturnFundChargeRate:@"Venture" andMOP:@"A"];
        double tVentureGrowthLow = ([[AllocatedBasicPrem objectAtIndex:i - 1]doubleValue ] *[self ReturnVUVentureGrowthFac:i] * [self ReturnFundChargeRate:@"VentureGrowth" andMOP:strBumpMode]) + VUVentureGrowthPrevValueLow * [self ReturnFundChargeRate:@"VentureGrowth" andMOP:@"A"];
        double tVentureBlueChipLow = ([[AllocatedBasicPrem objectAtIndex:i - 1]doubleValue ] *[self ReturnVUVentureBlueChipFac:i] * [self ReturnFundChargeRate:@"VentureBlueChip" andMOP:strBumpMode]) + VUVentureBlueChipPrevValueLow * [self ReturnFundChargeRate:@"VentureBlueChip" andMOP:@"A"];
        double tVentureDanathLow = ([[AllocatedBasicPrem objectAtIndex:i - 1]doubleValue ] *[self ReturnVUVentureDanaFac:i] * [self ReturnFundChargeRate:@"VentureDana" andMOP:strBumpMode]) + VUVentureDanaPrevValueLow * [self ReturnFundChargeRate:@"VentureDana" andMOP:@"A"];
        double tVentureManagedLow = ([[AllocatedBasicPrem objectAtIndex:i - 1]doubleValue ] *[self ReturnVUVentureManagedFac:i] * [self ReturnFundChargeRate:@"VentureManaged" andMOP:strBumpMode]) + VUVentureManagedPrevValueLow * [self ReturnFundChargeRate:@"VentureManaged" andMOP:@"A"];
        double tVentureIncomeLow = ([[AllocatedBasicPrem objectAtIndex:i - 1]doubleValue ] *[self ReturnVUVentureIncomeFac:i] * [self ReturnFundChargeRate:@"VentureIncome" andMOP:strBumpMode]) + VUVentureIncomePrevValueLow * [self ReturnFundChargeRate:@"VentureIncome" andMOP:@"A"];
        
        double FundManagementChargeLow = t2023Low + t2025Low + t2028Low + t2030Low + t2035Low + tCashLow + tRetLow + tDanaLow + tSmartLow + tVentureLow + tVentureGrowthLow + tVentureBlueChipLow + tVentureDanathLow + tVentureManagedLow + tVentureIncomeLow;
        FundManagementChargeLow = FundManagementChargeLow <= 0 ? 0 : FundManagementChargeLow;
        
        double tRider2023Low = ([[AllocatedRiderPrem objectAtIndex:i - 1]doubleValue ] * (i > FundTermPrev2023 ? 0 : [self ReturnVU2023Fac]) * [self ReturnFundChargeRate:@"Ever" andMOP:strBumpMode]) + RiderVU2023PrevValueLow * [self ReturnFundChargeRate:@"Ever" andMOP:@"A"];
        double tRider2025Low = ([[AllocatedRiderPrem objectAtIndex:i - 1]doubleValue ] *[self ReturnVU2025Fac:i] * [self ReturnFundChargeRate:@"Ever" andMOP:strBumpMode]) + RiderVU2025PrevValueLow * [self ReturnFundChargeRate:@"Ever" andMOP:@"A"];
        double tRider2028Low = ([[AllocatedRiderPrem objectAtIndex:i - 1]doubleValue ] *[self ReturnVU2028Fac:i] * [self ReturnFundChargeRate:@"Ever" andMOP:strBumpMode]) + RiderVU2028PrevValueLow * [self ReturnFundChargeRate:@"Ever" andMOP:@"A"];
        double tRider2030Low = ([[AllocatedRiderPrem objectAtIndex:i - 1]doubleValue ] *[self ReturnVU2030Fac:i] * [self ReturnFundChargeRate:@"Ever" andMOP:strBumpMode]) + RiderVU2030PrevValueLow * [self ReturnFundChargeRate:@"Ever" andMOP:@"A"];
        double tRider2035Low = ([[AllocatedRiderPrem objectAtIndex:i - 1]doubleValue ] *[self ReturnVU2035Fac:i] * [self ReturnFundChargeRate:@"Ever" andMOP:strBumpMode]) + RiderVU2035PrevValueLow * [self ReturnFundChargeRate:@"Ever" andMOP:@"A"];
        double tRiderCashLow = ([[AllocatedRiderPrem objectAtIndex:i - 1]doubleValue ] *[self ReturnVUCashFac:i] * [self ReturnFundChargeRate:@"Cash" andMOP:strBumpMode]) + RiderVUCashPrevValueLow * [self ReturnFundChargeRate:@"Cash" andMOP:@"A"];
        double tRiderRetLow = ([[AllocatedRiderPrem objectAtIndex:i - 1]doubleValue ] *[self ReturnVURetFac:i] * [self ReturnFundChargeRate:@"Secure" andMOP:strBumpMode]) + RiderVURetPrevValueLow * [self ReturnFundChargeRate:@"Secure" andMOP:@"A"];
        double tRiderDanaLow = ([[AllocatedRiderPrem objectAtIndex:i - 1]doubleValue ] *[self ReturnVUDanaFac:i] * [self ReturnFundChargeRate:@"Dana" andMOP:strBumpMode]) + RiderVUDanaPrevValueLow * [self ReturnFundChargeRate:@"Dana" andMOP:@"A"];
        double tRiderSmartLow = ([[AllocatedRiderPrem objectAtIndex:i - 1]doubleValue ] *[self ReturnVUSmartFac:i] * [self ReturnFundChargeRate:@"Smart" andMOP:strBumpMode]) + RiderVUSmartPrevValueLow * [self ReturnFundChargeRate:@"Smart" andMOP:@"A"];
        double tRiderVentureLow = ([[AllocatedRiderPrem objectAtIndex:i - 1]doubleValue ] *[self ReturnVUVentureFac:i] * [self ReturnFundChargeRate:@"Venture" andMOP:strBumpMode]) + RiderVUVenturePrevValueLow * [self ReturnFundChargeRate:@"Venture" andMOP:@"A"];
        double tRiderVentureGrowthLow = ([[AllocatedBasicPrem objectAtIndex:i - 1]doubleValue ] *[self ReturnVUVentureGrowthFac:i] * [self ReturnFundChargeRate:@"VentureGrowth" andMOP:strBumpMode]) + RiderVUVentureGrowthPrevValueLow * [self ReturnFundChargeRate:@"VentureGrowth" andMOP:@"A"];
        double tRiderVentureBlueChipLow = ([[AllocatedBasicPrem objectAtIndex:i - 1]doubleValue ] *[self ReturnVUVentureBlueChipFac:i] * [self ReturnFundChargeRate:@"VentureBlueChip" andMOP:strBumpMode]) + RiderVUVentureBlueChipPrevValueLow * [self ReturnFundChargeRate:@"VentureBlueChip" andMOP:@"A"];
        double tRiderVentureDanathLow = ([[AllocatedBasicPrem objectAtIndex:i - 1]doubleValue ] *[self ReturnVUVentureDanaFac:i] * [self ReturnFundChargeRate:@"VentureDana" andMOP:strBumpMode]) + RiderVUVentureDanaPrevValueLow * [self ReturnFundChargeRate:@"VentureDana" andMOP:@"A"];
        double tRiderVentureManagedLow = ([[AllocatedBasicPrem objectAtIndex:i - 1]doubleValue ] *[self ReturnVUVentureManagedFac:i] * [self ReturnFundChargeRate:@"VentureManaged" andMOP:strBumpMode]) + RiderVUVentureManagedPrevValueLow * [self ReturnFundChargeRate:@"VentureManaged" andMOP:@"A"];
        double tRiderVentureIncomeLow = ([[AllocatedBasicPrem objectAtIndex:i - 1]doubleValue ] *[self ReturnVUVentureIncomeFac:i] * [self ReturnFundChargeRate:@"VentureIncome" andMOP:strBumpMode]) + RiderVUVentureIncomePrevValueLow * [self ReturnFundChargeRate:@"VentureIncome" andMOP:@"A"];
		
        double RiderFundManagementChargeLow = tRider2023Low + tRider2025Low + tRider2028Low + tRider2030Low + tRider2035Low + tRiderCashLow + tRiderRetLow + tRiderDanaLow + tRiderSmartLow + tRiderVentureLow + tRiderVentureGrowthLow + tRiderVentureBlueChipLow + tRiderVentureDanathLow + tRiderVentureManagedLow + tRiderVentureIncomeLow;
        RiderFundManagementChargeLow = RiderFundManagementChargeLow <= 0 ? 0 : RiderFundManagementChargeLow;
        
        VUCashValueNegative = false;
        RiderVUCashValueNegative = false;
        if (i == YearDiff2023 || i == YearDiff2025 || i == YearDiff2028 || i == YearDiff2030 || i == YearDiff2035) {
            
            for (int m = 1; m <= 12; m++) {
                VUCashValueNegative = FALSE;
                RiderVUCashValueNegative = false;
                MonthFundValueOfTheYearValueTotalHigh = [self ReturnMonthFundValueOfTheYearValueTotalHigh:i andMonth:m];
                RiderMonthFundValueOfTheYearValueTotalHigh = [self ReturnRiderMonthFundValueOfTheYearValueTotalHigh:i andMonth:m];
                //NSLog(@"%d %f %f %f", m, MonthVURetValueHigh, MonthVU2035ValueHigh, MonthFundValueOfTheYearValueTotalHigh );
                [self SurrenderValue:i andMonth:m andLevel:1];
                
                VUCashValueNegative = FALSE;
                RiderVUCashValueNegative = false;
                MonthFundValueOfTheYearValueTotalMedian = [self ReturnMonthFundValueOfTheYearValueTotalMedian:i andMonth:m];
                RiderMonthFundValueOfTheYearValueTotalMedian = [self ReturnRiderMonthFundValueOfTheYearValueTotalMedian:i andMonth:m];
                [self SurrenderValue:i andMonth:m andLevel:2];
                
                VUCashValueNegative = FALSE;
                RiderVUCashValueNegative = false;
                MonthFundValueOfTheYearValueTotalLow = [self ReturnMonthFundValueOfTheYearValueTotalLow:i andMonth:m];
                RiderMonthFundValueOfTheYearValueTotalLow = [self ReturnRiderMonthFundValueOfTheYearValueTotalLow:i andMonth:m];
                //NSLog(@"%d %f %f %f", m, MonthVURetValueLow, MonthVU2035ValueLow, MonthFundValueOfTheYearValueTotalLow );
                [self SurrenderValue:i andMonth:m andLevel:3];
                
            }
            
            // for page14.html ul_temp_fund
            if (i == YearDiff2023) {
                [self InsertToUL_Temp_Fund:@"HLA EverGreen 2023" andValue1:Withdrawtemp2023High + RiderWithdrawtemp2023High
                                 andValue2:Withdrawtemp2023Median + RiderWithdrawtemp2023Median
                                 andValue3:Withdrawtemp2023Low + RiderWithdrawtemp2023Low
                                 andValue4:temp2023High + Ridertemp2023High
                                 andValue5:temp2023Median + Ridertemp2023Median
                                 andValue6:temp2023Low + Ridertemp2023Low];
                //NSLog(@"%f, %f, %f", temp2035High, temp2035Median, temp2035Low);
            }
            else if (i == YearDiff2025) {
                if (HSurrenderValue >= 0) {
                    [self InsertToUL_Temp_Fund:@"HLA EverGreen 2025" andValue1:Withdrawtemp2025High + RiderWithdrawtemp2025High
                                     andValue2:Withdrawtemp2025Median + RiderWithdrawtemp2025Median
                                     andValue3:Withdrawtemp2025Low + (RiderWithdrawtemp2025Low < 0 ? 0 : RiderWithdrawtemp2025Low)
                                     andValue4:temp2025High + Ridertemp2025High
                                     andValue5:temp2025Median + Ridertemp2025Median
                                     andValue6:temp2025Low + (Ridertemp2025Low < 0 ? 0 : Ridertemp2025Low)];
                }
                else{
                    [self InsertToUL_Temp_Fund:@"HLA EverGreen 2025" andValue1:-1.00
                                     andValue2:-1.00
                                     andValue3:-1.00
                                     andValue4:-1.00
                                     andValue5:-1.00 andValue6:-1.00];
                    
                }

                //NSLog(@"%f, %f, %f", temp2035High, temp2035Median, temp2035Low);
            }
            else if (i == YearDiff2028) {
                if (HSurrenderValue >= 0) {
                    [self InsertToUL_Temp_Fund:@"HLA EverGreen 2028" andValue1:Withdrawtemp2028High + RiderWithdrawtemp2028High
                                     andValue2:Withdrawtemp2028Median + RiderWithdrawtemp2028Median
                                     andValue3:Withdrawtemp2028Low + (RiderWithdrawtemp2028Low < 0 ? 0 : RiderWithdrawtemp2028Low )
                                     andValue4:temp2028High + Ridertemp2028High
                                     andValue5:temp2028Median + Ridertemp2028Median
                                     andValue6:temp2028Low + (Ridertemp2028Low < 0 ? 0 : Ridertemp2028Low )];
                }
                else{
                    [self InsertToUL_Temp_Fund:@"HLA EverGreen 2028" andValue1:-1.00
                                     andValue2:-1.00
                                     andValue3:-1.00
                                     andValue4:-1.00
                                     andValue5:-1.00 andValue6:-1.00];
                    
                }

                
                //NSLog(@"%f, %f, %f", temp2035High, temp2035Median, temp2035Low);
            }
            else if (i == YearDiff2030) {
                if (HSurrenderValue >= 0) {
                    [self InsertToUL_Temp_Fund:@"HLA EverGreen 2030" andValue1:Withdrawtemp2030High + RiderWithdrawtemp2030High
                                     andValue2:Withdrawtemp2030Median + RiderWithdrawtemp2030Median
                                     andValue3:Withdrawtemp2030Low + (RiderWithdrawtemp2030Low < 0 ? 0 : RiderWithdrawtemp2030Low)
                                     andValue4:temp2030High + Ridertemp2030High
                                     andValue5:temp2030Median + Ridertemp2030Median
                                     andValue6:temp2030Low + (Ridertemp2030Low < 0 ? 0 : Ridertemp2030Low)];
                }
                else{
                    [self InsertToUL_Temp_Fund:@"HLA EverGreen 2030" andValue1:-1.00
                                     andValue2:-1.00
                                     andValue3:-1.00
                                     andValue4:-1.00
                                     andValue5:-1.00 andValue6:-1.00];

                }
                
                //NSLog(@"%f, %f, %f", temp2035High, temp2035Median, temp2035Low);
            }
            else if (i == YearDiff2035) {
                if (HSurrenderValue >= 0) {
                    [self InsertToUL_Temp_Fund:@"HLA EverGreen 2035" andValue1:Withdrawtemp2035High + RiderWithdrawtemp2035High
                                     andValue2:Withdrawtemp2035Median + RiderWithdrawtemp2035Median
                                     andValue3:Withdrawtemp2035Low + (RiderWithdrawtemp2035Low < 0 ? 0 : RiderWithdrawtemp2035Low)
                                     andValue4:temp2035High + Ridertemp2035High
                                     andValue5:temp2035Median + Ridertemp2035Median
                                     andValue6:temp2035Low + (Ridertemp2035Low < 0 ? 0 : Ridertemp2035Low)];
                }
                else
                {
                    [self InsertToUL_Temp_Fund:@"HLA EverGreen 2035" andValue1:-1.00
                                     andValue2:-1.00
                                     andValue3:-1.00
                                     andValue4:-1.00
                                     andValue5:-1.00 andValue6:-1.00];
                }
                
                //NSLog(@"%f, %f, %f", temp2035High, temp2035Median, temp2035Low);
            }
        }
        else{
            VUCashValueNegative = false;
            RiderVUCashValueNegative = false;
            FundValueOfTheYearValueTotalHigh = [self ReturnFundValueOfTheYearValueTotalHigh:i];
            RiderFundValueOfTheYearValueTotalHigh = [self ReturnRiderFundValueOfTheYearValueTotalHigh:i];

            VUCashValueNegative = false;
            RiderVUCashValueNegative = false;
            FundValueOfTheYearValueTotalMedian = [self ReturnFundValueOfTheYearValueTotalMedian:i];
            RiderFundValueOfTheYearValueTotalMedian = [self ReturnRiderFundValueOfTheYearValueTotalMedian:i];
            
            VUCashValueNegative = false;
            RiderVUCashValueNegative = false;
            FundValueOfTheYearValueTotalLow = [self ReturnFundValueOfTheYearValueTotalLow:i];
            RiderFundValueOfTheYearValueTotalLow = [self ReturnRiderFundValueOfTheYearValueTotalLow:i];
            
            [self SurrenderValue:i andMonth:0 andLevel:0];
            
        }
        
        
        NSString *tempMsg = [NSString stringWithFormat:@"%d",i - 1 ];
        int tempSustainPolicyYear = PolicySustainYear > 0 ? PolicySustainYear - Age : 20;
        
        //NSLog(@"%d %f",i, HSurrenderValue);
        
		if (NegativeBump == TRUE) {
			
			if (BasicSA == minSA) {
				if([self ReturnRegWithdrawal:i] == 0){
					if(HSurrenderValue < 0 ){
						if (PolicySustainYear > 0) { //negative bump, no withdrawal, sustain year inserted
							if (i <= tempSustainPolicyYear) {
								[self CheckSustainForNegativeBump:CurrentBump];
								NegativeBump = TRUE;
								[self InsertToUL_Temp_Trad_Basic];
							}
							else{
								HeaderMsg = [self ErrorMsg:@"R0" andInput1:strGrayRTUPAmount andInput2:tempMsg andInput3:@"0"];
								StopMessage1 = [self ErrorMsg:@"01" andInput1:@"" andInput2:@"" andInput3:@""];
								StopMessage2 = @"";
								StopMessage3 = @"";
								StopMessage4 = @"";
								
								StopExec = TRUE;
								return;
							}
						}
						else{ //negative bump, no withdrawal, no sustain year inserted
							if (i <= tempSustainPolicyYear) {
                                if (([getHL intValue] != 0 || [getHLPct intValue]!= 0) || [requestOccLoading intValue] != 0) { //LA has health loading or occloading
                                    BOOL SpecialCase = FALSE;
                                    
                                    if (Age == 65) {
                                        if ([requestSexLA isEqualToString:@"M"]) {
                                            if ([requestSmokerLA isEqualToString:@"Y"]) {
                                                SpecialCase = TRUE;
                                            }
                                            else
                                            {
                                                SpecialCase = FALSE;
                                            }
                                        }
                                        else{
                                            SpecialCase = FALSE;
                                        }
                                    }
                                    else if (Age == 66) {
                                        if ([requestSexLA isEqualToString:@"M"]) {
                                            if ([requestSmokerLA isEqualToString:@"Y"]) {
                                                SpecialCase = TRUE;
                                            }
                                            else
                                            {
                                                SpecialCase = FALSE;
                                            }
                                        }
                                        else{
                                            SpecialCase = FALSE;
                                        }
                                    }
                                    else if (Age == 67) {
                                        if ([requestSexLA isEqualToString:@"M"]) {
                                            SpecialCase = TRUE;
                                        }
                                        else{
                                            SpecialCase = FALSE;
                                        }
                                    }
                                    else if (Age == 68) {
                                        if ([requestSexLA isEqualToString:@"M"]) {
                                            SpecialCase = TRUE;
                                        }
                                        else{
                                            if ([requestSmokerLA isEqualToString:@"Y"]) {
                                                SpecialCase = TRUE;
                                            }
                                            else
                                            {
                                                SpecialCase = FALSE;
                                            }
                                        }
                                    }
                                    else if (Age == 69) {
                                        if ([requestSexLA isEqualToString:@"M"]) {
                                            SpecialCase = TRUE;
                                        }
                                        else{
                                            if ([requestSmokerLA isEqualToString:@"Y"]) {
                                                SpecialCase = TRUE;
                                            }
                                            else
                                            {
                                                SpecialCase = FALSE;
                                            }
                                        }
                                    }
                                    else if (Age == 70) {
                                        SpecialCase = TRUE;
                                    }
                                    else {
                                        SpecialCase = FALSE;
                                    }
                                    
                                    if (SpecialCase == FALSE) {
                                        /*
                                        HeaderMsg = [self ErrorMsg:@"Y2" andInput1:tempMsg andInput2:@"" andInput3:@""];
                                        StopMessage1 = [self ErrorMsg:@"00" andInput1:@"" andInput2:@"" andInput3:@""];
                                        StopMessage2 = @"";
                                        StopMessage3 = @"";
                                        StopMessage4 = @"";
                                        StopExec = TRUE;
                                        return;
                                         */
                                        
                                        HeaderMsg = [self ErrorMsg:@"A0" andInput1:tempMsg andInput2:@"" andInput3:@""];
                                        StopMessage1 = [self ErrorMsg:@"00" andInput1:@"" andInput2:@"" andInput3:@""];
                                        StopMessage2 = @"";
                                        StopMessage3 = @"";
                                        StopMessage4 = @"";
                                        StopExec = TRUE;
                                        return;

                                    }
                                    else{ //special case
                                        [self CheckSustainForNegativeBump:CurrentBump];
                                        NegativeBump = TRUE;
                                        [self InsertToUL_Temp_Trad_Basic];
                                    }
                                    
                                }
                                else{ //special case
                                    [self CheckSustainForNegativeBump:CurrentBump];
                                    NegativeBump = TRUE;
                                    [self InsertToUL_Temp_Trad_Basic];
                                }
								
							}
							else{
								HeaderMsg = [self ErrorMsg:@"Z2" andInput1:strGrayRTUPAmount andInput2:tempMsg andInput3:@"0"];
								StopMessage1 = [self ErrorMsg:@"01" andInput1:@"" andInput2:@"" andInput3:@""];
								StopMessage2 = @"";
								StopMessage3 = @"";
								StopMessage4 = @"";
								
								StopExec = TRUE;
								return;
							}
						}
					}
					else{
						if (i == 27) { //negative bump, no withdrawal, no sustain year inserted, no lapse before 30 years
							HeaderMsg = [self ErrorMsg:@"R0" andInput1:strGrayRTUPAmount andInput2:@"" andInput3:@""];
							StopMessage1 = [self ErrorMsg:@"01" andInput1:@"" andInput2:@"" andInput3:@""];
							StopMessage2 = @"";
							StopMessage3 = @"";
							StopMessage4 = @"";
							
							StopExec = TRUE;
							return;
						}
					}
				}
				else{ //negative bump, withdrawal
					if (i < RegWithdrawalStartYear) {
						[self CheckSustainForNegativeBump:CurrentBump];
						NegativeBump = TRUE;
						[self InsertToUL_Temp_Trad_Basic];
					}
					else{
						if (HSurrenderValue < 0 || HRiderSurrenderValue < 0 ) {
							if (i < 10) {
								HeaderMsg = [self ErrorMsg:@"Z1" andInput1:strGrayRTUPAmount andInput2:tempMsg andInput3:tempMsg];
								StopMessage1 = [self ErrorMsg:@"00" andInput1:@"" andInput2:@"" andInput3:@""];
								StopMessage2 = @"";
								StopMessage3 = @"";
								StopMessage4 = @"";
								
								StopExec = TRUE;
								return;
							}
							else{
								HeaderMsg = [self ErrorMsg:@"Z2" andInput1:strGrayRTUPAmount andInput2:tempMsg andInput3:tempMsg];
								StopMessage1 = [self ErrorMsg:@"01" andInput1:@"" andInput2:@"" andInput3:@""];
								StopMessage2 = @"";
								StopMessage3 = @"";
								StopMessage4 = @"";
								
								StopExec = TRUE;
								return;
							}
						}
						else{
							if (i == [strCovPeriod intValue]) { //negative bump, withdrawal, no lapse before 30 years
								HeaderMsg = [self ErrorMsg:@"R0" andInput1:strGrayRTUPAmount andInput2:@"" andInput3:@""];
								StopMessage1 = [self ErrorMsg:@"01" andInput1:@"" andInput2:@"" andInput3:@""];
								StopMessage2 = @"";
								StopMessage3 = @"";
								StopMessage4 = @"";
								
								StopExec = TRUE;
								return;
							}
							
						}
						
					}
				}
			}
			else{ //not min SA inserted
				if([self ReturnRegWithdrawal:i] == 0){
					if(HSurrenderValue < 0 ){
						if (PolicySustainYear > 0) { //negative bump, no withdrawal, sustain year inserted
							if (i <= tempSustainPolicyYear) {
								[self CheckSustainForNegativeBump:CurrentBump];
								NegativeBump = TRUE;
								[self InsertToUL_Temp_Trad_Basic];
							}
							else{
								HeaderMsg = [self ErrorMsg:@"R0" andInput1:strGrayRTUPAmount andInput2:tempMsg andInput3:@"0"];
								StopMessage1 = [self ErrorMsg:@"01" andInput1:@"" andInput2:@"" andInput3:@""];
								StopMessage2 = @"";
								StopMessage3 = @"";
								StopMessage4 = @"";
								
								StopExec = TRUE;
								return;
							}
						}
						else{ //negative bump, no withdrawal, no sustain year inserted
							if (i <= tempSustainPolicyYear) {
								[self CheckSustainForNegativeBump:CurrentBump];
								NegativeBump = TRUE;
								[self InsertToUL_Temp_Trad_Basic];
							}
							else{
								HeaderMsg = [self ErrorMsg:@"Z2" andInput1:strGrayRTUPAmount andInput2:tempMsg andInput3:@"0"];
								StopMessage1 = [self ErrorMsg:@"01" andInput1:@"" andInput2:@"" andInput3:@""];
								StopMessage2 = @"";
								StopMessage3 = @"";
								StopMessage4 = @"";
								
								StopExec = TRUE;
								return;
							}
						}
					}
					else{
						if (i == [strCovPeriod intValue]) { //negative bump, no withdrawal, no sustain year inserted, no lapse before 30 years
							HeaderMsg = [self ErrorMsg:@"R0" andInput1:strGrayRTUPAmount andInput2:@"" andInput3:@""];
							StopMessage1 = [self ErrorMsg:@"01" andInput1:@"" andInput2:@"" andInput3:@""];
							StopMessage2 = @"";
							StopMessage3 = @"";
							StopMessage4 = @"";
							
							StopExec = TRUE;
							return;
						}
					}
				}
				else{ //negative bump, withdrawal
					if (i < RegWithdrawalStartYear) {
						[self CheckSustainForNegativeBump:CurrentBump];
						NegativeBump = TRUE;
						[self InsertToUL_Temp_Trad_Basic];
					}
					else{
						if (HSurrenderValue < 0 || HRiderSurrenderValue < 0 ) {
							if (i < 10) {
								HeaderMsg = [self ErrorMsg:@"Z1" andInput1:strGrayRTUPAmount andInput2:tempMsg andInput3:tempMsg];
								StopMessage1 = [self ErrorMsg:@"00" andInput1:@"" andInput2:@"" andInput3:@""];
								StopMessage2 = @"";
								StopMessage3 = @"";
								StopMessage4 = @"";
								
								StopExec = TRUE;
								return;
							}
							else{
								HeaderMsg = [self ErrorMsg:@"Z2" andInput1:strGrayRTUPAmount andInput2:tempMsg andInput3:tempMsg];
								StopMessage1 = [self ErrorMsg:@"01" andInput1:@"" andInput2:@"" andInput3:@""];
								StopMessage2 = @"";
								StopMessage3 = @"";
								StopMessage4 = @"";
								
								StopExec = TRUE;
								return;
							}
						}
						else{
							if (i == [strCovPeriod intValue]) { //negative bump, withdrawal, no lapse before 30 years
								HeaderMsg = [self ErrorMsg:@"R0" andInput1:strGrayRTUPAmount andInput2:@"" andInput3:@""];
								StopMessage1 = [self ErrorMsg:@"01" andInput1:@"" andInput2:@"" andInput3:@""];
								StopMessage2 = @"";
								StopMessage3 = @"";
								StopMessage4 = @"";
								
								StopExec = TRUE;
								return;
							}
							
						}
						
					}
				}
			}
			
			
		}
		else{
			if ([CheckSustainLevel isEqualToString:@"1"]) {
				if(HSurrenderValue < 0 ){
					if (i <= tempSustainPolicyYear) {
						if (HRiderSurrenderValue < 0) {
							
							if([self ReturnRegWithdrawal:i] == 0){ //BUA lapse, RUA lapse, no withdraw, level 1
								if (i < 10) {
									
									HeaderMsg = [self ErrorMsg:@"X3" andInput1:tempMsg andInput2:tempMsg andInput3:@""];
									StopMessage1 = [self ErrorMsg:@"C3" andInput1:@"" andInput2:@"" andInput3:@""];
									if (BasicSA > minSA) {
										StopMessage2 = [self ErrorMsg:@"D0" andInput1:@"" andInput2:@"" andInput3:@""];
									}
									else{
										StopMessage2 = @"";
									}
									StopMessage3 = @"";
									StopMessage4 = @"";
									
									StopExec = TRUE;
									return;
								}
								else if (i >= 10 && i <= 20){
									
									
									HeaderMsg = [self ErrorMsg:@"X3" andInput1:tempMsg andInput2:tempMsg andInput3:@""];
									StopMessage1 = [self ErrorMsg:@"B0" andInput1:@"" andInput2:@"" andInput3:@""];
									StopMessage2 = [self ErrorMsg:@"C3" andInput1:@"" andInput2:@"" andInput3:@""];
									if (BasicSA > minSA) {
										StopMessage3 = [self ErrorMsg:@"D0" andInput1:@"" andInput2:@"" andInput3:@""];
									}
									else{
										StopMessage3 = @"";
									}
									
									StopMessage4 = @"";
									StopExec = TRUE;
									return;
									
								}
								else{
									
								}
							}
							else{ //BUA lapse, RUA lapse, withdraw, level 1
								if (i < 10) {
									HeaderMsg = [self ErrorMsg:@"X3" andInput1:tempMsg andInput2:tempMsg andInput3:@""];
									StopMessage1 = [self ErrorMsg:@"A3" andInput1:@"" andInput2:@"" andInput3:@""];
									StopMessage2 = [self ErrorMsg:@"C3" andInput1:@"" andInput2:@"" andInput3:@""];
									if (BasicSA > minSA) {
										StopMessage3 = [self ErrorMsg:@"D0" andInput1:@"" andInput2:@"" andInput3:@""];
									}
									else{
										StopMessage3 = @"";
									}
									StopMessage4 = @"";
									StopExec = TRUE;
									return;
								}
								else if (i >= 10 && i <= 20){
									HeaderMsg = [self ErrorMsg:@"X3" andInput1:tempMsg andInput2:tempMsg andInput3:@""];
									StopMessage1 = [self ErrorMsg:@"A3" andInput1:@"" andInput2:@"" andInput3:@""];
									StopMessage2 = [self ErrorMsg:@"B0" andInput1:@"" andInput2:@"" andInput3:@""];
									StopMessage3 = [self ErrorMsg:@"C3" andInput1:@"" andInput2:@"" andInput3:@""];
									if (BasicSA > minSA) {
										StopMessage4 = [self ErrorMsg:@"D0" andInput1:@"" andInput2:@"" andInput3:@""];
									}
									else{
										StopMessage4 = @"";
									}
									StopExec = TRUE;
									return;
								}
								else{
									
								}
							}
						}
						else
						{
							if([self ReturnRegWithdrawal:i] == 0){ //BUA lapse, RUA no lapse, no withdraw, level 1
								if (i < 10) {
									HeaderMsg = [self ErrorMsg:@"X2" andInput1:tempMsg andInput2:@"" andInput3:@""];
									StopMessage1 = [self ErrorMsg:@"C2" andInput1:@"" andInput2:@"" andInput3:@""];
									if (BasicSA > minSA) {
										StopMessage2 = [self ErrorMsg:@"D0" andInput1:@"" andInput2:@"" andInput3:@""];
									}
									else{
										StopMessage2 = @"";
									}
									StopMessage3 = @"";
									StopMessage4 = @"";
									StopExec = TRUE;
									return;
								}
								else if (i >= 10 && i <= 20){
									HeaderMsg = [self ErrorMsg:@"X2" andInput1:tempMsg andInput2:@"" andInput3:@""];
									StopMessage1 = [self ErrorMsg:@"B0" andInput1:@"" andInput2:@"" andInput3:@""];
									StopMessage2 = [self ErrorMsg:@"C2" andInput1:@"" andInput2:@"" andInput3:@""];
									if (BasicSA > minSA) {
										StopMessage3 = [self ErrorMsg:@"D0" andInput1:@"" andInput2:@"" andInput3:@""];
									}
									else{
										StopMessage3 = @"";
									}
									StopMessage4 = @"";
									StopExec = TRUE;
									return;
								}
								else{
									
								}
							}
							else{ //BUA lapse, RUA no lapse, withdraw, level 1
								if (i < 10) {
									HeaderMsg = [self ErrorMsg:@"X2" andInput1:tempMsg andInput2:@"" andInput3:@""];
									StopMessage1 = [self ErrorMsg:@"A2" andInput1:@"" andInput2:@"" andInput3:@""];
									StopMessage2 = [self ErrorMsg:@"C2" andInput1:@"" andInput2:@"" andInput3:@""];
									if (BasicSA > minSA) {
										StopMessage3 = [self ErrorMsg:@"D0" andInput1:@"" andInput2:@"" andInput3:@""];
									}
									else{
										StopMessage3 = @"";
									}
									StopMessage4 = @"";
									StopExec = TRUE;
									return;
								}
								else if (i >= 10 && i <= 20){
									HeaderMsg = [self ErrorMsg:@"X2" andInput1:tempMsg andInput2:@"" andInput3:@""];
									StopMessage1 = [self ErrorMsg:@"A2" andInput1:@"" andInput2:@"" andInput3:@""];
									StopMessage2 = [self ErrorMsg:@"B0" andInput1:@"" andInput2:@"" andInput3:@""];
									StopMessage3 = [self ErrorMsg:@"C2" andInput1:@"" andInput2:@"" andInput3:@""];
									if (BasicSA > minSA) {
										StopMessage4 = [self ErrorMsg:@"D0" andInput1:@"" andInput2:@"" andInput3:@""];
									}
									else{
										StopMessage4 = @"";
									}
									StopExec = TRUE;
									return;
								}
								else{
									
								}
							}
						}
						
					}
					
					
				}
				else{
					if (HRiderSurrenderValue < 0) {
						if (i <= tempSustainPolicyYear) {
							if([self ReturnRegWithdrawal:i] == 0){ //BUA no lapse, RUA lapse, no withdraw, level 1
								if (i < 10) {
									HeaderMsg = [self ErrorMsg:@"X1" andInput1:tempMsg andInput2:@"" andInput3:@""];
									StopMessage1 = [self ErrorMsg:@"C1" andInput1:@"" andInput2:@"" andInput3:@""];
									StopMessage2 = @"";
									StopMessage3 = @"";
									StopMessage4 = @"";
									StopExec = TRUE;
									return;
								}
								else if (i >= 10 && i <= 20){
									HeaderMsg = [self ErrorMsg:@"X1" andInput1:tempMsg andInput2:@"" andInput3:@""];
									StopMessage1 = [self ErrorMsg:@"B0" andInput1:@"" andInput2:@"" andInput3:@""];
									StopMessage2 = [self ErrorMsg:@"C1" andInput1:@"" andInput2:@"" andInput3:@""];
									StopMessage3 = @"";
									StopMessage4 = @"";
									StopExec = TRUE;
									return;
								}
								else{
									
								}
							}
							else{ //BUA no lapse, RUA lapse, withdraw, level 1
								if (i < 10) {
									HeaderMsg = [self ErrorMsg:@"X1" andInput1:tempMsg andInput2:@"" andInput3:@""];
									StopMessage1 = [self ErrorMsg:@"A1" andInput1:@"" andInput2:@"" andInput3:@""];
									StopMessage2 = [self ErrorMsg:@"C1" andInput1:@"" andInput2:@"" andInput3:@""];
									StopMessage3 = @"";
									StopMessage4 = @"";
									StopExec = TRUE;
									return;
								}
								else if (i >= 10 && i <= 20){
									HeaderMsg = [self ErrorMsg:@"X1" andInput1:tempMsg andInput2:@"" andInput3:@""];
									StopMessage1 = [self ErrorMsg:@"A1" andInput1:@"" andInput2:@"" andInput3:@""];
									StopMessage2 = [self ErrorMsg:@"B0" andInput1:@"" andInput2:@"" andInput3:@""];
									StopMessage3 = [self ErrorMsg:@"C1" andInput1:@"" andInput2:@"" andInput3:@""];
									StopMessage4 = @"";
									StopExec = TRUE;
									return;
								}
								else{
									
								}
							}
							
						}
						
					}
				}
				
			}
			else{ //second level checking
				if(HSurrenderValue < 0 ){
					if (i <= tempSustainPolicyYear) {
						if (HRiderSurrenderValue < 0) { // second level checking, BUA lapse, RUA lapse, level 2
							if (i < 10) {
								HeaderMsg = [self ErrorMsg:@"Y3" andInput1:tempMsg andInput2:tempMsg andInput3:@""];
								StopMessage1 = [self ErrorMsg:@"00" andInput1:@"" andInput2:@"" andInput3:@""];
								StopMessage2 = @"";
								StopMessage3 = @"";
								StopMessage4 = @"";
								StopExec = TRUE;
								return;
							}
							else if (i >= 10 && i <= 20){
								[self InsertSustainYear:[tempMsg intValue]];
								HeaderMsg = [self ErrorMsg:@"X3" andInput1:tempMsg andInput2:tempMsg andInput3:@""];
								StopMessage1 = [self ErrorMsg:@"01" andInput1:@"" andInput2:@"" andInput3:@""];
								StopMessage2 = @"";
								StopMessage3 = @"";
								StopMessage4 = @"";
								Solution1 = tempMsg;
								Solution2 = tempMsg;
								StopExec = TRUE;
								return;
								
							}
							else{
								
							}
						}
						else
						{
							//second level checking, BUA lapse, RUA no lapse, level 2
							if (i < 10) {
								HeaderMsg = [self ErrorMsg:@"Y2" andInput1:tempMsg andInput2:@"" andInput3:@""];
								StopMessage1 = [self ErrorMsg:@"00" andInput1:@"" andInput2:@"" andInput3:@""];
								StopMessage2 = @"";
								StopMessage3 = @"";
								StopMessage4 = @"";
								StopExec = TRUE;
								return;
							}
							else if (i >= 10 && i <= 20){
								[self InsertSustainYear:[tempMsg intValue]];
								HeaderMsg = [self ErrorMsg:@"X2" andInput1:tempMsg andInput2:@"" andInput3:@""];
								StopMessage1 = [self ErrorMsg:@"01" andInput1:@"" andInput2:@"" andInput3:@""];
								StopMessage2 = @"";
								StopMessage3 = @"";
								StopMessage4 = @"";
								Solution1 = tempMsg;
								Solution2 = @"";
								StopExec = TRUE;
								return;
							}
							else{
								
							}
							
						}
						
					}
					
					
				}
				else{
					if (HRiderSurrenderValue < 0) {
						if (i <= tempSustainPolicyYear) {
							//second level checking, BUA no lapse, RUA lapse, level 2
							if (i < 10) {
								HeaderMsg = [self ErrorMsg:@"Y1" andInput1:tempMsg andInput2:@"" andInput3:@""];
								StopMessage1 = [self ErrorMsg:@"00" andInput1:@"" andInput2:@"" andInput3:@""];
								StopMessage2 = @"";
								StopMessage3 = @"";
								StopMessage4 = @"";
								StopExec = TRUE;
								return;
							}
							else if (i >= 10 && i <= 20){
								[self InsertSustainYear:[tempMsg intValue]];
								HeaderMsg = [self ErrorMsg:@"X1" andInput1:tempMsg andInput2:@"" andInput3:@""];
								StopMessage1 = [self ErrorMsg:@"01" andInput1:@"" andInput2:@"" andInput3:@""];
								StopMessage2 = @"";
								StopMessage3 = @"";
								StopMessage4 = @"";
								Solution1 = tempMsg;
								Solution2 = @"";
								StopExec = TRUE;
								return;
							}
							else{
								
							}
							
							
						}
						
					}
				}
			}
		}
		
        
        
        
        [BullSurrender addObject:[NSString stringWithFormat:@"%f", HSurrenderValue]];
        [FlatSurrender addObject:[NSString stringWithFormat:@"%f", MSurrenderValue]];
        [BearSurrender addObject:[NSString stringWithFormat:@"%f", LSurrenderValue]];
        //NSLog(@"%d) %f, %f, %f",i, HRiderSurrenderValue, MRiderSurrenderValue, LRiderSurrenderValue );
        //NSLog(@"%d) %f,%f,%f,%f,%f,%f,%f, %f", i, RiderVUCashValueHigh,RiderVURetValueHigh, RiderVUDanaValueHigh,RiderVU2023ValueHigh, RiderVU2025ValueHigh,RiderVU2028ValueHigh, RiderVU2030ValueHigh, RiderVU2035ValueHigh);
        //NSLog(@"%d) %f,%f,%f,%f,%f,%f,%f, %f", i, RiderVUCashValueMedian,RiderVURetValueMedian, RiderVUDanaValueMedian,RiderVU2023ValueMedian, RiderVU2025ValueMedian,RiderVU2028ValueMedian, RiderVU2030ValueMedian, RiderVU2035ValueMedian);
        //---NSLog(@"%d) %f,%f, %f, %f, %f,%f,%f,%f,%f", i, VUCashValueHigh,VURetValueHigh, VUDanaValueHigh, VUVentureValueHigh, VU2023ValueHigh, VU2025ValueHigh,VU2028ValueHigh, VU2030ValueHigh, VU2035ValueHigh);
        NSLog(@"%d) %f, %f, %f", i, RiderVUVentureBlueChipValueHigh, RiderVUVentureIncomeValueHigh, RiderVU2035ValueHigh);
        //NSLog(@"%d) %f,%f, %f, %f,%f,%f,%f,%f", i, VUCashValueLow,VURetValueLow, VUDanaValueLow, VU2023ValueLow, VU2025ValueLow,VU2028ValueLow, VU2030ValueLow, VU2035ValueLow);
        // --------------------
        
        [RiderBullSurrender addObject:[NSString stringWithFormat:@"%f", HRiderSurrenderValue]];
        [RiderFlatSurrender addObject:[NSString stringWithFormat:@"%f", MRiderSurrenderValue]];
        [RiderBearSurrender addObject:[NSString stringWithFormat:@"%f", LRiderSurrenderValue]];
        
        double tempHRider = (HRiderSurrenderValue > 0 ? HRiderSurrenderValue : 0);
        double tempMRider = (MRiderSurrenderValue > 0 ? MRiderSurrenderValue : 0);
        double tempLRider = (LRiderSurrenderValue > 0 ? LRiderSurrenderValue : 0);
        
        [TotalBullSurrender addObject:[NSString stringWithFormat:@"%f", (HSurrenderValue > 0 ? (HSurrenderValue + tempHRider) : 0)]];
        [TotalFlatSurrender addObject:[NSString stringWithFormat:@"%f", (MSurrenderValue > 0 ? (MSurrenderValue + tempMRider) : 0)]];
        [TotalBearSurrender addObject:[NSString stringWithFormat:@"%f", (LSurrenderValue > 0 ? (LSurrenderValue + tempLRider) : 0)]];
        
        [OverallTotalFundSurrenderValueBull addObject:[TotalBullSurrender objectAtIndex: i -1]];
        [OverallTotalFundSurrenderValueFlat addObject:[TotalFlatSurrender objectAtIndex: i -1]];
        [OverallTotalFundSurrenderValueBear addObject:[TotalBearSurrender objectAtIndex: i -1]];
        
		double TempCIRDSA = 0;
		if (CIRDExist == TRUE) {
			if (i <= CIRDTerm) {
				TempCIRDSA = CIRDSA;
			}
			else{
				TempCIRDSA = 0;
			}
		}
		else
		{
			TempCIRDSA = 0;
		}
		
        [EOFTPDBull addObject:[NSString stringWithFormat:@"%f", [[BasicSumAssured objectAtIndex:i -1] doubleValue] + (HSurrenderValue > 0 ? HSurrenderValue : 0) + (HRiderSurrenderValue > 0 ? HRiderSurrenderValue : 0) + TempCIRDSA ]];
        [EOFTPDFlat addObject:[NSString stringWithFormat:@"%f", [[BasicSumAssured objectAtIndex:i -1] doubleValue] + (MSurrenderValue > 0 ? MSurrenderValue : 0) + (MRiderSurrenderValue > 0 ? MRiderSurrenderValue : 0) + TempCIRDSA ]];
        [EOFTPDBear addObject:[NSString stringWithFormat:@"%f", [[BasicSumAssured objectAtIndex:i -1] doubleValue] + (LSurrenderValue > 0 ? LSurrenderValue : 0) + (LRiderSurrenderValue > 0 ? LRiderSurrenderValue : 0) + TempCIRDSA ]];
        
        
        [OverallEOYTotalTPDBull addObject:HSurrenderValue > 0 ? ([NSString stringWithFormat:@"%f", [[TotalBullSurrender objectAtIndex: i -1] doubleValue]]) : @"0"];
        [OverallEOYTotalTPDFlat addObject:MSurrenderValue > 0 ? ([NSString stringWithFormat:@"%f", [[TotalFlatSurrender objectAtIndex: i -1] doubleValue]]) : @"0"];
        [OverallEOYTotalTPDBear addObject:LSurrenderValue > 0 ? ([NSString stringWithFormat:@"%f", [[TotalBearSurrender objectAtIndex: i -1] doubleValue]]) : @"0"];
        
        if (Age + i >= 65 ) {
            [EOFOADBull addObject:[NSString stringWithFormat:@"%f", [strBasicSA doubleValue] > OADLimit ? OADLimit : [strBasicSA doubleValue ] + (HSurrenderValue > 0 ? HSurrenderValue : 0) + (HRiderSurrenderValue > 0 ? HRiderSurrenderValue : 0)]];
            [EOFOADFlat addObject:[NSString stringWithFormat:@"%f", [strBasicSA doubleValue] > OADLimit ? OADLimit : [strBasicSA doubleValue ] + (MSurrenderValue > 0 ? MSurrenderValue : 0) + (MRiderSurrenderValue > 0 ? MRiderSurrenderValue : 0)]];
            [EOFOADBear addObject:[NSString stringWithFormat:@"%f", [strBasicSA doubleValue] > OADLimit ? OADLimit : [strBasicSA doubleValue ] + (LSurrenderValue > 0 ? LSurrenderValue : 0) + (LRiderSurrenderValue > 0 ? LRiderSurrenderValue : 0)]];
            
            [OverallEOYTotalOADBull addObject:[NSString stringWithFormat:@"%f",[[EOFOADBull objectAtIndex: i -1] doubleValue ] ]];
            [OverallEOYTotalOADFlat addObject:[NSString stringWithFormat:@"%f",[[EOFOADFlat objectAtIndex: i -1] doubleValue ] ]];
            [OverallEOYTotalOADBear addObject:[NSString stringWithFormat:@"%f",[[EOFOADBear objectAtIndex: i -1] doubleValue ] ]];
        }
        else{
            [EOFOADBull addObject:[NSString stringWithFormat:@"0"]];
            [EOFOADFlat addObject:[NSString stringWithFormat:@"0"]];
            [EOFOADBear addObject:[NSString stringWithFormat:@"0"]];
            
            [OverallEOYTotalOADBull addObject:[NSString stringWithFormat:@"%f", 0.00]];
            [OverallEOYTotalOADFlat addObject:[NSString stringWithFormat:@"%f", 0.00]];
            [OverallEOYTotalOADBear addObject:[NSString stringWithFormat:@"%f", 0.00]];
        }
        
		
        
        
        double HFundManagementCharge = HSurrenderValue > 0 ? FundManagementChargeHigh  : 0;
        double MFundManagementCharge = MSurrenderValue > 0 ? FundManagementChargeMed  : 0;
        double LFundManagementCharge = LSurrenderValue > 0 ? FundManagementChargeLow  : 0;
        
        if (UnitizeRiderCode.count > 0) {
            HFundManagementCharge = HRiderSurrenderValue > 0 ? (HFundManagementCharge + RiderFundManagementChargeHigh) : HFundManagementCharge;
            MFundManagementCharge = MRiderSurrenderValue > 0 ? (MFundManagementCharge + RiderFundManagementChargeMed) : MFundManagementCharge;
            LFundManagementCharge = LRiderSurrenderValue > 0 ? (LFundManagementCharge + RiderFundManagementChargeLow) : LFundManagementCharge;
        }
        
        [FundChargeBull addObject:[NSString stringWithFormat:@"%f",  HFundManagementCharge]];
        [FundChargeFlat addObject:[NSString stringWithFormat:@"%f", MFundManagementCharge]];
        [FundChargeBear addObject:[NSString stringWithFormat:@"%f",  LFundManagementCharge]];
		
        if (RPUOExist == TRUE) {
            if (i == [RPUOYear intValue ]) {
                [self CalculateRPUO];
                
            }
        }
		
    }
	/*
     else{
     [AnnualPremium addObject:@"0"];
     [BasicSumAssured addObject:@"0"];
     [CumulativePremium addObject:@"0"];
     [AllocatedBasicPrem addObject:@"0"];
     [AllocatedRiderPrem addObject:@"0"];
     [UnAllocatedAllPrem addObject:@"0"];
     [CumAlloBasicPrem addObject:@"0"];
     [CumAlloRiderPrem addObject:@"0"];
     [TotalCumPrem addObject:@"0"];
     [BasicInsCharge addObject:@"0"];
     [RiderInsCharge addObject:@"0"];
     [OtherCharge addObject:@"0"];
     [DirectDistributionCost addObject:@"0"];
     [BullSurrender addObject:@"0"];
     [FlatSurrender addObject:@"0"];
     [BearSurrender addObject:@"0"];
     [RiderBullSurrender addObject:@"0"];
     [RiderFlatSurrender addObject:@"0"];
     [RiderBearSurrender addObject:@"0"];
     [TotalBullSurrender addObject:@"0"];
     [TotalFlatSurrender addObject:@"0"];
     [TotalBearSurrender addObject:@"0"];
     [EOFTPDBull addObject:@"0"];
     [EOFTPDFlat addObject:@"0"];
     [EOFTPDBear addObject:@"0"];
     [EOFOADBull addObject:@"0"];
     [EOFOADFlat addObject:@"0"];
     [EOFOADBear addObject:@"0"];
     [FundChargeBull addObject:@"0"];
     [FundChargeFlat addObject:@"0"];
     [FundChargeBear addObject:@"0"];
     }
     
     }
     */
	if (sqlite3_open([databasePath UTF8String], &contactDB) == SQLITE_OK){
		//for (int a= 1; a<= [strCovPeriod intValue]; a++) {
        for (int a= 1; a<= ([strCovPeriod intValue] > 30 ? 30 : [strCovPeriod intValue]); a++) {
			if (Age >= 0){
				inputAge = Age + a;
				double tempBull = round([[BullSurrender objectAtIndex:a-1]doubleValue ]);
                double tempFlat = round([[FlatSurrender objectAtIndex:a-1]doubleValue ]);
                double tempBear = round([[BearSurrender objectAtIndex:a-1]doubleValue ]);
				//if (inputAge <= tempSustainYear) {
                QuerySQL = [NSString stringWithFormat: @"Insert INTO UL_Temp_Trad_Basic (\"SINO\", \"SeqNo\", \"DataType\",\"col0_1\",\"col0_2\",\"col1\",\"col2\", "
                            "'col3','col4','col5','col6','col7','col8','col9','col10','col11','col12','col13','col14','col15','col16','col17','col18','col19','col20','col21','col22', "
                            " 'col23','col24','col25','col26','col27','col28','col29','col30','col31') VALUES ( "
                            " \"%@\",\"%d\",\"%@\",\"%d\",\"%d\",\"%@\", '%@', '%.0f','%.0f', '%.0f', %.0f, '%.0f', '%.0f','%.0f', '%.0f','%.0f', '%.0f','%.0f','%.0f', '%.0f','%.0f','%.0f', '%.0f','%.0f', "
                            "'%.0f', '%.0f','%.0f','%.0f', '%.0f','%.0f','%.0f', '%.0f','%.0f','%.0f', '%.0f','%.0f' )",
                            SINo, a, @"DATA", a, inputAge,
                            tempBull >= 0 ? [BasicSumAssured objectAtIndex:a-1] : @"-",
                            tempBull >= 0 ? [AnnualPremium objectAtIndex:a -1] : @"-",
                            tempBull >= 0 ? round([[CumulativePremium objectAtIndex: a -1] doubleValue]) : -1,
                            tempBull >= 0 ? round([[UnAllocatedAllPrem objectAtIndex:a-1] doubleValue]) : -1,
                            tempBull >= 0 ? round([[AllocatedBasicPrem objectAtIndex:a-1] doubleValue ]) : -1,
                            tempBull >= 0 ? round([[AllocatedRiderPrem objectAtIndex:a-1] doubleValue ]) : -1,
                            tempBull >= 0 ? round([[CumAlloBasicPrem objectAtIndex:a-1] doubleValue ]) : -1,
                            tempBull >= 0 ? round([[CumAlloRiderPrem objectAtIndex:a-1]doubleValue ]): -1,
                            tempBull >= 0 ? round([[TotalCumPrem objectAtIndex:a-1] doubleValue ]): -1,
                            tempBull >= 0 ? round([[BasicInsCharge objectAtIndex:a-1]doubleValue ]) :-1,
                            tempBull >= 0 ? round([[RiderInsCharge objectAtIndex:a-1]doubleValue ]) : -1,
                            tempBull >= 0 ? round([[OtherCharge objectAtIndex:a-1]doubleValue ]) : -1,
                            tempBull >= 0 ? round([[DirectDistributionCost objectAtIndex:a-1]doubleValue ]) : -1,
                            tempBull >= 0 ? round([[BullSurrender objectAtIndex:a-1]doubleValue ]) : -1,
                            tempBull >= 0 ? round([[FlatSurrender objectAtIndex:a-1]doubleValue ]) : -1,
                            tempBull >= 0 ? round([[BearSurrender objectAtIndex:a-1]doubleValue ]) : -1,
                            tempBull >= 0 ? round([[RiderBullSurrender objectAtIndex:a-1]doubleValue ]) : -1,
                            tempFlat >= 0 ? round([[RiderFlatSurrender objectAtIndex:a-1] doubleValue ]) : -1,
                            tempBear >= 0 ? round([[RiderBearSurrender objectAtIndex:a-1] doubleValue ]) : -1,
                            tempBull >= 0 ? round([[TotalBullSurrender objectAtIndex:a-1]doubleValue ]) :-1 ,
                            tempBull >= 0 ? round([[TotalFlatSurrender objectAtIndex:a-1] doubleValue ]) : -1,
                            tempBull >= 0 ? round([[TotalBearSurrender objectAtIndex:a-1] doubleValue ]) : -1,
                            tempBull >= 0 ? round([[EOFTPDBull objectAtIndex:a-1]doubleValue ]) : -1,
                            tempBull >= 0 ? round([[EOFTPDFlat objectAtIndex:a-1] doubleValue ]) : -1,
                            tempBull >= 0 ? round([[EOFTPDBear objectAtIndex:a-1] doubleValue ]) : -1,
                            tempBull >= 0 ? round([[EOFOADBull objectAtIndex:a-1]doubleValue ]) : -1,
                            tempBull >= 0 ? round([[EOFOADFlat objectAtIndex:a-1] doubleValue ]) : -1,
                            tempBull >= 0 ?round([[EOFOADBear objectAtIndex:a-1] doubleValue ]) : -1,
                            tempBull >= 0 ? round([[FundChargeBull objectAtIndex:a-1]doubleValue ]) : -1,
                            tempBull >= 0 ? round([[FundChargeFlat objectAtIndex:a-1] doubleValue ]) : -1,
                            tempBull >= 0 ? round([[FundChargeBear objectAtIndex:a-1] doubleValue ]) : -1];
				/*
                 }
                 else{
                 QuerySQL = [NSString stringWithFormat: @"Insert INTO UL_Temp_Trad_Basic (\"SINO\", \"SeqNo\", \"DataType\",\"col0_1\",\"col0_2\",\"col1\",\"col2\", "
                 "'col3','col4','col5','col6','col7','col8','col9','col10','col11','col12','col13','col14','col15','col16','col17','col18','col19','col20','col21','col22', "
                 " 'col23','col24','col25','col26','col27','col28','col29','col30','col31') VALUES ( "
                 " \"%@\",\"%d\",\"%@\",\"%d\",\"%d\",\"-\", '-', '-','-', '-', '-', '-', '-','-', '-','-', '-','-','-', '-','-','-', '-','-', "
                 "'-', '-','-','-', '-','-','-', '-','-','-', '-','-')",
                 SINo, a, @"DATA", a, inputAge];
                 }
                 */
				
				
				//NSLog(@"%@", QuerySQL);
				if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
					if (sqlite3_step(statement) == SQLITE_DONE) {
						
					}
					else{
						NSLog(@"error in inserting data to UL_Temp_Trad_Basic");
					}
					sqlite3_finalize(statement);
				}
				
			}
		}
		
		
		sqlite3_close(contactDB);
	}
	
    statement = Nil;
    QuerySQL = Nil;
     AnnualPremium = Nil;
     BasicSumAssured = Nil;
     CumulativePremium = Nil;
     AllocatedBasicPrem = Nil;
     AllocatedRiderPrem = Nil;
     UnAllocatedAllPrem = Nil;
     CumAlloBasicPrem = Nil;
     CumAlloRiderPrem = Nil;
     TotalCumPrem = Nil;
     BasicInsCharge = Nil;
     RiderInsCharge = Nil;
     OtherCharge = Nil;
     DirectDistributionCost = Nil;
     RiderBullSurrender = Nil;
     RiderFlatSurrender = Nil;
     RiderBearSurrender = Nil;
     TotalBullSurrender = Nil;
     TotalFlatSurrender = Nil;
     TotalBearSurrender = Nil;
     EOFTPDBull = Nil;
     EOFTPDFlat = Nil;
     EOFTPDBear = Nil;
     EOFOADBull = Nil;
     EOFOADFlat = Nil;
     EOFOADBear = Nil;
     FundChargeBull = Nil;
     FundChargeFlat = Nil;
     FundChargeBear = Nil;
     
    
    
	NSLog(@"---------basic end--------");
}

-(double)JuvenilienFactor :(int)aaAge{
	if (aaAge <= 1) {
		return 0.2;
	}
	else if(aaAge == 2){
		return 0.4;
	}
	else if(aaAge == 3){
		return 0.6;
	}
	else if(aaAge == 4){
		return 0.8;
	}
	else {
		return 1.0;
	}
}


-(double)Calc_PaidUpOptionCharges:(double) aaFundValue andVUCash :(double) aaVUCash andHighMedLow :(NSString *) aaHighMedLow{
	if (aaVUCash >= OneTimePayOut) {
		return 0.00;
	}
	else{
		double totalWithoutVUCash = 0.00;
		if ([aaHighMedLow isEqualToString:@"High"]) {
			totalWithoutVUCash = VU2023ValueHigh + VU2025ValueHigh + VU2028ValueHigh + VU2030ValueHigh + VU2035ValueHigh + VUDanaValueHigh + VURetValueHigh + VUSmartValueHigh + VUVentureValueHigh;
		}
		else if ([aaHighMedLow isEqualToString:@"Med"]) {
			totalWithoutVUCash = VU2023ValueMedian + VU2025ValueMedian + VU2028ValueMedian + VU2030ValueMedian + VU2035ValueMedian + VUDanaValueMedian + VURetValueMedian + VUSmartValueMedian + VUVentureValueMedian;
		}
		else if ([aaHighMedLow isEqualToString:@"Low"]) {
			totalWithoutVUCash = VU2023ValueLow + VU2025ValueLow + VU2028ValueLow + VU2030ValueLow + VU2035ValueLow + VUDanaValueLow + VURetValueLow + VUSmartValueLow + VUVentureValueLow;
		}
        
		if (aaFundValue == 0 && totalWithoutVUCash == 0.00) {
			return 0.00;
		}
		else{
			return aaFundValue/(totalWithoutVUCash) * (OneTimePayOut - aaVUCash);
		}
	}
}

-(double)Calc_CashFundReinvest:(double) aaFundValue andVUCash :(double) aaVUCash andHighMedLow :(NSString *) aaHighMedLow{
    
    double totalWithoutVUCash = 0.00;
    if ([aaHighMedLow isEqualToString:@"High"]) {
        totalWithoutVUCash = VU2023ValueHigh + VU2025ValueHigh + VU2028ValueHigh + VU2030ValueHigh + VU2035ValueHigh + VUDanaValueHigh + VURetValueHigh + VUSmartValueHigh + VUVentureValueHigh + VUVentureGrowthValueHigh + VUVentureBlueChipValueHigh + VUVentureDanaValueHigh + VUVentureIncomeValueHigh + VUVentureManagedValueHigh;
    }
    else if ([aaHighMedLow isEqualToString:@"Med"]) {
        totalWithoutVUCash = VU2023ValueMedian + VU2025ValueMedian + VU2028ValueMedian + VU2030ValueMedian + VU2035ValueMedian + VUDanaValueMedian + VURetValueMedian + VUSmartValueMedian + VUVentureValueMedian +
                            VUVentureGrowthValueMedian + VUVentureBlueChipValueMedian + VUVentureDanaValueMedian + VUVentureIncomeValueMedian + VUVentureManagedValueMedian;
    }
    else if ([aaHighMedLow isEqualToString:@"Low"]) {
        totalWithoutVUCash = VU2023ValueLow + VU2025ValueLow + VU2028ValueLow + VU2030ValueLow + VU2035ValueLow + VUDanaValueLow + VURetValueLow + VUSmartValueLow + VUVentureValueLow +
                             VUVentureGrowthValueLow + VUVentureBlueChipValueLow + VUVentureDanaValueLow + VUVentureIncomeValueLow + VUVentureManagedValueLow;
    }
    
    if (aaFundValue == 0 && totalWithoutVUCash == 0.00) {
        return 0.00;
    }
    else{
        return aaFundValue/(totalWithoutVUCash) * aaVUCash;
    }
    
}

-(double)ReturnFundChargeRate:(NSString *)aaFund andMOP:(NSString *)aaMOP{
	if ([aaFund isEqualToString:@"Ever"]) {
		if ([aaMOP isEqualToString:@"A"]) {
			return 0.013;
		}
		else if ([aaMOP isEqualToString:@"S"]) {
			return 0.0097395;
		}
		else if ([aaMOP isEqualToString:@"Q"]) {
			return 0.0081119;
		}
		else {
			return 0.0070278;
		}
	}
	else if ([aaFund isEqualToString:@"Secure"]) {
		if ([aaMOP isEqualToString:@"A"]) {
			return 0.01;
		}
		else if ([aaMOP isEqualToString:@"S"]) {
			return 0.0074938;
		}
		else if ([aaMOP isEqualToString:@"Q"]) {
			return 0.0062422;
		}
		else  {
			return 0.0054084;
		}
	}
	else if ([aaFund isEqualToString:@"Dana"]) {
		if ([aaMOP isEqualToString:@"A"]) {
			return 0.013;
		}
		else if ([aaMOP isEqualToString:@"S"]) {
			return 0.0097395;
		}
		else if ([aaMOP isEqualToString:@"Q"]) {
			return 0.0081119;
		}
		else  {
			return 0.0070278;
		}
	}
    else if ([aaFund isEqualToString:@"Smart"]) {
		if ([aaMOP isEqualToString:@"A"]) {
			return 0.0142;
		}
		else if ([aaMOP isEqualToString:@"S"]) {
			return 0.0106375;
		}
		else if ([aaMOP isEqualToString:@"Q"]) {
			return 0.0088594;
		}
		else  {
			return 0.0076751;
		}
	}
	else if ([aaFund isEqualToString:@"Venture"]) {
		if ([aaMOP isEqualToString:@"A"]) {
			return 0.0142;
		}
		else if ([aaMOP isEqualToString:@"S"]) {
			return 0.0106375;
		}
		else if ([aaMOP isEqualToString:@"Q"]) {
			return 0.0088594;
		}
		else  {
			return 0.0076751;
		}
	}
    else if ([aaFund isEqualToString:@"VentureGrowth"]) {
		if ([aaMOP isEqualToString:@"A"]) {
			return 0.0144;
		}
		else if ([aaMOP isEqualToString:@"S"]) {
			return 0.0107871;
		}
		else if ([aaMOP isEqualToString:@"Q"]) {
			return 0.0089839;
		}
		else  {
			return 0.007783;
		}
	}
    else if ([aaFund isEqualToString:@"VentureBlueChip"]) {
		if ([aaMOP isEqualToString:@"A"]) {
			return 0.0147;
		}
		else if ([aaMOP isEqualToString:@"S"]) {
			return 0.0110116;
		}
		else if ([aaMOP isEqualToString:@"Q"]) {
			return 0.0091707;
		}
		else  {
			return 0.0079447;
		}
	}
    else if ([aaFund isEqualToString:@"VentureDana"]) {
        
		if ([aaMOP isEqualToString:@"A"]) {
			return 0.014;
		}
		else if ([aaMOP isEqualToString:@"S"]) {
			return 0.0104878;
		}
		else if ([aaMOP isEqualToString:@"Q"]) {
			return 0.0087348;
		}
		else  {
			return 0.0075672;
		}
	}
    else if ([aaFund isEqualToString:@"VentureManaged"]) {
		if ([aaMOP isEqualToString:@"A"]) {
			return 0.0124;
		}
		else if ([aaMOP isEqualToString:@"S"]) {
			return 0.0092904;
		}
		else if ([aaMOP isEqualToString:@"Q"]) {
			return 0.0077381;
		}
		else  {
			return 0.006704;
		}
	}
    else if ([aaFund isEqualToString:@"VentureIncome"]) {
		if ([aaMOP isEqualToString:@"A"]) {
			return 0.005;
		}
		else if ([aaMOP isEqualToString:@"S"]) {
			return 0.0037484;
		}
		else if ([aaMOP isEqualToString:@"Q"]) {
			return 0.0031231;
		}
		else  {
			return 0.0027063;
		}
	}
	else {
		if ([aaMOP isEqualToString:@"A"]) {
			return 0.0025;
		}
		else if ([aaMOP isEqualToString:@"S"]) {
			return 0.0018746;
		}
		else if ([aaMOP isEqualToString:@"Q"]) {
			return 0.001562;
		}
		else {
			return 0.0013537;
		}
	}
    
    

}

-(BOOL)InsertToUL_Temp_Fund:(NSString *)aaFund andValue1:(double)aaValue1 andValue2:(double)aaValue2 andValue3:(double)aaValue3
                  andValue4:(double)aaValue4 andValue5:(double)aaValue5 andValue6:(double)aaValue6{
	sqlite3_stmt *statement;
    NSString *QuerySQL;
	BOOL result = FALSE;
    
    if (sqlite3_open([databasePath UTF8String], &contactDB) == SQLITE_OK){
		QuerySQL = [ NSString stringWithFormat:@"Insert Into UL_temp_Fund (col1,col2,col3,col4,col5,col6,col7,sino) "
					"VALUES ('%@', '%.0f', '%.0f', '%.0f', '%.0f', '%.0f', '%.0f', '%@')", aaFund, round(aaValue1), round(aaValue2), round(aaValue3),
					round(aaValue4), round(aaValue5), round(aaValue6), SINo];
		
		//NSLog(@"%@",QuerySQL);
		if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
			if(sqlite3_step(statement) == SQLITE_DONE) {
                
                
			}
			
			sqlite3_finalize(statement);
			result = TRUE;
			
		}
		else
		{
            result = FALSE;

		}
		
        sqlite3_close(contactDB);
	}

    return  result;

}

-(void)getAllPreDetails{
	sqlite3_stmt *statement;
    NSString *QuerySQL;
	double tempOtherRiderPrem = 0.00;
	NSString *tempUniRiderPrem;
    NSString *tempUniRiderPrem2;
    NSString *tempUniRiderPrem3;
	
    if (sqlite3_open([databasePath UTF8String], &contactDB) == SQLITE_OK){
		QuerySQL = [NSString stringWithFormat: @"Select BasicSA, ATPrem, replace(Hloading, '(null)', '0') as Hloading, "
					"replace(HLoadingPct, '(null)', '0') as HLoadingPct "
					", BumpMode, HLoadingTerm, HLoadingPctTerm, PolicySustainYear, ATU, covperiod from UL_Details Where  "
					" sino = '%@' ", SINo];
		
		//NSLog(@"%@", QuerySQL);
		if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
            if (sqlite3_step(statement) == SQLITE_ROW) {
				
				BasicSA = [[[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 0)] doubleValue ];
				strBasicSA = [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 0)] ;
				strBasicPremium = [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 1)] ;
				const char *temp = (const char*)sqlite3_column_text(statement, 2);
                getHL = temp == NULL ? nil : [[NSString alloc] initWithUTF8String:temp];
				const char *temp2 = (const char*)sqlite3_column_text(statement, 3);
				getHLPct = temp2 == NULL ? nil : [[NSString alloc] initWithUTF8String:temp2];
				strBumpMode	= [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 4)] ;
				const char *temp3 = (const char*)sqlite3_column_text(statement, 5);
				getHLTerm = temp3 == NULL ? nil : [[NSString alloc] initWithUTF8String:temp3];
				const char *temp4 = (const char*)sqlite3_column_text(statement, 6);
				getHLPctTerm = temp4 == NULL ? nil : [[NSString alloc] initWithUTF8String:temp4];
				PolicySustainYear = sqlite3_column_double(statement, 7);
				strGrayRTUPAmount = [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 8)] ;
				int tempCovPeriod = sqlite3_column_int(statement, 9);
				//strCovPeriod = tempCovPeriod > 30 ? @"30" : [NSString stringWithFormat:@"%d", tempCovPeriod];
                strCovPeriod = [NSString stringWithFormat:@"%d", tempCovPeriod];
				
			}
            sqlite3_finalize(statement);
        }
		
		strBasicPremium_Bump = strBasicPremium;
		if ([strBumpMode isEqualToString:@"S"]) {
			strBasicPremium = [NSString stringWithFormat:@"%.0f", round([strBasicPremium doubleValue]/0.5)];
		}
		else if([strBumpMode isEqualToString:@"Q"]){
			strBasicPremium = [NSString stringWithFormat:@"%.0f", round([strBasicPremium doubleValue]/0.25)];
		}
		else if([strBumpMode isEqualToString:@"M"]){
			strBasicPremium = [NSString stringWithFormat:@"%.0f", round([strBasicPremium doubleValue]/0.0833333)];
		}
		else
		{
            
		}
		
		QuerySQL = [ NSString stringWithFormat:@"Select RiderCode, RiderTerm,RiderDesc, SumAssured, PlanOption, "
					"Deductible, replace(Hloading, '(null)', '0') as Hloading, HloadingTerm, "
					" replace(HloadingPct, '(null)', '0') as HloadingPct, HloadingPctTerm, Premium, paymentTerm, PaymentChoice, ifnull(RiderLoadingPremium, '0.00'), PtypeCode, Seq,  "
					" ReinvestGYI, GYIYear, RRTUOFromYear, RRTUOYear from UL_rider_details "
                    "  where \"sino\" = \"%@\" AND ridercode not in ('CIRD', 'DCA', 'ACIR', 'HMM', 'MG_IV', 'JCCR', 'TCCR', 'CCR',  'MSR', 'LDYR', 'MDSR1', 'MDSR2', "
					"'WI', 'MR', 'TPDMLA', 'PA', 'DHI', 'ECAR', 'ECAR6', 'ECAR60', 'RRTUO', 'TPDYLA','LDYR-PCB', 'MDSR1-ALW', 'MDSR2-ALW','LDYR-BBB', 'MDSR1-OT', 'MDSR2-OT', 'HCIR') order by PTypeCode, seq, ridercode ", SINo];
		
		//NSLog(@"%@", QuerySQL);
		if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
			while(sqlite3_step(statement) == SQLITE_ROW) {
				[OtherRiderCode addObject:[[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 0)]];
				[OtherRiderTerm addObject:[[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 1)]];
				[OtherRiderDesc addObject:[[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 2)]];
				
				[OtherRiderSA addObject: [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 3)]];
				if ([[[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 4)] isEqualToString:@"(null)" ]   ) {
					[OtherRiderPlanOption addObject:@""];
				}
				else {
					[OtherRiderPlanOption addObject:[[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 4)]];
				}
				
				[OtherRiderDeductible addObject:[[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 5)]];
				[OtherRiderHL addObject:[[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 6)]];
				[OtherRiderHLTerm addObject:[[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 7)]];
				[OtherRiderHLP addObject:[[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 8)]];
				[OtherRiderHLPTerm addObject:[[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 9)]];
				tempOtherRiderPrem = sqlite3_column_double(statement, 10);
				
				if ([strBumpMode isEqualToString:@"S"]) {
					[OtherRiderPremium addObject:[NSString stringWithFormat:@"%f", tempOtherRiderPrem/0.5]];
				}
				else if([strBumpMode isEqualToString:@"Q"]){
					[OtherRiderPremium addObject:[NSString stringWithFormat:@"%f", tempOtherRiderPrem/0.25]];
				}
				else if([strBumpMode isEqualToString:@"M"]){
					[OtherRiderPremium addObject:[NSString stringWithFormat:@"%f", tempOtherRiderPrem/0.0833333]];
				}
				else
				{
					[OtherRiderPremium addObject:[NSString stringWithFormat:@"%f", tempOtherRiderPrem]];
				}
				
				//[OtherRiderPremium addObject:[[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 10)]];
				[OtherRiderPaymentTerm addObject:[[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 11)]];
                [OtherRiderPaymentChoice addObject:[[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 12)]];
                [OtherRiderLoadingPremium addObject:[[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 13)]];
                [OtherRiderPTypeCode addObject:[[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 14)]];
                [OtherRiderPTypeSeq addObject:[[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 15)]];
                
			}
			
			sqlite3_finalize(statement);
		}
		
		QuerySQL = [NSString stringWithFormat: @"Select ridercode, SumAssured, ifnull(Hloading, '0') as Hloading, ifnull(HLoadingPct, '0') as HLoadingPct, "
					"RiderTerm, planOption, ifnull(Deductible, ''), premium, ifnull(HloadingTerm, '0') as HloadingTerm, ifnull(HloadingPctTerm, '0') as HloadingPctTerm, "
                    "ifnull(premium2, '0') as premium2, ifnull(premium3, '0') as premium3, ifnull(PreDeductible,''), ifnull(PostDeductible,''), ifnull(units, 0) from ul_rider_details Where  "
					"  sino = '%@' AND ridercode in ('CIRD', 'DCA', 'ACIR', 'HMM', 'MG_IV', 'JCCR', 'TCCR', 'CCR',  'MSR', 'LDYR', 'MDSR1', 'MDSR2', 'HCIR', "
					"'WI', 'MR', 'TPDMLA', 'PA', 'DHI', 'TPDYLA','LDYR-PCB', 'MDSR1-ALW', 'MDSR2-ALW','LDYR-BBB', 'MDSR1-OT', 'MDSR2-OT')", SINo];
		
		//NSLog(@"%@", QuerySQL);
		if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
            while (sqlite3_step(statement) == SQLITE_ROW) {
				[UnitizeRiderCode addObject:[[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 0)]];
				[UnitizeRiderSA addObject:[[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 1)]];
				[UnitizeRiderHL addObject:[[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 2)]];
				[UnitizeRiderHLPct addObject:[[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 3)]];
				[UnitizeRiderTerm addObject:[[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 4)]];
				[UnitizeRiderPlanChoice addObject:[[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 5)]];
				[UnitizeRiderDeductible addObject:[[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 6)]];
				//[UnitizeRiderPremium addObject:[[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 7)]];
				tempUniRiderPrem = [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 7)];
				tempUniRiderPrem2 = [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 10)];
                tempUniRiderPrem3 = [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 11)];
                
				if ([strBumpMode isEqualToString:@"S"]) {
					[UnitizeRiderPremium addObject:[NSString stringWithFormat:@"%f", [tempUniRiderPrem doubleValue]/0.5]];
                    [UnitizeRiderPremium2 addObject:[NSString stringWithFormat:@"%f", [tempUniRiderPrem2 doubleValue]/0.5]];
                    [UnitizeRiderPremium3 addObject:[NSString stringWithFormat:@"%f", [tempUniRiderPrem3 doubleValue]/0.5]];
				}
				else if([strBumpMode isEqualToString:@"Q"]){
					[UnitizeRiderPremium addObject:[NSString stringWithFormat:@"%f", [tempUniRiderPrem doubleValue ]/0.25]];
                    [UnitizeRiderPremium2 addObject:[NSString stringWithFormat:@"%f", [tempUniRiderPrem2 doubleValue ]/0.25]];
                    [UnitizeRiderPremium3 addObject:[NSString stringWithFormat:@"%f", [tempUniRiderPrem3 doubleValue ]/0.25]];
				}
				else if([strBumpMode isEqualToString:@"M"]){
					[UnitizeRiderPremium addObject:[NSString stringWithFormat:@"%f", [self dblRoundToTwoDecimal:[tempUniRiderPrem doubleValue ]/0.0833333]]];
                    [UnitizeRiderPremium2 addObject:[NSString stringWithFormat:@"%f", [self dblRoundToTwoDecimal:[tempUniRiderPrem2 doubleValue ]/0.0833333]]];
                    [UnitizeRiderPremium3 addObject:[NSString stringWithFormat:@"%f", [self dblRoundToTwoDecimal:[tempUniRiderPrem3 doubleValue ]/0.0833333]]];
				}
				else
				{
					[UnitizeRiderPremium addObject:[NSString stringWithFormat:@"%f", [tempUniRiderPrem doubleValue]]];
                    [UnitizeRiderPremium2 addObject:[NSString stringWithFormat:@"%f", [tempUniRiderPrem2 doubleValue]]];
                    [UnitizeRiderPremium3 addObject:[NSString stringWithFormat:@"%f", [tempUniRiderPrem3 doubleValue]]];
				}
				
				if ([[[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 0)] isEqualToString:@"CIRD"]) {
					CIRDExist = TRUE;
					CIRDSA = sqlite3_column_double(statement, 1);
					CIRDTerm =  sqlite3_column_double(statement, 4);
				}
                
                [UnitizeRiderHLTerm addObject:[[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 8)]];
				[UnitizeRiderHLPctTerm addObject:[[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 9)]];
                [UnitizeRiderPreDeductible addObject:[[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 12)]];
				[UnitizeRiderPostDeductible addObject:[[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 13)]];
                [UnitizeRiderUnits addObject:[[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 14)]];

			}
            sqlite3_finalize(statement);
        }
		
		
		QuerySQL = [NSString stringWithFormat: @"Select premium, RRTUOFromYear, RRTUOYear from ul_rider_details Where  "
					"  sino = '%@' AND ridercode in ('RRTUO')", SINo];
		
		//NSLog(@"%@", QuerySQL);
		if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
            if (sqlite3_step(statement) == SQLITE_ROW) {
				strRRTUOPrem = [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 0)];
				strRRTUOFrom = [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 0)];
				strRRTUOFor = [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 0)];
			}
            sqlite3_finalize(statement);
        }
		
		QuerySQL = [NSString stringWithFormat:@"Select FromYear, ForYear, Amount from UL_TPExcess where SINo ='%@' AND Amount != 0", SINo];
		
		
		if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
			if (sqlite3_step(statement) == SQLITE_ROW) {
				TopupStart = [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 0)];
				TopupEnd = [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 1)];
				TopupAmount = [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 2)];
			}
			sqlite3_finalize(statement);
		}
		else{
			TopupStart = @"0";
			TopupEnd = @"0";
			TopupAmount = @"0";
		}
		
		
		
		sqlite3_close(contactDB);
	}
	
}

-(double)dblRoundToTwoDecimal:(double)value
{
    NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
    //    [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
    [formatter setMaximumFractionDigits:2];
    
    [formatter setRoundingMode: NSNumberFormatterRoundHalfUp];
    
    NSString *temp = [formatter stringFromNumber:[NSNumber numberWithDouble:value]];
    
    return [temp doubleValue];
}

-(void)InsertSustainYear :(int)aaSustainYear{
	sqlite3_stmt *statement;
    NSString *QuerySQL;
	
	if (sqlite3_open([databasePath UTF8String], &contactDB) == SQLITE_OK){
		QuerySQL = [ NSString stringWithFormat:@"Update UL_Details SET PolicySustainYear = '%d' where sino = '%@'", aaSustainYear + Age, SINo];
		
		if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
			if (sqlite3_step(statement) == SQLITE_DONE) {
                
			}
			sqlite3_finalize(statement);
		}
		sqlite3_close(contactDB);
	}
}

-(void)getRPUO{
	sqlite3_stmt *statement;
    NSString *QuerySQL;
	OneTimePayOutRate = 0.00;
    
	if (sqlite3_open([databasePath UTF8String], &contactDB) == SQLITE_OK){
		QuerySQL = [ NSString stringWithFormat:@"Select ReducedYear, Amount From UL_ReducedPaidUp where sino = '%@'", SINo];
		
		if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
			if (sqlite3_step(statement) == SQLITE_ROW) {
			 	RPUOExist = TRUE;
				RPUOYear = [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 0)];
				RPUOSA = [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 1)];
			}
			else
			{
				RPUOExist = NO;
				RPUOYear = @"0";
				RPUOSA = @"0";
			}
			
			sqlite3_finalize(statement);
		}
        
		sqlite3_close(contactDB);
	}
	
	if (RPUOExist == TRUE) {
		if (sqlite3_open([UL_RatesDatabasePath UTF8String], &contactDB) == SQLITE_OK){
			QuerySQL = [ NSString stringWithFormat:@"Select Rate From ES_Sys_Paid_Up_Rate where Sex = '%@' "
						"AND Smoker = '%@' AND PolTerm = '%@' AND Paid_Up_Year = '%@' AND plancode = '%@' AND EntryAgeStart = '%d' ",
						getSexLA, getSmokerLA, strCovPeriod  , RPUOYear, getPlanCode, Age];
			//NSLog(@"%@",QuerySQL);
			if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
				if (sqlite3_step(statement) == SQLITE_ROW) {
					OneTimePayOutRate = sqlite3_column_double(statement, 0);
				}
				
				sqlite3_finalize(statement);
			}
			
			
			
			sqlite3_close(contactDB);
		}
		
		OneTimePayOut = (OneTimePayOutRate * (1 + (([getHLPct doubleValue ]/100.00) * (MAX(0, [getHLPctTerm intValue] - [RPUOYear intValue ])/(75 - Age - [RPUOYear intValue])))) +
						 ([getHL doubleValue] * MAX(0, [getHLTerm intValue] - [RPUOYear intValue])) + ([getOccLoading doubleValue] * MAX(0, 75 - Age - [RPUOYear intValue]))) * [RPUOSA doubleValue]/1000.00;
		
		double tempMin = BasicSA * (0.05 * ([RPUOYear intValue ] -3)  + 0.15);
		OneTimePayOutWithMinSA = (OneTimePayOutRate * (1 + (([getHLPct doubleValue ]/100.00) * (MAX(0, [getHLPctTerm intValue] - [RPUOYear intValue ])/(75 - Age - [RPUOYear intValue])))) +
								  ([getHL doubleValue] * MAX(0, [getHLTerm intValue] - [RPUOYear intValue])) + ([getOccLoading doubleValue] * MAX(0, 75 - Age - [RPUOYear intValue]))) * tempMin/1000.00;
		
	}
	
	//NSLog(@"%f dasdas", OneTimePayOut);
}

-(void)getECAR55{
	sqlite3_stmt *statement;
    NSString *QuerySQL;
	
	if (sqlite3_open([databasePath UTF8String], &contactDB) == SQLITE_OK){
		QuerySQL = [ NSString stringWithFormat:@"Select  RiderTerm,RiderDesc, SumAssured, "
					" coalesce(nullif(hloading, ''), '0' ) as Hloading, HloadingTerm, "
					" replace(HloadingPct, '(null)', '0') as HloadingPct, HloadingPctTerm, Premium, paymentTerm, "
					" ReinvestGYI from UL_rider_details where \"sino\" = \"%@\" AND ridercode = 'ECAR55' ", SINo];
		//NSLog(@"%@", QuerySQL);
		if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
			if (sqlite3_step(statement) == SQLITE_ROW) {
				ECAR55Exist = TRUE;
				ECAR55RiderTerm = [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 0)];
				ECAR55RiderDesc = [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 1)];
				ECAR55SumAssured = [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 2)];
				const char *temp = (const char*)sqlite3_column_text(statement, 3);
				ECAR55HLoading = temp == NULL ? Nil : [[NSString alloc] initWithUTF8String:(const char *)temp];
				//ECAR55HLoading = [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 3)];
				ECAR55HLoadingTerm = [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 4)];
				ECAR55HLoadingPct = [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 5)];
				ECAR55HLoadingPctTerm = [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 6)];
				ECAR55Premium = [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 7)];
				ECAR55PaymentTerm = [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 8)];
				ECAR55ReinvestGYI = [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 9)];
				
			}
			else{
				ECAR55Exist = FALSE;
			}
			sqlite3_finalize(statement);
		}
		
		sqlite3_close(contactDB);
	}
	
	
}

-(void)getECAR60{
	sqlite3_stmt *statement;
    NSString *QuerySQL;
	
	if (sqlite3_open([databasePath UTF8String], &contactDB) == SQLITE_OK){
		QuerySQL = [ NSString stringWithFormat:@"Select  RiderTerm,RiderDesc, SumAssured, coalesce(nullif(hloading, ''), '0' ) as Hloading, HloadingTerm, replace(HloadingPct, '(null)', '0') as HloadingPct, HloadingPctTerm, Premium, paymentTerm,  ReinvestGYI, RiderLoadingPremium from UL_rider_details where \"sino\" = \"%@\" AND ridercode = 'ECAR60' ", SINo];
		//NSLog(@"%@", QuerySQL);
		if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
			if (sqlite3_step(statement) == SQLITE_ROW) {
				ECAR60Exist = TRUE;
				ECAR60RiderTerm = [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 0)];
				ECAR60RiderDesc = [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 1)];
				ECAR60SumAssured = [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 2)];
				const char *temp = (const char*)sqlite3_column_text(statement, 3);
				ECAR60HLoading = temp == NULL ? Nil : [[NSString alloc] initWithUTF8String:(const char *)temp];
				ECAR60HLoadingTerm = [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 4)];
				ECAR60HLoadingPct = [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 5)];
				ECAR60HLoadingPctTerm = [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 6)];
				ECAR60Premium = [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 7)];
				ECAR60PaymentTerm = [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 8)];
				ECAR60ReinvestGYI = [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 9)];
				ECAR60LoadingPrem = [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 10)];
				
			}
			else{
				ECAR60Exist = FALSE;
			}
			sqlite3_finalize(statement);
		}
		
		sqlite3_close(contactDB);
	}
	
	
}


-(void)InsertToUL_Temp_ECAR55{
	sqlite3_stmt *statement;
    NSString *QuerySQL;
    
	double ECAR55AnnuityRate = 0.00;
	double ECAR55TPDRate = 0.00;
	NSMutableArray *CSVRate = [[NSMutableArray alloc] init ];
	NSMutableArray *ECAR55AnnualPremium = [[NSMutableArray alloc] init ];
	NSMutableArray *RiderMonthlyIncome = [[NSMutableArray alloc] init ];
	NSMutableArray *RiderSurrenderValueMRA = [[NSMutableArray alloc] init ];
	NSMutableArray *RiderSurrenderValue = [[NSMutableArray alloc] init ];
	NSMutableArray *RiderTPDBegin = [[NSMutableArray alloc] init ];
	NSMutableArray *RiderTPDEnd = [[NSMutableArray alloc] init ];
	NSMutableArray *CommissionRate = [[NSMutableArray alloc] init ];
	NSMutableArray *RiderDistributionCost = [[NSMutableArray alloc] init ];
	
	if (ECAR55Exist == TRUE) {
		NSLog(@"--------- ECAR55 begin --------");
		
		if (sqlite3_open([UL_RatesDatabasePath UTF8String], &contactDB) == SQLITE_OK){
			for (int i =1; i <= ([strCovPeriod intValue] > 30 ? 30 : [strCovPeriod intValue]); i++) {
				QuerySQL = [ NSString stringWithFormat:@"Select CSV from ES_sys_Rider_csv where PlanCode = 'ECAR55' "
							"AND PremPayOpt = '%@' AND PolTerm = '%@' AND FromAge = '%d' AND PolYear = '%d' ", ECAR55PaymentTerm, ECAR55RiderTerm, Age, i];
				
				//NSLog(@"%@", QuerySQL);
				if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
					if (sqlite3_step(statement) == SQLITE_ROW) {
                        [CSVRate addObject: [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 0)]];
					}
					
					sqlite3_finalize(statement);
				}
                
				QuerySQL = [ NSString stringWithFormat:@"Select Rate from ES_sys_Rider_ECAR55_Comm where  "
							" Year = '%d' AND Premium_Term = '%d' ", i > 7 ? 7 : i, 55 - Age];
				
				if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
					if (sqlite3_step(statement) == SQLITE_ROW) {
						[CommissionRate addObject: [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 0)]];
					}
					
					
					sqlite3_finalize(statement);
				}
				
			}
			
			QuerySQL = [ NSString stringWithFormat:@"Select Rate from ES_sys_Rider_AnnuityPrem where PlanCode = 'ECAR55' "
						"AND PremPayOpt = '%@' AND PolTerm = '%@' AND FromAge = '%d' ", ECAR55PaymentTerm, ECAR55RiderTerm, Age];
			
			if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
                if (sqlite3_step(statement) == SQLITE_ROW) {
                    ECAR55AnnuityRate = sqlite3_column_double(statement, 0);
                }
				
				sqlite3_finalize(statement);
			}
			
			QuerySQL = [ NSString stringWithFormat:@"Select Rate from ES_sys_Rider_Prem where PlanCode = 'ECAR55' "
						"AND PremPayOpt = '%@' AND Term = '%@' AND FromAge = '%d' ", ECAR55PaymentTerm, ECAR55RiderTerm, Age];
			
			if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
				if (sqlite3_step(statement) == SQLITE_ROW) {
                    ECAR55TPDRate = sqlite3_column_double(statement, 0);
				}
				
				sqlite3_finalize(statement);
			}
			
			
			sqlite3_close(contactDB);
		}
		
		if (CommissionRate.count == 0) {
			NSLog(@"no commission rate");
			return;
		}
		
		if (CSVRate.count == 0) {
			NSLog(@"no csv rate");
			return;
		}
		
		for (int i = 1; i <= [strCovPeriod intValue]; i++) {
			if (Age + i <= 55) {
				[ECAR55AnnualPremium addObject: ECAR55Premium ];
			}
			else{
				[ECAR55AnnualPremium addObject:@"0.00" ];
			}
			
			double NewOverallTotalPremiumPaid = [[OverallTotalPremiumPaid objectAtIndex: i -1 ] doubleValue ] + [[ECAR55AnnualPremium objectAtIndex:i-1] doubleValue ];
			[OverallTotalPremiumPaid replaceObjectAtIndex:i - 1 withObject:[NSString stringWithFormat:@"%f", NewOverallTotalPremiumPaid]];
			
			if (Age + i ==  55) {
				[RiderMonthlyIncome addObject: ECAR55SumAssured ];
			}
			else if (Age + i > 55) {
				[RiderMonthlyIncome addObject: [NSString stringWithFormat:@"%f", [ECAR55SumAssured doubleValue ] * 12 ]];
			}
			else{
				[RiderMonthlyIncome addObject:@"0.00" ];
			}
			
			[OverallMonthlyIncome addObject:[RiderMonthlyIncome objectAtIndex:i - 1]];
			
			double tempS = [[CSVRate objectAtIndex:i -1] doubleValue ] * [ECAR55SumAssured doubleValue ]/100.00;
			double tempRetPrem = ECAR55AnnuityRate * [ECAR55Premium doubleValue]/100.00;
			double minRetention = 0.00;
			
			if (tempRetPrem > 3000) {
				tempRetPrem = 3000;
			}
			
			if (Age + i <= 55) {
				minRetention = tempRetPrem * i;
			}
			else{
				minRetention = 0.00;
			}
            
			//-----------------
			[RiderSurrenderValueMRA addObject:[NSString stringWithFormat:@"%f", tempS - minRetention < 0.00 ? 0 : tempS - minRetention]];
			[RiderSurrenderValue addObject:[NSString stringWithFormat:@"%f", tempS]];
			
			double NewOverallFullSurrenderValue = [[OverallFullSurrenderValue objectAtIndex: i -1 ] doubleValue ] +
            [[RiderSurrenderValue objectAtIndex:i-1] doubleValue ];
			[OverallFullSurrenderValue replaceObjectAtIndex:i - 1 withObject:[NSString stringWithFormat:@"%f", NewOverallFullSurrenderValue]];
			
			//------------
			double RiderTPD;
			if (Age + i <= 55) {
				RiderTPD = (ECAR55TPDRate * [ECAR55SumAssured doubleValue]/100.00) * ((pow(1.035, i ) - 1)/0.035) ;
				
			}
			else{
				RiderTPD = [ECAR55SumAssured doubleValue ] * 6 * (101 - (Age + i));
			}
			
			
			[RiderTPDBegin addObject:[NSString stringWithFormat:@"%f", RiderTPD]];
			double NewOverallTPDBegin = [[OverallTPDBegin objectAtIndex: i -1 ] doubleValue ] + [[RiderTPDBegin objectAtIndex:i-1] doubleValue ];
			[OverallTPDBegin replaceObjectAtIndex:i - 1 withObject:[NSString stringWithFormat:@"%f", NewOverallTPDBegin]];
			
			double RiderTPDEOF;
			if (Age + i <= 55) {
				RiderTPDEOF = (ECAR55TPDRate * [ECAR55SumAssured doubleValue]/100.00) * 1.035 * (pow(1.035, i) - 1)/0.035 ;
			}
			else{
				RiderTPDEOF = [ECAR55SumAssured doubleValue ] * 6 * (100 - (Age + i));
			}
			
			[RiderTPDEnd addObject:[NSString stringWithFormat:@"%f", RiderTPDEOF]];
			double NewOverallTPDEOY = [[OverallTPDEOY objectAtIndex: i -1 ] doubleValue ] + [[RiderTPDEnd objectAtIndex:i-1] doubleValue ];
			[OverallTPDEOY replaceObjectAtIndex:i - 1 withObject:[NSString stringWithFormat:@"%f", NewOverallTPDEOY]];
			
			[RiderDistributionCost addObject:[NSString stringWithFormat:@"%f", [[ECAR55AnnualPremium objectAtIndex:i - 1] doubleValue ] * [[CommissionRate objectAtIndex:i - 1] doubleValue ]/100.00]];
			
			
		}
		
		int inputAge;
		if (sqlite3_open([databasePath UTF8String], &contactDB) == SQLITE_OK){
            
			for (int a= 1; a<=[strCovPeriod intValue]; a++) {
				if (Age >= 0){
					inputAge = Age + a;
					
					if (a == 1) {
						QuerySQL = [NSString stringWithFormat: @"Insert INTO UL_Temp_ECAR55 (\"SINO\", \"SeqNo\", \"DataType\",\"col0_1\",\"col0_2\",\"col1\",\"col2\", "
									"'col3','col4','col5','col6','col7', 'col8', 'col9') VALUES ( "
									" \"%@\",\"%d\",\"%@\",\"%d\",\"%d\",\"%@\", '%.0f', '%.0f','%.0f', '%.0f', %.0f, '%.0f', '%f', '%@')",
									SINo, a, @"DATA", a, inputAge, [ECAR55AnnualPremium objectAtIndex:a - 1], round([[RiderMonthlyIncome objectAtIndex:a -1] doubleValue ]),
									round([[RiderSurrenderValueMRA objectAtIndex:a-1] doubleValue ]), round([[RiderSurrenderValue objectAtIndex:a-1] doubleValue]),
									round([[RiderTPDBegin objectAtIndex:a-1] doubleValue ]),
									round([[RiderTPDEnd objectAtIndex:a-1] doubleValue ]), round([[RiderDistributionCost objectAtIndex:a-1]doubleValue ]), ECAR55AnnuityRate, ECAR55Premium];
					}
					else{
						QuerySQL = [NSString stringWithFormat: @"Insert INTO UL_Temp_ECAR55 (\"SINO\", \"SeqNo\", \"DataType\",\"col0_1\",\"col0_2\",\"col1\",\"col2\", "
									"'col3','col4','col5','col6','col7') VALUES ( "
									" \"%@\",\"%d\",\"%@\",\"%d\",\"%d\",\"%@\", '%.0f', '%.0f','%.0f', '%.0f', %.0f, '%.0f')",
									SINo, a, @"DATA", a, inputAge, [ECAR55AnnualPremium objectAtIndex:a - 1], round([[RiderMonthlyIncome objectAtIndex:a -1] doubleValue ]),
									round([[RiderSurrenderValueMRA objectAtIndex:a-1] doubleValue ]), round([[RiderSurrenderValue objectAtIndex:a-1] doubleValue ]),
									round([[RiderTPDBegin objectAtIndex:a-1] doubleValue ]),
									round([[RiderTPDEnd objectAtIndex:a-1] doubleValue ]), round([[RiderDistributionCost objectAtIndex:a-1]doubleValue ])] ;
					}
                    
					
					//NSLog(@"%@", QuerySQL);
					if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
						if (sqlite3_step(statement) == SQLITE_DONE) {
							
						}
						sqlite3_finalize(statement);
					}
					
				}
			}
			sqlite3_close(contactDB);
		}
        NSLog(@"--------- ECAR55 end --------");
	}
	
	int tempToAdd = 0;
	
	if (OverallMonthlyIncome.count < [strCovPeriod intValue]) {
		tempToAdd = [strCovPeriod intValue] - OverallMonthlyIncome.count;
		
		for (int i = 0; i < tempToAdd; i ++) {
			[OverallMonthlyIncome addObject:@"0.00"];
			//[OverallFullSurrenderValue addObject:@"0.00"];
		}
	}
    
}

-(double)ReturnBumpModeValue : (NSString *)aagetBumpMode{
    if ([aagetBumpMode isEqualToString:@"S"]) {
        return Bump_SemiAnnual;
    }
    else if ([aagetBumpMode isEqualToString:@"Q"]){
        return Bump_Quarter;
    }
    else if ([aagetBumpMode isEqualToString:@"M"]){
        return Bump_Month;
    }
    else{
        return Bump_Annual;
    }
}

-(double)ReturnBumpModeValue2 : (NSString *)aagetBumpMode{
    if ([aagetBumpMode isEqualToString:@"S"]) {
        return 2.00;
    }
    else if ([aagetBumpMode isEqualToString:@"Q"]){
        return 4.00;
    }
    else if ([aagetBumpMode isEqualToString:@"M"]){
        return 12.00;
    }
    else{
        return 1.00;
    }
}

-(void)InsertToUL_Temp_ECAR60{
	sqlite3_stmt *statement;
    NSString *QuerySQL;
	
	double ECAR60AnnuityRate = 0.00;
	double ECAR60TPDRate = 0.00;
	NSMutableArray *CSVRate = [[NSMutableArray alloc] init ];
	NSMutableArray *ECAR60AnnualPremium = [[NSMutableArray alloc] init ];
	NSMutableArray *RiderMonthlyIncome = [[NSMutableArray alloc] init ];
	NSMutableArray *RiderSurrenderValueBeforeTax = [[NSMutableArray alloc] init ];
	NSMutableArray *RiderSurrenderValue = [[NSMutableArray alloc] init ];
	NSMutableArray *RiderTPDBegin = [[NSMutableArray alloc] init ];
	NSMutableArray *RiderTPDEnd = [[NSMutableArray alloc] init ];
	NSMutableArray *CommissionRate = [[NSMutableArray alloc] init ];
	NSMutableArray *RiderDistributionCost = [[NSMutableArray alloc] init ];
	
	if (ECAR60Exist == TRUE) {
		NSLog(@"--------- ECAR60 begin --------");
		
		if (sqlite3_open([UL_RatesDatabasePath UTF8String], &contactDB) == SQLITE_OK){
			for (int i =1; i <= ([strCovPeriod intValue] > 30 ? 30 : [strCovPeriod intValue]); i++) {
				QuerySQL = [ NSString stringWithFormat:@"Select CSV from ES_sys_Rider_csv where PlanCode = 'ECAR60' "
							"AND PremPayOpt = '%@' AND PolTerm = '%@' AND FromAge = '%d' AND PolYear = '%d' ", ECAR60PaymentTerm, ECAR60RiderTerm, Age, i];
				
				//NSLog(@"%@", QuerySQL);
				if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
					if (sqlite3_step(statement) == SQLITE_ROW) {
						[CSVRate addObject: [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 0)]];
					}
					
					sqlite3_finalize(statement);
				}
				
				QuerySQL = [ NSString stringWithFormat:@"Select Rate from ES_sys_Rider_ECAR60_Comm where  "
							" Year = '%d' AND Premium_Term = '%d' ", i > 7 ? 7 : i, 60 - Age];
				
				if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
					if (sqlite3_step(statement) == SQLITE_ROW) {
						[CommissionRate addObject: [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 0)]];
					}
					
					
					sqlite3_finalize(statement);
				}
				
			}
			
			QuerySQL = [ NSString stringWithFormat:@"Select Rate from ES_sys_Rider_AnnuityPrem where PlanCode = 'ECAR60' "
						"AND PremPayOpt = '%@' AND PolTerm = '%@' AND FromAge = '%d' ", ECAR60PaymentTerm, ECAR60RiderTerm, Age];
			
			if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
				if (sqlite3_step(statement) == SQLITE_ROW) {
					ECAR60AnnuityRate = sqlite3_column_double(statement, 0);
				}
				
				sqlite3_finalize(statement);
			}
			
			QuerySQL = [ NSString stringWithFormat:@"Select Rate from ES_sys_Rider_Prem where PlanCode = 'ECAR60' "
						"AND PremPayOpt = '%@' AND Term = '%@' AND FromAge = '%d' ", ECAR60PaymentTerm, ECAR60RiderTerm, Age];
			
			if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
				if (sqlite3_step(statement) == SQLITE_ROW) {
					ECAR60TPDRate = sqlite3_column_double(statement, 0);
				}
				
				sqlite3_finalize(statement);
			}
			
			
			sqlite3_close(contactDB);
		}
		
		if (CommissionRate.count == 0) {
			NSLog(@"no commission rate");
			return;
		}
		
		if (CSVRate.count == 0) {
			NSLog(@"no csv rate");
			return;
		}
		
		for (int i = 1; i <= ([strCovPeriod intValue] > 30 ? 30 : [strCovPeriod intValue]); i++) {
			if (Age + i <= 60) {
                if (i <= [ECAR60HLoadingTerm intValue] || [ECAR60HLoadingTerm intValue] == 0 ) {
                    double temp = [ECAR60Premium doubleValue] * [self ReturnBumpModeValue2:strBumpMode];
                    [ECAR60AnnualPremium addObject: [NSString stringWithFormat:@"%.2f", temp] ];
                }
				else{
                    [ECAR60AnnualPremium addObject: [NSString stringWithFormat:@"%.2f", ([ECAR60Premium doubleValue] - [ECAR60LoadingPrem doubleValue]) * [self ReturnBumpModeValue2:strBumpMode] ] ];
                }
                
			}
			else{
				[ECAR60AnnualPremium addObject:@"0.00" ];
			}
			
			double NewOverallTotalPremiumPaid = [[OverallTotalPremiumPaid objectAtIndex: i -1 ] doubleValue ] + [[ECAR60AnnualPremium objectAtIndex:i-1] doubleValue ];
			[OverallTotalPremiumPaid replaceObjectAtIndex:i - 1 withObject:[NSString stringWithFormat:@"%f", NewOverallTotalPremiumPaid]];
			
			if (Age + i ==  60) {
				[RiderMonthlyIncome addObject: ECAR60SumAssured ];
			}
			else if (Age + i > 60) {
				[RiderMonthlyIncome addObject: [NSString stringWithFormat:@"%f", [ECAR60SumAssured doubleValue ] * 12 ]];
			}
			else{
				[RiderMonthlyIncome addObject:@"0.00" ];
			}
			
			[OverallMonthlyIncome addObject:[RiderMonthlyIncome objectAtIndex:i - 1]];
			
			double tempS = [[CSVRate objectAtIndex:i -1] doubleValue ] * [ECAR60SumAssured doubleValue ]/100.00;
			double tempRetPrem = ECAR60AnnuityRate * [ECAR60Premium doubleValue]/100.00;
			double minRetention = 0.00;
			
			if (tempRetPrem > 3000) {
				tempRetPrem = 3000;
			}
			
			if (Age + i <= 60) {
				minRetention = tempRetPrem * i;
			}
			else{
				minRetention = 0.00;
			}
			
			//-----------------
			//[RiderSurrenderValueMRA addObject:[NSString stringWithFormat:@"%f", tempS - minRetention < 0.00 ? 0 : tempS - minRetention]];
            [RiderSurrenderValueBeforeTax addObject:[NSString stringWithFormat:@"%f", tempS ]];
			[RiderSurrenderValue addObject:[NSString stringWithFormat:@"%f", Age + i >= 55 ? tempS : tempS * 0.92]];
			
			double NewOverallFullSurrenderValue = [[OverallFullSurrenderValue objectAtIndex: i -1 ] doubleValue ] +
			[[RiderSurrenderValue objectAtIndex:i-1] doubleValue ];
			[OverallFullSurrenderValue replaceObjectAtIndex:i - 1 withObject:[NSString stringWithFormat:@"%f", NewOverallFullSurrenderValue]];
			
			//------------
			double RiderTPD;
			if (Age + i <= 60) {
				RiderTPD = (ECAR60TPDRate * [ECAR60SumAssured doubleValue]/100.00) * ((pow(1.035, i ) - 1)/0.035) ;
				
			}
			else{
				RiderTPD = [ECAR60SumAssured doubleValue ] * 6 * (101 - (Age + i));
			}
			
			
			[RiderTPDBegin addObject:[NSString stringWithFormat:@"%f", RiderTPD]];
			double NewOverallTPDBegin = [[OverallTPDBegin objectAtIndex: i -1 ] doubleValue ] + [[RiderTPDBegin objectAtIndex:i-1] doubleValue ];
			[OverallTPDBegin replaceObjectAtIndex:i - 1 withObject:[NSString stringWithFormat:@"%f", NewOverallTPDBegin]];
			
			double RiderTPDEOF;
			if (Age + i < 60) {
				RiderTPDEOF = (ECAR60TPDRate * [ECAR60SumAssured doubleValue]/100.00) * 1.035 * (pow(1.035, i) - 1)/0.035 ;
			}
			else{
				RiderTPDEOF = [ECAR60SumAssured doubleValue ] * 6 * (100 - (Age + i));
			}
			
			[RiderTPDEnd addObject:[NSString stringWithFormat:@"%f", RiderTPDEOF]];
			double NewOverallTPDEOY = [[OverallTPDEOY objectAtIndex: i -1 ] doubleValue ] + [[RiderTPDEnd objectAtIndex:i-1] doubleValue ];
			[OverallTPDEOY replaceObjectAtIndex:i - 1 withObject:[NSString stringWithFormat:@"%f", NewOverallTPDEOY]];
			
			[RiderDistributionCost addObject:[NSString stringWithFormat:@"%f", [[ECAR60AnnualPremium objectAtIndex:i - 1] doubleValue ] * [[CommissionRate objectAtIndex:i - 1] doubleValue ]/100.00]];
			
			
		}
		
		int inputAge;
		if (sqlite3_open([databasePath UTF8String], &contactDB) == SQLITE_OK){
			
			for (int a= 1; a<= ([strCovPeriod intValue] > 30 ? 30 : [strCovPeriod intValue]); a++) {
				if (Age >= 0){
					inputAge = Age + a;
					
                    double tempBull = round([[BullSurrender objectAtIndex:a-1]doubleValue ]);

                    
					if (a == 1) {
						QuerySQL = [NSString stringWithFormat: @"Insert INTO UL_Temp_ECAR60 (\"SINO\", \"SeqNo\", \"DataType\",\"col0_1\",\"col0_2\",\"col1\",\"col2\", "
									"'col3','col4','col5','col6','col7', 'col8', 'col9') VALUES ( "
									" \"%@\",\"%d\",\"%@\",\"%d\",\"%d\",\"%@\", '%.0f', '%.0f','%.0f', '%.0f', %.0f, '%.0f', '%f', '%@')",
									SINo, a, @"DATA", a, inputAge,
                                    tempBull >= 0.00 ? [ECAR60AnnualPremium objectAtIndex:a - 1] : @"-1",
                                    tempBull >= 0.00 ? round([[RiderMonthlyIncome objectAtIndex:a -1] doubleValue ]) : -1,
									tempBull >= 0.00 ? round([[RiderSurrenderValueBeforeTax objectAtIndex:a-1] doubleValue ]) : -1,
                                    tempBull >= 0.00 ? round([[RiderSurrenderValue objectAtIndex:a-1] doubleValue]) : -1,
									tempBull >= 0.00 ? round([[RiderTPDBegin objectAtIndex:a-1] doubleValue ]) : -1,
									tempBull >= 0.00 ? round([[RiderTPDEnd objectAtIndex:a-1] doubleValue ]) : -1,
                                    tempBull >= 0.00 ? round([[RiderDistributionCost objectAtIndex:a-1]doubleValue ]) : -1,
                                    tempBull >= 0.00 ? ECAR60AnnuityRate : -1,
                                    tempBull >= 0.00 ? ECAR60Premium : @"-1"] ;
					}
					else{
						QuerySQL = [NSString stringWithFormat: @"Insert INTO UL_Temp_ECAR60 (\"SINO\", \"SeqNo\", \"DataType\",\"col0_1\",\"col0_2\",\"col1\",\"col2\", "
									"'col3','col4','col5','col6','col7') VALUES ( "
									" \"%@\",\"%d\",\"%@\",\"%d\",\"%d\",\"%@\", '%.0f', '%.0f','%.0f', '%.0f', %.0f, '%.0f')",
									SINo, a, @"DATA", a, inputAge,
                                    tempBull >= 0.00 ? [ECAR60AnnualPremium objectAtIndex:a - 1] : @"-1",
                                    tempBull >= 0.00 ? round([[RiderMonthlyIncome objectAtIndex:a -1] doubleValue ]) : -1,
									tempBull >= 0.00 ? round([[RiderSurrenderValueBeforeTax objectAtIndex:a-1] doubleValue ]) : -1,
                                    tempBull >= 0.00 ? round([[RiderSurrenderValue objectAtIndex:a-1] doubleValue ]) : -1,
									tempBull >= 0.00 ? round([[RiderTPDBegin objectAtIndex:a-1] doubleValue ]) : -1,
									tempBull >= 0.00 ? round([[RiderTPDEnd objectAtIndex:a-1] doubleValue ]) : -1,
                                    tempBull >= 0.00 ? round([[RiderDistributionCost objectAtIndex:a-1]doubleValue ]) : -1] ;
					}
					
					
					//NSLog(@"%@", QuerySQL);
					if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
						if (sqlite3_step(statement) == SQLITE_DONE) {
							
						}
						sqlite3_finalize(statement);
					}
					
				}
			}
			sqlite3_close(contactDB);
		}
		NSLog(@"--------- ECAR60 end --------");
	}
	
	int tempToAdd = 0;
	
	if (OverallMonthlyIncome.count < [strCovPeriod intValue]) {
		tempToAdd = [strCovPeriod intValue] - OverallMonthlyIncome.count;
		
		for (int i = 0; i < tempToAdd; i ++) {
			[OverallMonthlyIncome addObject:@"0.00"];
			//[OverallFullSurrenderValue addObject:@"0.00"];
		}
	}
    
    statement = Nil;
    QuerySQL = Nil;
    CSVRate = Nil;
    ECAR60AnnualPremium = Nil;
    RiderMonthlyIncome = Nil;
    RiderSurrenderValueBeforeTax = Nil;
    RiderSurrenderValue = Nil;
    RiderTPDBegin = Nil;
    RiderTPDEnd = Nil;
    CommissionRate = Nil;
    RiderDistributionCost = Nil;
	
}



-(void)getECAR6{
	sqlite3_stmt *statement;
    NSString *QuerySQL;
	
	if (sqlite3_open([databasePath UTF8String], &contactDB) == SQLITE_OK){
		QuerySQL = [ NSString stringWithFormat:@"Select  RiderTerm,RiderDesc, SumAssured, "
					" coalesce(nullif(hloading, ''), '0' ) as Hloading, HloadingTerm, "
					" replace(HloadingPct, '(null)', '0') as HloadingPct, HloadingPctTerm, Premium, paymentTerm, "
					" ReinvestGYI from UL_rider_details where \"sino\" = \"%@\" AND ridercode = 'ECAR6' ", SINo];
		//NSLog(@"%@", QuerySQL);
		if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
			if (sqlite3_step(statement) == SQLITE_ROW) {
				ECAR6Exist = TRUE;
				ECAR6RiderTerm = [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 0)];
				ECAR6RiderDesc = [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 1)];
				ECAR6SumAssured = [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 2)];
				const char *temp = (const char*)sqlite3_column_text(statement, 3);
				ECAR6HLoading = temp == NULL ? Nil : [[NSString alloc] initWithUTF8String:(const char *)temp];
				ECAR6HLoadingTerm = [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 4)];
				ECAR6HLoadingPct = [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 5)];
				ECAR6HLoadingPctTerm = [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 6)];
				ECAR6Premium = [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 7)];
				ECAR6PaymentTerm = [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 8)];
				ECAR6ReinvestGYI = [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 9)];
				
				ECAR6LoadingPremium =[NSString stringWithFormat:@"%f", (([getOccLoading doubleValue] + [ECAR6HLoading doubleValue]) * [ECAR6SumAssured doubleValue]/1000.00)]; //added on 26/11/13
				
			}
			else
			{
				ECAR6Exist = FALSE;
			}
			
			sqlite3_finalize(statement);
		}
		
		sqlite3_close(contactDB);
	}
}


-(void)InsertToUL_Temp_ECAR6{
	sqlite3_stmt *statement;
    NSString *QuerySQL;
	
	
	NSMutableArray *ECAR6TPDRate = [[NSMutableArray alloc] init ];
	NSMutableArray *ECAR6TPDRateEOY = [[NSMutableArray alloc] init ];
	NSMutableArray *ECAR6AccTPD = [[NSMutableArray alloc] init ];
	NSMutableArray *ECAR6AccTPDEOY = [[NSMutableArray alloc] init ];
	NSMutableArray *CSVRate = [[NSMutableArray alloc] init ];
	NSMutableArray *ECAR6AnnualPremium = [[NSMutableArray alloc] init ];
	NSMutableArray *RiderYearlyIncome = [[NSMutableArray alloc] init ];
	NSMutableArray *RiderSurrenderValue = [[NSMutableArray alloc] init ];
	NSMutableArray *RiderTPDBegin = [[NSMutableArray alloc] init ];
	NSMutableArray *RiderTPDEnd = [[NSMutableArray alloc] init ];
	NSMutableArray *CommissionRate = [[NSMutableArray alloc] init ];
	NSMutableArray *RiderDistributionCost = [[NSMutableArray alloc] init ];
	
	
	
	if (ECAR6Exist == TRUE) {
		NSLog(@"--------- ECAR6 begin --------");
		
		if (sqlite3_open([UL_RatesDatabasePath UTF8String], &contactDB) == SQLITE_OK){
			for (int i =1; i <= ([strCovPeriod intValue] > 30 ? 30 : [strCovPeriod intValue]); i++) {
				QuerySQL = [ NSString stringWithFormat:@"Select CSV from ES_sys_Rider_csv where PlanCode = 'ECAR' "
							"AND GYI_GMI_Year = '6' AND PolTerm = '%@' AND FromAge = '%d' AND PolYear = '%d' ", ECAR6RiderTerm, Age, i];
				
				//NSLog(@"%@", QuerySQL);
				if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
					if (sqlite3_step(statement) == SQLITE_ROW) {
						[CSVRate addObject: [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 0)]];
					}
					
					
					sqlite3_finalize(statement);
				}
				
				int max;
				if (i > 7) {
					max = 7;
				}
				else{
					max = i;
				}
				
				QuerySQL = [ NSString stringWithFormat:@"Select Rate from ES_sys_Rider_commission where  "
							" PolYear = '%d' AND RiderTerm = '%d' ", max, 6];
				
				if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
					if (sqlite3_step(statement) == SQLITE_ROW) {
						[CommissionRate addObject: [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 0)]];
					}
					
					
					sqlite3_finalize(statement);
				}
				
				QuerySQL = [ NSString stringWithFormat:@"Select Rate from ES_sys_Rider_DeathTPD where CP_Start_Year = '6' AND  "
							" Policy_Year = '%d' AND Policy_Term = '%@' ", i, ECAR6RiderTerm];
				
				//NSLog(@"%@", QuerySQL);
				
				if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
					if (sqlite3_step(statement) == SQLITE_ROW) {
						[ECAR6TPDRate addObject: [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 0)]];
					}
					
					
					sqlite3_finalize(statement);
				}
				
				QuerySQL = [ NSString stringWithFormat:@"Select Rate from ES_sys_Rider_DeathTPD_EOY where CP_Start_Year = '6' AND  "
							" Policy_Year = '%d' AND Policy_Term = '%@' ", i, ECAR6RiderTerm];
				
				if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
					if (sqlite3_step(statement) == SQLITE_ROW) {
						[ECAR6TPDRateEOY addObject: [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 0)]];
					}
					
					
					sqlite3_finalize(statement);
				}
				
			}
			
			sqlite3_close(contactDB);
		}
		
		
		if (CommissionRate.count == 0) {
			NSLog(@"no commission rate");
			return;
		}
		
		if (ECAR6TPDRate.count == 0) {
			NSLog(@"no tpd rate");
			return;
		}
		
		if (ECAR6TPDRateEOY.count == 0) {
			NSLog(@"no tpd eoy rate");
			return;
		}
		
		if (CSVRate.count == 0) {
			NSLog(@"no tpd eoy rate");
			return;
		}
		
		NSString *tempECAR6AnnualPrem;
        
		if ([strBumpMode isEqualToString:@"A"]) {
			tempECAR6AnnualPrem = ECAR6Premium;
		}
		else if ([strBumpMode isEqualToString:@"S"]) {
			tempECAR6AnnualPrem = [NSString stringWithFormat:@"%f", [ECAR6Premium doubleValue]/0.5 ];
		}
		else if ([strBumpMode isEqualToString:@"Q"]) {
			tempECAR6AnnualPrem = [NSString stringWithFormat:@"%f", [ECAR6Premium doubleValue]/0.25];
		}
		else {
			tempECAR6AnnualPrem = [NSString stringWithFormat:@"%f", [ECAR6Premium doubleValue]/0.0833333];
		}
		
		for (int i = 1; i <= [ECAR6RiderTerm intValue]; i++) {
			if (i <= [ECAR6PaymentTerm intValue ]) {
				//[ECAR6AnnualPremium addObject: tempECAR6AnnualPrem ];
				if (i <= [ECAR6HLoadingTerm intValue] || [ECAR6HLoadingTerm intValue] == 0) {
					[ECAR6AnnualPremium addObject: tempECAR6AnnualPrem ];
				}
				else{
					[ECAR6AnnualPremium addObject: [NSString stringWithFormat:@"%f", [tempECAR6AnnualPrem doubleValue] - [ECAR6LoadingPremium doubleValue]]];
				}
			}
			else{
				[ECAR6AnnualPremium addObject:@"0.00" ];
			}
			
			double NewOverallTotalPremiumPaid = [[OverallTotalPremiumPaid objectAtIndex: i -1 ] doubleValue ] + [[ECAR6AnnualPremium objectAtIndex:i-1] doubleValue ];
			[OverallTotalPremiumPaid replaceObjectAtIndex:i - 1 withObject:[NSString stringWithFormat:@"%f", NewOverallTotalPremiumPaid]];
			
			
			if (i >=  6) {
				[RiderYearlyIncome addObject: ECAR6SumAssured ];
			}
			else{
				[RiderYearlyIncome addObject:@"0.00" ];
			}
			
			double NewOverallTotalYearlyIncome = [[OverallYearlyIncome objectAtIndex: i -1 ] doubleValue ] + [[RiderYearlyIncome objectAtIndex:i-1] doubleValue ];
			[OverallYearlyIncome replaceObjectAtIndex:i - 1 withObject:[NSString stringWithFormat:@"%f", NewOverallTotalYearlyIncome]];
			//[OverallYearlyIncome addObject:[RiderYearlyIncome objectAtIndex: i - 1]];
			
			// ---------------
			double tempS = [[CSVRate objectAtIndex:i -1] doubleValue ] * [ECAR6SumAssured doubleValue ]/1000.00;
			[RiderSurrenderValue addObject:[NSString stringWithFormat:@"%f", tempS]];
			
			double NewOverallFullSurrenderValue = [[OverallFullSurrenderValue objectAtIndex: i -1 ] doubleValue ] +
			[[RiderSurrenderValue objectAtIndex:i-1] doubleValue ];
			[OverallFullSurrenderValue replaceObjectAtIndex:i - 1 withObject:[NSString stringWithFormat:@"%f", NewOverallFullSurrenderValue]];
			
			//-----------------
			double RiderTPD;
			
			RiderTPD = [ECAR6SumAssured doubleValue ]  * [[ECAR6TPDRate objectAtIndex:i-1] doubleValue];
			
			[RiderTPDBegin addObject:[NSString stringWithFormat:@"%f", RiderTPD]];
			double NewOverallTPDBegin = [[OverallTPDBegin objectAtIndex: i -1 ] doubleValue ] + [[RiderTPDBegin objectAtIndex:i-1] doubleValue ];
			[OverallTPDBegin replaceObjectAtIndex:i - 1 withObject:[NSString stringWithFormat:@"%f", NewOverallTPDBegin]];
			//-------------
			double RiderTPDEOY;
			
			RiderTPDEOY = [ECAR6SumAssured doubleValue ] * [[ECAR6TPDRateEOY objectAtIndex:i-1] doubleValue]; ;
			
			
			[RiderTPDEnd addObject:[NSString stringWithFormat:@"%f", RiderTPDEOY]];
			double NewOverallTPDEOY = [[OverallTPDEOY objectAtIndex: i -1 ] doubleValue ] + [[RiderTPDEnd objectAtIndex:i-1] doubleValue ];
			[OverallTPDEOY replaceObjectAtIndex:i - 1 withObject:[NSString stringWithFormat:@"%f", NewOverallTPDEOY]];
			
			// --------
			double RiderAccTPD = 0.00;
			if (Age + i <= 65) {
				double eee = 0.00;
				
				eee = RiderTPD * 3;
				
				if (eee + RiderTPD <= [self TPDLimit:Age + i - 1] ) {
					RiderAccTPD = RiderTPD * 3;
				}
				else{
					RiderAccTPD = [self TPDLimit:Age + i - 1] - RiderTPD;
					if (RiderAccTPD < 0) {
						RiderAccTPD = 0.00;
					}
				}
			}
			else{
				RiderAccTPD = 0.00;
			}
			
			[ECAR6AccTPD addObject:[NSString stringWithFormat:@"%f", RiderAccTPD]];
			
            
			
			if (ECAR1Exist == TRUE) {
				double ReportAddTPDBegin = 0.00;
				if (Age + i <= 65) { // for summary page only ----- ~~
					double eee = 0.00;
					double ECAR1RiderAddTPD = [[OverallAddTPDBegin objectAtIndex:i - 1] doubleValue]/3.00;
					double tempECAR1AndBasic = [[OverallTPDBegin objectAtIndex:i - 1]  doubleValue] - RiderTPD;
					
					if (ECAR1Exist == TRUE) {
						eee = RiderTPD * 3 + ECAR1RiderAddTPD * 3;
					}
					else{
						eee = RiderTPD * 3;
					}
					
					if (eee + RiderTPD + tempECAR1AndBasic <= [self TPDLimit:Age + i - 1] ) {
						ReportAddTPDBegin = eee;
					}
					else{
						ReportAddTPDBegin = [self TPDLimit:Age + i - 1] - (RiderTPD + tempECAR1AndBasic)  ;
						if (ReportAddTPDBegin < 0) {
							ReportAddTPDBegin = 0.00;
						}
					}
				}
				else{
					ReportAddTPDBegin = 0.00;
				}
				// ------------------ ~~
				
				[OverallAddTPDBegin replaceObjectAtIndex:i - 1 withObject:[NSString stringWithFormat:@"%f", ReportAddTPDBegin]];
			}
			else{
				double NewOverallAddTPDBegin = [[OverallAddTPDBegin objectAtIndex: i -1 ] doubleValue ] + [[ECAR6AccTPD objectAtIndex:i-1] doubleValue ];
				[OverallAddTPDBegin replaceObjectAtIndex:i - 1 withObject:[NSString stringWithFormat:@"%f", NewOverallAddTPDBegin]];
				//[OverallAddTPDBegin addObject:[ECAR6AccTPD objectAtIndex: i -1]];
			}
			
			
			
			//------
			double RiderAccTPD_EOY = 0.00;
			if (Age + i <= 64) {
				double fff = RiderTPDEOY * 3;
				if (fff + RiderTPDEOY <= [self TPDLimit:Age + i] ) {
					RiderAccTPD_EOY = RiderTPDEOY * 3; ;
				}
				else{
					RiderAccTPD_EOY = [self TPDLimit:Age + i] - RiderTPDEOY ;
					if (RiderAccTPD_EOY <= 0) {
						RiderAccTPD_EOY = 0.00;
					}
				}
			}
			else{
				RiderAccTPD_EOY = 0.00;
			}
			
			[ECAR6AccTPDEOY addObject:[NSString stringWithFormat:@"%f", RiderAccTPD_EOY]];
			
			if (ECAR1Exist == TRUE) {
				double ReportAddTPDEOY = 0.00;
				if (Age + i <= 65) { // for summary page only ----- ~~
					double RiderAccTPD_EOY = 0.00;
					double ECAR1RiderAddTPDEOY = [[OverallAddTPDEOY objectAtIndex:i - 1] doubleValue]/3.00;
					double tempECAR1AndBasicEOY = [[OverallTPDEOY objectAtIndex:i - 1]  doubleValue] - RiderTPDEOY;
					
					if (ECAR1Exist == TRUE) {
						RiderAccTPD_EOY = RiderTPDEOY * 3 + ECAR1RiderAddTPDEOY * 3;
					}
					else{
						RiderAccTPD_EOY = RiderTPDEOY * 3;
					}
					
					if (RiderAccTPD_EOY + RiderTPDEOY + tempECAR1AndBasicEOY <= [self TPDLimit:Age + i] ) {
						ReportAddTPDEOY = RiderAccTPD_EOY;
					}
					else{
						ReportAddTPDEOY = [self TPDLimit:Age + i - 1] - (RiderTPDEOY + tempECAR1AndBasicEOY)  ;
						if (ReportAddTPDEOY < 0) {
							ReportAddTPDEOY = 0.00;
						}
					}
				}
				else{
					ReportAddTPDEOY = 0.00;
				}
				// ------------------ ~~
				
				[OverallAddTPDEOY replaceObjectAtIndex:i - 1 withObject:[NSString stringWithFormat:@"%f", ReportAddTPDEOY]];
			}
			else{
				double NewOverallAccTPDEOY = [[OverallAddTPDEOY objectAtIndex: i -1 ] doubleValue ] + [[ECAR6AccTPDEOY objectAtIndex:i-1] doubleValue ];
				[OverallAddTPDEOY replaceObjectAtIndex:i - 1 withObject:[NSString stringWithFormat:@"%f", NewOverallAccTPDEOY]];
				//[OverallAddTPDEOY addObject:[ECAR6AccTPDEOY objectAtIndex: i - 1]];
			}
            
			
			
			
			//----------
			
			[RiderDistributionCost addObject:[NSString stringWithFormat:@"%f", [[ECAR6AnnualPremium objectAtIndex:i - 1] doubleValue ] * [[CommissionRate objectAtIndex:i - 1] doubleValue ]/100.00]];
			
			
		}
		
		int inputAge;
		if (sqlite3_open([databasePath UTF8String], &contactDB) == SQLITE_OK){
			for (int a= 1; a<=[ECAR6RiderTerm intValue]; a++) {
				if (Age >= 0){
					inputAge = Age + a;
                    
                    double tempBull = round([[BullSurrender objectAtIndex:a-1]doubleValue ]);
					
					QuerySQL = [NSString stringWithFormat: @"Insert INTO UL_Temp_ECAR6 (\"SINO\", \"SeqNo\", \"DataType\",\"col0_1\",\"col0_2\",\"col1\",\"col2\", "
								"'col3','col4','col5','col6','col7','col8') VALUES ( "
								" \"%@\",\"%d\",\"%@\",\"%d\",\"%d\",\"%@\", '%.0f', '%.0f','%.0f', '%.0f', '%.0f', '%.0f', '%.0f')",
								SINo, a, @"DATA", a, inputAge,
                                tempBull >= 0 ? [ECAR6AnnualPremium objectAtIndex:a - 1] : @"-1",
                                tempBull >= 0 ? round([[RiderYearlyIncome objectAtIndex:a -1] doubleValue]) : -1,
								tempBull >= 0 ? round([[RiderSurrenderValue objectAtIndex:a-1] doubleValue]) : -1,
                                tempBull >= 0 ? round([[RiderTPDBegin objectAtIndex:a-1] doubleValue]) : -1,
								tempBull >= 0 ? round([[RiderTPDEnd objectAtIndex:a-1] doubleValue]) : -1,
                                tempBull >= 0 ? round([[ECAR6AccTPD objectAtIndex:a-1] doubleValue]) : -1,
								tempBull >= 0 ? round([[ECAR6AccTPDEOY objectAtIndex:a-1] doubleValue]) : -1,
                                tempBull >= 0 ? round([[RiderDistributionCost objectAtIndex:a-1] doubleValue]) : -1];
					
					//NSLog(@"%@", QuerySQL);
					if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
						if (sqlite3_step(statement) == SQLITE_DONE) {
							
						}
						sqlite3_finalize(statement);
					}
					
				}
			}
			sqlite3_close(contactDB);
		}
		NSLog(@"--------- ECAR6 end --------");
	}
	
	int tempToAdd = 0;
	
	if (OverallAddTPDBegin.count < [strCovPeriod intValue]) {
		tempToAdd = [strCovPeriod intValue] - OverallAddTPDBegin.count;
		
		for (int i = 0; i < tempToAdd; i ++) {
			[OverallAddTPDBegin addObject:@"0.00"];
			[OverallAddTPDEOY addObject:@"0.00"];
			[OverallYearlyIncome addObject:@"0.00"];
		}
	}
    
    ECAR6TPDRate = Nil;
    ECAR6TPDRateEOY = Nil;
    ECAR6AccTPD = Nil;
    ECAR6AccTPDEOY = Nil;
    CSVRate = Nil;
    ECAR6AnnualPremium = Nil;
    RiderYearlyIncome = Nil;
    RiderSurrenderValue = Nil;
    RiderTPDBegin = Nil;
    RiderTPDEnd = Nil;
    CommissionRate = Nil;
    RiderDistributionCost = Nil;
	
	
}

-(void)getECAR1{
	sqlite3_stmt *statement;
    NSString *QuerySQL;
	
	if (sqlite3_open([databasePath UTF8String], &contactDB) == SQLITE_OK){
		QuerySQL = [ NSString stringWithFormat:@"Select  RiderTerm,RiderDesc, SumAssured, "
					" coalesce(nullif(hloading, ''), '0' ) as Hloading, HloadingTerm, "
					" replace(HloadingPct, '(null)', '0') as HloadingPct, HloadingPctTerm, Premium, paymentTerm, "
					" ReinvestGYI from UL_rider_details where \"sino\" = \"%@\" AND ridercode = 'ECAR' ", SINo];
		//NSLog(@"%@", QuerySQL);
		if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
			if (sqlite3_step(statement) == SQLITE_ROW) {
				ECAR1Exist = TRUE;
				ECAR1RiderTerm = [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 0)];
				ECAR1RiderDesc = [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 1)];
				ECAR1SumAssured = [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 2)];
				const char *temp = (const char*)sqlite3_column_text(statement, 3);
				ECAR1HLoading = temp == NULL ? Nil : [[NSString alloc] initWithUTF8String:(const char *)temp];
				ECAR1HLoadingTerm = [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 4)];
				ECAR1HLoadingPct = [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 5)];
				ECAR1HLoadingPctTerm = [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 6)];
				ECAR1Premium = [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 7)];
				ECAR1PaymentTerm = [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 8)];
				ECAR1ReinvestGYI = [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 9)];
				
				ECAR1LoadingPremium =[NSString stringWithFormat:@"%f", (([getOccLoading doubleValue] + [ECAR1HLoading doubleValue]) * [ECAR1SumAssured doubleValue]/1000.00)]; //added on 26/11/13
				
			}
			else{
				ECAR1Exist = FALSE;
			}
			sqlite3_finalize(statement);
		}
		
		sqlite3_close(contactDB);
	}
}

-(void)InsertToUL_Temp_ECAR1{
	sqlite3_stmt *statement;
    NSString *QuerySQL;
	
    
	NSMutableArray *ECAR1TPDRate = [[NSMutableArray alloc] init ];
	NSMutableArray *ECAR1TPDRateEOY = [[NSMutableArray alloc] init ];
	NSMutableArray *ECAR1AccTPD = [[NSMutableArray alloc] init ];
	NSMutableArray *ECAR1AccTPDEOY = [[NSMutableArray alloc] init ];
	NSMutableArray *CSVRate = [[NSMutableArray alloc] init ];
	NSMutableArray *ECAR1AnnualPremium = [[NSMutableArray alloc] init ];
	NSMutableArray *RiderYearlyIncome = [[NSMutableArray alloc] init ];
	NSMutableArray *RiderSurrenderValue = [[NSMutableArray alloc] init ];
	NSMutableArray *RiderTPDBegin = [[NSMutableArray alloc] init ];
	NSMutableArray *RiderTPDEnd = [[NSMutableArray alloc] init ];
	NSMutableArray *CommissionRate = [[NSMutableArray alloc] init ];
	NSMutableArray *RiderDistributionCost = [[NSMutableArray alloc] init ];
	
	
	if (ECAR1Exist == TRUE) {
		NSLog(@"--------- ECAR1 begin --------");
		
		if (sqlite3_open([UL_RatesDatabasePath UTF8String], &contactDB) == SQLITE_OK){
			for (int i =1; i <= ([strCovPeriod intValue] > 30 ? 30 : [strCovPeriod intValue]); i++) {
				QuerySQL = [ NSString stringWithFormat:@"Select CSV from ES_sys_Rider_csv where PlanCode = 'ECAR' "
							"AND GYI_GMI_Year = '1' AND PolTerm = '%@' AND FromAge = '%d' AND PolYear = '%d' ", ECAR1RiderTerm, Age, i];
				
				//NSLog(@"%@", QuerySQL);
				if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
					if (sqlite3_step(statement) == SQLITE_ROW) {
						[CSVRate addObject: [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 0)]];
					}
					
					
					sqlite3_finalize(statement);
				}
				
				int max;
				if (i > 7) {
					max = 7;
				}
				else{
					max = i;
				}
				
				QuerySQL = [ NSString stringWithFormat:@"Select Rate from ES_sys_Rider_commission where  "
							" PolYear = '%d' AND RiderTerm = '%d' ", max, 6];
				
				if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
					if (sqlite3_step(statement) == SQLITE_ROW) {
						[CommissionRate addObject: [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 0)]];
					}
					
					
					sqlite3_finalize(statement);
				}
				
				QuerySQL = [ NSString stringWithFormat:@"Select Rate from ES_sys_Rider_DeathTPD where CP_Start_Year = '1' AND  "
							" Policy_Year = '%d' AND Policy_Term = '%@' ", i, ECAR1RiderTerm];
				
				//NSLog(@"%@", QuerySQL);
				
				if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
					if (sqlite3_step(statement) == SQLITE_ROW) {
						[ECAR1TPDRate addObject: [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 0)]];
					}
					
					
					sqlite3_finalize(statement);
				}
				
				QuerySQL = [ NSString stringWithFormat:@"Select Rate from ES_sys_Rider_DeathTPD_EOY where CP_Start_Year = '1' AND  "
							" Policy_Year = '%d' AND Policy_Term = '%@' ", i, ECAR1RiderTerm];
				
				if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
					if (sqlite3_step(statement) == SQLITE_ROW) {
						[ECAR1TPDRateEOY addObject: [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 0)]];
					}
					
					
					sqlite3_finalize(statement);
				}
				
			}
			
			sqlite3_close(contactDB);
		}
		
		
		if (CommissionRate.count == 0) {
			NSLog(@"no commission rate");
			return;
		}
		
		if (ECAR1TPDRate.count == 0) {
			NSLog(@"no tpd rate");
			return;
		}
		
		if (ECAR1TPDRateEOY.count == 0) {
			NSLog(@"no tpd eoy rate");
			return;
		}
		
		if (CSVRate.count == 0) {
			NSLog(@"no tpd eoy rate");
			return;
		}
		
		NSString *tempECAR1AnnualPrem;
        //NSString *ECAR1OverallPrem = [NSString stringWithFormat:@"%f", [ECAR1Premium doubleValue] + [ECAR1LoadingPremium doubleValue]];
        NSString *ECAR1OverallPrem = [NSString stringWithFormat:@"%.2f", [ECAR1Premium doubleValue]];
		if ([strBumpMode isEqualToString:@"A"]) {
			tempECAR1AnnualPrem = ECAR1OverallPrem;
		}
		else if ([strBumpMode isEqualToString:@"S"]) {
            tempECAR1AnnualPrem = [NSString stringWithFormat:@"%f", [ECAR1OverallPrem doubleValue]/0.5 ];
		}
		else if ([strBumpMode isEqualToString:@"Q"]) {
			tempECAR1AnnualPrem = [NSString stringWithFormat:@"%f", [ECAR1OverallPrem doubleValue]/0.25];
		}
		else {
			tempECAR1AnnualPrem = [NSString stringWithFormat:@"%f", [ECAR1OverallPrem doubleValue]/0.0833333];
		}
		
		for (int i = 1; i <= [ECAR1RiderTerm intValue]; i++) {
			if (i <= [ECAR1PaymentTerm intValue ]) {
				if (i <= [ECAR1HLoadingTerm intValue] || [ECAR1PaymentTerm intValue ] == 0  ) {
					[ECAR1AnnualPremium addObject: tempECAR1AnnualPrem ];
				}
				else{
					[ECAR1AnnualPremium addObject: [NSString stringWithFormat:@"%f", [tempECAR1AnnualPrem doubleValue] - [ECAR1LoadingPremium doubleValue]]];
				}
				
			}
			else{
				[ECAR1AnnualPremium addObject:@"0.00" ];
			}
			
			double NewOverallTotalPremiumPaid = [[OverallTotalPremiumPaid objectAtIndex: i -1 ] doubleValue ] + [[ECAR1AnnualPremium objectAtIndex:i-1] doubleValue ];
			[OverallTotalPremiumPaid replaceObjectAtIndex:i - 1 withObject:[NSString stringWithFormat:@"%f", NewOverallTotalPremiumPaid]];
			
			
			if (Age + i >=  1) {
				[RiderYearlyIncome addObject: ECAR1SumAssured ];
			}
			else{
				[RiderYearlyIncome addObject:@"0.00" ];
			}
			
			[OverallYearlyIncome addObject:[RiderYearlyIncome objectAtIndex: i - 1]];
			
			// ---------------
			double tempS = [[CSVRate objectAtIndex:i -1] doubleValue ] * [ECAR1SumAssured doubleValue ]/1000.00;
			[RiderSurrenderValue addObject:[NSString stringWithFormat:@"%f", tempS]];
			
			double NewOverallFullSurrenderValue = [[OverallFullSurrenderValue objectAtIndex: i -1 ] doubleValue ] +
            [[RiderSurrenderValue objectAtIndex:i-1] doubleValue ];
			[OverallFullSurrenderValue replaceObjectAtIndex:i - 1 withObject:[NSString stringWithFormat:@"%f", NewOverallFullSurrenderValue]];
            
			//-----------------
			double RiderTPD;
            
			RiderTPD = [ECAR1SumAssured doubleValue ]  * [[ECAR1TPDRate objectAtIndex:i-1] doubleValue];
			
			[RiderTPDBegin addObject:[NSString stringWithFormat:@"%f", RiderTPD]];
			double NewOverallTPDBegin = [[OverallTPDBegin objectAtIndex: i -1 ] doubleValue ] + [[RiderTPDBegin objectAtIndex:i-1] doubleValue ];
			[OverallTPDBegin replaceObjectAtIndex:i - 1 withObject:[NSString stringWithFormat:@"%f", NewOverallTPDBegin]];
			//-------------
			double RiderTPDEOY;
            
			RiderTPDEOY = [ECAR1SumAssured doubleValue ] * [[ECAR1TPDRateEOY objectAtIndex:i-1] doubleValue]; ;
            
			
			[RiderTPDEnd addObject:[NSString stringWithFormat:@"%f", RiderTPDEOY]];
			double NewOverallTPDEOY = [[OverallTPDEOY objectAtIndex: i -1 ] doubleValue ] + [[RiderTPDEnd objectAtIndex:i-1] doubleValue ];
			[OverallTPDEOY replaceObjectAtIndex:i - 1 withObject:[NSString stringWithFormat:@"%f", NewOverallTPDEOY]];
			
			// --------
			double RiderAccTPD = 0.00;
			if (Age + i <= 65) {
				double eee = RiderTPD * 3;
				if (eee + RiderTPD <= [self TPDLimit:Age + i - 1] ) {
					RiderAccTPD = RiderTPD * 3; ;
				}
				else{
					RiderAccTPD = [self TPDLimit:Age + i - 1] - RiderTPD ;
					if (RiderAccTPD <= 0) {
						RiderAccTPD = 0.00;
					}
				}
			}
			else{
				RiderAccTPD = 0.00;
			}
			
			[ECAR1AccTPD addObject:[NSString stringWithFormat:@"%f", RiderAccTPD]];
			//[OverallAddTPDBegin addObject:[ECAR1AccTPD objectAtIndex: i -1]];
			
			// added second step calculation at whole level for summary table for Add Benefit
			double GTBenefit  = BasicSA * [self JuvenilienFactor:Age + i];
			if (RiderAccTPD + RiderTPD + GTBenefit <= [self TPDLimit:Age + i - 1]) {
				[OverallAddTPDBegin addObject:[ECAR1AccTPD objectAtIndex: i -1]];
			}
			else{
				double tempSummaryTableAddBenefit = [self TPDLimit:Age + i - 1] - (GTBenefit + RiderTPD);
				[OverallAddTPDBegin addObject:[NSString stringWithFormat:@"%f", tempSummaryTableAddBenefit ]];
			}
            
			
			//------
			double RiderAccTPD_EOY = 0.00;
			if (Age + i <= 64) {
				double fff = RiderTPDEOY * 3;
				if (fff + RiderTPDEOY <= [self TPDLimit:Age + i] ) {
					RiderAccTPD_EOY = RiderTPDEOY * 3; ;
				}
				else{
					RiderAccTPD_EOY = [self TPDLimit:Age + i] - RiderTPDEOY ;
					if (RiderAccTPD_EOY <= 0) {
						RiderAccTPD_EOY = 0.00;
					}
				}
			}
			else{
				RiderAccTPD_EOY = 0.00;
			}
			
			[ECAR1AccTPDEOY addObject:[NSString stringWithFormat:@"%f", RiderAccTPD_EOY]];
			//[OverallAddTPDEOY addObject:[ECAR1AccTPDEOY objectAtIndex: i - 1]];
			//
			double GTBenefitEnd  = BasicSA * [self JuvenilienFactor:Age + i];
			if (RiderAccTPD_EOY + RiderTPDEOY + GTBenefitEnd <= [self TPDLimit:Age + i - 1]) {
				[OverallAddTPDEOY addObject:[ECAR1AccTPDEOY objectAtIndex: i - 1]];
			}
			else{
				double tempSummaryTableAddBenefit_EOY = [self TPDLimit:Age + i - 1] - (GTBenefitEnd + RiderTPDEOY);
				[OverallAddTPDEOY addObject:[NSString stringWithFormat:@"%f", tempSummaryTableAddBenefit_EOY ]];
			}
			
			//----------
			
			[RiderDistributionCost addObject:[NSString stringWithFormat:@"%f", [[ECAR1AnnualPremium objectAtIndex:i - 1] doubleValue] * [[CommissionRate objectAtIndex:i - 1] doubleValue ]/100.00]];
			
			
		}
		
		int inputAge;
		if (sqlite3_open([databasePath UTF8String], &contactDB) == SQLITE_OK){
			for (int a= 1; a<=[ECAR1RiderTerm intValue]; a++) {
				if (Age >= 0){
					inputAge = Age + a;
					
                    double tempBull = round([[BullSurrender objectAtIndex:a-1]doubleValue ]);
                    
					QuerySQL = [NSString stringWithFormat: @"Insert INTO UL_Temp_ECAR (\"SINO\", \"SeqNo\", \"DataType\",\"col0_1\",\"col0_2\",\"col1\",\"col2\", "
								"'col3','col4','col5','col6','col7','col8') VALUES ( "
								" \"%@\",\"%d\",\"%@\",\"%d\",\"%d\",\"%@\", '%.0f', '%.0f','%.0f', '%.0f', '%.0f', '%.0f', '%.0f')",
								SINo, a, @"DATA", a, inputAge,
                                tempBull >= 0 ? [ECAR1AnnualPremium objectAtIndex:a - 1] : @"-1",
                                tempBull >= 0 ? round([[RiderYearlyIncome objectAtIndex:a -1] doubleValue]) : -1,
								tempBull >= 0 ? round([[RiderSurrenderValue objectAtIndex:a-1] doubleValue]): -1,
                                tempBull >= 0 ? round([[RiderTPDBegin objectAtIndex:a-1] doubleValue]): -1,
								tempBull >= 0 ? round([[RiderTPDEnd objectAtIndex:a-1] doubleValue]): -1,
                                tempBull >= 0 ? round([[ECAR1AccTPD objectAtIndex:a-1] doubleValue]): -1,
								tempBull >= 0 ? round([[ECAR1AccTPDEOY objectAtIndex:a-1] doubleValue]): -1,
                                tempBull >= 0 ? round([[RiderDistributionCost objectAtIndex:a-1] doubleValue]): -1];
					
					//NSLog(@"%@", QuerySQL);
					if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
						if (sqlite3_step(statement) == SQLITE_DONE) {
							
						}
						sqlite3_finalize(statement);
					}
					
				}
			}
			sqlite3_close(contactDB);
		}
		NSLog(@"--------- ECAR1 end --------");
	}
	
	int tempToAdd = 0;
	
	if (OverallAddTPDBegin.count < [strCovPeriod intValue]) {
		tempToAdd = [strCovPeriod intValue] - OverallAddTPDBegin.count;
		
		for (int i = 0; i < tempToAdd; i ++) {
			[OverallAddTPDBegin addObject:@"0.00"];
			[OverallAddTPDEOY addObject:@"0.00"];
			[OverallYearlyIncome addObject:@"0.00"];
		}
	}
	
    ECAR1TPDRate = Nil;
    ECAR1TPDRateEOY = Nil;
    ECAR1AccTPD = Nil;
    ECAR1AccTPDEOY = Nil;
    CSVRate = Nil;
    ECAR1AnnualPremium = Nil;
    RiderYearlyIncome = Nil;
    RiderSurrenderValue = Nil;
    RiderTPDBegin = Nil;
    RiderTPDEnd = Nil;
    CommissionRate = Nil;
    RiderDistributionCost = Nil;
	
}

-(double)TPDLimit :(int)aaAgeEOY{
	if (aaAgeEOY <= 6) {
		return 100000.00;
	}
	else if (aaAgeEOY > 6 && aaAgeEOY <= 14) {
		return 500000.00;
	}
	else if (aaAgeEOY > 14 && aaAgeEOY <= 65) {
		return 3500000.00;
	}
	else{
		return 0.00;
	}
}

-(void)InsertToUL_Temp_Summary{
	sqlite3_stmt *statement;
    NSString *QuerySQL;
	
    NSLog(@"--------- UL_Temp_Summary begin --------");
	
    int inputAge;
    double TSER_OAD = 0.00;
    double tempvalue = 0.00;
    double OverallEOYTotalOAD = 0.00;
    
    if ([OtherRiderCode indexOfObject:@"TSER"] != NSNotFound) {
        TSER_OAD = [[OtherRiderSA objectAtIndex:[OtherRiderCode indexOfObject:@"TSER"]] doubleValue];
    }
    
	
    if (sqlite3_open([databasePath UTF8String], &contactDB) == SQLITE_OK){
        for (int a= 1; a<=([strCovPeriod intValue] > 30 ? 30 : [strCovPeriod intValue]); a++) {
            if (Age >= 0){
                
                //int tempSustainYear = PolicySustainYear == 0 ? 100 : PolicySustainYear;
                
                inputAge = Age + a;
                
                //if (inputAge <= tempSustainYear) {
                if ([UnitizeRiderCode indexOfObject:@"CIRD"] != NSNotFound) {
                    
                    if (a <= CIRDTerm ) {
                        double NewOverallTPDBegin = [[OverallTPDBegin objectAtIndex: a - 1 ] doubleValue ] + [[UnitizeRiderSA objectAtIndex:[UnitizeRiderCode indexOfObject:@"CIRD"]] doubleValue ];
                        [OverallTPDBegin replaceObjectAtIndex:a - 1 withObject:[NSString stringWithFormat:@"%f", NewOverallTPDBegin]];
                        
                        double NewOverallTPDEOY = [[OverallTPDEOY objectAtIndex: a - 1 ] doubleValue ] + [[UnitizeRiderSA objectAtIndex:[UnitizeRiderCode indexOfObject:@"CIRD"]] doubleValue ];
                        [OverallTPDEOY replaceObjectAtIndex:a - 1 withObject:[NSString stringWithFormat:@"%f", NewOverallTPDEOY]];
                    }
                    
                    
                }
                
                if (inputAge >= 65) {
                    
                    if (inputAge == 65) {
                        [OverallOADBegin addObject:@"0.00"];
                        if (Age + a <= 80   ) {
                            tempvalue = [ strBasicSA doubleValue ] + TSER_OAD;
                            OverallEOYTotalOAD = TSER_OAD;
                        }
                        else{
                            tempvalue = [ strBasicSA doubleValue ];
                            OverallEOYTotalOAD = 0.00;
                        }
                        [OverallOADEOY addObject:[NSString stringWithFormat:@"%f", tempvalue  > OADLimit ? OADLimit : tempvalue]] ;
                    }
                    else{
                        if (Age + a <= 80   ) {
                            tempvalue = [ strBasicSA doubleValue ] + TSER_OAD;
                            OverallEOYTotalOAD = TSER_OAD;
                        }
                        else{
                            tempvalue = [ strBasicSA doubleValue ];
                            OverallEOYTotalOAD = 0.00;
                        }
                        
                        [OverallOADBegin addObject:[NSString stringWithFormat:@"%f",tempvalue > OADLimit ? OADLimit : tempvalue]];
                        [OverallOADEOY addObject:[NSString stringWithFormat:@"%f",tempvalue > OADLimit ? OADLimit : tempvalue]];
                    }
                    
                }
                else{
                    [OverallOADBegin addObject:@"0.00"];
                    [OverallOADEOY addObject:@"0.00"];
                }
                
                double tempBull = round([[BullSurrender objectAtIndex:a-1]doubleValue ]);
                double tempFlat = round([[FlatSurrender objectAtIndex:a-1]doubleValue ]);
                double tempBear = round([[BearSurrender objectAtIndex:a-1]doubleValue ]);
                
                
                if (tempBull >= 0) {
                    if ([getPlanCode isEqualToString:@"UV"] || [getPlanCode isEqualToString:@"UP"] ) {
                        /*
                        double tempOverallEOYTotalTPDFlat = tempFlat >= 0 ? round([[OverallEOYTotalTPDFlat objectAtIndex:a - 1] doubleValue ]) + round([[OverallTPDEOY objectAtIndex:a - 1] doubleValue ]) - ([[FlatSurrender objectAtIndex: a - 1 ] doubleValue] > 0 ? 0 : BasicSA) : ([[OverallTPDEOY objectAtIndex:a - 1] doubleValue ] - [[OtherRiderOverallTPDEOY objectAtIndex: a- 1] doubleValue] - BasicSA);
                        
                        double tempOverallEOYTotalTPDBear = tempBear >= 0 ? round([[OverallEOYTotalTPDBear objectAtIndex:a - 1] doubleValue ]) + round([[OverallTPDEOY objectAtIndex:a - 1] doubleValue ]) - ([[BearSurrender objectAtIndex: a - 1 ] doubleValue] > 0 ? 0 : BasicSA) : ([[OverallTPDEOY objectAtIndex:a - 1] doubleValue ] - [[OtherRiderOverallTPDEOY objectAtIndex: a- 1] doubleValue] - BasicSA);
                        */
                        
                        double tempOverallEOYTotalTPDFlat = tempFlat >= 0 ? round([[OverallEOYTotalTPDFlat objectAtIndex:a - 1] doubleValue ]) + round([[OverallTPDEOY objectAtIndex:a - 1] doubleValue ]) - ([[FlatSurrender objectAtIndex: a - 1 ] doubleValue] > 0 ? 0 : BasicSA) :  -1;
                        
                        double tempOverallEOYTotalTPDBear = tempBear >= 0 ? round([[OverallEOYTotalTPDBear objectAtIndex:a - 1] doubleValue ]) + round([[OverallTPDEOY objectAtIndex:a - 1] doubleValue ]) - ([[BearSurrender objectAtIndex: a - 1 ] doubleValue] > 0 ? 0 : BasicSA) : -1;
                        
                        double colOverallTotalFundSurrenderValueFlat = tempFlat > 0 ? round([[OverallTotalFundSurrenderValueFlat objectAtIndex:a - 1] doubleValue ]) + round([[OverallFullSurrenderValue objectAtIndex:a - 1] doubleValue ]) : -1;
                        double colOverallTotalFundSurrenderValueBull = tempBull > 0 ? round([[OverallTotalFundSurrenderValueBull objectAtIndex:a - 1] doubleValue ]) + round([[OverallFullSurrenderValue objectAtIndex:a - 1] doubleValue ]) : -1;
                        double colOverallTotalFundSurrenderValueBear = tempBear > 0 ? round([[OverallTotalFundSurrenderValueBear objectAtIndex:a - 1] doubleValue ]) + round([[OverallFullSurrenderValue objectAtIndex:a - 1] doubleValue ]) : -1;
                        
                        QuerySQL = [NSString stringWithFormat: @"Insert INTO UL_Temp_Summary (\"SINO\", \"SeqNo\", \"DataType\",\"col0_1\",\"col0_2\",\"col1\",\"col2\", "
                                    "'col3','col4','col5','col6','col7','col8','col9','col10','col11','col12','col13','col14','col15','col16','col17','col18','col19') VALUES ( "
                                    " \"%@\",\"%d\",\"%@\",\"%d\",\"%d\",\"%.2f\", '%.0f', '%.0f','%.0f', '%.0f', %.0f, '%.0f', '%.0f',\"%.0f\", '%.0f', '%.0f','%.0f', '%.0f', "
                                    " %.0f, '%.0f', '%.0f','%.0f','%.0f', '%.0f')",
                                    SINo, a, @"DATA", a, inputAge, [[OverallTotalPremiumPaid objectAtIndex:a - 1] doubleValue],
                                    round([[OverallTPDBegin objectAtIndex:a - 1] doubleValue ]),    
                                    round([[OverallTPDEOY objectAtIndex:a - 1] doubleValue ]),
                                    round([[OverallOADBegin objectAtIndex:a - 1] doubleValue ]),
                                    round([[OverallOADEOY objectAtIndex:a - 1] doubleValue ]),
                                    round([[OverallAddTPDBegin objectAtIndex:a - 1] doubleValue ] > 0 ? [[OverallAddTPDBegin objectAtIndex:a - 1] doubleValue ] : 0.00 ),
                                    round([[OverallAddTPDEOY objectAtIndex:a - 1] doubleValue ] > 0 ? [[OverallAddTPDEOY objectAtIndex:a - 1] doubleValue ] : 0.00),
                                    round([[OverallYearlyIncome objectAtIndex:a - 1] doubleValue ]),
                                    round([[OverallMonthlyIncome objectAtIndex:a - 1] doubleValue ]),
                                    round([[OverallFullSurrenderValue objectAtIndex:a - 1] doubleValue ]),
                                    //round([[OverallTotalFundSurrenderValueBull objectAtIndex:a - 1] doubleValue ]) + round([[OverallFullSurrenderValue objectAtIndex:a - 1] doubleValue ]) ,
                                    //round([[OverallTotalFundSurrenderValueFlat objectAtIndex:a - 1] doubleValue ]) + round([[OverallFullSurrenderValue objectAtIndex:a - 1] doubleValue ]),
                                    //round([[OverallTotalFundSurrenderValueBear objectAtIndex:a - 1] doubleValue ]) + round([[OverallFullSurrenderValue objectAtIndex:a - 1] doubleValue ]),
                                    colOverallTotalFundSurrenderValueBull  ,
                                    colOverallTotalFundSurrenderValueFlat ,
                                    colOverallTotalFundSurrenderValueBear ,
                                    round([[OverallEOYTotalTPDBull objectAtIndex:a - 1] doubleValue ]) + round([[OverallTPDEOY objectAtIndex:a - 1] doubleValue ]) - ([[BullSurrender objectAtIndex: a - 1 ] doubleValue] > 0 ? 0 : BasicSA) ,
                                    tempOverallEOYTotalTPDFlat,
                                    tempOverallEOYTotalTPDBear,
                                    ([[BullSurrender objectAtIndex: a - 1 ] doubleValue] > 0 ? (round([[OverallEOYTotalOADBull objectAtIndex:a - 1] doubleValue ]) + OverallEOYTotalOAD) : -1) ,
                                    ([[FlatSurrender objectAtIndex: a - 1 ] doubleValue] > 0 ? (round([[OverallEOYTotalOADFlat objectAtIndex:a - 1] doubleValue ]) + OverallEOYTotalOAD) : -1),
                                    ([[BearSurrender objectAtIndex: a - 1 ] doubleValue] > 0 ? (round([[OverallEOYTotalOADBear objectAtIndex:a - 1] doubleValue ]) + OverallEOYTotalOAD) : -1)];
                        
                        
                        
                    }   
                    else{
                        if (ECAR1Exist == FALSE && ECAR6Exist == FALSE ) {
                            QuerySQL = [NSString stringWithFormat: @"Insert INTO UL_Temp_Summary (\"SINO\", \"SeqNo\", \"DataType\",\"col0_1\",\"col0_2\",\"col1\",\"col2\", "
                                        "'col3','col4','col5','col6','col7','col8','col9','col10','col11') VALUES ( "
                                        " \"%@\",\"%d\",\"%@\",\"%d\",\"%d\",\"%.2f\", '%.0f', '%.0f','%.0f', '%.0f', %.0f, '%.0f', '%.0f',\"%.0f\", '%.0f', '%.0f')",
                                        SINo, a, @"DATA", a, inputAge, [[OverallTotalPremiumPaid objectAtIndex:a - 1] doubleValue],
                                        round([[OverallTPDEOY objectAtIndex:a - 1] doubleValue ]) + round([[OverallOADEOY objectAtIndex:a - 1] doubleValue ]),
                                        round([[OverallAddTPDEOY objectAtIndex:a - 1] doubleValue ]),
                                        round([[OverallFullSurrenderValue objectAtIndex:a - 1] doubleValue ]),
                                        round([[OverallYearlyIncome objectAtIndex:a - 1] doubleValue ]),
                                        round([[OverallTotalFundSurrenderValueBull objectAtIndex:a - 1] doubleValue ]) + round([[OverallFullSurrenderValue objectAtIndex:a - 1] doubleValue ]) ,
                                        round([[OverallTotalFundSurrenderValueFlat objectAtIndex:a - 1] doubleValue ]) + round([[OverallFullSurrenderValue objectAtIndex:a - 1] doubleValue ]),
                                        round([[OverallTotalFundSurrenderValueBear objectAtIndex:a - 1] doubleValue ]) + round([[OverallFullSurrenderValue objectAtIndex:a - 1] doubleValue ]),
                                        round([[OverallEOYTotalTPDBull objectAtIndex:a - 1] doubleValue ]) + round([[OverallTPDEOY objectAtIndex:a - 1] doubleValue ]) - ([[BullSurrender objectAtIndex: a - 1 ] doubleValue] > 0 ? 0 : BasicSA) ,
                                        round([[OverallEOYTotalTPDFlat objectAtIndex:a - 1] doubleValue ]) + round([[OverallTPDEOY objectAtIndex:a - 1] doubleValue ]) - ([[FlatSurrender objectAtIndex: a - 1 ] doubleValue] > 0 ? 0 : BasicSA),
                                        round([[OverallEOYTotalTPDBear objectAtIndex:a - 1] doubleValue ]) + round([[OverallTPDEOY objectAtIndex:a - 1] doubleValue ]) - ([[BearSurrender objectAtIndex: a - 1 ] doubleValue] > 0 ? 0 : BasicSA)];
                        }
                        else{
                            QuerySQL = [NSString stringWithFormat: @"Insert INTO UL_Temp_Summary (\"SINO\", \"SeqNo\", \"DataType\",\"col0_1\",\"col0_2\",\"col1\",\"col2\", "
                                        "'col3','col4','col5','col6','col7','col8','col9','col10','col11','col12','col13','col14','col15','col16','col17','col18') VALUES ( "
                                        " \"%@\",\"%d\",\"%@\",\"%d\",\"%d\",\"%.2f\", '%.0f', '%.0f','%.0f', '%.0f', %.0f, '%.0f', '%.0f',\"%.0f\", '%.0f', '%.0f','%.0f', '%.0f', "
                                        " %.0f, '%.0f', '%.0f','%.0f','%.0f')",
                                        SINo, a, @"DATA", a, inputAge, [[OverallTotalPremiumPaid objectAtIndex:a - 1] doubleValue],
                                        round([[OverallTPDBegin objectAtIndex:a - 1] doubleValue ]),round([[OverallTPDEOY objectAtIndex:a - 1] doubleValue ]),
                                        round([[OverallOADBegin objectAtIndex:a - 1] doubleValue ]), round([[OverallOADEOY objectAtIndex:a - 1] doubleValue ]),
                                        round([[OverallAddTPDBegin objectAtIndex:a - 1] doubleValue ]), round([[OverallAddTPDEOY objectAtIndex:a - 1] doubleValue ]),
                                        round([[OverallFullSurrenderValue objectAtIndex:a - 1] doubleValue ]),round([[OverallYearlyIncome objectAtIndex:a - 1] doubleValue ]),
                                        round([[OverallTotalFundSurrenderValueBull objectAtIndex:a - 1] doubleValue ]) + round([[OverallFullSurrenderValue objectAtIndex:a - 1] doubleValue ]) ,
                                        round([[OverallTotalFundSurrenderValueFlat objectAtIndex:a - 1] doubleValue ]) + round([[OverallFullSurrenderValue objectAtIndex:a - 1] doubleValue ]),
                                        round([[OverallTotalFundSurrenderValueBear objectAtIndex:a - 1] doubleValue ]) + round([[OverallFullSurrenderValue objectAtIndex:a - 1] doubleValue ]),
                                        round([[OverallEOYTotalTPDBull objectAtIndex:a - 1] doubleValue ]) + round([[OverallTPDEOY objectAtIndex:a - 1] doubleValue ]) - ([[BullSurrender objectAtIndex: a - 1 ] doubleValue] > 0 ? 0 : BasicSA) ,
                                        round([[OverallEOYTotalTPDFlat objectAtIndex:a - 1] doubleValue ]) + round([[OverallTPDEOY objectAtIndex:a - 1] doubleValue ]) - ([[FlatSurrender objectAtIndex: a - 1 ] doubleValue] > 0 ? 0 : BasicSA),
                                        round([[OverallEOYTotalTPDBear objectAtIndex:a - 1] doubleValue ]) + round([[OverallTPDEOY objectAtIndex:a - 1] doubleValue ]) - ([[BearSurrender objectAtIndex: a - 1 ] doubleValue] > 0 ? 0 : BasicSA),
                                        ([[BullSurrender objectAtIndex: a - 1 ] doubleValue] > 0 ? round([[OverallEOYTotalOADBull objectAtIndex:a - 1] doubleValue ]) : -1) ,
                                        ([[FlatSurrender objectAtIndex: a - 1 ] doubleValue] > 0 ? round([[OverallEOYTotalOADFlat objectAtIndex:a - 1] doubleValue ]) : -1),
                                        ([[BearSurrender objectAtIndex: a - 1 ] doubleValue] > 0 ? round([[OverallEOYTotalOADBear objectAtIndex:a - 1] doubleValue ]) : -1)];
                        }
                        
                    }
                }
                else
                {
                    QuerySQL = [NSString stringWithFormat: @"Insert INTO UL_Temp_Summary (\"SINO\", \"SeqNo\", \"DataType\",\"col0_1\",\"col0_2\",\"col1\",\"col2\", "
                                "'col3','col4','col5','col6','col7','col8','col9','col10','col11','col12','col13','col14','col15','col16','col17','col18','col19') VALUES ( "
                                " \"%@\",\"%d\",\"%@\",\"%d\",\"%d\",\"%.2f\", '%.0f', '%.0f','%.0f', '%.0f', %.0f, '%.0f', '%.0f',\"%.0f\", '%.0f', '%.0f','%.0f', '%.0f', "
                                " %.0f, '%.0f', '%.0f','%.0f','%.0f', '%.0f')",
                                SINo, a, @"DATA", a, inputAge, -1.00, -1.00,-1.00,-1.00,-1.00,-1.00,-1.00,-1.00,-1.00,-1.00,-1.00,-1.00,-1.00,-1.00,-1.00,-1.00,-1.00,-1.00,-1.00];
                }
                
                
                
                
            
                /*
                 }
                 else{
                 [OverallAddTPDBegin addObject:@"0"];
                 [OverallAddTPDEOY addObject:@"0"];
                 [OverallEOYTotalOADBear addObject:@"0"];
                 [OverallEOYTotalOADBull addObject:@"0"];
                 [OverallEOYTotalOADFlat addObject:@"0"];
                 [OverallEOYTotalTPDBear addObject:@"0"];
                 [OverallEOYTotalTPDBull addObject:@"0"];
                 [OverallEOYTotalTPDFlat addObject:@"0"];
                 [OverallFullSurrenderValue addObject:@"0"];
                 [OverallMonthlyIncome addObject:@"0"];
                 [OverallOADBegin addObject:@"0"];
                 [OverallOADEOY addObject:@"0"];
                 [OverallTotalFundSurrenderValueBear addObject:@"0"];
                 [OverallTotalFundSurrenderValueBull addObject:@"0"];
                 [OverallTotalFundSurrenderValueFlat addObject:@"0"];
                 [OverallTotalPremiumPaid addObject:@"0"];
                 [OverallTPDBegin addObject:@"0"];
                 [OverallTPDEOY addObject:@"0"];
                 [OverallYearlyIncome addObject:@"0"];
                 
                 QuerySQL = [NSString stringWithFormat: @"Insert INTO UL_Temp_Summary (\"SINO\", \"SeqNo\", \"DataType\",\"col0_1\",\"col0_2\",\"col1\",\"col2\", "
                 "'col3','col4','col5','col6','col7','col8','col9','col10','col11','col12','col13','col14','col15','col16','col17','col18','col19') VALUES ( "
                 " \"%@\",\"%d\",\"%@\",\"%d\",\"%d\",\"-\", \"-\", \"-\",\"-\", '-', '-', '-'', '-','-', '-', '-','-', '-', "
                 " '-', '-', '-','-','-', '-')",
                 SINo, a, @"DATA", a, inputAge];
                 }
                 */
                
                
                
                
                //NSLog(@"%@", QuerySQL);
                if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
                    if (sqlite3_step(statement) == SQLITE_DONE) {
                        
                    }
                    sqlite3_finalize(statement);
                }
                
            }
        }
        sqlite3_close(contactDB);
    }
    NSLog(@"--------- UL_Temp_Summary end --------");
	
	
}

-(void)InsertToUL_Temp_Rider{
    
    sqlite3_stmt *statement;
    NSString *QuerySQL;
    NSMutableArray *tempRiderCode = [[NSMutableArray alloc] init];
    NSMutableArray *tempRiderTerm= [[NSMutableArray alloc] init];
    NSMutableArray *tempRiderPTypeCode = [[NSMutableArray alloc] init];
    NSMutableArray *tempRiderPTypeSeq = [[NSMutableArray alloc] init];
    NSMutableArray *tempRiderAlloc = [[NSMutableArray alloc] init];
    NSMutableArray *tempMDSR1CommRate = [[NSMutableArray alloc] init];
    NSMutableArray *tempMDSR2CommRate = [[NSMutableArray alloc] init];
    
    if (sqlite3_open([databasePath UTF8String], &contactDB) == SQLITE_OK){
        QuerySQL = [NSString stringWithFormat: @"Select ridercode, RiderTerm, PTypecode, seq from ul_rider_details Where sino = '%@' AND ridercode in ('CIRD', 'DCA', 'ACIR', 'HMM', 'MG_IV', "
					"'WI', 'MR', 'TPDMLA', 'PA', 'DHI', 'TPDYLA','CCR', 'JCCR', 'TCCR',  'MSR', 'LDYR', 'MDSR1', 'MDSR2') order by riderterm ASC", SINo];
        if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
            while (sqlite3_step(statement) == SQLITE_ROW) {
                [tempRiderCode addObject: [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 0)]];
                [tempRiderTerm addObject: [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 1)]];
                [tempRiderPTypeCode addObject: [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 2)]];
                [tempRiderPTypeSeq addObject: [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 3)]];
            }
            sqlite3_finalize(statement);
        }
        
        sqlite3_close(contactDB);
    }
    
    
    if (sqlite3_open([UL_RatesDatabasePath UTF8String], &contactDB) == SQLITE_OK){
        for (int i = 0; i < tempRiderCode.count; i++) {
            
            QuerySQL = [NSString stringWithFormat: @"Select rate from es_Sys_rider_Allocation Where Term = '%d' limit 7 ", [[tempRiderTerm objectAtIndex:i] intValue]> 20 ? 20 : [[tempRiderTerm objectAtIndex:i] intValue]  ];
            
                 if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
                     while (sqlite3_step(statement) == SQLITE_ROW) {
                         [tempRiderAlloc addObject: [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 0)]];
                     }
                     sqlite3_finalize(statement);
                 }
            
            if (tempRiderAlloc.count < 7 * (i + 1)) {
                int tempToAdd = (7 * (i + 1)) - tempRiderAlloc.count;
                for (int q = 0; q < tempToAdd; q ++) {
                    [tempRiderAlloc addObject:@"0.00"];
                }
            }
            
            int tempI = [[tempRiderTerm objectAtIndex:i] intValue] > 70 ? 70 : [[tempRiderTerm objectAtIndex:i] intValue];
            if ([[tempRiderCode objectAtIndex:i] isEqualToString:@"MDSR1"] ) {
                QuerySQL = [NSString stringWithFormat: @"Select rate from es_Sys_rider_commission Where RiderTerm = '%d'  ", tempI];
                
                if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
                    while (sqlite3_step(statement) == SQLITE_ROW) {
                        [tempMDSR1CommRate addObject: [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 0)]];
                    }
                    sqlite3_finalize(statement);
                }
                
            }
            else if ([[tempRiderCode objectAtIndex:i] isEqualToString:@"MDSR2"] ) {
                    QuerySQL = [NSString stringWithFormat: @"Select rate from es_Sys_rider_commission Where RiderTerm = '%d'  ", tempI];
                    
                    if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
                        while (sqlite3_step(statement) == SQLITE_ROW) {
                            [tempMDSR2CommRate addObject: [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 0)]];
                        }
                        sqlite3_finalize(statement);
                    }
                    
            }
            
        }
        
        sqlite3_close(contactDB);
    }
    
    if (sqlite3_open([databasePath UTF8String], &contactDB) == SQLITE_OK){
        NSString *input = @"";
        for (int i = 0; i < tempRiderCode.count; i++) {
            input = [NSString stringWithFormat:@"'%@','%@','%@','%@'", [tempRiderCode objectAtIndex:i], [tempRiderPTypeCode objectAtIndex:i], [tempRiderPTypeSeq objectAtIndex:i], [tempRiderTerm objectAtIndex:i]];
            
            for (int j = i * 7; j < (i + 1 ) * 7; j++) {
                input = [input stringByAppendingFormat:@",'%@' ", [tempRiderAlloc objectAtIndex:j]];
            }
            
            QuerySQL = [NSString stringWithFormat: @"INSERT INTO UL_TEMP_RIDER(col1,col2,col3,col4,col5,col6,col7,col8,col9,col10,col11) VALUES (%@)", input ];
        
            
            if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
                if (sqlite3_step(statement) == SQLITE_DONE) {
                    
                }
                sqlite3_finalize(statement);
            }

        
        }
        
        for (int i = 0; i < tempMDSR1CommRate.count; i++) {
            
            QuerySQL = [NSString stringWithFormat: @"INSERT INTO UL_TEMP_RIDER(DataType, col1, col2 ) VALUES ('%@', '%@', '%d')", @"MDSR1CommRate", [tempMDSR1CommRate objectAtIndex:i], i + 1 ];
            
            if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
                if (sqlite3_step(statement) == SQLITE_DONE) {
                    
                }
                sqlite3_finalize(statement);
            }
                        
        }
        
        for (int i = 0; i < tempMDSR2CommRate.count; i++) {
            
            QuerySQL = [NSString stringWithFormat: @"INSERT INTO UL_TEMP_RIDER(DataType, col1, col2 ) VALUES ('%@', '%@', '%d')", @"MDSR2CommRate", [tempMDSR2CommRate objectAtIndex:i], i + 1 ];
            
            if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
                if (sqlite3_step(statement) == SQLITE_DONE) {
                    
                }
                sqlite3_finalize(statement);
            }
            
        }

        sqlite3_close(contactDB);
    }
    

    tempMDSR1CommRate = Nil;
    tempMDSR2CommRate = Nil;
    tempRiderCode = Nil;
    tempRiderTerm= Nil;
    tempRiderPTypeCode = Nil;
    tempRiderPTypeSeq = Nil;
    tempRiderAlloc = Nil;
    
}



-(void)InsertToUL_Temp_Trad_Rider{
    
    sqlite3_stmt *statement;
    NSString *QuerySQL;
    NSMutableArray *TotalRiderSurrenderValue = [[NSMutableArray alloc] init ];
    bool FirstLARiderFound = FALSE;
    
    if (OtherRiderCode.count > 0) {
		NSLog(@"insert to UL_Temp_Trad_Rider --- start");
        
         if (sqlite3_open([databasePath UTF8String], &contactDB) == SQLITE_OK){
             QuerySQL = [NSString stringWithFormat:@"Select ridercode from UL_Rider_Details where sino = '%@' AND PtypeCode = 'LA' AND seq = '1' ", SINo ];
             if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
                 if(sqlite3_step(statement) == SQLITE_ROW) {
                     FirstLARiderFound = TRUE;
                 }
                 sqlite3_finalize(statement);
             }
             
             sqlite3_close(contactDB);
         }
        
		//if (!([OtherRiderPTypeCode indexOfObject:@"LA"] != NSNotFound && [OtherRiderPTypeSeq indexOfObject:@"1"] != NSNotFound)  ) { //meaning first life assured rider is not found
        if (FirstLARiderFound == FALSE  ) { //meaning first life assured non-unitize rider is not found
            int NoOfPages = 1;
            
            if ([OtherRiderPTypeCode indexOfObject:@"PY"] != NSNotFound ) {
                
                [self InsertToUL_Temp_Trad_Rider_Other:NoOfPages andPayorORSecond:@"PAYOR"];
                NoOfPages ++;
            }
            
            if ([OtherRiderPTypeSeq indexOfObject:@"2"] != NSNotFound ) {
                
                [self InsertToUL_Temp_Trad_Rider_Other:NoOfPages andPayorORSecond:@"SECOND"];
                
            }
        }
        else if ([OtherRiderPTypeCode indexOfObject:@"LA"] == NSNotFound) {
            int NoOfPages = 1;
            
            if ([OtherRiderPTypeCode indexOfObject:@"PY"] != NSNotFound ) {
                
                [self InsertToUL_Temp_Trad_Rider_Other:NoOfPages andPayorORSecond:@"PAYOR"];
                NoOfPages ++;
            }
            
            if ([OtherRiderPTypeSeq indexOfObject:@"2"] != NSNotFound ) {
                
                [self InsertToUL_Temp_Trad_Rider_Other:NoOfPages andPayorORSecond:@"SECOND"];
                
            }
        }
        else{
            for (int x = 0; x < [strCovPeriod intValue]; x++) {
                [TotalRiderSurrenderValue addObject:@"0.00"];
                [OtherRiderOverallTPDEOY addObject:@"0.00"];
            }
            
            int page;
            int NoOfPages = 0;
            
            if ([OtherRiderPTypeCode indexOfObject:@"PY"] != NSNotFound || [OtherRiderPTypeSeq indexOfObject:@"2"] != NSNotFound  ) {
                NoOfPages = ceil((OtherRiderCode.count - 1)/3.00);
            }
            else
            {
                NoOfPages = ceil(OtherRiderCode.count/3.00);
            }
            
            
            for (page =1; page <=NoOfPages; page++) {
                
                NSMutableArray *RiderCol1 = [[NSMutableArray alloc] init ];
                NSMutableArray *RiderCol2 = [[NSMutableArray alloc] init ];
                NSMutableArray *RiderCol3 = [[NSMutableArray alloc] init ];
                NSMutableArray *RiderCol4 = [[NSMutableArray alloc] init ];
                NSMutableArray *RiderCol5 = [[NSMutableArray alloc] init ];
                NSMutableArray *RiderCol6 = [[NSMutableArray alloc] init ];
                NSMutableArray *RiderCol7 = [[NSMutableArray alloc] init ];
                NSMutableArray *RiderCol8 = [[NSMutableArray alloc] init ];
                NSMutableArray *RiderCol9 = [[NSMutableArray alloc] init ];
                NSMutableArray *RiderCol10 = [[NSMutableArray alloc] init ];
                NSMutableArray *RiderCol11 = [[NSMutableArray alloc] init ];
                NSMutableArray *RiderCol12 = [[NSMutableArray alloc] init ];
                NSMutableArray *Rider1DDCost = [[NSMutableArray alloc] init ];
                NSMutableArray *Rider2DDCost = [[NSMutableArray alloc] init ];
                NSMutableArray *Rider3DDCost = [[NSMutableArray alloc] init ];
                
                
                for (int Rider =0; Rider < 3; Rider++) {
                    int item = 3 * (page - 1) + Rider;
                    
                    if (item < OtherRiderCode.count) {
                        
                        NSString *tempRiderCode = [OtherRiderCode objectAtIndex:item];
                        
                        if ([tempRiderCode isEqualToString:@"LCWP"] || [tempRiderCode isEqualToString:@"PR"]) {
                            if (Rider == 1) {
                                for (int row = 0; row < [strCovPeriod intValue] + 2; row++){
                                    [RiderCol5 addObject:@"-"];
                                    [RiderCol6 addObject:@"-"];
                                    [RiderCol7 addObject:@"-"];
                                    [RiderCol8 addObject:@"-"];
                                    [Rider2DDCost addObject:@"0.00"];
                                }
                            }
                            if (Rider == 2) {
                                for (int row = 0; row < [strCovPeriod intValue] + 2; row++){
                                    [RiderCol9 addObject:@"-"];
                                    [RiderCol10 addObject:@"-"];
                                    [RiderCol11 addObject:@"-"];
                                    [RiderCol12 addObject:@"-"];
                                    [Rider3DDCost addObject:@"0.00"];
                                }
                            }
                            continue;
                        }
                        
                        NSString *tempRiderDesc = [OtherRiderDesc objectAtIndex:item];
                        NSString *tempRiderPlanOption = [OtherRiderPlanOption objectAtIndex:item];
                        double tempRiderSA = [[OtherRiderSA objectAtIndex:item] doubleValue ];
                        int tempRiderTerm = [[OtherRiderTerm objectAtIndex:item] intValue ];
                        double tempPremium = [[OtherRiderPremium objectAtIndex:item] doubleValue ];
                        NSMutableArray *tempCol1 = [[NSMutableArray alloc] init ];
                        NSMutableArray *tempCol2 = [[NSMutableArray alloc] init ];
                        NSMutableArray *tempCol3 = [[NSMutableArray alloc] init ];
                        NSMutableArray *tempCol4 = [[NSMutableArray alloc] init ];
                        NSMutableArray *tempCol5 = [[NSMutableArray alloc] init ];
                        NSString *tempHL = [OtherRiderHL objectAtIndex:item];
                        NSString *tempHLTerm = [OtherRiderHLTerm objectAtIndex:item];
                        NSString *tempRiderPaymentTerm= [OtherRiderPaymentTerm objectAtIndex:item];
                        NSString *tempRiderPaymentChoice = [OtherRiderPaymentChoice objectAtIndex:item];
                        NSString *tempRiderLoadingPrem = [OtherRiderLoadingPremium objectAtIndex:item];
                        tempRiderLoadingPrem = [NSString stringWithFormat:@"%f", [tempRiderLoadingPrem doubleValue] * [self ReturnBumpModeValue2:strBumpMode]];
                        
                        //double tempRiderLoadingPremium = [[OtherRiderLoadingPremium objectAtIndex:item] doubleValue];
                        //NSString *tempHLP = [OtherRiderHLP objectAtIndex:item];
                        //NSString *tempHLPTerm = [OtherRiderHLPTerm objectAtIndex:item];
                        
                        
                        NSLog(@"%@, %d", [OtherRiderCode objectAtIndex:item], item);
                        
                        for (int row = 0; row < 3; row++) {
                            
                            if (row == 0) {
                                [tempCol1 addObject:tempRiderDesc ];
                                [tempCol2 addObject:@"" ];
                                [tempCol3 addObject:@"" ];
                                [tempCol4 addObject:@"" ];
                                [tempCol5 addObject:@"" ];
                            }
                            
                            if (row == 1) {
                                if ([tempRiderCode isEqualToString:@"CIWP"] || [tempRiderCode isEqualToString:@"TPDWP"] ||
                                    [tempRiderCode isEqualToString:@"PR"] || [tempRiderCode isEqualToString:@"LCWP"] || [tempRiderCode isEqualToString:@"TSR"] || [tempRiderCode isEqualToString:@"TSER"]  ) {
                                    if([EngOrBm isEqualToString:@"English"]){
                                        [tempCol1 addObject:@"Annual Premium (Beg. of Year)" ];
                                        [tempCol2 addObject:@"Sum<br/>Assured" ];
                                        [tempCol3 addObject:@"Guaranteed<br/>Cash Surrender Value" ];
                                        [tempCol4 addObject:@"-" ];
                                        [tempCol5 addObject:@"-" ];
                                    }
                                    else{
                                        [tempCol1 addObject:@"Premium Tahunan (Permulaan Tahun)" ];
                                        [tempCol2 addObject:@"Jumlah Diinsuranskan" ];
                                        [tempCol3 addObject:@"Nilai Penyerahan Tunai Dijamin" ];
                                        [tempCol4 addObject:@"-" ];
                                        [tempCol5 addObject:@"-" ];
                                    }
                                    
                                }
                                else if ([tempRiderCode isEqualToString:@"LSR"] ) {
                                    if([EngOrBm isEqualToString:@"English"]){
                                        [tempCol1 addObject:@"Annual Premium (Beg. of Year)" ];
                                        [tempCol2 addObject:@"Sum Assured" ];
                                        [tempCol3 addObject:@"Guaranteed<br/>Cash Surrender Value" ];
                                        [tempCol4 addObject:@"-" ];
                                        [tempCol5 addObject:@"-" ];
                                    }
                                    else{
                                        [tempCol1 addObject:@"Premium Tahunan (Permulaan Tahun)" ];
                                        [tempCol2 addObject:@"Jumlah Diinsuranskan" ];
                                        [tempCol3 addObject:@"Nilai Penyerahan Tunai" ];
                                        [tempCol4 addObject:@"-" ];
                                        [tempCol5 addObject:@"-" ];
                                    }
                                    
                                }
                                else {
                                    if([EngOrBm isEqualToString:@"English"]){
                                        [tempCol1 addObject:@"Annual Premium (Beg. of Year)" ];
                                        [tempCol2 addObject:@"-" ];
                                        [tempCol3 addObject:@"-" ];
                                        [tempCol4 addObject:@"-" ];
                                        [tempCol5 addObject:@"-" ];
                                    }
                                    else{
                                        [tempCol1 addObject:@"Premium Tahunan (Permulaan Tahun)" ];
                                        [tempCol2 addObject:@"-" ];
                                        [tempCol3 addObject:@"-" ];
                                        [tempCol4 addObject:@"-" ];
                                        [tempCol5 addObject:@"-" ];
                                    }
                                    
                                }
                            }
                            
                            
                        }
                        
                        double tempTotalRiderSurrenderValue = 0.00;
                        NSMutableArray *Rate = [[NSMutableArray alloc] init ];
                        NSMutableArray *Comm = [[NSMutableArray alloc] init ];
                        
                        if (sqlite3_open([UL_RatesDatabasePath UTF8String], &contactDB) == SQLITE_OK){
                            QuerySQL = [NSString stringWithFormat:@"Select Rate from ES_Sys_Rider_Commission Where RiderTerm = '%@' "
                                        , tempRiderPaymentTerm ];
                            if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
                                while (sqlite3_step(statement) == SQLITE_ROW) {
                                    [Comm addObject: [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 0)]];
                                    
                                }
                                sqlite3_finalize(statement);
                            }
                            
                            sqlite3_close(contactDB);
                        }
                        
                        if (Comm.count < [strCovPeriod intValue]) {
                            
                            int rowsToAdd = tempRiderTerm - Comm.count;
                            for (int u =0; u<rowsToAdd; u++) {
                                [Comm addObject:[Comm objectAtIndex:6]];
                            }
                        }
                        
                        for (int i = 0; i < ([strCovPeriod intValue] > 30 ? 30 : [strCovPeriod intValue]); i++) {
                            
                            if (i < tempRiderTerm) {
                                
                                if ([tempRiderCode isEqualToString:@"CIWP"] || [tempRiderCode isEqualToString:@"TPDWP"] ) {
                                    
                                    if (i == 0) {
                                        if (sqlite3_open([UL_RatesDatabasePath UTF8String], &contactDB) == SQLITE_OK){
                                            if ([tempRiderCode isEqualToString:@"CIWP"] || [tempRiderCode isEqualToString:@"TPDWP"]) {
                                                QuerySQL = [NSString stringWithFormat:@"Select CSV from ES_Sys_Rider_CSV Where plancode = \"%@\" "
                                                            "AND FromAge = \"%d\" AND PolTerm = '%d' AND Sex = '%@' AND PremPayOpt = '%@' "
                                                            , tempRiderCode, Age, tempRiderTerm, [sex substringToIndex:1], tempRiderPaymentTerm];
                                                //NSLog(@"%@", QuerySQL);
                                            }
                                            else{
                                                if (PYAge > 0) {
                                                    QuerySQL = [NSString stringWithFormat:@"Select CSV from ES_Sys_Rider_CSV Where plancode = \"%@\" "
                                                                "AND FromAge = \"%d\" AND PolTerm = '%d' AND Sex = '%@' AND PremPayOpt = '%@'"
                                                                , tempRiderCode, PYAge, tempRiderTerm, [PYSex substringToIndex:1], tempRiderPaymentTerm ];
                                                }
                                                else{
                                                    QuerySQL = [NSString stringWithFormat:@"Select CSV from ES_Sys_Rider_CSV Where plancode = \"%@\" "
                                                                "AND FromAge = \"%d\" AND PolTerm = '%d' AND Sex = '%@' AND PremPayOpt = '%@'"
                                                                , tempRiderCode, SecAge, tempRiderTerm, [SecSex substringToIndex:1], tempRiderPaymentTerm ];
                                                }
                                                
                                            }
                                            
                                            if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
                                                while (sqlite3_step(statement) == SQLITE_ROW) {
                                                    [Rate addObject: [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 0)]];
                                                    
                                                }
                                                sqlite3_finalize(statement);
                                            }
                                            
                                            
                                            sqlite3_close(contactDB);
                                            
                                        }
                                        
                                        if (Rate.count < [strCovPeriod intValue]) {
                                            
                                            int rowsToAdd = [strCovPeriod intValue] - Rate.count;
                                            for (int u =0; u<rowsToAdd; u++) {
                                                [Rate addObject:@"0.00"];
                                            }
                                        }
                                        
                                        
                                    }
                                    
                                    double actualPremium = 0.0;
                                    if([tempHL isEqualToString:@"(null)"] || [tempHL isEqualToString:@"0"] || [tempHL isEqualToString:@""] ) {
                                        
                                        actualPremium = tempPremium;
                                    }
                                    else{
                                        if(i + 1 <= [tempHLTerm intValue ] ){
                                            actualPremium = tempPremium;
                                        }
                                        else{
                                            actualPremium = tempPremium - [tempRiderLoadingPrem doubleValue];
                                        }
                                    }
                                    /*
                                     if (![tempTempHL isEqualToString:@"(null)"] ) {
                                     if (i + 1 > [tempTempHLTerm intValue]) {
                                     actualPremium = actualPremium - ((waiverRiderSA *  tempRiderSA/100)/100) * [tempTempHL doubleValue];
                                     }
                                     
                                     }
                                     */
                                    //NSLog(@"%f", actualPremium);
                                    [tempCol1 addObject:[NSString stringWithFormat:@"%.2f", i + 1 > [tempRiderPaymentTerm intValue] ? 0.00 : actualPremium]];
                                    [tempCol2 addObject:[NSString stringWithFormat:@"%.3f", tempRiderSA]];
                                    [tempCol3 addObject:[NSString stringWithFormat:@"%.3f", [[Rate objectAtIndex:i ]doubleValue ] * tempRiderSA/100.00 ]];
                                    [tempCol4 addObject:[NSString stringWithFormat:@"-"]];
                                    [tempCol5 addObject:[NSString stringWithFormat:@"%.3f", (actualPremium) * [[Comm objectAtIndex:i] doubleValue ]/100.00]];
                                    if (i == 1) {
                                        /*
                                         [gWaiverAnnual addObject:[NSString stringWithFormat:@"%.9f", waiverRiderSA *  tempRiderSA/100.00] ];
                                         [gWaiverSemiAnnual addObject:[NSString stringWithFormat:@"%.9f", waiverRiderSASemiAnnual *  tempRiderSA/100.00] ];
                                         [gWaiverQuarterly addObject:[NSString stringWithFormat:@"%.9f", waiverRiderSAQuarterly *  tempRiderSA/100.00] ];
                                         [gWaiverMonthly addObject:[NSString stringWithFormat:@"%.9f", waiverRiderSAMonthly *  tempRiderSA/100.00] ];
                                         */
                                    }
                                    
                                }
                                
                                else if ([tempRiderCode isEqualToString:@"LSR"]) {
                                    
                                    if (i == 0) {
                                        if (sqlite3_open([UL_RatesDatabasePath UTF8String], &contactDB) == SQLITE_OK){
                                            QuerySQL = [NSString stringWithFormat:@"Select CSV from ES_Sys_Rider_CSV Where plancode = \"%@\" AND FromAge = \"%d\""
                                                        , tempRiderCode, Age];
                                            //NSLog(@"%@", QuerySQL);
                                            if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
                                                while (sqlite3_step(statement) == SQLITE_ROW) {
                                                    [Rate addObject: [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 0)]];
                                                    
                                                }
                                                sqlite3_finalize(statement);
                                            }
                                            sqlite3_close(contactDB);
                                        }
                                        
                                        if (Rate.count < ([strCovPeriod intValue] > 30 ? 30 : [strCovPeriod intValue])) {
                                            
                                            int rowsToAdd = ([strCovPeriod intValue] > 30 ? 30 : [strCovPeriod intValue]) - Rate.count;
                                            for (int u =0; u<rowsToAdd; u++) {
                                                [Rate addObject:@"0.00"];
                                            }
                                        }
                                    }
                                    
                                    double actualPremium = 0.0;
                                    if([tempHL isEqualToString:@"(null)"] || [tempHL isEqualToString:@"0"] || [tempHL isEqualToString:@""] ) {
                                        actualPremium = tempPremium;
                                    }
                                    else{
                                        if(i + 1 <= [tempHLTerm intValue ] ){
                                            actualPremium = tempPremium;
                                        }
                                        else{
                                            actualPremium = tempPremium - [tempRiderLoadingPrem doubleValue];
                                        }
                                    }
                                    /*
                                     if (![tempTempHL isEqualToString:@"(null)"] ) {
                                     if (i + 1 > [tempTempHLTerm intValue]) {
                                     actualPremium = actualPremium - (tempRiderSA/1000) * [tempTempHL doubleValue];
                                     }
                                     
                                     }
                                     */
                                    [tempCol1 addObject:[NSString stringWithFormat:@"%.2f", actualPremium]];
                                    [tempCol2 addObject:[NSString stringWithFormat:@"%.0f", tempRiderSA]];
                                    [tempCol3 addObject:[NSString stringWithFormat:@"%.3f", [[Rate objectAtIndex:i ]doubleValue ] * tempRiderSA/1000.00   ]];
                                    [tempCol4 addObject:[NSString stringWithFormat:@"-"]];
                                    [tempCol5 addObject:[NSString stringWithFormat:@"%.3f", (actualPremium) * [[Comm objectAtIndex:i] doubleValue ]/100.00]];
                                    
                                    tempTotalRiderSurrenderValue = [[TotalRiderSurrenderValue objectAtIndex:i] doubleValue ];
                                    tempTotalRiderSurrenderValue = tempTotalRiderSurrenderValue + [[tempCol2 objectAtIndex:i] doubleValue ];
                                    [TotalRiderSurrenderValue replaceObjectAtIndex:i withObject:[NSString stringWithFormat:@"%.3f", tempTotalRiderSurrenderValue]];
                                    
                                    double NewOverallTPDBegin = [[OverallTPDBegin objectAtIndex: i ] doubleValue ] + tempRiderSA * [self ReturnJuvenilienFactor:Age];
                                    [OverallTPDBegin replaceObjectAtIndex:i  withObject:[NSString stringWithFormat:@"%f", NewOverallTPDBegin]];
                                    
                                    double NewOverallTPDEOY = 0.00;
                                    
                                    NewOverallTPDEOY = [[OverallTPDEOY objectAtIndex: i ] doubleValue ] + tempRiderSA * [self ReturnJuvenilienFactor:Age + i + 1];
                                    [OverallTPDEOY replaceObjectAtIndex:i  withObject:[NSString stringWithFormat:@"%f", NewOverallTPDEOY]];
                                    
                                    double zzz = [[OtherRiderOverallTPDEOY objectAtIndex: i ] doubleValue ] + tempRiderSA * [self ReturnJuvenilienFactor:Age + i + 1];
                                    [OtherRiderOverallTPDEOY replaceObjectAtIndex:i  withObject:[NSString stringWithFormat:@"%f", zzz]];
                                }
                                else if ([tempRiderCode isEqualToString:@"TSR"]) {
                                    
                                    if (i == 0) {
                                        if (sqlite3_open([UL_RatesDatabasePath UTF8String], &contactDB) == SQLITE_OK){
                                            for (int q = 1; q <= tempRiderTerm; q++) {
                                                if ([tempRiderPaymentChoice isEqualToString:@"Whole Rider Term"]) {
                                                    QuerySQL = [NSString stringWithFormat:@"Select CSV from ES_TSR_CSV_FullPay Where Age = \"%d\" AND RiderTerm = '%d' AND policyYear = '%d' ", Age, tempRiderTerm, q];
                                                }
                                                else
                                                {
                                                    QuerySQL = [NSString stringWithFormat:@"Select CSV from ES_TSR_CSV_LimitedPay Where Age = \"%d\" AND RiderTerm = '%d' AND policyYear = '%d' ", Age, tempRiderTerm, q];
                                                }
                                                
                                                //NSLog(@"%@", QuerySQL);
                                                if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
                                                    if (sqlite3_step(statement) == SQLITE_ROW) {
                                                        [Rate addObject: [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 0)]];
                                                        
                                                    }
                                                    sqlite3_finalize(statement);
                                                }
                                            }
                                            
                                            
                                            sqlite3_close(contactDB);
                                        }
                                        
                                        if (Rate.count < [strCovPeriod intValue]) {
                                            
                                            int rowsToAdd = [strCovPeriod intValue] - Rate.count;
                                            for (int u =0; u<rowsToAdd; u++) {
                                                [Rate addObject:@"0.00"];
                                            }
                                        }
                                    }
                                    
                                    double actualPremium = 0.0;
                                    if([tempHL isEqualToString:@"(null)"] || [tempHL isEqualToString:@"0"] || [tempHL isEqualToString:@""] ) {
                                        actualPremium = tempPremium;
                                    }
                                    else{
                                        if(i + 1 <= [tempHLTerm intValue ] ){
                                            actualPremium = tempPremium;
                                        }
                                        else{
                                            actualPremium = tempPremium - [tempRiderLoadingPrem doubleValue];
                                        }
                                    }
                                    
                                    [tempCol1 addObject:[NSString stringWithFormat:@"%.2f", i + 1 > [tempRiderPaymentTerm intValue] ? 0.00 : actualPremium]];
                                    [tempCol2 addObject:[NSString stringWithFormat:@"%.0f", tempRiderSA *[self ReturnJuvenilienFactor:Age + i + 1]]];
                                    [tempCol3 addObject:[NSString stringWithFormat:@"%.3f", [[Rate objectAtIndex:i ]doubleValue ] * tempRiderSA/1000.00   ]];
                                    [tempCol4 addObject:[NSString stringWithFormat:@"-"]];
                                    [tempCol5 addObject:[NSString stringWithFormat:@"%.3f", (actualPremium) * [[Comm objectAtIndex:i] doubleValue ]/100.00]];
                                    
                                    tempTotalRiderSurrenderValue = [[TotalRiderSurrenderValue objectAtIndex:i] doubleValue ];
                                    tempTotalRiderSurrenderValue = tempTotalRiderSurrenderValue + [[tempCol2 objectAtIndex:i] doubleValue ];
                                    [TotalRiderSurrenderValue replaceObjectAtIndex:i withObject:[NSString stringWithFormat:@"%.3f", tempTotalRiderSurrenderValue]];
                                    
                                    double NewOverallTPDBegin = [[OverallTPDBegin objectAtIndex: i ] doubleValue ] + tempRiderSA * [self ReturnJuvenilienFactor:Age + i + 1];
                                    [OverallTPDBegin replaceObjectAtIndex:i  withObject:[NSString stringWithFormat:@"%f", NewOverallTPDBegin]];
                                    
                                    double NewOverallTPDEOY = 0.00;
                                    
                                    NewOverallTPDEOY = [[OverallTPDEOY objectAtIndex: i ] doubleValue ] + tempRiderSA * [self ReturnJuvenilienFactor:Age + i + 1];
                                    [OverallTPDEOY replaceObjectAtIndex:i  withObject:[NSString stringWithFormat:@"%f", NewOverallTPDEOY]];
                                    
                                    double zzz = [[OtherRiderOverallTPDEOY objectAtIndex: i ] doubleValue ] + tempRiderSA * [self ReturnJuvenilienFactor:Age + i + 1];
                                    [OtherRiderOverallTPDEOY replaceObjectAtIndex:i  withObject:[NSString stringWithFormat:@"%f", zzz]];
                                    
                                }
                                else if ([tempRiderCode isEqualToString:@"TSER"]) {
                                    
                                    if (i == 0) {
                                        if (sqlite3_open([UL_RatesDatabasePath UTF8String], &contactDB) == SQLITE_OK){
                                            for (int q = 1; q < tempRiderTerm; q++) {
                                                
                                                QuerySQL = [NSString stringWithFormat:@"Select CSV from ES_TSER_CSV Where Age = \"%d\" AND RiderTerm = '%d' AND policyYear = '%d' ", Age, tempRiderTerm, q];
                                                
                                                //NSLog(@"%@", QuerySQL);
                                                if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
                                                    if (sqlite3_step(statement) == SQLITE_ROW) {
                                                        [Rate addObject: [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 0)]];
                                                        
                                                    }
                                                    sqlite3_finalize(statement);
                                                }
                                            }
                                            
                                            sqlite3_close(contactDB);
                                        }
                                        
                                        if (Rate.count < [strCovPeriod intValue]) {
                                            
                                            int rowsToAdd = [strCovPeriod intValue] - Rate.count;
                                            for (int u =0; u<rowsToAdd; u++) {
                                                [Rate addObject:@"0.00"];
                                            }
                                        }
                                    }
                                    
                                    double actualPremium = 0.0;
                                    if([tempHL isEqualToString:@"(null)"] || [tempHL isEqualToString:@"0"] || [tempHL isEqualToString:@""] ) {
                                        actualPremium = tempPremium;
                                    }
                                    else{
                                        if(i + 1 <= [tempHLTerm intValue ] ){
                                            actualPremium = tempPremium;
                                        }
                                        else{
                                            actualPremium = tempPremium - [tempRiderLoadingPrem doubleValue];
                                        }
                                    }
                                    
                                    [tempCol1 addObject:[NSString stringWithFormat:@"%.2f", i + 1 > [tempRiderPaymentTerm intValue] ? 0.00 : actualPremium]];
                                    [tempCol2 addObject:[NSString stringWithFormat:@"%.0f", tempRiderSA *[self ReturnJuvenilienFactor:Age + i + 1]]];
                                    [tempCol3 addObject:[NSString stringWithFormat:@"%.3f", [[Rate objectAtIndex:i ]doubleValue ] * tempRiderSA/1000.00   ]];
                                    [tempCol4 addObject:[NSString stringWithFormat:@"-"]];
                                    [tempCol5 addObject:[NSString stringWithFormat:@"%.3f", (actualPremium) * [[Comm objectAtIndex:i] doubleValue ]/100.00]];
                                    
                                    tempTotalRiderSurrenderValue = [[TotalRiderSurrenderValue objectAtIndex:i] doubleValue ];
                                    tempTotalRiderSurrenderValue = tempTotalRiderSurrenderValue + [[tempCol2 objectAtIndex:i] doubleValue ];
                                    [TotalRiderSurrenderValue replaceObjectAtIndex:i withObject:[NSString stringWithFormat:@"%.3f", tempTotalRiderSurrenderValue]];
                                    
                                    double NewOverallTPDBegin = [[OverallTPDBegin objectAtIndex: i ] doubleValue ] + (tempRiderSA * [self ReturnJuvenilienFactor:Age + i + 1]);
                                    [OverallTPDBegin replaceObjectAtIndex:i  withObject:[NSString stringWithFormat:@"%f", NewOverallTPDBegin]];
                                    
                                    double NewOverallTPDEOY = 0.00;
                                    
                                    NewOverallTPDEOY = [[OverallTPDEOY objectAtIndex: i ] doubleValue ] + tempRiderSA * [self ReturnJuvenilienFactor:Age + i + 1];
                                    //double NewOverallTPDEOY = [[OverallTPDEOY objectAtIndex: i ] doubleValue ] + tempRiderSA * [self ReturnJuvenilienFactor:Age + i + 1];
                                    [OverallTPDEOY replaceObjectAtIndex:i  withObject:[NSString stringWithFormat:@"%f", NewOverallTPDEOY]];
                                    
                                    double zzz = [[OtherRiderOverallTPDEOY objectAtIndex: i ] doubleValue ] + tempRiderSA * [self ReturnJuvenilienFactor:Age + i + 1];
                                    [OtherRiderOverallTPDEOY replaceObjectAtIndex:i  withObject:[NSString stringWithFormat:@"%f", zzz]];
                                    
                                }
                                else {
                                    //no more rider
                                }
                            }
                            else {
                                if ([tempRiderCode isEqualToString:@"CIWP"] || [tempRiderCode isEqualToString:@"TPDWP"] ||
                                    [tempRiderCode isEqualToString:@"PR"] || [tempRiderCode isEqualToString:@"LCWP"] || [tempRiderCode isEqualToString:@"TSR"] || [tempRiderCode isEqualToString:@"TSER"]) {
                                    
                                    //[tempCol1 addObject:[NSString stringWithFormat:@"0.00", tempPremium]];
                                    [tempCol1 addObject:[NSString stringWithFormat:@"0.00"]];
                                    [tempCol2 addObject:[NSString stringWithFormat:@"0"]];
                                    [tempCol3 addObject:[NSString stringWithFormat:@"0"]];
                                    [tempCol4 addObject:[NSString stringWithFormat:@"-"]];
                                    [tempCol5 addObject:[NSString stringWithFormat:@"0.00"]];
                                }
                                
                                else if ([tempRiderCode isEqualToString:@"LSR"]) {
                                    
                                    [tempCol1 addObject:[NSString stringWithFormat:@"0.00"]];
                                    [tempCol2 addObject:[NSString stringWithFormat:@"0"] ];
                                    [tempCol3 addObject:[NSString stringWithFormat:@"0"]];
                                    [tempCol4 addObject:[NSString stringWithFormat:@"-"]];
                                    [tempCol5 addObject:[NSString stringWithFormat:@"0.00"]];
                                }
                                else {
                                    [tempCol1 addObject:[NSString stringWithFormat:@"0.00"]];
                                    [tempCol2 addObject:[NSString stringWithFormat:@"-"]];
                                    [tempCol3 addObject:[NSString stringWithFormat:@"-"]];
                                    [tempCol4 addObject:[NSString stringWithFormat:@"-"]];
                                    [tempCol5 addObject:[NSString stringWithFormat:@"0.00"]];
                                }
                                
                            
                            }
                            
                            //EntireTotalPremiumPaid = EntireTotalPremiumPaid + [[tempCol1 objectAtIndex:i + 3] doubleValue ]; //i +3 to skip the first 3 items
                            
                        }
                        
                        
                        if (Rider == 0){
                            for (int p =0; p < ([strCovPeriod intValue] > 30 ? 30 : [strCovPeriod intValue]) + 2; p++) {
                                [RiderCol1 addObject:[tempCol1 objectAtIndex:p]];
                                [RiderCol2 addObject:[tempCol2 objectAtIndex:p]];
                                [RiderCol3 addObject:[tempCol3 objectAtIndex:p]];
                                [RiderCol4 addObject:[tempCol4 objectAtIndex:p]];
                                [Rider1DDCost addObject:[tempCol5 objectAtIndex:p]];
                                
                                if (p >= 2) {
                                    double NewOverallTotalPremiumPaid = [[OverallTotalPremiumPaid objectAtIndex:p - 2 ] doubleValue ] +
                                    [[tempCol1 objectAtIndex:p] doubleValue ];
                                    [OverallTotalPremiumPaid replaceObjectAtIndex:p - 2 withObject:[NSString stringWithFormat:@"%f", NewOverallTotalPremiumPaid]];
                                    
                                    double NewOverallFullSurrenderValue = [[OverallFullSurrenderValue objectAtIndex:p - 2 ] doubleValue ] +
                                    [[tempCol3 objectAtIndex:p] doubleValue ];
                                    [OverallFullSurrenderValue replaceObjectAtIndex:p - 2 withObject:[NSString stringWithFormat:@"%f", NewOverallFullSurrenderValue]];
                                }
                                
                                
                            }
                        }
                        else if (Rider == 1){
                            for (int p =0; p < ([strCovPeriod intValue] > 30 ? 30 : [strCovPeriod intValue]) + 2; p++) {
                                [RiderCol5 addObject:[tempCol1 objectAtIndex:p]];
                                [RiderCol6 addObject:[tempCol2 objectAtIndex:p]];
                                [RiderCol7 addObject:[tempCol3 objectAtIndex:p]];
                                [RiderCol8 addObject:[tempCol4 objectAtIndex:p]];
                                [Rider2DDCost addObject:[tempCol5 objectAtIndex:p]];
                                
                                if (p >= 2) {
                                    double NewOverallTotalPremiumPaid = [[OverallTotalPremiumPaid objectAtIndex:p - 2] doubleValue ] +
                                    [[tempCol1 objectAtIndex:p] doubleValue ];
                                    [OverallTotalPremiumPaid replaceObjectAtIndex:p - 2 withObject:[NSString stringWithFormat:@"%f", NewOverallTotalPremiumPaid]];
                                    
                                    double NewOverallFullSurrenderValue = [[OverallFullSurrenderValue objectAtIndex:p - 2 ] doubleValue ] +
                                    [[tempCol3 objectAtIndex:p] doubleValue ];
                                    [OverallFullSurrenderValue replaceObjectAtIndex:p - 2 withObject:[NSString stringWithFormat:@"%f", NewOverallFullSurrenderValue]];
                                }
                                
                                
                            }
                        }
                        else if (Rider == 2){
                            for (int p =0; p < ([strCovPeriod intValue] > 30 ? 30 : [strCovPeriod intValue]) + 2; p++) {
                                [RiderCol9 addObject:[tempCol1 objectAtIndex:p]];
                                [RiderCol10 addObject:[tempCol2 objectAtIndex:p]];
                                [RiderCol11 addObject:[tempCol3 objectAtIndex:p]];
                                [RiderCol12 addObject:[tempCol4 objectAtIndex:p]];
                                [Rider3DDCost addObject:[tempCol5 objectAtIndex:p]];
                                
                                if (p >= 2) {
                                    double NewOverallTotalPremiumPaid = [[OverallTotalPremiumPaid objectAtIndex:p - 2 ] doubleValue ] +
                                    [[tempCol1 objectAtIndex:p] doubleValue ];
                                    [OverallTotalPremiumPaid replaceObjectAtIndex:p - 2 withObject:[NSString stringWithFormat:@"%f", NewOverallTotalPremiumPaid]];
                                    
                                    double NewOverallFullSurrenderValue = [[OverallFullSurrenderValue objectAtIndex:p - 2 ] doubleValue ] +
                                    [[tempCol3 objectAtIndex:p] doubleValue ];
                                    [OverallFullSurrenderValue replaceObjectAtIndex:p - 2 withObject:[NSString stringWithFormat:@"%f", NewOverallFullSurrenderValue]];
                                }
                                
                                
                            }
                        }
                        
                        
                        
                        Rate = Nil;
                        Comm = Nil;
                        tempRiderCode = Nil;
                        tempRiderDesc = Nil;
                        tempRiderPlanOption = Nil;
                        tempCol1 = Nil;
                        tempCol2 = Nil;
                        tempCol3 = Nil;
                        tempCol4 = Nil;
                        
                    }
                    else {
                        if (Rider == 1) {
                            for (int row = 0; row < ([strCovPeriod intValue] > 30 ? 30 : [strCovPeriod intValue]) + 2; row++){
                                [RiderCol5 addObject:@"-"];
                                [RiderCol6 addObject:@"-"];
                                [RiderCol7 addObject:@"-"];
                                [RiderCol8 addObject:@"-"];
                                [Rider2DDCost addObject:@"0.00"];
                            }
                        }
                        if (Rider == 2) {
                            for (int row = 0; row < ([strCovPeriod intValue] > 30 ? 30 : [strCovPeriod intValue]) + 2; row++){
                                [RiderCol9 addObject:@"-"];
                                [RiderCol10 addObject:@"-"];
                                [RiderCol11 addObject:@"-"];
                                [RiderCol12 addObject:@"-"];
                                [Rider3DDCost addObject:@"0.00"];
                            }
                        }
                    }
                    
                    
                }
                
                if (sqlite3_open([databasePath UTF8String], &contactDB) == SQLITE_OK){
                    QuerySQL = [NSString stringWithFormat:@"Insert INTO UL_Temp_Trad_Rider(\"SINO\", \"SeqNo\", \"DataType\", \"PageNo\",\"col0_1\",\"col0_2\", "
                                " \"col1\",\"col2\",\"col3\",\"col4\",\"col5\",\"col6\",\"col7\",\"col8\",\"col9\",\"col10\",\"col11\",\"col12\",\"col13\" ) VALUES ("
                                " \"%@\", \"%d\", \"TITLE\", \"%d\", \"%@\", \"%@\", \"%@\", \"%@\", \"%@\", \"%@\", \"%@\", \"%@\", \"%@\" "
                                " , \"%@\", \"%@\", \"%@\", \"%@\", \"%@\", \"%@\" )", SINo, -2, page, @"", @"", [RiderCol1 objectAtIndex:0],[RiderCol2 objectAtIndex:0],
                                [RiderCol3 objectAtIndex:0],[RiderCol4 objectAtIndex:0],[RiderCol5 objectAtIndex:0],[RiderCol6 objectAtIndex:0],
                                [RiderCol7 objectAtIndex:0],[RiderCol8 objectAtIndex:0],[RiderCol9 objectAtIndex:0],[RiderCol10 objectAtIndex:0],
                                [RiderCol11 objectAtIndex:0],[RiderCol12 objectAtIndex:0], @"-"];
                    
                    
                    if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
                        if (sqlite3_step(statement) == SQLITE_DONE) {
                            
                        }
                        sqlite3_finalize(statement);
                    }
                    
                    QuerySQL = [NSString stringWithFormat:@"Insert INTO UL_Temp_Trad_Rider(\"SINO\", \"SeqNo\", \"DataType\", \"PageNo\",\"col0_1\",\"col0_2\", "
                                " \"col1\",\"col2\",\"col3\",\"col4\",\"col5\",\"col6\",\"col7\",\"col8\",\"col9\",\"col10\",\"col11\",\"col12\",\"col13\" ) VALUES ("
                                " \"%@\", \"%d\", \"HEADER\", \"%d\", \"%@\", \"%@\", \"%@\", \"%@\", \"%@\", \"%@\", \"%@\", \"%@\", \"%@\" "
                                " , \"%@\", \"%@\", \"%@\", \"%@\", \"%@\",\"%@\" )", SINo, -1, page, @"Policy Year", @"Life Assured Age at the end of Year",
                                [RiderCol1 objectAtIndex:1],[RiderCol2 objectAtIndex:1],
                                [RiderCol3 objectAtIndex:1],[RiderCol4 objectAtIndex:1],[RiderCol5 objectAtIndex:1],[RiderCol6 objectAtIndex:1],
                                [RiderCol7 objectAtIndex:1],[RiderCol8 objectAtIndex:1],[RiderCol9 objectAtIndex:1],[RiderCol10 objectAtIndex:1],
                                [RiderCol11 objectAtIndex:1],[RiderCol12 objectAtIndex:1], @"-"];
                    
                    
                    if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
                        if (sqlite3_step(statement) == SQLITE_DONE) {
                            
                        }
                        sqlite3_finalize(statement);
                    }
                    
                    for (int j=1; j <= ([strCovPeriod intValue] > 30 ? 30 : [strCovPeriod intValue]); j++) {
                        
                        if (j <= [strCovPeriod intValue]) {
                            
                            double tempBull = round([[BullSurrender objectAtIndex:j-1]doubleValue ]);
                            
                            int currentAge = Age + j;
                            
                            NSString *strSeqNo = @"";
                            if (j < 10) {
                                strSeqNo = [NSString stringWithFormat:@"0%d", j];
                            }
                            else {
                                strSeqNo = [NSString stringWithFormat:@"%d", j];
                            }
                            
                            
                            
                            if (tempBull >= 0) {
                                NSString *value1 = [[RiderCol1 objectAtIndex:j + 1] isEqualToString: @"-"] ? @"-" : [NSString stringWithFormat:@"%.2f", [[RiderCol1 objectAtIndex:j + 1] doubleValue ]];
                                NSString *value2 = [[RiderCol2 objectAtIndex:j + 1] isEqualToString: @"-"] ? @"-" : [NSString stringWithFormat:@"%.0f", round([[RiderCol2 objectAtIndex:j + 1] doubleValue ])];
                                NSString *value3 = [[RiderCol3 objectAtIndex:j + 1] isEqualToString: @"-"] ? @"-" : [NSString stringWithFormat:@"%.0f", round([[RiderCol3 objectAtIndex:j + 1] doubleValue ])];
                                NSString *value4 = [[RiderCol4 objectAtIndex:j + 1] isEqualToString: @"-"] ? @"-" : [NSString stringWithFormat:@"%.0f", round([[RiderCol4 objectAtIndex:j + 1] doubleValue ])];
                                NSString *value5 = [[RiderCol5 objectAtIndex:j + 1] isEqualToString: @"-"] ? @"-" : [NSString stringWithFormat:@"%.2f", [[RiderCol5 objectAtIndex:j + 1] doubleValue ]];
                                NSString *value6 = [[RiderCol6 objectAtIndex:j + 1] isEqualToString: @"-"] ? @"-" : [NSString stringWithFormat:@"%.0f", round([[RiderCol6 objectAtIndex:j + 1] doubleValue ])];
                                NSString *value7 = [[RiderCol7 objectAtIndex:j + 1] isEqualToString: @"-"] ? @"-" : [NSString stringWithFormat:@"%.0f", round([[RiderCol7 objectAtIndex:j + 1] doubleValue ])];
                                NSString *value8 = [[RiderCol8 objectAtIndex:j + 1] isEqualToString: @"-"] ? @"-" : [NSString stringWithFormat:@"%.0f", round([[RiderCol8 objectAtIndex:j + 1] doubleValue ])];
                                NSString *value9 = [[RiderCol9 objectAtIndex:j + 1] isEqualToString: @"-"] ? @"-" : [NSString stringWithFormat:@"%.2f", [[RiderCol9 objectAtIndex:j + 1] doubleValue ]];
                                NSString *value10 = [[RiderCol10 objectAtIndex:j + 1] isEqualToString: @"-"] ? @"-" : [NSString stringWithFormat:@"%.0f", round([[RiderCol10 objectAtIndex:j + 1] doubleValue ])];
                                NSString *value11 = [[RiderCol11 objectAtIndex:j + 1] isEqualToString: @"-"] ? @"-" : [NSString stringWithFormat:@"%.0f", round([[RiderCol11 objectAtIndex:j + 1] doubleValue ])];
                                NSString *value12 = [[RiderCol12 objectAtIndex:j + 1] isEqualToString: @"-"] ? @"-" : [NSString stringWithFormat:@"%.0f", round([[RiderCol12 objectAtIndex:j + 1] doubleValue ])];
                                
                                double TotalDDCost = [[Rider1DDCost objectAtIndex:j + 1] doubleValue ] + [[Rider2DDCost objectAtIndex:j + 1] doubleValue ] + [[Rider3DDCost objectAtIndex:j + 1] doubleValue ];
                                
                                QuerySQL = [NSString stringWithFormat:@"Insert INTO UL_Temp_Trad_Rider(\"SINO\", \"SeqNo\", \"DataType\", \"PageNo\",\"col0_1\",\"col0_2\", "
                                            " \"col1\",\"col2\",\"col3\",\"col4\",\"col5\",\"col6\",\"col7\",\"col8\",\"col9\",\"col10\",\"col11\",\"col12\",\"col13\" ) VALUES ("
                                            " \"%@\", \"%@\", \"DATA\", \"%d\", \"%d\", \"%d\", \"%@\", \"%@\", \"%@\", \"%@\", \"%@\", \"%@\", \"%@\" "
                                            " , \"%@\", \"%@\", \"%@\", \"%@\", \"%@\", '%.0f' )", SINo, strSeqNo , page, j, currentAge, value1,value2,
                                            value3,value4,value5,value6,value7, value8, value9, value10, value11, value12, round(TotalDDCost)];
                                
                                
                                if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
                                    if (sqlite3_step(statement) == SQLITE_DONE) {
                                        
                                    }
                                    sqlite3_finalize(statement);
                                }
                                
                                value1 = Nil;
                                value2 = Nil;
                                value3 = Nil;
                                value4 = Nil;
                                value5 = Nil;
                                value6 = Nil;
                                value7 = Nil;
                                value8 = Nil;
                                value9 = Nil;
                                value10 = Nil;
                                value11 = Nil;
                                value12 = Nil;
                                
                            }
                            else
                            {
                                QuerySQL = [NSString stringWithFormat:@"Insert INTO UL_Temp_Trad_Rider(\"SINO\", \"SeqNo\", \"DataType\", \"PageNo\",\"col0_1\",\"col0_2\", "
                                            " \"col1\",\"col2\",\"col3\",\"col4\",\"col5\",\"col6\",\"col7\",\"col8\",\"col9\",\"col10\",\"col11\",\"col12\",\"col13\" ) VALUES ("
                                            " \"%@\", \"%@\", \"DATA\", \"%d\", \"%d\", \"%d\", \"%@\", \"%@\", \"%@\", \"%@\", \"%@\", \"%@\", \"%@\" "
                                            " , \"%@\", \"%@\", \"%@\", \"%@\", \"%@\", '%.0f' )", SINo, strSeqNo , page, j, currentAge, @"-",@"-",
                                            @"-",@"-",@"-",@"-",@"-", @"-", @"-", @"-", @"-", @"-", -1.00];
                                
                                
                                if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
                                    if (sqlite3_step(statement) == SQLITE_DONE) {
                                        
                                    }
                                    sqlite3_finalize(statement);
                                }
                            }
                            
                            
                            
                            
                            strSeqNo = Nil;
                        }
                    }
                    
                    sqlite3_close(contactDB);
                }
                
                //NSLog(@"%d %d %d", Rider1DDCost.count, Rider2DDCost.count, Rider3DDCost.count);
                /*
                if (sqlite3_open([databasePath UTF8String], &contactDB) == SQLITE_OK){
                    
                    
                    sqlite3_close(contactDB);
                
                }
                */
                
                
                
                RiderCol1 = Nil;
                RiderCol2 = Nil;
                RiderCol3 = Nil;
                RiderCol4 = Nil;
                RiderCol5 = Nil;
                RiderCol6 = Nil;
                RiderCol7 = Nil;
                RiderCol8 = Nil;
                RiderCol9 = Nil;
                RiderCol10 = Nil;
                RiderCol11 = Nil;
                RiderCol12 = Nil;
                
            }
            /*
             if ([PDSorSI isEqualToString:@"SI"]) {
             for (int v= 0; v < PolicyTerm; v ++) {
             double tempA;
             double tempB;
             tempA = [[SummaryNonGuaranteedSurrenderValueA objectAtIndex:v] doubleValue ];
             tempA = tempA + [[TotalRiderSurrenderValue objectAtIndex:v] doubleValue ];
             [SummaryNonGuaranteedSurrenderValueA replaceObjectAtIndex:v withObject: [NSString stringWithFormat:@"%.3f", tempA]];
             
             tempB = [[SummaryNonGuaranteedSurrenderValueB objectAtIndex:v] doubleValue ];
             tempB = tempB + [[TotalRiderSurrenderValue objectAtIndex:v] doubleValue ];
             [SummaryNonGuaranteedSurrenderValueB replaceObjectAtIndex:v withObject: [NSString stringWithFormat:@"%.3f", tempB]];
             
             if (v  == PolicyTerm - 1) {
             // EntireMaturityValueA = EntireMaturityValueA + [[SummaryNonGuaranteedSurrenderValueA objectAtIndex:v] doubleValue ];
             // EntireMaturityValueB = EntireMaturityValueB + [[SummaryNonGuaranteedSurrenderValueB objectAtIndex:v] doubleValue ];
             }
             
             }
             }
             */
            
            
            if ([OtherRiderPTypeCode indexOfObject:@"PY"] != NSNotFound ) {
                
                [self InsertToUL_Temp_Trad_Rider_Other:NoOfPages + 1 andPayorORSecond:@"PAYOR"];
                
                if ([OtherRiderPTypeSeq indexOfObject:@"2"] != NSNotFound ) {
                    
                    [self InsertToUL_Temp_Trad_Rider_Other:NoOfPages + 2 andPayorORSecond:@"SECOND"];
                    
                }
                
            }
            else{
                if ([OtherRiderPTypeSeq indexOfObject:@"2"] != NSNotFound ) {
                    
                    [self InsertToUL_Temp_Trad_Rider_Other:NoOfPages + 1 andPayorORSecond:@"SECOND"];
                    
                }
            }
        
            

        }
        NSLog(@"insert to UL_Temp_Trad_Rider --- End");
    }
    
    
    statement = Nil;
    QuerySQL = Nil;
    TotalRiderSurrenderValue = Nil;
	
}

-(void)InsertToUL_Temp_Trad_Rider_Other: (int)NextPageNo andPayorORSecond :(NSString *) aaPayorOrSecond{
    
    sqlite3_stmt *statement;
    NSString *QuerySQL;
    NSMutableArray *TotalRiderSurrenderValue = [[NSMutableArray alloc] init ];
    
    if (OtherRiderCode.count > 0) {
		NSLog(@"insert to UL_Temp_Trad_Rider 2 --- start");
		
        for (int x = 0; x < ([strCovPeriod intValue] > 30 ? 30 : [strCovPeriod intValue]); x++) {
            [TotalRiderSurrenderValue addObject:@"0.00"];
        }
        
        int page;
        
        int NoOfPages = 1;
        
        for (page =1; page <=NoOfPages; page++) {
            
            NSMutableArray *RiderCol1 = [[NSMutableArray alloc] init ];
            NSMutableArray *RiderCol2 = [[NSMutableArray alloc] init ];
            NSMutableArray *RiderCol3 = [[NSMutableArray alloc] init ];
            NSMutableArray *RiderCol4 = [[NSMutableArray alloc] init ];
            NSMutableArray *RiderCol5 = [[NSMutableArray alloc] init ];
            NSMutableArray *RiderCol6 = [[NSMutableArray alloc] init ];
            NSMutableArray *RiderCol7 = [[NSMutableArray alloc] init ];
            NSMutableArray *RiderCol8 = [[NSMutableArray alloc] init ];
            NSMutableArray *RiderCol9 = [[NSMutableArray alloc] init ];
            NSMutableArray *RiderCol10 = [[NSMutableArray alloc] init ];
            NSMutableArray *RiderCol11 = [[NSMutableArray alloc] init ];
            NSMutableArray *RiderCol12 = [[NSMutableArray alloc] init ];
			NSMutableArray *Rider1DDCost = [[NSMutableArray alloc] init ];
            NSMutableArray *Rider2DDCost = [[NSMutableArray alloc] init ];
            NSMutableArray *Rider3DDCost = [[NSMutableArray alloc] init ];
			
            
            
            for (int Rider =0; Rider < 3; Rider++) {
                int item = 3 * (page - 1) + Rider;
                
                if (item < 1) {
                    
                    int position = 0;
                    
                    
                    
                    if ([aaPayorOrSecond isEqualToString:@"PAYOR"]) {
                        position = [OtherRiderPTypeCode indexOfObject:@"PY"];
                    }
                    else{
                        position = [OtherRiderPTypeSeq indexOfObject:@"2"];
                    }
                    
                    NSString *tempRiderCode = [OtherRiderCode objectAtIndex:position];
                    NSString *tempRiderDesc = [OtherRiderDesc objectAtIndex:position];
                    NSString *tempRiderPlanOption = [OtherRiderPlanOption objectAtIndex:position];
                    double tempRiderSA = [[OtherRiderSA objectAtIndex:position] doubleValue ];
                    int tempRiderTerm = [[OtherRiderTerm objectAtIndex:position] intValue ];
                    double tempPremium = [[OtherRiderPremium objectAtIndex:position] doubleValue ];
                    NSMutableArray *tempCol1 = [[NSMutableArray alloc] init ];
                    NSMutableArray *tempCol2 = [[NSMutableArray alloc] init ];
                    NSMutableArray *tempCol3 = [[NSMutableArray alloc] init ];
                    NSMutableArray *tempCol4 = [[NSMutableArray alloc] init ];
					NSMutableArray *tempCol5 = [[NSMutableArray alloc] init ];
					NSString *tempHL = [OtherRiderHL objectAtIndex:position];
                    NSString *tempHLTerm = [OtherRiderHLTerm objectAtIndex:position];
					NSString *tempRiderPaymentTerm= [OtherRiderPaymentTerm objectAtIndex:position];
                    //NSString *tempRiderPaymentChoice = [OtherRiderPaymentChoice objectAtIndex:position];
                    //double tempRiderLoadingPremium = [[OtherRiderLoadingPremium objectAtIndex:item] doubleValue];
                    //NSString *tempHLP = [OtherRiderHLP objectAtIndex:item];
					//NSString *tempHLPTerm = [OtherRiderHLPTerm objectAtIndex:item];
                    
					
					
					for (int row = 0; row < 3; row++) {
						
						if (row == 0) {
							[tempCol1 addObject:tempRiderDesc ];
							[tempCol2 addObject:@"" ];
							[tempCol3 addObject:@"" ];
							[tempCol4 addObject:@"" ];
							[tempCol5 addObject:@"" ];
						}
						
						if (row == 1) {
                            if ([EngOrBm isEqualToString:@"English"]) {
                                if ([tempRiderCode isEqualToString:@"PR"] || [tempRiderCode isEqualToString:@"LCWP"]   ) {
                                    [tempCol1 addObject:@"Annual Premium (Beg. of Year)" ];
                                    [tempCol2 addObject:@"Sum<br/>Assured" ];
                                    [tempCol3 addObject:@"Guaranteed<br/>Cash Surrender Value" ];
                                    [tempCol4 addObject:@"-" ];
                                    [tempCol5 addObject:@"-" ];
                                }
                            }
                            else{
                                if ([tempRiderCode isEqualToString:@"PR"] || [tempRiderCode isEqualToString:@"LCWP"]   ) {
                                    [tempCol1 addObject:@"Premium Tahunan (Permulaan Tahun)" ];
                                    [tempCol2 addObject:@"Jumlah Diinsuranskan" ];
                                    [tempCol3 addObject:@"Nilai Penyerahan Tunai Dijamin" ];
                                    [tempCol4 addObject:@"-" ];
                                    [tempCol5 addObject:@"-" ];
                                }
                            }

						}
						
						
					}
                    
					//double tempTotalRiderSurrenderValue = 0.00;
					NSMutableArray *Rate = [[NSMutableArray alloc] init ];
					NSMutableArray *Comm = [[NSMutableArray alloc] init ];
                    
					if (sqlite3_open([UL_RatesDatabasePath UTF8String], &contactDB) == SQLITE_OK){
						QuerySQL = [NSString stringWithFormat:@"Select Rate from ES_Sys_Rider_Commission Where RiderTerm = '%@' "
									, tempRiderPaymentTerm ];
						if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
							while (sqlite3_step(statement) == SQLITE_ROW) {
								[Comm addObject: [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 0)]];
								
							}
							sqlite3_finalize(statement);
						}
						
						sqlite3_close(contactDB);
					}
					
					if (Comm.count < [strCovPeriod intValue]) {
						
						int rowsToAdd = tempRiderTerm - Comm.count;
						for (int u =0; u<rowsToAdd; u++) {
							[Comm addObject:[Comm objectAtIndex:6]];
						}
					}
					
					for (int i = 0; i < ([strCovPeriod intValue] > 30 ? 30 : [strCovPeriod intValue]); i++) {
						
						if (i < tempRiderTerm) {
							
                            if ([tempRiderCode isEqualToString:@"LCWP"] || [tempRiderCode isEqualToString:@"PR"] ) {
								
                                if (i == 0) {
                                    if (sqlite3_open([UL_RatesDatabasePath UTF8String], &contactDB) == SQLITE_OK){
                                        if ([tempRiderCode isEqualToString:@"CIWP"] || [tempRiderCode isEqualToString:@"TPDWP"]) {
                                            QuerySQL = [NSString stringWithFormat:@"Select CSV from ES_Sys_Rider_CSV Where plancode = \"%@\" "
                                                        "AND FromAge = \"%d\" AND PolTerm = '%d' AND Sex = '%@' AND PremPayOpt = '%@' "
                                                        , tempRiderCode, Age, tempRiderTerm, [sex substringToIndex:1], tempRiderPaymentTerm];
                                            //NSLog(@"%@", QuerySQL);
                                        }
                                        else{
                                            if (PYAge > 0) {
                                                QuerySQL = [NSString stringWithFormat:@"Select CSV from ES_Sys_Rider_CSV Where plancode = \"%@\" "
                                                            "AND FromAge = \"%d\" AND PolTerm = '%d' AND Sex = '%@' AND PremPayOpt = '%@'"
                                                            , tempRiderCode, PYAge, tempRiderTerm, [PYSex substringToIndex:1], tempRiderPaymentTerm ];
                                            }
                                            else{
                                                QuerySQL = [NSString stringWithFormat:@"Select CSV from ES_Sys_Rider_CSV Where plancode = \"%@\" "
                                                            "AND FromAge = \"%d\" AND PolTerm = '%d' AND Sex = '%@' AND PremPayOpt = '%@'"
                                                            , tempRiderCode, SecAge, tempRiderTerm, [SecSex substringToIndex:1], tempRiderPaymentTerm ];
                                                
                                                //NSLog(@"%@", QuerySQL);
                                            }
                                            
                                        }
                                        
                                        if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
                                            while (sqlite3_step(statement) == SQLITE_ROW) {
                                                [Rate addObject: [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 0)]];
                                                
                                            }
                                            sqlite3_finalize(statement);
                                        }
                                        
                                        
                                        sqlite3_close(contactDB);
                                        
                                    }
                                    
                                    if (Rate.count < [strCovPeriod intValue]) {
                                        
                                        int rowsToAdd = [strCovPeriod intValue] - Rate.count;
                                        for (int u =0; u<rowsToAdd; u++) {
                                            [Rate addObject:@"0.00"];
                                        }
                                    }
                                    
                                    
                                }
                                
								double actualPremium = 0.0;
								if([tempHL isEqualToString:@"(null)"] || [tempHL isEqualToString:@"0"] || [tempHL isEqualToString:@""] ) {
									
									actualPremium = tempPremium;
								}
								else{
									if(i + 1 <= [tempHLTerm intValue ] ){
										actualPremium = tempPremium;
									}
									else{
										actualPremium = tempPremium - ((tempRiderSA *  tempRiderSA/100.00)/100.00) * [tempHL doubleValue];
									}
								}
								/*
                                 if (![tempTempHL isEqualToString:@"(null)"] ) {
                                 if (i + 1 > [tempTempHLTerm intValue]) {
                                 actualPremium = actualPremium - ((waiverRiderSA *  tempRiderSA/100)/100) * [tempTempHL doubleValue];
                                 }
                                 
                                 }
                                 */
                                //NSLog(@"%f", actualPremium);
								[tempCol1 addObject:[NSString stringWithFormat:@"%.2f", i + 1 > [tempRiderPaymentTerm intValue] ? 0.00 : actualPremium]];
								[tempCol2 addObject:[NSString stringWithFormat:@"%.3f", tempRiderSA]];
								[tempCol3 addObject:[NSString stringWithFormat:@"%.3f", [[Rate objectAtIndex:i ]doubleValue ] * tempRiderSA/100.00 ]];
								[tempCol4 addObject:[NSString stringWithFormat:@"-"]];
								[tempCol5 addObject:[NSString stringWithFormat:@"%.3f", (actualPremium) * [[Comm objectAtIndex:i] doubleValue ]/100.00]];
								if (i == 1) {
									/*
                                     [gWaiverAnnual addObject:[NSString stringWithFormat:@"%.9f", waiverRiderSA *  tempRiderSA/100.00] ];
                                     [gWaiverSemiAnnual addObject:[NSString stringWithFormat:@"%.9f", waiverRiderSASemiAnnual *  tempRiderSA/100.00] ];
                                     [gWaiverQuarterly addObject:[NSString stringWithFormat:@"%.9f", waiverRiderSAQuarterly *  tempRiderSA/100.00] ];
                                     [gWaiverMonthly addObject:[NSString stringWithFormat:@"%.9f", waiverRiderSAMonthly *  tempRiderSA/100.00] ];
                                     */
								}
								
							}
							
						}
						else {
							if ([tempRiderCode isEqualToString:@"PR"] || [tempRiderCode isEqualToString:@"LCWP"] ) {
								
								//[tempCol1 addObject:[NSString stringWithFormat:@"0.00", tempPremium]];
								[tempCol1 addObject:[NSString stringWithFormat:@"0.00"]];
								[tempCol2 addObject:[NSString stringWithFormat:@"0"]];
								[tempCol3 addObject:[NSString stringWithFormat:@"0"]];
								[tempCol4 addObject:[NSString stringWithFormat:@"-"]];
								[tempCol5 addObject:[NSString stringWithFormat:@"0.00"]];
							}
							else {
								[tempCol1 addObject:[NSString stringWithFormat:@"0.00"]];
								[tempCol2 addObject:[NSString stringWithFormat:@"-"]];
								[tempCol3 addObject:[NSString stringWithFormat:@"-"]];
								[tempCol4 addObject:[NSString stringWithFormat:@"-"]];
								[tempCol5 addObject:[NSString stringWithFormat:@"0.00"]];
							}
							
						}
						
						//EntireTotalPremiumPaid = EntireTotalPremiumPaid + [[tempCol1 objectAtIndex:i + 3] doubleValue ]; //i +3 to skip the first 3 items
						
					}
                    
                    
					if (Rider == 0){
						for (int p =0; p < ([strCovPeriod intValue] > 30 ? 30 : [strCovPeriod intValue]) + 2; p++) {
							[RiderCol1 addObject:[tempCol1 objectAtIndex:p]];
							[RiderCol2 addObject:[tempCol2 objectAtIndex:p]];
							[RiderCol3 addObject:[tempCol3 objectAtIndex:p]];
							[RiderCol4 addObject:[tempCol4 objectAtIndex:p]];
							[Rider1DDCost addObject:[tempCol5 objectAtIndex:p]];
							
							if (p >= 2) {
								double NewOverallTotalPremiumPaid = [[OverallTotalPremiumPaid objectAtIndex:p - 2 ] doubleValue ] +
								[[tempCol1 objectAtIndex:p] doubleValue ];
								[OverallTotalPremiumPaid replaceObjectAtIndex:p - 2 withObject:[NSString stringWithFormat:@"%f", NewOverallTotalPremiumPaid]];
								
								double NewOverallFullSurrenderValue = [[OverallFullSurrenderValue objectAtIndex:p - 2 ] doubleValue ] +
								[[tempCol3 objectAtIndex:p] doubleValue ];
								[OverallFullSurrenderValue replaceObjectAtIndex:p - 2 withObject:[NSString stringWithFormat:@"%f", NewOverallFullSurrenderValue]];
							}
							
                            
						}
					}
					else if (Rider == 1){
						for (int p =0; p < ([strCovPeriod intValue] > 30 ? 30 : [strCovPeriod intValue]) + 2; p++) {
							[RiderCol5 addObject:[tempCol1 objectAtIndex:p]];
							[RiderCol6 addObject:[tempCol2 objectAtIndex:p]];
							[RiderCol7 addObject:[tempCol3 objectAtIndex:p]];
							[RiderCol8 addObject:[tempCol4 objectAtIndex:p]];
							[Rider2DDCost addObject:[tempCol5 objectAtIndex:p]];
                            
							if (p >= 2) {
								double NewOverallTotalPremiumPaid = [[OverallTotalPremiumPaid objectAtIndex:p - 2] doubleValue ] +
								[[tempCol1 objectAtIndex:p] doubleValue ];
								[OverallTotalPremiumPaid replaceObjectAtIndex:p - 2 withObject:[NSString stringWithFormat:@"%f", NewOverallTotalPremiumPaid]];
								
								double NewOverallFullSurrenderValue = [[OverallFullSurrenderValue objectAtIndex:p - 2 ] doubleValue ] +
								[[tempCol3 objectAtIndex:p] doubleValue ];
								[OverallFullSurrenderValue replaceObjectAtIndex:p - 2 withObject:[NSString stringWithFormat:@"%f", NewOverallFullSurrenderValue]];
							}
							
                            
						}
					}
					else if (Rider == 2){
						for (int p =0; p < ([strCovPeriod intValue] > 30 ? 30 : [strCovPeriod intValue]) + 2; p++) {
							[RiderCol9 addObject:[tempCol1 objectAtIndex:p]];
							[RiderCol10 addObject:[tempCol2 objectAtIndex:p]];
							[RiderCol11 addObject:[tempCol3 objectAtIndex:p]];
							[RiderCol12 addObject:[tempCol4 objectAtIndex:p]];
							[Rider3DDCost addObject:[tempCol5 objectAtIndex:p]];
                            
							if (p >= 2) {
								double NewOverallTotalPremiumPaid = [[OverallTotalPremiumPaid objectAtIndex:p - 2 ] doubleValue ] +
								[[tempCol1 objectAtIndex:p] doubleValue ];
								[OverallTotalPremiumPaid replaceObjectAtIndex:p - 2 withObject:[NSString stringWithFormat:@"%f", NewOverallTotalPremiumPaid]];
								
								double NewOverallFullSurrenderValue = [[OverallFullSurrenderValue objectAtIndex:p - 2 ] doubleValue ] +
								[[tempCol3 objectAtIndex:p] doubleValue ];
								[OverallFullSurrenderValue replaceObjectAtIndex:p - 2 withObject:[NSString stringWithFormat:@"%f", NewOverallFullSurrenderValue]];
							}
							
                            
						}
					}
					
					
                    
                    Rate = Nil;
                    tempRiderCode = Nil;
                    tempRiderDesc = Nil;
                    tempRiderPlanOption = Nil;
                    tempCol1 = Nil;
                    tempCol2 = Nil;
                    tempCol3 = Nil;
                    tempCol4 = Nil;
                    
                }
                else {
                    if (Rider == 1) {
                        for (int row = 0; row < ([strCovPeriod intValue] > 30 ? 30 : [strCovPeriod intValue]) + 2; row++){
                            [RiderCol5 addObject:@"-"];
                            [RiderCol6 addObject:@"-"];
                            [RiderCol7 addObject:@"-"];
                            [RiderCol8 addObject:@"-"];
							[Rider2DDCost addObject:@"0.00"];
                        }
                    }
                    if (Rider == 2) {
                        for (int row = 0; row < (([strCovPeriod intValue] > 30 ? 30 : [strCovPeriod intValue])) + 2; row++){
                            [RiderCol9 addObject:@"-"];
                            [RiderCol10 addObject:@"-"];
                            [RiderCol11 addObject:@"-"];
                            [RiderCol12 addObject:@"-"];
							[Rider3DDCost addObject:@"0.00"];
                        }
                    }
                }
                
                
            }
            
            if (sqlite3_open([databasePath UTF8String], &contactDB) == SQLITE_OK){
                QuerySQL = [NSString stringWithFormat:@"Insert INTO UL_Temp_Trad_Rider(\"SINO\", \"SeqNo\", \"DataType\", \"PageNo\",\"col0_1\",\"col0_2\", "
                            " \"col1\",\"col2\",\"col3\",\"col4\",\"col5\",\"col6\",\"col7\",\"col8\",\"col9\",\"col10\",\"col11\",\"col12\",\"col13\" ) VALUES ("
                            " \"%@\", \"%d\", \"TITLE\", \"%d\", \"%@\", \"%@\", \"%@\", \"%@\", \"%@\", \"%@\", \"%@\", \"%@\", \"%@\" "
                            " , \"%@\", \"%@\", \"%@\", \"%@\", \"%@\", \"%@\" )", SINo, -2, NextPageNo, aaPayorOrSecond, @"", [RiderCol1 objectAtIndex:0],[RiderCol2 objectAtIndex:0],
                            [RiderCol3 objectAtIndex:0],[RiderCol4 objectAtIndex:0],[RiderCol5 objectAtIndex:0],[RiderCol6 objectAtIndex:0],
                            [RiderCol7 objectAtIndex:0],[RiderCol8 objectAtIndex:0],[RiderCol9 objectAtIndex:0],[RiderCol10 objectAtIndex:0],
                            [RiderCol11 objectAtIndex:0],[RiderCol12 objectAtIndex:0], @"-"];
                
                
                if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
                    if (sqlite3_step(statement) == SQLITE_DONE) {
						
                    }
                    sqlite3_finalize(statement);
                }
                
                QuerySQL = [NSString stringWithFormat:@"Insert INTO UL_Temp_Trad_Rider(\"SINO\", \"SeqNo\", \"DataType\", \"PageNo\",\"col0_1\",\"col0_2\", "
                            " \"col1\",\"col2\",\"col3\",\"col4\",\"col5\",\"col6\",\"col7\",\"col8\",\"col9\",\"col10\",\"col11\",\"col12\",\"col13\" ) VALUES ("
                            " \"%@\", \"%d\", \"HEADER\", \"%d\", \"%@\", \"%@\", \"%@\", \"%@\", \"%@\", \"%@\", \"%@\", \"%@\", \"%@\" "
                            " , \"%@\", \"%@\", \"%@\", \"%@\", \"%@\",\"%@\" )", SINo, -1, NextPageNo, @"Policy Year", @"Life Assured Age at the end of Year",
                            [RiderCol1 objectAtIndex:1],[RiderCol2 objectAtIndex:1],
                            [RiderCol3 objectAtIndex:1],[RiderCol4 objectAtIndex:1],[RiderCol5 objectAtIndex:1],[RiderCol6 objectAtIndex:1],
                            [RiderCol7 objectAtIndex:1],[RiderCol8 objectAtIndex:1],[RiderCol9 objectAtIndex:1],[RiderCol10 objectAtIndex:1],
                            [RiderCol11 objectAtIndex:1],[RiderCol12 objectAtIndex:1], @"-"];
                
                
                if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
                    if (sqlite3_step(statement) == SQLITE_DONE) {
                        
                    }
                    sqlite3_finalize(statement);
                }
                
                sqlite3_close(contactDB);
            }
            
			//NSLog(@"%d %d %d", Rider1DDCost.count, Rider2DDCost.count, Rider3DDCost.count);
            
             if (sqlite3_open([databasePath UTF8String], &contactDB) == SQLITE_OK){
              
                 for (int j=1; j <= (MIN([strCovPeriod intValue], 30)); j++) {
                 //for (int j=1; j <= ([strCovPeriod intValue] > 30 ? 30 : [strCovPeriod intValue]); j++) {
                     if (j <= [strCovPeriod intValue]) {
                         int currentAge =  0;
                         
                         if ([aaPayorOrSecond isEqualToString:@"PAYOR"]) {
                             currentAge = PYAge + j;
                         }
                         else
                         {
                             currentAge = SecAge + j;
                         }
                         
                         NSString *strSeqNo = @"";
                         if (j < 10) {
                             strSeqNo = [NSString stringWithFormat:@"0%d", j];
                         }
                         else {
                             strSeqNo = [NSString stringWithFormat:@"%d", j];
                         }
                         
                         double tempBull = round([[BullSurrender objectAtIndex:j-1]doubleValue ]);
                         
                         
                         if (tempBull >= 0) {
                             NSString *value1 = [[RiderCol1 objectAtIndex:j + 1] isEqualToString: @"-"] ? @"-" : [NSString stringWithFormat:@"%.2f", [[RiderCol1 objectAtIndex:j + 1] doubleValue ]];
                             NSString *value2 = [[RiderCol2 objectAtIndex:j + 1] isEqualToString: @"-"] ? @"-" : [NSString stringWithFormat:@"%.0f", round([[RiderCol2 objectAtIndex:j + 1] doubleValue ])];
                             NSString *value3 = [[RiderCol3 objectAtIndex:j + 1] isEqualToString: @"-"] ? @"-" : [NSString stringWithFormat:@"%.0f", round([[RiderCol3 objectAtIndex:j + 1] doubleValue ])];
                             NSString *value4 = [[RiderCol4 objectAtIndex:j + 1] isEqualToString: @"-"] ? @"-" : [NSString stringWithFormat:@"%.0f", round([[RiderCol4 objectAtIndex:j + 1] doubleValue ])];
                             NSString *value5 = [[RiderCol5 objectAtIndex:j + 1] isEqualToString: @"-"] ? @"-" : [NSString stringWithFormat:@"%.2f", [[RiderCol5 objectAtIndex:j + 1] doubleValue ]];
                             NSString *value6 = [[RiderCol6 objectAtIndex:j + 1] isEqualToString: @"-"] ? @"-" : [NSString stringWithFormat:@"%.0f", round([[RiderCol6 objectAtIndex:j + 1] doubleValue ])];
                             NSString *value7 = [[RiderCol7 objectAtIndex:j + 1] isEqualToString: @"-"] ? @"-" : [NSString stringWithFormat:@"%.0f", round([[RiderCol7 objectAtIndex:j + 1] doubleValue ])];
                             NSString *value8 = [[RiderCol8 objectAtIndex:j + 1] isEqualToString: @"-"] ? @"-" : [NSString stringWithFormat:@"%.0f", round([[RiderCol8 objectAtIndex:j + 1] doubleValue ])];
                             NSString *value9 = [[RiderCol9 objectAtIndex:j + 1] isEqualToString: @"-"] ? @"-" : [NSString stringWithFormat:@"%.2f", [[RiderCol9 objectAtIndex:j + 1] doubleValue ]];
                             NSString *value10 = [[RiderCol10 objectAtIndex:j + 1] isEqualToString: @"-"] ? @"-" : [NSString stringWithFormat:@"%.0f", round([[RiderCol10 objectAtIndex:j + 1] doubleValue ])];
                             NSString *value11 = [[RiderCol11 objectAtIndex:j + 1] isEqualToString: @"-"] ? @"-" : [NSString stringWithFormat:@"%.0f", round([[RiderCol11 objectAtIndex:j + 1] doubleValue ])];
                             NSString *value12 = [[RiderCol12 objectAtIndex:j + 1] isEqualToString: @"-"] ? @"-" : [NSString stringWithFormat:@"%.0f", round([[RiderCol12 objectAtIndex:j + 1] doubleValue ])];
                             
                             double TotalDDCost = [[Rider1DDCost objectAtIndex:j + 1] doubleValue ] + [[Rider2DDCost objectAtIndex:j + 1] doubleValue ] + [[Rider3DDCost objectAtIndex:j + 1] doubleValue ];
                             
                             QuerySQL = [NSString stringWithFormat:@"Insert INTO UL_Temp_Trad_Rider(\"SINO\", \"SeqNo\", \"DataType\", \"PageNo\",\"col0_1\",\"col0_2\", "
                                         " \"col1\",\"col2\",\"col3\",\"col4\",\"col5\",\"col6\",\"col7\",\"col8\",\"col9\",\"col10\",\"col11\",\"col12\",\"col13\" ) VALUES ("
                                         " \"%@\", \"%@\", \"DATA\", \"%d\", \"%d\", \"%d\", \"%@\", \"%@\", \"%@\", \"%@\", \"%@\", \"%@\", \"%@\" "
                                         " , \"%@\", \"%@\", \"%@\", \"%@\", \"%@\", '%.0f' )", SINo, strSeqNo , NextPageNo, j, currentAge, value1,value2,
                                         value3,value4,value5,value6,value7, value8, value9, value10, value11, value12, round(TotalDDCost)];
                             
                             
                             if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
                                 if (sqlite3_step(statement) == SQLITE_DONE) {
                                     
                                 }
                                 sqlite3_finalize(statement);
                             }
                             
                             value1 = Nil;
                             value2 = Nil;
                             value3 = Nil;
                             value4 = Nil;
                             value5 = Nil;
                             value6 = Nil;
                             value7 = Nil;
                             value8 = Nil;
                             value9 = Nil;
                             value10 = Nil;
                             value11 = Nil;
                             value12 = Nil;
                             
                         }
                         else
                         {
                             QuerySQL = [NSString stringWithFormat:@"Insert INTO UL_Temp_Trad_Rider(\"SINO\", \"SeqNo\", \"DataType\", \"PageNo\",\"col0_1\",\"col0_2\", "
                                         " \"col1\",\"col2\",\"col3\",\"col4\",\"col5\",\"col6\",\"col7\",\"col8\",\"col9\",\"col10\",\"col11\",\"col12\",\"col13\" ) VALUES ("
                                         " \"%@\", \"%@\", \"DATA\", \"%d\", \"%d\", \"%d\", \"%@\", \"%@\", \"%@\", \"%@\", \"%@\", \"%@\", \"%@\" "
                                         " , \"%@\", \"%@\", \"%@\", \"%@\", \"%@\", '%.0f' )", SINo, strSeqNo , NextPageNo, j, currentAge, @"-",@"-",
                                         @"-",@"-",@"-",@"-",@"-", @"-", @"-", @"-", @"-", @"-", -1.00];
                             
                             
                             if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
                                 if (sqlite3_step(statement) == SQLITE_DONE) {
                                     
                                 }
                                 sqlite3_finalize(statement);
                             }
                         }
                         
                         
                         
                         strSeqNo = Nil;
                     }
                 }
                 
                 sqlite3_close(contactDB);
             }
            
            
			
			
            RiderCol1 = Nil;
            RiderCol2 = Nil;
            RiderCol3 = Nil;
            RiderCol4 = Nil;
            RiderCol5 = Nil;
            RiderCol6 = Nil;
            RiderCol7 = Nil;
            RiderCol8 = Nil;
            RiderCol9 = Nil;
            RiderCol10 = Nil;
            RiderCol11 = Nil;
            RiderCol12 = Nil;
            
        }
        /*
         if ([PDSorSI isEqualToString:@"SI"]) {
         for (int v= 0; v < PolicyTerm; v ++) {
         double tempA;
         double tempB;
         tempA = [[SummaryNonGuaranteedSurrenderValueA objectAtIndex:v] doubleValue ];
         tempA = tempA + [[TotalRiderSurrenderValue objectAtIndex:v] doubleValue ];
         [SummaryNonGuaranteedSurrenderValueA replaceObjectAtIndex:v withObject: [NSString stringWithFormat:@"%.3f", tempA]];
         
         tempB = [[SummaryNonGuaranteedSurrenderValueB objectAtIndex:v] doubleValue ];
         tempB = tempB + [[TotalRiderSurrenderValue objectAtIndex:v] doubleValue ];
         [SummaryNonGuaranteedSurrenderValueB replaceObjectAtIndex:v withObject: [NSString stringWithFormat:@"%.3f", tempB]];
         
         if (v  == PolicyTerm - 1) {
         // EntireMaturityValueA = EntireMaturityValueA + [[SummaryNonGuaranteedSurrenderValueA objectAtIndex:v] doubleValue ];
         // EntireMaturityValueB = EntireMaturityValueB + [[SummaryNonGuaranteedSurrenderValueB objectAtIndex:v] doubleValue ];
         }
         
         }
         }
         */
        
        
        
		NSLog(@"insert to UL_Temp_Trad_Rider 2 --- End");
    }
    
    
    statement = Nil;
    QuerySQL = Nil;
    TotalRiderSurrenderValue = Nil;
	
}



-(void)GetRTUPData{
	sqlite3_stmt *statement;
	NSString *querySQL;
	if (sqlite3_open([databasePath UTF8String], &contactDB) == SQLITE_OK)
    {
		querySQL = [NSString stringWithFormat:@"SELECT FromYear, ForYear, Amount From UL_TPExcess WHERE SINo=\"%@\"",SINo];
		
		if (sqlite3_prepare_v2(contactDB, [querySQL UTF8String], -1, &statement, NULL) == SQLITE_OK)
		{
			if (sqlite3_step(statement) == SQLITE_ROW) {
				strRTUPFrom = [NSString stringWithFormat:@"%d", sqlite3_column_int(statement, 0) - 1];
				strRTUPFor = [NSString stringWithFormat:@"%d", sqlite3_column_int(statement, 1) + 1];
				strRTUPAmount = [[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 2)];
			}
			else{
				strRTUPFrom = @"";
				strRTUPFor = @"";
				strRTUPAmount = @"";
			}
			
			sqlite3_finalize(statement);
		}
		sqlite3_close(contactDB);
	}
}

-(void)PopulateData{
	sqlite3_stmt *statement;
	NSString *querySQL;
	
    if (sqlite3_open([databasePath UTF8String], &contactDB) == SQLITE_OK)
    {
        
		querySQL = [NSString stringWithFormat:@"SELECT fund, option, partial_withd_pct, EverGreen2025, EverGreen2028, "
					"EverGreen2030, EverGreen2035, CashFund, RetireFund, DanaFund, ifnull(VentureFund, 0), ifnull(VentureGrowth, 0), ifnull(VentureBlueChip, 0), ifnull(VentureDana, 0), ifnull(VentureManaged, 0), ifnull(VentureIncome, 0) FROM UL_fund_maturity_option WHERE SINo=\"%@\"",SINo];
		
		Fund2023PartialReinvest = 100.00; //means fully withdraw
		Fund2025PartialReinvest = 100.00;
		Fund2028PartialReinvest = 100.00;
		Fund2030PartialReinvest = 100.00;
		Fund2035PartialReinvest = 100.00;
		//NSLog(@"%@", querySQL);
		
		BOOL Fund2023Found = FALSE;
		BOOL Fund2025Found = FALSE;
		BOOL Fund2028Found = FALSE;
		BOOL Fund2030Found = FALSE;
		BOOL Fund2035Found = FALSE;
		
		if (sqlite3_prepare_v2(contactDB, [querySQL UTF8String], -1, &statement, NULL) == SQLITE_OK)
		{
			while (sqlite3_step(statement) == SQLITE_ROW)
			{
				if ([[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 0)] isEqualToString:@"HLA EverGreen 2023"]) {
					Fund2023Found = TRUE;
					if ([[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 1)] isEqualToString:@"ReInvest"]) {
						Fund2023PartialReinvest = 0;
						Fund2023ReinvestTo2025Fac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 3)] doubleValue ] ;
						Fund2023ReinvestTo2028Fac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 4)] doubleValue ] ;
						Fund2023ReinvestTo2030Fac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 5)] doubleValue ] ;
						Fund2023ReinvestTo2035Fac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 6)] doubleValue ] ;
						Fund2023ReinvestToCashFac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 7)] doubleValue ] ;
						Fund2023ReinvestToRetFac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 8)] doubleValue ] ;
						Fund2023ReinvestToDanaFac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 9)] doubleValue ] ;
					}
					else if ([[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 1)] isEqualToString:@"Partial"]) {
						Fund2023PartialReinvest = 100 - [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 2)] doubleValue ] ;
						Fund2023ReinvestTo2025Fac =  [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 3)] doubleValue ] ;
						Fund2023ReinvestTo2028Fac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 4)] doubleValue ] ;
						Fund2023ReinvestTo2030Fac =  [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 5)] doubleValue ] ;
						Fund2023ReinvestTo2035Fac =  [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 6)] doubleValue ] ;
						Fund2023ReinvestToCashFac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 7)] doubleValue ] ;
						Fund2023ReinvestToRetFac =  [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 8)] doubleValue ] ;
						Fund2023ReinvestToDanaFac =  [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 9)] doubleValue ] ;
					}
					else{
						Fund2023PartialReinvest = 100;
					}
				}
				else if ([[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 0)] isEqualToString:@"HLA EverGreen 2025"]) {
					Fund2025Found = TRUE;
					if ([[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 1)] isEqualToString:@"ReInvest"]) {
						Fund2025PartialReinvest = 0;
						Fund2025ReinvestTo2028Fac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 4)] doubleValue ] ;
						Fund2025ReinvestTo2030Fac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 5)] doubleValue ] ;
						Fund2025ReinvestTo2035Fac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 6)] doubleValue ] ;
						Fund2025ReinvestToCashFac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 7)] doubleValue ] ;
						Fund2025ReinvestToRetFac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 8)] doubleValue ] ;
						Fund2025ReinvestToDanaFac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 9)] doubleValue ] ;
                        Fund2025ReinvestToVentureFac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 10)] doubleValue ] ;
                        Fund2025ReinvestToVentureGrowthFac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 11)] doubleValue ] ;
                        Fund2025ReinvestToVentureBlueChipFac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 12)] doubleValue ] ;
                        Fund2025ReinvestToVentureDanaFac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 13)] doubleValue ] ;
                        Fund2025ReinvestToVentureManagedFac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 14)] doubleValue ] ;
                        Fund2025ReinvestToVentureIncomeFac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 15)] doubleValue ] ;
                        /*
                        Fund2025ReinvestToVentureBlueChipFac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 11)] doubleValue ] ;
                        Fund2025ReinvestToVentureDanaFac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 11)] doubleValue ] ;
                        Fund2025ReinvestToVentureGrowthFac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 11)] doubleValue ] ;
                        Fund2025ReinvestToVentureIncomeFac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 11)] doubleValue ] ;
                        Fund2025ReinvestToVentureManagedFac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 11)] doubleValue ] ;
                         */
					}
					else if ([[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 1)] isEqualToString:@"Partial"]) {
						Fund2025PartialReinvest = 100 -  [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 2)] doubleValue ] ;
						Fund2025ReinvestTo2028Fac =  [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 4)] doubleValue ] ;
						Fund2025ReinvestTo2030Fac =  [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 5)] doubleValue ] ;
						Fund2025ReinvestTo2035Fac =  [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 6)] doubleValue ] ;
						Fund2025ReinvestToCashFac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 7)] doubleValue ] ;
						Fund2025ReinvestToRetFac =  [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 8)] doubleValue ] ;
						Fund2025ReinvestToDanaFac =  [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 9)] doubleValue ] ;
                        Fund2025ReinvestToVentureFac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 10)] doubleValue ] ;
                        Fund2025ReinvestToVentureGrowthFac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 11)] doubleValue ] ;
                        Fund2025ReinvestToVentureBlueChipFac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 12)] doubleValue ] ;
                        Fund2025ReinvestToVentureDanaFac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 13)] doubleValue ] ;
                        Fund2025ReinvestToVentureManagedFac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 14)] doubleValue ] ;
                        Fund2025ReinvestToVentureIncomeFac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 15)] doubleValue ] ;
                        /*
                         Fund2025ReinvestToVentureBlueChipFac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 11)] doubleValue ] ;
                         Fund2025ReinvestToVentureDanaFac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 11)] doubleValue ] ;
                         Fund2025ReinvestToVentureGrowthFac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 11)] doubleValue ] ;
                         Fund2025ReinvestToVentureIncomeFac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 11)] doubleValue ] ;
                         Fund2025ReinvestToVentureManagedFac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 11)] doubleValue ] ;
                         */
                        
					}
					else{
						Fund2025PartialReinvest = 100;
					}
				}
				else if ([[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 0)] isEqualToString:@"HLA EverGreen 2028"]) {
					Fund2028Found = TRUE;
					if ([[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 1)] isEqualToString:@"ReInvest"]) {
						Fund2028PartialReinvest = 0;
						Fund2028ReinvestTo2030Fac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 5)] doubleValue ] ;
						Fund2028ReinvestTo2035Fac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 6)] doubleValue ] ;
						Fund2028ReinvestToCashFac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 7)] doubleValue ] ;
						Fund2028ReinvestToRetFac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 8)] doubleValue ] ;
						Fund2028ReinvestToDanaFac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 9)] doubleValue ] ;
                        Fund2028ReinvestToVentureFac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 10)] doubleValue ] ;
                        Fund2028ReinvestToVentureGrowthFac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 11)] doubleValue ] ;
                        Fund2028ReinvestToVentureBlueChipFac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 12)] doubleValue ] ;
                        Fund2028ReinvestToVentureDanaFac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 13)] doubleValue ] ;
                        Fund2028ReinvestToVentureManagedFac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 14)] doubleValue ] ;
                        Fund2028ReinvestToVentureIncomeFac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 15)] doubleValue ] ;
                        /*
                         Fund2028ReinvestToVentureBlueChipFac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 11)] doubleValue ] ;
                         Fund2028ReinvestToVentureDanaFac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 11)] doubleValue ] ;
                         Fund2028ReinvestToVentureGrowthFac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 11)] doubleValue ] ;
                         Fund2028ReinvestToVentureIncomeFac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 11)] doubleValue ] ;
                         Fund2028ReinvestToVentureManagedFac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 11)] doubleValue ] ;
                         */
					}
					else if ([[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 1)] isEqualToString:@"Partial"]) {
						Fund2028PartialReinvest = 100 - [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 2)] doubleValue ] ;
						Fund2028ReinvestTo2030Fac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 5)] doubleValue ] ;
						Fund2028ReinvestTo2035Fac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 6)] doubleValue ] ;
						Fund2028ReinvestToCashFac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 7)] doubleValue ] ;
						Fund2028ReinvestToRetFac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 8)] doubleValue ] ;
						Fund2028ReinvestToDanaFac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 9)] doubleValue ] ;
                        Fund2028ReinvestToVentureFac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 10)] doubleValue ] ;
                        Fund2028ReinvestToVentureGrowthFac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 11)] doubleValue ] ;
                        Fund2028ReinvestToVentureBlueChipFac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 12)] doubleValue ] ;
                        Fund2028ReinvestToVentureDanaFac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 13)] doubleValue ] ;
                        Fund2028ReinvestToVentureManagedFac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 14)] doubleValue ] ;
                        Fund2028ReinvestToVentureIncomeFac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 15)] doubleValue ] ;
                        /*
                         Fund2028ReinvestToVentureBlueChipFac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 11)] doubleValue ] ;
                         Fund2028ReinvestToVentureDanaFac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 11)] doubleValue ] ;
                         Fund2028ReinvestToVentureGrowthFac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 11)] doubleValue ] ;
                         Fund2028ReinvestToVentureIncomeFac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 11)] doubleValue ] ;
                         Fund2028ReinvestToVentureManagedFac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 11)] doubleValue ] ;
                         */
					}
					else{
						Fund2028PartialReinvest = 100;
					}
				}
				else if ([[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 0)] isEqualToString:@"HLA EverGreen 2030"]) {
					Fund2030Found = TRUE;
					if ([[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 1)] isEqualToString:@"ReInvest"]) {
						Fund2030PartialReinvest = 0;
						Fund2030ReinvestTo2035Fac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 6)] doubleValue ] ;
						Fund2030ReinvestToCashFac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 7)] doubleValue ] ;
						Fund2030ReinvestToRetFac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 8)] doubleValue ] ;
						Fund2030ReinvestToDanaFac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 9)] doubleValue ] ;
                        Fund2030ReinvestToVentureFac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 10)] doubleValue ] ;
                        Fund2030ReinvestToVentureGrowthFac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 11)] doubleValue ] ;
                        Fund2030ReinvestToVentureBlueChipFac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 12)] doubleValue ] ;
                        Fund2030ReinvestToVentureDanaFac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 13)] doubleValue ] ;
                        Fund2030ReinvestToVentureManagedFac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 14)] doubleValue ] ;
                        Fund2030ReinvestToVentureIncomeFac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 15)] doubleValue ] ;
                        /*
                         Fund2030ReinvestToVentureBlueChipFac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 11)] doubleValue ] ;
                         Fund2030ReinvestToVentureDanaFac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 11)] doubleValue ] ;
                         Fund2030ReinvestToVentureGrowthFac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 11)] doubleValue ] ;
                         Fund2030ReinvestToVentureIncomeFac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 11)] doubleValue ] ;
                         Fund2030ReinvestToVentureManagedFac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 11)] doubleValue ] ;
                         */
					}
					else if ([[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 1)] isEqualToString:@"Partial"]) {
						Fund2030PartialReinvest = 100 -  [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 2)] doubleValue ] ;
						Fund2030ReinvestTo2035Fac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 6)] doubleValue ] ;
						Fund2030ReinvestToCashFac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 7)] doubleValue ] ;
						Fund2030ReinvestToRetFac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 8)] doubleValue ] ;
						Fund2030ReinvestToDanaFac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 9)] doubleValue ] ;
                        Fund2030ReinvestToVentureFac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 10)] doubleValue ] ;
                        Fund2030ReinvestToVentureGrowthFac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 11)] doubleValue ] ;
                        Fund2030ReinvestToVentureBlueChipFac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 12)] doubleValue ] ;
                        Fund2030ReinvestToVentureDanaFac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 13)] doubleValue ] ;
                        Fund2030ReinvestToVentureManagedFac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 14)] doubleValue ] ;
                        Fund2030ReinvestToVentureIncomeFac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 15)] doubleValue ] ;
                        /*
                         Fund2030ReinvestToVentureBlueChipFac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 11)] doubleValue ] ;
                         Fund2030ReinvestToVentureDanaFac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 11)] doubleValue ] ;
                         Fund2030ReinvestToVentureGrowthFac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 11)] doubleValue ] ;
                         Fund2030ReinvestToVentureIncomeFac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 11)] doubleValue ] ;
                         Fund2030ReinvestToVentureManagedFac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 11)] doubleValue ] ;
                         */
					}
					else{
						Fund2030PartialReinvest = 100;
					}
				}
				else if ([[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 0)] isEqualToString:@"HLA EverGreen 2035"]) {
					Fund2035Found = TRUE;
					if ([[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 1)] isEqualToString:@"ReInvest"]) {
						Fund2035PartialReinvest = 0;
						Fund2035ReinvestToCashFac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 7)] doubleValue ] ;
						Fund2035ReinvestToRetFac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 8)] doubleValue ] ;
						Fund2035ReinvestToDanaFac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 9)] doubleValue ] ;
                        Fund2035ReinvestToVentureFac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 10)] doubleValue ] ;
                        Fund2035ReinvestToVentureGrowthFac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 11)] doubleValue ] ;
                        Fund2035ReinvestToVentureBlueChipFac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 12)] doubleValue ] ;
                        Fund2035ReinvestToVentureDanaFac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 13)] doubleValue ] ;
                        Fund2035ReinvestToVentureManagedFac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 14)] doubleValue ] ;
                        Fund2035ReinvestToVentureIncomeFac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 15)] doubleValue ] ;
                        /*
                         Fund2035ReinvestToVentureBlueChipFac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 11)] doubleValue ] ;
                         Fund2035ReinvestToVentureDanaFac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 11)] doubleValue ] ;
                         Fund2035ReinvestToVentureGrowthFac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 11)] doubleValue ] ;
                         Fund2035ReinvestToVentureIncomeFac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 11)] doubleValue ] ;
                         Fund2035ReinvestToVentureManagedFac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 11)] doubleValue ] ;
                         */
					}
					else if ([[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 1)] isEqualToString:@"Partial"]) {
						Fund2035PartialReinvest =  100 - [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 2)] doubleValue ] ;
						Fund2035ReinvestToCashFac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 7)] doubleValue ] ;
						Fund2035ReinvestToRetFac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 8)] doubleValue ] ;
						Fund2035ReinvestToDanaFac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 9)] doubleValue ] ;
                        Fund2035ReinvestToVentureFac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 10)] doubleValue ] ;
                        Fund2035ReinvestToVentureGrowthFac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 11)] doubleValue ] ;
                        Fund2035ReinvestToVentureBlueChipFac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 12)] doubleValue ] ;
                        Fund2035ReinvestToVentureDanaFac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 13)] doubleValue ] ;
                        Fund2035ReinvestToVentureManagedFac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 14)] doubleValue ] ;
                        Fund2035ReinvestToVentureIncomeFac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 15)] doubleValue ] ;
                        /*
                         Fund2035ReinvestToVentureBlueChipFac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 11)] doubleValue ] ;
                         Fund2035ReinvestToVentureDanaFac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 11)] doubleValue ] ;
                         Fund2035ReinvestToVentureGrowthFac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 11)] doubleValue ] ;
                         Fund2035ReinvestToVentureIncomeFac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 11)] doubleValue ] ;
                         Fund2035ReinvestToVentureManagedFac = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 11)] doubleValue ] ;
                         */
					}
					else{
						Fund2035PartialReinvest = 100;
					}
				}
				
				
			}
			sqlite3_finalize(statement);
			
			// added on 22/11/13, if there is no fund maturity option found in table but there is reinvestment from other fund, once this fund is matured it will be fully reinvest into cash fund by default
            // change to venture Income fund
			if (Fund2023ReinvestTo2025Fac != 0 && Fund2025PartialReinvest == 100 && Fund2025Found == FALSE) {
				Fund2025PartialReinvest = 0;
				//Fund2025ReinvestToCashFac = 100;
                Fund2025ReinvestToVentureIncomeFac = 100;

			}
			if (Fund2023ReinvestTo2028Fac != 0 && Fund2028PartialReinvest == 100 && Fund2028Found == FALSE) {
				Fund2028PartialReinvest = 0;
				//Fund2028ReinvestToCashFac = 100;
                Fund2028ReinvestToVentureIncomeFac = 100;
			}
			if (Fund2023ReinvestTo2030Fac != 0 && Fund2030PartialReinvest == 100 && Fund2030Found == FALSE) {
				Fund2030PartialReinvest = 0;
				//Fund2030ReinvestToCashFac = 100;
                Fund2030ReinvestToVentureIncomeFac = 100;
			}
			if (Fund2023ReinvestTo2035Fac != 0 && Fund2035PartialReinvest == 100 && Fund2035Found == FALSE) {
				Fund2035PartialReinvest = 0;
				//Fund2035ReinvestToCashFac = 100;
				Fund2035ReinvestToVentureIncomeFac = 100;
			}
			
			if (Fund2025ReinvestTo2028Fac != 0 && Fund2028PartialReinvest == 100 && Fund2028Found == FALSE) {
				Fund2028PartialReinvest = 0;
				//Fund2028ReinvestToCashFac = 100;
                Fund2028ReinvestToVentureIncomeFac = 100;
			}
			if (Fund2025ReinvestTo2030Fac != 0 && Fund2030PartialReinvest == 100 && Fund2030Found == FALSE) {
				Fund2030PartialReinvest = 0;
				//Fund2030ReinvestToCashFac = 100;
                Fund2030ReinvestToVentureIncomeFac = 100;
			}
			if (Fund2025ReinvestTo2035Fac != 0 && Fund2035PartialReinvest == 100 && Fund2035Found == FALSE) {
				Fund2035PartialReinvest = 0;
				//Fund2035ReinvestToCashFac = 100;
                Fund2035ReinvestToVentureIncomeFac = 100;
			}
			
			
			if (Fund2028ReinvestTo2030Fac != 0 && Fund2030PartialReinvest == 100 && Fund2030Found == FALSE) {
				Fund2030PartialReinvest = 0;
				//Fund2030ReinvestToCashFac = 100;
                Fund2030ReinvestToVentureIncomeFac = 100;
			}
            
			if (Fund2028ReinvestTo2035Fac != 0 && Fund2035PartialReinvest == 100 && Fund2035Found == FALSE) {
				Fund2035PartialReinvest = 0;
				//Fund2035ReinvestToCashFac = 100;
                Fund2035ReinvestToVentureIncomeFac = 100;
			}
			
			
			if (Fund2030ReinvestTo2035Fac != 0 && Fund2035PartialReinvest == 100 && Fund2035Found == FALSE) {
				Fund2035PartialReinvest = 0;
				//Fund2035ReinvestToCashFac = 100;
                Fund2035ReinvestToVentureIncomeFac = 100;
			}
			
			//----------
            
		}
		
		sqlite3_close(contactDB);
		
	}
	
	
}

-(double)CalculateBUMP{
	double FirstBasicMort = [self ReturnBasicMort:Age]/1000.00;
	double FirstSA = BasicSA;
	double SecondBasicMort = [self ReturnBasicMort:Age + 1]/1000.00;
	double SecondSA = 0;
	double ThirdBasicMort = [self ReturnBasicMort:Age + 2]/1000.00;
	double BUMP1;
	double BUMP2;

    
	//NSLog(@"%f, %f, %f", FirstBasicMort, SecondBasicMort, ThirdBasicMort);
	
	//[self getExistingBasic]; //disable as it will change getbumpmode
	[self CalcInst:@""];
	[self GetRegWithdrawal];
	[self ReturnFundFactor]; // get factor for each fund
	[self CalcYearDiff]; //get the yearDiff 
	//[self SurrenderValue:2 andMonth:0 andLevel:0];
	//SecondSA = BasicSA - HSurrenderValue;
    SecondSA = BasicSA; //remove 20150129
	//NSLog(@"dasdas %f", HSurrenderValue);
	if ([getHL isEqualToString:@""] || [getHL isEqualToString:@"(null)"]) {
		getHL = @"0";
	}
	
	if ([getHLPct isEqualToString:@""] || [getHLPct isEqualToString:@"(null)"]) {
		getHLPct= @"0";
	}
	
	if ([getOccLoading isEqualToString:@"STD"]) {
		getOccLoading = @"0";
	}
	
	double MortDate = [self GetMortDate ];
	
	double ModeRate = [self ReturnModeRate:strBumpMode];
	double divideMode = [self ReturnDivideMode];
	//double PremAllocation = Age > 65 ? [self ReturnPremAllocation:1] : [self ReturnPremAllocation_V:1];
    double PremAllocation = [self ReturnPremAllocation:1];
	double ExcessPrem =  [self ReturnExcessPrem:1];
	
    //NSLog(@" %f,%f,%f,%f, %f", MortDate, ModeRate, divideMode, PremAllocation, ExcessPrem);

    
    /*
	double FirstBasicSA =  (FirstSA * ((FirstBasicMort * MortDate + SecondBasicMort * (12 - MortDate))/12.00 * (1 + [getHLPct intValue]/100.00 ) +
									   ([getHL doubleValue] /1000.00) + ([getOccLoading doubleValue ]/1000.00)));
	*/
    double FirstBasicSA =  (FirstSA * ((FirstBasicMort * (IsEDD ? 0.00 : MortDate) + SecondBasicMort * (12 - MortDate))/12.00 * (1 + [getHLPct intValue]/100.00 ) +
									   ([getHL doubleValue] /1000.00) + ([getOccLoading doubleValue ]/1000.00)));
    
	double SecondBasicSA =  (SecondSA * ((SecondBasicMort * MortDate + ThirdBasicMort * (12 - MortDate))/12.00 * (1 + [getHLPct intValue]/100.00 ) +
										 ([getHL doubleValue] /1000.00) + ([getOccLoading doubleValue ]/1000.00)));
	
	//NSLog(@"%f %f ", FirstBasicSA, SecondBasicSA);
	
	BUMP1 = (ModeRate * (PremAllocation * ([strBasicPremium_Bump doubleValue ] * divideMode) +
						 (0.95 * (ExcessPrem + [strGrayRTUPAmount doubleValue ] * divideMode))) -
			 (((PolicyFee * 12) + FirstBasicSA + 0) * 12.5/12.00))/divideMode;
	
	BUMP2 = (ModeRate * ([self ReturnPremAllocation:2] * ([strBasicPremium_Bump doubleValue ] * divideMode) +
						 (0.95 * ([self ReturnExcessPrem:2] + [strGrayRTUPAmount doubleValue ] * divideMode))) -
			 (((PolicyFee * 12) + SecondBasicSA + 0) * 12.5/12.00))/divideMode;
	
	/*
     if (BUMP1 < 0.00) {
     
     PremReq = ((((0.01 * divideMode) + (((PolicyFee * 12) + FirstBasicSA + 0) * 12.5/12.00))/ModeRate -
     (0.95 * (ExcessPrem + [strRTUPAmount doubleValue ])))/PremAllocation)/divideMode;
     
     
     }
     */
	NSLog(@"bump1 = %f, bump2 = %f", BUMP1, BUMP2);
	NSNumberFormatter *format = [[NSNumberFormatter alloc]init];
	//[format setNumberStyle:NSNumberFormatterDecimalStyle];
	[format setRoundingMode:NSNumberFormatterRoundHalfUp];
	//[format setMaximumFractionDigits:2];
	[self ResetData];
	
	/*
     for (int i =1; i <= 30 ; i++) {
     
     VUCashValueNegative = false;
     if (i == YearDiff2023 || i == YearDiff2025 || i == YearDiff2028 || i == YearDiff2030 || i == YearDiff2035) {
     for (int m = 1; m <= 12; m++) {
     
     MonthFundValueOfTheYearValueTotalHigh = [self ReturnMonthFundValueOfTheYearValueTotalHigh:i andMonth:m];
     //NSLog(@"%d %f %f %f", m, MonthVURetValueHigh, MonthVU2035ValueHigh, MonthFundValueOfTheYearValueTotalHigh );
     [self SurrenderValue:i andMonth:m andLevel:1];
     
     
     MonthFundValueOfTheYearValueTotalMedian = [self ReturnMonthFundValueOfTheYearValueTotalMedian:i andMonth:m];
     [self SurrenderValue:i andMonth:m andLevel:2];
     
     
     MonthFundValueOfTheYearValueTotalLow = [self ReturnMonthFundValueOfTheYearValueTotalLow:i andMonth:m];
     //NSLog(@"%d %f %f %f", m, MonthVURetValueLow, MonthVU2035ValueLow, MonthFundValueOfTheYearValueTotalLow );
     [self SurrenderValue:i andMonth:m andLevel:3];
     
     }
     
     }
     else{
     VUCashValueNegative = false;
     FundValueOfTheYearValueTotalHigh = [self ReturnFundValueOfTheYearValueTotalHigh:i];
     FundValueOfTheYearValueTotalMedian = [self ReturnFundValueOfTheYearValueTotalMedian:i];
     FundValueOfTheYearValueTotalLow = [self ReturnFundValueOfTheYearValueTotalLow:i];
     [self SurrenderValue:i andMonth:0 andLevel:0];
     }
     
     
     
     NSLog(@"%d) %f, %f, %f",i, HSurrenderValue, MSurrenderValue, LSurrenderValue );
     NSLog(@"%d) %f,%f,%f,%f,%f,%f,%f", i, VUCashValueHigh,VURetValueHigh,VU2023ValueHigh, VU2025ValueHigh,VU2028ValueHigh, VU2030ValueHigh, VU2035ValueHigh);
     //NSLog(@"%d) %f,%f,%f,%f,%f,%f,%f", i, VUCashValueLow,VURetValueLow,VU2023ValueLow, VU2025ValueLow,VU2028ValueLow, VU2030ValueLow, VU2035ValueLow);
     
     }
     */
	/*
     if (BUMP1 > BUMP2) {
     return [[NSString stringWithFormat:@"%@", [format stringFromNumber:[NSNumber numberWithFloat:BUMP2]]] doubleValue ];
     }
     else{
     //return [[NSString stringWithFormat:@"%.2f", BUMP1] doubleValue ];
     return [[NSString stringWithFormat:@"%@", [format stringFromNumber:[NSNumber numberWithFloat:BUMP1]]] doubleValue ];
     }
     */
	//return [[NSString stringWithFormat:@"%@", [format stringFromNumber:[NSNumber numberWithFloat:BUMP1]]] doubleValue ];
	return BUMP1;
	
}

-(void)ResetData{
	VUCashPrevValueHigh =0;
	VURetPrevValueHigh  =0;
	VUDanaPrevValueHigh  =0;
    VUSmartPrevValueHigh  =0;
	VUVenturePrevValueHigh  =0;
    VUVentureGrowthPrevValueHigh =0;
	VUVentureBlueChipPrevValueHigh  =0;
	VUVentureDanaPrevValueHigh  =0;
    VUVentureManagedPrevValueHigh  =0;
	VUVentureIncomePrevValueHigh  =0;
	VU2023PrevValuehigh = 0;
	VU2025PrevValuehigh =0;
	VU2028PrevValuehigh =0;
	VU2030PrevValuehigh = 0;
	VU2035PrevValuehigh = 0;
	RiderVUCashPrevValueHigh =0;
	RiderVURetPrevValueHigh  =0;
	RiderVUDanaPrevValueHigh  =0;
    RiderVUSmartPrevValueHigh  =0;
	RiderVUVenturePrevValueHigh  =0;
    RiderVUVentureGrowthPrevValueHigh =0;
	RiderVUVentureBlueChipPrevValueHigh  =0;
	RiderVUVentureDanaPrevValueHigh  =0;
    RiderVUVentureManagedPrevValueHigh  =0;
	RiderVUVentureIncomePrevValueHigh  =0;
	RiderVU2023PrevValuehigh = 0;
	RiderVU2025PrevValuehigh =0;
	RiderVU2028PrevValuehigh =0;
	RiderVU2030PrevValuehigh = 0;
	RiderVU2035PrevValuehigh = 0;
    
	
	VUCashPrevValueMedian =0;
	VURetPrevValueMedian  =0;
	VUDanaPrevValueMedian  =0;
    VUSmartPrevValueMedian  =0;
	VUVenturePrevValueMedian  =0;
    VUVentureGrowthPrevValueMedian =0;
	VUVentureBlueChipPrevValueMedian  =0;
	VUVentureDanaPrevValueMedian  =0;
    VUVentureManagedPrevValueMedian  =0;
	VUVentureIncomePrevValueMedian  =0;
	VU2023PrevValueMedian = 0;
	VU2025PrevValueMedian =0;
	VU2028PrevValueMedian =0;
	VU2030PrevValueMedian = 0;
	VU2035PrevValueMedian = 0;
	RiderVUCashPrevValueMedian =0;
	RiderVURetPrevValueMedian  =0;
	RiderVUDanaPrevValueMedian  =0;
    RiderVUSmartPrevValueMedian  =0;
	RiderVUVenturePrevValueMedian  =0;
    RiderVUVentureGrowthPrevValueMedian =0;
	RiderVUVentureBlueChipPrevValueMedian  =0;
	RiderVUVentureDanaPrevValueMedian  =0;
    RiderVUVentureManagedPrevValueMedian  =0;
	RiderVUVentureIncomePrevValueMedian  =0;
	RiderVU2023PrevValueMedian = 0;
	RiderVU2025PrevValueMedian =0;
	RiderVU2028PrevValueMedian =0;
	RiderVU2030PrevValueMedian = 0;
	RiderVU2035PrevValueMedian = 0;
	
	VUCashPrevValueLow =0;
	VURetPrevValueLow  =0;
	VUDanaPrevValueLow  =0;
    VUSmartPrevValueLow  =0;
	VUVenturePrevValueLow  =0;
    VUVentureGrowthPrevValueLow =0;
	VUVentureBlueChipPrevValueLow  =0;
	VUVentureDanaPrevValueLow  =0;
    VUVentureManagedPrevValueLow  =0;
	VUVentureIncomePrevValueLow  =0;
	VU2023PrevValueLow = 0;
	VU2025PrevValueLow =0;
	VU2028PrevValueLow =0;
	VU2030PrevValueLow = 0;
	VU2035PrevValueLow = 0;
	RiderVUCashPrevValueLow =0;
	RiderVURetPrevValueLow  =0;
	RiderVUDanaPrevValueLow  =0;
    RiderVUSmartPrevValueLow  =0;
	RiderVUVenturePrevValueLow  =0;
    RiderVUVentureGrowthPrevValueLow =0;
	RiderVUVentureBlueChipPrevValueLow  =0;
	RiderVUVentureDanaPrevValueLow  =0;
    RiderVUVentureManagedPrevValueLow  =0;
	RiderVUVentureIncomePrevValueLow  =0;
	RiderVU2023PrevValueLow = 0;
	RiderVU2025PrevValueLow =0;
	RiderVU2028PrevValueLow =0;
	RiderVU2030PrevValueLow = 0;
	RiderVU2035PrevValueLow = 0;
	
	MonthVUCashPrevValueHigh =0;
	MonthVURetPrevValueHigh  =0;
	MonthVUDanaPrevValueHigh  =0;
    MonthVUSmartPrevValueHigh  =0;
	MonthVUVenturePrevValueHigh  =0;
    MonthVUVentureGrowthPrevValueHigh =0;
	MonthVUVentureBlueChipPrevValueHigh  =0;
	MonthVUVentureDanaPrevValueHigh  =0;
    MonthVUVentureManagedPrevValueHigh  =0;
	MonthVUVentureIncomePrevValueHigh  =0;
	MonthVU2023PrevValuehigh = 0;
	MonthVU2025PrevValuehigh =0;
	MonthVU2028PrevValuehigh =0;
	MonthVU2030PrevValuehigh = 0;
	MonthVU2035PrevValuehigh = 0;
	RiderMonthVUCashPrevValueHigh =0;
	RiderMonthVURetPrevValueHigh  =0;
	RiderMonthVUDanaPrevValueHigh  =0;
    RiderMonthVUSmartPrevValueHigh  =0;
	RiderMonthVUVenturePrevValueHigh  =0;
    RiderMonthVUVentureGrowthPrevValueHigh =0;
	RiderMonthVUVentureBlueChipPrevValueHigh  =0;
	RiderMonthVUVentureDanaPrevValueHigh  =0;
    RiderMonthVUVentureManagedPrevValueHigh  =0;
	RiderMonthVUVentureIncomePrevValueHigh  =0;
	RiderMonthVU2023PrevValuehigh = 0;
	RiderMonthVU2025PrevValuehigh =0;
	RiderMonthVU2028PrevValuehigh =0;
	RiderMonthVU2030PrevValuehigh = 0;
	RiderMonthVU2035PrevValuehigh = 0;
	
	MonthVUCashPrevValueMedian =0;
	MonthVURetPrevValueMedian  =0;
	MonthVUDanaPrevValueMedian  =0;
    MonthVUSmartPrevValueMedian  =0;
	MonthVUVenturePrevValueMedian  =0;
    MonthVUVentureGrowthPrevValueMedian =0;
	MonthVUVentureBlueChipPrevValueMedian  =0;
	MonthVUVentureDanaPrevValueMedian  =0;
    MonthVUVentureManagedPrevValueMedian  =0;
	MonthVUVentureIncomePrevValueMedian  =0;
	MonthVU2023PrevValueMedian = 0;
	MonthVU2025PrevValueMedian =0;
	MonthVU2028PrevValueMedian =0;
	MonthVU2030PrevValueMedian = 0;
	MonthVU2035PrevValueMedian = 0;
	RiderMonthVUCashPrevValueMedian =0;
	RiderMonthVURetPrevValueMedian  =0;
	RiderMonthVUDanaPrevValueMedian  =0;
    RiderMonthVUSmartPrevValueMedian  =0;
	RiderMonthVUVenturePrevValueMedian  =0;
    RiderMonthVUVentureGrowthPrevValueMedian =0;
	RiderMonthVUVentureBlueChipPrevValueMedian  =0;
	RiderMonthVUVentureDanaPrevValueMedian  =0;
    RiderMonthVUVentureManagedPrevValueMedian  =0;
	RiderMonthVUVentureIncomePrevValueMedian  =0;
	RiderMonthVU2023PrevValueMedian = 0;
	RiderMonthVU2025PrevValueMedian =0;
	RiderMonthVU2028PrevValueMedian =0;
	RiderMonthVU2030PrevValueMedian = 0;
	RiderMonthVU2035PrevValueMedian = 0;
	
	MonthVUCashPrevValueLow =0;
	MonthVURetPrevValueLow  =0;
	MonthVUDanaPrevValueLow  =0;
    MonthVUSmartPrevValueLow  =0;
	MonthVUVenturePrevValueLow  =0;
    MonthVUVentureGrowthPrevValueLow =0;
	MonthVUVentureBlueChipPrevValueLow  =0;
	MonthVUVentureDanaPrevValueLow  =0;
    MonthVUVentureManagedPrevValueLow  =0;
	MonthVUVentureIncomePrevValueLow  =0;
	MonthVU2023PrevValueLow = 0;
	MonthVU2025PrevValueLow =0;
	MonthVU2028PrevValueLow =0;
	MonthVU2030PrevValueLow = 0;
	MonthVU2035PrevValueLow = 0;
	RiderMonthVUCashPrevValueLow =0;
	RiderMonthVURetPrevValueLow  =0;
	RiderMonthVUDanaPrevValueLow  =0;
    RiderMonthVUSmartPrevValueLow  =0;
	RiderMonthVUVenturePrevValueLow  =0;
    RiderMonthVUVentureGrowthPrevValueLow =0;
	RiderMonthVUVentureBlueChipPrevValueLow  =0;
	RiderMonthVUVentureDanaPrevValueLow  =0;
    RiderMonthVUVentureManagedPrevValueLow  =0;
	RiderMonthVUVentureIncomePrevValueLow  =0;
	RiderMonthVU2023PrevValueLow = 0;
	RiderMonthVU2025PrevValueLow =0;
	RiderMonthVU2028PrevValueLow =0;
	RiderMonthVU2030PrevValueLow = 0;
	RiderMonthVU2035PrevValueLow = 0;
	
	temp2023High = 0;
	temp2023Median= 0;
	temp2023Low = 0;
	temp2025High = 0;
	temp2025Median = 0;
	temp2025Low = 0;
	temp2028High = 0;
	temp2028Median = 0;
	temp2028Low = 0;
	temp2030High = 0;
	temp2030Median = 0;
	temp2030Low = 0;
	temp2035High = 0;
	temp2035Median = 0;
	temp2035Low = 0;
	Ridertemp2023High = 0;
	Ridertemp2023Median= 0;
	Ridertemp2023Low = 0;
	Ridertemp2025High = 0;
	Ridertemp2025Median = 0;
	Ridertemp2025Low = 0;
	Ridertemp2028High = 0;
	Ridertemp2028Median = 0;
	Ridertemp2028Low = 0;
	Ridertemp2030High = 0;
	Ridertemp2030Median = 0;
	Ridertemp2030Low = 0;
	Ridertemp2035High = 0;
	Ridertemp2035Median = 0;
	Ridertemp2035Low = 0;
}

#pragma mark - Reduce Paid Up option
-(void)CalculateRPUO{
    
    NSString *tempPol;
    NSString *QuerySQL;
    sqlite3_stmt *statement;
    
    if ([[RPUOYear substringFromIndex:RPUOYear.length - 1] isEqualToString:@"1" ]) {
        tempPol = [RPUOYear stringByAppendingFormat:@"st" ];
    }
    else if ([[RPUOYear substringFromIndex:RPUOYear.length - 1] isEqualToString:@"2" ]){
        tempPol = [RPUOYear stringByAppendingFormat:@"nd" ];
    }
    else if ([[RPUOYear substringFromIndex:RPUOYear.length - 1] isEqualToString:@"3" ]){
        tempPol = [RPUOYear stringByAppendingFormat:@"rd" ];
    }
    else{
        tempPol = [RPUOYear stringByAppendingFormat:@"th" ];
    }
    
    PaidOpCharge2023_H = [self Calc_PaidUpOptionCharges:VU2023ValueHigh andVUCash:VUCashValueHigh andHighMedLow:@"High"];
    PaidOpCharge2025_H = [self Calc_PaidUpOptionCharges:VU2025ValueHigh andVUCash:VUCashValueHigh andHighMedLow:@"High"];
    PaidOpCharge2028_H = [self Calc_PaidUpOptionCharges:VU2028ValueHigh andVUCash:VUCashValueHigh andHighMedLow:@"High"];
    PaidOpCharge2030_H = [self Calc_PaidUpOptionCharges:VU2030ValueHigh andVUCash:VUCashValueHigh andHighMedLow:@"High"];
    PaidOpCharge2035_H = [self Calc_PaidUpOptionCharges:VU2035ValueHigh andVUCash:VUCashValueHigh andHighMedLow:@"High"];
    PaidOpChargeRet_H = [self Calc_PaidUpOptionCharges:VURetValueHigh andVUCash:VUCashValueHigh andHighMedLow:@"High"];
    PaidOpChargeVentureGrowth_H = [self Calc_PaidUpOptionCharges:VUVentureGrowthValueHigh andVUCash:VUCashValueHigh andHighMedLow:@"High"];//
    PaidOpChargeVentureBlueChip_H = [self Calc_PaidUpOptionCharges:VUVentureBlueChipValueHigh andVUCash:VUCashValueHigh andHighMedLow:@"High"];//
    PaidOpChargeVentureDana_H = [self Calc_PaidUpOptionCharges:VUVentureDanaValueHigh andVUCash:VUCashValueHigh andHighMedLow:@"High"];//
    PaidOpChargeVentureManaged_H = [self Calc_PaidUpOptionCharges:VUVentureManagedValueHigh andVUCash:VUCashValueHigh andHighMedLow:@"High"];//
    PaidOpChargeVentureIncome_H = [self Calc_PaidUpOptionCharges:VUVentureIncomeValueHigh andVUCash:VUCashValueHigh andHighMedLow:@"High"];//
    PaidOpChargeVenture6666_H = [self Calc_PaidUpOptionCharges:VUVenture6666ValueHigh andVUCash:VUCashValueHigh andHighMedLow:@"High"];//
    PaidOpChargeVenture7777_H = [self Calc_PaidUpOptionCharges:VUVenture7777ValueHigh andVUCash:VUCashValueHigh andHighMedLow:@"High"];//
    PaidOpChargeVenture8888_H = [self Calc_PaidUpOptionCharges:VUVenture8888ValueHigh andVUCash:VUCashValueHigh andHighMedLow:@"High"];//
    PaidOpChargeVenture9999_H = [self Calc_PaidUpOptionCharges:VUVenture9999ValueHigh andVUCash:VUCashValueHigh andHighMedLow:@"High"];//
    PaidOpChargeDana_H = [self Calc_PaidUpOptionCharges:VUDanaValueHigh andVUCash:VUCashValueHigh andHighMedLow:@"High"];
    PaidOpChargeSmart_H = [self Calc_PaidUpOptionCharges:VUSmartValueHigh andVUCash:VUCashValueHigh andHighMedLow:@"High"];
    PaidOpChargeVenture_H = [self Calc_PaidUpOptionCharges:VUVentureValueHigh andVUCash:VUCashValueHigh andHighMedLow:@"High"];
    
    PaidOpCharge2023_M = [self Calc_PaidUpOptionCharges:VU2023ValueMedian andVUCash:VUCashValueMedian andHighMedLow:@"Med"];
    PaidOpCharge2025_M = [self Calc_PaidUpOptionCharges:VU2025ValueMedian andVUCash:VUCashValueMedian andHighMedLow:@"Med"];
    PaidOpCharge2028_M = [self Calc_PaidUpOptionCharges:VU2028ValueMedian andVUCash:VUCashValueMedian andHighMedLow:@"Med"];
    PaidOpCharge2030_M = [self Calc_PaidUpOptionCharges:VU2030ValueMedian andVUCash:VUCashValueMedian andHighMedLow:@"Med"];
    PaidOpCharge2035_M = [self Calc_PaidUpOptionCharges:VU2035ValueMedian andVUCash:VUCashValueMedian andHighMedLow:@"Med"];
    PaidOpChargeRet_M = [self Calc_PaidUpOptionCharges:VURetValueMedian andVUCash:VUCashValueMedian andHighMedLow:@"Med"];
    PaidOpChargeVentureGrowth_M = [self Calc_PaidUpOptionCharges:VUVentureGrowthValueMedian andVUCash:VUCashValueMedian andHighMedLow:@"Med"];//
    PaidOpChargeVentureBlueChip_M = [self Calc_PaidUpOptionCharges:VUVentureBlueChipValueMedian andVUCash:VUCashValueMedian andHighMedLow:@"Med"];//
    PaidOpChargeVentureDana_M = [self Calc_PaidUpOptionCharges:VUVentureDanaValueMedian andVUCash:VUCashValueMedian andHighMedLow:@"Med"];//
    PaidOpChargeVentureManaged_M = [self Calc_PaidUpOptionCharges:VUVentureManagedValueMedian andVUCash:VUCashValueMedian andHighMedLow:@"Med"];//
    PaidOpChargeVentureIncome_M = [self Calc_PaidUpOptionCharges:VUVentureIncomeValueMedian andVUCash:VUCashValueMedian andHighMedLow:@"Med"];//
    PaidOpChargeVenture6666_M = [self Calc_PaidUpOptionCharges:VUVenture6666ValueMedian andVUCash:VUCashValueMedian andHighMedLow:@"Med"];//
    PaidOpChargeVenture7777_M = [self Calc_PaidUpOptionCharges:VUVenture7777ValueMedian andVUCash:VUCashValueMedian andHighMedLow:@"Med"];//
    PaidOpChargeVenture8888_M = [self Calc_PaidUpOptionCharges:VUVenture8888ValueMedian andVUCash:VUCashValueMedian andHighMedLow:@"Med"];//
    PaidOpChargeVenture9999_M = [self Calc_PaidUpOptionCharges:VUVenture9999ValueMedian andVUCash:VUCashValueMedian andHighMedLow:@"Med"];//
    PaidOpChargeDana_M = [self Calc_PaidUpOptionCharges:VUDanaValueMedian andVUCash:VUCashValueMedian andHighMedLow:@"Med"];
    PaidOpChargeSmart_M = [self Calc_PaidUpOptionCharges:VUSmartValueMedian andVUCash:VUCashValueMedian andHighMedLow:@"Med"];
    PaidOpChargeVenture_M = [self Calc_PaidUpOptionCharges:VUVentureValueMedian andVUCash:VUCashValueMedian andHighMedLow:@"Med"];
    
    PaidOpCharge2023_L = [self Calc_PaidUpOptionCharges:VU2023ValueLow andVUCash:VUCashValueLow andHighMedLow:@"Low"];
    PaidOpCharge2025_L = [self Calc_PaidUpOptionCharges:VU2025ValueLow andVUCash:VUCashValueLow andHighMedLow:@"Low"];
    PaidOpCharge2028_L = [self Calc_PaidUpOptionCharges:VU2028ValueLow andVUCash:VUCashValueLow andHighMedLow:@"Low"];
    PaidOpCharge2030_L = [self Calc_PaidUpOptionCharges:VU2030ValueLow andVUCash:VUCashValueLow andHighMedLow:@"Low"];
    PaidOpCharge2035_L = [self Calc_PaidUpOptionCharges:VU2035ValueLow andVUCash:VUCashValueLow andHighMedLow:@"Low"];
    PaidOpChargeRet_L = [self Calc_PaidUpOptionCharges:VURetValueLow andVUCash:VUCashValueLow andHighMedLow:@"Low"];
    PaidOpChargeVentureGrowth_L = [self Calc_PaidUpOptionCharges:VUVentureGrowthValueLow andVUCash:VUCashValueLow andHighMedLow:@"Low"];//
    PaidOpChargeVentureBlueChip_L = [self Calc_PaidUpOptionCharges:VUVentureBlueChipValueLow andVUCash:VUCashValueLow andHighMedLow:@"Low"];//
    PaidOpChargeVentureDana_L = [self Calc_PaidUpOptionCharges:VUVentureDanaValueLow andVUCash:VUCashValueLow andHighMedLow:@"Low"];//
    PaidOpChargeVentureManaged_L = [self Calc_PaidUpOptionCharges:VUVentureManagedValueLow andVUCash:VUCashValueLow andHighMedLow:@"Low"];//
    PaidOpChargeVentureIncome_L = [self Calc_PaidUpOptionCharges:VUVentureIncomeValueLow andVUCash:VUCashValueLow andHighMedLow:@"Low"];//
    PaidOpChargeVenture6666_L = [self Calc_PaidUpOptionCharges:VUVenture6666ValueLow andVUCash:VUCashValueLow andHighMedLow:@"Low"];//
    PaidOpChargeVenture7777_L = [self Calc_PaidUpOptionCharges:VUVenture7777ValueLow andVUCash:VUCashValueLow andHighMedLow:@"Low"];//
    PaidOpChargeVenture8888_L = [self Calc_PaidUpOptionCharges:VUVenture8888ValueLow andVUCash:VUCashValueLow andHighMedLow:@"Low"];//
    PaidOpChargeVenture9999_L = [self Calc_PaidUpOptionCharges:VUVenture9999ValueLow andVUCash:VUCashValueLow andHighMedLow:@"Low"];//
    PaidOpChargeDana_L = [self Calc_PaidUpOptionCharges:VUDanaValueLow andVUCash:VUCashValueLow andHighMedLow:@"Low"];
    PaidOpChargeSmart_L = [self Calc_PaidUpOptionCharges:VUSmartValueLow andVUCash:VUCashValueLow andHighMedLow:@"Low"];
    PaidOpChargeVenture_L = [self Calc_PaidUpOptionCharges:VUVentureValueLow andVUCash:VUCashValueLow andHighMedLow:@"Low"];
    
    PaidOpChargeCash_H = VUCashValueHigh >= OneTimePayOut ? OneTimePayOut:VUCashValueHigh;
    PaidOpChargeCash_M = VUCashValueMedian >= OneTimePayOut ? OneTimePayOut:VUCashValueMedian;
    PaidOpChargeCash_L = VUCashValueLow >= OneTimePayOut ? OneTimePayOut:VUCashValueLow;
    
    PaidOpChargeSum_H = PaidOpCharge2023_H + PaidOpCharge2025_H + PaidOpCharge2028_H + PaidOpCharge2030_H + PaidOpCharge2035_H + PaidOpChargeRet_H + PaidOpChargeDana_H + PaidOpChargeSmart_H + PaidOpChargeVenture_H + PaidOpChargeCash_H + PaidOpChargeVentureGrowth_H + PaidOpChargeVentureBlueChip_H + PaidOpChargeVentureDana_H + PaidOpChargeVentureManaged_H + PaidOpChargeVentureIncome_H + PaidOpChargeVenture6666_H + PaidOpChargeVenture7777_H + PaidOpChargeVenture8888_H + PaidOpChargeVenture9999_H;//
    PaidOpChargeSum_M = PaidOpCharge2023_M + PaidOpCharge2025_M + PaidOpCharge2028_M + PaidOpCharge2030_M + PaidOpCharge2035_M + PaidOpChargeRet_M + PaidOpChargeDana_M + PaidOpChargeSmart_M + PaidOpChargeVenture_M + PaidOpChargeCash_M + PaidOpChargeVentureGrowth_M + PaidOpChargeVentureBlueChip_M + PaidOpChargeVentureDana_M + PaidOpChargeVentureManaged_M + PaidOpChargeVentureIncome_M + PaidOpChargeVenture6666_M + PaidOpChargeVenture7777_M + PaidOpChargeVenture8888_M + PaidOpChargeVenture9999_M ;//
    PaidOpChargeSum_L = PaidOpCharge2023_L + PaidOpCharge2025_L + PaidOpCharge2028_L + PaidOpCharge2030_L + PaidOpCharge2035_L + PaidOpChargeRet_L + PaidOpChargeDana_L + PaidOpChargeSmart_L + PaidOpChargeVenture_L + PaidOpChargeCash_L + PaidOpChargeVentureGrowth_L + PaidOpChargeVentureBlueChip_L + PaidOpChargeVentureDana_L + PaidOpChargeVentureManaged_L + PaidOpChargeVentureIncome_L + PaidOpChargeVenture6666_L + PaidOpChargeVenture7777_L + PaidOpChargeVenture8888_L + PaidOpChargeVenture9999_L;//
    
    double OriginalProjDeduction2025_H, OriginalProjDeduction2028_H, OriginalProjDeduction2030_H, OriginalProjDeduction2035_H, OriginalProjDeductionRet_H, OriginalProjDeductionDana_H, OriginalProjDeductionSmart_H,
    OriginalProjDeductionVenture_H, OriginalProjDeductionCash_H ,OriginalProjDeductionVentureGrowth_H, OriginalProjDeductionVentureBlueChip_H, OriginalProjDeductionVentureDana_H, OriginalProjDeductionVentureManaged_H, OriginalProjDeductionVentureIncome_H, OriginalProjDeductionVenture6666_H, OriginalProjDeductionVenture7777_H, OriginalProjDeductionVenture8888_H, OriginalProjDeductionVenture9999_H;//
    
    OriginalProjDeduction2025_H = (VU2025ValueHigh) - PaidOpCharge2025_H;
    OriginalProjDeduction2028_H = (VU2028ValueHigh) - PaidOpCharge2028_H;
    OriginalProjDeduction2030_H = (VU2030ValueHigh) - PaidOpCharge2030_H;
    OriginalProjDeduction2035_H = (VU2035ValueHigh) - PaidOpCharge2035_H;
    OriginalProjDeductionCash_H = (VUCashValueHigh) - PaidOpChargeCash_H;
    OriginalProjDeductionDana_H = (VUDanaValueHigh) - PaidOpChargeDana_H;
    OriginalProjDeductionRet_H = (VURetValueHigh) - PaidOpChargeRet_H;
    OriginalProjDeductionVentureGrowth_H = (VUVentureGrowthValueHigh) - PaidOpChargeVentureGrowth_H;//
    OriginalProjDeductionVentureBlueChip_H = (VUVentureBlueChipValueHigh) - PaidOpChargeVentureBlueChip_H;//
    OriginalProjDeductionVentureDana_H = (VUVentureDanaValueHigh) - PaidOpChargeVentureDana_H;//
    OriginalProjDeductionVentureManaged_H = (VUVentureManagedValueHigh) - PaidOpChargeVentureManaged_H;//
    OriginalProjDeductionVentureIncome_H = (VUVentureIncomeValueHigh) - PaidOpChargeVentureIncome_H;//
    OriginalProjDeductionVenture6666_H = (VUVenture6666ValueHigh) - PaidOpChargeVenture6666_H;//
    OriginalProjDeductionVenture7777_H = (VUVenture7777ValueHigh) - PaidOpChargeVenture7777_H;//
    OriginalProjDeductionVenture8888_H = (VUVenture8888ValueHigh) - PaidOpChargeVenture8888_H;//
    OriginalProjDeductionVenture9999_H = (VUVenture9999ValueHigh) - PaidOpChargeVenture9999_H;//
    OriginalProjDeductionSmart_H = (VUSmartValueHigh) - PaidOpChargeSmart_H;
    OriginalProjDeductionVenture_H = (VUVentureValueHigh) - PaidOpChargeVenture_H;
    
    ///commented codes
    ///ProjDeduction2023_H = floor(VU2023ValueHigh) - PaidOpCharge2023_H;
    ///ProjDeduction2025_H = floor(VU2025ValueHigh) - PaidOpCharge2025_H;
    ///ProjDeduction2028_H = floor(VU2028ValueHigh) - PaidOpCharge2028_H;
    ///ProjDeduction2030_H = floor(VU2030ValueHigh) - PaidOpCharge2030_H;
    ///ProjDeduction2035_H = floor(VU2035ValueHigh) - PaidOpCharge2035_H;
    ///ProjDeductionRet_H = floor(VURetValueHigh) - PaidOpChargeRet_H;
    ///ProjDeductionDana_H = floor(VUDanaValueHigh) - PaidOpChargeDana_H;
    ///ProjDeductionSmart_H = floor(VUSmartValueHigh) - PaidOpChargeSmart_H;
    ///ProjDeductionVenture_H = floor(VUVentureValueHigh) - PaidOpChargeVenture_H;
    ///ProjDeductionCash_H = floor(VUCashValueHigh) - PaidOpChargeCash_H;
    ///ProjDeductionSum_H = ProjDeduction2023_H + ProjDeduction2025_H + ProjDeduction2028_H + ProjDeduction2030_H + ProjDeduction2035_H + ProjDeductionCash_H + ProjDeductionRet_H + ProjDeductionDana_H + ProjDeductionSmart_H + ProjDeductionVenture_H;
    
    
    ProjDeduction2023_H = floor(VU2023ValueHigh) - PaidOpCharge2023_H;
    ProjDeduction2025_H = floor(VU2025ValueHigh) - PaidOpCharge2025_H;
    ProjDeduction2028_H = floor(VU2028ValueHigh) - PaidOpCharge2028_H;
    ProjDeduction2030_H = floor(VU2030ValueHigh) - PaidOpCharge2030_H;
    ProjDeduction2035_H = floor(VU2035ValueHigh) - PaidOpCharge2035_H;
    ProjDeductionRet_H = floor(VURetValueHigh) - PaidOpChargeRet_H;
    ProjDeductionVentureGrowth_H = floor(VUVentureGrowthValueHigh) - PaidOpChargeVentureGrowth_H;//
    ProjDeductionVentureBlueChip_H = floor(VUVentureBlueChipValueHigh) - PaidOpChargeVentureBlueChip_H;//
    ProjDeductionVentureDana_H = floor(VUVentureDanaValueHigh) - PaidOpChargeVentureDana_H;//
    ProjDeductionVentureManaged_H = floor(VUVentureManagedValueHigh) - PaidOpChargeVentureManaged_H;//
    ProjDeductionVentureIncome_H = floor(VUVentureIncomeValueHigh) - PaidOpChargeVentureIncome_H;//
    ProjDeductionVenture6666_H = floor(VUVenture6666ValueHigh) - PaidOpChargeVenture6666_H;//
    ProjDeductionVenture7777_H = floor(VUVenture7777ValueHigh) - PaidOpChargeVenture7777_H;//
    ProjDeductionVenture8888_H = floor(VUVenture8888ValueHigh) - PaidOpChargeVenture8888_H;//
    ProjDeductionVenture9999_H = floor(VUVenture9999ValueHigh) - PaidOpChargeVenture9999_H;//
    ProjDeductionDana_H = floor(VUDanaValueHigh) - PaidOpChargeDana_H;
    ProjDeductionSmart_H = floor(VUSmartValueHigh) - PaidOpChargeSmart_H;
    ProjDeductionVenture_H = floor(VUVentureValueHigh) - PaidOpChargeVenture_H;
    ProjDeductionCash_H = floor(VUCashValueHigh) - PaidOpChargeCash_H;
    ProjDeductionSum_H = ProjDeduction2023_H + ProjDeduction2025_H + ProjDeduction2028_H + ProjDeduction2030_H + ProjDeduction2035_H + ProjDeductionCash_H + ProjDeductionRet_H + ProjDeductionDana_H + ProjDeductionSmart_H + ProjDeductionVenture_H + ProjDeductionVentureGrowth_H + ProjDeductionVentureBlueChip_H + ProjDeductionVentureDana_H + ProjDeductionVentureManaged_H + ProjDeductionVentureIncome_H + ProjDeductionVenture6666_H + ProjDeductionVenture7777_H + ProjDeductionVenture8888_H + ProjDeductionVenture9999_H;
    
    ProjDeduction2023_M = VU2023ValueMedian - PaidOpCharge2023_M;
    ProjDeduction2025_M = VU2025ValueMedian - PaidOpCharge2025_M;
    ProjDeduction2028_M = VU2028ValueMedian - PaidOpCharge2028_M;
    ProjDeduction2030_M = VU2030ValueMedian - PaidOpCharge2030_M;
    ProjDeduction2035_M = VU2035ValueMedian - PaidOpCharge2035_M;
    ProjDeductionRet_M = VURetValueMedian - PaidOpChargeRet_M;
    ProjDeductionVentureGrowth_M = VUVentureGrowthValueMedian - PaidOpChargeVentureGrowth_M;//
    ProjDeductionVentureBlueChip_M = VUVentureBlueChipValueMedian - PaidOpChargeVentureBlueChip_M;//
    ProjDeductionVentureDana_M = VUVentureDanaValueMedian - PaidOpChargeVentureDana_M;//
    ProjDeductionVentureManaged_M = VUVentureManagedValueMedian - PaidOpChargeVentureManaged_M;//
    ProjDeductionVentureIncome_M = VUVentureIncomeValueMedian - PaidOpChargeVentureIncome_M;//
    ProjDeductionVenture6666_M = VUVenture6666ValueMedian - PaidOpChargeVenture6666_M;//
    ProjDeductionVenture7777_M = VUVenture7777ValueMedian - PaidOpChargeVenture7777_M;//
    ProjDeductionVenture8888_M = VUVenture8888ValueMedian - PaidOpChargeVenture8888_M;//
    ProjDeductionVenture9999_M = VUVenture9999ValueMedian - PaidOpChargeVenture9999_M;//
    ProjDeductionDana_M = VUDanaValueMedian - PaidOpChargeDana_M;
    ProjDeductionSmart_M = VUSmartValueMedian - PaidOpChargeSmart_M;
    ProjDeductionVenture_M = VUVentureValueMedian - PaidOpChargeVenture_M;
    ProjDeductionCash_M = VUCashValueMedian - PaidOpChargeCash_M;
    ProjDeductionSum_M = ProjDeduction2023_M + ProjDeduction2025_M + ProjDeduction2028_M + ProjDeduction2030_M + ProjDeduction2035_M + ProjDeductionCash_M + ProjDeductionRet_M + ProjDeductionDana_M + ProjDeductionSmart_M + ProjDeductionVenture_M + ProjDeductionVentureGrowth_M + ProjDeductionVentureBlueChip_M + ProjDeductionVentureDana_M + ProjDeductionVentureManaged_M + ProjDeductionVentureIncome_M + ProjDeductionVenture6666_M + ProjDeductionVenture7777_M + ProjDeductionVenture8888_M + ProjDeductionVenture9999_M;
    
    ProjDeduction2023_L = VU2023ValueLow - PaidOpCharge2023_L;
    ProjDeduction2025_L = VU2025ValueLow - PaidOpCharge2025_L;
    ProjDeduction2028_L = VU2028ValueLow - PaidOpCharge2028_L;
    ProjDeduction2030_L = VU2030ValueLow - PaidOpCharge2030_L;
    ProjDeduction2035_L = VU2035ValueLow - PaidOpCharge2035_L;
    ProjDeductionRet_L = VURetValueLow - PaidOpChargeRet_L;
    ProjDeductionVentureGrowth_L = VUVentureGrowthValueLow - PaidOpChargeVentureGrowth_L;//
    ProjDeductionVentureBlueChip_L = VUVentureBlueChipValueLow - PaidOpChargeVentureBlueChip_L;//
    ProjDeductionVentureDana_L = VUVentureDanaValueLow - PaidOpChargeVentureDana_L;//
    ProjDeductionVentureManaged_L = VUVentureManagedValueLow - PaidOpChargeVentureManaged_L;//
    ProjDeductionVentureIncome_L = VUVentureIncomeValueLow - PaidOpChargeVentureIncome_L;//
    ProjDeductionVenture6666_L = VUVenture6666ValueLow - PaidOpChargeVenture6666_L;//
    ProjDeductionVenture7777_L = VUVenture7777ValueLow - PaidOpChargeVenture7777_L;//
    ProjDeductionVenture8888_L = VUVenture8888ValueLow - PaidOpChargeVenture8888_L;//
    ProjDeductionVenture9999_L = VUVenture9999ValueLow - PaidOpChargeVenture9999_L;//
    ProjDeductionDana_L = VUDanaValueLow - PaidOpChargeDana_L;
    ProjDeductionSmart_L = VUSmartValueLow - PaidOpChargeSmart_L;
    ProjDeductionVenture_L = VUVentureValueLow - PaidOpChargeVenture_L;
    ProjDeductionCash_L = VUCashValueLow - PaidOpChargeCash_L;
    ProjDeductionSum_L = ProjDeduction2023_L + ProjDeduction2025_L + ProjDeduction2028_L + ProjDeduction2030_L + ProjDeduction2035_L + ProjDeductionCash_L + ProjDeductionRet_L + ProjDeductionDana_L + ProjDeductionSmart_L + ProjDeductionVenture_L + ProjDeductionVentureGrowth_L + ProjDeductionVentureBlueChip_L + ProjDeductionVentureDana_L + ProjDeductionVentureManaged_L + ProjDeductionVentureIncome_L + ProjDeductionVenture6666_L + ProjDeductionVenture7777_L + ProjDeductionVenture8888_L + ProjDeductionVenture9999_L;
    
    if(ProjDeductionSum_H < 0 || ProjDeductionSum_M < 0 || ProjDeductionSum_L < 0 ){
        //NSLog(@"%f %f %f", ProjDeductionSum_H, ProjDeductionSum_M, ProjDeductionSum_L);
        OneTimePayOut = OneTimePayOutWithMinSA;
        BOOL bMinSA = [self CalculateRPUO_WithMinSA];
        double AmountToSustain = BasicSA * (0.05 * ([RPUOYear intValue ] -3)  + 0.15);
        
        if (bMinSA == TRUE) {
            if(AmountToSustain < minSA){
                bMinSA = FALSE;
            }
            
        }
        
        if (bMinSA == TRUE) {
            NSString *tempMin = [NSString stringWithFormat:@"%.0f", AmountToSustain ];
            StopMessage1 = [self ErrorMsg:@"R1" andInput1:tempMin andInput2:@"" andInput3:@""];
            StopMessage2 = [self ErrorMsg:@"R2" andInput1:@"" andInput2:@"" andInput3:@""];
            StopMessage3 = @"";
            StopMessage4 = @"";
        }
        else{
            StopMessage1 = [self ErrorMsg:@"R4" andInput1:RPUOYear andInput2:[NSString stringWithFormat:@"%d", 100 - Age] andInput3:@""];
            StopMessage2 = @"";
            StopMessage3 = @"";
            StopMessage4 = @"";
        }
        
        StopExec = TRUE;
        return;
    }
    //-----------------------------
    ReinvestCashFund2023_H = [self Calc_CashFundReinvest:VU2023ValueHigh andVUCash:ProjDeductionCash_H andHighMedLow:@"High"];
    ReinvestCashFund2025_H = [self Calc_CashFundReinvest:VU2025ValueHigh andVUCash:ProjDeductionCash_H andHighMedLow:@"High"];
    ReinvestCashFund2028_H = [self Calc_CashFundReinvest:VU2028ValueHigh andVUCash:ProjDeductionCash_H andHighMedLow:@"High"];
    ReinvestCashFund2030_H = [self Calc_CashFundReinvest:VU2030ValueHigh andVUCash:ProjDeductionCash_H andHighMedLow:@"High"];
    ReinvestCashFund2035_H = [self Calc_CashFundReinvest:VU2035ValueHigh andVUCash:ProjDeductionCash_H andHighMedLow:@"High"];
    ReinvestCashFundRet_H = [self Calc_CashFundReinvest:VURetValueHigh andVUCash:ProjDeductionCash_H andHighMedLow:@"High"];
    ReinvestCashFundVentureGrowth_H = [self Calc_CashFundReinvest:VUVentureGrowthValueHigh andVUCash:ProjDeductionCash_H andHighMedLow:@"High"];//
    ReinvestCashFundVentureBlueChip_H = [self Calc_CashFundReinvest:VUVentureBlueChipValueHigh andVUCash:ProjDeductionCash_H andHighMedLow:@"High"];//
    ReinvestCashFundVentureDana_H = [self Calc_CashFundReinvest:VUVentureDanaValueHigh andVUCash:ProjDeductionCash_H andHighMedLow:@"High"];//
    ReinvestCashFundVentureManaged_H = [self Calc_CashFundReinvest:VUVentureManagedValueHigh andVUCash:ProjDeductionCash_H andHighMedLow:@"High"];//
    ReinvestCashFundVentureIncome_H = [self Calc_CashFundReinvest:VUVentureIncomeValueHigh andVUCash:ProjDeductionCash_H andHighMedLow:@"High"];//
    ReinvestCashFundVenture6666_H = [self Calc_CashFundReinvest:VUVenture6666ValueHigh andVUCash:ProjDeductionCash_H andHighMedLow:@"High"];//
    ReinvestCashFundVenture7777_H = [self Calc_CashFundReinvest:VUVenture7777ValueHigh andVUCash:ProjDeductionCash_H andHighMedLow:@"High"];//
    ReinvestCashFundVenture8888_H = [self Calc_CashFundReinvest:VUVenture8888ValueHigh andVUCash:ProjDeductionCash_H andHighMedLow:@"High"];//
    ReinvestCashFundVenture9999_H = [self Calc_CashFundReinvest:VUVenture9999ValueHigh andVUCash:ProjDeductionCash_H andHighMedLow:@"High"];//
    ReinvestCashFundDana_H = [self Calc_CashFundReinvest:VUDanaValueHigh andVUCash:ProjDeductionCash_H andHighMedLow:@"High"];
    ReinvestCashFundSmart_H = [self Calc_CashFundReinvest:VUSmartValueHigh andVUCash:ProjDeductionCash_H andHighMedLow:@"High"];
    ReinvestCashFundVenture_H = [self Calc_CashFundReinvest:VUVentureValueHigh andVUCash:ProjDeductionCash_H andHighMedLow:@"High"];
    
    ReinvestCashFund2023_M = [self Calc_CashFundReinvest:VU2023ValueMedian andVUCash:ProjDeductionCash_M andHighMedLow:@"Med"];
    ReinvestCashFund2025_M = [self Calc_CashFundReinvest:VU2025ValueMedian andVUCash:ProjDeductionCash_M andHighMedLow:@"Med"];
    ReinvestCashFund2028_M = [self Calc_CashFundReinvest:VU2028ValueMedian andVUCash:ProjDeductionCash_M andHighMedLow:@"Med"];
    ReinvestCashFund2030_M = [self Calc_CashFundReinvest:VU2030ValueMedian andVUCash:ProjDeductionCash_M andHighMedLow:@"Med"];
    ReinvestCashFund2035_M = [self Calc_CashFundReinvest:VU2035ValueMedian andVUCash:ProjDeductionCash_M andHighMedLow:@"Med"];
    ReinvestCashFundRet_M = [self Calc_CashFundReinvest:VURetValueMedian andVUCash:ProjDeductionCash_M andHighMedLow:@"Med"];
    ReinvestCashFundVentureGrowth_M = [self Calc_CashFundReinvest:VUVentureGrowthValueMedian andVUCash:ProjDeductionCash_M andHighMedLow:@"Med"];//
    ReinvestCashFundVentureBlueChip_M = [self Calc_CashFundReinvest:VUVentureBlueChipValueMedian andVUCash:ProjDeductionCash_M andHighMedLow:@"Med"];//
    ReinvestCashFundVentureDana_M = [self Calc_CashFundReinvest:VUVentureDanaValueMedian andVUCash:ProjDeductionCash_M andHighMedLow:@"Med"];//
    ReinvestCashFundVentureManaged_M = [self Calc_CashFundReinvest:VUVentureManagedValueMedian andVUCash:ProjDeductionCash_M andHighMedLow:@"Med"];//
    ReinvestCashFundVentureIncome_M = [self Calc_CashFundReinvest:VUVentureIncomeValueMedian andVUCash:ProjDeductionCash_M andHighMedLow:@"Med"];//
    ReinvestCashFundVenture6666_M = [self Calc_CashFundReinvest:VUVenture6666ValueMedian andVUCash:ProjDeductionCash_M andHighMedLow:@"Med"];//
    ReinvestCashFundVenture7777_M = [self Calc_CashFundReinvest:VUVenture7777ValueMedian andVUCash:ProjDeductionCash_M andHighMedLow:@"Med"];//
    ReinvestCashFundVenture8888_M = [self Calc_CashFundReinvest:VUVenture8888ValueMedian andVUCash:ProjDeductionCash_M andHighMedLow:@"Med"];//
    ReinvestCashFundVenture9999_M = [self Calc_CashFundReinvest:VUVenture9999ValueMedian andVUCash:ProjDeductionCash_M andHighMedLow:@"Med"];//
    ReinvestCashFundDana_M = [self Calc_CashFundReinvest:VUDanaValueMedian andVUCash:ProjDeductionCash_M andHighMedLow:@"Med"];
    ReinvestCashFundSmart_M = [self Calc_CashFundReinvest:VUSmartValueMedian andVUCash:ProjDeductionCash_M andHighMedLow:@"Med"];
    ReinvestCashFundVenture_M = [self Calc_CashFundReinvest:VUVentureValueMedian andVUCash:ProjDeductionCash_M andHighMedLow:@"Med"];
    
    ReinvestCashFund2023_L = [self Calc_CashFundReinvest:VU2023ValueLow andVUCash:ProjDeductionCash_L andHighMedLow:@"Low"];
    ReinvestCashFund2025_L = [self Calc_CashFundReinvest:VU2025ValueLow andVUCash:ProjDeductionCash_L andHighMedLow:@"Low"];
    ReinvestCashFund2028_L = [self Calc_CashFundReinvest:VU2028ValueLow andVUCash:ProjDeductionCash_L andHighMedLow:@"Low"];
    ReinvestCashFund2030_L = [self Calc_CashFundReinvest:VU2030ValueLow andVUCash:ProjDeductionCash_L andHighMedLow:@"Low"];
    ReinvestCashFund2035_L = [self Calc_CashFundReinvest:VU2035ValueLow andVUCash:ProjDeductionCash_L andHighMedLow:@"Low"];
    ReinvestCashFundRet_L = [self Calc_CashFundReinvest:VURetValueLow andVUCash:ProjDeductionCash_L andHighMedLow:@"Low"];
    ReinvestCashFundVentureGrowth_L = [self Calc_CashFundReinvest:VUVentureGrowthValueLow andVUCash:ProjDeductionCash_L andHighMedLow:@"Low"];//
    ReinvestCashFundVentureBlueChip_L = [self Calc_CashFundReinvest:VUVentureBlueChipValueLow andVUCash:ProjDeductionCash_L andHighMedLow:@"Low"];//
    ReinvestCashFundVentureDana_L = [self Calc_CashFundReinvest:VUVentureDanaValueLow andVUCash:ProjDeductionCash_L andHighMedLow:@"Low"];//
    ReinvestCashFundVentureManaged_L = [self Calc_CashFundReinvest:VUVentureManagedValueLow andVUCash:ProjDeductionCash_L andHighMedLow:@"Low"];//
    ReinvestCashFundVentureIncome_L = [self Calc_CashFundReinvest:VUVentureIncomeValueLow andVUCash:ProjDeductionCash_L andHighMedLow:@"Low"];//
    ReinvestCashFundVenture6666_L = [self Calc_CashFundReinvest:VUVenture6666ValueLow andVUCash:ProjDeductionCash_L andHighMedLow:@"Low"];//
    ReinvestCashFundVenture7777_L = [self Calc_CashFundReinvest:VUVenture7777ValueLow andVUCash:ProjDeductionCash_L andHighMedLow:@"Low"];//
    ReinvestCashFundVenture8888_L = [self Calc_CashFundReinvest:VUVenture8888ValueLow andVUCash:ProjDeductionCash_L andHighMedLow:@"Low"];//
    ReinvestCashFundVenture9999_L = [self Calc_CashFundReinvest:VUVenture9999ValueLow andVUCash:ProjDeductionCash_L andHighMedLow:@"Low"];//
    ReinvestCashFundDana_L = [self Calc_CashFundReinvest:VUDanaValueLow andVUCash:ProjDeductionCash_L andHighMedLow:@"Low"];
    ReinvestCashFundSmart_L = [self Calc_CashFundReinvest:VUSmartValueLow andVUCash:ProjDeductionCash_L andHighMedLow:@"Low"];
    ReinvestCashFundVenture_L = [self Calc_CashFundReinvest:VUVentureValueLow andVUCash:ProjDeductionCash_L andHighMedLow:@"Low"];
    
    double OriginalReinvestCashFundCase_H;
    
    if (ReinvestCashFund2023_H + ReinvestCashFund2025_H + ReinvestCashFund2028_H + ReinvestCashFund2030_H + ReinvestCashFund2035_H + ReinvestCashFundRet_H + ReinvestCashFundDana_H + ReinvestCashFundSmart_H + ReinvestCashFundVenture_H + ReinvestCashFundVentureGrowth_H + ReinvestCashFundVentureBlueChip_H + ReinvestCashFundVentureDana_H + ReinvestCashFundVentureManaged_H + ReinvestCashFundVentureIncome_H + ReinvestCashFundVenture6666_H + ReinvestCashFundVenture7777_H + ReinvestCashFundVenture8888_H + ReinvestCashFundVenture9999_H == 0 ) {
        ReinvestCashFundCase_H = ProjDeductionCash_H;
        OriginalReinvestCashFundCase_H = OriginalProjDeductionCash_H;
    }
    else{
        if (ProjDeductionCash_H > 0) {
            ReinvestCashFundCase_H = -ProjDeductionCash_H;
            OriginalReinvestCashFundCase_H = -OriginalProjDeductionCash_H;
        }
        else{
            ReinvestCashFundCase_H = 0;
            OriginalReinvestCashFundCase_H = 0;
        }
    }
    
    if (ReinvestCashFund2023_M + ReinvestCashFund2025_M + ReinvestCashFund2028_M + ReinvestCashFund2030_M + ReinvestCashFund2035_M + ReinvestCashFundRet_M + ReinvestCashFundDana_M + ReinvestCashFundSmart_M + ReinvestCashFundVenture_M + ReinvestCashFundVentureGrowth_M  + ReinvestCashFundVentureBlueChip_M + ReinvestCashFundVentureDana_M + ReinvestCashFundVentureManaged_M + ReinvestCashFundVentureIncome_M + ReinvestCashFundVenture6666_M + ReinvestCashFundVenture7777_M + ReinvestCashFundVenture8888_M + ReinvestCashFundVenture9999_M== 0 ) {
        ReinvestCashFundCase_M = ProjDeductionCash_M;
    }
    else{
        if (ProjDeductionCash_M > 0) {
            ReinvestCashFundCase_M = -ProjDeductionCash_M;
        }
        else{
            ReinvestCashFundCase_M = 0;
        }
    }
    
    if (ReinvestCashFund2023_L + ReinvestCashFund2025_L + ReinvestCashFund2028_L + ReinvestCashFund2030_L + ReinvestCashFund2035_L + ReinvestCashFundRet_L + ReinvestCashFundDana_L + ReinvestCashFundSmart_L + ReinvestCashFundVenture_L + ReinvestCashFundVentureGrowth_L + ReinvestCashFundVentureBlueChip_L + ReinvestCashFundVentureDana_L + ReinvestCashFundVentureManaged_L + ReinvestCashFundVentureIncome_L + ReinvestCashFundVenture6666_L + ReinvestCashFundVenture7777_L + ReinvestCashFundVenture8888_L + ReinvestCashFundVenture9999_L == 0 ) {
        ReinvestCashFundCase_L = ProjDeductionCash_L;
    }
    else{
        if (ProjDeductionCash_L > 0) {
            ReinvestCashFundCase_L = -ProjDeductionCash_L;
        }
        else{
            ReinvestCashFundCase_L = 0;
        }
    }
    
    ReinvestCashFundSum_H = ReinvestCashFund2023_H + ReinvestCashFund2025_H + ReinvestCashFund2028_H + ReinvestCashFund2030_H + ReinvestCashFund2035_H + ReinvestCashFundRet_H + ReinvestCashFundDana_H + ReinvestCashFundCase_H + ReinvestCashFundSmart_H + ReinvestCashFundVenture_H + ReinvestCashFundVentureGrowth_H + ReinvestCashFundVentureBlueChip_H + ReinvestCashFundVentureDana_H + ReinvestCashFundVentureManaged_H + ReinvestCashFundVentureIncome_H + ReinvestCashFundVenture6666_H + ReinvestCashFundVenture7777_H + ReinvestCashFundVenture8888_H + ReinvestCashFundVenture9999_H;
    ReinvestCashFundSum_M = ReinvestCashFund2023_M + ReinvestCashFund2025_M + ReinvestCashFund2028_M + ReinvestCashFund2030_M + ReinvestCashFund2035_M + ReinvestCashFundRet_M + ReinvestCashFundDana_M + ReinvestCashFundCase_M + ReinvestCashFundSmart_M + ReinvestCashFundVenture_M + ReinvestCashFundVentureGrowth_M + ReinvestCashFundVentureBlueChip_M + ReinvestCashFundVentureDana_M + ReinvestCashFundVentureManaged_M + ReinvestCashFundVentureIncome_M + ReinvestCashFundVenture6666_M + ReinvestCashFundVenture7777_M + ReinvestCashFundVenture8888_M + ReinvestCashFundVenture9999_M;
    ReinvestCashFundSum_L = ReinvestCashFund2023_L + ReinvestCashFund2025_L + ReinvestCashFund2028_L + ReinvestCashFund2030_L + ReinvestCashFund2035_L + ReinvestCashFundRet_L + ReinvestCashFundDana_L + ReinvestCashFundCase_L + ReinvestCashFundSmart_L + ReinvestCashFundVenture_L + ReinvestCashFundVentureGrowth_L +ReinvestCashFundVentureBlueChip_L + ReinvestCashFundVentureDana_L + ReinvestCashFundVentureManaged_L + ReinvestCashFundVentureIncome_L + ReinvestCashFundVenture6666_L + ReinvestCashFundVenture7777_L + ReinvestCashFundVenture8888_L + ReinvestCashFundVenture9999_L;
    
    double OriginalProjValAfterReinvest2025_H, OriginalProjValAfterReinvest2028_H, OriginalProjValAfterReinvest2030_H, OriginalProjValAfterReinvest2035_H, OriginalProjValAfterReinvestDana_H, OriginalProjValAfterReinvestSmart_H, OriginalProjValAfterReinvestVenture_H, OriginalProjValAfterReinvestRet_H, OriginalProjValAfterReinvestCash_H, OriginalProjValAfterReinvestVentureGrowth_H, OriginalProjValAfterReinvestVentureBlueChip_H, OriginalProjValAfterReinvestVentureDana_H, OriginalProjValAfterReinvestVentureManaged_H, OriginalProjValAfterReinvestVentureIncome_H, OriginalProjValAfterReinvestVenture6666_H, OriginalProjValAfterReinvestVenture7777_H, OriginalProjValAfterReinvestVenture8888_H, OriginalProjValAfterReinvestVenture9999_H;
    
    if (VUCash_FundAllo_Percen == 100) {
        ProjValAfterReinvestCash_H = ProjDeductionCash_H;
        ProjValAfterReinvestCash_M = ProjDeductionCash_M;
        ProjValAfterReinvestCash_L = ProjDeductionCash_L;
        
        ProjValAfterReinvestSum_H = ProjDeductionCash_H;
        ProjValAfterReinvestSum_M = ProjDeductionCash_M;
        ProjValAfterReinvestSum_L = ProjDeductionCash_L;
    }
    else{
        
        
        OriginalProjValAfterReinvest2025_H = OriginalProjDeduction2025_H + ReinvestCashFund2025_H;
        OriginalProjValAfterReinvest2028_H = OriginalProjDeduction2028_H + ReinvestCashFund2028_H;
        OriginalProjValAfterReinvest2030_H = OriginalProjDeduction2030_H + ReinvestCashFund2030_H;
        OriginalProjValAfterReinvest2035_H = OriginalProjDeduction2035_H + ReinvestCashFund2035_H;
        OriginalProjValAfterReinvestRet_H = OriginalProjDeductionRet_H + ReinvestCashFundRet_H;
        OriginalProjValAfterReinvestVentureGrowth_H = OriginalProjDeductionVentureGrowth_H + ReinvestCashFundVentureGrowth_H;//
        OriginalProjValAfterReinvestVentureBlueChip_H = OriginalProjDeductionVentureBlueChip_H + ReinvestCashFundVentureBlueChip_H;//
        OriginalProjValAfterReinvestVentureDana_H = OriginalProjDeductionVentureDana_H + ReinvestCashFundVentureDana_H;//
        OriginalProjValAfterReinvestVentureManaged_H = OriginalProjDeductionVentureManaged_H + ReinvestCashFundVentureManaged_H;//
        OriginalProjValAfterReinvestVentureIncome_H = OriginalProjDeductionVentureIncome_H + ReinvestCashFundVentureIncome_H;//
        OriginalProjValAfterReinvestVenture6666_H = OriginalProjDeductionVenture6666_H + ReinvestCashFundVenture6666_H;//
        OriginalProjValAfterReinvestVenture7777_H = OriginalProjDeductionVenture7777_H + ReinvestCashFundVenture7777_H;//
        OriginalProjValAfterReinvestVenture8888_H = OriginalProjDeductionVenture8888_H + ReinvestCashFundVenture8888_H;//
        OriginalProjValAfterReinvestVenture9999_H = OriginalProjDeductionVenture9999_H + ReinvestCashFundVenture9999_H;//
        OriginalProjValAfterReinvestDana_H = OriginalProjDeductionDana_H + ReinvestCashFundDana_H;
        OriginalProjValAfterReinvestSmart_H = OriginalProjDeductionSmart_H + ReinvestCashFundSmart_H;
        OriginalProjValAfterReinvestVenture_H = OriginalProjDeductionVenture_H + ReinvestCashFundVenture_H;
        OriginalProjValAfterReinvestCash_H = ReinvestCashFundSum_H;
        
        ProjValAfterReinvest2023_H = ProjDeduction2023_H + ReinvestCashFund2023_H;
        ProjValAfterReinvest2025_H = ProjDeduction2025_H + ReinvestCashFund2025_H;
        ProjValAfterReinvest2028_H = ProjDeduction2028_H + ReinvestCashFund2028_H;
        ProjValAfterReinvest2030_H = ProjDeduction2030_H + ReinvestCashFund2030_H;
        ProjValAfterReinvest2035_H = ProjDeduction2035_H + ReinvestCashFund2035_H;
        ProjValAfterReinvestRet_H = ProjDeductionRet_H + ReinvestCashFundRet_H;
        ProjValAfterReinvestVentureGrowth_H = ProjDeductionVentureGrowth_H + ReinvestCashFundVentureGrowth_H;//
        ProjValAfterReinvestVentureBlueChip_H = ProjDeductionVentureBlueChip_H + ReinvestCashFundVentureBlueChip_H;//
        ProjValAfterReinvestVentureDana_H = ProjDeductionVentureDana_H + ReinvestCashFundVentureDana_H;//
        ProjValAfterReinvestVentureManaged_H = ProjDeductionVentureManaged_H + ReinvestCashFundVentureManaged_H;//
        ProjValAfterReinvestVentureIncome_H = ProjDeductionVentureIncome_H + ReinvestCashFundVentureIncome_H;//
        ProjValAfterReinvestVenture6666_H = ProjDeductionVenture6666_H + ReinvestCashFundVenture6666_H;//
        ProjValAfterReinvestVenture7777_H = ProjDeductionVenture7777_H + ReinvestCashFundVenture7777_H;//
        ProjValAfterReinvestVenture8888_H = ProjDeductionVenture8888_H + ReinvestCashFundVenture8888_H;//
        ProjValAfterReinvestVenture9999_H = ProjDeductionVenture9999_H + ReinvestCashFundVenture9999_H;//
        ProjValAfterReinvestDana_H = ProjDeductionDana_H + ReinvestCashFundDana_H;
        ProjValAfterReinvestSmart_H = ProjDeductionSmart_H + ReinvestCashFundSmart_H;
        ProjValAfterReinvestVenture_H = ProjDeductionVenture_H + ReinvestCashFundVenture_H;
        ProjValAfterReinvestCash_H = ReinvestCashFundSum_H;
        ProjValAfterReinvestSum_H = ProjValAfterReinvest2023_H + ProjValAfterReinvest2025_H + ProjValAfterReinvest2028_H + ProjValAfterReinvest2030_H + ProjValAfterReinvest2035_H + ProjValAfterReinvestRet_H +
        ProjValAfterReinvestDana_H + ProjValAfterReinvestSmart_H + ProjValAfterReinvestVenture_H + ProjValAfterReinvestVentureGrowth_H + ProjValAfterReinvestVentureBlueChip_H + ProjValAfterReinvestVentureDana_H + ProjValAfterReinvestVentureManaged_H + ProjValAfterReinvestVentureIncome_H + ProjValAfterReinvestVenture6666_H + ProjValAfterReinvestVenture7777_H + ProjValAfterReinvestVenture8888_H + ProjValAfterReinvestVenture9999_H;
        
        ProjValAfterReinvest2023_M = ProjDeduction2023_M + ReinvestCashFund2023_M;
        ProjValAfterReinvest2025_M = ProjDeduction2025_M + ReinvestCashFund2025_M;
        ProjValAfterReinvest2028_M = ProjDeduction2028_M + ReinvestCashFund2028_M;
        ProjValAfterReinvest2030_M = ProjDeduction2030_M + ReinvestCashFund2030_M;
        ProjValAfterReinvest2035_M = ProjDeduction2035_M + ReinvestCashFund2035_M;
        ProjValAfterReinvestRet_M = ProjDeductionRet_M + ReinvestCashFundRet_M;
        ProjValAfterReinvestVentureGrowth_M = ProjDeductionVentureGrowth_M + ReinvestCashFundVentureGrowth_M;//
        ProjValAfterReinvestVentureBlueChip_M = ProjDeductionVentureBlueChip_M + ReinvestCashFundVentureBlueChip_M;//
        ProjValAfterReinvestVentureDana_M = ProjDeductionVentureDana_M + ReinvestCashFundVentureDana_M;//
        ProjValAfterReinvestVentureManaged_M = ProjDeductionVentureManaged_M + ReinvestCashFundVentureManaged_M;//
        ProjValAfterReinvestVentureIncome_M = ProjDeductionVentureIncome_M + ReinvestCashFundVentureIncome_M;//
        ProjValAfterReinvestVenture6666_M = ProjDeductionVenture6666_M + ReinvestCashFundVenture6666_M;//
        ProjValAfterReinvestVenture7777_M = ProjDeductionVenture7777_M + ReinvestCashFundVenture7777_M;//
        ProjValAfterReinvestVenture8888_M = ProjDeductionVenture8888_M + ReinvestCashFundVenture8888_M;//
        ProjValAfterReinvestVenture9999_M = ProjDeductionVenture9999_M + ReinvestCashFundVenture9999_M;//
        ProjValAfterReinvestDana_M = ProjDeductionDana_M + ReinvestCashFundDana_M;
        ProjValAfterReinvestSmart_M = ProjDeductionSmart_M + ReinvestCashFundSmart_M;
        ProjValAfterReinvestVenture_M = ProjDeductionVenture_M + ReinvestCashFundVenture_M;
        ProjValAfterReinvestCash_M = ReinvestCashFundSum_M;
        ProjValAfterReinvestSum_M = ProjValAfterReinvest2023_M + ProjValAfterReinvest2025_M + ProjValAfterReinvest2028_M + ProjValAfterReinvest2030_M + ProjValAfterReinvest2035_M + ProjValAfterReinvestRet_M +
        ProjValAfterReinvestDana_M + ProjValAfterReinvestSmart_M + ProjValAfterReinvestVenture_M + ProjValAfterReinvestVentureGrowth_M + ProjValAfterReinvestVentureBlueChip_M + ProjValAfterReinvestVentureDana_M + ProjValAfterReinvestVentureManaged_M + ProjValAfterReinvestVentureIncome_M + ProjValAfterReinvestVenture6666_M + ProjValAfterReinvestVenture7777_M + ProjValAfterReinvestVenture8888_M + ProjValAfterReinvestVenture9999_M;
        
        ProjValAfterReinvest2023_L = ProjDeduction2023_L + ReinvestCashFund2023_L;
        ProjValAfterReinvest2025_L = ProjDeduction2025_L + ReinvestCashFund2025_L;
        ProjValAfterReinvest2028_L = ProjDeduction2028_L + ReinvestCashFund2028_L;
        ProjValAfterReinvest2030_L = ProjDeduction2030_L + ReinvestCashFund2030_L;
        ProjValAfterReinvest2035_L = ProjDeduction2035_L + ReinvestCashFund2035_L;
        ProjValAfterReinvestRet_L = ProjDeductionRet_L + ReinvestCashFundRet_L;
        ProjValAfterReinvestVentureGrowth_L = ProjDeductionVentureGrowth_L + ReinvestCashFundVentureGrowth_L;//
        ProjValAfterReinvestVentureBlueChip_L = ProjDeductionVentureBlueChip_L + ReinvestCashFundVentureBlueChip_L;//
        ProjValAfterReinvestVentureDana_L = ProjDeductionVentureDana_L + ReinvestCashFundVentureDana_L;//
        ProjValAfterReinvestVentureManaged_L = ProjDeductionVentureManaged_L + ReinvestCashFundVentureManaged_L;//
        ProjValAfterReinvestVentureIncome_L = ProjDeductionVentureIncome_L + ReinvestCashFundVentureIncome_L;//
        ProjValAfterReinvestVenture6666_L = ProjDeductionVenture6666_L + ReinvestCashFundVenture6666_L;//
        ProjValAfterReinvestVenture7777_L = ProjDeductionVenture7777_L + ReinvestCashFundVenture7777_L;//
        ProjValAfterReinvestVenture8888_L = ProjDeductionVenture8888_L + ReinvestCashFundVenture8888_L;//
        ProjValAfterReinvestVenture9999_L = ProjDeductionVenture9999_L + ReinvestCashFundVenture9999_L;//
        
        ProjValAfterReinvestDana_L = ProjDeductionDana_L + ReinvestCashFundDana_L;
        ProjValAfterReinvestSmart_L = ProjDeductionSmart_L + ReinvestCashFundSmart_L;
        ProjValAfterReinvestVenture_L = ProjDeductionVenture_L + ReinvestCashFundVenture_L;
        ProjValAfterReinvestCash_L = ReinvestCashFundSum_L;
        ProjValAfterReinvestSum_L = ProjValAfterReinvest2023_L + ProjValAfterReinvest2025_L + ProjValAfterReinvest2028_L + ProjValAfterReinvest2030_L + ProjValAfterReinvest2035_L + ProjValAfterReinvestRet_L +
        ProjValAfterReinvestDana_L + ProjValAfterReinvestSmart_L + ProjValAfterReinvestVenture_L + ProjValAfterReinvestVentureGrowth_L + ProjValAfterReinvestVentureBlueChip_L + ProjValAfterReinvestVentureDana_L + ProjValAfterReinvestVentureManaged_L + ProjValAfterReinvestVentureIncome_L + ProjValAfterReinvestVenture6666_L + ProjValAfterReinvestVenture7777_L + ProjValAfterReinvestVenture8888_L + ProjValAfterReinvestVenture9999_L;
    }
    //-------------------
    
    PrevPaidUpOptionTable_2023_High = ProjValAfterReinvest2023_H;
    PrevPaidUpOptionTable_2025_High = ProjValAfterReinvest2025_H;
    PrevPaidUpOptionTable_2028_High = ProjValAfterReinvest2028_H;
    PrevPaidUpOptionTable_2030_High = ProjValAfterReinvest2030_H;
    PrevPaidUpOptionTable_2035_High = ProjValAfterReinvest2035_H;
    PrevPaidUpOptionTable_Cash_High = ProjValAfterReinvestCash_H;
    PrevPaidUpOptionTable_Ret_High = ProjValAfterReinvestRet_H;
    PrevPaidUpOptionTable_VentureGrowth_High = ProjValAfterReinvestVentureGrowth_H;//
    PrevPaidUpOptionTable_VentureBlueChip_High = ProjValAfterReinvestVentureBlueChip_H;//
    PrevPaidUpOptionTable_VentureDana_High = ProjValAfterReinvestVentureDana_H;//
    PrevPaidUpOptionTable_VentureManaged_High = ProjValAfterReinvestVentureManaged_H;//
    PrevPaidUpOptionTable_VentureIncome_High = ProjValAfterReinvestVentureIncome_H;//
    PrevPaidUpOptionTable_Venture6666_High = ProjValAfterReinvestVenture6666_H;//
    PrevPaidUpOptionTable_Venture7777_High = ProjValAfterReinvestVenture7777_H;//
    PrevPaidUpOptionTable_Venture8888_High = ProjValAfterReinvestVenture8888_H;//
    PrevPaidUpOptionTable_Venture9999_High = ProjValAfterReinvestVenture9999_H;//
    PrevPaidUpOptionTable_Dana_High = ProjValAfterReinvestDana_H;
    PrevPaidUpOptionTable_Smart_High = ProjValAfterReinvestSmart_H;
    PrevPaidUpOptionTable_Venture_High = ProjValAfterReinvestVenture_H;
    
    PrevPaidUpOptionTable_2023_Median = ProjValAfterReinvest2023_M;
    PrevPaidUpOptionTable_2025_Median = ProjValAfterReinvest2025_M;
    PrevPaidUpOptionTable_2028_Median = ProjValAfterReinvest2028_M;
    PrevPaidUpOptionTable_2030_Median = ProjValAfterReinvest2030_M;
    PrevPaidUpOptionTable_2035_Median = ProjValAfterReinvest2035_M;
    PrevPaidUpOptionTable_Cash_Median = ProjValAfterReinvestCash_M;
    PrevPaidUpOptionTable_Ret_Median = ProjValAfterReinvestRet_M;
    PrevPaidUpOptionTable_VentureGrowth_Median = ProjValAfterReinvestVentureGrowth_M;//
    PrevPaidUpOptionTable_VentureBlueChip_Median = ProjValAfterReinvestVentureBlueChip_M;//
    PrevPaidUpOptionTable_VentureDana_Median = ProjValAfterReinvestVentureDana_M;//
    PrevPaidUpOptionTable_VentureManaged_Median = ProjValAfterReinvestVentureManaged_M;//
    PrevPaidUpOptionTable_VentureIncome_Median = ProjValAfterReinvestVentureIncome_M;//
    PrevPaidUpOptionTable_Venture6666_Median = ProjValAfterReinvestVenture6666_M;//
    PrevPaidUpOptionTable_Venture7777_Median = ProjValAfterReinvestVenture7777_M;//
    PrevPaidUpOptionTable_Venture8888_Median = ProjValAfterReinvestVenture8888_M;//
    PrevPaidUpOptionTable_Venture9999_Median = ProjValAfterReinvestVenture9999_M;//
    PrevPaidUpOptionTable_Dana_Median = ProjValAfterReinvestDana_M;
    PrevPaidUpOptionTable_Smart_Median = ProjValAfterReinvestSmart_M;
    PrevPaidUpOptionTable_Venture_Median = ProjValAfterReinvestVenture_M;
    
    PrevPaidUpOptionTable_2023_Low = ProjValAfterReinvest2023_L;
    PrevPaidUpOptionTable_2025_Low = ProjValAfterReinvest2025_L;
    PrevPaidUpOptionTable_2028_Low = ProjValAfterReinvest2028_L;
    PrevPaidUpOptionTable_2030_Low = ProjValAfterReinvest2030_L;
    PrevPaidUpOptionTable_2035_Low = ProjValAfterReinvest2035_L;
    PrevPaidUpOptionTable_Cash_Low = ProjValAfterReinvestCash_L;
    PrevPaidUpOptionTable_Ret_Low = ProjValAfterReinvestRet_L;
    PrevPaidUpOptionTable_VentureGrowth_Low = ProjValAfterReinvestVentureGrowth_L;//
    PrevPaidUpOptionTable_VentureBlueChip_Low = ProjValAfterReinvestVentureBlueChip_L;//
    PrevPaidUpOptionTable_VentureDana_Low = ProjValAfterReinvestVentureDana_L;//
    PrevPaidUpOptionTable_VentureManaged_Low = ProjValAfterReinvestVentureManaged_L;//
    PrevPaidUpOptionTable_VentureIncome_Low = ProjValAfterReinvestVentureIncome_L;//
    PrevPaidUpOptionTable_Venture6666_Low = ProjValAfterReinvestVenture6666_L;//
    PrevPaidUpOptionTable_Venture7777_Low = ProjValAfterReinvestVenture7777_L;//
    PrevPaidUpOptionTable_Venture8888_Low = ProjValAfterReinvestVenture8888_L;//
    PrevPaidUpOptionTable_Venture9999_Low = ProjValAfterReinvestVenture9999_L;//
    PrevPaidUpOptionTable_Dana_Low = ProjValAfterReinvestDana_L;
    PrevPaidUpOptionTable_Smart_Low = ProjValAfterReinvestSmart_L;
    PrevPaidUpOptionTable_Venture_Low = ProjValAfterReinvestVenture_L;
    
    int FromYear = [RPUOYear intValue] + 1;
    int ToYear = 0;
    
    /// commented codes
    ///if (Age > 50) {
    ///ToYear = 75 - Age;
    ///}
    ///else{
    ///ToYear = 25;
    ///}
    ///
    
    if ([getPlanCode isEqualToString:@"UV"]) {
        ToYear = MIN(30, 75 - Age);
    }
    else{
        ToYear = MIN([strCovPeriod intValue], 75 - Age);
    }
    
    double ReinvestRate2023 = 0.00;
    double ReinvestRate2025 = 0.00;
    double ReinvestRate2028 = 0.00;
    double ReinvestRate2030 = 0.00;
    double ReinvestRate2035 = 0.00;
    int ReinvestRate2023to2025, ReinvestRate2023to2028,ReinvestRate2023to2030,ReinvestRate2023to2035,ReinvestRate2023toCash,ReinvestRate2023toRet,ReinvestRate2023toDana,ReinvestRate2023toSmart,ReinvestRate2023toVenture,ReinvestRate2023toVentureGrowth,ReinvestRate2023toVentureBlueChip,ReinvestRate2023toVentureDana,ReinvestRate2023toVentureManaged,ReinvestRate2023toVentureIncome,ReinvestRate2023toVenture6666,ReinvestRate2023toVenture7777,ReinvestRate2023toVenture8888,ReinvestRate2023toVenture9999;
    int ReinvestRate2025to2028, ReinvestRate2025to2030,ReinvestRate2025to2035,ReinvestRate2025toCash,ReinvestRate2025toRet,ReinvestRate2025toDana,ReinvestRate2025toSmart,ReinvestRate2025toVenture,ReinvestRate2025toVentureGrowth,ReinvestRate2025toVentureBlueChip,ReinvestRate2025toVentureDana,ReinvestRate2025toVentureManaged,ReinvestRate2025toVentureIncome,ReinvestRate2025toVenture6666,ReinvestRate2025toVenture7777,ReinvestRate2025toVenture8888,ReinvestRate2025toVenture9999;
    int ReinvestRate2028to2030, ReinvestRate2028to2035,ReinvestRate2028toCash,ReinvestRate2028toRet,ReinvestRate2028toDana,ReinvestRate2028toSmart,ReinvestRate2028toVenture,ReinvestRate2028toVentureGrowth,ReinvestRate2028toVentureBlueChip,ReinvestRate2028toVentureDana,ReinvestRate2028toVentureManaged,ReinvestRate2028toVentureIncome,ReinvestRate2028toVenture6666,ReinvestRate2028toVenture7777,ReinvestRate2028toVenture8888,ReinvestRate2028toVenture9999;
    int ReinvestRate2030to2035, ReinvestRate2030toCash,ReinvestRate2030toRet,ReinvestRate2030toDana,ReinvestRate2030toSmart,ReinvestRate2030toVenture,ReinvestRate2030toVentureGrowth,ReinvestRate2030toVentureBlueChip,ReinvestRate2030toVentureDana,ReinvestRate2030toVentureManaged,ReinvestRate2030toVentureIncome,ReinvestRate2030toVenture6666,ReinvestRate2030toVenture7777,ReinvestRate2030toVenture8888,ReinvestRate2030toVenture9999;
    int ReinvestRate2035toCash, ReinvestRate2035toRet,ReinvestRate2035toDana,ReinvestRate2035toSmart,ReinvestRate2035toVenture,ReinvestRate2035toVentureGrowth,ReinvestRate2035toVentureBlueChip,ReinvestRate2035toVentureDana,ReinvestRate2035toVentureManaged,ReinvestRate2035toVentureIncome,ReinvestRate2035toVenture6666,ReinvestRate2035toVenture7777,ReinvestRate2035toVenture8888,ReinvestRate2035toVenture9999;
    
    double d2023_FundAllo = 0;
    double d2025_FundAllo = 0;
    double d2028_FundAllo = 0;
    double d2030_FundAllo = 0;
    double d2035_FundAllo = 0;
    double dRet_FundAllo = 0;
    double dVentureGrowth_FundAllo = 0;//
    double dVentureBlueChip_FundAllo = 0;//
    double dVentureDana_FundAllo = 0;//
    double dVentureManaged_FundAllo = 0;//
    double dVentureIncome_FundAllo = 0;//
    double dVenture6666_FundAllo = 0;//
    double dVenture7777_FundAllo = 0;//
    double dVenture8888_FundAllo = 0;//
    double dVenture9999_FundAllo = 0;//
    double dDana_FundAllo = 0;
    double dSmart_FundAllo = 0;
    double dVenture_FundAllo = 0;
    double dCash_FundAllo = 0;
    
    double TotalCashFundAllo_Percen = 0;
    
    double d2023PrevYearFundAllo = 0;
    double d2025PrevYearFundAllo = 0;
    double d2028PrevYearFundAllo = 0;
    double d2030PrevYearFundAllo = 0;
    double d2035PrevYearFundAllo = 0;
    double dRetPrevYearFundAllo = 0;
    double dVentureGrowthPrevYearFundAllo = 0;//
    double dVentureBlueChipPrevYearFundAllo = 0;//
    double dVentureDanaPrevYearFundAllo = 0;//
    double dVentureManagedPrevYearFundAllo = 0;//
    double dVentureIncomePrevYearFundAllo = 0;//
    double dVenture6666PrevYearFundAllo = 0;//
    double dVenture7777PrevYearFundAllo = 0;//
    double dVenture8888PrevYearFundAllo = 0;//
    double dVenture9999PrevYearFundAllo = 0;//
    double dDanaPrevYearFundAllo = 0;
    double dSmartPrevYearFundAllo = 0;
    double dVenturePrevYearFundAllo = 0;
    double dCashPrevYearFundAllo = 0;
    
    double dTotalCashPrevYearFundAllo = 0;
    bool show15th =  FALSE;
    
    if (FromYear <= 15 ) {
        show15th = TRUE;
    }
    
    for (int polYear = FromYear; polYear <= ToYear; polYear++) {
        d2023_FundAllo = 0;
        d2025_FundAllo = 0;
        d2028_FundAllo = 0;
        d2030_FundAllo = 0;
        d2035_FundAllo = 0;
        dRet_FundAllo = 0;
        dVentureGrowth_FundAllo = 0;//
        dVentureBlueChip_FundAllo = 0;//
        dVentureDana_FundAllo = 0;//
        dVentureManaged_FundAllo = 0;//
        dVentureIncome_FundAllo = 0;//
        dVenture6666_FundAllo = 0;//
        dVenture7777_FundAllo = 0;//
        dVenture8888_FundAllo = 0;//
        dVenture9999_FundAllo = 0;//
        dDana_FundAllo = 0;
        dSmart_FundAllo = 0;
        dVenture_FundAllo = 0;
        dCash_FundAllo = 0;
        
        d2023PrevYearFundAllo = 0;
        d2025PrevYearFundAllo = 0;
        d2028PrevYearFundAllo = 0;
        d2030PrevYearFundAllo = 0;
        d2035PrevYearFundAllo = 0;
        dRetPrevYearFundAllo = 0;
        dVentureGrowthPrevYearFundAllo = 0;//
        dVentureBlueChipPrevYearFundAllo = 0;//
        dVentureDanaPrevYearFundAllo = 0;//
        dVentureManagedPrevYearFundAllo = 0;//
        dVentureIncomePrevYearFundAllo = 0;//
        dVenture6666PrevYearFundAllo = 0;//
        dVenture7777PrevYearFundAllo = 0;//
        dVenture8888PrevYearFundAllo = 0;//
        dVenture9999PrevYearFundAllo = 0;//
        dDanaPrevYearFundAllo = 0;
        dSmartPrevYearFundAllo = 0;
        dVenturePrevYearFundAllo = 0;
        dCashPrevYearFundAllo = 0;
        
        TotalCashFundAllo_Percen = 0;
        
        d2023_FundAllo = [self ReturnVU2023Fac];
        d2025_FundAllo = [self ReturnVU2025Fac:polYear];
        d2028_FundAllo = [self ReturnVU2028Fac:polYear];
        d2030_FundAllo = [self ReturnVU2030Fac:polYear];
        d2035_FundAllo = [self ReturnVU2035Fac:polYear];
        dRet_FundAllo = [self ReturnVURetFac:polYear];
        dVentureGrowth_FundAllo = [self ReturnVUVentureGrowthFac:polYear];//
        dVentureBlueChip_FundAllo = [self ReturnVUVentureBlueChipFac:polYear];//
        dVentureDana_FundAllo = [self ReturnVUVentureDanaFac:polYear];//
        dVentureManaged_FundAllo = [self ReturnVUVentureManagedFac:polYear];//
        dVentureIncome_FundAllo = [self ReturnVUVentureIncomeFac:polYear];//
        dVenture6666_FundAllo = [self ReturnVUVenture6666Fac:polYear];//
        dVenture7777_FundAllo = [self ReturnVUVenture7777Fac:polYear];//
        dVenture8888_FundAllo = [self ReturnVUVenture8888Fac:polYear];//
        dVenture9999_FundAllo = [self ReturnVUVenture9999Fac:polYear];//
        dDana_FundAllo = [self ReturnVUDanaFac:polYear];
        dSmart_FundAllo = [self ReturnVUSmartFac:polYear];
        dVenture_FundAllo = [self ReturnVUVentureFac:polYear];
        dCash_FundAllo = [self ReturnVUCashFac:polYear];
        
        TotalCashFundAllo_Percen = 100 - dCash_FundAllo;
        
        d2023PrevYearFundAllo = [self ReturnVU2023Fac];
        d2025PrevYearFundAllo = [self ReturnVU2025Fac:polYear - 1];
        d2028PrevYearFundAllo = [self ReturnVU2028Fac:polYear - 1];
        d2030PrevYearFundAllo = [self ReturnVU2030Fac:polYear - 1];
        d2035PrevYearFundAllo = [self ReturnVU2035Fac:polYear - 1];
        dRetPrevYearFundAllo = [self ReturnVURetFac:polYear - 1];
        dVentureGrowthPrevYearFundAllo = [self ReturnVUVentureGrowthFac:polYear - 1];//
        dVentureBlueChipPrevYearFundAllo = [self ReturnVUVentureBlueChipFac:polYear - 1];//
        dVentureDanaPrevYearFundAllo = [self ReturnVUVentureDanaFac:polYear - 1];//
        dVentureManagedPrevYearFundAllo = [self ReturnVUVentureManagedFac:polYear - 1];//
        dVentureIncomePrevYearFundAllo = [self ReturnVUVentureIncomeFac:polYear - 1];//
        dVenture6666PrevYearFundAllo = [self ReturnVUVenture6666Fac:polYear - 1];//
        dVenture7777PrevYearFundAllo = [self ReturnVUVenture7777Fac:polYear - 1];//
        dVenture8888PrevYearFundAllo = [self ReturnVUVenture8888Fac:polYear - 1];//
        dVenture9999PrevYearFundAllo = [self ReturnVUVenture9999Fac:polYear - 1];//
        dDanaPrevYearFundAllo = [self ReturnVUDanaFac:polYear - 1];
        dSmartPrevYearFundAllo = [self ReturnVUSmartFac:polYear - 1];
        dVenturePrevYearFundAllo = [self ReturnVUVentureFac:polYear - 1];
        dCashPrevYearFundAllo = [self ReturnVUCashFac:polYear - 1];
        
        dTotalCashPrevYearFundAllo = 100 - dCashPrevYearFundAllo;
        
        
        
        if (polYear == YearDiff2023 || polYear == YearDiff2025 || polYear == YearDiff2028 || polYear == YearDiff2030 || polYear == YearDiff2035) {
            [self ReturnMonthEverCash1:polYear andMonth:12];
            [self ReturnMonthEverCash6:polYear andMonth:12];
            //[self ReturnMonthEverCash55:polYear andMonth:12];
            [self ReturnMonthEverCash60:polYear andMonth:12];
        }
        else
        {
            [self ReturnEverCash1:polYear];
            [self ReturnEverCash6:polYear];
            //[self ReturnEverCash55:polYear];
            [self ReturnEverCash60:polYear];
        }
        
        if (polYear == FundTerm2023) {
            if (Fund2023PartialReinvest == 0) {
                ReinvestRate2023 = 100; //meaning fully reinvest
            }
            else{
                ReinvestRate2023 = 100 - Fund2023PartialReinvest;
            }
            
            if (Fund2023PartialReinvest != 100) { //meaning not withdraw
                ReinvestRate2023to2025 = Fund2023ReinvestTo2025Fac;
                ReinvestRate2023to2028 = Fund2023ReinvestTo2028Fac;
                ReinvestRate2023to2030 = Fund2023ReinvestTo2030Fac;
                ReinvestRate2023to2035 = Fund2023ReinvestTo2035Fac;
                ReinvestRate2023toCash = Fund2023ReinvestToCashFac;
                ReinvestRate2023toDana = Fund2023ReinvestToDanaFac;
                ReinvestRate2023toRet = Fund2023ReinvestToRetFac;
                ReinvestRate2023toVentureGrowth = Fund2023ReinvestToVentureGrowthFac;//
                ReinvestRate2023toVentureBlueChip = Fund2023ReinvestToVentureBlueChipFac;//
                ReinvestRate2023toVentureDana = Fund2023ReinvestToVentureDanaFac;//
                ReinvestRate2023toVentureManaged = Fund2023ReinvestToVentureManagedFac;//
                ReinvestRate2023toVentureIncome = Fund2023ReinvestToVentureIncomeFac;//
                ReinvestRate2023toVenture6666 = Fund2023ReinvestToVenture6666Fac;//
                ReinvestRate2023toVenture7777 = Fund2023ReinvestToVenture7777Fac;//
                ReinvestRate2023toVenture8888 = Fund2023ReinvestToVenture8888Fac;//
                ReinvestRate2023toVenture9999 = Fund2023ReinvestToVenture9999Fac;//
                ReinvestRate2023toSmart = Fund2023ReinvestToSmartFac;
                ReinvestRate2023toVenture = Fund2023ReinvestToVentureFac;
            }
            else{
                ReinvestRate2023to2025 = 0.00;
                ReinvestRate2023to2028 = 0.00;
                ReinvestRate2023to2030 = 0.00;
                ReinvestRate2023to2035 = 0.00;
                ReinvestRate2023toCash = 0.00;
                ReinvestRate2023toDana = 0.00;
                ReinvestRate2023toRet = 0.00;
                ReinvestRate2023toVentureGrowth = 0.00;//
                ReinvestRate2023toVentureBlueChip = 0.00;//
                ReinvestRate2023toVentureDana = 0.00;//
                ReinvestRate2023toVentureManaged = 0.00;//
                ReinvestRate2023toVentureIncome = 0.00;//
                ReinvestRate2023toVenture6666 = 0.00;//
                ReinvestRate2023toVenture7777 = 0.00;//
                ReinvestRate2023toVenture8888 = 0.00;//
                ReinvestRate2023toVenture9999 = 0.00;//
                ReinvestRate2023toSmart = 0.00;
                ReinvestRate2023toVenture = 0.00;
            }
            
            
            //---- for 2023
            ProjValueMaturity2023_H = [self PaidUpOptionTable_2023_H_Balance:PrevPaidUpOptionTable_2023_High andPolicyYear:polYear];
            ProjWithdraw2023_H = ProjValueMaturity2023_H * ((100 - ReinvestRate2023)/100.00);
            ProjReinvest2023_H = ProjValueMaturity2023_H - ProjWithdraw2023_H;
            
            ProjValueMaturity2023_M = [self PaidUpOptionTable_2023_M_Balance:PrevPaidUpOptionTable_2023_Median andPolicyYear:polYear];
            ProjWithdraw2023_M = ProjValueMaturity2023_M * ((100 - ReinvestRate2023)/100.00);
            ProjReinvest2023_M = ProjValueMaturity2023_M - ProjWithdraw2023_M;
            
            ProjValueMaturity2023_L = [self PaidUpOptionTable_2023_L_Balance:PrevPaidUpOptionTable_2023_Low andPolicyYear:polYear];
            ProjWithdraw2023_L = ProjValueMaturity2023_L * ((100 - ReinvestRate2023)/100.00);
            ProjReinvest2023_L = ProjValueMaturity2023_L - ProjWithdraw2023_L;
            //-------
            
            //-- for 2025---
            ReinvestAmount2023to2025_H = ProjValueMaturity2023_H * (ReinvestRate2023/100.00) * (ReinvestRate2023to2025/100.00);
            ProjValueMaturity2025_H = [self PaidUpOptionTable_2025_High:PrevPaidUpOptionTable_2025_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_2025_High = ProjValueMaturity2025_H;
            
            ReinvestAmount2023to2025_M = ProjValueMaturity2023_M * (ReinvestRate2023/100.00) * (ReinvestRate2023to2025/100.00);
            ProjValueMaturity2025_M = [self PaidUpOptionTable_2025_Median:PrevPaidUpOptionTable_2025_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_2025_Median = ProjValueMaturity2025_M;
            
            ReinvestAmount2023to2025_L = ProjValueMaturity2023_L * (ReinvestRate2023/100.00) * (ReinvestRate2023to2025/100.00);
            ProjValueMaturity2025_L = [self PaidUpOptionTable_2025_Low:PrevPaidUpOptionTable_2025_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_2025_Low = ProjValueMaturity2025_L;
            //------------
            
            //-- for 2028---
            ReinvestAmount2023to2028_H = ProjValueMaturity2023_H * (ReinvestRate2023/100.00) * (ReinvestRate2023to2028/100.00);
            ProjValueMaturity2028_H = [self PaidUpOptionTable_2028_High:PrevPaidUpOptionTable_2028_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_2028_High = ProjValueMaturity2028_H;
            
            ReinvestAmount2023to2028_M = ProjValueMaturity2023_M * (ReinvestRate2023/100.00) * (ReinvestRate2023to2028/100.00);
            ProjValueMaturity2028_M = [self PaidUpOptionTable_2028_Median:PrevPaidUpOptionTable_2028_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_2028_Median = ProjValueMaturity2028_M;
            
            ReinvestAmount2023to2028_L = ProjValueMaturity2023_L * (ReinvestRate2023/100.00) * (ReinvestRate2023to2028/100.00);
            ProjValueMaturity2028_L = [self PaidUpOptionTable_2028_Low:PrevPaidUpOptionTable_2028_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_2028_Low = ProjValueMaturity2028_L;
            //------------
            
            //-- for 2030---
            ReinvestAmount2023to2030_H = ProjValueMaturity2023_H * (ReinvestRate2023/100.00) * (ReinvestRate2023to2030/100.00);
            ProjValueMaturity2030_H = [self PaidUpOptionTable_2030_High:PrevPaidUpOptionTable_2030_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_2030_High = ProjValueMaturity2030_H;
            
            ReinvestAmount2023to2030_M = ProjValueMaturity2023_M * (ReinvestRate2023/100.00) * (ReinvestRate2023to2030/100.00);
            ProjValueMaturity2030_M = [self PaidUpOptionTable_2030_Median:PrevPaidUpOptionTable_2030_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_2030_Median = ProjValueMaturity2030_M;
            
            ReinvestAmount2023to2030_L = ProjValueMaturity2023_L * (ReinvestRate2023/100.00) * (ReinvestRate2023to2030/100.00);
            ProjValueMaturity2030_L = [self PaidUpOptionTable_2030_Low:PrevPaidUpOptionTable_2030_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_2030_Low = ProjValueMaturity2030_L;
            //------------
            
            //-- for 2035---
            ReinvestAmount2023to2035_H = ProjValueMaturity2023_H * (ReinvestRate2023/100.00) * (ReinvestRate2023to2035/100.00);
            ProjValueMaturity2035_H = [self PaidUpOptionTable_2035_High:PrevPaidUpOptionTable_2035_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_2035_High = ProjValueMaturity2035_H;
            
            ReinvestAmount2023to2035_M = ProjValueMaturity2023_M * (ReinvestRate2023/100.00) * (ReinvestRate2023to2035/100.00);
            ProjValueMaturity2035_M = [self PaidUpOptionTable_2035_Median:PrevPaidUpOptionTable_2035_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_2035_Median = ProjValueMaturity2035_M;
            
            ReinvestAmount2023to2035_L = ProjValueMaturity2023_L * (ReinvestRate2023/100.00) * (ReinvestRate2023to2035/100.00);
            ProjValueMaturity2035_L = [self PaidUpOptionTable_2035_Low:PrevPaidUpOptionTable_2035_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_2035_Low = ProjValueMaturity2035_L;
            //------------
            
            //-- for Secure Fund---
            ReinvestAmount2023toRet_H = ProjValueMaturity2023_H * (ReinvestRate2023/100.00) * (ReinvestRate2023toRet/100.00);
            ProjValueMaturityRet_H = [self PaidUpOptionTable_Ret_High:PrevPaidUpOptionTable_Ret_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_Ret_High = ProjValueMaturityRet_H;
            
            ReinvestAmount2023toRet_M = ProjValueMaturity2023_M * (ReinvestRate2023/100.00) * (ReinvestRate2023toRet/100.00);
            ProjValueMaturityRet_M = [self PaidUpOptionTable_Ret_Median:PrevPaidUpOptionTable_Ret_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_Ret_Median = ProjValueMaturityRet_M;
            
            ReinvestAmount2023toRet_L = ProjValueMaturity2023_L * (ReinvestRate2023/100.00) * (ReinvestRate2023toRet/100.00);
            ProjValueMaturityRet_L = [self PaidUpOptionTable_Ret_Low:PrevPaidUpOptionTable_Ret_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_Ret_Low = ProjValueMaturityRet_L;
            //------------
            
            //-- for Secure Fund--- Venture 1111//
            ReinvestAmount2023toVentureGrowth_H = ProjValueMaturity2023_H * (ReinvestRate2023/100.00) * (ReinvestRate2023toVentureGrowth/100.00);
            ProjValueMaturityVentureGrowth_H = [self PaidUpOptionTable_VentureGrowth_High:PrevPaidUpOptionTable_VentureGrowth_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureGrowth_High = ProjValueMaturityVentureGrowth_H;
            
            ReinvestAmount2023toVentureGrowth_M = ProjValueMaturity2023_M * (ReinvestRate2023/100.00) * (ReinvestRate2023toVentureGrowth/100.00);
            ProjValueMaturityVentureGrowth_M = [self PaidUpOptionTable_VentureGrowth_Median:PrevPaidUpOptionTable_VentureGrowth_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureGrowth_Median = ProjValueMaturityVentureGrowth_M;
            
            ReinvestAmount2023toVentureGrowth_L = ProjValueMaturity2023_L * (ReinvestRate2023/100.00) * (ReinvestRate2023toVentureGrowth/100.00);
            ProjValueMaturityVentureGrowth_L = [self PaidUpOptionTable_VentureGrowth_Low:PrevPaidUpOptionTable_VentureGrowth_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureGrowth_Low = ProjValueMaturityVentureGrowth_L;
            //------------
            
            //-- for Secure Fund--- Venture 2222//
            ReinvestAmount2023toVentureBlueChip_H = ProjValueMaturity2023_H * (ReinvestRate2023/100.00) * (ReinvestRate2023toVentureBlueChip/100.00);
            ProjValueMaturityVentureBlueChip_H = [self PaidUpOptionTable_VentureBlueChip_High:PrevPaidUpOptionTable_VentureBlueChip_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureBlueChip_High = ProjValueMaturityVentureBlueChip_H;
            
            ReinvestAmount2023toVentureBlueChip_M = ProjValueMaturity2023_M * (ReinvestRate2023/100.00) * (ReinvestRate2023toVentureBlueChip/100.00);
            ProjValueMaturityVentureBlueChip_M = [self PaidUpOptionTable_VentureBlueChip_Median:PrevPaidUpOptionTable_VentureBlueChip_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureBlueChip_Median = ProjValueMaturityVentureBlueChip_M;
            
            ReinvestAmount2023toVentureBlueChip_L = ProjValueMaturity2023_L * (ReinvestRate2023/100.00) * (ReinvestRate2023toVentureBlueChip/100.00);
            ProjValueMaturityVentureBlueChip_L = [self PaidUpOptionTable_VentureBlueChip_Low:PrevPaidUpOptionTable_VentureBlueChip_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureBlueChip_Low = ProjValueMaturityVentureBlueChip_L;
            //------------
            
            //-- for Secure Fund--- Venture 3333//
            ReinvestAmount2023toVentureDana_H = ProjValueMaturity2023_H * (ReinvestRate2023/100.00) * (ReinvestRate2023toVentureDana/100.00);
            ProjValueMaturityVentureDana_H = [self PaidUpOptionTable_VentureDana_High:PrevPaidUpOptionTable_VentureDana_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureDana_High = ProjValueMaturityVentureDana_H;
            
            ReinvestAmount2023toVentureDana_M = ProjValueMaturity2023_M * (ReinvestRate2023/100.00) * (ReinvestRate2023toVentureDana/100.00);
            ProjValueMaturityVentureDana_M = [self PaidUpOptionTable_VentureDana_Median:PrevPaidUpOptionTable_VentureDana_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureDana_Median = ProjValueMaturityVentureDana_M;
            
            ReinvestAmount2023toVentureDana_L = ProjValueMaturity2023_L * (ReinvestRate2023/100.00) * (ReinvestRate2023toVentureDana/100.00);
            ProjValueMaturityVentureDana_L = [self PaidUpOptionTable_VentureDana_Low:PrevPaidUpOptionTable_VentureDana_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureDana_Low = ProjValueMaturityVentureDana_L;
            //------------
            
            //-- for Secure Fund--- Venture 4444//
            ReinvestAmount2023toVentureManaged_H = ProjValueMaturity2023_H * (ReinvestRate2023/100.00) * (ReinvestRate2023toVentureManaged/100.00);
            ProjValueMaturityVentureManaged_H = [self PaidUpOptionTable_VentureManaged_High:PrevPaidUpOptionTable_VentureManaged_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureManaged_High = ProjValueMaturityVentureManaged_H;
            
            ReinvestAmount2023toVentureManaged_M = ProjValueMaturity2023_M * (ReinvestRate2023/100.00) * (ReinvestRate2023toVentureManaged/100.00);
            ProjValueMaturityVentureManaged_M = [self PaidUpOptionTable_VentureManaged_Median:PrevPaidUpOptionTable_VentureManaged_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureManaged_Median = ProjValueMaturityVentureManaged_M;
            
            ReinvestAmount2023toVentureManaged_L = ProjValueMaturity2023_L * (ReinvestRate2023/100.00) * (ReinvestRate2023toVentureManaged/100.00);
            ProjValueMaturityVentureManaged_L = [self PaidUpOptionTable_VentureManaged_Low:PrevPaidUpOptionTable_VentureManaged_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureManaged_Low = ProjValueMaturityVentureManaged_L;
            //------------
            
            //-- for Secure Fund--- Venture 5555//
            ReinvestAmount2023toVentureIncome_H = ProjValueMaturity2023_H * (ReinvestRate2023/100.00) * (ReinvestRate2023toVentureIncome/100.00);
            ProjValueMaturityVentureIncome_H = [self PaidUpOptionTable_VentureIncome_High:PrevPaidUpOptionTable_VentureIncome_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureIncome_High = ProjValueMaturityVentureIncome_H;
            
            ReinvestAmount2023toVentureIncome_M = ProjValueMaturity2023_M * (ReinvestRate2023/100.00) * (ReinvestRate2023toVentureIncome/100.00);
            ProjValueMaturityVentureIncome_M = [self PaidUpOptionTable_VentureIncome_Median:PrevPaidUpOptionTable_VentureIncome_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureIncome_Median = ProjValueMaturityVentureIncome_M;
            
            ReinvestAmount2023toVentureIncome_L = ProjValueMaturity2023_L * (ReinvestRate2023/100.00) * (ReinvestRate2023toVentureIncome/100.00);
            ProjValueMaturityVentureIncome_L = [self PaidUpOptionTable_VentureIncome_Low:PrevPaidUpOptionTable_VentureIncome_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureIncome_Low = ProjValueMaturityVentureIncome_L;
            //------------
            
            //-- for Secure Fund--- Venture 6666//
            ReinvestAmount2023toVenture6666_H = ProjValueMaturity2023_H * (ReinvestRate2023/100.00) * (ReinvestRate2023toVenture6666/100.00);
            ProjValueMaturityVenture6666_H = [self PaidUpOptionTable_Venture6666_High:PrevPaidUpOptionTable_Venture6666_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture6666_High = ProjValueMaturityVenture6666_H;
            
            ReinvestAmount2023toVenture6666_M = ProjValueMaturity2023_M * (ReinvestRate2023/100.00) * (ReinvestRate2023toVenture6666/100.00);
            ProjValueMaturityVenture6666_M = [self PaidUpOptionTable_Venture6666_Median:PrevPaidUpOptionTable_Venture6666_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture6666_Median = ProjValueMaturityVenture6666_M;
            
            ReinvestAmount2023toVenture6666_L = ProjValueMaturity2023_L * (ReinvestRate2023/100.00) * (ReinvestRate2023toVenture6666/100.00);
            ProjValueMaturityVenture6666_L = [self PaidUpOptionTable_Venture6666_Low:PrevPaidUpOptionTable_Venture6666_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture6666_Low = ProjValueMaturityVenture6666_L;
            //------------
            
            //-- for Secure Fund--- Venture 7777//
            ReinvestAmount2023toVenture7777_H = ProjValueMaturity2023_H * (ReinvestRate2023/100.00) * (ReinvestRate2023toVenture7777/100.00);
            ProjValueMaturityVenture7777_H = [self PaidUpOptionTable_Venture7777_High:PrevPaidUpOptionTable_Venture7777_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture7777_High = ProjValueMaturityVenture7777_H;
            
            ReinvestAmount2023toVenture7777_M = ProjValueMaturity2023_M * (ReinvestRate2023/100.00) * (ReinvestRate2023toVenture7777/100.00);
            ProjValueMaturityVenture7777_M = [self PaidUpOptionTable_Venture7777_Median:PrevPaidUpOptionTable_Venture7777_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture7777_Median = ProjValueMaturityVenture7777_M;
            
            ReinvestAmount2023toVenture7777_L = ProjValueMaturity2023_L * (ReinvestRate2023/100.00) * (ReinvestRate2023toVenture7777/100.00);
            ProjValueMaturityVenture7777_L = [self PaidUpOptionTable_Venture7777_Low:PrevPaidUpOptionTable_Venture7777_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture7777_Low = ProjValueMaturityVenture7777_L;
            //------------
            
            //-- for Secure Fund--- Venture 8888//
            ReinvestAmount2023toVenture8888_H = ProjValueMaturity2023_H * (ReinvestRate2023/100.00) * (ReinvestRate2023toVenture8888/100.00);
            ProjValueMaturityVenture8888_H = [self PaidUpOptionTable_Venture8888_High:PrevPaidUpOptionTable_Venture8888_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture8888_High = ProjValueMaturityVenture8888_H;
            
            ReinvestAmount2023toVenture8888_M = ProjValueMaturity2023_M * (ReinvestRate2023/100.00) * (ReinvestRate2023toVenture8888/100.00);
            ProjValueMaturityVenture8888_M = [self PaidUpOptionTable_Venture8888_Median:PrevPaidUpOptionTable_Venture8888_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture8888_Median = ProjValueMaturityVenture8888_M;
            
            ReinvestAmount2023toVenture8888_L = ProjValueMaturity2023_L * (ReinvestRate2023/100.00) * (ReinvestRate2023toVenture8888/100.00);
            ProjValueMaturityVenture8888_L = [self PaidUpOptionTable_Venture8888_Low:PrevPaidUpOptionTable_Venture8888_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture8888_Low = ProjValueMaturityVenture8888_L;
            //------------
            
            //-- for Secure Fund--- Venture 9999//
            ReinvestAmount2023toVenture9999_H = ProjValueMaturity2023_H * (ReinvestRate2023/100.00) * (ReinvestRate2023toVenture9999/100.00);
            ProjValueMaturityVenture9999_H = [self PaidUpOptionTable_Venture9999_High:PrevPaidUpOptionTable_Venture9999_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture9999_High = ProjValueMaturityVenture9999_H;
            
            ReinvestAmount2023toVenture9999_M = ProjValueMaturity2023_M * (ReinvestRate2023/100.00) * (ReinvestRate2023toVenture9999/100.00);
            ProjValueMaturityVenture9999_M = [self PaidUpOptionTable_Venture9999_Median:PrevPaidUpOptionTable_Venture9999_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture9999_Median = ProjValueMaturityVenture9999_M;
            
            ReinvestAmount2023toVenture9999_L = ProjValueMaturity2023_L * (ReinvestRate2023/100.00) * (ReinvestRate2023toVenture9999/100.00);
            ProjValueMaturityVenture9999_L = [self PaidUpOptionTable_Venture9999_Low:PrevPaidUpOptionTable_Venture9999_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture9999_Low = ProjValueMaturityVenture9999_L;
            //------------
            
            
            //-- for Dana Fund---
            ReinvestAmount2023toDana_H = ProjValueMaturity2023_H * (ReinvestRate2023/100.00) * (ReinvestRate2023toDana/100.00);
            ProjValueMaturityDana_H = [self PaidUpOptionTable_Dana_High:PrevPaidUpOptionTable_Dana_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_Dana_High = ProjValueMaturityDana_H;
            
            ReinvestAmount2023toDana_M = ProjValueMaturity2023_M * (ReinvestRate2023/100.00) * (ReinvestRate2023toDana/100.00);
            ProjValueMaturityDana_M = [self PaidUpOptionTable_Dana_Median:PrevPaidUpOptionTable_Dana_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_Dana_Median = ProjValueMaturityDana_M;
            
            ReinvestAmount2023toDana_L = ProjValueMaturity2023_L * (ReinvestRate2023/100.00) * (ReinvestRate2023toDana/100.00);
            ProjValueMaturityDana_L = [self PaidUpOptionTable_Dana_Low:PrevPaidUpOptionTable_Dana_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_Dana_Low = ProjValueMaturityDana_L;
            //------------
            
            //-- for Smart Fund---
            
            ProjValueMaturitySmart_H = [self PaidUpOptionTable_Smart_High:PrevPaidUpOptionTable_Smart_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_Smart_High = ProjValueMaturitySmart_H;
            
            ProjValueMaturitySmart_M = [self PaidUpOptionTable_Smart_Median :PrevPaidUpOptionTable_Smart_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_Smart_Median = ProjValueMaturitySmart_M;
            
            ProjValueMaturitySmart_L = [self PaidUpOptionTable_Smart_Low:PrevPaidUpOptionTable_Smart_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_Smart_Low = ProjValueMaturitySmart_L;
            //------------
            
            //-- for Venture Fund---
            
            ProjValueMaturityVenture_H = [self PaidUpOptionTable_Venture_High:PrevPaidUpOptionTable_Venture_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture_High = ProjValueMaturityVenture_H;
            
            ProjValueMaturityVenture_M = [self PaidUpOptionTable_Venture_Median:PrevPaidUpOptionTable_Venture_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture_Median = ProjValueMaturityVenture_M;
            
            ProjValueMaturityVenture_L = [self PaidUpOptionTable_Venture_Low:PrevPaidUpOptionTable_Venture_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture_Low = ProjValueMaturityVenture_L;
            //------------
            
            //-- for Cash Fund---
            ReinvestAmount2023toCash_H = ProjValueMaturity2023_H * (ReinvestRate2023/100.00) * (ReinvestRate2023toCash/100.00);
            ProjValueMaturityCash_H = [self PaidUpOptionTable_Cash_High:PrevPaidUpOptionTable_Cash_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_Cash_High = ProjValueMaturityCash_H;
            
            ReinvestAmount2023toCash_M = ProjValueMaturity2023_M * (ReinvestRate2023/100.00) * (ReinvestRate2023toCash/100.00);
            ProjValueMaturityCash_M = [self PaidUpOptionTable_Cash_Median:PrevPaidUpOptionTable_Cash_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_Cash_Median = ProjValueMaturityCash_M;
            
            ReinvestAmount2023toCash_L = ProjValueMaturity2023_L * (ReinvestRate2023/100.00) * (ReinvestRate2023toCash/100.00);
            ProjValueMaturityCash_L = [self PaidUpOptionTable_Cash_Low:PrevPaidUpOptionTable_Cash_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_Cash_Low = ProjValueMaturityCash_L;
            //------------
            
        }
        
        else if (polYear == FundTerm2025) {
            
            if (Fund2025PartialReinvest == 0) {
                ReinvestRate2025 = 100; //meaning 2025 is fully reinvest
            }
            else{
                ReinvestRate2025 = 100 - Fund2025PartialReinvest;
            }
            
            if (Fund2025PartialReinvest != 100) { //meaning 2025 is not withdraw
                ReinvestRate2025to2028 = Fund2025ReinvestTo2028Fac;
                ReinvestRate2025to2030 = Fund2025ReinvestTo2030Fac;
                ReinvestRate2025to2035 = Fund2025ReinvestTo2035Fac;
                ReinvestRate2025toCash = Fund2025ReinvestToCashFac;
                ReinvestRate2025toDana = Fund2025ReinvestToDanaFac;
                ReinvestRate2025toRet = Fund2025ReinvestToRetFac;
                ReinvestRate2025toVentureGrowth = Fund2025ReinvestToVentureGrowthFac;//
                ReinvestRate2025toVentureBlueChip = Fund2025ReinvestToVentureBlueChipFac;//
                ReinvestRate2025toVentureDana = Fund2025ReinvestToVentureDanaFac;//
                ReinvestRate2025toVentureManaged = Fund2025ReinvestToVentureManagedFac;//
                ReinvestRate2025toVentureIncome = Fund2025ReinvestToVentureIncomeFac;//
                ReinvestRate2025toVenture6666 = Fund2025ReinvestToVenture6666Fac;//
                ReinvestRate2025toVenture7777 = Fund2025ReinvestToVenture7777Fac;//
                ReinvestRate2025toVenture8888 = Fund2025ReinvestToVenture8888Fac;//
                ReinvestRate2025toVenture9999 = Fund2025ReinvestToVenture9999Fac;//
                ReinvestRate2025toSmart = Fund2025ReinvestToSmartFac;
                ReinvestRate2025toVenture = Fund2025ReinvestToVentureFac;
            }
            else{
                ReinvestRate2025to2028 = 0.00;
                ReinvestRate2025to2030 = 0.00;
                ReinvestRate2025to2035 = 0.00;
                ReinvestRate2025toCash = 0.00;
                ReinvestRate2025toDana = 0.00;
                ReinvestRate2025toRet = 0.00;
                ReinvestRate2025toVentureGrowth = 0.00;//
                ReinvestRate2025toVentureBlueChip = 0.00;//
                ReinvestRate2025toVentureDana = 0.00;//
                ReinvestRate2025toVentureManaged = 0.00;//
                ReinvestRate2025toVentureIncome = 0.00;//
                ReinvestRate2025toVenture6666 = 0.00;//
                ReinvestRate2025toVenture7777 = 0.00;//
                ReinvestRate2025toVenture8888 = 0.00;//
                ReinvestRate2025toVenture9999 = 0.00;//
                ReinvestRate2025toSmart = 0.00;
                ReinvestRate2025toVenture = 0.00;
            }
            
            //---- for 2025
            ProjValueMaturity2025_H = [self PaidUpOptionTable_2025_H_Balance:PrevPaidUpOptionTable_2025_High andPolicyYear:polYear];
            ProjWithdraw2025_H = ProjValueMaturity2025_H * ((100 - ReinvestRate2025)/100.00);
            ProjReinvest2025_H = ProjValueMaturity2025_H - ProjWithdraw2025_H;
            
            ProjValueMaturity2025_M = [self PaidUpOptionTable_2025_M_Balance:PrevPaidUpOptionTable_2025_Median andPolicyYear:polYear];
            ProjWithdraw2025_M = ProjValueMaturity2025_M * ((100 - ReinvestRate2025)/100.00);
            ProjReinvest2025_M = ProjValueMaturity2025_M - ProjWithdraw2025_M;
            
            ProjValueMaturity2025_L = [self PaidUpOptionTable_2025_L_Balance:PrevPaidUpOptionTable_2025_Low andPolicyYear:polYear];
            ProjWithdraw2025_L = ProjValueMaturity2025_L * ((100 - ReinvestRate2025)/100.00);
            ProjReinvest2025_L = ProjValueMaturity2025_L - ProjWithdraw2025_L;
            //-------
            
            // ---- for 2028
            ReinvestAmount2025to2028_H = ProjValueMaturity2025_H * (ReinvestRate2025/100.00) * (ReinvestRate2025to2028/100.00);
            ProjValueMaturity2028_H = [self PaidUpOptionTable_2028_High:PrevPaidUpOptionTable_2028_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_2028_High = ProjValueMaturity2028_H;
            
            ReinvestAmount2025to2028_M = ProjValueMaturity2025_M * (ReinvestRate2025/100.00) * (ReinvestRate2025to2028/100.00);
            ProjValueMaturity2028_M = [self PaidUpOptionTable_2028_Median:PrevPaidUpOptionTable_2028_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_2028_Median = ProjValueMaturity2028_M;
            
            ReinvestAmount2025to2028_L = ProjValueMaturity2025_L * (ReinvestRate2025/100.00) * (ReinvestRate2025to2028/100.00);
            ProjValueMaturity2028_L = [self PaidUpOptionTable_2028_Low:PrevPaidUpOptionTable_2028_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_2028_Low = ProjValueMaturity2028_L;
            // -----
            
            // ---- for 2030
            ReinvestAmount2025to2030_H = ProjValueMaturity2025_H * (ReinvestRate2025/100.00) * (ReinvestRate2025to2030/100.00);
            ProjValueMaturity2030_H = [self PaidUpOptionTable_2030_High:PrevPaidUpOptionTable_2030_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_2030_High = ProjValueMaturity2030_H;
            
            ReinvestAmount2025to2030_M = ProjValueMaturity2025_M * (ReinvestRate2025/100.00) * (ReinvestRate2025to2030/100.00);
            ProjValueMaturity2030_M = [self PaidUpOptionTable_2030_Median:PrevPaidUpOptionTable_2030_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_2030_Median = ProjValueMaturity2030_M;
            
            ReinvestAmount2025to2030_L = ProjValueMaturity2025_L * (ReinvestRate2025/100.00) * (ReinvestRate2025to2030/100.00);
            ProjValueMaturity2030_L = [self PaidUpOptionTable_2030_Low:PrevPaidUpOptionTable_2030_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_2030_Low = ProjValueMaturity2030_L;
            // -----
            
            // ---- for 2035
            ReinvestAmount2025to2035_H = ProjValueMaturity2025_H * (ReinvestRate2025/100.00) * (ReinvestRate2025to2035/100.00);
            ProjValueMaturity2035_H = [self PaidUpOptionTable_2035_High:PrevPaidUpOptionTable_2035_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_2035_High = ProjValueMaturity2035_H;
            
            ReinvestAmount2025to2035_M = ProjValueMaturity2025_M * (ReinvestRate2025/100.00) * (ReinvestRate2025to2035/100.00);
            ProjValueMaturity2035_M = [self PaidUpOptionTable_2035_Median:PrevPaidUpOptionTable_2035_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_2035_Median = ProjValueMaturity2035_M;
            
            ReinvestAmount2025to2035_L = ProjValueMaturity2025_L * (ReinvestRate2025/100.00) * (ReinvestRate2025to2035/100.00);
            ProjValueMaturity2035_L = [self PaidUpOptionTable_2035_Low:PrevPaidUpOptionTable_2035_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_2035_Low = ProjValueMaturity2035_L;
            // -----
            
            //-- for Secure Fund---
            ReinvestAmount2025toRet_H = ProjValueMaturity2025_H * (ReinvestRate2025/100.00) * (ReinvestRate2025toRet/100.00);
            ProjValueMaturityRet_H = [self PaidUpOptionTable_Ret_High:PrevPaidUpOptionTable_Ret_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_Ret_High = ProjValueMaturityRet_H;
            
            ReinvestAmount2025toRet_M = ProjValueMaturity2025_M * (ReinvestRate2025/100.00) * (ReinvestRate2025toRet/100.00);
            ProjValueMaturityRet_M = [self PaidUpOptionTable_Ret_Median:PrevPaidUpOptionTable_Ret_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_Ret_Median = ProjValueMaturityRet_M;
            
            ReinvestAmount2025toRet_L = ProjValueMaturity2025_L * (ReinvestRate2025/100.00) * (ReinvestRate2025toRet/100.00);
            ProjValueMaturityRet_L = [self PaidUpOptionTable_Ret_Low:PrevPaidUpOptionTable_Ret_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_Ret_Low = ProjValueMaturityRet_L;
            //------------
            
            //-- for Secure Fund---Venture 1111//
            ReinvestAmount2025toVentureGrowth_H = ProjValueMaturity2025_H * (ReinvestRate2025/100.00) * (ReinvestRate2025toVentureGrowth/100.00);
            ProjValueMaturityVentureGrowth_H = [self PaidUpOptionTable_VentureGrowth_High:PrevPaidUpOptionTable_VentureGrowth_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureGrowth_High = ProjValueMaturityVentureGrowth_H;
            
            ReinvestAmount2025toVentureGrowth_M = ProjValueMaturity2025_M * (ReinvestRate2025/100.00) * (ReinvestRate2025toVentureGrowth/100.00);
            ProjValueMaturityVentureGrowth_M = [self PaidUpOptionTable_VentureGrowth_Median:PrevPaidUpOptionTable_VentureGrowth_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureGrowth_Median = ProjValueMaturityVentureGrowth_M;
            
            ReinvestAmount2025toVentureGrowth_L = ProjValueMaturity2025_L * (ReinvestRate2025/100.00) * (ReinvestRate2025toVentureGrowth/100.00);
            ProjValueMaturityVentureGrowth_L = [self PaidUpOptionTable_VentureGrowth_Low:PrevPaidUpOptionTable_VentureGrowth_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureGrowth_Low = ProjValueMaturityVentureGrowth_L;
            //------------
            
            //-- for Secure Fund---Venture 2222//
            ReinvestAmount2025toVentureBlueChip_H = ProjValueMaturity2025_H * (ReinvestRate2025/100.00) * (ReinvestRate2025toVentureBlueChip/100.00);
            ProjValueMaturityVentureBlueChip_H = [self PaidUpOptionTable_VentureBlueChip_High:PrevPaidUpOptionTable_VentureBlueChip_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureBlueChip_High = ProjValueMaturityVentureBlueChip_H;
            
            ReinvestAmount2025toVentureBlueChip_M = ProjValueMaturity2025_M * (ReinvestRate2025/100.00) * (ReinvestRate2025toVentureBlueChip/100.00);
            ProjValueMaturityVentureBlueChip_M = [self PaidUpOptionTable_VentureBlueChip_Median:PrevPaidUpOptionTable_VentureBlueChip_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureBlueChip_Median = ProjValueMaturityVentureBlueChip_M;
            
            ReinvestAmount2025toVentureBlueChip_L = ProjValueMaturity2025_L * (ReinvestRate2025/100.00) * (ReinvestRate2025toVentureBlueChip/100.00);
            ProjValueMaturityVentureBlueChip_L = [self PaidUpOptionTable_VentureBlueChip_Low:PrevPaidUpOptionTable_VentureBlueChip_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureBlueChip_Low = ProjValueMaturityVentureBlueChip_L;
            //------------
            
            //-- for Secure Fund---Venture 3333//
            ReinvestAmount2025toVentureDana_H = ProjValueMaturity2025_H * (ReinvestRate2025/100.00) * (ReinvestRate2025toVentureDana/100.00);
            ProjValueMaturityVentureDana_H = [self PaidUpOptionTable_VentureDana_High:PrevPaidUpOptionTable_VentureDana_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureDana_High = ProjValueMaturityVentureDana_H;
            
            ReinvestAmount2025toVentureDana_M = ProjValueMaturity2025_M * (ReinvestRate2025/100.00) * (ReinvestRate2025toVentureDana/100.00);
            ProjValueMaturityVentureDana_M = [self PaidUpOptionTable_VentureDana_Median:PrevPaidUpOptionTable_VentureDana_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureDana_Median = ProjValueMaturityVentureDana_M;
            
            ReinvestAmount2025toVentureDana_L = ProjValueMaturity2025_L * (ReinvestRate2025/100.00) * (ReinvestRate2025toVentureDana/100.00);
            ProjValueMaturityVentureDana_L = [self PaidUpOptionTable_VentureDana_Low:PrevPaidUpOptionTable_VentureDana_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureDana_Low = ProjValueMaturityVentureDana_L;
            //------------
            
            //-- for Secure Fund---Venture 4444//
            ReinvestAmount2025toVentureManaged_H = ProjValueMaturity2025_H * (ReinvestRate2025/100.00) * (ReinvestRate2025toVentureManaged/100.00);
            ProjValueMaturityVentureManaged_H = [self PaidUpOptionTable_VentureManaged_High:PrevPaidUpOptionTable_VentureManaged_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureManaged_High = ProjValueMaturityVentureManaged_H;
            
            ReinvestAmount2025toVentureManaged_M = ProjValueMaturity2025_M * (ReinvestRate2025/100.00) * (ReinvestRate2025toVentureManaged/100.00);
            ProjValueMaturityVentureManaged_M = [self PaidUpOptionTable_VentureManaged_Median:PrevPaidUpOptionTable_VentureManaged_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureManaged_Median = ProjValueMaturityVentureManaged_M;
            
            ReinvestAmount2025toVentureManaged_L = ProjValueMaturity2025_L * (ReinvestRate2025/100.00) * (ReinvestRate2025toVentureManaged/100.00);
            ProjValueMaturityVentureManaged_L = [self PaidUpOptionTable_VentureManaged_Low:PrevPaidUpOptionTable_VentureManaged_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureManaged_Low = ProjValueMaturityVentureManaged_L;
            //------------
            
            //-- for Secure Fund---Venture 5555//
            ReinvestAmount2025toVentureIncome_H = ProjValueMaturity2025_H * (ReinvestRate2025/100.00) * (ReinvestRate2025toVentureIncome/100.00);
            ProjValueMaturityVentureIncome_H = [self PaidUpOptionTable_VentureIncome_High:PrevPaidUpOptionTable_VentureIncome_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureIncome_High = ProjValueMaturityVentureIncome_H;
            
            ReinvestAmount2025toVentureIncome_M = ProjValueMaturity2025_M * (ReinvestRate2025/100.00) * (ReinvestRate2025toVentureIncome/100.00);
            ProjValueMaturityVentureIncome_M = [self PaidUpOptionTable_VentureIncome_Median:PrevPaidUpOptionTable_VentureIncome_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureIncome_Median = ProjValueMaturityVentureIncome_M;
            
            ReinvestAmount2025toVentureIncome_L = ProjValueMaturity2025_L * (ReinvestRate2025/100.00) * (ReinvestRate2025toVentureIncome/100.00);
            ProjValueMaturityVentureIncome_L = [self PaidUpOptionTable_VentureIncome_Low:PrevPaidUpOptionTable_VentureIncome_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureIncome_Low = ProjValueMaturityVentureIncome_L;
            //------------
            
            //-- for Secure Fund---Venture 6666//
            ReinvestAmount2025toVenture6666_H = ProjValueMaturity2025_H * (ReinvestRate2025/100.00) * (ReinvestRate2025toVenture6666/100.00);
            ProjValueMaturityVenture6666_H = [self PaidUpOptionTable_Venture6666_High:PrevPaidUpOptionTable_Venture6666_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture6666_High = ProjValueMaturityVenture6666_H;
            
            ReinvestAmount2025toVenture6666_M = ProjValueMaturity2025_M * (ReinvestRate2025/100.00) * (ReinvestRate2025toVenture6666/100.00);
            ProjValueMaturityVenture6666_M = [self PaidUpOptionTable_Venture6666_Median:PrevPaidUpOptionTable_Venture6666_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture6666_Median = ProjValueMaturityVenture6666_M;
            
            ReinvestAmount2025toVenture6666_L = ProjValueMaturity2025_L * (ReinvestRate2025/100.00) * (ReinvestRate2025toVenture6666/100.00);
            ProjValueMaturityVenture6666_L = [self PaidUpOptionTable_Venture6666_Low:PrevPaidUpOptionTable_Venture6666_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture6666_Low = ProjValueMaturityVenture6666_L;
            //------------
            
            //-- for Secure Fund---Venture 7777//
            ReinvestAmount2025toVenture7777_H = ProjValueMaturity2025_H * (ReinvestRate2025/100.00) * (ReinvestRate2025toVenture7777/100.00);
            ProjValueMaturityVenture7777_H = [self PaidUpOptionTable_Venture7777_High:PrevPaidUpOptionTable_Venture7777_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture7777_High = ProjValueMaturityVenture7777_H;
            
            ReinvestAmount2025toVenture7777_M = ProjValueMaturity2025_M * (ReinvestRate2025/100.00) * (ReinvestRate2025toVenture7777/100.00);
            ProjValueMaturityVenture7777_M = [self PaidUpOptionTable_Venture7777_Median:PrevPaidUpOptionTable_Venture7777_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture7777_Median = ProjValueMaturityVenture7777_M;
            
            ReinvestAmount2025toVenture7777_L = ProjValueMaturity2025_L * (ReinvestRate2025/100.00) * (ReinvestRate2025toVenture7777/100.00);
            ProjValueMaturityVenture7777_L = [self PaidUpOptionTable_Venture7777_Low:PrevPaidUpOptionTable_Venture7777_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture7777_Low = ProjValueMaturityVenture7777_L;
            //------------
            
            //-- for Secure Fund---Venture 8888//
            ReinvestAmount2025toVenture8888_H = ProjValueMaturity2025_H * (ReinvestRate2025/100.00) * (ReinvestRate2025toVenture8888/100.00);
            ProjValueMaturityVenture8888_H = [self PaidUpOptionTable_Venture8888_High:PrevPaidUpOptionTable_Venture8888_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture8888_High = ProjValueMaturityVenture8888_H;
            
            ReinvestAmount2025toVenture8888_M = ProjValueMaturity2025_M * (ReinvestRate2025/100.00) * (ReinvestRate2025toVenture8888/100.00);
            ProjValueMaturityVenture8888_M = [self PaidUpOptionTable_Venture8888_Median:PrevPaidUpOptionTable_Venture8888_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture8888_Median = ProjValueMaturityVenture8888_M;
            
            ReinvestAmount2025toVenture8888_L = ProjValueMaturity2025_L * (ReinvestRate2025/100.00) * (ReinvestRate2025toVenture8888/100.00);
            ProjValueMaturityVenture8888_L = [self PaidUpOptionTable_Venture8888_Low:PrevPaidUpOptionTable_Venture8888_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture8888_Low = ProjValueMaturityVenture8888_L;
            //------------
            
            //-- for Secure Fund---Venture 9999//
            ReinvestAmount2025toVenture9999_H = ProjValueMaturity2025_H * (ReinvestRate2025/100.00) * (ReinvestRate2025toVenture9999/100.00);
            ProjValueMaturityVenture9999_H = [self PaidUpOptionTable_Venture9999_High:PrevPaidUpOptionTable_Venture9999_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture9999_High = ProjValueMaturityVenture9999_H;
            
            ReinvestAmount2025toVenture9999_M = ProjValueMaturity2025_M * (ReinvestRate2025/100.00) * (ReinvestRate2025toVenture9999/100.00);
            ProjValueMaturityVenture9999_M = [self PaidUpOptionTable_Venture9999_Median:PrevPaidUpOptionTable_Venture9999_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture9999_Median = ProjValueMaturityVenture9999_M;
            
            ReinvestAmount2025toVenture9999_L = ProjValueMaturity2025_L * (ReinvestRate2025/100.00) * (ReinvestRate2025toVenture9999/100.00);
            ProjValueMaturityVenture9999_L = [self PaidUpOptionTable_Venture9999_Low:PrevPaidUpOptionTable_Venture9999_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture9999_Low = ProjValueMaturityVenture9999_L;
            //------------
            
            //-- for Dana Fund---
            ReinvestAmount2025toDana_H = ProjValueMaturity2025_H * (ReinvestRate2025/100.00) * (ReinvestRate2025toDana/100.00);
            ProjValueMaturityDana_H = [self PaidUpOptionTable_Dana_High:PrevPaidUpOptionTable_Dana_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_Dana_High = ProjValueMaturityDana_H;
            
            ReinvestAmount2025toDana_M = ProjValueMaturity2025_M * (ReinvestRate2025/100.00) * (ReinvestRate2025toDana/100.00);
            ProjValueMaturityDana_M = [self PaidUpOptionTable_Dana_Median:PrevPaidUpOptionTable_Dana_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_Dana_Median = ProjValueMaturityDana_M;
            
            ReinvestAmount2025toDana_L = ProjValueMaturity2025_L * (ReinvestRate2025/100.00) * (ReinvestRate2025toDana/100.00);
            ProjValueMaturityDana_L = [self PaidUpOptionTable_Dana_Low:PrevPaidUpOptionTable_Dana_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_Dana_Low = ProjValueMaturityDana_L;
            //------------
            
            //-- for Smart Fund---
            ReinvestAmount2025toSmart_H = ProjValueMaturity2025_H * (ReinvestRate2025/100.00) * (ReinvestRate2025toSmart/100.00);
            ProjValueMaturitySmart_H = [self PaidUpOptionTable_Smart_High:PrevPaidUpOptionTable_Smart_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_Smart_High = ProjValueMaturitySmart_H;
            
            ReinvestAmount2025toSmart_M = ProjValueMaturity2025_M * (ReinvestRate2025/100.00) * (ReinvestRate2025toSmart/100.00);
            ProjValueMaturitySmart_M = [self PaidUpOptionTable_Smart_Median:PrevPaidUpOptionTable_Smart_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_Smart_Median = ProjValueMaturitySmart_M;
            
            ReinvestAmount2025toSmart_L = ProjValueMaturity2025_L * (ReinvestRate2025/100.00) * (ReinvestRate2025toSmart/100.00);
            ProjValueMaturitySmart_L = [self PaidUpOptionTable_Smart_Low:PrevPaidUpOptionTable_Smart_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_Smart_Low = ProjValueMaturitySmart_L;
            //------------
            
            //-- for Venture Fund---
            ReinvestAmount2025toVenture_H = ProjValueMaturity2025_H * (ReinvestRate2025/100.00) * (ReinvestRate2025toVenture/100.00);
            ProjValueMaturityVenture_H = [self PaidUpOptionTable_Venture_High:PrevPaidUpOptionTable_Venture_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture_High = ProjValueMaturityVenture_H;
            
            ReinvestAmount2025toVenture_M = ProjValueMaturity2025_M * (ReinvestRate2025/100.00) * (ReinvestRate2025toVenture/100.00);
            ProjValueMaturityVenture_M = [self PaidUpOptionTable_Venture_Median:PrevPaidUpOptionTable_Venture_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture_Median = ProjValueMaturityVenture_M;
            
            ReinvestAmount2025toVenture_L = ProjValueMaturity2025_L * (ReinvestRate2025/100.00) * (ReinvestRate2025toVenture/100.00);
            ProjValueMaturityVenture_L = [self PaidUpOptionTable_Venture_Low:PrevPaidUpOptionTable_Venture_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture_Low = ProjValueMaturityVenture_L;
            //------------
            
            //-- for Cash Fund---
            ReinvestAmount2025toCash_H = ProjValueMaturity2025_H * (ReinvestRate2025/100.00) * (ReinvestRate2025toCash/100.00);
            ProjValueMaturityCash_H = [self PaidUpOptionTable_Cash_High:PrevPaidUpOptionTable_Cash_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_Cash_High = ProjValueMaturityCash_H;
            
            ReinvestAmount2025toCash_M = ProjValueMaturity2025_M * (ReinvestRate2025/100.00) * (ReinvestRate2025toCash/100.00);
            ProjValueMaturityCash_M = [self PaidUpOptionTable_Cash_Median:PrevPaidUpOptionTable_Cash_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_Cash_Median = ProjValueMaturityCash_M;
            
            ReinvestAmount2025toCash_L = ProjValueMaturity2025_L * (ReinvestRate2025/100.00) * (ReinvestRate2025toCash/100.00);
            ProjValueMaturityCash_L = [self PaidUpOptionTable_Cash_Low:PrevPaidUpOptionTable_Cash_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_Cash_Low = ProjValueMaturityCash_L;
            //------------
            
        }
        else if (polYear == FundTerm2028) {
            
            if (Fund2028PartialReinvest == 0) {
                ReinvestRate2028 = 100; //meaning 2028 is fully reinvest
            }
            else{
                ReinvestRate2028 = 100 - Fund2028PartialReinvest;
            }
            
            if (Fund2028PartialReinvest != 100) { //meaning 2028 is not withdraw
                ReinvestRate2028to2030 = Fund2028ReinvestTo2030Fac;
                ReinvestRate2028to2035 = Fund2028ReinvestTo2035Fac;
                ReinvestRate2028toCash = Fund2028ReinvestToCashFac;
                ReinvestRate2028toDana = Fund2028ReinvestToDanaFac;
                ReinvestRate2028toRet = Fund2028ReinvestToRetFac;
                ReinvestRate2028toVentureGrowth = Fund2028ReinvestToVentureGrowthFac;//
                ReinvestRate2028toVentureBlueChip = Fund2028ReinvestToVentureBlueChipFac;//
                ReinvestRate2028toVentureDana = Fund2028ReinvestToVentureDanaFac;//
                ReinvestRate2028toVentureManaged = Fund2028ReinvestToVentureManagedFac;//
                ReinvestRate2028toVentureIncome = Fund2028ReinvestToVentureIncomeFac;//
                ReinvestRate2028toVenture6666 = Fund2028ReinvestToVenture6666Fac;//
                ReinvestRate2028toVenture7777 = Fund2028ReinvestToVenture7777Fac;//
                ReinvestRate2028toVenture8888 = Fund2028ReinvestToVenture8888Fac;//
                ReinvestRate2028toVenture9999 = Fund2028ReinvestToVenture9999Fac;//
                ReinvestRate2028toSmart = Fund2028ReinvestToSmartFac;
                ReinvestRate2028toVenture = Fund2028ReinvestToVentureFac;
            }
            else{
                ReinvestRate2028to2030 = 0.00;
                ReinvestRate2028to2035 = 0.00;
                ReinvestRate2028toCash = 0.00;
                ReinvestRate2028toDana = 0.00;
                ReinvestRate2028toRet = 0.00;
                ReinvestRate2028toVentureGrowth = 0.00;//
                ReinvestRate2028toVentureBlueChip = 0.00;//
                ReinvestRate2028toVentureDana = 0.00;//
                ReinvestRate2028toVentureManaged = 0.00;//
                ReinvestRate2028toVentureIncome = 0.00;//
                ReinvestRate2028toVenture6666 = 0.00;//
                ReinvestRate2028toVenture7777 = 0.00;//
                ReinvestRate2028toVenture8888 = 0.00;//
                ReinvestRate2028toVenture9999 = 0.00;//
                ReinvestRate2028toSmart = 0.00;
                ReinvestRate2028toVenture = 0.00;
            }
            
            //---- for 2028
            ProjValueMaturity2028_H = [self PaidUpOptionTable_2028_H_Balance:PrevPaidUpOptionTable_2028_High andPolicyYear:polYear];
            ProjWithdraw2028_H = ProjValueMaturity2028_H * ((100 - ReinvestRate2028)/100.00);
            ProjReinvest2028_H = ProjValueMaturity2028_H - ProjWithdraw2028_H;
            
            ProjValueMaturity2028_M = [self PaidUpOptionTable_2028_M_Balance:PrevPaidUpOptionTable_2028_Median andPolicyYear:polYear];
            ProjWithdraw2028_M = ProjValueMaturity2028_M * ((100 - ReinvestRate2028)/100.00);
            ProjReinvest2028_M = ProjValueMaturity2028_M - ProjWithdraw2028_M;
            
            ProjValueMaturity2028_L = [self PaidUpOptionTable_2028_L_Balance:PrevPaidUpOptionTable_2028_Low andPolicyYear:polYear];
            ProjWithdraw2028_L = ProjValueMaturity2028_L * ((100 - ReinvestRate2028)/100.00);
            ProjReinvest2028_L = ProjValueMaturity2028_L - ProjWithdraw2028_L;
            //-------
            
            // ---- for 2030
            ReinvestAmount2028to2030_H = ProjValueMaturity2028_H * (ReinvestRate2028/100.00) * (ReinvestRate2028to2030/100.00);
            ProjValueMaturity2030_H = [self PaidUpOptionTable_2030_High:PrevPaidUpOptionTable_2030_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_2030_High = ProjValueMaturity2030_H;
            
            ReinvestAmount2028to2030_M = ProjValueMaturity2028_M * (ReinvestRate2028/100.00) * (ReinvestRate2028to2030/100.00);
            ProjValueMaturity2030_M = [self PaidUpOptionTable_2030_Median:PrevPaidUpOptionTable_2030_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_2030_Median = ProjValueMaturity2030_M;
            
            ReinvestAmount2028to2030_L = ProjValueMaturity2028_L * (ReinvestRate2028/100.00) * (ReinvestRate2028to2030/100.00);
            ProjValueMaturity2030_L = [self PaidUpOptionTable_2030_Low:PrevPaidUpOptionTable_2030_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_2030_Low = ProjValueMaturity2030_L;
            // -----
            
            // ---- for 2035
            ReinvestAmount2028to2035_H = ProjValueMaturity2028_H * (ReinvestRate2028/100.00) * (ReinvestRate2028to2035/100.00);
            ProjValueMaturity2035_H = [self PaidUpOptionTable_2035_High:PrevPaidUpOptionTable_2035_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_2035_High = ProjValueMaturity2035_H;
            
            ReinvestAmount2028to2035_M = ProjValueMaturity2028_M * (ReinvestRate2028/100.00) * (ReinvestRate2028to2035/100.00);
            ProjValueMaturity2035_M = [self PaidUpOptionTable_2035_Median:PrevPaidUpOptionTable_2035_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_2035_Median = ProjValueMaturity2035_M;
            
            ReinvestAmount2028to2035_L = ProjValueMaturity2028_L * (ReinvestRate2028/100.00) * (ReinvestRate2028to2035/100.00);
            ProjValueMaturity2035_L = [self PaidUpOptionTable_2035_Low:PrevPaidUpOptionTable_2035_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_2035_Low = ProjValueMaturity2035_L;
            // -----
            
            //-- for Secure Fund---
            ReinvestAmount2028toRet_H = ProjValueMaturity2028_H * (ReinvestRate2028/100.00) * (ReinvestRate2028toRet/100.00);
            ProjValueMaturityRet_H = [self PaidUpOptionTable_Ret_High:PrevPaidUpOptionTable_Ret_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_Ret_High = ProjValueMaturityRet_H;
            
            ReinvestAmount2028toRet_M = ProjValueMaturity2028_M * (ReinvestRate2028/100.00) * (ReinvestRate2028toRet/100.00);
            ProjValueMaturityRet_M = [self PaidUpOptionTable_Ret_Median:PrevPaidUpOptionTable_Ret_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_Ret_Median = ProjValueMaturityRet_M;
            
            ReinvestAmount2028toRet_L = ProjValueMaturity2028_L * (ReinvestRate2028/100.00) * (ReinvestRate2028toRet/100.00);
            ProjValueMaturityRet_L = [self PaidUpOptionTable_Ret_Low:PrevPaidUpOptionTable_Ret_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_Ret_Low = ProjValueMaturityRet_L;
            //------------
            
            //-- for Secure Fund--- Venture 1111//
            ReinvestAmount2028toVentureGrowth_H = ProjValueMaturity2028_H * (ReinvestRate2028/100.00) * (ReinvestRate2028toVentureGrowth/100.00);
            ProjValueMaturityVentureGrowth_H = [self PaidUpOptionTable_VentureGrowth_High:PrevPaidUpOptionTable_VentureGrowth_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureGrowth_High = ProjValueMaturityVentureGrowth_H;
            
            ReinvestAmount2028toVentureGrowth_M = ProjValueMaturity2028_M * (ReinvestRate2028/100.00) * (ReinvestRate2028toVentureGrowth/100.00);
            ProjValueMaturityVentureGrowth_M = [self PaidUpOptionTable_VentureGrowth_Median:PrevPaidUpOptionTable_VentureGrowth_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureGrowth_Median = ProjValueMaturityVentureGrowth_M;
            
            ReinvestAmount2028toVentureGrowth_L = ProjValueMaturity2028_L * (ReinvestRate2028/100.00) * (ReinvestRate2028toVentureGrowth/100.00);
            ProjValueMaturityVentureGrowth_L = [self PaidUpOptionTable_VentureGrowth_Low:PrevPaidUpOptionTable_VentureGrowth_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureGrowth_Low = ProjValueMaturityVentureGrowth_L;
            //------------
            
            //-- for Secure Fund--- Venture 2222//
            ReinvestAmount2028toVentureBlueChip_H = ProjValueMaturity2028_H * (ReinvestRate2028/100.00) * (ReinvestRate2028toVentureBlueChip/100.00);
            ProjValueMaturityVentureBlueChip_H = [self PaidUpOptionTable_VentureBlueChip_High:PrevPaidUpOptionTable_VentureBlueChip_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureBlueChip_High = ProjValueMaturityVentureBlueChip_H;
            
            ReinvestAmount2028toVentureBlueChip_M = ProjValueMaturity2028_M * (ReinvestRate2028/100.00) * (ReinvestRate2028toVentureBlueChip/100.00);
            ProjValueMaturityVentureBlueChip_M = [self PaidUpOptionTable_VentureBlueChip_Median:PrevPaidUpOptionTable_VentureBlueChip_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureBlueChip_Median = ProjValueMaturityVentureBlueChip_M;
            
            ReinvestAmount2028toVentureBlueChip_L = ProjValueMaturity2028_L * (ReinvestRate2028/100.00) * (ReinvestRate2028toVentureBlueChip/100.00);
            ProjValueMaturityVentureBlueChip_L = [self PaidUpOptionTable_VentureBlueChip_Low:PrevPaidUpOptionTable_VentureBlueChip_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureBlueChip_Low = ProjValueMaturityVentureBlueChip_L;
            //------------
            
            //-- for Secure Fund--- Venture 3333//
            ReinvestAmount2028toVentureDana_H = ProjValueMaturity2028_H * (ReinvestRate2028/100.00) * (ReinvestRate2028toVentureDana/100.00);
            ProjValueMaturityVentureDana_H = [self PaidUpOptionTable_VentureDana_High:PrevPaidUpOptionTable_VentureDana_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureDana_High = ProjValueMaturityVentureDana_H;
            
            ReinvestAmount2028toVentureDana_M = ProjValueMaturity2028_M * (ReinvestRate2028/100.00) * (ReinvestRate2028toVentureDana/100.00);
            ProjValueMaturityVentureDana_M = [self PaidUpOptionTable_VentureDana_Median:PrevPaidUpOptionTable_VentureDana_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureDana_Median = ProjValueMaturityVentureDana_M;
            
            ReinvestAmount2028toVentureDana_L = ProjValueMaturity2028_L * (ReinvestRate2028/100.00) * (ReinvestRate2028toVentureDana/100.00);
            ProjValueMaturityVentureDana_L = [self PaidUpOptionTable_VentureDana_Low:PrevPaidUpOptionTable_VentureDana_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureDana_Low = ProjValueMaturityVentureDana_L;
            //------------
            
            //-- for Secure Fund--- Venture 4444//
            ReinvestAmount2028toVentureManaged_H = ProjValueMaturity2028_H * (ReinvestRate2028/100.00) * (ReinvestRate2028toVentureManaged/100.00);
            ProjValueMaturityVentureManaged_H = [self PaidUpOptionTable_VentureManaged_High:PrevPaidUpOptionTable_VentureManaged_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureManaged_High = ProjValueMaturityVentureManaged_H;
            
            ReinvestAmount2028toVentureManaged_M = ProjValueMaturity2028_M * (ReinvestRate2028/100.00) * (ReinvestRate2028toVentureManaged/100.00);
            ProjValueMaturityVentureManaged_M = [self PaidUpOptionTable_VentureManaged_Median:PrevPaidUpOptionTable_VentureManaged_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureManaged_Median = ProjValueMaturityVentureManaged_M;
            
            ReinvestAmount2028toVentureManaged_L = ProjValueMaturity2028_L * (ReinvestRate2028/100.00) * (ReinvestRate2028toVentureManaged/100.00);
            ProjValueMaturityVentureManaged_L = [self PaidUpOptionTable_VentureManaged_Low:PrevPaidUpOptionTable_VentureManaged_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureManaged_Low = ProjValueMaturityVentureManaged_L;
            //------------
            
            //-- for Secure Fund--- Venture 5555//
            ReinvestAmount2028toVentureIncome_H = ProjValueMaturity2028_H * (ReinvestRate2028/100.00) * (ReinvestRate2028toVentureIncome/100.00);
            ProjValueMaturityVentureIncome_H = [self PaidUpOptionTable_VentureIncome_High:PrevPaidUpOptionTable_VentureIncome_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureIncome_High = ProjValueMaturityVentureIncome_H;
            
            ReinvestAmount2028toVentureIncome_M = ProjValueMaturity2028_M * (ReinvestRate2028/100.00) * (ReinvestRate2028toVentureIncome/100.00);
            ProjValueMaturityVentureIncome_M = [self PaidUpOptionTable_VentureIncome_Median:PrevPaidUpOptionTable_VentureIncome_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureIncome_Median = ProjValueMaturityVentureIncome_M;
            
            ReinvestAmount2028toVentureIncome_L = ProjValueMaturity2028_L * (ReinvestRate2028/100.00) * (ReinvestRate2028toVentureIncome/100.00);
            ProjValueMaturityVentureIncome_L = [self PaidUpOptionTable_VentureIncome_Low:PrevPaidUpOptionTable_VentureIncome_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureIncome_Low = ProjValueMaturityVentureIncome_L;
            //------------
            
            //-- for Secure Fund--- Venture 6666//
            ReinvestAmount2028toVenture6666_H = ProjValueMaturity2028_H * (ReinvestRate2028/100.00) * (ReinvestRate2028toVenture6666/100.00);
            ProjValueMaturityVenture6666_H = [self PaidUpOptionTable_Venture6666_High:PrevPaidUpOptionTable_Venture6666_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture6666_High = ProjValueMaturityVenture6666_H;
            
            ReinvestAmount2028toVenture6666_M = ProjValueMaturity2028_M * (ReinvestRate2028/100.00) * (ReinvestRate2028toVenture6666/100.00);
            ProjValueMaturityVenture6666_M = [self PaidUpOptionTable_Venture6666_Median:PrevPaidUpOptionTable_Venture6666_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture6666_Median = ProjValueMaturityVenture6666_M;
            
            ReinvestAmount2028toVenture6666_L = ProjValueMaturity2028_L * (ReinvestRate2028/100.00) * (ReinvestRate2028toVenture6666/100.00);
            ProjValueMaturityVenture6666_L = [self PaidUpOptionTable_Venture6666_Low:PrevPaidUpOptionTable_Venture6666_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture6666_Low = ProjValueMaturityVenture6666_L;
            //------------
            
            //-- for Secure Fund--- Venture 7777//
            ReinvestAmount2028toVenture7777_H = ProjValueMaturity2028_H * (ReinvestRate2028/100.00) * (ReinvestRate2028toVenture7777/100.00);
            ProjValueMaturityVenture7777_H = [self PaidUpOptionTable_Venture7777_High:PrevPaidUpOptionTable_Venture7777_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture7777_High = ProjValueMaturityVenture7777_H;
            
            ReinvestAmount2028toVenture7777_M = ProjValueMaturity2028_M * (ReinvestRate2028/100.00) * (ReinvestRate2028toVenture7777/100.00);
            ProjValueMaturityVenture7777_M = [self PaidUpOptionTable_Venture7777_Median:PrevPaidUpOptionTable_Venture7777_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture7777_Median = ProjValueMaturityVenture7777_M;
            
            ReinvestAmount2028toVenture7777_L = ProjValueMaturity2028_L * (ReinvestRate2028/100.00) * (ReinvestRate2028toVenture7777/100.00);
            ProjValueMaturityVenture7777_L = [self PaidUpOptionTable_Venture7777_Low:PrevPaidUpOptionTable_Venture7777_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture7777_Low = ProjValueMaturityVenture7777_L;
            //------------
            
            //-- for Secure Fund--- Venture 8888//
            ReinvestAmount2028toVenture8888_H = ProjValueMaturity2028_H * (ReinvestRate2028/100.00) * (ReinvestRate2028toVenture8888/100.00);
            ProjValueMaturityVenture8888_H = [self PaidUpOptionTable_Venture8888_High:PrevPaidUpOptionTable_Venture8888_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture8888_High = ProjValueMaturityVenture8888_H;
            
            ReinvestAmount2028toVenture8888_M = ProjValueMaturity2028_M * (ReinvestRate2028/100.00) * (ReinvestRate2028toVenture8888/100.00);
            ProjValueMaturityVenture8888_M = [self PaidUpOptionTable_Venture8888_Median:PrevPaidUpOptionTable_Venture8888_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture8888_Median = ProjValueMaturityVenture8888_M;
            
            ReinvestAmount2028toVenture8888_L = ProjValueMaturity2028_L * (ReinvestRate2028/100.00) * (ReinvestRate2028toVenture8888/100.00);
            ProjValueMaturityVenture8888_L = [self PaidUpOptionTable_Venture8888_Low:PrevPaidUpOptionTable_Venture8888_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture8888_Low = ProjValueMaturityVenture8888_L;
            //------------
            
            //-- for Secure Fund--- Venture 9999//
            ReinvestAmount2028toVenture9999_H = ProjValueMaturity2028_H * (ReinvestRate2028/100.00) * (ReinvestRate2028toVenture9999/100.00);
            ProjValueMaturityVenture9999_H = [self PaidUpOptionTable_Venture9999_High:PrevPaidUpOptionTable_Venture9999_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture9999_High = ProjValueMaturityVenture9999_H;
            
            ReinvestAmount2028toVenture9999_M = ProjValueMaturity2028_M * (ReinvestRate2028/100.00) * (ReinvestRate2028toVenture9999/100.00);
            ProjValueMaturityVenture9999_M = [self PaidUpOptionTable_Venture9999_Median:PrevPaidUpOptionTable_Venture9999_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture9999_Median = ProjValueMaturityVenture9999_M;
            
            ReinvestAmount2028toVenture9999_L = ProjValueMaturity2028_L * (ReinvestRate2028/100.00) * (ReinvestRate2028toVenture9999/100.00);
            ProjValueMaturityVenture9999_L = [self PaidUpOptionTable_Venture9999_Low:PrevPaidUpOptionTable_Venture9999_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture9999_Low = ProjValueMaturityVenture9999_L;
            //------------
            
            
            //-- for Dana Fund---
            ReinvestAmount2028toDana_H = ProjValueMaturity2028_H * (ReinvestRate2028/100.00) * (ReinvestRate2028toDana/100.00);
            ProjValueMaturityDana_H = [self PaidUpOptionTable_Dana_High:PrevPaidUpOptionTable_Dana_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_Dana_High = ProjValueMaturityDana_H;
            
            ReinvestAmount2028toDana_M = ProjValueMaturity2028_M * (ReinvestRate2028/100.00) * (ReinvestRate2028toDana/100.00);
            ProjValueMaturityDana_M = [self PaidUpOptionTable_Dana_Median:PrevPaidUpOptionTable_Dana_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_Dana_Median = ProjValueMaturityDana_M;
            
            ReinvestAmount2028toDana_L = ProjValueMaturity2028_L * (ReinvestRate2028/100.00) * (ReinvestRate2028toDana/100.00);
            ProjValueMaturityDana_L = [self PaidUpOptionTable_Dana_Low:PrevPaidUpOptionTable_Dana_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_Dana_Low = ProjValueMaturityDana_L;
            //------------
            
            //-- for Smart Fund---
            ReinvestAmount2028toSmart_H = ProjValueMaturity2028_H * (ReinvestRate2028/100.00) * (ReinvestRate2028toSmart/100.00);
            ProjValueMaturitySmart_H = [self PaidUpOptionTable_Smart_High:PrevPaidUpOptionTable_Smart_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_Smart_High = ProjValueMaturitySmart_H;
            
            ReinvestAmount2028toSmart_M = ProjValueMaturity2028_M * (ReinvestRate2028/100.00) * (ReinvestRate2028toSmart/100.00);
            ProjValueMaturitySmart_M = [self PaidUpOptionTable_Smart_Median:PrevPaidUpOptionTable_Smart_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_Smart_Median = ProjValueMaturitySmart_M;
            
            ReinvestAmount2028toSmart_L = ProjValueMaturity2028_L * (ReinvestRate2028/100.00) * (ReinvestRate2028toSmart/100.00);
            ProjValueMaturitySmart_L = [self PaidUpOptionTable_Smart_Low:PrevPaidUpOptionTable_Smart_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_Smart_Low = ProjValueMaturitySmart_L;
            //------------
            
            //-- for Venture Fund---
            ReinvestAmount2028toVenture_H = ProjValueMaturity2028_H * (ReinvestRate2028/100.00) * (ReinvestRate2028toVenture/100.00);
            ProjValueMaturityVenture_H = [self PaidUpOptionTable_Venture_High:PrevPaidUpOptionTable_Venture_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture_High = ProjValueMaturityVenture_H;
            
            ReinvestAmount2028toVenture_M = ProjValueMaturity2028_M * (ReinvestRate2028/100.00) * (ReinvestRate2028toVenture/100.00);
            ProjValueMaturityVenture_M = [self PaidUpOptionTable_Venture_Median:PrevPaidUpOptionTable_Venture_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture_Median = ProjValueMaturityVenture_M;
            
            ReinvestAmount2028toVenture_L = ProjValueMaturity2028_L * (ReinvestRate2028/100.00) * (ReinvestRate2028toVenture/100.00);
            ProjValueMaturityVenture_L = [self PaidUpOptionTable_Venture_Low:PrevPaidUpOptionTable_Venture_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture_Low = ProjValueMaturityVenture_L;
            //------------
            
            //-- for Cash Fund---
            ReinvestAmount2028toCash_H = ProjValueMaturity2028_H * (ReinvestRate2028/100.00) * (ReinvestRate2028toCash/100.00);
            ProjValueMaturityCash_H = [self PaidUpOptionTable_Cash_High:PrevPaidUpOptionTable_Cash_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_Cash_High = ProjValueMaturityCash_H;
            
            ReinvestAmount2028toCash_M = ProjValueMaturity2028_M * (ReinvestRate2028/100.00) * (ReinvestRate2028toCash/100.00);
            ProjValueMaturityCash_M = [self PaidUpOptionTable_Cash_Median:PrevPaidUpOptionTable_Cash_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_Cash_Median = ProjValueMaturityCash_M;
            
            ReinvestAmount2028toCash_L = ProjValueMaturity2028_L * (ReinvestRate2028/100.00) * (ReinvestRate2028toCash/100.00);
            ProjValueMaturityCash_L = [self PaidUpOptionTable_Cash_Low:PrevPaidUpOptionTable_Cash_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_Cash_Low = ProjValueMaturityCash_L;
            //------------
            
        }
        else if (polYear == FundTerm2030) {
            
            if (Fund2030PartialReinvest == 0) {
                ReinvestRate2030 = 100; //meaning 2030 is fully reinvest
            }
            else{
                ReinvestRate2030 = 100 - Fund2030PartialReinvest;
            }
            
            if (Fund2030PartialReinvest != 100) { //meaning 2030 is not withdraw
                ReinvestRate2030to2035 = Fund2030ReinvestTo2035Fac;
                ReinvestRate2030toCash = Fund2030ReinvestToCashFac;
                ReinvestRate2030toDana = Fund2030ReinvestToDanaFac;
                ReinvestRate2030toRet = Fund2030ReinvestToRetFac;
                ReinvestRate2030toVentureGrowth = Fund2030ReinvestToVentureGrowthFac;//
                ReinvestRate2030toVentureBlueChip = Fund2030ReinvestToVentureBlueChipFac;//
                ReinvestRate2030toVentureDana = Fund2030ReinvestToVentureDanaFac;//
                ReinvestRate2030toVentureManaged = Fund2030ReinvestToVentureManagedFac;//
                ReinvestRate2030toVentureIncome = Fund2030ReinvestToVentureIncomeFac;//
                ReinvestRate2030toVenture6666 = Fund2030ReinvestToVenture6666Fac;//
                ReinvestRate2030toVenture7777 = Fund2030ReinvestToVenture7777Fac;//
                ReinvestRate2030toVenture8888 = Fund2030ReinvestToVenture8888Fac;//
                ReinvestRate2030toVenture9999 = Fund2030ReinvestToVenture9999Fac;//
                ReinvestRate2030toSmart = Fund2030ReinvestToSmartFac;
                ReinvestRate2030toVenture = Fund2030ReinvestToVentureFac;
            }
            else{
                ReinvestRate2030to2035 = 0.00;
                ReinvestRate2030toCash = 0.00;
                ReinvestRate2030toDana = 0.00;
                ReinvestRate2030toRet = 0.00;
                ReinvestRate2030toVentureGrowth = 0.00;//
                ReinvestRate2030toVentureBlueChip = 0.00;//
                ReinvestRate2030toVentureDana = 0.00;//
                ReinvestRate2030toVentureManaged = 0.00;//
                ReinvestRate2030toVentureIncome = 0.00;//
                ReinvestRate2030toVenture6666 = 0.00;//
                ReinvestRate2030toVenture7777 = 0.00;//
                ReinvestRate2030toVenture8888 = 0.00;//
                ReinvestRate2030toVenture9999 = 0.00;//
                ReinvestRate2030toSmart = 0.00;
                ReinvestRate2030toVenture = 0.00;
            }
            
            //---- for 2030
            ProjValueMaturity2030_H = [self PaidUpOptionTable_2030_H_Balance:PrevPaidUpOptionTable_2030_High andPolicyYear:polYear];
            ProjWithdraw2030_H = ProjValueMaturity2030_H * ((100 - ReinvestRate2030)/100.00);
            ProjReinvest2030_H = ProjValueMaturity2030_H - ProjWithdraw2030_H;
            
            ProjValueMaturity2030_M = [self PaidUpOptionTable_2030_M_Balance:PrevPaidUpOptionTable_2030_Median andPolicyYear:polYear];
            ProjWithdraw2030_M = ProjValueMaturity2030_M * ((100 - ReinvestRate2030)/100.00);
            ProjReinvest2030_M = ProjValueMaturity2030_M - ProjWithdraw2030_M;
            
            ProjValueMaturity2030_L = [self PaidUpOptionTable_2030_L_Balance:PrevPaidUpOptionTable_2030_Low andPolicyYear:polYear];
            ProjWithdraw2030_L = ProjValueMaturity2030_L * ((100 - ReinvestRate2030)/100.00);
            ProjReinvest2030_L = ProjValueMaturity2030_L - ProjWithdraw2030_L;
            //-------
            
            // ---- for 2035
            ReinvestAmount2030to2035_H = ProjValueMaturity2030_H * (ReinvestRate2030/100.00) * (ReinvestRate2030to2035/100.00);
            ProjValueMaturity2035_H = [self PaidUpOptionTable_2035_High:PrevPaidUpOptionTable_2035_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_2035_High = ProjValueMaturity2035_H;
            
            ReinvestAmount2030to2035_M = ProjValueMaturity2030_M * (ReinvestRate2030/100.00) * (ReinvestRate2030to2035/100.00);
            ProjValueMaturity2035_M = [self PaidUpOptionTable_2035_Median:PrevPaidUpOptionTable_2035_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_2035_Median = ProjValueMaturity2035_M;
            
            ReinvestAmount2030to2035_L = ProjValueMaturity2030_L * (ReinvestRate2030/100.00) * (ReinvestRate2030to2035/100.00);
            ProjValueMaturity2035_L = [self PaidUpOptionTable_2035_Low:PrevPaidUpOptionTable_2035_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_2035_Low = ProjValueMaturity2035_L;
            // -----
            
            //-- for Secure Fund---
            ReinvestAmount2030toRet_H = ProjValueMaturity2030_H * (ReinvestRate2030/100.00) * (ReinvestRate2030toRet/100.00);
            ProjValueMaturityRet_H = [self PaidUpOptionTable_Ret_High:PrevPaidUpOptionTable_Ret_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_Ret_High = ProjValueMaturityRet_H;
            
            ReinvestAmount2030toRet_M = ProjValueMaturity2030_M * (ReinvestRate2030/100.00) * (ReinvestRate2030toRet/100.00);
            ProjValueMaturityRet_M = [self PaidUpOptionTable_Ret_Median:PrevPaidUpOptionTable_Ret_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_Ret_Median = ProjValueMaturityRet_M;
            
            ReinvestAmount2030toRet_L = ProjValueMaturity2030_L * (ReinvestRate2030/100.00) * (ReinvestRate2030toRet/100.00);
            ProjValueMaturityRet_L = [self PaidUpOptionTable_Ret_Low:PrevPaidUpOptionTable_Ret_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_Ret_Low = ProjValueMaturityRet_L;
            //------------
            
            //-- for Secure Fund--- Venture 1111
            ReinvestAmount2030toVentureGrowth_H = ProjValueMaturity2030_H * (ReinvestRate2030/100.00) * (ReinvestRate2030toVentureGrowth/100.00);
            ProjValueMaturityVentureGrowth_H = [self PaidUpOptionTable_VentureGrowth_High:PrevPaidUpOptionTable_VentureGrowth_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureGrowth_High = ProjValueMaturityVentureGrowth_H;
            
            ReinvestAmount2030toVentureGrowth_M = ProjValueMaturity2030_M * (ReinvestRate2030/100.00) * (ReinvestRate2030toVentureGrowth/100.00);
            ProjValueMaturityVentureGrowth_M = [self PaidUpOptionTable_VentureGrowth_Median:PrevPaidUpOptionTable_VentureGrowth_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureGrowth_Median = ProjValueMaturityVentureGrowth_M;
            
            ReinvestAmount2030toVentureGrowth_L = ProjValueMaturity2030_L * (ReinvestRate2030/100.00) * (ReinvestRate2030toVentureGrowth/100.00);
            ProjValueMaturityVentureGrowth_L = [self PaidUpOptionTable_VentureGrowth_Low:PrevPaidUpOptionTable_Ret_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureGrowth_Low = ProjValueMaturityVentureGrowth_L;
            //------------
            
            //-- for Secure Fund--- Venture 2222
            ReinvestAmount2030toVentureBlueChip_H = ProjValueMaturity2030_H * (ReinvestRate2030/100.00) * (ReinvestRate2030toVentureBlueChip/100.00);
            ProjValueMaturityVentureBlueChip_H = [self PaidUpOptionTable_VentureBlueChip_High:PrevPaidUpOptionTable_VentureBlueChip_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureBlueChip_High = ProjValueMaturityVentureBlueChip_H;
            
            ReinvestAmount2030toVentureBlueChip_M = ProjValueMaturity2030_M * (ReinvestRate2030/100.00) * (ReinvestRate2030toVentureBlueChip/100.00);
            ProjValueMaturityVentureBlueChip_M = [self PaidUpOptionTable_VentureBlueChip_Median:PrevPaidUpOptionTable_VentureBlueChip_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureBlueChip_Median = ProjValueMaturityVentureBlueChip_M;
            
            ReinvestAmount2030toVentureBlueChip_L = ProjValueMaturity2030_L * (ReinvestRate2030/100.00) * (ReinvestRate2030toVentureBlueChip/100.00);
            ProjValueMaturityVentureBlueChip_L = [self PaidUpOptionTable_VentureBlueChip_Low:PrevPaidUpOptionTable_Ret_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureBlueChip_Low = ProjValueMaturityVentureBlueChip_L;
            //------------
            
            //-- for Secure Fund--- Venture 3333
            ReinvestAmount2030toVentureDana_H = ProjValueMaturity2030_H * (ReinvestRate2030/100.00) * (ReinvestRate2030toVentureDana/100.00);
            ProjValueMaturityVentureDana_H = [self PaidUpOptionTable_VentureDana_High:PrevPaidUpOptionTable_VentureDana_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureDana_High = ProjValueMaturityVentureDana_H;
            
            ReinvestAmount2030toVentureDana_M = ProjValueMaturity2030_M * (ReinvestRate2030/100.00) * (ReinvestRate2030toVentureDana/100.00);
            ProjValueMaturityVentureDana_M = [self PaidUpOptionTable_VentureDana_Median:PrevPaidUpOptionTable_VentureDana_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureDana_Median = ProjValueMaturityVentureDana_M;
            
            ReinvestAmount2030toVentureDana_L = ProjValueMaturity2030_L * (ReinvestRate2030/100.00) * (ReinvestRate2030toVentureDana/100.00);
            ProjValueMaturityVentureDana_L = [self PaidUpOptionTable_VentureDana_Low:PrevPaidUpOptionTable_Ret_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureDana_Low = ProjValueMaturityVentureDana_L;
            //------------
            
            //-- for Secure Fund--- Venture 4444
            ReinvestAmount2030toVentureManaged_H = ProjValueMaturity2030_H * (ReinvestRate2030/100.00) * (ReinvestRate2030toVentureManaged/100.00);
            ProjValueMaturityVentureManaged_H = [self PaidUpOptionTable_VentureManaged_High:PrevPaidUpOptionTable_VentureManaged_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureManaged_High = ProjValueMaturityVentureManaged_H;
            
            ReinvestAmount2030toVentureManaged_M = ProjValueMaturity2030_M * (ReinvestRate2030/100.00) * (ReinvestRate2030toVentureManaged/100.00);
            ProjValueMaturityVentureManaged_M = [self PaidUpOptionTable_VentureManaged_Median:PrevPaidUpOptionTable_VentureManaged_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureManaged_Median = ProjValueMaturityVentureManaged_M;
            
            ReinvestAmount2030toVentureManaged_L = ProjValueMaturity2030_L * (ReinvestRate2030/100.00) * (ReinvestRate2030toVentureManaged/100.00);
            ProjValueMaturityVentureManaged_L = [self PaidUpOptionTable_VentureManaged_Low:PrevPaidUpOptionTable_Ret_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureManaged_Low = ProjValueMaturityVentureManaged_L;
            //------------
            
            //-- for Secure Fund--- Venture 5555
            ReinvestAmount2030toVentureIncome_H = ProjValueMaturity2030_H * (ReinvestRate2030/100.00) * (ReinvestRate2030toVentureIncome/100.00);
            ProjValueMaturityVentureIncome_H = [self PaidUpOptionTable_VentureIncome_High:PrevPaidUpOptionTable_VentureIncome_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureIncome_High = ProjValueMaturityVentureIncome_H;
            
            ReinvestAmount2030toVentureIncome_M = ProjValueMaturity2030_M * (ReinvestRate2030/100.00) * (ReinvestRate2030toVentureIncome/100.00);
            ProjValueMaturityVentureIncome_M = [self PaidUpOptionTable_VentureIncome_Median:PrevPaidUpOptionTable_VentureIncome_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureIncome_Median = ProjValueMaturityVentureIncome_M;
            
            ReinvestAmount2030toVentureIncome_L = ProjValueMaturity2030_L * (ReinvestRate2030/100.00) * (ReinvestRate2030toVentureIncome/100.00);
            ProjValueMaturityVentureIncome_L = [self PaidUpOptionTable_VentureIncome_Low:PrevPaidUpOptionTable_Ret_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureIncome_Low = ProjValueMaturityVentureIncome_L;
            //------------
            
            //-- for Secure Fund--- Venture 6666
            ReinvestAmount2030toVenture6666_H = ProjValueMaturity2030_H * (ReinvestRate2030/100.00) * (ReinvestRate2030toVenture6666/100.00);
            ProjValueMaturityVenture6666_H = [self PaidUpOptionTable_Venture6666_High:PrevPaidUpOptionTable_Venture6666_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture6666_High = ProjValueMaturityVenture6666_H;
            
            ReinvestAmount2030toVenture6666_M = ProjValueMaturity2030_M * (ReinvestRate2030/100.00) * (ReinvestRate2030toVenture6666/100.00);
            ProjValueMaturityVenture6666_M = [self PaidUpOptionTable_Venture6666_Median:PrevPaidUpOptionTable_Venture6666_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture6666_Median = ProjValueMaturityVenture6666_M;
            
            ReinvestAmount2030toVenture6666_L = ProjValueMaturity2030_L * (ReinvestRate2030/100.00) * (ReinvestRate2030toVenture6666/100.00);
            ProjValueMaturityVenture6666_L = [self PaidUpOptionTable_Venture6666_Low:PrevPaidUpOptionTable_Ret_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture6666_Low = ProjValueMaturityVenture6666_L;
            //------------
            
            //-- for Secure Fund--- Venture 7777
            ReinvestAmount2030toVenture7777_H = ProjValueMaturity2030_H * (ReinvestRate2030/100.00) * (ReinvestRate2030toVenture7777/100.00);
            ProjValueMaturityVenture7777_H = [self PaidUpOptionTable_Venture7777_High:PrevPaidUpOptionTable_Venture7777_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture7777_High = ProjValueMaturityVenture7777_H;
            
            ReinvestAmount2030toVenture7777_M = ProjValueMaturity2030_M * (ReinvestRate2030/100.00) * (ReinvestRate2030toVenture7777/100.00);
            ProjValueMaturityVenture7777_M = [self PaidUpOptionTable_Venture7777_Median:PrevPaidUpOptionTable_Venture7777_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture7777_Median = ProjValueMaturityVenture7777_M;
            
            ReinvestAmount2030toVenture7777_L = ProjValueMaturity2030_L * (ReinvestRate2030/100.00) * (ReinvestRate2030toVenture7777/100.00);
            ProjValueMaturityVenture7777_L = [self PaidUpOptionTable_Venture7777_Low:PrevPaidUpOptionTable_Ret_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture7777_Low = ProjValueMaturityVenture7777_L;
            //------------
            
            //-- for Secure Fund--- Venture 8888
            ReinvestAmount2030toVenture8888_H = ProjValueMaturity2030_H * (ReinvestRate2030/100.00) * (ReinvestRate2030toVenture8888/100.00);
            ProjValueMaturityVenture8888_H = [self PaidUpOptionTable_Venture8888_High:PrevPaidUpOptionTable_Venture8888_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture8888_High = ProjValueMaturityVenture8888_H;
            
            ReinvestAmount2030toVenture8888_M = ProjValueMaturity2030_M * (ReinvestRate2030/100.00) * (ReinvestRate2030toVenture8888/100.00);
            ProjValueMaturityVenture8888_M = [self PaidUpOptionTable_Venture8888_Median:PrevPaidUpOptionTable_Venture8888_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture8888_Median = ProjValueMaturityVenture8888_M;
            
            ReinvestAmount2030toVenture8888_L = ProjValueMaturity2030_L * (ReinvestRate2030/100.00) * (ReinvestRate2030toVenture8888/100.00);
            ProjValueMaturityVenture8888_L = [self PaidUpOptionTable_Venture8888_Low:PrevPaidUpOptionTable_Ret_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture8888_Low = ProjValueMaturityVenture8888_L;
            //------------
            
            //-- for Secure Fund--- Venture 9999
            ReinvestAmount2030toVenture9999_H = ProjValueMaturity2030_H * (ReinvestRate2030/100.00) * (ReinvestRate2030toVenture9999/100.00);
            ProjValueMaturityVenture9999_H = [self PaidUpOptionTable_Venture9999_High:PrevPaidUpOptionTable_Venture9999_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture9999_High = ProjValueMaturityVenture9999_H;
            
            ReinvestAmount2030toVenture9999_M = ProjValueMaturity2030_M * (ReinvestRate2030/100.00) * (ReinvestRate2030toVenture9999/100.00);
            ProjValueMaturityVenture9999_M = [self PaidUpOptionTable_Venture9999_Median:PrevPaidUpOptionTable_Venture9999_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture9999_Median = ProjValueMaturityVenture9999_M;
            
            ReinvestAmount2030toVenture9999_L = ProjValueMaturity2030_L * (ReinvestRate2030/100.00) * (ReinvestRate2030toVenture9999/100.00);
            ProjValueMaturityVenture9999_L = [self PaidUpOptionTable_Venture9999_Low:PrevPaidUpOptionTable_Ret_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture9999_Low = ProjValueMaturityVenture9999_L;
            //------------
            
            
            //-- for Dana Fund---
            ReinvestAmount2030toDana_H = ProjValueMaturity2030_H * (ReinvestRate2030/100.00) * (ReinvestRate2030toDana/100.00);
            ProjValueMaturityDana_H = [self PaidUpOptionTable_Dana_High:PrevPaidUpOptionTable_Dana_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_Dana_High = ProjValueMaturityDana_H;
            
            ReinvestAmount2030toDana_M = ProjValueMaturity2030_M * (ReinvestRate2030/100.00) * (ReinvestRate2030toDana/100.00);
            ProjValueMaturityDana_M = [self PaidUpOptionTable_Dana_Median:PrevPaidUpOptionTable_Dana_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_Dana_Median = ProjValueMaturityDana_M;
            
            ReinvestAmount2030toDana_L = ProjValueMaturity2030_L * (ReinvestRate2030/100.00) * (ReinvestRate2030toDana/100.00);
            ProjValueMaturityDana_L = [self PaidUpOptionTable_Dana_Low:PrevPaidUpOptionTable_Dana_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_Dana_Low = ProjValueMaturityDana_L;
            //------------
            
            //-- for Smart Fund---
            ReinvestAmount2030toSmart_H = ProjValueMaturity2030_H * (ReinvestRate2030/100.00) * (ReinvestRate2030toSmart/100.00);
            ProjValueMaturitySmart_H = [self PaidUpOptionTable_Smart_High:PrevPaidUpOptionTable_Smart_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_Smart_High = ProjValueMaturitySmart_H;
            
            ReinvestAmount2030toSmart_M = ProjValueMaturity2030_M * (ReinvestRate2030/100.00) * (ReinvestRate2030toSmart/100.00);
            ProjValueMaturitySmart_M = [self PaidUpOptionTable_Smart_Median:PrevPaidUpOptionTable_Smart_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_Smart_Median = ProjValueMaturitySmart_M;
            
            ReinvestAmount2030toSmart_L = ProjValueMaturity2030_L * (ReinvestRate2030/100.00) * (ReinvestRate2030toSmart/100.00);
            ProjValueMaturitySmart_L = [self PaidUpOptionTable_Smart_Low:PrevPaidUpOptionTable_Smart_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_Smart_Low = ProjValueMaturitySmart_L;
            //------------
            
            //-- fo Venture Fund---
            ReinvestAmount2030toVenture_H = ProjValueMaturity2030_H * (ReinvestRate2030/100.00) * (ReinvestRate2030toVenture/100.00);
            ProjValueMaturityVenture_H = [self PaidUpOptionTable_Venture_High:PrevPaidUpOptionTable_Venture_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture_High = ProjValueMaturityVenture_H;
            
            ReinvestAmount2030toVenture_M = ProjValueMaturity2030_M * (ReinvestRate2030/100.00) * (ReinvestRate2030toVenture/100.00);
            ProjValueMaturityVenture_M = [self PaidUpOptionTable_Venture_Median:PrevPaidUpOptionTable_Venture_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture_Median = ProjValueMaturityVenture_M;
            
            ReinvestAmount2030toVenture_L = ProjValueMaturity2030_L * (ReinvestRate2030/100.00) * (ReinvestRate2030toVenture/100.00);
            ProjValueMaturityVenture_L = [self PaidUpOptionTable_Venture_Low:PrevPaidUpOptionTable_Venture_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture_Low = ProjValueMaturityVenture_L;
            //------------
            
            //-- for Cash Fund---
            ReinvestAmount2030toCash_H = ProjValueMaturity2030_H * (ReinvestRate2030/100.00) * (ReinvestRate2030toCash/100.00);
            ProjValueMaturityCash_H = [self PaidUpOptionTable_Cash_High:PrevPaidUpOptionTable_Cash_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_Cash_High = ProjValueMaturityCash_H;
            
            ReinvestAmount2030toCash_M = ProjValueMaturity2030_M * (ReinvestRate2030/100.00) * (ReinvestRate2030toCash/100.00);
            ProjValueMaturityCash_M = [self PaidUpOptionTable_Cash_Median:PrevPaidUpOptionTable_Cash_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_Cash_Median = ProjValueMaturityCash_M;
            
            ReinvestAmount2030toCash_L = ProjValueMaturity2030_L * (ReinvestRate2030/100.00) * (ReinvestRate2030toCash/100.00);
            ProjValueMaturityCash_L = [self PaidUpOptionTable_Cash_Low:PrevPaidUpOptionTable_Cash_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_Cash_Low = ProjValueMaturityCash_L;
            //------------
            
        }
        else if (polYear == FundTerm2035) {
            
            if (Fund2035PartialReinvest == 0) {
                ReinvestRate2035 = 100; //meaning 2035 is fully reinvest
            }
            else{
                ReinvestRate2035 = 100 - Fund2035PartialReinvest;
            }
            
            if (Fund2035PartialReinvest != 100) { //meaning 2035 is not withdraw
                ReinvestRate2035toCash = Fund2035ReinvestToCashFac;
                ReinvestRate2035toDana = Fund2035ReinvestToDanaFac;
                ReinvestRate2035toRet = Fund2035ReinvestToRetFac;
                ReinvestRate2035toVentureGrowth = Fund2035ReinvestToVentureGrowthFac;//
                ReinvestRate2035toVentureBlueChip = Fund2035ReinvestToVentureBlueChipFac;//
                ReinvestRate2035toVentureDana = Fund2035ReinvestToVentureDanaFac;//
                ReinvestRate2035toVentureManaged = Fund2035ReinvestToVentureManagedFac;//
                ReinvestRate2035toVentureIncome = Fund2035ReinvestToVentureIncomeFac;//
                ReinvestRate2035toVenture6666 = Fund2035ReinvestToVenture6666Fac;//
                ReinvestRate2035toVenture7777 = Fund2035ReinvestToVenture7777Fac;//
                ReinvestRate2035toVenture8888 = Fund2035ReinvestToVenture8888Fac;//
                ReinvestRate2035toVenture9999 = Fund2035ReinvestToVenture9999Fac;//
                ReinvestRate2035toSmart = Fund2035ReinvestToSmartFac;
                ReinvestRate2035toVenture = Fund2035ReinvestToVentureFac;
            }
            else{
                ReinvestRate2035toCash = 0.00;
                ReinvestRate2035toDana = 0.00;
                ReinvestRate2035toRet = 0.00;
                ReinvestRate2035toVentureGrowth = 0.00;//
                ReinvestRate2035toVentureBlueChip = 0.00;//
                ReinvestRate2035toVentureDana = 0.00;//
                ReinvestRate2035toVentureManaged = 0.00;//
                ReinvestRate2035toVentureIncome = 0.00;//
                ReinvestRate2035toVenture6666 = 0.00;//
                ReinvestRate2035toVenture7777 = 0.00;//
                ReinvestRate2035toVenture8888 = 0.00;//
                ReinvestRate2035toVenture9999 = 0.00;//
                ReinvestRate2035toSmart = 0.00;
                ReinvestRate2035toVenture = 0.00;
            }
            
            //---- for 2035
            ProjValueMaturity2035_H = [self PaidUpOptionTable_2035_H_Balance:PrevPaidUpOptionTable_2035_High andPolicyYear:polYear];
            ProjWithdraw2035_H = ProjValueMaturity2035_H * ((100 - ReinvestRate2035)/100.00);
            ProjReinvest2035_H = ProjValueMaturity2035_H - ProjWithdraw2035_H;
            
            ProjValueMaturity2035_M = [self PaidUpOptionTable_2035_M_Balance:PrevPaidUpOptionTable_2035_Median andPolicyYear:polYear];
            ProjWithdraw2035_M = ProjValueMaturity2035_M * ((100 - ReinvestRate2035)/100.00);
            ProjReinvest2035_M = ProjValueMaturity2035_M - ProjWithdraw2035_M;
            
            ProjValueMaturity2035_L = [self PaidUpOptionTable_2035_L_Balance:PrevPaidUpOptionTable_2035_Low andPolicyYear:polYear];
            ProjWithdraw2035_L = ProjValueMaturity2035_L * ((100 - ReinvestRate2035)/100.00);
            ProjReinvest2035_L = ProjValueMaturity2035_L - ProjWithdraw2035_L;
            //-------
            
            //-- for Secure Fund---
            ReinvestAmount2035toRet_H = ProjValueMaturity2035_H * (ReinvestRate2035/100.00) * (ReinvestRate2035toRet/100.00);
            ProjValueMaturityRet_H = [self PaidUpOptionTable_Ret_High:PrevPaidUpOptionTable_Ret_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_Ret_High = ProjValueMaturityRet_H;
            
            ReinvestAmount2035toRet_M = ProjValueMaturity2035_M * (ReinvestRate2035/100.00) * (ReinvestRate2035toRet/100.00);
            ProjValueMaturityRet_M = [self PaidUpOptionTable_Ret_Median:PrevPaidUpOptionTable_Ret_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_Ret_Median = ProjValueMaturityRet_M;
            
            ReinvestAmount2035toRet_L = ProjValueMaturity2035_L * (ReinvestRate2035/100.00) * (ReinvestRate2035toRet/100.00);
            ProjValueMaturityRet_L = [self PaidUpOptionTable_Ret_Low:PrevPaidUpOptionTable_Ret_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_Ret_Low = ProjValueMaturityRet_L;
            //------------
            
            //-- for Secure Fund--- VentureGrowth
            ReinvestAmount2035toVentureGrowth_H = ProjValueMaturity2035_H * (ReinvestRate2035/100.00) * (ReinvestRate2035toVentureGrowth/100.00);
            ProjValueMaturityVentureGrowth_H = [self PaidUpOptionTable_VentureGrowth_High:PrevPaidUpOptionTable_VentureGrowth_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureGrowth_High = ProjValueMaturityVentureGrowth_H;
            
            ReinvestAmount2035toVentureGrowth_M = ProjValueMaturity2035_M * (ReinvestRate2035/100.00) * (ReinvestRate2035toVentureGrowth/100.00);
            ProjValueMaturityVentureGrowth_M = [self PaidUpOptionTable_VentureGrowth_Median:PrevPaidUpOptionTable_VentureGrowth_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureGrowth_Median = ProjValueMaturityVentureGrowth_M;
            
            ReinvestAmount2035toVentureGrowth_L = ProjValueMaturity2035_L * (ReinvestRate2035/100.00) * (ReinvestRate2035toVentureGrowth/100.00);
            ProjValueMaturityVentureGrowth_L = [self PaidUpOptionTable_VentureGrowth_Low:PrevPaidUpOptionTable_Ret_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureGrowth_Low = ProjValueMaturityVentureGrowth_L;
            //------------
            
            //-- for Secure Fund--- VentureBlueChip
            ReinvestAmount2035toVentureBlueChip_H = ProjValueMaturity2035_H * (ReinvestRate2035/100.00) * (ReinvestRate2035toVentureBlueChip/100.00);
            ProjValueMaturityVentureBlueChip_H = [self PaidUpOptionTable_VentureBlueChip_High:PrevPaidUpOptionTable_VentureBlueChip_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureBlueChip_High = ProjValueMaturityVentureBlueChip_H;
            
            ReinvestAmount2035toVentureBlueChip_M = ProjValueMaturity2035_M * (ReinvestRate2035/100.00) * (ReinvestRate2035toVentureBlueChip/100.00);
            ProjValueMaturityVentureBlueChip_M = [self PaidUpOptionTable_VentureBlueChip_Median:PrevPaidUpOptionTable_VentureBlueChip_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureBlueChip_Median = ProjValueMaturityVentureBlueChip_M;
            
            ReinvestAmount2035toVentureBlueChip_L = ProjValueMaturity2035_L * (ReinvestRate2035/100.00) * (ReinvestRate2035toVentureBlueChip/100.00);
            ProjValueMaturityVentureBlueChip_L = [self PaidUpOptionTable_VentureBlueChip_Low:PrevPaidUpOptionTable_Ret_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureBlueChip_Low = ProjValueMaturityVentureBlueChip_L;
            //------------
            
            //-- for Secure Fund--- VentureDana
            ReinvestAmount2035toVentureDana_H = ProjValueMaturity2035_H * (ReinvestRate2035/100.00) * (ReinvestRate2035toVentureDana/100.00);
            ProjValueMaturityVentureDana_H = [self PaidUpOptionTable_VentureDana_High:PrevPaidUpOptionTable_VentureDana_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureDana_High = ProjValueMaturityVentureDana_H;
            
            ReinvestAmount2035toVentureDana_M = ProjValueMaturity2035_M * (ReinvestRate2035/100.00) * (ReinvestRate2035toVentureDana/100.00);
            ProjValueMaturityVentureDana_M = [self PaidUpOptionTable_VentureDana_Median:PrevPaidUpOptionTable_VentureDana_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureDana_Median = ProjValueMaturityVentureDana_M;
            
            ReinvestAmount2035toVentureDana_L = ProjValueMaturity2035_L * (ReinvestRate2035/100.00) * (ReinvestRate2035toVentureDana/100.00);
            ProjValueMaturityVentureDana_L = [self PaidUpOptionTable_VentureDana_Low:PrevPaidUpOptionTable_Ret_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureDana_Low = ProjValueMaturityVentureDana_L;
            //------------
            
            //-- for Secure Fund--- VentureManaged
            ReinvestAmount2035toVentureManaged_H = ProjValueMaturity2035_H * (ReinvestRate2035/100.00) * (ReinvestRate2035toVentureManaged/100.00);
            ProjValueMaturityVentureManaged_H = [self PaidUpOptionTable_VentureManaged_High:PrevPaidUpOptionTable_VentureManaged_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureManaged_High = ProjValueMaturityVentureManaged_H;
            
            ReinvestAmount2035toVentureManaged_M = ProjValueMaturity2035_M * (ReinvestRate2035/100.00) * (ReinvestRate2035toVentureManaged/100.00);
            ProjValueMaturityVentureManaged_M = [self PaidUpOptionTable_VentureManaged_Median:PrevPaidUpOptionTable_VentureManaged_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureManaged_Median = ProjValueMaturityVentureManaged_M;
            
            ReinvestAmount2035toVentureManaged_L = ProjValueMaturity2035_L * (ReinvestRate2035/100.00) * (ReinvestRate2035toVentureManaged/100.00);
            ProjValueMaturityVentureManaged_L = [self PaidUpOptionTable_VentureManaged_Low:PrevPaidUpOptionTable_Ret_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureManaged_Low = ProjValueMaturityVentureManaged_L;
            //------------
            
            //-- for Secure Fund--- VentureIncome
            ReinvestAmount2035toVentureIncome_H = ProjValueMaturity2035_H * (ReinvestRate2035/100.00) * (ReinvestRate2035toVentureIncome/100.00);
            ProjValueMaturityVentureIncome_H = [self PaidUpOptionTable_VentureIncome_High:PrevPaidUpOptionTable_VentureIncome_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureIncome_High = ProjValueMaturityVentureIncome_H;
            
            ReinvestAmount2035toVentureIncome_M = ProjValueMaturity2035_M * (ReinvestRate2035/100.00) * (ReinvestRate2035toVentureIncome/100.00);
            ProjValueMaturityVentureIncome_M = [self PaidUpOptionTable_VentureIncome_Median:PrevPaidUpOptionTable_VentureIncome_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureIncome_Median = ProjValueMaturityVentureIncome_M;
            
            ReinvestAmount2035toVentureIncome_L = ProjValueMaturity2035_L * (ReinvestRate2035/100.00) * (ReinvestRate2035toVentureIncome/100.00);
            ProjValueMaturityVentureIncome_L = [self PaidUpOptionTable_VentureIncome_Low:PrevPaidUpOptionTable_Ret_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureIncome_Low = ProjValueMaturityVentureIncome_L;
            //------------
            
            //-- for Secure Fund--- Venture6666
            ReinvestAmount2035toVenture6666_H = ProjValueMaturity2035_H * (ReinvestRate2035/100.00) * (ReinvestRate2035toVenture6666/100.00);
            ProjValueMaturityVenture6666_H = [self PaidUpOptionTable_Venture6666_High:PrevPaidUpOptionTable_Venture6666_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture6666_High = ProjValueMaturityVenture6666_H;
            
            ReinvestAmount2035toVenture6666_M = ProjValueMaturity2035_M * (ReinvestRate2035/100.00) * (ReinvestRate2035toVenture6666/100.00);
            ProjValueMaturityVenture6666_M = [self PaidUpOptionTable_Venture6666_Median:PrevPaidUpOptionTable_Venture6666_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture6666_Median = ProjValueMaturityVenture6666_M;
            
            ReinvestAmount2035toVenture6666_L = ProjValueMaturity2035_L * (ReinvestRate2035/100.00) * (ReinvestRate2035toVenture6666/100.00);
            ProjValueMaturityVenture6666_L = [self PaidUpOptionTable_Venture6666_Low:PrevPaidUpOptionTable_Ret_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture6666_Low = ProjValueMaturityVenture6666_L;
            //------------
            
            //-- for Secure Fund--- Venture7777
            ReinvestAmount2035toVenture7777_H = ProjValueMaturity2035_H * (ReinvestRate2035/100.00) * (ReinvestRate2035toVenture7777/100.00);
            ProjValueMaturityVenture7777_H = [self PaidUpOptionTable_Venture7777_High:PrevPaidUpOptionTable_Venture7777_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture7777_High = ProjValueMaturityVenture7777_H;
            
            ReinvestAmount2035toVenture7777_M = ProjValueMaturity2035_M * (ReinvestRate2035/100.00) * (ReinvestRate2035toVenture7777/100.00);
            ProjValueMaturityVenture7777_M = [self PaidUpOptionTable_Venture7777_Median:PrevPaidUpOptionTable_Venture7777_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture7777_Median = ProjValueMaturityVenture7777_M;
            
            ReinvestAmount2035toVenture7777_L = ProjValueMaturity2035_L * (ReinvestRate2035/100.00) * (ReinvestRate2035toVenture7777/100.00);
            ProjValueMaturityVenture7777_L = [self PaidUpOptionTable_Venture7777_Low:PrevPaidUpOptionTable_Ret_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture7777_Low = ProjValueMaturityVenture7777_L;
            //------------
            
            //-- for Secure Fund--- Venture8888
            ReinvestAmount2035toVenture8888_H = ProjValueMaturity2035_H * (ReinvestRate2035/100.00) * (ReinvestRate2035toVenture8888/100.00);
            ProjValueMaturityVenture8888_H = [self PaidUpOptionTable_Venture8888_High:PrevPaidUpOptionTable_Venture8888_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture8888_High = ProjValueMaturityVenture8888_H;
            
            ReinvestAmount2035toVenture8888_M = ProjValueMaturity2035_M * (ReinvestRate2035/100.00) * (ReinvestRate2035toVenture8888/100.00);
            ProjValueMaturityVenture8888_M = [self PaidUpOptionTable_Venture8888_Median:PrevPaidUpOptionTable_Venture8888_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture8888_Median = ProjValueMaturityVenture8888_M;
            
            ReinvestAmount2035toVenture8888_L = ProjValueMaturity2035_L * (ReinvestRate2035/100.00) * (ReinvestRate2035toVenture8888/100.00);
            ProjValueMaturityVenture8888_L = [self PaidUpOptionTable_Venture8888_Low:PrevPaidUpOptionTable_Ret_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture8888_Low = ProjValueMaturityVenture8888_L;
            //------------
            
            //-- for Secure Fund--- Venture9999
            ReinvestAmount2035toVenture9999_H = ProjValueMaturity2035_H * (ReinvestRate2035/100.00) * (ReinvestRate2035toVenture9999/100.00);
            ProjValueMaturityVenture9999_H = [self PaidUpOptionTable_Venture9999_High:PrevPaidUpOptionTable_Venture9999_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture9999_High = ProjValueMaturityVenture9999_H;
            
            ReinvestAmount2035toVenture9999_M = ProjValueMaturity2035_M * (ReinvestRate2035/100.00) * (ReinvestRate2035toVenture9999/100.00);
            ProjValueMaturityVenture9999_M = [self PaidUpOptionTable_Venture9999_Median:PrevPaidUpOptionTable_Venture9999_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture9999_Median = ProjValueMaturityVenture9999_M;
            
            ReinvestAmount2035toVenture9999_L = ProjValueMaturity2035_L * (ReinvestRate2035/100.00) * (ReinvestRate2035toVenture9999/100.00);
            ProjValueMaturityVenture9999_L = [self PaidUpOptionTable_Venture9999_Low:PrevPaidUpOptionTable_Ret_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture9999_Low = ProjValueMaturityVenture9999_L;
            //------------
            
            
            //-- for Dana Fund---
            ReinvestAmount2035toDana_H = ProjValueMaturity2035_H * (ReinvestRate2035/100.00) * (ReinvestRate2035toDana/100.00);
            ProjValueMaturityDana_H = [self PaidUpOptionTable_Dana_High:PrevPaidUpOptionTable_Dana_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_Dana_High = ProjValueMaturityDana_H;
            
            ReinvestAmount2035toDana_M = ProjValueMaturity2035_M * (ReinvestRate2035/100.00) * (ReinvestRate2035toDana/100.00);
            ProjValueMaturityDana_M = [self PaidUpOptionTable_Dana_Median:PrevPaidUpOptionTable_Dana_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_Dana_Median = ProjValueMaturityDana_M;
            
            ReinvestAmount2035toDana_L = ProjValueMaturity2035_L * (ReinvestRate2035/100.00) * (ReinvestRate2035toDana/100.00);
            ProjValueMaturityDana_L = [self PaidUpOptionTable_Dana_Low:PrevPaidUpOptionTable_Dana_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_Dana_Low = ProjValueMaturityDana_L;
            //------------
            
            //-- for Smart Fund---
            ReinvestAmount2035toSmart_H = ProjValueMaturity2035_H * (ReinvestRate2035/100.00) * (ReinvestRate2035toSmart/100.00);
            ProjValueMaturitySmart_H = [self PaidUpOptionTable_Smart_High:PrevPaidUpOptionTable_Smart_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_Smart_High = ProjValueMaturitySmart_H;
            
            ReinvestAmount2035toSmart_M = ProjValueMaturity2035_M * (ReinvestRate2035/100.00) * (ReinvestRate2035toSmart/100.00);
            ProjValueMaturitySmart_M = [self PaidUpOptionTable_Smart_Median:PrevPaidUpOptionTable_Smart_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_Smart_Median = ProjValueMaturitySmart_M;
            
            ReinvestAmount2035toSmart_L = ProjValueMaturity2035_L * (ReinvestRate2035/100.00) * (ReinvestRate2035toSmart/100.00);
            ProjValueMaturitySmart_L = [self PaidUpOptionTable_Smart_Low:PrevPaidUpOptionTable_Smart_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_Smart_Low = ProjValueMaturitySmart_L;
            //------------
            
            //-- for Venture Fund---
            ReinvestAmount2035toVenture_H = ProjValueMaturity2035_H * (ReinvestRate2035/100.00) * (ReinvestRate2035toVenture/100.00);
            ProjValueMaturityVenture_H = [self PaidUpOptionTable_Venture_High:PrevPaidUpOptionTable_Venture_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture_High = ProjValueMaturityVenture_H;
            
            ReinvestAmount2035toVenture_M = ProjValueMaturity2035_M * (ReinvestRate2035/100.00) * (ReinvestRate2035toVenture/100.00);
            ProjValueMaturityVenture_M = [self PaidUpOptionTable_Venture_Median:PrevPaidUpOptionTable_Venture_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture_Median = ProjValueMaturityVenture_M;
            
            ReinvestAmount2035toVenture_L = ProjValueMaturity2035_L * (ReinvestRate2035/100.00) * (ReinvestRate2035toVenture/100.00);
            ProjValueMaturityVenture_L = [self PaidUpOptionTable_Venture_Low:PrevPaidUpOptionTable_Venture_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture_Low = ProjValueMaturityVenture_L;
            //------------
            
            //-- for Cash Fund---
            ReinvestAmount2035toCash_H = ProjValueMaturity2035_H * (ReinvestRate2035/100.00) * (ReinvestRate2035toCash/100.00);
            ProjValueMaturityCash_H = [self PaidUpOptionTable_Cash_High:PrevPaidUpOptionTable_Cash_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_Cash_High = ProjValueMaturityCash_H;
            
            ReinvestAmount2035toCash_M = ProjValueMaturity2035_M * (ReinvestRate2035/100.00) * (ReinvestRate2035toCash/100.00);
            ProjValueMaturityCash_M = [self PaidUpOptionTable_Cash_Median:PrevPaidUpOptionTable_Cash_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_Cash_Median = ProjValueMaturityCash_M;
            
            ReinvestAmount2035toCash_L = ProjValueMaturity2035_L * (ReinvestRate2035/100.00) * (ReinvestRate2035toCash/100.00);
            ProjValueMaturityCash_L = [self PaidUpOptionTable_Cash_Low:PrevPaidUpOptionTable_Cash_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_Cash_Low = ProjValueMaturityCash_L;
            //------------
            
            
        }
        else{
            ProjValueMaturityRet_H = [self PaidUpOptionTable_Ret_High:PrevPaidUpOptionTable_Ret_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_Ret_High = ProjValueMaturityRet_H;
            ProjValueMaturityRet_M = [self PaidUpOptionTable_Ret_Median:PrevPaidUpOptionTable_Ret_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_Ret_Median = ProjValueMaturityRet_M;
            ProjValueMaturityRet_L = [self PaidUpOptionTable_Ret_Low:PrevPaidUpOptionTable_Ret_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_Ret_Low = ProjValueMaturityRet_L;
            
            //Venture 1111//
            ProjValueMaturityVentureGrowth_H = [self PaidUpOptionTable_VentureGrowth_High:PrevPaidUpOptionTable_VentureGrowth_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureGrowth_High = ProjValueMaturityVentureGrowth_H;
            ProjValueMaturityVentureGrowth_M = [self PaidUpOptionTable_VentureGrowth_Median:PrevPaidUpOptionTable_VentureGrowth_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureGrowth_Median = ProjValueMaturityVentureGrowth_M;
            ProjValueMaturityVentureGrowth_L = [self PaidUpOptionTable_VentureGrowth_Low:PrevPaidUpOptionTable_VentureGrowth_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureGrowth_Low = ProjValueMaturityVentureGrowth_L;
            //
            
            //Venture 2222//
            ProjValueMaturityVentureBlueChip_H = [self PaidUpOptionTable_VentureBlueChip_High:PrevPaidUpOptionTable_VentureBlueChip_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureBlueChip_High = ProjValueMaturityVentureBlueChip_H;
            ProjValueMaturityVentureBlueChip_M = [self PaidUpOptionTable_VentureBlueChip_Median:PrevPaidUpOptionTable_VentureBlueChip_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureBlueChip_Median = ProjValueMaturityVentureBlueChip_M;
            ProjValueMaturityVentureBlueChip_L = [self PaidUpOptionTable_VentureBlueChip_Low:PrevPaidUpOptionTable_VentureBlueChip_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureBlueChip_Low = ProjValueMaturityVentureBlueChip_L;
            //
            
            //Venture 3333//
            ProjValueMaturityVentureDana_H = [self PaidUpOptionTable_VentureDana_High:PrevPaidUpOptionTable_VentureDana_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureDana_High = ProjValueMaturityVentureDana_H;
            ProjValueMaturityVentureDana_M = [self PaidUpOptionTable_VentureDana_Median:PrevPaidUpOptionTable_VentureDana_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureDana_Median = ProjValueMaturityVentureDana_M;
            ProjValueMaturityVentureDana_L = [self PaidUpOptionTable_VentureDana_Low:PrevPaidUpOptionTable_VentureDana_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureDana_Low = ProjValueMaturityVentureDana_L;
            //
            
            //Venture 4444//
            ProjValueMaturityVentureManaged_H = [self PaidUpOptionTable_VentureManaged_High:PrevPaidUpOptionTable_VentureManaged_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureManaged_High = ProjValueMaturityVentureManaged_H;
            ProjValueMaturityVentureManaged_M = [self PaidUpOptionTable_VentureManaged_Median:PrevPaidUpOptionTable_VentureManaged_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureManaged_Median = ProjValueMaturityVentureManaged_M;
            ProjValueMaturityVentureManaged_L = [self PaidUpOptionTable_VentureManaged_Low:PrevPaidUpOptionTable_VentureManaged_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureManaged_Low = ProjValueMaturityVentureManaged_L;
            //
            
            //Venture 5555//
            ProjValueMaturityVentureIncome_H = [self PaidUpOptionTable_VentureIncome_High:PrevPaidUpOptionTable_VentureIncome_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureIncome_High = ProjValueMaturityVentureIncome_H;
            ProjValueMaturityVentureIncome_M = [self PaidUpOptionTable_VentureIncome_Median:PrevPaidUpOptionTable_VentureIncome_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureIncome_Median = ProjValueMaturityVentureIncome_M;
            ProjValueMaturityVentureIncome_L = [self PaidUpOptionTable_VentureIncome_Low:PrevPaidUpOptionTable_VentureIncome_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureIncome_Low = ProjValueMaturityVentureIncome_L;
            //
            
            //Venture 6666//
            ProjValueMaturityVenture6666_H = [self PaidUpOptionTable_Venture6666_High:PrevPaidUpOptionTable_Venture6666_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture6666_High = ProjValueMaturityVenture6666_H;
            ProjValueMaturityVenture6666_M = [self PaidUpOptionTable_Venture6666_Median:PrevPaidUpOptionTable_Venture6666_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture6666_Median = ProjValueMaturityVenture6666_M;
            ProjValueMaturityVenture6666_L = [self PaidUpOptionTable_Venture6666_Low:PrevPaidUpOptionTable_Venture6666_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture6666_Low = ProjValueMaturityVenture6666_L;
            //
            
            //Venture 7777//
            ProjValueMaturityVenture7777_H = [self PaidUpOptionTable_Venture7777_High:PrevPaidUpOptionTable_Venture7777_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture7777_High = ProjValueMaturityVenture7777_H;
            ProjValueMaturityVenture7777_M = [self PaidUpOptionTable_Venture7777_Median:PrevPaidUpOptionTable_Venture7777_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture7777_Median = ProjValueMaturityVenture7777_M;
            ProjValueMaturityVenture7777_L = [self PaidUpOptionTable_Venture7777_Low:PrevPaidUpOptionTable_Venture7777_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture7777_Low = ProjValueMaturityVenture7777_L;
            //
            
            //Venture 8888//
            ProjValueMaturityVenture8888_H = [self PaidUpOptionTable_Venture8888_High:PrevPaidUpOptionTable_Venture8888_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture8888_High = ProjValueMaturityVenture8888_H;
            ProjValueMaturityVenture8888_M = [self PaidUpOptionTable_Venture8888_Median:PrevPaidUpOptionTable_Venture8888_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture8888_Median = ProjValueMaturityVenture8888_M;
            ProjValueMaturityVenture8888_L = [self PaidUpOptionTable_Venture8888_Low:PrevPaidUpOptionTable_Venture8888_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture8888_Low = ProjValueMaturityVenture8888_L;
            //
            
            //Venture 9999//
            ProjValueMaturityVenture9999_H = [self PaidUpOptionTable_Venture9999_High:PrevPaidUpOptionTable_Venture9999_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture9999_High = ProjValueMaturityVenture9999_H;
            ProjValueMaturityVenture9999_M = [self PaidUpOptionTable_Venture9999_Median:PrevPaidUpOptionTable_Venture9999_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture9999_Median = ProjValueMaturityVenture9999_M;
            ProjValueMaturityVenture9999_L = [self PaidUpOptionTable_Venture9999_Low:PrevPaidUpOptionTable_Venture9999_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture9999_Low = ProjValueMaturityVenture9999_L;
            //
            
            ProjValueMaturitySmart_H = [self PaidUpOptionTable_Smart_High:PrevPaidUpOptionTable_Smart_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_Smart_High = ProjValueMaturitySmart_H;
            ProjValueMaturitySmart_M = [self PaidUpOptionTable_Smart_Median:PrevPaidUpOptionTable_Smart_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_Smart_Median = ProjValueMaturitySmart_M;
            ProjValueMaturitySmart_L = [self PaidUpOptionTable_Smart_Low:PrevPaidUpOptionTable_Smart_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_Smart_Low = ProjValueMaturitySmart_L;
            
            ProjValueMaturityCash_H = [self PaidUpOptionTable_Cash_High:PrevPaidUpOptionTable_Cash_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_Cash_High = ProjValueMaturityCash_H;
            ProjValueMaturityCash_M = [self PaidUpOptionTable_Cash_Median:PrevPaidUpOptionTable_Cash_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_Cash_Median = ProjValueMaturityCash_M;
            ProjValueMaturityCash_L = [self PaidUpOptionTable_Cash_Low:PrevPaidUpOptionTable_Cash_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_Cash_Low = ProjValueMaturityCash_L;
            
            ProjValueMaturityDana_H = [self PaidUpOptionTable_Dana_High:PrevPaidUpOptionTable_Dana_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_Dana_High = ProjValueMaturityDana_H;
            ProjValueMaturityDana_M = [self PaidUpOptionTable_Dana_Median:PrevPaidUpOptionTable_Dana_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_Dana_Median = ProjValueMaturityDana_M;
            ProjValueMaturityDana_L = [self PaidUpOptionTable_Dana_Low:PrevPaidUpOptionTable_Dana_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_Dana_Low = ProjValueMaturityDana_L;
            
            ProjValueMaturityVenture_H = [self PaidUpOptionTable_Venture_High:PrevPaidUpOptionTable_Venture_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture_High = ProjValueMaturityVenture_H;
            ProjValueMaturityVenture_M = [self PaidUpOptionTable_Venture_Median:PrevPaidUpOptionTable_Venture_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture_Median = ProjValueMaturityVenture_M;
            ProjValueMaturityVenture_L = [self PaidUpOptionTable_Venture_Low:PrevPaidUpOptionTable_Venture_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture_Low = ProjValueMaturityVenture_L;
            
            
            if(polYear < FundTerm2023){
                ProjValueMaturity2023_H = [self PaidUpOptionTable_2023_High:PrevPaidUpOptionTable_2023_High andPolicyYear:polYear];
                PrevPaidUpOptionTable_2023_High = ProjValueMaturity2023_H;
                ProjValueMaturity2023_M = [self PaidUpOptionTable_2023_Median:PrevPaidUpOptionTable_2023_Median andPolicyYear:polYear];
                PrevPaidUpOptionTable_2023_Median = ProjValueMaturity2023_M;
                ProjValueMaturity2023_L = [self PaidUpOptionTable_2023_Low:PrevPaidUpOptionTable_2023_Low andPolicyYear:polYear];
                PrevPaidUpOptionTable_2023_Low = ProjValueMaturity2023_L;
                
                ProjValueMaturity2025_H = [self PaidUpOptionTable_2025_High:PrevPaidUpOptionTable_2025_High andPolicyYear:polYear];
                PrevPaidUpOptionTable_2025_High = ProjValueMaturity2025_H;
                ProjValueMaturity2025_M = [self PaidUpOptionTable_2025_Median:PrevPaidUpOptionTable_2025_Median andPolicyYear:polYear];
                PrevPaidUpOptionTable_2025_Median = ProjValueMaturity2025_M;
                ProjValueMaturity2025_L = [self PaidUpOptionTable_2025_Low:PrevPaidUpOptionTable_2025_Low andPolicyYear:polYear];
                PrevPaidUpOptionTable_2025_Low = ProjValueMaturity2025_L;
                
                ProjValueMaturity2028_H = [self PaidUpOptionTable_2028_High:PrevPaidUpOptionTable_2028_High andPolicyYear:polYear];
                PrevPaidUpOptionTable_2028_High = ProjValueMaturity2028_H;
                ProjValueMaturity2028_M = [self PaidUpOptionTable_2028_Median:PrevPaidUpOptionTable_2028_Median andPolicyYear:polYear];
                PrevPaidUpOptionTable_2028_Median = ProjValueMaturity2028_M;
                ProjValueMaturity2028_L = [self PaidUpOptionTable_2028_Low:PrevPaidUpOptionTable_2028_Low andPolicyYear:polYear];
                PrevPaidUpOptionTable_2028_Low = ProjValueMaturity2028_L;
                
                ProjValueMaturity2030_H = [self PaidUpOptionTable_2030_High:PrevPaidUpOptionTable_2030_High andPolicyYear:polYear];
                PrevPaidUpOptionTable_2030_High = ProjValueMaturity2030_H;
                ProjValueMaturity2030_M = [self PaidUpOptionTable_2030_Median:PrevPaidUpOptionTable_2030_Median andPolicyYear:polYear];
                PrevPaidUpOptionTable_2030_Median = ProjValueMaturity2030_M;
                ProjValueMaturity2030_L = [self PaidUpOptionTable_2030_Low:PrevPaidUpOptionTable_2030_Low andPolicyYear:polYear];
                PrevPaidUpOptionTable_2030_Low = ProjValueMaturity2030_L;
                
                ProjValueMaturity2035_H = [self PaidUpOptionTable_2035_High:PrevPaidUpOptionTable_2035_High andPolicyYear:polYear];
                PrevPaidUpOptionTable_2035_High = ProjValueMaturity2035_H;
                ProjValueMaturity2035_M = [self PaidUpOptionTable_2035_Median:PrevPaidUpOptionTable_2035_Median andPolicyYear:polYear];
                PrevPaidUpOptionTable_2035_Median = ProjValueMaturity2035_M;
                ProjValueMaturity2035_L = [self PaidUpOptionTable_2035_Low:PrevPaidUpOptionTable_2035_Low andPolicyYear:polYear];
                PrevPaidUpOptionTable_2035_Low = ProjValueMaturity2035_L;
            }
            else if(polYear < FundTerm2025){
                ProjValueMaturity2025_H = [self PaidUpOptionTable_2025_High:PrevPaidUpOptionTable_2025_High andPolicyYear:polYear];
                PrevPaidUpOptionTable_2025_High = ProjValueMaturity2025_H;
                ProjValueMaturity2025_M = [self PaidUpOptionTable_2025_Median:PrevPaidUpOptionTable_2025_Median andPolicyYear:polYear];
                PrevPaidUpOptionTable_2025_Median = ProjValueMaturity2025_M;
                ProjValueMaturity2025_L = [self PaidUpOptionTable_2025_Low:PrevPaidUpOptionTable_2025_Low andPolicyYear:polYear];
                PrevPaidUpOptionTable_2025_Low = ProjValueMaturity2025_L;
                
                ProjValueMaturity2028_H = [self PaidUpOptionTable_2028_High:PrevPaidUpOptionTable_2028_High andPolicyYear:polYear];
                PrevPaidUpOptionTable_2028_High = ProjValueMaturity2028_H;
                ProjValueMaturity2028_M = [self PaidUpOptionTable_2028_Median:PrevPaidUpOptionTable_2028_Median andPolicyYear:polYear];
                PrevPaidUpOptionTable_2028_Median = ProjValueMaturity2028_M;
                ProjValueMaturity2028_L = [self PaidUpOptionTable_2028_Low:PrevPaidUpOptionTable_2028_Low andPolicyYear:polYear];
                PrevPaidUpOptionTable_2028_Low = ProjValueMaturity2028_L;
                
                ProjValueMaturity2030_H = [self PaidUpOptionTable_2030_High:PrevPaidUpOptionTable_2030_High andPolicyYear:polYear];
                PrevPaidUpOptionTable_2030_High = ProjValueMaturity2030_H;
                ProjValueMaturity2030_M = [self PaidUpOptionTable_2030_Median:PrevPaidUpOptionTable_2030_Median andPolicyYear:polYear];
                PrevPaidUpOptionTable_2030_Median = ProjValueMaturity2030_M;
                ProjValueMaturity2030_L = [self PaidUpOptionTable_2030_Low:PrevPaidUpOptionTable_2030_Low andPolicyYear:polYear];
                PrevPaidUpOptionTable_2030_Low = ProjValueMaturity2030_L;
                
                ProjValueMaturity2035_H = [self PaidUpOptionTable_2035_High:PrevPaidUpOptionTable_2035_High andPolicyYear:polYear];
                PrevPaidUpOptionTable_2035_High = ProjValueMaturity2035_H;
                ProjValueMaturity2035_M = [self PaidUpOptionTable_2035_Median:PrevPaidUpOptionTable_2035_Median andPolicyYear:polYear];
                PrevPaidUpOptionTable_2035_Median = ProjValueMaturity2035_M;
                ProjValueMaturity2035_L = [self PaidUpOptionTable_2035_Low:PrevPaidUpOptionTable_2035_Low andPolicyYear:polYear];
                PrevPaidUpOptionTable_2035_Low = ProjValueMaturity2035_L;
            }
            else if(polYear < FundTerm2028){
                
                ProjValueMaturity2028_H = [self PaidUpOptionTable_2028_High:PrevPaidUpOptionTable_2028_High andPolicyYear:polYear];
                PrevPaidUpOptionTable_2028_High = ProjValueMaturity2028_H;
                ProjValueMaturity2028_M = [self PaidUpOptionTable_2028_Median:PrevPaidUpOptionTable_2028_Median andPolicyYear:polYear];
                PrevPaidUpOptionTable_2028_Median = ProjValueMaturity2028_M;
                ProjValueMaturity2028_L = [self PaidUpOptionTable_2028_Low:PrevPaidUpOptionTable_2028_Low andPolicyYear:polYear];
                PrevPaidUpOptionTable_2028_Low = ProjValueMaturity2028_L;
                
                ProjValueMaturity2030_H = [self PaidUpOptionTable_2030_High:PrevPaidUpOptionTable_2030_High andPolicyYear:polYear];
                PrevPaidUpOptionTable_2030_High = ProjValueMaturity2030_H;
                ProjValueMaturity2030_M = [self PaidUpOptionTable_2030_Median:PrevPaidUpOptionTable_2030_Median andPolicyYear:polYear];
                PrevPaidUpOptionTable_2030_Median = ProjValueMaturity2030_M;
                ProjValueMaturity2030_L = [self PaidUpOptionTable_2030_Low:PrevPaidUpOptionTable_2030_Low andPolicyYear:polYear];
                PrevPaidUpOptionTable_2030_Low = ProjValueMaturity2030_L;
                
                ProjValueMaturity2035_H = [self PaidUpOptionTable_2035_High:PrevPaidUpOptionTable_2035_High andPolicyYear:polYear];
                PrevPaidUpOptionTable_2035_High = ProjValueMaturity2035_H;
                ProjValueMaturity2035_M = [self PaidUpOptionTable_2035_Median:PrevPaidUpOptionTable_2035_Median andPolicyYear:polYear];
                PrevPaidUpOptionTable_2035_Median = ProjValueMaturity2035_M;
                ProjValueMaturity2035_L = [self PaidUpOptionTable_2035_Low:PrevPaidUpOptionTable_2035_Low andPolicyYear:polYear];
                PrevPaidUpOptionTable_2035_Low = ProjValueMaturity2035_L;
            }
            else if(polYear < FundTerm2030){
                
                ProjValueMaturity2030_H = [self PaidUpOptionTable_2030_High:PrevPaidUpOptionTable_2030_High andPolicyYear:polYear];
                PrevPaidUpOptionTable_2030_High = ProjValueMaturity2030_H;
                ProjValueMaturity2030_M = [self PaidUpOptionTable_2030_Median:PrevPaidUpOptionTable_2030_Median andPolicyYear:polYear];
                PrevPaidUpOptionTable_2030_Median = ProjValueMaturity2030_M;
                ProjValueMaturity2030_L = [self PaidUpOptionTable_2030_Low:PrevPaidUpOptionTable_2030_Low andPolicyYear:polYear];
                PrevPaidUpOptionTable_2030_Low = ProjValueMaturity2030_L;
                
                ProjValueMaturity2035_H = [self PaidUpOptionTable_2035_High:PrevPaidUpOptionTable_2035_High andPolicyYear:polYear];
                PrevPaidUpOptionTable_2035_High = ProjValueMaturity2035_H;
                ProjValueMaturity2035_M = [self PaidUpOptionTable_2035_Median:PrevPaidUpOptionTable_2035_Median andPolicyYear:polYear];
                PrevPaidUpOptionTable_2035_Median = ProjValueMaturity2035_M;
                ProjValueMaturity2035_L = [self PaidUpOptionTable_2035_Low:PrevPaidUpOptionTable_2035_Low andPolicyYear:polYear];
                PrevPaidUpOptionTable_2035_Low = ProjValueMaturity2035_L;
            }
            else if(polYear < FundTerm2035){
                
                ProjValueMaturity2035_H = [self PaidUpOptionTable_2035_High:PrevPaidUpOptionTable_2035_High andPolicyYear:polYear];
                PrevPaidUpOptionTable_2035_High = ProjValueMaturity2035_H;
                ProjValueMaturity2035_M = [self PaidUpOptionTable_2035_Median:PrevPaidUpOptionTable_2035_Median andPolicyYear:polYear];
                PrevPaidUpOptionTable_2035_Median = ProjValueMaturity2035_M;
                ProjValueMaturity2035_L = [self PaidUpOptionTable_2035_Low:PrevPaidUpOptionTable_2035_Low andPolicyYear:polYear];
                PrevPaidUpOptionTable_2035_Low = ProjValueMaturity2035_L;
            }
        }
        
        double TotalEntireFundValue_H = 0.00, TotalEntireFundValue_M = 0.00, TotalEntireFundValue_L = 0.00, dRegWithdrawalAmt = 0.00;
        
        if (RegWithdrawalAmount > 0 ) {
            if (polYear >= RegWithdrawalStartYear && polYear <= RegWithdrawalEndYear) {
                int tempMax = 0;
                
                if ([getPlanCode isEqualToString:@"UV"]) {
                    tempMax = 30;
                }
                else
                {
                    tempMax = [strCovPeriod intValue];
                }
                
                BOOL isWithdrawalYear = [self WithdrawalYear:RegWithdrawalIntYear andWithdrawalStartYear:RegWithdrawalStartYear andWithdrawalEndYear:MIN(RegWithdrawalEndYear, tempMax) andPolicyYear:polYear];
                
                if (isWithdrawalYear == TRUE) {
                    dRegWithdrawalAmt = RegWithdrawalAmount;
                    
                    TotalEntireFundValue_H = ProjValueMaturity2023_H + ProjValueMaturity2025_H + ProjValueMaturity2028_H + ProjValueMaturity2030_H + ProjValueMaturity2035_H + ProjValueMaturityRet_H + ProjValueMaturityDana_H + ProjValueMaturitySmart_H + ProjValueMaturityVenture_H + ProjValueMaturityVentureGrowth_H + ProjValueMaturityVentureBlueChip_H + ProjValueMaturityVentureDana_H + ProjValueMaturityVentureManaged_H + ProjValueMaturityVentureIncome_H + ProjValueMaturityVenture6666_H + ProjValueMaturityVenture7777_H + ProjValueMaturityVenture8888_H + ProjValueMaturityVenture9999_H;
                    TotalEntireFundValue_M = ProjValueMaturity2023_M + ProjValueMaturity2025_M + ProjValueMaturity2028_M + ProjValueMaturity2030_M + ProjValueMaturity2035_M + ProjValueMaturityRet_M + ProjValueMaturityDana_M + ProjValueMaturitySmart_M + ProjValueMaturityVenture_M + ProjValueMaturityVentureGrowth_M + ProjValueMaturityVentureBlueChip_M + ProjValueMaturityVentureDana_M + ProjValueMaturityVentureManaged_M + ProjValueMaturityVentureIncome_M + ProjValueMaturityVenture6666_M + ProjValueMaturityVenture7777_M + ProjValueMaturityVenture8888_M + ProjValueMaturityVenture9999_M;
                    TotalEntireFundValue_L = ProjValueMaturity2023_L + ProjValueMaturity2025_L + ProjValueMaturity2028_L + ProjValueMaturity2030_L + ProjValueMaturity2035_L + ProjValueMaturityRet_L + ProjValueMaturityDana_L + ProjValueMaturitySmart_L + ProjValueMaturityVenture_L + ProjValueMaturityVentureGrowth_L + ProjValueMaturityVentureBlueChip_L + ProjValueMaturityVentureDana_L + ProjValueMaturityVentureManaged_L + ProjValueMaturityVentureIncome_L + ProjValueMaturityVenture6666_L + ProjValueMaturityVenture7777_L + ProjValueMaturityVenture8888_L + ProjValueMaturityVenture9999_L;
                    
                    
                    double  CashFundBalance_H, CashFundBalance_M, CashFundBalance_L;
                    
                    CashFundBalance_H = ProjValueMaturityCash_H - dRegWithdrawalAmt;
                    CashFundBalance_M = ProjValueMaturityCash_M - dRegWithdrawalAmt;
                    CashFundBalance_L = ProjValueMaturityCash_L - dRegWithdrawalAmt;
                    
                    if (CashFundBalance_H < 0){
                        ProjValueMaturity2023_H = [self Calc_RegularWithdrawal_RPU:ProjValueMaturity2023_H TotalEntireFundValue:TotalEntireFundValue_H CashFundBalance:CashFundBalance_H ];
                        ProjValueMaturity2025_H = [self Calc_RegularWithdrawal_RPU:ProjValueMaturity2025_H TotalEntireFundValue:TotalEntireFundValue_H CashFundBalance:CashFundBalance_H ];
                        ProjValueMaturity2028_H = [self Calc_RegularWithdrawal_RPU:ProjValueMaturity2028_H TotalEntireFundValue:TotalEntireFundValue_H CashFundBalance:CashFundBalance_H ];
                        ProjValueMaturity2030_H = [self Calc_RegularWithdrawal_RPU:ProjValueMaturity2030_H TotalEntireFundValue:TotalEntireFundValue_H CashFundBalance:CashFundBalance_H ];
                        ProjValueMaturity2035_H = [self Calc_RegularWithdrawal_RPU:ProjValueMaturity2035_H TotalEntireFundValue:TotalEntireFundValue_H CashFundBalance:CashFundBalance_H ];
                        ProjValueMaturityRet_H = [self Calc_RegularWithdrawal_RPU:ProjValueMaturityRet_H TotalEntireFundValue:TotalEntireFundValue_H CashFundBalance:CashFundBalance_H ];
                        ProjValueMaturityVentureGrowth_H = [self Calc_RegularWithdrawal_RPU:ProjValueMaturityVentureGrowth_H TotalEntireFundValue:TotalEntireFundValue_H CashFundBalance:CashFundBalance_H ];//
                        ProjValueMaturityVentureBlueChip_H = [self Calc_RegularWithdrawal_RPU:ProjValueMaturityVentureBlueChip_H TotalEntireFundValue:TotalEntireFundValue_H CashFundBalance:CashFundBalance_H ];//
                        ProjValueMaturityVentureDana_H = [self Calc_RegularWithdrawal_RPU:ProjValueMaturityVentureDana_H TotalEntireFundValue:TotalEntireFundValue_H CashFundBalance:CashFundBalance_H ];//
                        ProjValueMaturityVentureManaged_H = [self Calc_RegularWithdrawal_RPU:ProjValueMaturityVentureManaged_H TotalEntireFundValue:TotalEntireFundValue_H CashFundBalance:CashFundBalance_H ];//
                        ProjValueMaturityVentureIncome_H = [self Calc_RegularWithdrawal_RPU:ProjValueMaturityVentureIncome_H TotalEntireFundValue:TotalEntireFundValue_H CashFundBalance:CashFundBalance_H ];//
                        ProjValueMaturityVenture6666_H = [self Calc_RegularWithdrawal_RPU:ProjValueMaturityVenture6666_H TotalEntireFundValue:TotalEntireFundValue_H CashFundBalance:CashFundBalance_H ];//
                        ProjValueMaturityVenture7777_H = [self Calc_RegularWithdrawal_RPU:ProjValueMaturityVenture7777_H TotalEntireFundValue:TotalEntireFundValue_H CashFundBalance:CashFundBalance_H ];//
                        ProjValueMaturityVenture8888_H = [self Calc_RegularWithdrawal_RPU:ProjValueMaturityVenture8888_H TotalEntireFundValue:TotalEntireFundValue_H CashFundBalance:CashFundBalance_H ];//
                        ProjValueMaturityVenture9999_H = [self Calc_RegularWithdrawal_RPU:ProjValueMaturityVenture9999_H TotalEntireFundValue:TotalEntireFundValue_H CashFundBalance:CashFundBalance_H ];//
                        ProjValueMaturityDana_H = [self Calc_RegularWithdrawal_RPU:ProjValueMaturityDana_H TotalEntireFundValue:TotalEntireFundValue_H CashFundBalance:CashFundBalance_H ];
                        ProjValueMaturitySmart_H = [self Calc_RegularWithdrawal_RPU:ProjValueMaturitySmart_H TotalEntireFundValue:TotalEntireFundValue_H CashFundBalance:CashFundBalance_H ];
                        ProjValueMaturityVenture_H = [self Calc_RegularWithdrawal_RPU:ProjValueMaturityVenture_H TotalEntireFundValue:TotalEntireFundValue_H CashFundBalance:CashFundBalance_H ];
                        ProjValueMaturityCash_H = 0;
                    }
                    else{
                        ProjValueMaturityCash_H = CashFundBalance_H;
                    }
                    
                    if (CashFundBalance_M < 0){
                        ProjValueMaturity2023_M = [self Calc_RegularWithdrawal_RPU:ProjValueMaturity2023_M TotalEntireFundValue:TotalEntireFundValue_M CashFundBalance:CashFundBalance_M ];
                        ProjValueMaturity2025_M = [self Calc_RegularWithdrawal_RPU:ProjValueMaturity2025_M TotalEntireFundValue:TotalEntireFundValue_M CashFundBalance:CashFundBalance_M ];
                        ProjValueMaturity2028_M = [self Calc_RegularWithdrawal_RPU:ProjValueMaturity2028_M TotalEntireFundValue:TotalEntireFundValue_M CashFundBalance:CashFundBalance_M ];
                        ProjValueMaturity2030_M = [self Calc_RegularWithdrawal_RPU:ProjValueMaturity2030_M TotalEntireFundValue:TotalEntireFundValue_M CashFundBalance:CashFundBalance_M ];
                        ProjValueMaturity2035_M = [self Calc_RegularWithdrawal_RPU:ProjValueMaturity2035_M TotalEntireFundValue:TotalEntireFundValue_M CashFundBalance:CashFundBalance_M ];
                        ProjValueMaturityRet_M = [self Calc_RegularWithdrawal_RPU:ProjValueMaturityRet_M TotalEntireFundValue:TotalEntireFundValue_M CashFundBalance:CashFundBalance_M ];
                        ProjValueMaturityVentureGrowth_M = [self Calc_RegularWithdrawal_RPU:ProjValueMaturityVentureGrowth_M TotalEntireFundValue:TotalEntireFundValue_M CashFundBalance:CashFundBalance_M ];//
                        ProjValueMaturityVentureBlueChip_M = [self Calc_RegularWithdrawal_RPU:ProjValueMaturityVentureBlueChip_M TotalEntireFundValue:TotalEntireFundValue_M CashFundBalance:CashFundBalance_M ];//
                        ProjValueMaturityVentureDana_M = [self Calc_RegularWithdrawal_RPU:ProjValueMaturityVentureDana_M TotalEntireFundValue:TotalEntireFundValue_M CashFundBalance:CashFundBalance_M ];//
                        ProjValueMaturityVentureManaged_M = [self Calc_RegularWithdrawal_RPU:ProjValueMaturityVentureManaged_M TotalEntireFundValue:TotalEntireFundValue_M CashFundBalance:CashFundBalance_M ];//
                        ProjValueMaturityVentureIncome_M = [self Calc_RegularWithdrawal_RPU:ProjValueMaturityVentureIncome_M TotalEntireFundValue:TotalEntireFundValue_M CashFundBalance:CashFundBalance_M ];//
                        ProjValueMaturityVenture6666_M = [self Calc_RegularWithdrawal_RPU:ProjValueMaturityVenture6666_M TotalEntireFundValue:TotalEntireFundValue_M CashFundBalance:CashFundBalance_M ];//
                        ProjValueMaturityVenture7777_M = [self Calc_RegularWithdrawal_RPU:ProjValueMaturityVenture7777_M TotalEntireFundValue:TotalEntireFundValue_M CashFundBalance:CashFundBalance_M ];//
                        ProjValueMaturityVenture8888_M = [self Calc_RegularWithdrawal_RPU:ProjValueMaturityVenture8888_M TotalEntireFundValue:TotalEntireFundValue_M CashFundBalance:CashFundBalance_M ];//
                        ProjValueMaturityVenture9999_M = [self Calc_RegularWithdrawal_RPU:ProjValueMaturityVenture9999_M TotalEntireFundValue:TotalEntireFundValue_M CashFundBalance:CashFundBalance_M ];//
                        ProjValueMaturityDana_M = [self Calc_RegularWithdrawal_RPU:ProjValueMaturityDana_M TotalEntireFundValue:TotalEntireFundValue_M CashFundBalance:CashFundBalance_M ];
                        ProjValueMaturitySmart_M = [self Calc_RegularWithdrawal_RPU:ProjValueMaturitySmart_M TotalEntireFundValue:TotalEntireFundValue_M CashFundBalance:CashFundBalance_M ];
                        ProjValueMaturityVenture_M = [self Calc_RegularWithdrawal_RPU:ProjValueMaturityVenture_M TotalEntireFundValue:TotalEntireFundValue_M CashFundBalance:CashFundBalance_M ];
                        ProjValueMaturityCash_M = 0;
                    }
                    else{
                        ProjValueMaturityCash_M = CashFundBalance_M;
                    }
                    
                    if (CashFundBalance_L < 0){
                        ProjValueMaturity2023_L = [self Calc_RegularWithdrawal_RPU:ProjValueMaturity2023_L TotalEntireFundValue:TotalEntireFundValue_L CashFundBalance:CashFundBalance_L ];
                        ProjValueMaturity2025_L = [self Calc_RegularWithdrawal_RPU:ProjValueMaturity2025_L TotalEntireFundValue:TotalEntireFundValue_L CashFundBalance:CashFundBalance_L ];
                        ProjValueMaturity2028_L = [self Calc_RegularWithdrawal_RPU:ProjValueMaturity2028_L TotalEntireFundValue:TotalEntireFundValue_L CashFundBalance:CashFundBalance_L ];
                        ProjValueMaturity2030_L = [self Calc_RegularWithdrawal_RPU:ProjValueMaturity2030_L TotalEntireFundValue:TotalEntireFundValue_L CashFundBalance:CashFundBalance_L ];
                        ProjValueMaturity2035_L = [self Calc_RegularWithdrawal_RPU:ProjValueMaturity2035_L TotalEntireFundValue:TotalEntireFundValue_L CashFundBalance:CashFundBalance_L ];
                        ProjValueMaturityRet_L = [self Calc_RegularWithdrawal_RPU:ProjValueMaturityRet_L TotalEntireFundValue:TotalEntireFundValue_L CashFundBalance:CashFundBalance_L ];
                        ProjValueMaturityVentureGrowth_L = [self Calc_RegularWithdrawal_RPU:ProjValueMaturityVentureGrowth_L TotalEntireFundValue:TotalEntireFundValue_L CashFundBalance:CashFundBalance_L ];//
                        ProjValueMaturityVentureBlueChip_L = [self Calc_RegularWithdrawal_RPU:ProjValueMaturityVentureBlueChip_L TotalEntireFundValue:TotalEntireFundValue_L CashFundBalance:CashFundBalance_L ];//
                        ProjValueMaturityVentureDana_L = [self Calc_RegularWithdrawal_RPU:ProjValueMaturityVentureDana_L TotalEntireFundValue:TotalEntireFundValue_L CashFundBalance:CashFundBalance_L ];//
                        ProjValueMaturityVentureManaged_L = [self Calc_RegularWithdrawal_RPU:ProjValueMaturityVentureManaged_L TotalEntireFundValue:TotalEntireFundValue_L CashFundBalance:CashFundBalance_L ];//
                        ProjValueMaturityVentureIncome_L = [self Calc_RegularWithdrawal_RPU:ProjValueMaturityVentureIncome_L TotalEntireFundValue:TotalEntireFundValue_L CashFundBalance:CashFundBalance_L ];//
                        ProjValueMaturityVenture6666_L = [self Calc_RegularWithdrawal_RPU:ProjValueMaturityVenture6666_L TotalEntireFundValue:TotalEntireFundValue_L CashFundBalance:CashFundBalance_L ];//
                        ProjValueMaturityVenture7777_L = [self Calc_RegularWithdrawal_RPU:ProjValueMaturityVenture7777_L TotalEntireFundValue:TotalEntireFundValue_L CashFundBalance:CashFundBalance_L ];//
                        ProjValueMaturityVenture8888_L = [self Calc_RegularWithdrawal_RPU:ProjValueMaturityVenture8888_L TotalEntireFundValue:TotalEntireFundValue_L CashFundBalance:CashFundBalance_L ];//
                        ProjValueMaturityVenture9999_L = [self Calc_RegularWithdrawal_RPU:ProjValueMaturityVenture9999_L TotalEntireFundValue:TotalEntireFundValue_L CashFundBalance:CashFundBalance_L ];//
                        ProjValueMaturityDana_L = [self Calc_RegularWithdrawal_RPU:ProjValueMaturityDana_L TotalEntireFundValue:TotalEntireFundValue_L CashFundBalance:CashFundBalance_L ];
                        ProjValueMaturitySmart_L = [self Calc_RegularWithdrawal_RPU:ProjValueMaturitySmart_L TotalEntireFundValue:TotalEntireFundValue_L CashFundBalance:CashFundBalance_L ];
                        ProjValueMaturityVenture_L = [self Calc_RegularWithdrawal_RPU:ProjValueMaturityVenture_L TotalEntireFundValue:TotalEntireFundValue_L CashFundBalance:CashFundBalance_L ];
                        ProjValueMaturityCash_L = 0;
                    }
                    else{
                        ProjValueMaturityCash_L = CashFundBalance_L;
                    }
                    
                    
                    PrevPaidUpOptionTable_2023_High = ProjValueMaturity2023_H;
                    PrevPaidUpOptionTable_2025_High = ProjValueMaturity2025_H;
                    PrevPaidUpOptionTable_2028_High = ProjValueMaturity2028_H;
                    PrevPaidUpOptionTable_2030_High = ProjValueMaturity2030_H;
                    PrevPaidUpOptionTable_2035_High = ProjValueMaturity2035_H;
                    PrevPaidUpOptionTable_Ret_High = ProjValueMaturityRet_H;
                    PrevPaidUpOptionTable_VentureGrowth_High = ProjValueMaturityVentureGrowth_H;//
                    PrevPaidUpOptionTable_VentureBlueChip_High = ProjValueMaturityVentureBlueChip_H;//
                    PrevPaidUpOptionTable_VentureDana_High = ProjValueMaturityVentureDana_H;//
                    PrevPaidUpOptionTable_VentureManaged_High = ProjValueMaturityVentureManaged_H;//
                    PrevPaidUpOptionTable_VentureIncome_High = ProjValueMaturityVentureIncome_H;//
                    PrevPaidUpOptionTable_Venture6666_High = ProjValueMaturityVenture6666_H;//
                    PrevPaidUpOptionTable_Venture7777_High = ProjValueMaturityVenture7777_H;//
                    PrevPaidUpOptionTable_Venture8888_High = ProjValueMaturityVenture8888_H;//
                    PrevPaidUpOptionTable_Venture9999_High = ProjValueMaturityVenture9999_H;//
                    PrevPaidUpOptionTable_Dana_High = ProjValueMaturityDana_H;
                    PrevPaidUpOptionTable_Smart_High = ProjValueMaturitySmart_H;
                    PrevPaidUpOptionTable_Venture_High = ProjValueMaturityVenture_H;
                    PrevPaidUpOptionTable_Cash_High = ProjValueMaturityCash_H;
                    
                    PrevPaidUpOptionTable_2023_Median = ProjValueMaturity2023_M;
                    PrevPaidUpOptionTable_2025_Median = ProjValueMaturity2025_M;
                    PrevPaidUpOptionTable_2028_Median = ProjValueMaturity2028_M;
                    PrevPaidUpOptionTable_2030_Median = ProjValueMaturity2030_M;
                    PrevPaidUpOptionTable_2035_Median = ProjValueMaturity2035_M;
                    PrevPaidUpOptionTable_Ret_Median = ProjValueMaturityRet_M;
                    PrevPaidUpOptionTable_VentureGrowth_Median = ProjValueMaturityVentureGrowth_M;//
                    PrevPaidUpOptionTable_VentureBlueChip_Median = ProjValueMaturityVentureBlueChip_M;//
                    PrevPaidUpOptionTable_VentureDana_Median = ProjValueMaturityVentureDana_M;//
                    PrevPaidUpOptionTable_VentureManaged_Median = ProjValueMaturityVentureManaged_M;//
                    PrevPaidUpOptionTable_VentureIncome_Median = ProjValueMaturityVentureIncome_M;//
                    PrevPaidUpOptionTable_Venture6666_Median = ProjValueMaturityVenture6666_M;//
                    PrevPaidUpOptionTable_Venture7777_Median = ProjValueMaturityVenture7777_M;//
                    PrevPaidUpOptionTable_Venture8888_Median = ProjValueMaturityVenture8888_M;//
                    PrevPaidUpOptionTable_Venture9999_Median = ProjValueMaturityVenture9999_M;//
                    PrevPaidUpOptionTable_Dana_Median = ProjValueMaturityDana_M;
                    PrevPaidUpOptionTable_Smart_Median = ProjValueMaturitySmart_M;
                    PrevPaidUpOptionTable_Venture_Median = ProjValueMaturityVenture_M;
                    PrevPaidUpOptionTable_Cash_Median = ProjValueMaturityCash_M;
                    
                    PrevPaidUpOptionTable_2023_Low = ProjValueMaturity2023_L;
                    PrevPaidUpOptionTable_2025_Low = ProjValueMaturity2025_L;
                    PrevPaidUpOptionTable_2028_Low = ProjValueMaturity2028_L;
                    PrevPaidUpOptionTable_2030_Low = ProjValueMaturity2030_L;
                    PrevPaidUpOptionTable_2035_Low = ProjValueMaturity2035_L;
                    PrevPaidUpOptionTable_Ret_Low = ProjValueMaturityRet_L;
                    PrevPaidUpOptionTable_VentureGrowth_Low = ProjValueMaturityVentureGrowth_L;//
                    PrevPaidUpOptionTable_VentureBlueChip_Low = ProjValueMaturityVentureBlueChip_L;//
                    PrevPaidUpOptionTable_VentureDana_Low = ProjValueMaturityVentureDana_L;//
                    PrevPaidUpOptionTable_VentureManaged_Low = ProjValueMaturityVentureManaged_L;//
                    PrevPaidUpOptionTable_VentureIncome_Low = ProjValueMaturityVentureIncome_L;//
                    PrevPaidUpOptionTable_Venture6666_Low = ProjValueMaturityVenture6666_L;//
                    PrevPaidUpOptionTable_Venture7777_Low = ProjValueMaturityVenture7777_L;//
                    PrevPaidUpOptionTable_Venture8888_Low = ProjValueMaturityVenture8888_L;//
                    PrevPaidUpOptionTable_Venture9999_Low = ProjValueMaturityVenture9999_L;//
                    PrevPaidUpOptionTable_Dana_Low = ProjValueMaturityDana_L;
                    PrevPaidUpOptionTable_Smart_Low = ProjValueMaturitySmart_L;
                    PrevPaidUpOptionTable_Venture_Low = ProjValueMaturityVenture_L;
                    PrevPaidUpOptionTable_Cash_Low = ProjValueMaturityCash_L;
                }
                
                
                
            }
        }
        
        
        if (show15th == TRUE && polYear == 15) {
            if (sqlite3_open([databasePath UTF8String], &contactDB) == SQLITE_OK){
                
                double tempSum = 0.00;
                
                //-------- projected fund value at 15th year------------------
                
                if (polYear > FundTerm2035) {
                    tempSum = ProjValueMaturityDana_H + ProjValueMaturityRet_H + ProjValueMaturitySmart_H + ProjValueMaturityVenture_H + ProjValueMaturityCash_H + ProjValueMaturityVentureGrowth_H + ProjValueMaturityVentureBlueChip_H + ProjValueMaturityVentureDana_H + ProjValueMaturityVentureManaged_H + ProjValueMaturityVentureIncome_H + ProjValueMaturityVenture6666_H + ProjValueMaturityVenture7777_H + ProjValueMaturityVenture8888_H + ProjValueMaturityVenture9999_H;//
                }
                else{
                    tempSum = ProjValueMaturity2030_H + ProjValueMaturity2035_H + ProjValueMaturityDana_H + ProjValueMaturityRet_H + ProjValueMaturitySmart_H + ProjValueMaturityVenture_H + ProjValueMaturityCash_H + ProjValueMaturityVentureGrowth_H + ProjValueMaturityVentureBlueChip_H + ProjValueMaturityVentureDana_H + ProjValueMaturityVentureManaged_H + ProjValueMaturityVentureIncome_H + ProjValueMaturityVenture6666_H + ProjValueMaturityVenture7777_H + ProjValueMaturityVenture8888_H + ProjValueMaturityVenture9999_H;//
                }
                
                if ([EngOrBm isEqualToString:@"English"]) {
                    QuerySQL = [NSString stringWithFormat: @"Insert INTO UL_Temp_RPUO ('SINO', 'SeqNo','col1','col2','col3','col4','col5','col6','col7','col8','col9','col10','col11','col12','col13','col14','col15','col16','col17','col18','col19','col20','col21') "
                                "VALUES ('%@','%d','%@','Projected Fund Value at end of 15th policy year ','%@','%@','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f')",
                                SINo, 5, @"BULL", @"N/A",@"N/A", round(ProjValueMaturity2030_H), round(ProjValueMaturity2035_H), round(ProjValueMaturityVenture_H),
                                round(ProjValueMaturityDana_H),round(ProjValueMaturityRet_H), round(ProjValueMaturitySmart_H), round(ProjValueMaturityCash_H),round(ProjValueMaturityVentureGrowth_H),round(ProjValueMaturityVentureBlueChip_H),round(ProjValueMaturityVentureDana_H),round(ProjValueMaturityVentureManaged_H),round(ProjValueMaturityVentureIncome_H),round(ProjValueMaturityVenture6666_H),round(ProjValueMaturityVenture7777_H),round(ProjValueMaturityVenture8888_H),round(ProjValueMaturityVenture9999_H),round(tempSum) ];
                }
                else{
                    QuerySQL = [NSString stringWithFormat: @"Insert INTO UL_Temp_RPUO ('SINO', 'SeqNo','col1','col2','col3','col4','col5','col6','col7','col8','col9','col10','col11','col12','col13','col14','col15','col16','col17','col18','col19','col20','col21') "
                                "VALUES ('%@','%d','%@','Nilai Dana Unjuran pada akhir tahun polisi ke-15','%@','%@','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f')",
                                SINo, 5, @"BULL", @"N/A",@"N/A", round(ProjValueMaturity2030_H), round(ProjValueMaturity2035_H), round(ProjValueMaturityVenture_H),
                                round(ProjValueMaturityDana_H),round(ProjValueMaturityRet_H), round(ProjValueMaturitySmart_H), round(ProjValueMaturityCash_H),round(ProjValueMaturityVentureGrowth_H),round(ProjValueMaturityVentureBlueChip_H),round(ProjValueMaturityVentureDana_H),round(ProjValueMaturityVentureManaged_H),round(ProjValueMaturityVentureIncome_H),round(ProjValueMaturityVenture6666_H),round(ProjValueMaturityVenture7777_H),round(ProjValueMaturityVenture8888_H),round(ProjValueMaturityVenture9999_H),round(tempSum) ];
                }
                
                
                //NSLog(@"%@", QuerySQL);
                if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
                    if (sqlite3_step(statement) == SQLITE_DONE) {
                        
                    }
                    sqlite3_finalize(statement);
                }
                
                if (polYear > FundTerm2035) {
                    tempSum = ProjValueMaturityDana_M + ProjValueMaturityRet_M + ProjValueMaturitySmart_M + ProjValueMaturityVenture_M + ProjValueMaturityCash_M + ProjValueMaturityVentureGrowth_M + ProjValueMaturityVentureBlueChip_M + ProjValueMaturityVentureDana_M + ProjValueMaturityVentureManaged_M + ProjValueMaturityVentureIncome_M + ProjValueMaturityVenture6666_M + ProjValueMaturityVenture7777_M + ProjValueMaturityVenture8888_M + ProjValueMaturityVenture9999_M;//
                    
                }
                else{
                    tempSum = ProjValueMaturity2030_M + ProjValueMaturity2035_M + ProjValueMaturityDana_M + ProjValueMaturityRet_M + ProjValueMaturitySmart_M + ProjValueMaturityVenture_M + ProjValueMaturityCash_M + ProjValueMaturityVentureGrowth_M + ProjValueMaturityVentureBlueChip_M + ProjValueMaturityVentureDana_M + ProjValueMaturityVentureManaged_M + ProjValueMaturityVentureIncome_M + ProjValueMaturityVenture6666_M + ProjValueMaturityVenture7777_M + ProjValueMaturityVenture8888_M + ProjValueMaturityVenture9999_M;//
                    
                }
                
                if ([EngOrBm isEqualToString:@"English"]) {
                    QuerySQL = [NSString stringWithFormat: @"Insert INTO UL_Temp_RPUO ('SINO', 'SeqNo','col1','col2','col3','col4','col5','col6','col7','col8','col9','col10','col11','col12','col13','col14','col15','col16','col17','col18','col19','col20','col21') "
                                "VALUES ('%@','%d','%@','Projected Fund Value at end of 15th policy year','%@','%@','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f')",
                                SINo, 5, @"FLAT", @"N/A", @"N/A", round(ProjValueMaturity2030_M),round(ProjValueMaturity2035_M),round(ProjValueMaturityVenture_M),
                                round(ProjValueMaturityDana_M),round(ProjValueMaturityRet_M),round(ProjValueMaturitySmart_M), round(ProjValueMaturityCash_M),round(ProjValueMaturityVentureGrowth_M),round(ProjValueMaturityVentureBlueChip_M),round(ProjValueMaturityVentureDana_M),round(ProjValueMaturityVentureManaged_M),round(ProjValueMaturityVentureIncome_M),round(ProjValueMaturityVenture6666_M),round(ProjValueMaturityVenture7777_M),round(ProjValueMaturityVenture8888_M),round(ProjValueMaturityVenture9999_M),round(tempSum) ];
                }
                else{
                    QuerySQL = [NSString stringWithFormat: @"Insert INTO UL_Temp_RPUO ('SINO', 'SeqNo','col1','col2','col3','col4','col5','col6','col7','col8','col9','col10','col11','col12','col13','col14','col15','col16','col17','col18','col19','col20','col21') "
                                "VALUES ('%@','%d','%@','Nilai Dana Unjuran pada akhir tahun polisi ke-15','%@','%@','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f')",
                                SINo, 5, @"FLAT", @"N/A", @"N/A", round(ProjValueMaturity2030_M),round(ProjValueMaturity2035_M),round(ProjValueMaturityVenture_M),
                                round(ProjValueMaturityDana_M),round(ProjValueMaturityRet_M),round(ProjValueMaturitySmart_M), round(ProjValueMaturityCash_M),round(ProjValueMaturityVentureGrowth_M),round(ProjValueMaturityVentureBlueChip_M),round(ProjValueMaturityVentureDana_M),round(ProjValueMaturityVentureManaged_M),round(ProjValueMaturityVentureIncome_M),round(ProjValueMaturityVenture6666_M),round(ProjValueMaturityVenture7777_M),round(ProjValueMaturityVenture8888_M),round(ProjValueMaturityVenture9999_M),round(tempSum) ];
                }
                
                
                if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
                    if (sqlite3_step(statement) == SQLITE_DONE) {
                        
                    }
                    sqlite3_finalize(statement);
                }
                
                if (polYear > FundTerm2035) {
                    tempSum = ProjValueMaturityDana_L + ProjValueMaturityRet_L + ProjValueMaturitySmart_L + ProjValueMaturityVenture_L  + ProjValueMaturityCash_L + ProjValueMaturityVentureGrowth_L  + ProjValueMaturityVentureBlueChip_L + ProjValueMaturityVentureDana_L + ProjValueMaturityVentureManaged_L + ProjValueMaturityVentureIncome_L + ProjValueMaturityVenture6666_L + ProjValueMaturityVenture7777_L + ProjValueMaturityVenture8888_L + ProjValueMaturityVenture9999_L ;//
                }
                else{
                    tempSum = ProjValueMaturity2030_L + ProjValueMaturity2035_L + ProjValueMaturityDana_L + ProjValueMaturityRet_L + ProjValueMaturitySmart_L + ProjValueMaturityVenture_L + ProjValueMaturityCash_L + ProjValueMaturityVentureGrowth_L + ProjValueMaturityVentureBlueChip_L + ProjValueMaturityVentureDana_L + ProjValueMaturityVentureManaged_L + ProjValueMaturityVentureIncome_L + ProjValueMaturityVenture6666_L + ProjValueMaturityVenture7777_L + ProjValueMaturityVenture8888_L + ProjValueMaturityVenture9999_L;//
                    
                }
                
                if ([EngOrBm isEqualToString:@"English"]) {
                    QuerySQL = [NSString stringWithFormat: @"Insert INTO UL_Temp_RPUO ('SINO', 'SeqNo','col1','col2','col3','col4','col5','col6','col7','col8','col9','col10','col11','col12','col13','col14','col15','col16','col17','col18','col19','col20','col21') "
                                "VALUES ('%@','%d','%@','Projected Fund Value at end of 15th policy year','%@','%@','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f')",
                                SINo, 5, @"BEAR", @"N/A", @"N/A", round(ProjValueMaturity2030_L), round(ProjValueMaturity2035_L),round(ProjValueMaturityVenture_L),
                                round(ProjValueMaturityDana_L),round(ProjValueMaturityRet_L),round(ProjValueMaturitySmart_L),round(ProjValueMaturityCash_L),round(ProjValueMaturityVentureGrowth_L),round(ProjValueMaturityVentureBlueChip_L),round(ProjValueMaturityVentureDana_L),round(ProjValueMaturityVentureManaged_L),round(ProjValueMaturityVentureIncome_L),round(ProjValueMaturityVenture6666_L),round(ProjValueMaturityVenture7777_L),round(ProjValueMaturityVenture8888_L),round(ProjValueMaturityVenture9999_L),round(tempSum) ];
                }
                else{
                    QuerySQL = [NSString stringWithFormat: @"Insert INTO UL_Temp_RPUO ('SINO', 'SeqNo','col1','col2','col3','col4','col5','col6','col7','col8','col9','col10','col11','col12','col13','col14','col15','col16','col17','col18','col19','col20','col21') "
                                "VALUES ('%@','%d','%@','Nilai Dana Unjuran pada akhir tahun polisi ke-15','%@','%@','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f')",
                                SINo, 5, @"BEAR", @"N/A", @"N/A", round(ProjValueMaturity2030_L), round(ProjValueMaturity2035_L),round(ProjValueMaturityVenture_L),
                                round(ProjValueMaturityDana_L),round(ProjValueMaturityRet_L),round(ProjValueMaturitySmart_L),round(ProjValueMaturityCash_L),round(ProjValueMaturityVentureGrowth_L),round(ProjValueMaturityVentureBlueChip_L),round(ProjValueMaturityVentureDana_L),round(ProjValueMaturityVentureManaged_L),round(ProjValueMaturityVentureIncome_L),round(ProjValueMaturityVenture6666_L),round(ProjValueMaturityVenture7777_L),round(ProjValueMaturityVenture8888_L),round(ProjValueMaturityVenture9999_L),round(tempSum) ];
                }
                
                
                
                if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
                    if (sqlite3_step(statement) == SQLITE_DONE) {
                        
                    }
                    sqlite3_finalize(statement);
                }
                
                sqlite3_close(contactDB);
            }
        }
        
    }
    
    
    if (sqlite3_open([databasePath UTF8String], &contactDB) == SQLITE_OK){
        
        QuerySQL = [NSString stringWithFormat: @"Insert INTO UL_Temp_RPUO ('SINO', 'SeqNo','col1','col2') "
                    "VALUES ('%@','%d','%@','%.0f')", SINo, 0, @"Charge", round(PaidOpChargeSum_H) ];
        
        if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
            if (sqlite3_step(statement) == SQLITE_DONE) {
                
            }
            sqlite3_finalize(statement);
        }
        
        double tempSum = 0.00;
        tempSum =  VU2025ValueHigh + VU2028ValueHigh + VU2030ValueHigh + VU2035ValueHigh + VUDanaValueHigh + VUCashValueHigh + VURetValueHigh + VUSmartValueHigh + VUVentureValueHigh + VUVentureGrowthValueHigh + VUVentureBlueChipValueHigh + VUVentureDanaValueHigh + VUVentureManagedValueHigh + VUVentureIncomeValueHigh + VUVenture6666ValueHigh + VUVenture7777ValueHigh + VUVenture8888ValueHigh + VUVenture9999ValueHigh;//
        
        if ([EngOrBm isEqualToString:@"English"]) {
            QuerySQL = [NSString stringWithFormat: @"Insert INTO UL_Temp_RPUO ('SINO', 'SeqNo','col1','col2','col3','col4','col5','col6','col7','col8','col9','col10','col11','col12','col13','col14','col15','col16','col17','col18','col19','col20','col21') "
                        "VALUES ('%@','%d','%@','Projected Fund Value at %@ policy anniversary date','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f')",
                        SINo, 1, @"BULL", tempPol, round(VU2025ValueHigh),round(VU2028ValueHigh), round(VU2030ValueHigh),
                        round(VU2035ValueHigh), round(VUVentureValueHigh), round(VUDanaValueHigh),round(VURetValueHigh), round(VUSmartValueHigh), round(VUCashValueHigh),round(VUVentureGrowthValueHigh),round(VUVentureBlueChipValueHigh),round(VUVentureDanaValueHigh),round(VUVentureManagedValueHigh),round(VUVentureIncomeValueHigh),round(VUVenture6666ValueHigh),round(VUVenture7777ValueHigh),round(VUVenture8888ValueHigh),round(VUVenture9999ValueHigh), round(tempSum)];
        }
        else
        {
            QuerySQL = [NSString stringWithFormat: @"Insert INTO UL_Temp_RPUO ('SINO', 'SeqNo','col1','col2','col3','col4','col5','col6','col7','col8','col9','col10','col11','col12','col13','col14','col15','col16','col17','col18','col19','col20','col21') "
                        "VALUES ('%@','%d','%@','Nilai Dana Unjuran pada tarikh ulang tahun polisi ke- %@','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f')",
                        SINo, 1, @"BULL", RPUOYear, round(VU2025ValueHigh),round(VU2028ValueHigh), round(VU2030ValueHigh),
                        round(VU2035ValueHigh), round(VUVentureValueHigh), round(VUDanaValueHigh),round(VURetValueHigh), round(VUSmartValueHigh), round(VUCashValueHigh),round(VUVentureGrowthValueHigh),round(VUVentureBlueChipValueHigh),round(VUVentureDanaValueHigh),round(VUVentureManagedValueHigh),round(VUVentureIncomeValueHigh),round(VUVenture6666ValueHigh),round(VUVenture7777ValueHigh),round(VUVenture8888ValueHigh),round(VUVenture9999ValueHigh), round(tempSum)];
        }
        
        
        //NSLog(@"%@", QuerySQL);
        if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
            if (sqlite3_step(statement) == SQLITE_DONE) {
                
            }
            sqlite3_finalize(statement);
        }
        tempSum = VU2023ValueMedian + VU2025ValueMedian + VU2028ValueMedian + VU2030ValueMedian + VU2035ValueMedian + VUDanaValueMedian + VUCashValueMedian + VURetValueMedian + VUSmartValueMedian + VUVentureValueMedian + VUVentureGrowthValueMedian + VUVentureBlueChipValueMedian + VUVentureDanaValueMedian + VUVentureManagedValueMedian + VUVentureIncomeValueMedian + VUVenture6666ValueMedian + VUVenture7777ValueMedian + VUVenture8888ValueMedian + VUVenture9999ValueMedian;//
        
        if ([EngOrBm isEqualToString:@"English"]) {
            QuerySQL = [NSString stringWithFormat: @"Insert INTO UL_Temp_RPUO ('SINO', 'SeqNo','col1','col2','col3','col4','col5','col6','col7','col8','col9','col10','col11','col12','col13','col14','col15','col16','col17','col18','col19','col20','col21') "
                        "VALUES ('%@','%d','%@','Projected Fund Value at %@ policy anniversary date','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f')",
                        SINo, 1, @"FLAT", tempPol, round(VU2025ValueMedian),round(VU2028ValueMedian), round(VU2030ValueMedian),
                        round(VU2035ValueMedian),round(VUVentureValueMedian), round(VUDanaValueMedian),round(VURetValueMedian),round(VUSmartValueMedian),round(VUCashValueMedian),round(VUVentureGrowthValueMedian),round(VUVentureBlueChipValueMedian),round(VUVentureDanaValueMedian),round(VUVentureManagedValueMedian),round(VUVentureIncomeValueMedian),round(VUVenture6666ValueMedian),round(VUVenture7777ValueMedian),round(VUVenture8888ValueMedian),round(VUVenture9999ValueMedian), round(tempSum) ];
        }
        else
        {
            QuerySQL = [NSString stringWithFormat: @"Insert INTO UL_Temp_RPUO ('SINO', 'SeqNo','col1','col2','col3','col4','col5','col6','col7','col8','col9','col10','col11','col12','col13','col14','col15','col16','col17','col18','col19','col20','col21') "
                        "VALUES ('%@','%d','%@','Nilai Dana Unjuran pada tarikh ulang tahun polisi ke- %@','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f')",
                        SINo, 1, @"FLAT", RPUOYear, round(VU2025ValueMedian),round(VU2028ValueMedian), round(VU2030ValueMedian),
                        round(VU2035ValueMedian),round(VUVentureValueMedian), round(VUDanaValueMedian),round(VURetValueMedian),round(VUSmartValueMedian),round(VUCashValueMedian),round(VUVentureGrowthValueMedian),round(VUVentureBlueChipValueMedian),round(VUVentureDanaValueMedian),round(VUVentureManagedValueMedian),round(VUVentureIncomeValueMedian),round(VUVenture6666ValueMedian),round(VUVenture7777ValueMedian),round(VUVenture8888ValueMedian),round(VUVenture9999ValueMedian), round(tempSum) ];
        }
        
        
        if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
            if (sqlite3_step(statement) == SQLITE_DONE) {
                
            }
            sqlite3_finalize(statement);
        }
        
        tempSum = VU2023ValueLow + VU2025ValueLow + VU2028ValueLow + VU2030ValueLow + VU2035ValueLow + VUDanaValueLow + VUCashValueLow + VURetValueLow + VUSmartValueLow + VUVentureValueLow + VUVentureGrowthValueLow + VUVentureBlueChipValueLow + VUVentureDanaValueLow + VUVentureManagedValueLow + VUVentureIncomeValueLow + VUVenture6666ValueLow + VUVenture7777ValueLow + VUVenture8888ValueLow + VUVenture9999ValueLow;//
        
        if ([EngOrBm isEqualToString:@"English"]) {
            QuerySQL = [NSString stringWithFormat: @"Insert INTO UL_Temp_RPUO ('SINO', 'SeqNo','col1','col2','col3','col4','col5','col6','col7','col8','col9','col10','col11','col12','col13','col14','col15','col16','col17','col18','col19','col20','col21') "
                        "VALUES ('%@','%d','%@','Projected Fund Value at %@ policy anniversary date','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f')",
                        SINo, 1, @"BEAR", tempPol, round(VU2025ValueLow),round(VU2028ValueLow), round(VU2030ValueLow),
                        round(VU2035ValueLow),round(VUVentureValueLow), round(VUDanaValueLow),round(VURetValueLow),round(VUSmartValueLow),round(VUCashValueLow), round(VUVentureGrowthValueLow),round(VUVentureBlueChipValueLow),round(VUVentureDanaValueLow),round(VUVentureManagedValueLow),round(VUVentureIncomeValueLow),round(VUVenture6666ValueLow),round(VUVenture7777ValueLow),round(VUVenture8888ValueLow),round(VUVenture9999ValueLow),round(tempSum) ];
        }
        else
        {
            QuerySQL = [NSString stringWithFormat: @"Insert INTO UL_Temp_RPUO ('SINO', 'SeqNo','col1','col2','col3','col4','col5','col6','col7','col8','col9','col10','col11','col12','col13','col14','col15','col16','col17','col18','col19','col20','col21') "
                        "VALUES ('%@','%d','%@','Nilai Dana Unjuran pada tarikh ulang tahun polisi ke- %@','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f')",
                        SINo, 1, @"BEAR", RPUOYear, round(VU2025ValueLow),round(VU2028ValueLow), round(VU2030ValueLow),
                        round(VU2035ValueLow),round(VUVentureValueLow), round(VUDanaValueLow),round(VURetValueLow),round(VUSmartValueLow),round(VUCashValueLow), round(VUVentureGrowthValueLow),round(VUVentureBlueChipValueLow),round(VUVentureDanaValueLow),round(VUVentureManagedValueLow),round(VUVentureIncomeValueLow),round(VUVenture6666ValueLow),round(VUVenture7777ValueLow),round(VUVenture8888ValueLow),round(VUVenture9999ValueLow),round(tempSum) ];
        }
        
        
        if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
            if (sqlite3_step(statement) == SQLITE_DONE) {
                
            }
            sqlite3_finalize(statement);
        }
        
        // -------------
        
        tempSum =  OriginalProjDeduction2025_H + OriginalProjDeduction2028_H + OriginalProjDeduction2030_H + OriginalProjDeduction2035_H + OriginalProjDeductionDana_H + OriginalProjDeductionRet_H + OriginalProjDeductionSmart_H + OriginalProjDeductionVenture_H + OriginalProjDeductionCash_H + OriginalProjDeductionVentureGrowth_H + OriginalProjDeductionVentureBlueChip_H + OriginalProjDeductionVentureDana_H + OriginalProjDeductionVentureManaged_H + OriginalProjDeductionVentureIncome_H + OriginalProjDeductionVenture6666_H + OriginalProjDeductionVenture7777_H + OriginalProjDeductionVenture8888_H + OriginalProjDeductionVenture9999_H;//
        
        if ([EngOrBm isEqualToString:@"English"]) {
            QuerySQL = [NSString stringWithFormat: @"Insert INTO UL_Temp_RPUO ('SINO', 'SeqNo','col1','col2','col3','col4','col5','col6','col7','col8','col9','col10','col11','col12','col13','col14','col15','col16','col17','col18','col19','col20','col21') "
                        "VALUES ('%@','%d','%@','Projected Fund Value immediately after Reduced Paid Up Charges','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f')",
                        SINo, 2, @"BULL", round(OriginalProjDeduction2025_H),round(OriginalProjDeduction2028_H), round(OriginalProjDeduction2030_H),
                        round(OriginalProjDeduction2035_H),round(OriginalProjDeductionVenture_H), round(OriginalProjDeductionDana_H),round(OriginalProjDeductionRet_H), round(OriginalProjDeductionSmart_H), round(OriginalProjDeductionCash_H),round(OriginalProjDeductionVentureGrowth_H),round(OriginalProjDeductionVentureBlueChip_H),round(OriginalProjDeductionVentureDana_H),round(OriginalProjDeductionVentureManaged_H),round(OriginalProjDeductionVentureIncome_H),round(OriginalProjDeductionVenture6666_H),round(OriginalProjDeductionVenture7777_H),round(OriginalProjDeductionVenture8888_H),round(OriginalProjDeductionVenture9999_H),round(tempSum) ];
        }
        else{
            QuerySQL = [NSString stringWithFormat: @"Insert INTO UL_Temp_RPUO ('SINO', 'SeqNo','col1','col2','col3','col4','col5','col6','col7','col8','col9','col10','col11','col12','col13','col14','col15','col16','col17','col18','col19','col20','col21') "
                        "VALUES ('%@','%d','%@','Nilai Dana Unjuran serta-merta selepas penolakan Caj Berbayar Terkurang','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f')",
                        SINo, 2, @"BULL", round(ProjDeduction2025_H),round(ProjDeduction2028_H), round(ProjDeduction2030_H),
                        round(ProjDeduction2035_H),round(ProjDeductionVenture_H), round(ProjDeductionDana_H),round(ProjDeductionRet_H), round(ProjDeductionSmart_H), round(ProjDeductionCash_H),round(OriginalProjDeductionVentureGrowth_H),round(OriginalProjDeductionVentureBlueChip_H),round(OriginalProjDeductionVentureDana_H),round(OriginalProjDeductionVentureManaged_H),round(OriginalProjDeductionVentureIncome_H),round(OriginalProjDeductionVenture6666_H),round(OriginalProjDeductionVenture7777_H),round(OriginalProjDeductionVenture8888_H),round(OriginalProjDeductionVenture9999_H),round(tempSum) ];
        }
        
        
        //NSLog(@"%@", QuerySQL);
        if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
            if (sqlite3_step(statement) == SQLITE_DONE) {
                
            }
            sqlite3_finalize(statement);
        }
        
        tempSum =  ProjDeduction2025_M + ProjDeduction2028_M + ProjDeduction2030_M + ProjDeduction2035_M + ProjDeductionDana_M + ProjDeductionRet_M + ProjDeductionSmart_M + ProjDeductionVenture_M + ProjDeductionCash_M + ProjDeductionVentureGrowth_M + ProjDeductionVentureBlueChip_M + ProjDeductionVentureDana_M + ProjDeductionVentureManaged_M + ProjDeductionVentureIncome_M + ProjDeductionVenture6666_M + ProjDeductionVenture7777_M + ProjDeductionVenture8888_M + ProjDeductionVenture9999_M;//
        
        if ([EngOrBm isEqualToString:@"English"]) {
            QuerySQL = [NSString stringWithFormat: @"Insert INTO UL_Temp_RPUO ('SINO', 'SeqNo','col1','col2','col3','col4','col5','col6','col7','col8','col9','col10','col11','col12','col13','col14','col15','col16','col17','col18','col19','col20','col21') "
                        "VALUES ('%@','%d','%@','Projected Fund Value immediately after Reduced Paid Up Charges','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f')",
                        SINo, 2, @"FLAT", round(ProjDeduction2025_M),round(ProjDeduction2028_M), round(ProjDeduction2030_M),
                        round(ProjDeduction2035_M),round(ProjDeductionVenture_M), round(ProjDeductionDana_M),round(ProjDeductionRet_M),round(ProjDeductionSmart_M),round(ProjDeductionCash_M),round(ProjDeductionVentureGrowth_M),round(ProjDeductionVentureBlueChip_M),round(ProjDeductionVentureDana_M),round(ProjDeductionVentureManaged_M),round(ProjDeductionVentureIncome_M),round(ProjDeductionVenture6666_M),round(ProjDeductionVenture7777_M),round(ProjDeductionVenture8888_M),round(ProjDeductionVenture9999_M),round(tempSum) ];
        }
        else{
            QuerySQL = [NSString stringWithFormat: @"Insert INTO UL_Temp_RPUO ('SINO', 'SeqNo','col1','col2','col3','col4','col5','col6','col7','col8','col9','col10','col11','col12','col13','col14','col15','col16','col17','col18','col19','col20','col21') "
                        "VALUES ('%@','%d','%@','Nilai Dana Unjuran serta-merta selepas penolakan Caj Berbayar Terkurang','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f')",
                        SINo, 2, @"FLAT", round(ProjDeduction2025_M),round(ProjDeduction2028_M), round(ProjDeduction2030_M),
                        round(ProjDeduction2035_M),round(ProjDeductionVenture_M), round(ProjDeductionDana_M),round(ProjDeductionRet_M),round(ProjDeductionSmart_M),round(ProjDeductionCash_M),round(ProjDeductionVentureGrowth_M),round(ProjDeductionVentureBlueChip_M),round(ProjDeductionVentureDana_M),round(ProjDeductionVentureManaged_M),round(ProjDeductionVentureIncome_M),round(ProjDeductionVenture6666_M),round(ProjDeductionVenture7777_M),round(ProjDeductionVenture8888_M),round(ProjDeductionVenture9999_M),round(tempSum) ];
        }
        
        
        if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
            if (sqlite3_step(statement) == SQLITE_DONE) {
                
            }
            sqlite3_finalize(statement);
        }
        
        tempSum = ProjDeduction2025_L + ProjDeduction2028_L + ProjDeduction2030_L + ProjDeduction2035_L + ProjDeductionDana_L + ProjDeductionRet_L + ProjDeductionSmart_L + ProjDeductionVenture_L +ProjDeductionCash_L + ProjDeductionVentureGrowth_L + ProjDeductionVentureBlueChip_L + ProjDeductionVentureDana_L + ProjDeductionVentureManaged_L + ProjDeductionVentureIncome_L + ProjDeductionVenture6666_L + ProjDeductionVenture7777_L + ProjDeductionVenture8888_L + ProjDeductionVenture9999_L;//
        
        if ([EngOrBm isEqualToString:@"English"]) {
            QuerySQL = [NSString stringWithFormat: @"Insert INTO UL_Temp_RPUO ('SINO', 'SeqNo','col1','col2','col3','col4','col5','col6','col7','col8','col9','col10','col11','col12','col13','col14','col15','col16','col17','col18','col19','col20','col21') "
                        "VALUES ('%@','%d','%@','Projected Fund Value immediately after Reduced Paid Up Charges','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f')",
                        SINo, 2, @"BEAR", round(ProjDeduction2025_L),round(ProjDeduction2028_L), round(ProjDeduction2030_L),
                        round(ProjDeduction2035_L),  round(ProjDeductionVenture_L), round(ProjDeductionDana_L),round(ProjDeductionRet_L),round(ProjDeductionSmart_L), round(ProjDeductionCash_L),round(ProjDeductionVentureGrowth_L),round(ProjDeductionVentureBlueChip_L),round(ProjDeductionVentureDana_L),round(ProjDeductionVentureManaged_L),round(ProjDeductionVentureIncome_L),round(ProjDeductionVenture6666_L),round(ProjDeductionVenture7777_L),round(ProjDeductionVenture8888_L),round(ProjDeductionVenture9999_L),round(tempSum) ];
        }
        else{
            QuerySQL = [NSString stringWithFormat: @"Insert INTO UL_Temp_RPUO ('SINO', 'SeqNo','col1','col2','col3','col4','col5','col6','col7','col8','col9','col10','col11','col12','col13','col14','col15','col16','col17','col18','col19','col20','col21') "
                        "VALUES ('%@','%d','%@','Nilai Dana Unjuran serta-merta selepas penolakan Caj Berbayar Terkurang','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f')",
                        SINo, 2, @"BEAR", round(ProjDeduction2025_L),round(ProjDeduction2028_L), round(ProjDeduction2030_L),
                        round(ProjDeduction2035_L),  round(ProjDeductionVenture_L), round(ProjDeductionDana_L),round(ProjDeductionRet_L),round(ProjDeductionSmart_L), round(ProjDeductionCash_L),round(ProjDeductionVentureGrowth_L),round(ProjDeductionVentureBlueChip_L),round(ProjDeductionVentureDana_L),round(ProjDeductionVentureManaged_L),round(ProjDeductionVentureIncome_L),round(ProjDeductionVenture6666_L),round(ProjDeductionVenture7777_L),round(ProjDeductionVenture8888_L),round(ProjDeductionVenture9999_L),round(tempSum) ];
        }
        
        
        if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
            if (sqlite3_step(statement) == SQLITE_DONE) {
                
            }
            sqlite3_finalize(statement);
        }
        //-------------
        
        tempSum = OriginalProjValAfterReinvest2025_H + OriginalProjValAfterReinvest2028_H + OriginalProjValAfterReinvest2030_H + OriginalProjValAfterReinvest2035_H + OriginalProjValAfterReinvestDana_H + OriginalProjValAfterReinvestRet_H + OriginalProjValAfterReinvestSmart_H + OriginalProjValAfterReinvestVenture_H +  OriginalProjValAfterReinvestCash_H + OriginalProjValAfterReinvestVentureGrowth_H + OriginalProjValAfterReinvestVentureBlueChip_H + OriginalProjValAfterReinvestVentureDana_H + OriginalProjValAfterReinvestVentureManaged_H + OriginalProjValAfterReinvestVentureIncome_H + OriginalProjValAfterReinvestVenture6666_H + OriginalProjValAfterReinvestVenture7777_H + OriginalProjValAfterReinvestVenture8888_H + OriginalProjValAfterReinvestVenture9999_H;//
        
        if ([EngOrBm isEqualToString:@"English"]) {
            QuerySQL = [NSString stringWithFormat: @"Insert INTO UL_Temp_RPUO ('SINO', 'SeqNo','col1','col2','col3','col4','col5','col6','col7','col8','col9','col10','col11','col12','col13','col14','col15','col16','col17','col18','col19','col20','col21') "
                        "VALUES ('%@','%d','%@','Projected Fund Value immediately after Reinvestment of remaining HLA Cash Fund','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f' )",
                        SINo, 3, @"BULL", round(OriginalProjValAfterReinvest2025_H),round(OriginalProjValAfterReinvest2028_H), round(OriginalProjValAfterReinvest2030_H),
                        round(OriginalProjValAfterReinvest2035_H), round(OriginalProjValAfterReinvestVenture_H), round(OriginalProjValAfterReinvestDana_H),round(OriginalProjValAfterReinvestRet_H), round(OriginalProjValAfterReinvestSmart_H), round(OriginalProjValAfterReinvestCash_H),round(OriginalProjValAfterReinvestVentureGrowth_H),round(OriginalProjValAfterReinvestVentureBlueChip_H),round(OriginalProjValAfterReinvestVentureDana_H),round(OriginalProjValAfterReinvestVentureManaged_H),round(OriginalProjValAfterReinvestVentureIncome_H),round(OriginalProjValAfterReinvestVenture6666_H),round(OriginalProjValAfterReinvestVenture7777_H),round(OriginalProjValAfterReinvestVenture8888_H),round(OriginalProjValAfterReinvestVenture9999_H),round(tempSum) ];
        }
        else{
            QuerySQL = [NSString stringWithFormat: @"Insert INTO UL_Temp_RPUO ('SINO', 'SeqNo','col1','col2','col3','col4','col5','col6','col7','col8','col9','col10','col11','col12','col13','col14','col15','col16','col17','col18','col19','col20','col21') "
                        "VALUES ('%@','%d','%@','Nilai Dana Unjuran serta-merta selepas pelaburan semula baki HLA Cash Fund','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f' )",
                        SINo, 3, @"BULL", round(ProjValAfterReinvest2025_H),round(ProjValAfterReinvest2028_H), round(ProjValAfterReinvest2030_H),
                        round(ProjValAfterReinvest2035_H), round(ProjValAfterReinvestVenture_H), round(ProjValAfterReinvestDana_H),round(ProjValAfterReinvestRet_H), round(ProjValAfterReinvestSmart_H), round(ProjValAfterReinvestCash_H),round(OriginalProjValAfterReinvestVentureGrowth_H),round(OriginalProjValAfterReinvestVentureBlueChip_H),round(OriginalProjValAfterReinvestVentureDana_H),round(OriginalProjValAfterReinvestVentureManaged_H),round(OriginalProjValAfterReinvestVentureIncome_H),round(OriginalProjValAfterReinvestVenture6666_H),round(OriginalProjValAfterReinvestVenture7777_H),round(OriginalProjValAfterReinvestVenture8888_H),round(OriginalProjValAfterReinvestVenture9999_H),round(tempSum) ];
        }
        
        
        
        //NSLog(@"%@", QuerySQL);
        if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
            if (sqlite3_step(statement) == SQLITE_DONE) {
                
            }
            sqlite3_finalize(statement);
        }
        
        tempSum =  ProjValAfterReinvest2025_M + ProjValAfterReinvest2028_M + ProjValAfterReinvest2030_M + ProjValAfterReinvest2035_M + ProjValAfterReinvestDana_M + ProjValAfterReinvestRet_M + ProjValAfterReinvestSmart_M + ProjValAfterReinvestVenture_M + ProjValAfterReinvestCash_M + ProjValAfterReinvestVentureGrowth_M + ProjValAfterReinvestVentureBlueChip_M + ProjValAfterReinvestVentureDana_M + ProjValAfterReinvestVentureManaged_M + ProjValAfterReinvestVentureIncome_M + ProjValAfterReinvestVenture6666_M + ProjValAfterReinvestVenture7777_M + ProjValAfterReinvestVenture8888_M + ProjValAfterReinvestVenture9999_M;//
        
        if ([EngOrBm isEqualToString:@"English"]) {
            QuerySQL = [NSString stringWithFormat: @"Insert INTO UL_Temp_RPUO ('SINO', 'SeqNo','col1','col2','col3','col4','col5','col6','col7','col8','col9','col10','col11','col12','col13','col14','col15','col16','col17','col18','col19','col20','col21') "
                        "VALUES ('%@','%d','%@','Projected Fund Value immediately after Reinvestment of remaining HLA Cash Fund','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f')",
                        SINo, 3, @"FLAT", round(ProjValAfterReinvest2025_M),round(ProjValAfterReinvest2028_M), round(ProjValAfterReinvest2030_M),
                        round(ProjValAfterReinvest2035_M),round(ProjValAfterReinvestVenture_M),  round(ProjValAfterReinvestDana_M),round(ProjValAfterReinvestRet_M),round(ProjValAfterReinvestSmart_M), round(ProjValAfterReinvestCash_M),round(ProjValAfterReinvestVentureGrowth_M),round(ProjValAfterReinvestVentureBlueChip_M),round(ProjValAfterReinvestVentureDana_M),round(ProjValAfterReinvestVentureManaged_M),round(ProjValAfterReinvestVentureIncome_M),round(ProjValAfterReinvestVenture6666_M),round(ProjValAfterReinvestVenture7777_M),round(ProjValAfterReinvestVenture8888_M),round(ProjValAfterReinvestVenture9999_M),round(tempSum) ];
        }
        else{
            QuerySQL = [NSString stringWithFormat: @"Insert INTO UL_Temp_RPUO ('SINO', 'SeqNo','col1','col2','col3','col4','col5','col6','col7','col8','col9','col10','col11','col12','col13','col14','col15','col16','col17','col18','col19','col20','col21') "
                        "VALUES ('%@','%d','%@','Nilai Dana Unjuran serta-merta selepas pelaburan semula baki HLA Cash Fund','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f')",
                        SINo, 3, @"FLAT", round(ProjValAfterReinvest2025_M),round(ProjValAfterReinvest2028_M), round(ProjValAfterReinvest2030_M),
                        round(ProjValAfterReinvest2035_M),round(ProjValAfterReinvestVenture_M),  round(ProjValAfterReinvestDana_M),round(ProjValAfterReinvestRet_M),round(ProjValAfterReinvestSmart_M), round(ProjValAfterReinvestCash_M),round(ProjValAfterReinvestVentureGrowth_M),round(ProjValAfterReinvestVentureBlueChip_M),round(ProjValAfterReinvestVentureDana_M),round(ProjValAfterReinvestVentureManaged_M),round(ProjValAfterReinvestVentureIncome_M),round(ProjValAfterReinvestVenture6666_M),round(ProjValAfterReinvestVenture7777_M),round(ProjValAfterReinvestVenture8888_M),round(ProjValAfterReinvestVenture9999_M),round(tempSum) ];
        }
        
        
        if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
            if (sqlite3_step(statement) == SQLITE_DONE) {
                
            }
            sqlite3_finalize(statement);
        }
        
        tempSum =  ProjValAfterReinvest2025_L + ProjValAfterReinvest2028_L + ProjValAfterReinvest2030_L + ProjValAfterReinvest2035_L + ProjValAfterReinvestDana_L + ProjValAfterReinvestRet_L + ProjValAfterReinvestSmart_L + ProjValAfterReinvestVenture_L + ProjValAfterReinvestCash_L + ProjValAfterReinvestVentureGrowth_L + ProjValAfterReinvestVentureBlueChip_L + ProjValAfterReinvestVentureDana_L + ProjValAfterReinvestVentureManaged_L + ProjValAfterReinvestVentureIncome_L + ProjValAfterReinvestVenture6666_L + ProjValAfterReinvestVenture7777_L + ProjValAfterReinvestVenture8888_L + ProjValAfterReinvestVenture9999_L;//
        
        if ([EngOrBm isEqualToString:@"English"]) {
            QuerySQL = [NSString stringWithFormat: @"Insert INTO UL_Temp_RPUO ('SINO', 'SeqNo','col1','col2','col3','col4','col5','col6','col7','col8','col9','col10','col11','col12','col13','col14','col15','col16','col17','col18','col19','col20','col21') "
                        "VALUES ('%@','%d','%@','Projected Fund Value immediately after Reinvestment of remaining HLA Cash Fund','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f')",
                        SINo, 3, @"BEAR", round(ProjValAfterReinvest2025_L),round(ProjValAfterReinvest2028_L), round(ProjValAfterReinvest2030_L),
                        round(ProjValAfterReinvest2035_L),  round(ProjValAfterReinvestVenture_L),round(ProjValAfterReinvestDana_L),round(ProjValAfterReinvestRet_L),round(ProjValAfterReinvestSmart_L), round(ProjValAfterReinvestCash_L),round(ProjValAfterReinvestVentureGrowth_L),round(ProjValAfterReinvestVentureBlueChip_L),round(ProjValAfterReinvestVentureDana_L),round(ProjValAfterReinvestVentureManaged_L),round(ProjValAfterReinvestVentureIncome_L),round(ProjValAfterReinvestVenture6666_L),round(ProjValAfterReinvestVenture7777_L),round(ProjValAfterReinvestVenture8888_L),round(ProjValAfterReinvestVenture9999_L),round(tempSum) ];
        }
        else{
            QuerySQL = [NSString stringWithFormat: @"Insert INTO UL_Temp_RPUO ('SINO', 'SeqNo','col1','col2','col3','col4','col5','col6','col7','col8','col9','col10','col11','col12','col13','col14','col15','col16','col17','col18','col19','col20','col21') "
                        "VALUES ('%@','%d','%@','Nilai Dana Unjuran serta-merta selepas pelaburan semula baki HLA Cash Fund','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f')",
                        SINo, 3, @"BEAR", round(ProjValAfterReinvest2025_L),round(ProjValAfterReinvest2028_L), round(ProjValAfterReinvest2030_L),
                        round(ProjValAfterReinvest2035_L),  round(ProjValAfterReinvestVenture_L),round(ProjValAfterReinvestDana_L),round(ProjValAfterReinvestRet_L),round(ProjValAfterReinvestSmart_L), round(ProjValAfterReinvestCash_L),round(ProjValAfterReinvestVentureGrowth_L),round(ProjValAfterReinvestVentureBlueChip_L),round(ProjValAfterReinvestVentureDana_L),round(ProjValAfterReinvestVentureManaged_L),round(ProjValAfterReinvestVentureIncome_L),round(ProjValAfterReinvestVenture6666_L),round(ProjValAfterReinvestVenture7777_L),round(ProjValAfterReinvestVenture8888_L),round(ProjValAfterReinvestVenture9999_L),round(tempSum) ];
        }
        
        
        if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
            if (sqlite3_step(statement) == SQLITE_DONE) {
                
            }
            sqlite3_finalize(statement);
        }
        
        //-------- withdrawal------------------
        
        tempSum = ProjWithdraw2025_H + ProjWithdraw2028_H + ProjWithdraw2030_H + ProjWithdraw2035_H + ProjWithdrawDana_H + ProjWithdrawRet_H + ProjWithdrawSmart_H + ProjWithdrawVenture_H + ProjWithdrawCash_H + ProjWithdrawVentureGrowth_H + ProjWithdrawVentureBlueChip_H + ProjWithdrawVentureDana_H + ProjWithdrawVentureManaged_H + ProjWithdrawVentureIncome_H + ProjWithdrawVenture6666_H + ProjWithdrawVenture7777_H + ProjWithdrawVenture8888_H + ProjWithdrawVenture9999_H;//
        
        if ([EngOrBm isEqualToString:@"English"]) {
            QuerySQL = [NSString stringWithFormat: @"Insert INTO UL_Temp_RPUO ('SINO', 'SeqNo','col1','col2','col3','col4','col5','col6','col7','col8','col9','col10','col11','col12','col13','col14','col15','col16','col17','col18','col19','col20','col21') "
                        "VALUES ('%@','%d','%@','Projected Amount Withdrawn at fund maturity','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f')",
                        SINo, 4, @"BULL", round(ProjWithdraw2025_H),round(ProjWithdraw2028_H), round(ProjWithdraw2030_H),
                        round(ProjWithdraw2035_H), round(ProjWithdrawVenture_H), round(ProjWithdrawDana_H),round(ProjWithdrawRet_H),round(ProjWithdrawSmart_H), round(ProjWithdrawCash_H),round(ProjWithdrawVentureGrowth_H),round(ProjWithdrawVentureBlueChip_H),round(ProjWithdrawVentureDana_H),round(ProjWithdrawVentureManaged_H),round(ProjWithdrawVentureIncome_H),round(ProjWithdrawVenture6666_H),round(ProjWithdrawVenture7777_H),round(ProjWithdrawVenture8888_H),round(ProjWithdrawVenture9999_H),round(tempSum) ];
        }
        else{
            QuerySQL = [NSString stringWithFormat: @"Insert INTO UL_Temp_RPUO ('SINO', 'SeqNo','col1','col2','col3','col4','col5','col6','col7','col8','col9','col10','col11','col12','col13','col14','col15','col16','col17','col18','col19','col20','col21') "
                        "VALUES ('%@','%d','%@','Amaun Pengeluaran Unjuran pada kematangan dana','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f')",
                        SINo, 4, @"BULL", round(ProjWithdraw2025_H),round(ProjWithdraw2028_H), round(ProjWithdraw2030_H),
                        round(ProjWithdraw2035_H), round(ProjWithdrawVenture_H), round(ProjWithdrawDana_H),round(ProjWithdrawRet_H),round(ProjWithdrawSmart_H), round(ProjWithdrawCash_H),round(ProjWithdrawVentureGrowth_H),round(ProjWithdrawVentureBlueChip_H),round(ProjWithdrawVentureDana_H),round(ProjWithdrawVentureManaged_H),round(ProjWithdrawVentureIncome_H),round(ProjWithdrawVenture6666_H),round(ProjWithdrawVenture7777_H),round(ProjWithdrawVenture8888_H),round(ProjWithdrawVenture9999_H),round(tempSum) ];
        }
        
        
        //NSLog(@"%@", QuerySQL);
        if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
            if (sqlite3_step(statement) == SQLITE_DONE) {
                
            }
            sqlite3_finalize(statement);
        }
        
        tempSum =  ProjWithdraw2025_M + ProjWithdraw2028_M + ProjWithdraw2030_M + ProjWithdraw2035_M + ProjWithdrawDana_M + ProjWithdrawRet_M + ProjWithdrawSmart_M + ProjWithdrawVenture_M + ProjWithdrawCash_M + ProjWithdrawVentureGrowth_M + ProjWithdrawVentureBlueChip_M + ProjWithdrawVentureDana_M + ProjWithdrawVentureManaged_M + ProjWithdrawVentureIncome_M + ProjWithdrawVenture6666_M + ProjWithdrawVenture7777_M + ProjWithdrawVenture8888_M + ProjWithdrawVenture9999_M;//
        
        if ([EngOrBm isEqualToString:@"English"]) {
            QuerySQL = [NSString stringWithFormat: @"Insert INTO UL_Temp_RPUO ('SINO', 'SeqNo','col1','col2','col3','col4','col5','col6','col7','col8','col9','col10','col11','col12','col13','col14','col15','col16','col17','col18','col19','col20','col21') "
                        "VALUES ('%@','%d','%@','Projected Amount Withdrawn at fund maturity','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f')",
                        SINo, 4, @"FLAT", round(ProjWithdraw2025_M),round(ProjWithdraw2028_M), round(ProjWithdraw2030_M),
                        round(ProjWithdraw2035_M), round(ProjWithdrawVenture_M), round(ProjWithdrawDana_M),round(ProjWithdrawRet_M),round(ProjWithdrawSmart_M), round(ProjWithdrawCash_M),round(ProjWithdrawVentureGrowth_M),round(ProjWithdrawVentureBlueChip_M),round(ProjWithdrawVentureDana_M),round(ProjWithdrawVentureManaged_M),round(ProjWithdrawVentureIncome_M),round(ProjWithdrawVenture6666_M),round(ProjWithdrawVenture7777_M),round(ProjWithdrawVenture8888_M),round(ProjWithdrawVenture9999_M),round(tempSum) ];
        }
        else{
            QuerySQL = [NSString stringWithFormat: @"Insert INTO UL_Temp_RPUO ('SINO', 'SeqNo','col1','col2','col3','col4','col5','col6','col7','col8','col9','col10','col11','col12','col13','col14','col15','col16','col17','col18','col19','col20','col21') "
                        "VALUES ('%@','%d','%@','Amaun Pengeluaran Unjuran pada kematangan dana','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f')",
                        SINo, 4, @"FLAT", round(ProjWithdraw2025_M),round(ProjWithdraw2028_M), round(ProjWithdraw2030_M),
                        round(ProjWithdraw2035_M), round(ProjWithdrawVenture_M), round(ProjWithdrawDana_M),round(ProjWithdrawRet_M),round(ProjWithdrawSmart_M), round(ProjWithdrawCash_M),round(ProjWithdrawVentureGrowth_M),round(ProjWithdrawVentureBlueChip_M),round(ProjWithdrawVentureDana_M),round(ProjWithdrawVentureManaged_M),round(ProjWithdrawVentureIncome_M),round(ProjWithdrawVenture6666_M),round(ProjWithdrawVenture7777_M),round(ProjWithdrawVenture8888_M),round(ProjWithdrawVenture9999_M),round(tempSum) ];
        }
        
        
        if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
            if (sqlite3_step(statement) == SQLITE_DONE) {
                
            }
            sqlite3_finalize(statement);
        }
        
        tempSum =  ProjWithdraw2025_L + ProjWithdraw2028_L + ProjWithdraw2030_L + ProjWithdraw2035_L + ProjWithdrawDana_L + ProjWithdrawRet_L + ProjWithdrawSmart_L + ProjWithdrawVenture_L + ProjWithdrawCash_L + ProjWithdrawVentureGrowth_L + ProjWithdrawVentureBlueChip_L + ProjWithdrawVentureDana_L + ProjWithdrawVentureManaged_L + ProjWithdrawVentureIncome_L + ProjWithdrawVenture6666_L + ProjWithdrawVenture7777_L + ProjWithdrawVenture8888_L + ProjWithdrawVenture9999_L;//
        
        if ([EngOrBm isEqualToString:@"English"]) {
            QuerySQL = [NSString stringWithFormat: @"Insert INTO UL_Temp_RPUO ('SINO', 'SeqNo','col1','col2','col3','col4','col5','col6','col7','col8','col9','col10','col11','col12','col13','col14','col15','col16','col17','col18','col19','col20','col21') "
                        "VALUES ('%@','%d','%@','Projected Amount Withdrawn at fund maturity','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f')",
                        SINo, 4, @"BEAR", round(ProjWithdraw2025_L),round(ProjWithdraw2028_L), round(ProjWithdraw2030_L),
                        round(ProjWithdraw2035_L),round(ProjWithdrawVenture_L), round(ProjWithdrawDana_L),round(ProjWithdrawRet_L),round(ProjWithdrawSmart_L), round(ProjWithdrawCash_L),round(ProjWithdrawVentureGrowth_L),round(ProjWithdrawVentureBlueChip_L),round(ProjWithdrawVentureDana_L),round(ProjWithdrawVentureManaged_L),round(ProjWithdrawVentureIncome_L),round(ProjWithdrawVenture6666_L),round(ProjWithdrawVenture7777_L),round(ProjWithdrawVenture8888_L),round(ProjWithdrawVenture9999_L),round(tempSum) ];
        }
        else{
            QuerySQL = [NSString stringWithFormat: @"Insert INTO UL_Temp_RPUO ('SINO', 'SeqNo','col1','col2','col3','col4','col5','col6','col7','col8','col9','col10','col11','col12','col13','col14','col15','col16','col17','col18','col19','col20','col21') "
                        "VALUES ('%@','%d','%@','Amaun Pengeluaran Unjuran pada kematangan dana','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f')",
                        SINo, 4, @"BEAR", round(ProjWithdraw2025_L),round(ProjWithdraw2028_L), round(ProjWithdraw2030_L),
                        round(ProjWithdraw2035_L),round(ProjWithdrawVenture_L), round(ProjWithdrawDana_L),round(ProjWithdrawRet_L),round(ProjWithdrawSmart_L), round(ProjWithdrawCash_L),round(ProjWithdrawVentureGrowth_L),round(ProjWithdrawVentureBlueChip_L),round(ProjWithdrawVentureDana_L),round(ProjWithdrawVentureManaged_L),round(ProjWithdrawVentureIncome_L),round(ProjWithdrawVenture6666_L),round(ProjWithdrawVenture7777_L),round(ProjWithdrawVenture8888_L),round(ProjWithdrawVenture9999_L),round(tempSum) ];
        }
        
        
        if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
            if (sqlite3_step(statement) == SQLITE_DONE) {
                
            }
            sqlite3_finalize(statement);
        }
        
        //-------- projected fund value at xxth year------------------
        
        NSString *tempAdd;
        NSString *str = [NSString stringWithFormat:@"%d", ToYear];
        
        if ([[str substringFromIndex: str.length  - 1 ] isEqualToString:@"1"]) {
            tempAdd = [str stringByAppendingFormat:@"st" ];
        }
        if ([[str substringFromIndex: str.length  - 1 ] isEqualToString:@"2"]) {
            tempAdd = [str stringByAppendingFormat:@"nd" ];
        }
        if ([[str substringFromIndex: str.length  - 1 ] isEqualToString:@"3"]) {
            tempAdd = [str stringByAppendingFormat:@"rd" ];
        }
        else {
            tempAdd = [str stringByAppendingFormat:@"th" ];
        }
        
        
        /// commented codes
        ///QuerySQL = [NSString stringWithFormat: @"Insert INTO UL_Temp_RPUO ('SINO', 'SeqNo','col1','col2','col3','col4','col5','col6','col7','col8','col9','col10') "
        ///"VALUES ('%@','%d','%@','Projected Fund Value at end of %@ policy year ','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f')",
        ///SINo, 5, @"BULL", tempAdd, round(ProjValueMaturity2023_H),round(ProjValueMaturity2025_H),round(ProjValueMaturity2028_H), round(ProjValueMaturity2030_H),
        ///round(ProjValueMaturity2035_H), round(ProjValueMaturityDana_H),round(ProjValueMaturityRet_H),round(ProjValueMaturityC///ash_H) ];
        
        
        //tempSum = ProjValueMaturity2023_H + ProjValueMaturity2025_H + ProjValueMaturity2028_H + ProjValueMaturity2030_H + ProjValueMaturity2035_H + ProjValueMaturityDana_H + ProjValueMaturityRet_H + ProjValueMaturityCash_H;
        
        if (ToYear >= FundTerm2035) {
            tempSum = ProjValueMaturityDana_H + ProjValueMaturityRet_H + ProjValueMaturitySmart_H + ProjValueMaturityVenture_H + ProjValueMaturityCash_H + ProjValueMaturityVentureGrowth_H + ProjValueMaturityVentureBlueChip_H + ProjValueMaturityVentureDana_H + ProjValueMaturityVentureManaged_H + ProjValueMaturityVentureIncome_H + ProjValueMaturityVenture6666_H + ProjValueMaturityVenture7777_H + ProjValueMaturityVenture8888_H + ProjValueMaturityVenture9999_H;//
        }
        else{
            tempSum = ProjValueMaturity2025_H + ProjValueMaturity2028_H + ProjValueMaturity2030_H + ProjValueMaturity2035_H + ProjValueMaturityDana_H + ProjValueMaturityRet_H + ProjValueMaturitySmart_H + ProjValueMaturityVenture_H + ProjValueMaturityCash_H + ProjValueMaturityVentureGrowth_H + ProjValueMaturityVentureBlueChip_H + ProjValueMaturityVentureDana_H + ProjValueMaturityVentureManaged_H + ProjValueMaturityVentureIncome_H + ProjValueMaturityVenture6666_H + ProjValueMaturityVenture7777_H + ProjValueMaturityVenture8888_H + ProjValueMaturityVenture9999_H;//
        }
        
        
        
        if ([EngOrBm isEqualToString:@"English"]) {
            QuerySQL = [NSString stringWithFormat: @"Insert INTO UL_Temp_RPUO ('SINO', 'SeqNo','col1','col2','col3','col4','col5','col6','col7','col8','col9','col10','col11','col12','col13','col14','col15','col16','col17','col18','col19','col20','col21') "
                        "VALUES ('%@','%d','%@','Projected Fund Value at end of %@ policy year ','%@','%@','%@','%@','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f')",
                        SINo, 6, @"BULL", tempAdd, @"N/A",@"N/A", @"N/A",@"N/A" ,round(ProjValueMaturityVenture_H),
                        round(ProjValueMaturityDana_H),round(ProjValueMaturityRet_H), round(ProjValueMaturitySmart_H), round(ProjValueMaturityCash_H),round(ProjValueMaturityVentureGrowth_H),round(ProjValueMaturityVentureBlueChip_H),round(ProjValueMaturityVentureDana_H),round(ProjValueMaturityVentureManaged_H),round(ProjValueMaturityVentureIncome_H),round(ProjValueMaturityVenture6666_H),round(ProjValueMaturityVenture7777_H),round(ProjValueMaturityVenture8888_H),round(ProjValueMaturityVenture9999_H),round(tempSum) ];
        }
        else{
            QuerySQL = [NSString stringWithFormat: @"Insert INTO UL_Temp_RPUO ('SINO', 'SeqNo','col1','col2','col3','col4','col5','col6','col7','col8','col9','col10','col11','col12','col13','col14','col15','col16','col17','col18','col19','col20','col21') "
                        "VALUES ('%@','%d','%@','Nilai Dana Unjuran pada akhir tahun polisi ke- %d','%@','%@','%@','%@','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f')",
                        SINo, 6, @"BULL", ToYear, @"N/A",@"N/A", @"N/A",@"N/A" ,round(ProjValueMaturityVenture_H),
                        round(ProjValueMaturityDana_H),round(ProjValueMaturityRet_H), round(ProjValueMaturitySmart_H), round(ProjValueMaturityCash_H),round(ProjValueMaturityVentureGrowth_H),round(ProjValueMaturityVentureBlueChip_H),round(ProjValueMaturityVentureDana_H),round(ProjValueMaturityVentureManaged_H),round(ProjValueMaturityVentureIncome_H),round(ProjValueMaturityVenture6666_H),round(ProjValueMaturityVenture7777_H),round(ProjValueMaturityVenture8888_H),round(ProjValueMaturityVenture9999_H),round(tempSum) ];
        }
        
        
        if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
            if (sqlite3_step(statement) == SQLITE_DONE) {
                
            }
            sqlite3_finalize(statement);
        }
        
        ///commented codes
        ///QuerySQL = [NSString stringWithFormat: @"Insert INTO UL_Temp_RPUO ('SINO', 'SeqNo','col1','col2','col3','col4','col5','col6','col7','col8','col9','col10') "
        ///"VALUES ('%@','%d','%@','Projected Fund Value at end of %@ policy year','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f')",
        ///SINo, 5, @"FLAT", tempAdd,round(ProjValueMaturity2023_M),round(ProjValueMaturity2025_M),round(ProjValueMaturity2028_M), round(ProjValueMaturity2030_M),
        ///round(ProjValueMaturity2025_M), round(ProjValueMaturityDana_M),round(ProjValueMaturityRet_M),round(ProjValueMaturityCash_M) ];
        
        
        //tempSum = ProjValueMaturity2023_M + ProjValueMaturity2025_M + ProjValueMaturity2028_M + ProjValueMaturity2030_M + ProjValueMaturity2035_M + ProjValueMaturityDana_M + ProjValueMaturityRet_M + ProjValueMaturityCash_M;
        
        if (ToYear >= FundTerm2035) {
            tempSum = ProjValueMaturityDana_M + ProjValueMaturityRet_M + ProjValueMaturitySmart_M + ProjValueMaturityVenture_M + ProjValueMaturityCash_M + ProjValueMaturityVentureGrowth_M + ProjValueMaturityVentureBlueChip_M + ProjValueMaturityVentureDana_M + ProjValueMaturityVentureManaged_M + ProjValueMaturityVentureIncome_M + ProjValueMaturityVenture6666_M + ProjValueMaturityVenture7777_M + ProjValueMaturityVenture8888_M + ProjValueMaturityVenture9999_M;//
            
        }
        else{
            tempSum = ProjValueMaturity2025_M + ProjValueMaturity2028_M + ProjValueMaturity2030_M + ProjValueMaturity2035_M + ProjValueMaturityDana_M + ProjValueMaturityRet_M + ProjValueMaturitySmart_M + ProjValueMaturityVenture_M + ProjValueMaturityCash_M + ProjValueMaturityVentureGrowth_M + ProjValueMaturityVentureBlueChip_M + ProjValueMaturityVentureDana_M + ProjValueMaturityVentureManaged_M + ProjValueMaturityVentureIncome_M + ProjValueMaturityVenture6666_M + ProjValueMaturityVenture7777_M + ProjValueMaturityVenture8888_M + ProjValueMaturityVenture9999_M;//
            
        }
        
        if (tempSum < 0.00) {
            HideRPUOPage = TRUE;
        }
        else
        {
            HideRPUOPage = FALSE;
        }
        
        if ([EngOrBm isEqualToString:@"English"]) {
            QuerySQL = [NSString stringWithFormat: @"Insert INTO UL_Temp_RPUO ('SINO', 'SeqNo','col1','col2','col3','col4','col5','col6','col7','col8','col9','col10','col11','col12','col13','col14','col15','col16','col17','col18','col19','col20','col21') "
                        "VALUES ('%@','%d','%@','Projected Fund Value at end of %@ policy year','%@','%@','%@','%@','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f')",
                        SINo, 6, @"FLAT", tempAdd, @"N/A", @"N/A", @"N/A",@"N/A",round(ProjValueMaturityVenture_M),
                        round(ProjValueMaturityDana_M),round(ProjValueMaturityRet_M),round(ProjValueMaturitySmart_M), round(ProjValueMaturityCash_M),round(ProjValueMaturityVentureGrowth_M),round(ProjValueMaturityVentureBlueChip_M),round(ProjValueMaturityVentureDana_M),round(ProjValueMaturityVentureManaged_M),round(ProjValueMaturityVentureIncome_M),round(ProjValueMaturityVenture6666_M),round(ProjValueMaturityVenture7777_M),round(ProjValueMaturityVenture8888_M),round(ProjValueMaturityVenture9999_M),round(tempSum) ];
        }
        else{
            QuerySQL = [NSString stringWithFormat: @"Insert INTO UL_Temp_RPUO ('SINO', 'SeqNo','col1','col2','col3','col4','col5','col6','col7','col8','col9','col10','col11','col12','col13','col14','col15','col16','col17','col18','col19','col20','col21') "
                        "VALUES ('%@','%d','%@','Nilai Dana Unjuran pada akhir tahun polisi ke- %d','%@','%@','%@','%@','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f')",
                        SINo, 6, @"FLAT", ToYear, @"N/A", @"N/A", @"N/A",@"N/A",round(ProjValueMaturityVenture_M),
                        round(ProjValueMaturityDana_M),round(ProjValueMaturityRet_M),round(ProjValueMaturitySmart_M), round(ProjValueMaturityCash_M),round(ProjValueMaturityVentureGrowth_M),round(ProjValueMaturityVentureBlueChip_M),round(ProjValueMaturityVentureDana_M),round(ProjValueMaturityVentureManaged_M),round(ProjValueMaturityVentureIncome_M),round(ProjValueMaturityVenture6666_M),round(ProjValueMaturityVenture7777_M),round(ProjValueMaturityVenture8888_M),round(ProjValueMaturityVenture9999_M),round(tempSum) ];
        }
        
        if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
            if (sqlite3_step(statement) == SQLITE_DONE) {
                
            }
            sqlite3_finalize(statement);
        }
        
        //tempSum = ProjValueMaturity2023_L + ProjValueMaturity2025_L + ProjValueMaturity2028_L + ProjValueMaturity2030_L + ProjValueMaturity2035_L + ProjValueMaturityDana_L + ProjValueMaturityRet_L + ProjValueMaturityCash_L;
        
        if (ToYear >= FundTerm2035) {
            tempSum = ProjValueMaturityDana_L + ProjValueMaturityRet_L + ProjValueMaturitySmart_L + ProjValueMaturityVenture_L  + ProjValueMaturityCash_L + ProjValueMaturityVentureGrowth_L + ProjValueMaturityVentureBlueChip_L + ProjValueMaturityVentureDana_L + ProjValueMaturityVentureManaged_L + ProjValueMaturityVentureIncome_L + ProjValueMaturityVenture6666_L + ProjValueMaturityVenture7777_L + ProjValueMaturityVenture8888_L + ProjValueMaturityVenture9999_L;//
        }
        else{
            tempSum = ProjValueMaturity2025_L + ProjValueMaturity2028_L + ProjValueMaturity2030_L + ProjValueMaturity2035_L + ProjValueMaturityDana_L + ProjValueMaturityRet_L + ProjValueMaturitySmart_L + ProjValueMaturityVenture_L + ProjValueMaturityCash_L + ProjValueMaturityVentureGrowth_L + ProjValueMaturityVentureBlueChip_L + ProjValueMaturityVentureDana_L + ProjValueMaturityVentureManaged_L + ProjValueMaturityVentureIncome_L + ProjValueMaturityVenture6666_L + ProjValueMaturityVenture7777_L + ProjValueMaturityVenture8888_L + ProjValueMaturityVenture9999_L;//
            
        }
        
        if ([EngOrBm isEqualToString:@"English"]) {
            QuerySQL = [NSString stringWithFormat: @"Insert INTO UL_Temp_RPUO ('SINO', 'SeqNo','col1','col2','col3','col4','col5','col6','col7','col8','col9','col10','col11','col12','col13','col14','col15','col16','col17','col18','col19','col20','col21') "
                        "VALUES ('%@','%d','%@','Projected Fund Value at end of %@ policy year','%@','%@','%@','%@','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f')",
                        SINo, 6, @"BEAR", tempAdd, @"N/A", @"N/A", @"N/A", @"N/A",round(ProjValueMaturityVenture_L),
                        round(ProjValueMaturityDana_L),round(ProjValueMaturityRet_L),round(ProjValueMaturitySmart_L),round(ProjValueMaturityCash_L),round(ProjValueMaturityVentureGrowth_L),round(ProjValueMaturityVentureBlueChip_L),round(ProjValueMaturityVentureDana_L),round(ProjValueMaturityVentureManaged_L),round(ProjValueMaturityVentureIncome_L),round(ProjValueMaturityVenture6666_L),round(ProjValueMaturityVenture7777_L),round(ProjValueMaturityVenture8888_L),round(ProjValueMaturityVenture9999_L),round(tempSum) ];
        }
        else{
            QuerySQL = [NSString stringWithFormat: @"Insert INTO UL_Temp_RPUO ('SINO', 'SeqNo','col1','col2','col3','col4','col5','col6','col7','col8','col9','col10','col11','col12','col13','col14','col15','col16','col17','col18','col19','col20','col21') "
                        "VALUES ('%@','%d','%@','Nilai Dana Unjuran pada akhir tahun polisi ke- %d','%@','%@','%@','%@','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f','%.0f')",
                        SINo, 6, @"BEAR", ToYear, @"N/A", @"N/A", @"N/A", @"N/A",round(ProjValueMaturityVenture_L),
                        round(ProjValueMaturityDana_L),round(ProjValueMaturityRet_L),round(ProjValueMaturitySmart_L),round(ProjValueMaturityCash_L),round(ProjValueMaturityVentureGrowth_L),round(ProjValueMaturityVentureBlueChip_L),round(ProjValueMaturityVentureDana_L),round(ProjValueMaturityVentureManaged_L),round(ProjValueMaturityVentureIncome_L),round(ProjValueMaturityVenture6666_L),round(ProjValueMaturityVenture7777_L),round(ProjValueMaturityVenture8888_L),round(ProjValueMaturityVenture9999_L),round(tempSum) ];
        }
        
        
        
        if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
            if (sqlite3_step(statement) == SQLITE_DONE) {
                
            }
            sqlite3_finalize(statement);
        }
        
        
        // ---------------
        
        NSString *templabel;
        if ([EngOrBm isEqualToString:@"English"]) {
            templabel = @"Basic Premium";
        }
        else
        {
            templabel = @"Premium Asas";
        }
        
        QuerySQL = [NSString stringWithFormat: @"Insert INTO UL_Temp_RPUO ('SINO', 'SeqNo','col1','col2','col3','col4','col5') "
                    "VALUES ('%@','%d','%@','%@','%@','%@','%.2f')",
                    SINo, 7, @"Details", templabel, strBasicPremium, RPUOYear, ([strBasicPremium doubleValue] * [RPUOYear doubleValue])    ];
        
        if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
            if (sqlite3_step(statement) == SQLITE_DONE) {
                
            }
            sqlite3_finalize(statement);
        }
        
        if ([strRTUPAmount doubleValue] > 0) {
            int tempRTUOTerm = ([strRTUPFor intValue] + 1) > 30 ? (30 - [strRTUPFrom intValue]) : ([strRTUPFor intValue] + 1);
            if ([EngOrBm isEqualToString:@"English"]) {
                templabel = @"RTU (Selected by User)";
            }
            else
            {
                templabel = @"RTU (Dipilih oleh pengguna)";
            }
            
            QuerySQL = [NSString stringWithFormat: @"Insert INTO UL_Temp_RPUO ('SINO', 'SeqNo','col1','col2','col3','col4','col5') "
                        "VALUES ('%@','%d','%@','%@','%@','%d','%.2f')",
                        SINo, 7, @"Details", templabel, strRTUPAmount,  tempRTUOTerm,
                        ([strRTUPAmount doubleValue] * tempRTUOTerm)];
            
            if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
                if (sqlite3_step(statement) == SQLITE_DONE) {
                    
                }
                sqlite3_finalize(statement);
            }
        }
        
        if (ECAR60Exist == TRUE && [ECAR60ReinvestGYI isEqualToString:@"Yes"]) {
            if ([EngOrBm isEqualToString:@"English"]) {
                templabel = @"EverCash 60 Rider (GYI Reinvested)";
            }
            else
            {
                templabel = @"EverCash 60 Rider (GMI Dilaburkan Semula)";
            }
            
            double AnnualizedValue = [self AnnualisedValue2:[ECAR60Premium doubleValue] ];
            
            QuerySQL = [NSString stringWithFormat: @"Insert INTO UL_Temp_RPUO ('SINO', 'SeqNo','col1','col2','col3','col4','col5') "
                        "VALUES ('%@','%d','%@','%@','%.2f','%d','%.2f')",
                        SINo, 7, @"Details", templabel, AnnualizedValue, MIN([ECAR60PaymentTerm intValue], 30) ,
                        ( AnnualizedValue * MIN([ECAR60PaymentTerm doubleValue], 30) )];
            
            if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
                if (sqlite3_step(statement) == SQLITE_DONE) {
                    
                }
                sqlite3_finalize(statement);
            }
        }
        
        
        if (ECAR6Exist == TRUE && [ECAR6ReinvestGYI isEqualToString:@"Yes"]) {
            if ([EngOrBm isEqualToString:@"English"]) {
                templabel = @"EverCash Rider (GYI Reinvested)";
            }
            else
            {
                templabel = @"EverCash Rider (GYI Dilaburkan Semula)";
            }
            
            double AnnualizedValue = [self AnnualisedValue2:[ECAR6Premium doubleValue] ];
            
            QuerySQL = [NSString stringWithFormat: @"Insert INTO UL_Temp_RPUO ('SINO', 'SeqNo','col1','col2','col3','col4','col5') "
                        "VALUES ('%@','%d','%@','%@','%.2f','%d','%.2f')",
                        SINo, 7, @"Details", templabel, AnnualizedValue , MIN([ECAR6PaymentTerm intValue], 30) ,
                        (AnnualizedValue * MIN([ECAR6PaymentTerm doubleValue], 30) )];
            
            if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
                if (sqlite3_step(statement) == SQLITE_DONE) {
                    
                }
                sqlite3_finalize(statement);
            }
        }
        
        if (ECAR1Exist == TRUE && [ECAR1ReinvestGYI isEqualToString:@"Yes"]) {
            if ([EngOrBm isEqualToString:@"English"]) {
                templabel = @"EverCash 1 Rider (GYI Reinvested)";
            }
            else
            {
                templabel = @"EverCash Rider (GYI Dilaburkan Semula)";
            }
            
            double AnnualizedValue = [self AnnualisedValue2:[ECAR1Premium doubleValue] ];
            
            QuerySQL = [NSString stringWithFormat: @"Insert INTO UL_Temp_RPUO ('SINO', 'SeqNo','col1','col2','col3','col4','col5') "
                        "VALUES ('%@','%d','%@','%@','%.2f','%d','%.2f')",
                        SINo, 7, @"Details", templabel, AnnualizedValue, MIN([ECAR1PaymentTerm intValue] , 30) ,
                        (AnnualizedValue * MIN([ECAR1PaymentTerm doubleValue], 30) )];
            
            if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
                if (sqlite3_step(statement) == SQLITE_DONE) {
                    
                }
                sqlite3_finalize(statement);
            }
        }
        
        if (RegWithdrawalAmount > 0) {
            int tempMax = 0;
            
            if ([getPlanCode isEqualToString:@"UV"]) {
                tempMax = 30;
            }
            else
            {
                tempMax = [strCovPeriod intValue];
            }
            
            int WithdrawalnRTUOPeriod = [self WithdrawalnRTUOPeriod:RegWithdrawalIntYear andWithdrawalStartYear:RegWithdrawalStartYear andWithdrawalEndYear:MIN(RegWithdrawalEndYear, tempMax)];
            
            if ([EngOrBm isEqualToString:@"English"]) {
                templabel = @"Regular Withdrawal";
            }
            else
            {
                templabel = @"Pengeluaran Berkala";
            }
            
            QuerySQL = [NSString stringWithFormat: @"Insert INTO UL_Temp_RPUO ('SINO', 'SeqNo','col1','col2','col3','col4','col5') "
                        "VALUES ('%@','%d','%@','%@','%f','%d','%.2f')",
                        SINo, 7, @"Details", templabel,  RegWithdrawalAmount, WithdrawalnRTUOPeriod  , (RegWithdrawalAmount * WithdrawalnRTUOPeriod)];
            
            if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
                if (sqlite3_step(statement) == SQLITE_DONE) {
                    
                }
                sqlite3_finalize(statement);
            }
        }
        
        sqlite3_close(contactDB);
    }
}

-(double)AnnualisedValue :(double)aaValue {
    NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
    //[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
    [formatter setMaximumFractionDigits:2];
    [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
    NSNumber *nnn;
    
    if ([strBumpMode isEqualToString:@"A"]) {
        nnn = [NSNumber numberWithDouble:aaValue];
        return [[formatter stringFromNumber:nnn] doubleValue] ;
    }
    else if ([strBumpMode isEqualToString:@"S"]) {
        nnn = [NSNumber numberWithDouble:aaValue/Bump_SemiAnnual];
        return [[formatter stringFromNumber:nnn] doubleValue] ;
    }
    else if ([strBumpMode isEqualToString:@"Q"]) {
        nnn = [NSNumber numberWithDouble:aaValue/Bump_Quarter];
        return [[formatter stringFromNumber:nnn] doubleValue] ;
    }
    else {
        nnn = [NSNumber numberWithDouble:aaValue/Bump_Month];
        return [[formatter stringFromNumber:nnn] doubleValue] ;
    }
}

-(double)AnnualisedValue2 :(double)aaValue {
    NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
    //[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
    [formatter setMaximumFractionDigits:2];
    [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
    NSNumber *nnn;
    
    if ([strBumpMode isEqualToString:@"A"]) {
        nnn = [NSNumber numberWithDouble:aaValue];
        return [[formatter stringFromNumber:nnn] doubleValue] ;
    }
    else if ([strBumpMode isEqualToString:@"S"]) {
        nnn = [NSNumber numberWithDouble:aaValue * 2];
        return [[formatter stringFromNumber:nnn] doubleValue] ;
    }
    else if ([strBumpMode isEqualToString:@"Q"]) {
        nnn = [NSNumber numberWithDouble:aaValue * 4];
        return [[formatter stringFromNumber:nnn] doubleValue] ;
    }
    else {
        nnn = [NSNumber numberWithDouble:aaValue * 12];
        return [[formatter stringFromNumber:nnn] doubleValue] ;
    }
}

-(double)WithdrawalnRTUOPeriod :(int)aaInterval andWithdrawalStartYear :(int)aaWithdrawalStartYear andWithdrawalEndYear :(int)aaWithdrawalEndYear {
    int tempCount = 0;

    
    for (int i = aaWithdrawalStartYear; i <= aaWithdrawalEndYear ; i = i + aaInterval) {
        tempCount++;
    }
    
    return tempCount;
}

-(BOOL)WithdrawalYear :(int)aaInterval andWithdrawalStartYear :(int)aaWithdrawalStartYear andWithdrawalEndYear :(int)aaWithdrawalEndYear andPolicyYear :(int)aaPolicyYear {
    BOOL temp = FALSE;
    
    for (int i = aaWithdrawalStartYear; i <= aaWithdrawalEndYear; i = i + aaInterval) {
        if (aaPolicyYear == i) {
            temp = TRUE;
            break;
        }
    }
    
    return temp;
}


-(void)ECAR60_RPU :(double)dTotalCash_FundAllo AndPrev:(double)dTotalCashPrevYearFundAllo AndPolYear :(int)aaPolicyYear{
	if(ECAR60Exist == TRUE){
		if (Age + aaPolicyYear >= 60 && [ECAR60ReinvestGYI isEqualToString:@"YES"]) {
			if (aaPolicyYear >= FundTerm2023 && aaPolicyYear <= FundTermPrev2025) {
				if (dTotalCash_FundAllo == 100) {
					
				}
				else{
				}
			}
		}
	}
}

-(double)Calc_RegularWithdrawal_RPU :(double)IndividualFundValue TotalEntireFundValue :(double)aaTotalEntireFundValue CashFundBalance :(double)aaCashFundBalance{
    return IndividualFundValue - MAX(0, (-aaCashFundBalance/aaTotalEntireFundValue) * IndividualFundValue);
}


#pragma mark - Surrender Value Calculation for basic
-(void)SurrenderValue :(int)aaPolicyYear andMonth:(int)aaMonth andLevel:(int)aaLevel{
	if (aaPolicyYear == YearDiff2023 || aaPolicyYear == YearDiff2025 || aaPolicyYear == YearDiff2028 || aaPolicyYear == YearDiff2030 ||
		aaPolicyYear == YearDiff2035) {
		//month
		if (aaLevel == 1) {
			HSurrenderValue = [self ReturnHSurrenderValue:aaPolicyYear andYearOrMonth:@"M" andMonth:aaMonth ];
			
		}
		else if (aaLevel == 2){
			MSurrenderValue = [self ReturnMSurrenderValue:aaPolicyYear andYearOrMonth:@"M" andMonth:aaMonth ];
			
		}
		else if (aaLevel == 3){
			LSurrenderValue = [self ReturnLSurrenderValue:aaPolicyYear andYearOrMonth:@"M" andMonth:aaMonth ];
			
		}
		else{
			
		}
		
		if (UnitizeRiderCode.count > 0) {
			if (aaLevel == 1) {
				HRiderSurrenderValue = [self ReturnRiderHSurrenderValue:aaPolicyYear andYearOrMonth:@"M" andMonth:aaMonth ];;
			}
			else if (aaLevel == 2){
				MRiderSurrenderValue = [self ReturnRiderMSurrenderValue:aaPolicyYear andYearOrMonth:@"M" andMonth:aaMonth ];
			}
			else if (aaLevel == 3){
				LRiderSurrenderValue = [self ReturnRiderLSurrenderValue:aaPolicyYear andYearOrMonth:@"M" andMonth:aaMonth ];
			}
		}
		else
		{
			HRiderSurrenderValue = 0;
			MRiderSurrenderValue = 0;
			LRiderSurrenderValue = 0;
		}
		
		
		
	} else {
		//year
		HSurrenderValue = [self ReturnHSurrenderValue:aaPolicyYear andYearOrMonth:@"Y" andMonth:0 ];
		MSurrenderValue = [self ReturnMSurrenderValue:aaPolicyYear andYearOrMonth:@"Y" andMonth:0 ];
		LSurrenderValue = [self ReturnLSurrenderValue:aaPolicyYear andYearOrMonth:@"Y" andMonth:0 ];
		if (UnitizeRiderCode.count > 0) {
			HRiderSurrenderValue = [self ReturnRiderHSurrenderValue:aaPolicyYear andYearOrMonth:@"Y" andMonth:0 ];
			MRiderSurrenderValue = [self ReturnRiderMSurrenderValue:aaPolicyYear andYearOrMonth:@"Y" andMonth:0 ];
			LRiderSurrenderValue = [self ReturnRiderLSurrenderValue:aaPolicyYear andYearOrMonth:@"Y" andMonth:0 ];
		}
		else
		{
			HRiderSurrenderValue = 0;
			MRiderSurrenderValue = 0;
			LRiderSurrenderValue = 0;
		}
		
	}
	/*
	 if (aaPolicyYear == YearDiff2035) {
	 //HSurrenderValue = HSurrenderValue - MonthFundMaturityValue2035_Bull;
	 MSurrenderValue = MSurrenderValue - MonthFundMaturityValue2035_Flat;
	 }
	 else if (aaPolicyYear == YearDiff2030){
	 HSurrenderValue = HSurrenderValue - MonthFundMaturityValue2030_Bull;
	 MSurrenderValue = MSurrenderValue - MonthFundMaturityValue2030_Flat;
	 }
	 else if (aaPolicyYear == YearDiff2028){
	 HSurrenderValue = HSurrenderValue - MonthFundMaturityValue2028_Bull;
	 MSurrenderValue = MSurrenderValue - MonthFundMaturityValue2028_Flat;
	 }
	 else if (aaPolicyYear == YearDiff2025){
	 HSurrenderValue = HSurrenderValue - MonthFundMaturityValue2025_Bull;
	 MSurrenderValue = MSurrenderValue - MonthFundMaturityValue2025_Flat;
	 }
	 else if (aaPolicyYear == YearDiff2023){
	 HSurrenderValue = HSurrenderValue - MonthFundMaturityValue2023_Bull;
	 MSurrenderValue = MSurrenderValue - MonthFundMaturityValue2023_Flat;
	 }
	 else{
	 HSurrenderValue = HSurrenderValue - 0;
	 MSurrenderValue = MSurrenderValue - 0;
	 }
	 */
	
	
}

-(double)ReturnHSurrenderValue :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMonth:(int)aaMonth {
	//NSLog(@"%f", [self ReturnVUCashValueHigh:aaPolicyYear]);
	
	if (aaPolicyYear == YearDiff2035 || aaPolicyYear == YearDiff2030 || aaPolicyYear == YearDiff2028
		|| aaPolicyYear == YearDiff2025 || aaPolicyYear == YearDiff2023) {
		
		VUCashValueHigh = [self ReturnVUCashValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andMonth:aaMonth];
		VURetValueHigh = [self ReturnVURetValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:aaMonth];
		VUDanaValueHigh = [self ReturnVUDanaValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:aaMonth];
        VUSmartValueHigh = [self ReturnVUSmartValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:aaMonth];
		VUVentureValueHigh = [self ReturnVUVentureValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:aaMonth];
        VUVentureGrowthValueHigh = [self ReturnVUVentureGrowthValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:aaMonth];
        VUVentureBlueChipValueHigh = [self ReturnVUVentureBlueChipValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:aaMonth];
        VUVentureDanaValueHigh = [self ReturnVUVentureDanaValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:aaMonth];
        VUVentureManagedValueHigh = [self ReturnVUVentureManagedValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:aaMonth];
        VUVentureIncomeValueHigh = [self ReturnVUVentureIncomeValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:aaMonth];
		VU2023ValueHigh = [self ReturnVU2023ValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:aaMonth];
		VU2025ValueHigh = [self ReturnVU2025ValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:aaMonth];
		VU2028ValueHigh = [self ReturnVU2028ValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:aaMonth];
		VU2030ValueHigh = [self ReturnVU2030ValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:aaMonth];
		VU2035ValueHigh = [self ReturnVU2035ValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:aaMonth];
		
		
	}
	else{
		VUCashValueHigh = [self ReturnVUCashValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andMonth:0];
		VURetValueHigh = [self ReturnVURetValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:0];
		VUDanaValueHigh = [self ReturnVUDanaValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:0];
        VUSmartValueHigh = [self ReturnVUSmartValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:0];
		VUVentureValueHigh = [self ReturnVUVentureValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:0];
        VUVentureGrowthValueHigh = [self ReturnVUVentureGrowthValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:0];
        VUVentureBlueChipValueHigh = [self ReturnVUVentureBlueChipValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:0];
        VUVentureDanaValueHigh = [self ReturnVUVentureDanaValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:0];
        VUVentureManagedValueHigh = [self ReturnVUVentureManagedValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:0];
        VUVentureIncomeValueHigh = [self ReturnVUVentureIncomeValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:0];
		VU2023ValueHigh = [self ReturnVU2023ValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:0];
		VU2025ValueHigh = [self ReturnVU2025ValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:0];
		VU2028ValueHigh = [self ReturnVU2028ValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:0];
		VU2030ValueHigh = [self ReturnVU2030ValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:0];
		VU2035ValueHigh = [self ReturnVU2035ValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:0];
	}
	
	
	
	if (VUCashValueHigh == 1 && VU2023ValueHigh == 0 && VU2025ValueHigh == 0 && VU2028ValueHigh == 0 &&
		VU2030ValueHigh == 0 && VU2035ValueHigh == 0 && VURetValueHigh == 0 && VUDanaValueHigh == 0 && VUSmartValueHigh == 0 && VUVentureValueHigh == 0 &&
        VUVentureGrowthValueHigh == 0 && VUVentureBlueChipValueHigh == 0 && VUVentureDanaValueHigh == 0 && VUVentureManagedValueHigh == 0 && VUVentureIncomeValueHigh == 0) {
		return 0;
	} else {
		return VU2023ValueHigh + VU2025ValueHigh + VU2028ValueHigh + VU2030ValueHigh + VU2035ValueHigh +
		VUCashValueHigh + VURetValueHigh + VUDanaValueHigh + VUSmartValueHigh + VUVentureValueHigh +
        VUVentureGrowthValueHigh + VUVentureBlueChipValueHigh + VUVentureDanaValueHigh + VUVentureManagedValueHigh + VUVentureIncomeValueHigh;
	}
	
}





-(double)ReturnMSurrenderValue :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMonth:(int)aaMonth {
	//NSLog(@"%f", [self ReturnVUCashValueHigh:aaPolicyYear]);
	
	if (aaPolicyYear == YearDiff2035 || aaPolicyYear == YearDiff2030 || aaPolicyYear == YearDiff2028
		|| aaPolicyYear == YearDiff2025 || aaPolicyYear == YearDiff2023) {
		
		VUCashValueMedian = [self ReturnVUCashValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andMonth:aaMonth];
		VURetValueMedian = [self ReturnVURetValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:aaMonth];
		VUDanaValueMedian = [self ReturnVUDanaValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:aaMonth];
        VUSmartValueMedian = [self ReturnVUSmartValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:aaMonth];
		VUVentureValueMedian = [self ReturnVUVentureValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:aaMonth];
        VUVentureGrowthValueMedian = [self ReturnVUVentureGrowthValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:aaMonth];
        VUVentureBlueChipValueMedian = [self ReturnVUVentureBlueChipValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:aaMonth];
        VUVentureDanaValueMedian = [self ReturnVUVentureDanaValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:aaMonth];
        VUVentureManagedValueMedian = [self ReturnVUVentureManagedValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:aaMonth];
        VUVentureIncomeValueMedian = [self ReturnVUVentureIncomeValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:aaMonth];
		VU2023ValueMedian = [self ReturnVU2023ValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:aaMonth];
		VU2025ValueMedian = [self ReturnVU2025ValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:aaMonth];
		VU2028ValueMedian = [self ReturnVU2028ValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:aaMonth];
		VU2030ValueMedian = [self ReturnVU2030ValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:aaMonth];
		VU2035ValueMedian = [self ReturnVU2035ValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:aaMonth];
		
	}
	else{
		VUCashValueMedian = [self ReturnVUCashValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andMonth:0];
		VURetValueMedian = [self ReturnVURetValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:0];
		VUDanaValueMedian = [self ReturnVUDanaValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:0];
        VUSmartValueMedian = [self ReturnVUSmartValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:0];
		VUVentureValueMedian = [self ReturnVUVentureValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:0];
        VUVentureGrowthValueMedian = [self ReturnVUVentureGrowthValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:0];
        VUVentureBlueChipValueMedian = [self ReturnVUVentureBlueChipValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:0];
        VUVentureDanaValueMedian = [self ReturnVUVentureDanaValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:0];
        VUVentureManagedValueMedian = [self ReturnVUVentureManagedValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:0];
        VUVentureIncomeValueMedian = [self ReturnVUVentureIncomeValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:0];
		VU2023ValueMedian = [self ReturnVU2023ValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:0];
		VU2025ValueMedian = [self ReturnVU2025ValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:0];
		VU2028ValueMedian = [self ReturnVU2028ValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:0];
		VU2030ValueMedian = [self ReturnVU2030ValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:0];
		VU2035ValueMedian = [self ReturnVU2035ValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:0];
		
	}
	
	
	
	if (VUCashValueMedian == 1 && VU2023ValueMedian == 0 && VU2025ValueMedian == 0 && VU2028ValueMedian == 0 &&
		VU2030ValueMedian == 0 && VU2035ValueMedian == 0 && VURetValueMedian == 0 && VUDanaValueMedian == 0 && VUSmartValueMedian == 0 && VUVentureValueMedian == 0 &&
        VUVentureGrowthValueMedian == 0 && VUVentureBlueChipValueMedian == 0 && VUVentureDanaValueMedian == 0 && VUVentureManagedValueMedian == 0 && VUVentureIncomeValueMedian == 0) {
		return 0;
	} else {
		//NSLog(@"%f,%f,%f,%f,%f,%f,%f", VUCashValueMedian,VURetValueMedian,VU2023ValueMedian, VU2025ValueMedian,VU2028ValueMedian, VU2030ValueMedian, VU2035ValueMedian);
		return VU2023ValueMedian + VU2025ValueMedian + VU2028ValueMedian + VU2030ValueMedian + VU2035ValueMedian + VUCashValueMedian + VURetValueMedian + VUDanaValueMedian + VUSmartValueMedian + VUVentureValueMedian + VUVentureGrowthValueMedian + VUVentureBlueChipValueMedian + VUVentureDanaValueMedian + VUVentureManagedValueMedian + VUVentureIncomeValueMedian;
		
	}
	
}

-(double)ReturnLSurrenderValue :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMonth:(int)aaMonth {
	//NSLog(@"%f", [self ReturnVUCashValueHigh:aaPolicyYear]);
	
	if (aaPolicyYear == YearDiff2035 || aaPolicyYear == YearDiff2030 || aaPolicyYear == YearDiff2028
		|| aaPolicyYear == YearDiff2025 || aaPolicyYear == YearDiff2023) {
		
		VUCashValueLow = [self ReturnVUCashValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andMonth:aaMonth];
		VURetValueLow = [self ReturnVURetValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:aaMonth];
		VUDanaValueLow = [self ReturnVUDanaValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:aaMonth];
        VUSmartValueLow = [self ReturnVUSmartValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:aaMonth];
		VUVentureValueLow = [self ReturnVUVentureValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:aaMonth];
        VUVentureGrowthValueLow = [self ReturnVUVentureGrowthValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:aaMonth];
        VUVentureBlueChipValueLow = [self ReturnVUVentureBlueChipValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:aaMonth];
        VUVentureDanaValueLow = [self ReturnVUVentureDanaValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:aaMonth];
        VUVentureManagedValueLow = [self ReturnVUVentureManagedValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:aaMonth];
        VUVentureIncomeValueLow = [self ReturnVUVentureIncomeValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:aaMonth];
		VU2023ValueLow = [self ReturnVU2023ValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:aaMonth];
		VU2025ValueLow = [self ReturnVU2025ValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:aaMonth];
		VU2028ValueLow = [self ReturnVU2028ValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:aaMonth];
		VU2030ValueLow = [self ReturnVU2030ValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:aaMonth];
		VU2035ValueLow = [self ReturnVU2035ValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:aaMonth];
		
		
	}
	else{
		VUCashValueLow = [self ReturnVUCashValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andMonth:0];
		VURetValueLow = [self ReturnVURetValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:0];
		VUDanaValueLow = [self ReturnVUDanaValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:0];
        VUSmartValueLow = [self ReturnVUSmartValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:0];
		VUVentureValueLow = [self ReturnVUVentureValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:0];
        VUVentureGrowthValueLow = [self ReturnVUVentureGrowthValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:0];
        VUVentureBlueChipValueLow = [self ReturnVUVentureBlueChipValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:0];
        VUVentureDanaValueLow = [self ReturnVUVentureDanaValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:0];
        VUVentureManagedValueLow = [self ReturnVUVentureManagedValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:0];
        VUVentureIncomeValueLow = [self ReturnVUVentureIncomeValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:0];
		VU2023ValueLow = [self ReturnVU2023ValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:0];
		VU2025ValueLow = [self ReturnVU2025ValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:0];
		VU2028ValueLow = [self ReturnVU2028ValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:0];
		VU2030ValueLow = [self ReturnVU2030ValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:0];
		VU2035ValueLow = [self ReturnVU2035ValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:0];
		
	}
	
	
	
	if (VUCashValueLow == 1 && VU2023ValueLow == 0 && VU2025ValueLow == 0 && VU2028ValueLow == 0 &&
		VU2030ValueLow == 0 && VU2035ValueLow == 0 && VURetValueLow == 0 && VUDanaValueLow == 0 && VUSmartValueLow == 0 && VUVentureValueLow == 0 &&
        VUVentureGrowthValueLow == 0 && VUVentureBlueChipValueLow == 0 && VUVentureDanaValueLow == 0 && VUVentureManagedValueLow == 0 && VUVentureIncomeValueLow == 0) {
		return 0;
	} else {
		return VU2023ValueLow + VU2025ValueLow + VU2028ValueLow + VU2030ValueLow + VU2035ValueLow + VUCashValueLow + VURetValueLow + VUDanaValueLow + VUSmartValueLow + VUVentureValueLow +
                VUVentureGrowthValueLow + VUVentureBlueChipValueLow + VUVentureDanaValueLow + VUVentureManagedValueLow + VUVentureIncomeValueLow;
		
	}
	
}

#pragma mark - Surrender Value Calculation for Rider

-(double)ReturnRiderHSurrenderValue :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMonth:(int)aaMonth {
	//NSLog(@"%f", [self ReturnVUCashValueHigh:aaPolicyYear]);
	
	if (aaPolicyYear == YearDiff2035 || aaPolicyYear == YearDiff2030 || aaPolicyYear == YearDiff2028
		|| aaPolicyYear == YearDiff2025 || aaPolicyYear == YearDiff2023) {
		
		RiderVUCashValueHigh = [self ReturnRiderVUCashValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andMonth:aaMonth];
		RiderVURetValueHigh = [self ReturnRiderVURetValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:aaMonth];
		RiderVUDanaValueHigh = [self ReturnRiderVUDanaValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:aaMonth];
        RiderVUSmartValueHigh = [self ReturnRiderVUSmartValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:aaMonth];
		RiderVUVentureValueHigh = [self ReturnRiderVUVentureValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:aaMonth];
        RiderVUVentureGrowthValueHigh = [self ReturnRiderVUVentureGrowthValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:aaMonth];
		RiderVUVentureBlueChipValueHigh = [self ReturnRiderVUVentureBlueChipValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:aaMonth];
		RiderVUVentureDanaValueHigh = [self ReturnRiderVUVentureDanaValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:aaMonth];
        RiderVUVentureManagedValueHigh = [self ReturnRiderVUVentureManagedValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:aaMonth];
		RiderVUVentureIncomeValueHigh = [self ReturnRiderVUVentureIncomeValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:aaMonth];
		RiderVU2023ValueHigh = [self ReturnRiderVU2023ValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:aaMonth];
		RiderVU2025ValueHigh = [self ReturnRiderVU2025ValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:aaMonth];
		RiderVU2028ValueHigh = [self ReturnRiderVU2028ValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:aaMonth];
		RiderVU2030ValueHigh = [self ReturnRiderVU2030ValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:aaMonth];
		RiderVU2035ValueHigh = [self ReturnRiderVU2035ValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:aaMonth];
		
		
		/*
		 VU2023ValueHigh = [self ReturnVU2023ValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2];
		 VU2025ValueHigh = [self ReturnVU2025ValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2];
		 VU2028ValueHigh = [self ReturnVU2028ValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2];
		 VU2030ValueHigh = [self ReturnVU2030ValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2];
		 VU2035ValueHigh = [self ReturnVU2035ValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2];
		 VUCashValueHigh = [self ReturnVUCashValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth];
		 VURetValueHigh = [self ReturnVURetValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2];
		 */
		
	}
	else{
		RiderVUCashValueHigh = [self ReturnRiderVUCashValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andMonth:0];
		RiderVURetValueHigh = [self ReturnRiderVURetValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:0];
		RiderVUDanaValueHigh = [self ReturnRiderVUDanaValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:0];
        RiderVUSmartValueHigh = [self ReturnRiderVUSmartValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:0];
		RiderVUVentureValueHigh = [self ReturnRiderVUVentureValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:0];
        RiderVUVentureGrowthValueHigh = [self ReturnRiderVUVentureGrowthValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:0];
		RiderVUVentureBlueChipValueHigh = [self ReturnRiderVUVentureBlueChipValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:0];
		RiderVUVentureDanaValueHigh = [self ReturnRiderVUVentureDanaValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:0];
        RiderVUVentureManagedValueHigh = [self ReturnRiderVUVentureManagedValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:0];
		RiderVUVentureIncomeValueHigh = [self ReturnRiderVUVentureIncomeValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:0];
		RiderVU2023ValueHigh = [self ReturnRiderVU2023ValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:0];
		RiderVU2025ValueHigh = [self ReturnRiderVU2025ValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:0];
		RiderVU2028ValueHigh = [self ReturnRiderVU2028ValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:0];
		RiderVU2030ValueHigh = [self ReturnRiderVU2030ValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:0];
		RiderVU2035ValueHigh = [self ReturnRiderVU2035ValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:0];
	}
	
	
	
	if (RiderVUCashValueHigh == 1 && RiderVU2023ValueHigh == 0 && RiderVU2025ValueHigh == 0 && RiderVU2028ValueHigh == 0 &&
		RiderVU2030ValueHigh == 0 && RiderVU2035ValueHigh == 0 && RiderVURetValueHigh == 0 && RiderVUDanaValueHigh == 0 && RiderVUSmartValueHigh == 0 && RiderVUVentureValueHigh == 0 &&
        RiderVUVentureGrowthValueHigh == 0 && RiderVUVentureBlueChipValueHigh == 0 && RiderVUVentureDanaValueHigh == 0 && RiderVUVentureManagedValueHigh == 0 && RiderVUVentureIncomeValueHigh == 0) {
		return 0;
	} else {
		return RiderVU2023ValueHigh + RiderVU2025ValueHigh + RiderVU2028ValueHigh + RiderVU2030ValueHigh + RiderVU2035ValueHigh +
		RiderVUCashValueHigh + RiderVURetValueHigh + RiderVUDanaValueHigh + RiderVUSmartValueHigh + RiderVUVentureValueHigh +
        RiderVUVentureGrowthValueHigh + RiderVUVentureBlueChipValueHigh + RiderVUVentureDanaValueHigh + RiderVUVentureManagedValueHigh + RiderVUVentureIncomeValueHigh;
	}
	
}





-(double)ReturnRiderMSurrenderValue :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMonth:(int)aaMonth {
	//NSLog(@"%f", [self ReturnVUCashValueHigh:aaPolicyYear]);
	
	if (aaPolicyYear == YearDiff2035 || aaPolicyYear == YearDiff2030 || aaPolicyYear == YearDiff2028
		|| aaPolicyYear == YearDiff2025 || aaPolicyYear == YearDiff2023) {
		
		RiderVUCashValueMedian = [self ReturnRiderVUCashValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andMonth:aaMonth];
		RiderVURetValueMedian = [self ReturnRiderVURetValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:aaMonth];
		RiderVUDanaValueMedian = [self ReturnRiderVUDanaValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:aaMonth];
        RiderVUSmartValueMedian = [self ReturnRiderVUSmartValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:aaMonth];
		RiderVUVentureValueMedian = [self ReturnRiderVUVentureValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:aaMonth];
        RiderVUVentureGrowthValueMedian = [self ReturnRiderVUVentureGrowthValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:aaMonth];
		RiderVUVentureBlueChipValueMedian = [self ReturnRiderVUVentureBlueChipValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:aaMonth];
		RiderVUVentureDanaValueMedian = [self ReturnRiderVUVentureDanaValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:aaMonth];
        RiderVUVentureManagedValueMedian = [self ReturnRiderVUVentureManagedValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:aaMonth];
		RiderVUVentureIncomeValueMedian = [self ReturnRiderVUVentureIncomeValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:aaMonth];
		RiderVU2023ValueMedian = [self ReturnRiderVU2023ValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:aaMonth];
		RiderVU2025ValueMedian = [self ReturnRiderVU2025ValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:aaMonth];
		RiderVU2028ValueMedian = [self ReturnRiderVU2028ValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:aaMonth];
		RiderVU2030ValueMedian = [self ReturnRiderVU2030ValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:aaMonth];
		RiderVU2035ValueMedian = [self ReturnRiderVU2035ValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:aaMonth];
		
	}
	else{
		RiderVUCashValueMedian = [self ReturnRiderVUCashValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andMonth:0];
		RiderVURetValueMedian = [self ReturnRiderVURetValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:0];
		RiderVUDanaValueMedian = [self ReturnRiderVUDanaValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:0];
        RiderVUSmartValueMedian = [self ReturnRiderVUSmartValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:0];
		RiderVUVentureValueMedian = [self ReturnRiderVUVentureValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:0];
        RiderVUVentureGrowthValueMedian = [self ReturnRiderVUVentureGrowthValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:0];
		RiderVUVentureBlueChipValueMedian = [self ReturnRiderVUVentureBlueChipValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:0];
		RiderVUVentureDanaValueMedian = [self ReturnRiderVUVentureDanaValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:0];
        RiderVUVentureManagedValueMedian = [self ReturnRiderVUVentureManagedValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:0];
		RiderVUVentureIncomeValueMedian = [self ReturnRiderVUVentureIncomeValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:0];
		RiderVU2023ValueMedian = [self ReturnRiderVU2023ValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:0];
		RiderVU2025ValueMedian = [self ReturnRiderVU2025ValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:0];
		RiderVU2028ValueMedian = [self ReturnRiderVU2028ValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:0];
		RiderVU2030ValueMedian = [self ReturnRiderVU2030ValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:0];
		RiderVU2035ValueMedian = [self ReturnRiderVU2035ValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:0];
		
	}
	
	
	
	if (RiderVUCashValueMedian == 1 && RiderVU2023ValueMedian == 0 && RiderVU2025ValueMedian == 0 && RiderVU2028ValueMedian == 0 &&
		RiderVU2030ValueMedian == 0 && RiderVU2035ValueMedian == 0 && RiderVURetValueMedian == 0 && RiderVUDanaValueMedian == 0 && RiderVUSmartValueMedian == 0 && RiderVUVentureValueMedian == 0 &&
        RiderVUVentureGrowthValueMedian == 0 && RiderVUVentureBlueChipValueMedian == 0 && RiderVUVentureDanaValueMedian == 0 && RiderVUVentureManagedValueMedian == 0 && RiderVUVentureIncomeValueMedian == 0) {
		return 0;
	} else {
		//NSLog(@"%f,%f,%f,%f,%f,%f,%f", VUCashValueMedian,VURetValueMedian,VU2023ValueMedian, VU2025ValueMedian,VU2028ValueMedian, VU2030ValueMedian, VU2035ValueMedian);
		return RiderVU2023ValueMedian + RiderVU2025ValueMedian + RiderVU2028ValueMedian + RiderVU2030ValueMedian + RiderVU2035ValueMedian +
		RiderVUCashValueMedian + RiderVURetValueMedian + RiderVUDanaValueMedian + RiderVUSmartValueMedian + RiderVUVentureValueMedian +
        RiderVUVentureGrowthValueMedian + RiderVUVentureBlueChipValueMedian + RiderVUVentureDanaValueMedian + RiderVUVentureManagedValueMedian + RiderVUVentureIncomeValueMedian;
		
	}
	
}

-(double)ReturnRiderLSurrenderValue :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMonth:(int)aaMonth {
	//NSLog(@"%f", [self ReturnVUCashValueHigh:aaPolicyYear]);
	
	if (aaPolicyYear == YearDiff2035 || aaPolicyYear == YearDiff2030 || aaPolicyYear == YearDiff2028
		|| aaPolicyYear == YearDiff2025 || aaPolicyYear == YearDiff2023) {
		
		RiderVUCashValueLow = [self ReturnRiderVUCashValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andMonth:aaMonth];
		RiderVURetValueLow = [self ReturnRiderVURetValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:aaMonth];
		RiderVUDanaValueLow = [self ReturnRiderVUDanaValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:aaMonth];
        RiderVUSmartValueLow = [self ReturnRiderVUSmartValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:aaMonth];
		RiderVUVentureValueLow = [self ReturnRiderVUVentureValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:aaMonth];
        RiderVUVentureGrowthValueLow = [self ReturnRiderVUVentureGrowthValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:aaMonth];
		RiderVUVentureBlueChipValueLow = [self ReturnRiderVUVentureBlueChipValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:aaMonth];
		RiderVUVentureDanaValueLow = [self ReturnRiderVUVentureDanaValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:aaMonth];
        RiderVUVentureManagedValueLow = [self ReturnRiderVUVentureManagedValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:aaMonth];
		RiderVUVentureIncomeValueLow = [self ReturnRiderVUVentureIncomeValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:aaMonth];
		RiderVU2023ValueLow = [self ReturnRiderVU2023ValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:aaMonth];
		RiderVU2025ValueLow = [self ReturnRiderVU2025ValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:aaMonth];
		RiderVU2028ValueLow = [self ReturnRiderVU2028ValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:aaMonth];
		RiderVU2030ValueLow = [self ReturnRiderVU2030ValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:aaMonth];
		RiderVU2035ValueLow = [self ReturnRiderVU2035ValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:aaMonth];
		
		
	}
	else{
		RiderVUCashValueLow = [self ReturnRiderVUCashValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andMonth:0];
		RiderVURetValueLow = [self ReturnRiderVURetValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:0];
		RiderVUDanaValueLow = [self ReturnRiderVUDanaValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:0];
        RiderVUSmartValueLow = [self ReturnRiderVUSmartValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:0];
		RiderVUVentureValueLow = [self ReturnRiderVUVentureValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:0];
        RiderVUVentureGrowthValueLow = [self ReturnRiderVUVentureGrowthValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:0];
		RiderVUVentureBlueChipValueLow = [self ReturnRiderVUVentureBlueChipValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:0];
		RiderVUVentureDanaValueLow = [self ReturnRiderVUVentureDanaValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:0];
        RiderVUVentureManagedValueLow = [self ReturnRiderVUVentureManagedValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:0];
		RiderVUVentureIncomeValueLow = [self ReturnRiderVUVentureIncomeValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:0];
		RiderVU2023ValueLow = [self ReturnRiderVU2023ValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:0];
		RiderVU2025ValueLow = [self ReturnRiderVU2025ValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:0];
		RiderVU2028ValueLow = [self ReturnRiderVU2028ValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:0];
		RiderVU2030ValueLow = [self ReturnRiderVU2030ValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:0];
		RiderVU2035ValueLow = [self ReturnRiderVU2035ValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:2 andMonth:0];
		
	}
	
	
	
	if (RiderVUCashValueLow == 1 && RiderVU2023ValueLow == 0 && RiderVU2025ValueLow == 0 && RiderVU2028ValueLow == 0 &&
		RiderVU2030ValueLow == 0 && RiderVU2035ValueLow == 0 && RiderVURetValueLow == 0 && RiderVUDanaValueLow == 0 && RiderVUSmartValueLow == 0 && RiderVUVentureValueLow == 0 &&
        RiderVUVentureGrowthValueLow == 0 && RiderVUVentureBlueChipValueLow == 0 && RiderVUVentureDanaValueLow == 0 && RiderVUVentureManagedValueLow == 0 && RiderVUVentureIncomeValueLow == 0) {
		return 0;
	} else {
		return RiderVU2023ValueLow + RiderVU2025ValueLow + RiderVU2028ValueLow + RiderVU2030ValueLow + RiderVU2035ValueLow +
		RiderVUCashValueLow + RiderVURetValueLow + RiderVUDanaValueLow + RiderVUSmartValueLow + RiderVUVentureValueLow +
        RiderVUVentureGrowthValueLow + RiderVUVentureBlueChipValueLow + RiderVUVentureDanaValueLow + RiderVUVentureManagedValueLow + RiderVUVentureIncomeValueLow;
		
	}
	
}



-(void)ReturnFundFactor{
	sqlite3_stmt *statement;
	NSString *querySQL;
	
	querySQL = [NSString stringWithFormat:@"Select VU2023,VU2025,VU2028,VU2030,VU2035,VUCash,VURet,VURetOpt, VUCashOpt,VUDana,VUDanaOpt,VUSmart,VUSmartOpt,VUVenture,VUventureOpt, VUVentureGrowth,VUventureOptGrowth,VUVentureBlueChip,VUventureOptBlueChip,VUVentureDana,VUventureOptDana,VUVentureManaged,VUventureOptManaged,VUVentureIncome,VUventureOptIncome From UL_Details "
				" WHERE sino = '%@'", SINo];
	
	//NSLog(@"%@", querySQL);
	if (sqlite3_open([databasePath UTF8String], &contactDB) == SQLITE_OK){
		if(sqlite3_prepare_v2(contactDB, [querySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
			if (sqlite3_step(statement) == SQLITE_ROW){
				VU2023Factor = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 0)] intValue];
				VU2025Factor = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 1)] intValue];
				VU2028Factor = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 2)] intValue];
				VU2030Factor = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 3)] intValue];
				VU2035Factor = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 4)] intValue];
				VUCashFactor = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 5)] intValue];
				VURetFactor = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 6)] intValue];
				VURetOptFactor = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 7)] intValue];
				VUCashOptFactor = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 8)] intValue];
				VUDanaFactor = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 9)] intValue];
				VUDanaOptFactor = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 10)] intValue];
                VUSmartFactor = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 11)] intValue];
				VUSmartOptFactor = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 12)] intValue];
                VUVentureFactor = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 13)] intValue];
				VUVentureOptFactor = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 14)] intValue];
                VUVentureGrowthFactor = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 15)] intValue];
				VUVentureGrowthOptFactor = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 16)] intValue];
                VUVentureBlueChipFactor = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 17)] intValue];
				VUVentureBlueChipOptFactor = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 18)] intValue];
                VUVentureDanaFactor = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 19)] intValue];
				VUVentureDanaOptFactor = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 20)] intValue];
                VUVentureManagedFactor = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 21)] intValue];
				VUVentureManagedOptFactor = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 22)] intValue];
                VUVentureIncomeFactor = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 23)] intValue];
				VUVentureIncomeOptFactor = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 24)] intValue];

			}
			sqlite3_finalize(statement);
		}
		sqlite3_close(contactDB);
	}
}

-(void)GetRegWithdrawal{
	sqlite3_stmt *statement;
	NSString *querySQL;
	
	querySQL = [NSString stringWithFormat:@"Select FromAge, ToAge, YearInt, Amount From UL_RegWithdrawal WHERE sino = '%@'", SINo];
	
	//NSLog(@"%@", querySQL);
	if (sqlite3_open([databasePath UTF8String], &contactDB) == SQLITE_OK){
		if(sqlite3_prepare_v2(contactDB, [querySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
			if (sqlite3_step(statement) == SQLITE_ROW){
				RegWithdrawalStartYear = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 0)] intValue];
				RegWithdrawalEndYear = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 1)] intValue];
				RegWithdrawalIntYear = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 2)] intValue];
				RegWithdrawalAmount = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 3)] doubleValue];
			}
			else{
				RegWithdrawalStartYear = 0;
				RegWithdrawalEndYear = 0;
				RegWithdrawalAmount = 0;
			}
			sqlite3_finalize(statement);
		}
		sqlite3_close(contactDB);
	}
}



#pragma mark - Calculate Fund Surrender Value for Basic plan
-(double)ReturnVU2023ValueHigh :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andRound:(NSInteger)aaRound andMonth:(NSInteger)aaMonth{
	double currentValue;
	if (aaPolicyYear > YearDiff2023) {
		VU2023PrevValuehigh = 0.00;
		return 0.00;
	}
	else{
		if ([aaYearOrMonth isEqualToString:@"M"]) {
			//month calculation
			
			
			if (aaMonth == 1) {
				MonthVU2023PrevValuehigh = VU2023PrevValuehigh;
			}
			
			if (aaMonth > MonthDiff2023 && aaPolicyYear == YearDiff2023) {
				VU2023PrevValuehigh = 0.00;
				MonthVU2023PrevValuehigh = 0;
				return 0;
			}
			
			double tempPrev = MonthVU2023PrevValuehigh;
			
			if (VUCashValueNegative == TRUE && MonthFundValueOfTheYearValueTotalHigh != 0 ) {
				
				currentValue =((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear] * [self ReturnPremiumFactor:aaMonth] ) + IncreasePrem) * [self ReturnVU2023Fac] * CYFactor +
							   [self ReturnRegTopUpPrem] * RegularAllo * [self ReturnPremiumFactor:aaMonth] * VU2023Factor/100.00 * CYFactor +
							   [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * VU2023Factor * CYFactor) *
				pow((1 + [self ReturnVU2023InstHigh:@"A" ]), (1.00/12.00)) + MonthVU2023PrevValuehigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear] * [self ReturnLoyaltyBonusFactor:aaMonth]/100.00)) *
				pow((1 + [self ReturnVU2023InstHigh:@"A" ]), 1.00/12.00) - ([self ReturnRegWithdrawal:aaPolicyYear] * 0) + (NegativeValueOfMaxCashFundHigh - 1) *
				MAX(0, (MonthFundValueOfTheYearVU2023ValueHigh_Basic/MonthFundValueOfTheYearValueTotalHigh));
				
				
			}
			else{
				currentValue =((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear] * [self ReturnPremiumFactor:aaMonth]) + IncreasePrem) * [self ReturnVU2023Fac] * CYFactor +
							   [self ReturnRegTopUpPrem] * RegularAllo * [self ReturnPremiumFactor:aaMonth] * VU2023Factor/100.00 * CYFactor +
							   [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * VU2023Factor * CYFactor) *
				pow(1 + [self ReturnVU2023InstHigh:@"A" ], 1.00/12.00) + MonthVU2023PrevValuehigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:aaMonth]/100.00)) *
				pow(1 + [self ReturnVU2023InstHigh:@"A" ], 1.00/12.00) - ([self ReturnRegWithdrawal:aaPolicyYear] * 0);
			}
			if (aaMonth == MonthDiff2023 && aaPolicyYear == YearDiff2023) {
				if (Fund2023PartialReinvest != 100) {
					MonthFundMaturityValue2023_Bull = MonthVU2023PrevValuehigh * (100 - Fund2023PartialReinvest)/100.00;
					
					temp2023High = currentValue * (100 - Fund2023PartialReinvest)/100.00;
					Withdrawtemp2023High = currentValue * (Fund2023PartialReinvest)/100.00;
					//NSLog(@"%f", temp2028High);
				}
				else{
					MonthFundMaturityValue2023_Bull = 0;
				}
				
				if (aaRound == 2) {
					MonthVU2023PrevValuehigh = 0;
				}
				else{
					MonthVU2023PrevValuehigh = tempPrev;
				}
			}
			else{
				if (aaRound == 2) {
					MonthVU2023PrevValuehigh = currentValue;
				}
				else{
					MonthVU2023PrevValuehigh = tempPrev;
				}
			}
			
			if (aaMonth == 12 && aaRound == 2) {
				//VU2023PrevValuehigh = MonthVU2023PrevValuehigh + VU2023Value_EverCash1 + VU2023Value_EverCash6 + VU2023Value_EverCash55;
				VU2023PrevValuehigh = MonthVU2023PrevValuehigh + VU2023Value_EverCash1 + VU2023Value_EverCash6 + VU2023Value_EverCash60;
			}
			
			if (aaMonth == 12 && aaRound == 2) {
				//return currentValue + VU2023Value_EverCash1 + VU2023Value_EverCash6 + VU2023Value_EverCash55;
				return currentValue + VU2023Value_EverCash1 + VU2023Value_EverCash6 + VU2023Value_EverCash60;
			}
			else{
				return currentValue;
			}
			// below part to be edit later
		}
		else{
			//year calculation
			if (VUCashValueNegative == TRUE && FundValueOfTheYearValueTotalHigh != 0 ) {
				
				currentValue =((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear]) + IncreasePrem) * [self ReturnVU2023Fac] * CYFactor +
							   [self ReturnRegTopUpPrem] * RegularAllo * VU2023Factor/100.00 * CYFactor +
							   [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * VU2023Factor * CYFactor) *
				(1 + VU2023InstHigh) + VU2023PrevValuehigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVU2023InstHigh:@"A"]) -
				([self ReturnRegWithdrawal:aaPolicyYear] * 0) + (NegativeValueOfMaxCashFundHigh - 1) *
				MAX(0,(FundValueOfTheYearVU2023ValueHigh_Basic/FundValueOfTheYearValueTotalHigh));
				
			}
			else{
				if (aaRound == 1) {
					currentValue =((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear]) + IncreasePrem) * [self ReturnVU2023Fac] * CYFactor +
								   [self ReturnRegTopUpPrem] * RegularAllo * VU2023Factor/100.00 * CYFactor +
								   [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * VU2023Factor * CYFactor) *
					(1 + VU2023InstHigh) + VU2023PrevValuehigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVU2023InstHigh:@"A"]) -
					([self ReturnRegWithdrawal:aaPolicyYear] * 0);
					VU2023ValueHigh = currentValue;
				}
				else{
					currentValue = VU2023ValueHigh;
				}
				
			}
			
			if (ECAR60Exist == TRUE) {
				if (Age + aaPolicyYear < 60) {
					CashFactor = 0.00;
				}
				else if(Age + aaPolicyYear == 60){
					CashFactor = 1.00;
				}
				else{
					CashFactor = 12 * (1 + [self ReturnVU2023InstHigh:@"M"])/(pow((1 + [self ReturnVU2023InstHigh:@"A"]), (1.00/12.00)));
				}
			}
			
			if (aaRound == 2){
				VU2023PrevValuehigh = currentValue + VU2023Value_EverCash1 + VU2023Value_EverCash6 + (VU2023Value_EverCash60 * CashFactor);
			}
			
			return currentValue + VU2023Value_EverCash1 + VU2023Value_EverCash6 + (VU2023Value_EverCash60 * CashFactor);
			// below part to be edit later
		}
		
	}
}

-(double)ReturnVU2023ValueMedian :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andRound:(NSInteger)aaRound andMonth:(int)i{
	double currentValue;
	if (aaPolicyYear > YearDiff2023) {
		VU2023PrevValueMedian = 0.00;
		return 0.00;
	}
	else{
		
		if ([aaYearOrMonth isEqualToString:@"M"]) {
			
			
			if (i == 1) {
				MonthVU2023PrevValueMedian = VU2023PrevValueMedian;
			}
			
			if (i > MonthDiff2023 && aaPolicyYear == YearDiff2023) {
				VU2023PrevValueMedian = 0.00;
				MonthVU2023PrevValueMedian = 0;
				return 0;
			}
			
			double tempPrev = MonthVU2023PrevValueMedian;
			
			if (VUCashValueNegative == TRUE && MonthFundValueOfTheYearValueTotalMedian != 0 ) {
				
				currentValue =((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVU2023Fac] * CYFactor +
							   [self ReturnRegTopUpPrem] * RegularAllo * [self ReturnPremiumFactor:i] * VU2023Factor/100.00 * CYFactor +
							   [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * VU2023Factor * CYFactor) *
				pow(1 + [self ReturnVU2023InstMedian:@"A" ], 1.00/12.00) + MonthVU2023PrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
				pow(1 + [self ReturnVU2023InstMedian:@"A" ], 1.00/12.00) - ([self ReturnRegWithdrawal:aaPolicyYear] * 0) + (NegativeValueOfMaxCashFundMedian - 1) *
				MAX(0,(MonthFundValueOfTheYearVU2023ValueMedian_Basic/MonthFundValueOfTheYearValueTotalMedian));
				
			}
			else{
				currentValue =((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVU2023Fac ] * CYFactor +
							   [self ReturnRegTopUpPrem] * RegularAllo * [self ReturnPremiumFactor:i] * VU2023Factor/100.00 * CYFactor +
							   [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * VU2023Factor * CYFactor) *
				pow(1 + [self ReturnVU2023InstMedian:@"A" ], 1.00/12.00) + MonthVU2023PrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
				pow(1 + [self ReturnVU2023InstMedian:@"A" ], 1.00/12.00) - ([self ReturnRegWithdrawal:aaPolicyYear] * 0);
			}
			
			if (i == MonthDiff2023 && aaPolicyYear == YearDiff2023) {
				if (Fund2023PartialReinvest != 100) {
					MonthFundMaturityValue2023_Flat = MonthVU2023PrevValueMedian * (100 - Fund2023PartialReinvest)/100.00;
					
					temp2023Median = currentValue * (100 - Fund2023PartialReinvest)/100.00;
					Withdrawtemp2023Median = currentValue * (Fund2023PartialReinvest)/100.00;
					//NSLog(@"%f", temp2028High);
				}
				else{
					MonthFundMaturityValue2023_Flat = 0;
				}
				
				if (aaRound == 2) {
					MonthVU2023PrevValueMedian = 0;
				}
				else{
					MonthVU2023PrevValueMedian = tempPrev;
				}
			}
			else{
				if (aaRound == 2) {
					MonthVU2023PrevValueMedian = currentValue;
				}
				else{
					MonthVU2023PrevValueMedian = tempPrev;
				}
				
			}
			
			
			if (i == 12 && aaRound == 2) {
				VU2023PrevValueMedian = MonthVU2023PrevValueMedian + VU2023Value_EverCash1 + VU2023Value_EverCash6 + VU2023Value_EverCash60;
			}
			
			if (i == 12 && aaRound == 2) {
				return currentValue + VU2023Value_EverCash1 + VU2023Value_EverCash6 + VU2023Value_EverCash60;
			}
			else{
				return currentValue;
			}
			// below part to be edit later
		}
		else{
			if (VUCashValueNegative == TRUE && FundValueOfTheYearValueTotalMedian != 0 ) {
				
				currentValue =((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear]) + IncreasePrem) * [self ReturnVU2023Fac] * CYFactor +
							   [self ReturnRegTopUpPrem] * RegularAllo * VU2023Factor/100.00 * CYFactor +
							   [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * VU2023Factor * CYFactor) *
				(1 + VU2023InstMedian) + VU2023PrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVU2023InstMedian:@"A"]) -
				([self ReturnRegWithdrawal:aaPolicyYear] * 0) + (NegativeValueOfMaxCashFundMedian - 1) *
				MAX(0,(FundValueOfTheYearVU2023ValueMedian_Basic/FundValueOfTheYearValueTotalMedian));
				
			}
			else{
				if (aaRound == 1) {
					currentValue =((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear]) + IncreasePrem) * [self ReturnVU2023Fac] * CYFactor +
								   [self ReturnRegTopUpPrem] * RegularAllo * VU2023Factor/100.00 * CYFactor +
								   [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * VU2023Factor * CYFactor) *
					(1 + VU2023InstMedian) + VU2023PrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVU2023InstMedian:@"A"]) -
					([self ReturnRegWithdrawal:aaPolicyYear] * 0);
					VU2023ValueMedian = currentValue;
				}
				else{
					currentValue = VU2023ValueMedian;
				}
				
			}
			
			if (ECAR60Exist == TRUE) {
				if (Age + aaPolicyYear < 60) {
					CashFactor = 0.00;
				}
				else if(Age + aaPolicyYear == 60){
					CashFactor = 1.00;
				}
				else{
					CashFactor = 12 * (1 + [self ReturnVU2023InstMedian:@"M"])/(pow((1 + [self ReturnVU2023InstMedian:@"A"]), (1.00/12.00)));
				}
			}
			
			if (aaRound == 2){
				VU2023PrevValueMedian = currentValue + VU2023Value_EverCash1 + VU2023Value_EverCash6 + (VU2023Value_EverCash60 * CashFactor);
			}
			
			return currentValue + VU2023Value_EverCash1 + VU2023Value_EverCash6 + (VU2023Value_EverCash60 * CashFactor);
			// below part to be edit later
		}
		
	}
}

-(double)ReturnVU2023ValueLow :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andRound:(NSInteger)aaRound andMonth:(int)i{
	double currentValue;
	if (aaPolicyYear > YearDiff2023) {
		VU2023PrevValueLow = 0.00;
		return 0.00;
	}
	else{
		
		if ([aaYearOrMonth isEqualToString:@"M"]) {
			
			
			if (i == 1) {
				MonthVU2023PrevValueLow = VU2023PrevValueLow;
			}
			
			if (i > MonthDiff2023 && aaPolicyYear == YearDiff2023) {
				VU2023PrevValueLow = 0.00;
				MonthVU2023PrevValueLow = 0;
				return 0;
			}
			
			double tempPrev = MonthVU2023PrevValueLow;
			
			if (VUCashValueNegative == TRUE && MonthFundValueOfTheYearValueTotalLow != 0 ) {
				
				currentValue =((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVU2023Fac] * CYFactor +
							   [self ReturnRegTopUpPrem] * RegularAllo * [self ReturnPremiumFactor:i] * VU2023Factor/100.00 * CYFactor +
							   [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * VU2023Factor * CYFactor) *
				pow(1 + [self ReturnVU2023InstLow:@"A" ], 1.00/12.00) + MonthVU2023PrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
				pow(1 + [self ReturnVU2023InstLow:@"A" ], 1.00/12.00) - ([self ReturnRegWithdrawal:aaPolicyYear] * 0) + (NegativeValueOfMaxCashFundLow - 1) *
				MAX(0,(MonthFundValueOfTheYearVU2023ValueLow_Basic/MonthFundValueOfTheYearValueTotalLow));
				
			}
			else{
				currentValue =((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVU2023Fac ] * CYFactor +
							   [self ReturnRegTopUpPrem] * RegularAllo * [self ReturnPremiumFactor:i] * VU2023Factor/100.00 * CYFactor +
							   [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * VU2023Factor * CYFactor) *
				pow(1 + [self ReturnVU2023InstLow:@"A" ], 1.00/12.00) + MonthVU2023PrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
				pow(1 + [self ReturnVU2023InstLow:@"A" ], 1.00/12.00) - ([self ReturnRegWithdrawal:aaPolicyYear] * 0);
			}
			
			if (i == MonthDiff2023 && aaPolicyYear == YearDiff2023) {
				if (Fund2023PartialReinvest != 100) {
					MonthFundMaturityValue2023_Bear = MonthVU2023PrevValueLow * (100 - Fund2023PartialReinvest)/100.00;
					
					temp2023Low = currentValue * (100 - Fund2023PartialReinvest)/100.00;
					Withdrawtemp2023Low = currentValue * (Fund2023PartialReinvest)/100.00;
					//NSLog(@"%f", temp2028High);
				}
				else{
					MonthFundMaturityValue2023_Bear = 0;
				}
				if (aaRound == 2) {
					MonthVU2023PrevValueLow = 0;
				}
				else{
					MonthVU2023PrevValueLow = tempPrev;
				}
			}
			else{
				if (aaRound == 2) {
					MonthVU2023PrevValueLow = currentValue;
				}
				else{
					MonthVU2023PrevValueLow = tempPrev;
				}
			}
			
			if (i == 12 && aaRound == 2) {
				VU2023PrevValueLow = MonthVU2023PrevValueLow + VU2023Value_EverCash1 + VU2023Value_EverCash6 + VU2023Value_EverCash60;
			}
			
			if (i == 12 && aaRound == 2) {
				return currentValue + VU2023Value_EverCash1 + VU2023Value_EverCash6 + VU2023Value_EverCash60;
			}
			else{
				return currentValue;
			}
			// below part to be edit later
		}
		else{
			if (VUCashValueNegative == TRUE && FundValueOfTheYearValueTotalLow != 0 ) {
				
				currentValue =((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear]) + IncreasePrem) * [self ReturnVU2023Fac] * CYFactor +
							   [self ReturnRegTopUpPrem] * RegularAllo * VU2023Factor/100.00 * CYFactor +
							   [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * VU2023Factor * CYFactor) *
				(1 + VU2023InstLow) + VU2023PrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVU2023InstLow:@"A"]) -
				([self ReturnRegWithdrawal:aaPolicyYear] * 0) + (NegativeValueOfMaxCashFundLow - 1) *
				MAX(0,(FundValueOfTheYearVU2023ValueLow_Basic/FundValueOfTheYearValueTotalLow));
				
			}
			else{
				
				if (aaRound == 1) {
					currentValue =((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear]) + IncreasePrem) * [self ReturnVU2023Fac] * CYFactor +
								   [self ReturnRegTopUpPrem] * RegularAllo * VU2023Factor/100.00 * CYFactor +
								   [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * VU2023Factor * CYFactor) *
					(1 + VU2023InstLow) + VU2023PrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVU2023InstLow:@"A"]) -
					([self ReturnRegWithdrawal:aaPolicyYear] * 0);
					VU2023ValueLow = currentValue ;
				}
				else{
					currentValue = VU2023ValueLow;
				}
				
			}
			
			if (ECAR60Exist == TRUE) {
				if (Age + aaPolicyYear < 60) {
					CashFactor = 0.00;
				}
				else if(Age + aaPolicyYear == 60){
					CashFactor = 1.00;
				}
				else{
					CashFactor = 12 * (1 + [self ReturnVU2023InstLow:@"M"])/(pow((1 + [self ReturnVU2023InstLow:@"A"]), (1.00/12.00)));
				}
			}
			
			if (aaRound == 2){
				VU2023PrevValueLow = currentValue +  VU2023Value_EverCash1 + VU2023Value_EverCash6 + (VU2023Value_EverCash60 * CashFactor);
			}
			
			return currentValue + VU2023Value_EverCash1 + VU2023Value_EverCash6 + (VU2023Value_EverCash60 * CashFactor);
			// below part to be edit later
		}
		
	}
}


-(double)ReturnVU2025ValueHigh :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andRound:(NSInteger)aaRound andMonth:(NSInteger)i{
	
	double currentValue;
	if (aaPolicyYear > YearDiff2025) {
		VU2025PrevValuehigh = 0.00;
		return 0;
	}
	else{
		if ([aaYearOrMonth isEqualToString:@"M"]) {
			
			
			if (i == 1) {
				MonthVU2025PrevValuehigh = VU2025PrevValuehigh;
			}
			
			if (i > MonthDiff2025 && aaPolicyYear == YearDiff2025) {
				VU2025PrevValuehigh = 0.00;
				MonthVU2025PrevValuehigh = 0;
				return 0;
			}
			
			double tempPrev = MonthVU2025PrevValuehigh;
			/*
             if(i == MonthDiff2023 + 1 && aaPolicyYear == YearDiff2023){
             MonthVU2025PrevValuehigh = MonthVU2025PrevValuehigh + (temp2023High * Fund2023ReinvestTo2025Fac/100.00);
             }
             else{
             
             }
             */
			if (VUCashValueNegative == TRUE && MonthFundValueOfTheYearValueTotalHigh != 0 ) {
				currentValue =((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVU2025Fac:aaPolicyYear  andMonth:i] * CYFactor +
							   [self ReturnRegTopUpPrem] * RegularAllo * [self ReturnPremiumFactor:i] * [self ReturnVU2025Fac:aaPolicyYear  andMonth:i] * CYFactor +
							   [self ReturnExcessPrem:aaPolicyYear] * [self ReturnDivideMode] * ExcessAllo * [self ReturnPremiumFactor:i] * [self ReturnVU2025Fac:aaPolicyYear  andMonth:i] * CYFactor) *
				pow(1 + [self ReturnVU2025InstHigh:@"A" ], 1.00/12.00) + MonthVU2025PrevValuehigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
				pow(1 + [self ReturnVU2025InstHigh:@"A" ], 1.00/12.00) - ([self ReturnRegWithdrawal:aaPolicyYear] * 0) + (NegativeValueOfMaxCashFundHigh - 1) *
				MAX(0,(MonthFundValueOfTheYearVU2025ValueHigh_Basic/MonthFundValueOfTheYearValueTotalHigh));
			}
			else{
				currentValue= ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVU2025Fac:aaPolicyYear  andMonth:i] * CYFactor +
							   [self ReturnRegTopUpPrem] * RegularAllo * [self ReturnPremiumFactor:i] * [self ReturnVU2025Fac:aaPolicyYear  andMonth:i] * CYFactor +
							   [self ReturnExcessPrem:aaPolicyYear] * [self ReturnDivideMode] * ExcessAllo * [self ReturnPremiumFactor:i] * [self ReturnVU2025Fac:aaPolicyYear  andMonth:i] * CYFactor) *
				pow(1 + [self ReturnVU2025InstHigh:@"A" ], 1.00/12.00) + MonthVU2025PrevValuehigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
				pow(1 + [self ReturnVU2025InstHigh:@"A" ], 1.00/12.00) - ([self ReturnRegWithdrawal:aaPolicyYear] * 0);
			}
			
			[self ReturnMonthEverCash60:aaPolicyYear andMonth:i];
			double EverCashValue = VU2025Value_EverCash1 * [self EverCash1_CashPaymentFactor:aaPolicyYear andMonth:i] +
			VU2025Value_EverCash6 * [self EverCash6_CashPaymentFactor:aaPolicyYear andMonth:i] +
			VU2025Value_EverCash60;
			
			
			if (i == MonthDiff2025 && aaPolicyYear == YearDiff2025) {
				if (Fund2025PartialReinvest != 100) {
					MonthFundMaturityValue2025_Bull = MonthVU2025PrevValuehigh * (100 - Fund2025PartialReinvest)/100.00;
					
					temp2025High = currentValue * (100 - Fund2025PartialReinvest)/100.00 + EverCashValue;
					Withdrawtemp2025High = currentValue * (Fund2025PartialReinvest)/100.00;
					//NSLog(@"%f", temp2028High);
				}
				else{
                    Withdrawtemp2025High = currentValue * (Fund2025PartialReinvest)/100.00;
					MonthFundMaturityValue2025_Bull = 0;
				}
				if (aaRound == 2 ){
					MonthVU2025PrevValuehigh = 0;
				}
				else{
					MonthVU2025PrevValuehigh = tempPrev;
				}
				
			}
			else{
				if (aaRound == 2){
					MonthVU2025PrevValuehigh = currentValue + EverCashValue;
				}
				else{
					MonthVU2025PrevValuehigh = tempPrev;
				}
				
			}
			
			
			
			if (aaRound == 2 && i == 12) {
				//VU2025PrevValuehigh = MonthVU2025PrevValuehigh + VU2025Value_EverCash1 + VU2025Value_EverCash6 + VU2025Value_EverCash60;
				
				VU2025PrevValuehigh = MonthVU2025PrevValuehigh;
				
				if(MonthDiff2025 == 12 && aaPolicyYear == YearDiff2025){
					VU2025PrevValuehigh = 0 + EverCashValue ;
				}
				else{
					//VU2025PrevValuehigh = VU2025PrevValuehigh;
				}
			}
			
			if (aaRound == 2 && i == 12) {
				//return currentValue + VU2025Value_EverCash1 + VU2025Value_EverCash6 + VU2025Value_EverCash60;
				if(MonthDiff2025 == 12 && aaPolicyYear == YearDiff2025){
					return 0 + EverCashValue;
				}
				else{
					return currentValue + EverCashValue;
				}
			}
			else
			{
				return currentValue + EverCashValue;
			}
			
		}
		else{
			if (VUCashValueNegative == TRUE && FundValueOfTheYearValueTotalHigh != 0 ) {
				currentValue =((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear]) + IncreasePrem) * [self ReturnVU2025Fac:aaPolicyYear] * CYFactor +
							   [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnVU2025Fac:aaPolicyYear] * CYFactor +
							   [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnVU2025Fac:aaPolicyYear] * CYFactor) *
				(1 + VU2025InstHigh) + VU2025PrevValuehigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVU2025InstHigh:@"A"]) -
				([self ReturnRegWithdrawal:aaPolicyYear] * 0) + (NegativeValueOfMaxCashFundHigh - 1) *
				MAX(0,(FundValueOfTheYearVU2025ValueHigh_Basic/FundValueOfTheYearValueTotalHigh));
				
				
			}
			else{
				
				if (aaRound == 1) {
					currentValue= ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear]) + IncreasePrem) * [self ReturnVU2025Fac:aaPolicyYear] * CYFactor +
								   [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnVU2025Fac:aaPolicyYear] * CYFactor +
								   [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnVU2025Fac:aaPolicyYear] * CYFactor) *
					(1 + VU2025InstHigh) + VU2025PrevValuehigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVU2025InstHigh:@"A"]) -
					([self ReturnRegWithdrawal:aaPolicyYear] * 0);
					
					VU2025ValueHigh = currentValue;
				}
				else{
					currentValue = VU2025ValueHigh;
				}
				
			}
			
			if (ECAR60Exist == TRUE) {
				if (Age + aaPolicyYear < 60) {
					CashFactor = 0.00;
				}
				else if(Age + aaPolicyYear == 60){
					CashFactor = 1.00;
				}
				else{
					double tempValue = [self CalculateInst:@"M" andFund:@"2025" andLowMediumHigh:@"H"];
					
					CashFactor = 12 * (1 + tempValue)/(pow((1 + [self ReturnVU2025InstHigh:@"A"]), (1.00/12.00)));
				}
			}
			
			if (aaRound == 2) {
				VU2025PrevValuehigh = currentValue + VU2025Value_EverCash1 + VU2025Value_EverCash6  + (VU2025Value_EverCash60 * CashFactor);
			}
			
			return currentValue + VU2025Value_EverCash1 + VU2025Value_EverCash6 + (VU2025Value_EverCash60 * CashFactor);
		}
		
	}
	
	// below part to be edit later
}

-(double)ReturnVU2025ValueMedian :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andRound:(NSInteger)aaRound andMonth:(int)i{
	
	double currentValue;
	if (aaPolicyYear > YearDiff2025) {
		VU2025PrevValueMedian = 0.00;
		return 0;
	}
	else{
		if ([aaYearOrMonth isEqualToString:@"M"]) {
			
			
			
			if (i == 1) {
				MonthVU2025PrevValueMedian = VU2025PrevValueMedian;
			}
			
			if (i > MonthDiff2025 && aaPolicyYear == YearDiff2025) {
				VU2025PrevValueMedian = 0.00;
				MonthVU2025PrevValueMedian = 0;
				return 0;
			}
			
			double tempPrev = MonthVU2025PrevValueMedian;
			
			if(i == MonthDiff2023 + 1 && aaPolicyYear == YearDiff2023){
				MonthVU2025PrevValueMedian = MonthVU2025PrevValueMedian + (temp2023Median * Fund2023ReinvestTo2025Fac/100.00);
			}
			else{
				
			}
			
			if (VUCashValueNegative == TRUE && MonthFundValueOfTheYearValueTotalMedian != 0 ) {
				currentValue =((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVU2025Fac:aaPolicyYear  andMonth:i] * CYFactor +
							   [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnPremiumFactor:i] * [self ReturnVU2025Fac:aaPolicyYear  andMonth:i] * CYFactor +
							   [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnPremiumFactor:i] * [self ReturnVU2025Fac:aaPolicyYear  andMonth:i] * CYFactor) *
				pow(1 + [self ReturnVU2025InstMedian:@"A" ], 1.00/12.00) + MonthVU2025PrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
				pow(1 + [self ReturnVU2025InstMedian:@"A" ], 1.00/12.00) - ([self ReturnRegWithdrawal:aaPolicyYear] * 0) + (NegativeValueOfMaxCashFundMedian - 1) *
				MAX(0,(MonthFundValueOfTheYearVU2025ValueMedian_Basic/MonthFundValueOfTheYearValueTotalMedian));
			}
			else{
				currentValue= ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVU2025Fac:aaPolicyYear  andMonth:i] * CYFactor +
							   [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnPremiumFactor:i] * [self ReturnVU2025Fac:aaPolicyYear  andMonth:i] * CYFactor +
							   [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnPremiumFactor:i] * [self ReturnVU2025Fac:aaPolicyYear  andMonth:i] * CYFactor) *
				pow(1 + [self ReturnVU2025InstMedian:@"A" ], 1.00/12.00) + MonthVU2025PrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
				pow(1 + [self ReturnVU2025InstMedian:@"A" ], 1.00/12.00) - ([self ReturnRegWithdrawal:aaPolicyYear] * 0);
			}
			
			[self ReturnMonthEverCash60:aaPolicyYear andMonth:i];
			double EverCashValue = VU2025Value_EverCash1 * [self EverCash1_CashPaymentFactor:aaPolicyYear andMonth:i] +
			VU2025Value_EverCash6 * [self EverCash6_CashPaymentFactor:aaPolicyYear andMonth:i] +
			VU2025Value_EverCash60;
			
			if (i == MonthDiff2025 && aaPolicyYear == YearDiff2025) {
				if (Fund2025PartialReinvest != 100) {
					MonthFundMaturityValue2025_Flat = MonthVU2025PrevValueMedian * (100 - Fund2025PartialReinvest)/100.00;
					
					temp2025Median = currentValue * (100 - Fund2025PartialReinvest)/100.00 + EverCashValue;
					Withdrawtemp2025Median = currentValue * (Fund2025PartialReinvest)/100.00;
					//NSLog(@"%f", temp2028High);
				}
				else{
                    Withdrawtemp2025Median = currentValue * (Fund2025PartialReinvest)/100.00;
					MonthFundMaturityValue2025_Flat = 0;
				}
				if (aaRound == 2){
					MonthVU2025PrevValueMedian = 0;
				}
				else{
					MonthVU2025PrevValueMedian = tempPrev;
				}
				
			}
			else{
				if (aaRound == 2){
					MonthVU2025PrevValueMedian = currentValue + EverCashValue;
				}
				else{
					MonthVU2025PrevValueMedian = tempPrev;
				}
				
			}
			
			
			
			if (aaRound == 2 && i == 12) {
				//VU2025PrevValueMedian = MonthVU2025PrevValueMedian + VU2025Value_EverCash1 + VU2025Value_EverCash6 + VU2025Value_EverCash60;
				
				VU2025PrevValueMedian = MonthVU2025PrevValueMedian;
				
				if(MonthDiff2025 == 12 && aaPolicyYear == YearDiff2025){
					VU2025PrevValueMedian = 0 + EverCashValue;
				}
				else{
					//VU2025PrevValueMedian = VU2025PrevValueMedian + EverCashValue;
				}
			}
			
			if (aaRound == 2 && i == 12) {
				//return currentValue + VU2025Value_EverCash1 + VU2025Value_EverCash6 + VU2025Value_EverCash60;
                
				if(MonthDiff2025 == 12 && aaPolicyYear == YearDiff2025){
					return 0 + EverCashValue;
				}
				else{
					return currentValue + EverCashValue;
				}
                
			}
			else{
				return currentValue + EverCashValue;
			}
			
		}
		else{
			if (VUCashValueNegative == TRUE && FundValueOfTheYearValueTotalMedian != 0 ) {
				currentValue =((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear]) + IncreasePrem) * [self ReturnVU2025Fac:aaPolicyYear] * CYFactor +
							   [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnVU2025Fac:aaPolicyYear] * CYFactor +
							   [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnVU2025Fac:aaPolicyYear] * CYFactor) *
				(1 + VU2025InstMedian) + VU2025PrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVU2025InstMedian:@"A"]) -
				([self ReturnRegWithdrawal:aaPolicyYear] * 0) + (NegativeValueOfMaxCashFundMedian - 1) *
				MAX(0,(FundValueOfTheYearVU2025ValueMedian_Basic/FundValueOfTheYearValueTotalMedian));
			}
			else{
				if (aaRound == 1) {
					currentValue= ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear]) + IncreasePrem) * [self ReturnVU2025Fac:aaPolicyYear] * CYFactor +
								   [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnVU2025Fac:aaPolicyYear] * CYFactor +
								   [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnVU2025Fac:aaPolicyYear] * CYFactor) *
					(1 + VU2025InstMedian) + VU2025PrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVU2025InstMedian:@"A"]) -
					([self ReturnRegWithdrawal:aaPolicyYear] * 0);
					
					VU2025ValueMedian = currentValue;
				}
				else{
					currentValue = VU2025ValueMedian;
				}
				
			}
			
			if (ECAR60Exist == TRUE) {
				if (Age + aaPolicyYear < 60) {
					CashFactor = 0.00;
				}
				else if(Age + aaPolicyYear == 60){
					CashFactor = 1.00;
				}
				else{
					double tempValue = [self CalculateInst:@"M" andFund:@"2025" andLowMediumHigh:@"M"];
					
					CashFactor = 12 * (1 + tempValue)/(pow((1 + [self ReturnVU2025InstMedian:@"A"]), (1.00/12.00)));
				}
			}
			
			if (aaRound == 2) {
				VU2025PrevValueMedian = currentValue + VU2025Value_EverCash1 + VU2025Value_EverCash6  + (VU2025Value_EverCash60 * CashFactor);
			}
			
			return currentValue + VU2025Value_EverCash1 + VU2025Value_EverCash6  + (VU2025Value_EverCash60 * CashFactor);
		}
		
	}
	
	// below part to be edit later
}


-(double)ReturnVU2025ValueLow :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andRound:(NSInteger)aaRound andMonth:(int)i{
	
	double currentValue;
	if (aaPolicyYear > YearDiff2025) {
		VU2025PrevValueLow = 0.00;
		return 0;
	}
	else{
		if ([aaYearOrMonth isEqualToString:@"M"]) {
			
			
			
			if (i == 1) {
				MonthVU2025PrevValueLow = VU2025PrevValueLow;
			}
			
			if (i > MonthDiff2025 && aaPolicyYear == YearDiff2025) {
				VU2025PrevValueLow = 0.00;
				MonthVU2025PrevValueLow = 0;
				return 0;
			}
			
			double tempPrev = MonthVU2025PrevValueLow;
			
			if(i == MonthDiff2023 + 1 && aaPolicyYear == YearDiff2023){
				MonthVU2025PrevValueLow = MonthVU2025PrevValueLow + (temp2023Low * Fund2023ReinvestTo2025Fac/100.00);
			}
			else{
				
			}
			
			if (VUCashValueNegative == TRUE && MonthFundValueOfTheYearValueTotalLow != 0 ) {
				currentValue =((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVU2025Fac:aaPolicyYear  andMonth:i] * CYFactor +
							   [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnPremiumFactor:i] * [self ReturnVU2025Fac:aaPolicyYear  andMonth:i] * CYFactor +
							   [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnPremiumFactor:i] * [self ReturnVU2025Fac:aaPolicyYear  andMonth:i] * CYFactor) *
				pow(1 + [self ReturnVU2025InstLow:@"A" ], 1.00/12.00) + MonthVU2025PrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
				pow(1 + [self ReturnVU2025InstLow:@"A" ], 1.00/12.00) - ([self ReturnRegWithdrawal:aaPolicyYear] * 0) + (NegativeValueOfMaxCashFundLow - 1) *
				MAX(0,(MonthFundValueOfTheYearVU2025ValueLow_Basic/MonthFundValueOfTheYearValueTotalLow));
			}
			else{
				currentValue= ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVU2025Fac:aaPolicyYear  andMonth:i] * CYFactor +
							   [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnPremiumFactor:i] * [self ReturnVU2025Fac:aaPolicyYear  andMonth:i] * CYFactor +
							   [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnPremiumFactor:i] * [self ReturnVU2025Fac:aaPolicyYear  andMonth:i] * CYFactor) *
				pow(1 + [self ReturnVU2025InstLow:@"A" ], 1.00/12.00) + MonthVU2025PrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
				pow(1 + [self ReturnVU2025InstLow:@"A" ], 1.00/12.00) - ([self ReturnRegWithdrawal:aaPolicyYear] * 0);
			}
			
			[self ReturnMonthEverCash60:aaPolicyYear andMonth:i];
			double EverCashValue = VU2025Value_EverCash1 * [self EverCash1_CashPaymentFactor:aaPolicyYear andMonth:i] + VU2025Value_EverCash6 * [self EverCash6_CashPaymentFactor:aaPolicyYear andMonth:i] +
                                    VU2025Value_EverCash60;
			
			if (i == MonthDiff2025 && aaPolicyYear == YearDiff2025) {
				if (Fund2025PartialReinvest != 100) {
					MonthFundMaturityValue2025_Bear = MonthVU2025PrevValueLow * (100 - Fund2025PartialReinvest)/100.00;
					
					temp2025Low = currentValue * (100 - Fund2025PartialReinvest)/100.00 + EverCashValue;
					Withdrawtemp2025Low = currentValue * (Fund2025PartialReinvest)/100.00;
					//NSLog(@"%f", temp2028High);
				}
				else{
                    Withdrawtemp2025Low = currentValue * (Fund2025PartialReinvest)/100.00;
					MonthFundMaturityValue2025_Bear = 0;
				}
				if (aaRound == 2){
					MonthVU2025PrevValueLow = 0;
				}
				else{
					MonthVU2025PrevValueLow = tempPrev;
				}
				
			}
			else{
				if (aaRound == 2){
					MonthVU2025PrevValueLow = currentValue + EverCashValue;
				}
				else{
					MonthVU2025PrevValueLow = tempPrev;
				}
				
			}
			
            
			
			if (aaRound == 2 && i == 12) {
				//VU2025PrevValueLow = MonthVU2025PrevValueLow + VU2025Value_EverCash1 + VU2025Value_EverCash6 + VU2025Value_EverCash60;
				
				VU2025PrevValueLow = MonthVU2025PrevValueLow;
				
				if(MonthDiff2025 == 12 && aaPolicyYear == YearDiff2025){
					VU2025PrevValueLow = 0 + EverCashValue;
				}
				else{
					//VU2025PrevValueLow = VU2025PrevValueLow + EverCashValue;
				}
			}
			
			if (aaRound == 2 && i == 12) {
				//return currentValue + VU2025Value_EverCash1 + VU2025Value_EverCash6 + VU2025Value_EverCash60;
				
				if(MonthDiff2025 == 12 && aaPolicyYear == YearDiff2025){
					return 0 + EverCashValue;
				}
				else{
					return currentValue + EverCashValue;
				}
			}
			else{
				return currentValue + EverCashValue;
			}
			
		}
		else{
			if (VUCashValueNegative == TRUE && FundValueOfTheYearValueTotalLow != 0 ) {
				currentValue =((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear]) + IncreasePrem) * [self ReturnVU2025Fac:aaPolicyYear] * CYFactor +
							   [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnVU2025Fac:aaPolicyYear] * CYFactor +
							   [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnVU2025Fac:aaPolicyYear] * CYFactor) *
				(1 + VU2025InstLow) + VU2025PrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVU2025InstLow:@"A"]) -
				([self ReturnRegWithdrawal:aaPolicyYear] * 0) + (NegativeValueOfMaxCashFundLow - 1) *
				MAX(0,(FundValueOfTheYearVU2025ValueLow_Basic/FundValueOfTheYearValueTotalLow));
			}
			else{
				if (aaRound == 1) {
					currentValue= ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear]) + IncreasePrem) * [self ReturnVU2025Fac:aaPolicyYear] * CYFactor +
								   [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnVU2025Fac:aaPolicyYear] * CYFactor +
								   [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnVU2025Fac:aaPolicyYear] * CYFactor) *
					(1 + VU2025InstLow) + VU2025PrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVU2025InstLow:@"A"]) -
					([self ReturnRegWithdrawal:aaPolicyYear] * 0);
					
					VU2025ValueLow = currentValue;
				}
				else{
					currentValue =VU2025ValueLow;
				}
			}
			
			if (ECAR60Exist == TRUE) {
				if (Age + aaPolicyYear < 60) {
					CashFactor = 0.00;
				}
				else if(Age + aaPolicyYear == 60){
					CashFactor = 1.00;
				}
				else{
					double tempValue = [self CalculateInst:@"M" andFund:@"2025" andLowMediumHigh:@"L"];
					
					CashFactor = 12 * (1 + tempValue)/(pow((1 + [self ReturnVU2025InstLow:@"A"]), (1.00/12.00)));
				}
			}
            
			
			if (aaRound == 2) {
				VU2025PrevValueLow = currentValue + VU2025Value_EverCash1 + VU2025Value_EverCash6  + (VU2025Value_EverCash60 * CashFactor);
			}
			
			return currentValue + VU2025Value_EverCash1 + VU2025Value_EverCash6  + (VU2025Value_EverCash60 * CashFactor);
		}
		
	}
	
	// below part to be edit later
}

-(double)ReturnVU2028ValueHigh :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andRound:(NSInteger)aaRound andMonth:(int)i{
	
	double currentValue;
	if (aaPolicyYear > YearDiff2028) {
		VU2028PrevValuehigh = 0.00;
		return 0;
	}
	else{
		if ([aaYearOrMonth isEqualToString:@"M"]) {
			
			
			if (i == 1) {
				MonthVU2028PrevValuehigh = VU2028PrevValuehigh;
			}
			
			if (i > MonthDiff2028 && aaPolicyYear == YearDiff2028) {
				VU2028PrevValuehigh = 0.00;
				MonthVU2028PrevValuehigh = 0;
				return 0;
			}
			
			double tempPrev = MonthVU2028PrevValuehigh;
			if(i == MonthDiff2025 + 1 && aaPolicyYear == YearDiff2025){
				MonthVU2028PrevValuehigh = MonthVU2028PrevValuehigh + (temp2025High * Fund2025ReinvestTo2028Fac/100.00);
			}
			else if(i == MonthDiff2023 + 1 && aaPolicyYear == YearDiff2023){
				MonthVU2028PrevValuehigh = MonthVU2028PrevValuehigh + (temp2023High * Fund2023ReinvestTo2028Fac/100.00);
			}
			else{
				
			}
			
            
			
			if (VUCashValueNegative == TRUE && MonthFundValueOfTheYearValueTotalHigh != 0) {
				currentValue= ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVU2028Fac:aaPolicyYear  andMonth:i] * CYFactor +
							   [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnPremiumFactor:i] * [self ReturnVU2028Fac:aaPolicyYear  andMonth:i] * CYFactor +
							   [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnPremiumFactor:i] * [self ReturnVU2028Fac:aaPolicyYear  andMonth:i] * CYFactor) *
				pow(1 + [self ReturnVU2028InstHigh:@"A" ], 1.00/12.00) + MonthVU2028PrevValuehigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
				pow(1 + [self ReturnVU2028InstHigh:@"A"], 1.00/12.00) - ([self ReturnRegWithdrawal:aaPolicyYear] * 0) + (NegativeValueOfMaxCashFundHigh - 1) *
				MAX(0,(MonthFundValueOfTheYearVU2028ValueHigh_Basic/MonthFundValueOfTheYearValueTotalHigh));
			}
			else{
				currentValue = ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVU2028Fac:aaPolicyYear  andMonth:i] * CYFactor +
								[self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnPremiumFactor:i] * [self ReturnVU2028Fac:aaPolicyYear  andMonth:i] * CYFactor +
								[self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnPremiumFactor:i] * [self ReturnVU2028Fac:aaPolicyYear  andMonth:i]* CYFactor) *
				pow(1 + [self ReturnVU2028InstHigh:@"A" ], 1.00/12.00)+ MonthVU2028PrevValuehigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
				pow(1 + [self ReturnVU2028InstHigh:@"A"], 1.00/12.00) - ([self ReturnRegWithdrawal:aaPolicyYear] * 0);
			}
            
			[self ReturnMonthEverCash60:aaPolicyYear andMonth:i];
			double EverCashValue = VU2028Value_EverCash1 * [self EverCash1_CashPaymentFactor:aaPolicyYear andMonth:i] +
			VU2028Value_EverCash6 * [self EverCash6_CashPaymentFactor:aaPolicyYear andMonth:i] +
			VU2028Value_EverCash60;
			
			if (i == MonthDiff2028 && aaPolicyYear == YearDiff2028) {
				if (Fund2028PartialReinvest != 100) {
					MonthFundMaturityValue2028_Bull = MonthVU2028PrevValuehigh * (100 - Fund2028PartialReinvest)/100.00;
					
					temp2028High = currentValue * (100 - Fund2028PartialReinvest)/100.00 + EverCashValue;
					Withdrawtemp2028High = currentValue * (Fund2028PartialReinvest)/100.00;
					//NSLog(@"%f", temp2028High);
				}
				else{
                    Withdrawtemp2028High = currentValue * (Fund2028PartialReinvest)/100.00;
					MonthFundMaturityValue2028_Bull = 0;
				}
				if (aaRound == 2) {
					MonthVU2028PrevValuehigh = 0;
				}
				else{
					MonthVU2028PrevValuehigh = tempPrev;
				}
			}
			else{
				if (aaRound == 2) {
					MonthVU2028PrevValuehigh = currentValue + EverCashValue;
				}
				else{
					MonthVU2028PrevValuehigh = tempPrev;
				}
				
			}
			
			
			
			if (i == 12 && aaRound == 2) {
				VU2028PrevValuehigh = MonthVU2028PrevValuehigh;
				
				if(MonthDiff2028 == 12 && aaPolicyYear == YearDiff2028){
					VU2028PrevValuehigh = 0 + EverCashValue;
				}
				else if(MonthDiff2025 == 12 && aaPolicyYear == YearDiff2025){
					VU2028PrevValuehigh = VU2028PrevValuehigh +  (temp2025High * Fund2025ReinvestTo2028Fac/100.00);
				}
				else{
					//VU2028PrevValuehigh = VU2028PrevValuehigh + EverCashValue;
				}
				
				//VU2028PrevValuehigh = MonthVU2028PrevValuehigh + VU2028Value_EverCash1 + VU2028Value_EverCash6 + VU2028Value_EverCash60;
			}
			
			if (i == 12 && aaRound == 2) {
				if(MonthDiff2028 == 12 && aaPolicyYear == YearDiff2028){
					return 0 + EverCashValue;
				}
				else if(MonthDiff2025 == 12 && aaPolicyYear == YearDiff2025){
					return currentValue + (temp2025High * Fund2025ReinvestTo2028Fac/100.00) + EverCashValue;
				}
				else{
					return currentValue + EverCashValue;
				}
				
				//return currentValue + VU2028Value_EverCash1 + VU2028Value_EverCash6 + VU2028Value_EverCash60;
			}
			else
			{
				return currentValue + EverCashValue;
			}
			
		}
		else{
			if (VUCashValueNegative == TRUE && FundValueOfTheYearValueTotalHigh != 0) {
				currentValue= ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear]) + IncreasePrem) * [self ReturnVU2028Fac:aaPolicyYear] * CYFactor +
							   [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnVU2028Fac:aaPolicyYear] * CYFactor +
							   [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnVU2028Fac:aaPolicyYear]  * CYFactor) *
				(1 + VU2028InstHigh) + VU2028PrevValuehigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVU2028InstHigh:@"A"]) -
				([self ReturnRegWithdrawal:aaPolicyYear] * 0) + (NegativeValueOfMaxCashFundHigh - 1) *
				MAX(0,(FundValueOfTheYearVU2028ValueHigh_Basic/FundValueOfTheYearValueTotalHigh));
			}
			else{
				if (aaRound == 1) {
					currentValue = ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear]) + IncreasePrem) * [self ReturnVU2028Fac:aaPolicyYear] * CYFactor +
									[self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnVU2028Fac:aaPolicyYear] * CYFactor +
									[self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnVU2028Fac:aaPolicyYear] * CYFactor) *
					(1 + VU2028InstHigh) + VU2028PrevValuehigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVU2028InstHigh:@"A"]) -
					([self ReturnRegWithdrawal:aaPolicyYear] * 0);
					VU2028ValueHigh = currentValue;
				}
				else{
					currentValue = VU2028ValueHigh;
				}
				
			}
			
			if (ECAR60Exist == TRUE) {
				if (Age + aaPolicyYear < 60) {
					CashFactor = 0.00;
				}
				else if(Age + aaPolicyYear == 60){
					CashFactor = 1.00;
				}
				else{
					double tempValue = [self CalculateInst:@"M" andFund:@"2028" andLowMediumHigh:@"H"];
					
					CashFactor = 12 * (1 + tempValue)/(pow((1 + [self ReturnVU2028InstHigh:@"A"]), (1.00/12.00)));
				}
			}
            
			
			if (aaRound == 2) {
				VU2028PrevValuehigh = currentValue + VU2028Value_EverCash1 + VU2028Value_EverCash6  + (VU2028Value_EverCash60 * CashFactor);
			}
			
			return currentValue + VU2028Value_EverCash1 + VU2028Value_EverCash6  + (VU2028Value_EverCash60 * CashFactor);
			
		}
		
	}
	
}

-(double)ReturnVU2028ValueMedian :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andRound:(NSInteger)aaRound andMonth:(int)i{
	
	double currentValue;
	if (aaPolicyYear > YearDiff2028) {
		VU2028PrevValueMedian = 0.00;
		return 0;
	}
	else{
		if ([aaYearOrMonth isEqualToString:@"M"]) {
			
			
			if (i == 1) {
				MonthVU2028PrevValueMedian = VU2028PrevValueMedian;
			}
			
			if (i > MonthDiff2028 && aaPolicyYear == YearDiff2028) {
				VU2028PrevValueMedian = 0.00;
				MonthVU2028PrevValueMedian = 0;
				return 0;
			}
			
			double tempPrev = MonthVU2028PrevValueMedian;
			if(i == MonthDiff2025 + 1 && aaPolicyYear == YearDiff2025){
				MonthVU2028PrevValueMedian = MonthVU2028PrevValueMedian + (temp2025Median * Fund2025ReinvestTo2028Fac/100.00);
			}
			else if(i == MonthDiff2023 + 1 && aaPolicyYear == YearDiff2023){
				MonthVU2028PrevValueMedian = MonthVU2028PrevValueMedian + (temp2023Median * Fund2023ReinvestTo2028Fac/100.00);
			}
			else{
				
			}
			
			if (VUCashValueNegative == TRUE && MonthFundValueOfTheYearValueTotalMedian != 0) {
				currentValue= ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVU2028Fac:aaPolicyYear  andMonth:i] * CYFactor +
							   [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnPremiumFactor:i] * [self ReturnVU2028Fac:aaPolicyYear  andMonth:i] * CYFactor +
							   [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnPremiumFactor:i] * [self ReturnVU2028Fac:aaPolicyYear  andMonth:i] * CYFactor) *
				pow(1 + [self ReturnVU2028InstMedian:@"A" ], 1.00/12.00) + MonthVU2028PrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
				pow(1 + [self ReturnVU2028InstMedian:@"A"],1.00/12.00) - ([self ReturnRegWithdrawal:aaPolicyYear] * 0) + (NegativeValueOfMaxCashFundMedian - 1) *
				MAX(0,(MonthFundValueOfTheYearVU2028ValueMedian_Basic/MonthFundValueOfTheYearValueTotalMedian));
			}
			else{
				currentValue = ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVU2028Fac:aaPolicyYear  andMonth:i] * CYFactor +
								[self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnPremiumFactor:i] * [self ReturnVU2028Fac:aaPolicyYear  andMonth:i] * CYFactor +
								[self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnPremiumFactor:i] * [self ReturnVU2028Fac:aaPolicyYear  andMonth:i] * CYFactor) *
				pow(1 + [self ReturnVU2028InstMedian:@"A" ], 1.00/12.00)+ MonthVU2028PrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
				pow(1 + [self ReturnVU2028InstMedian:@"A"], 1.00/12.00) - ([self ReturnRegWithdrawal:aaPolicyYear] * 0);
			}
			
			[self ReturnMonthEverCash60:aaPolicyYear andMonth:i];
			double EverCashValue = VU2028Value_EverCash1 * [self EverCash1_CashPaymentFactor:aaPolicyYear andMonth:i] +
			VU2028Value_EverCash6 * [self EverCash6_CashPaymentFactor:aaPolicyYear andMonth:i] +
			VU2028Value_EverCash60;
			
			if (i == MonthDiff2028 && aaPolicyYear == YearDiff2028) {
				if (Fund2028PartialReinvest != 100) {
					MonthFundMaturityValue2028_Flat = MonthVU2028PrevValueMedian * (100 - Fund2028PartialReinvest)/100.00;
					
					temp2028Median = currentValue * (100 - Fund2028PartialReinvest)/100.00 + EverCashValue;
					Withdrawtemp2028Median = currentValue * (Fund2028PartialReinvest)/100.00;
				}
				else{
                    Withdrawtemp2028Median = currentValue * (Fund2028PartialReinvest)/100.00;
					MonthFundMaturityValue2028_Flat = 0;
				}
				
				if (aaRound == 2) {
					MonthVU2028PrevValueMedian = 0;
				}
				else{
					MonthVU2028PrevValueMedian = tempPrev;
				}
			}
			else{
				if (aaRound == 2) {
					MonthVU2028PrevValueMedian = currentValue + EverCashValue;
				}
				else{
					MonthVU2028PrevValueMedian = tempPrev;
				}
				
			}
			
            
			
			if (i == 12 && aaRound == 2) {
				VU2028PrevValueMedian = MonthVU2028PrevValueMedian;
				
				if(MonthDiff2028 == 12 && aaPolicyYear == YearDiff2028){
					VU2028PrevValueMedian = 0 + EverCashValue;
				}
				else if(MonthDiff2025 == 12 && aaPolicyYear == YearDiff2025){
					VU2028PrevValueMedian = VU2028PrevValueMedian +  (temp2025Median * Fund2025ReinvestTo2028Fac/100.00);
				}
				else{
					//VU2028PrevValueMedian = VU2028PrevValueMedian + EverCashValue;
				}
			}
			
			if (i == 12 && aaRound == 2) {
				if(MonthDiff2028 == 12 && aaPolicyYear == YearDiff2028){
					return 0 + EverCashValue;
				}
				else if(MonthDiff2025 == 12 && aaPolicyYear == YearDiff2025){
					return currentValue + (temp2025Median * Fund2025ReinvestTo2028Fac/100.00) + EverCashValue;
				}
				else{
					return currentValue + EverCashValue;
				}
				//return currentValue + VU2028Value_EverCash1 + VU2028Value_EverCash6 + VU2028Value_EverCash60;
			}
			else{
				return currentValue + EverCashValue;
			}
			
		}
		else{
			if (VUCashValueNegative == TRUE && FundValueOfTheYearValueTotalMedian != 0) {
				currentValue= ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear]) + IncreasePrem) * [self ReturnVU2028Fac:aaPolicyYear] * CYFactor +
							   [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnVU2028Fac:aaPolicyYear] * CYFactor +
							   [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnVU2028Fac:aaPolicyYear] * CYFactor) *
				(1 + VU2028InstMedian) + VU2028PrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVU2028InstMedian:@"A"]) -
				([self ReturnRegWithdrawal:aaPolicyYear] * 0) + (NegativeValueOfMaxCashFundMedian - 1) *
				MAX(0,(FundValueOfTheYearVU2028ValueMedian_Basic/FundValueOfTheYearValueTotalMedian));
			}
			else{
				if (aaRound == 1) {
					currentValue = ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear]) + IncreasePrem) * [self ReturnVU2028Fac:aaPolicyYear] * CYFactor +
									[self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnVU2028Fac:aaPolicyYear] * CYFactor +
									[self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnVU2028Fac:aaPolicyYear] * CYFactor) *
					(1 + VU2028InstMedian) + VU2028PrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVU2028InstMedian:@"A"]) -
					([self ReturnRegWithdrawal:aaPolicyYear] * 0);
					VU2028ValueMedian = currentValue;
				}
				else{
					currentValue = VU2028ValueMedian;
				}
				
			}
			
			if (ECAR60Exist == TRUE) {
				if (Age + aaPolicyYear < 60) {
					CashFactor = 0.00;
				}
				else if(Age + aaPolicyYear == 60){
					CashFactor = 1.00;
				}
				else{
					double tempValue = [self CalculateInst:@"M" andFund:@"2028" andLowMediumHigh:@"M"];
					
					CashFactor = 12 * (1 + tempValue)/(pow((1 + [self ReturnVU2028InstMedian:@"A"]), (1.00/12.00)));
				}
			}
            
			
			if (aaRound == 2) {
				VU2028PrevValueMedian = currentValue + VU2028Value_EverCash1 + VU2028Value_EverCash6  + (VU2028Value_EverCash60 * CashFactor);
			}
			
			return currentValue + VU2028Value_EverCash1 + VU2028Value_EverCash6  + (VU2028Value_EverCash60 * CashFactor);
		}
		
	}
	
}

-(double)ReturnVU2028ValueLow :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andRound:(NSInteger)aaRound andMonth:(int)i{
	
	double currentValue;
	if (aaPolicyYear > YearDiff2028) {
		VU2028PrevValueLow = 0.00;
		return 0;
	}
	else{
		if ([aaYearOrMonth isEqualToString:@"M"]) {
			
			if (i == 1) {
				MonthVU2028PrevValueLow = VU2028PrevValueLow;
			}
			
			if (i > MonthDiff2028 && aaPolicyYear == YearDiff2028) {
				VU2028PrevValueLow = 0.00;
				MonthVU2028PrevValueLow = 0;
				return 0;
			}
			
			double tempPrev = MonthVU2028PrevValueLow;
			if(i == MonthDiff2025 + 1 && aaPolicyYear == YearDiff2025){
				MonthVU2028PrevValueLow = MonthVU2028PrevValueLow + (temp2025Low * Fund2025ReinvestTo2028Fac/100.00);
			}
			else if(i == MonthDiff2023 + 1 && aaPolicyYear == YearDiff2023){
				MonthVU2028PrevValueLow = MonthVU2028PrevValueLow + (temp2023Low * Fund2023ReinvestTo2028Fac/100.00);
			}
			else{
				
			}
			
			if (VUCashValueNegative == TRUE && MonthFundValueOfTheYearValueTotalLow != 0) {
				currentValue= ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVU2028Fac:aaPolicyYear  andMonth:i] * CYFactor +
							   [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnPremiumFactor:i] * [self ReturnVU2028Fac:aaPolicyYear  andMonth:i] * CYFactor +
							   [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnPremiumFactor:i] * [self ReturnVU2028Fac:aaPolicyYear  andMonth:i] * CYFactor) *
				pow(1 + [self ReturnVU2028InstLow:@"A" ], 1.00/12.00) + MonthVU2028PrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
				pow(1 + [self ReturnVU2028InstLow:@"A"],1.00/12.00) - ([self ReturnRegWithdrawal:aaPolicyYear] * 0) + (NegativeValueOfMaxCashFundLow - 1) *
				MAX(0,(MonthFundValueOfTheYearVU2028ValueLow_Basic/MonthFundValueOfTheYearValueTotalLow));
			}
			else{
				currentValue = ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVU2028Fac:aaPolicyYear  andMonth:i] * CYFactor +
								[self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnPremiumFactor:i] * [self ReturnVU2028Fac:aaPolicyYear  andMonth:i] * CYFactor +
								[self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnPremiumFactor:i] * [self ReturnVU2028Fac:aaPolicyYear  andMonth:i] * CYFactor) *
				pow(1 + [self ReturnVU2028InstLow:@"A" ], 1.00/12.00)+ MonthVU2028PrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
				pow(1 + [self ReturnVU2028InstLow:@"A"], 1.00/12.00) - ([self ReturnRegWithdrawal:aaPolicyYear] * 0);
			}
			
			[self ReturnMonthEverCash60:aaPolicyYear andMonth:i];
			double EverCashValue = VU2028Value_EverCash1 * [self EverCash1_CashPaymentFactor:aaPolicyYear andMonth:i] +
			VU2028Value_EverCash6 * [self EverCash6_CashPaymentFactor:aaPolicyYear andMonth:i] +
			VU2028Value_EverCash60;
			
			if (i == MonthDiff2028 && aaPolicyYear == YearDiff2028) {
				if (Fund2028PartialReinvest != 100) {
					MonthFundMaturityValue2028_Bear = MonthVU2028PrevValueLow * (100 - Fund2028PartialReinvest)/100.00;
					
					temp2028Low = currentValue * (100 - Fund2028PartialReinvest)/100.00 + EverCashValue;
					Withdrawtemp2028Low = currentValue * (Fund2028PartialReinvest)/100.00;
				}
				else{
                    Withdrawtemp2028Low = currentValue * (Fund2028PartialReinvest)/100.00;
					MonthFundMaturityValue2028_Bear = 0;
				}
				
				if (aaRound == 2) {
					MonthVU2028PrevValueLow = 0;
				}
				else{
					MonthVU2028PrevValueLow = tempPrev;
				}
				
			}
			else{
				if (aaRound == 2) {
					MonthVU2028PrevValueLow = currentValue + EverCashValue;
				}
				else{
					MonthVU2028PrevValueLow = tempPrev;
				}
				
			}
			
            
			
			if (i == 12 && aaRound == 2) {
				//VU2028PrevValueLow = MonthVU2028PrevValueLow + VU2028Value_EverCash1 + VU2028Value_EverCash6 + VU2028Value_EverCash60;
				VU2028PrevValueLow = MonthVU2028PrevValueLow;
				
				if(MonthDiff2028 == 12 && aaPolicyYear == YearDiff2028){
					VU2028PrevValueLow = 0 + EverCashValue;
				}
				else if(MonthDiff2025 == 12 && aaPolicyYear == YearDiff2025){
					VU2028PrevValueLow = VU2028PrevValueLow +  (temp2025Low * Fund2025ReinvestTo2028Fac/100.00);
				}
				else{
					//VU2028PrevValueLow = VU2028PrevValueLow + EverCashValue;
				}
			}
			
			if (i == 12 && aaRound == 2) {
				//return currentValue + VU2028Value_EverCash1 + VU2028Value_EverCash6 + VU2028Value_EverCash60;
				if(MonthDiff2028 == 12 && aaPolicyYear == YearDiff2028){
					return 0 + EverCashValue;
				}
				else if(MonthDiff2025 == 12 && aaPolicyYear == YearDiff2025){
					return currentValue +  (temp2025Low * Fund2025ReinvestTo2028Fac/100.00) + EverCashValue;
				}
				else{
					return currentValue + EverCashValue;
				}
			}
			else{
				return currentValue + EverCashValue;
			}
			
		}
		else{
			if (VUCashValueNegative == TRUE && FundValueOfTheYearValueTotalLow != 0) {
				currentValue= ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear]) + IncreasePrem) * [self ReturnVU2028Fac:aaPolicyYear] * CYFactor +
							   [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnVU2028Fac:aaPolicyYear] * CYFactor +
							   [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnVU2028Fac:aaPolicyYear] * CYFactor) *
				(1 + VU2028InstLow) + VU2028PrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVU2028InstLow:@"A"]) -
				([self ReturnRegWithdrawal:aaPolicyYear] * 0) + (NegativeValueOfMaxCashFundLow - 1) *
				MAX(0,(FundValueOfTheYearVU2028ValueLow_Basic/FundValueOfTheYearValueTotalLow));
			}
			else{
				if (aaRound == 1) {
					currentValue = ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear]) + IncreasePrem) * [self ReturnVU2028Fac:aaPolicyYear] * CYFactor +
									[self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnVU2028Fac:aaPolicyYear] * CYFactor +
									[self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnVU2028Fac:aaPolicyYear] * CYFactor) *
					(1 + VU2028InstLow) + VU2028PrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVU2028InstLow:@"A"]) -
					([self ReturnRegWithdrawal:aaPolicyYear] * 0);
					VU2028ValueLow = currentValue;
				}
				else{
					currentValue = VU2028ValueLow;
				}
				
			}
			
			if (ECAR60Exist == TRUE) {
				if (Age + aaPolicyYear < 60) {
					CashFactor = 0.00;
				}
				else if(Age + aaPolicyYear == 60){
					CashFactor = 1.00;
				}
				else{
					double tempValue = [self CalculateInst:@"M" andFund:@"2028" andLowMediumHigh:@"L"];
					
					CashFactor = 12 * (1 + tempValue)/(pow((1 + [self ReturnVU2028InstLow:@"A"]), (1.00/12.00)));
				}
			}
            
			
			if (aaRound == 2) {
				VU2028PrevValueLow = currentValue + VU2028Value_EverCash1 + VU2028Value_EverCash6  + (VU2028Value_EverCash60 * CashFactor);
			}
			
			return currentValue + VU2028Value_EverCash1 + VU2028Value_EverCash6  + (VU2028Value_EverCash60 * CashFactor);
		}
		
	}
	
}

-(double)ReturnVU2030ValueHigh :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andRound:(NSInteger)aaRound andMonth:(int)i{
	
	double currentValue;
	if (aaPolicyYear > YearDiff2030) {
		VU2030PrevValuehigh = 0.00;
		return 0;
	}
	else{
		if ([aaYearOrMonth isEqualToString:@"M"]) {
			
			if (i == 1) {
				MonthVU2030PrevValuehigh = VU2030PrevValuehigh;
			}
			
			if (i > MonthDiff2030 && aaPolicyYear == YearDiff2030) {
				VU2030PrevValuehigh = 0.00;
				MonthVU2030PrevValuehigh = 0;
				return 0;
			}
			
			double tempPrev = MonthVU2030PrevValuehigh;
			if(i == MonthDiff2028 + 1 && aaPolicyYear == YearDiff2028){
				MonthVU2030PrevValuehigh = MonthVU2030PrevValuehigh + (temp2028High * Fund2028ReinvestTo2030Fac/100.00);
			}
			else if(i == MonthDiff2025 + 1 && aaPolicyYear == YearDiff2025){
				MonthVU2030PrevValuehigh = MonthVU2030PrevValuehigh + (temp2025High * Fund2025ReinvestTo2030Fac/100.00);
			}
			else if(i == MonthDiff2023 + 1 && aaPolicyYear == YearDiff2023){
				MonthVU2030PrevValuehigh = MonthVU2030PrevValuehigh + (temp2023High * Fund2023ReinvestTo2030Fac/100.00);
			}
			else{
				
			}
			
			if (VUCashValueNegative == TRUE && MonthFundValueOfTheYearValueTotalHigh != 0) {
				currentValue= ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVU2030Fac:aaPolicyYear  andMonth:i] * CYFactor +
							   [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnPremiumFactor:i] * [self ReturnVU2030Fac:aaPolicyYear  andMonth:i] * CYFactor +
							   [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnPremiumFactor:i] * [self ReturnVU2030Fac:aaPolicyYear  andMonth:i] * CYFactor) *
				pow(1 + [self ReturnVU2030InstHigh:@"A" ], 1.00/12.00) + MonthVU2030PrevValuehigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
				pow(1 + [self ReturnVU2030InstHigh:@"A"], 1.00/12.00) - ([self ReturnRegWithdrawal:aaPolicyYear] * 0) + (NegativeValueOfMaxCashFundHigh - 1) *
				//MAX(0,(MonthFundValueOfTheYearVU2030ValueHigh_Basic/MonthFundValueOfTheYearValueTotalHigh));
				MAX(0,(MonthFundValueOfTheYearVU2030ValueHigh_Basic/MonthFundValueOfTheYearValueTotalHigh));
				
				
			}
			else{
				currentValue = ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVU2030Fac:aaPolicyYear  andMonth:i] * CYFactor +
								[self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnPremiumFactor:i] * [self ReturnVU2030Fac:aaPolicyYear  andMonth:i] * CYFactor +
								[self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnPremiumFactor:i] * [self ReturnVU2030Fac:aaPolicyYear  andMonth:i] * CYFactor) *
				pow(1 + [self ReturnVU2030InstHigh:@"A" ], 1.00/12.00) + MonthVU2030PrevValuehigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
				pow(1 + [self ReturnVU2030InstHigh:@"A"], 1.00/12.00) - ([self ReturnRegWithdrawal:aaPolicyYear] * 0);
				
			}
			
			double EverCashValue = VU2030Value_EverCash1 * [self EverCash1_CashPaymentFactor:aaPolicyYear andMonth:i] +
			VU2030Value_EverCash6 * [self EverCash6_CashPaymentFactor:aaPolicyYear andMonth:i] +
			VU2030Value_EverCash60;
			
			if (i == MonthDiff2030 && aaPolicyYear == YearDiff2030) {
				if (Fund2030PartialReinvest != 100) {
					MonthFundMaturityValue2030_Bull = MonthVU2030PrevValuehigh * (100 - Fund2030PartialReinvest)/100.00;
					
					temp2030High = currentValue * (100 - Fund2030PartialReinvest)/100.00 + EverCashValue;
					Withdrawtemp2030High = currentValue * (Fund2030PartialReinvest)/100.00;
				}
				else{
                    Withdrawtemp2030High = currentValue * (Fund2030PartialReinvest)/100.00;
					MonthFundMaturityValue2030_Bull = 0;
				}
				if (aaRound == 2) {
					MonthVU2030PrevValuehigh = 0;
				}
				
			}
			else{
				if (aaRound == 2) {
					MonthVU2030PrevValuehigh = currentValue + EverCashValue;
				}
				else{
					MonthVU2030PrevValuehigh = tempPrev;
				}
				
			}
			
            
			
			if (aaRound == 2 && i == 12) {
				VU2030PrevValuehigh = MonthVU2030PrevValuehigh;
				
				if(MonthDiff2030 == 12 && aaPolicyYear == YearDiff2030){
					VU2030PrevValuehigh = 0 + EverCashValue;
				}
				else if(MonthDiff2028 == 12 && aaPolicyYear == YearDiff2028){
					VU2030PrevValuehigh = VU2030PrevValuehigh +  (temp2028High * Fund2028ReinvestTo2030Fac/100.00) ;
				}
				else if(MonthDiff2025 == 12 && aaPolicyYear == YearDiff2025){
					VU2030PrevValuehigh = VU2030PrevValuehigh +  (temp2025High * Fund2025ReinvestTo2030Fac/100.00) ;
				}
				else{
					//VU2030PrevValuehigh = VU2030PrevValuehigh + EverCashValue;
				}
				
			}
			
			if (aaRound == 2 && i == 12) {
				
				if(MonthDiff2030 == 12 && aaPolicyYear == YearDiff2030){
					return 0 + EverCashValue;
				}
				else if(MonthDiff2028 == 12 && aaPolicyYear == YearDiff2028){
					return currentValue + (temp2028High * Fund2028ReinvestTo2030Fac/100.00) + EverCashValue;
				}
				else if(MonthDiff2025 == 12 && aaPolicyYear == YearDiff2025){
					return currentValue + (temp2025High * Fund2025ReinvestTo2030Fac/100.00) + EverCashValue;
				}
				else{
					return currentValue + EverCashValue;
				}
				
				//return currentValue + VU2030Value_EverCash1 + VU2030Value_EverCash6 + VU2030Value_EverCash60;
			}
			else{
				return currentValue + EverCashValue;
			}
			
			
		}
		else{
			
			if (VUCashValueNegative == TRUE && FundValueOfTheYearValueTotalHigh != 0) {
				currentValue= ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear]) + IncreasePrem) * [self ReturnVU2030Fac:aaPolicyYear] * CYFactor +
							   [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnVU2030Fac:aaPolicyYear] * CYFactor +
							   [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnVU2030Fac:aaPolicyYear] * CYFactor) *
				(1 + VU2030InstHigh) + VU2030PrevValuehigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVU2030InstHigh:@"A"]) -
				([self ReturnRegWithdrawal:aaPolicyYear] * 0) + (NegativeValueOfMaxCashFundHigh - 1) *
				MAX(0,(FundValueOfTheYearVU2030ValueHigh_Basic/FundValueOfTheYearValueTotalHigh));
			}
			else{
				if (aaRound == 1) {
					currentValue = ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear]) + IncreasePrem) * [self ReturnVU2030Fac:aaPolicyYear] * CYFactor +
									[self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnVU2030Fac:aaPolicyYear] * CYFactor +
									[self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnVU2030Fac:aaPolicyYear] * CYFactor) *
					(1 + VU2030InstHigh) + VU2030PrevValuehigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVU2030InstHigh:@"A"]) -
					([self ReturnRegWithdrawal:aaPolicyYear] * 0);
					VU2030ValueHigh = currentValue;
				}
				else{
					currentValue = VU2030ValueHigh;
				}
				
			}
			
			if (ECAR60Exist == TRUE) {
				if (Age + aaPolicyYear < 60) {
					CashFactor = 0.00;
				}
				else if(Age + aaPolicyYear == 60){
					CashFactor = 1.00;
				}
				else{
					double tempValue = [self CalculateInst:@"M" andFund:@"2030" andLowMediumHigh:@"H"];
					
					CashFactor = 12 * (1 + tempValue)/(pow((1 + [self ReturnVU2030InstHigh:@"A"]), (1.00/12.00)));
				}
			}
			
			if (aaRound == 2) {
				VU2030PrevValuehigh = currentValue + VU2030Value_EverCash1 + VU2030Value_EverCash6  + (VU2030Value_EverCash60 * CashFactor);
			}
			
			return currentValue + VU2030Value_EverCash1 + VU2030Value_EverCash6  + (VU2030Value_EverCash60 * CashFactor);
			
		}
		
	}
	
	// below part to be edit later
}

-(double)ReturnVU2030ValueMedian :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andRound:(NSInteger)aaRound andMonth:(int)i{
	
	double currentValue;
	if (aaPolicyYear > YearDiff2030) {
		VU2030PrevValueMedian = 0.00;
		return 0;
	}
	else{
		if ([aaYearOrMonth isEqualToString:@"M"]) {
			
			
			if (i == 1) {
				MonthVU2030PrevValueMedian = VU2030PrevValueMedian;
			}
			
			if (i > MonthDiff2030 && aaPolicyYear == YearDiff2030) {
				VU2030PrevValueMedian = 0.00;
				MonthVU2030PrevValueMedian = 0;
				return 0;
			}
			
			double tempPrev = MonthVU2030PrevValueMedian;
			if(i == MonthDiff2028 + 1 && aaPolicyYear == YearDiff2028){
				MonthVU2030PrevValueMedian = MonthVU2030PrevValueMedian + (temp2028Median * Fund2028ReinvestTo2030Fac/100.00);
			}
			else if(i == MonthDiff2025 + 1 && aaPolicyYear == YearDiff2025){
				MonthVU2030PrevValueMedian = MonthVU2030PrevValueMedian + (temp2025Median * Fund2025ReinvestTo2030Fac/100.00);
			}
			else if(i == MonthDiff2023 + 1 && aaPolicyYear == YearDiff2023){
				MonthVU2030PrevValueMedian = MonthVU2030PrevValueMedian + (temp2023Median * Fund2023ReinvestTo2030Fac/100.00);
			}
			else{
				
			}
			
			if (VUCashValueNegative ==TRUE && MonthFundValueOfTheYearValueTotalMedian != 0) {
				currentValue= ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVU2030Fac:aaPolicyYear andMonth:i] * CYFactor +
							   [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnPremiumFactor:i] * [self ReturnVU2030Fac:aaPolicyYear  andMonth:i] * CYFactor +
							   [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnPremiumFactor:i] * [self ReturnVU2030Fac:aaPolicyYear  andMonth:i] * CYFactor) *
				pow(1 + [self ReturnVU2030InstMedian:@"A" ], 1.00/12.00) + MonthVU2030PrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
				pow(1 + [self ReturnVU2030InstMedian:@"A"], 1.00/12.00) - ([self ReturnRegWithdrawal:aaPolicyYear] * 0) + (NegativeValueOfMaxCashFundMedian - 1) *
				MAX(0,(MonthFundValueOfTheYearVU2030ValueMedian_Basic/MonthFundValueOfTheYearValueTotalMedian));
			}
			else{
				currentValue = ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear]* [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVU2030Fac:aaPolicyYear andMonth:i] * CYFactor +
								[self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnPremiumFactor:i] * [self ReturnVU2030Fac:aaPolicyYear  andMonth:i] * CYFactor +
								[self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnPremiumFactor:i] * [self ReturnVU2030Fac:aaPolicyYear  andMonth:i] * CYFactor) *
				pow(1 + [self ReturnVU2030InstMedian:@"A" ], 1.00/12.00) + MonthVU2030PrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
				pow(1 + [self ReturnVU2030InstMedian:@"A"], 1.00/12.00) - ([self ReturnRegWithdrawal:aaPolicyYear] * 0);
			}
			
			double EverCashValue = VU2030Value_EverCash1 * [self EverCash1_CashPaymentFactor:aaPolicyYear andMonth:i] +
			VU2030Value_EverCash6 * [self EverCash6_CashPaymentFactor:aaPolicyYear andMonth:i] +
			VU2030Value_EverCash60;
			
			if (i == MonthDiff2030 && aaPolicyYear == YearDiff2030) {
				if (Fund2030PartialReinvest != 100) {
					MonthFundMaturityValue2030_Flat = MonthVU2030PrevValueMedian * (100 - Fund2030PartialReinvest)/100.00;
					temp2030Median = currentValue * (100 - Fund2030PartialReinvest)/100.00 + EverCashValue;
					Withdrawtemp2030Median = currentValue * (Fund2030PartialReinvest)/100.00;
				}
				else{
                    Withdrawtemp2030Median = currentValue * (Fund2030PartialReinvest)/100.00;
					MonthFundMaturityValue2030_Flat = 0;
				}
				if (aaRound == 2) {
					MonthVU2030PrevValueMedian = 0;
				}
				
			}
			else{
				if (aaRound == 2) {
					MonthVU2030PrevValueMedian = currentValue + EverCashValue;
				}
				else{
					MonthVU2030PrevValueMedian = tempPrev;
				}
			}
			
            
			
			if (aaRound == 2 && i == 12) {
				//VU2030PrevValueMedian = MonthVU2030PrevValueMedian + VU2030Value_EverCash1 + VU2030Value_EverCash6 + VU2030Value_EverCash60;
				VU2030PrevValueMedian = MonthVU2030PrevValueMedian;
				
				if(MonthDiff2030 == 12 && aaPolicyYear == YearDiff2030){
					VU2030PrevValueMedian = 0 + EverCashValue;
				}
				else if(MonthDiff2028 == 12 && aaPolicyYear == YearDiff2028){
					VU2030PrevValueMedian = VU2030PrevValueMedian +  (temp2028Median * Fund2028ReinvestTo2030Fac/100.00) ;
				}
				else if(MonthDiff2025 == 12 && aaPolicyYear == YearDiff2025){
					VU2030PrevValueMedian = VU2030PrevValueMedian +  (temp2025Median * Fund2025ReinvestTo2030Fac/100.00) ;
				}
				else{
					//VU2030PrevValueMedian = VU2030PrevValueMedian + EverCashValue;
				}
			}
			
			if (aaRound == 2 && i == 12) {
				if(MonthDiff2030 == 12 && aaPolicyYear == YearDiff2030){
					return 0 + EverCashValue;
				}
				else if(MonthDiff2028 == 12 && aaPolicyYear == YearDiff2028){
					return currentValue +  (temp2028Median * Fund2028ReinvestTo2030Fac/100.00) + EverCashValue;
				}
				else if(MonthDiff2025 == 12 && aaPolicyYear == YearDiff2025){
					return currentValue +  (temp2025Median * Fund2025ReinvestTo2030Fac/100.00) + EverCashValue;
				}
				else{
					return currentValue + EverCashValue;
				}
				//return currentValue + EverCashValue;
			}
			else
			{
				return currentValue + EverCashValue;
			}
			
			
		}
		else{
			if (VUCashValueNegative == TRUE && FundValueOfTheYearValueTotalMedian != 0) {
				currentValue= ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear]) + IncreasePrem) * [self ReturnVU2030Fac:aaPolicyYear] * CYFactor +
							   [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnVU2030Fac:aaPolicyYear] * CYFactor +
							   [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnVU2030Fac:aaPolicyYear] * CYFactor) *
				(1 + VU2030InstMedian) + VU2030PrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVU2030InstMedian:@"A"]) -
				([self ReturnRegWithdrawal:aaPolicyYear] * 0) + (NegativeValueOfMaxCashFundMedian - 1) *
				MAX(0,(FundValueOfTheYearVU2030ValueMedian_Basic/FundValueOfTheYearValueTotalMedian));
			}
			else{
				if (aaRound == 1) {
					currentValue = ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear]) + IncreasePrem) * [self ReturnVU2030Fac:aaPolicyYear] * CYFactor +
									[self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnVU2030Fac:aaPolicyYear] * CYFactor +
									[self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnVU2030Fac:aaPolicyYear] * CYFactor) *
					(1 + VU2030InstMedian) + VU2030PrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVU2030InstMedian:@"A"]) -
					([self ReturnRegWithdrawal:aaPolicyYear] * 0);
					VU2030ValueMedian = currentValue;
				}
				else{
					currentValue = VU2030ValueMedian;
				}
				
			}
			
			if (ECAR60Exist == TRUE) {
				if (Age + aaPolicyYear < 60) {
					CashFactor = 0.00;
				}
				else if(Age + aaPolicyYear == 60){
					CashFactor = 1.00;
				}
				else{
					double tempValue = [self CalculateInst:@"M" andFund:@"2030" andLowMediumHigh:@"M"];
					
					CashFactor = 12 * (1 + tempValue)/(pow((1 + [self ReturnVU2030InstMedian:@"A"]), (1.00/12.00)));
				}
			}
			
			if (aaRound == 2) {
				VU2030PrevValueMedian = currentValue + VU2030Value_EverCash1 + VU2030Value_EverCash6  + (VU2030Value_EverCash60 * CashFactor);
			}
			
			return currentValue + VU2030Value_EverCash1 + VU2030Value_EverCash6  + (VU2030Value_EverCash60 * CashFactor);
			
		}
		
	}
	
	// below part to be edit later
}

-(double)ReturnVU2030ValueLow :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andRound:(NSInteger)aaRound andMonth:(int)i{
	
	double currentValue;
	if (aaPolicyYear > YearDiff2030) {
		VU2030PrevValueLow = 0.00;
		return 0;
	}
	else{
		if ([aaYearOrMonth isEqualToString:@"M"]) {
			
			if (i == 1) {
				MonthVU2030PrevValueLow = VU2030PrevValueLow;
			}
			
			if (i > MonthDiff2030 && aaPolicyYear == YearDiff2030) {
				VU2030PrevValueLow = 0.00;
				MonthVU2030PrevValueLow = 0;
				return 0;
			}
			
			double tempPrev = MonthVU2030PrevValueLow;
			if(i == MonthDiff2028 + 1 && aaPolicyYear == YearDiff2028){
				MonthVU2030PrevValueLow = MonthVU2030PrevValueLow + (temp2028Low * Fund2028ReinvestTo2030Fac/100.00);
			}
			else if(i == MonthDiff2025 + 1 && aaPolicyYear == YearDiff2025){
				MonthVU2030PrevValueLow = MonthVU2030PrevValueLow + (temp2025Low * Fund2025ReinvestTo2030Fac/100.00);
			}
			else if(i == MonthDiff2023 + 1 && aaPolicyYear == YearDiff2023){
				MonthVU2030PrevValueLow = MonthVU2030PrevValueLow + (temp2023Low * Fund2023ReinvestTo2030Fac/100.00);
			}
			else{
				
			}
			
			if (VUCashValueNegative == TRUE && MonthFundValueOfTheYearValueTotalLow != 0) {
				currentValue= ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVU2030Fac:aaPolicyYear andMonth:i] * CYFactor +
							   [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnPremiumFactor:i] * [self ReturnVU2030Fac:aaPolicyYear andMonth:i] * CYFactor +
							   [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnPremiumFactor:i] * [self ReturnVU2030Fac:aaPolicyYear andMonth:i] * CYFactor) *
				pow(1 + [self ReturnVU2030InstLow:@"A" ], 1.00/12.00) + MonthVU2030PrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
				pow(1 + [self ReturnVU2030InstLow:@"A"], 1.00/12.00) - ([self ReturnRegWithdrawal:aaPolicyYear] * 0) + (NegativeValueOfMaxCashFundLow - 1) *
				MAX(0,(MonthFundValueOfTheYearVU2030ValueLow_Basic/MonthFundValueOfTheYearValueTotalLow));
			}
			else{
				currentValue = ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear]* [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVU2030Fac:aaPolicyYear andMonth:i] * CYFactor +
								[self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnPremiumFactor:i] * [self ReturnVU2030Fac:aaPolicyYear andMonth:i] * CYFactor +
								[self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnPremiumFactor:i] * [self ReturnVU2030Fac:aaPolicyYear andMonth:i] * CYFactor) *
				pow(1 + [self ReturnVU2030InstLow:@"A" ], 1.00/12.00) + MonthVU2030PrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
				pow(1 + [self ReturnVU2030InstLow:@"A"], 1.00/12.00) - ([self ReturnRegWithdrawal:aaPolicyYear] * 0);
			}
			
			double EverCashValue = VU2030Value_EverCash1 * [self EverCash1_CashPaymentFactor:aaPolicyYear andMonth:i] +
			VU2030Value_EverCash6 * [self EverCash6_CashPaymentFactor:aaPolicyYear andMonth:i] +
			VU2030Value_EverCash60;
			
			if (i == MonthDiff2030 && aaPolicyYear == YearDiff2030) {
				if (Fund2030PartialReinvest != 100) {
					MonthFundMaturityValue2030_Bear = MonthVU2030PrevValueLow * (100 - Fund2030PartialReinvest)/100.00;
					temp2030Low = currentValue * (100 - Fund2030PartialReinvest)/100.00 + EverCashValue;
					Withdrawtemp2030Low = currentValue * (Fund2030PartialReinvest)/100.00;
				}
				else{
                    Withdrawtemp2030Low = currentValue * (Fund2030PartialReinvest)/100.00;
					MonthFundMaturityValue2030_Bear = 0;
				}
				if (aaRound == 2) {
					MonthVU2030PrevValueLow = 0;
				}
				
			}
			else{
				if (aaRound == 2) {
					MonthVU2030PrevValueLow = currentValue + EverCashValue;
				}
				else{
					MonthVU2030PrevValueLow = tempPrev;
				}
				
			}
			
            
			
			if (aaRound == 2 && i == 12) {
				//VU2030PrevValueLow = MonthVU2030PrevValueLow + VU2030Value_EverCash1 + VU2030Value_EverCash6 + VU2030Value_EverCash60;
				
				VU2030PrevValueLow = MonthVU2030PrevValueLow;
				
				if(MonthDiff2030 == 12 && aaPolicyYear == YearDiff2030){
					VU2030PrevValueLow = 0 + EverCashValue;
				}
				else if(MonthDiff2028 == 12 && aaPolicyYear == YearDiff2028){
					VU2030PrevValueLow = VU2030PrevValueLow +  (temp2028Low * Fund2028ReinvestTo2030Fac/100.00);
				}
				else if(MonthDiff2025 == 12 && aaPolicyYear == YearDiff2025){
					VU2030PrevValueLow = VU2030PrevValueLow +  (temp2025Low * Fund2025ReinvestTo2030Fac/100.00);
				}
				else{
					
				}
			}
			
			if (aaRound == 2 && i == 12) {
				
				if(MonthDiff2030 == 12 && aaPolicyYear == YearDiff2030){
					return 0 + EverCashValue;
				}
				else if(MonthDiff2028 == 12 && aaPolicyYear == YearDiff2028){
					return currentValue +  (temp2028Low * Fund2028ReinvestTo2030Fac/100.00) + EverCashValue;
				}
				else if(MonthDiff2025 == 12 && aaPolicyYear == YearDiff2025){
					return currentValue +  (temp2025Low * Fund2025ReinvestTo2030Fac/100.00) + EverCashValue;
				}
				else{
					return currentValue + EverCashValue;
				}
				
				
			}
			else{
				return currentValue + EverCashValue;
			}
			
			
		}
		else{
			if (VUCashValueNegative == TRUE && FundValueOfTheYearValueTotalLow != 0) {
				currentValue= ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear]) + IncreasePrem) * [self ReturnVU2030Fac:aaPolicyYear] * CYFactor +
							   [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnVU2030Fac:aaPolicyYear] * CYFactor +
							   [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnVU2030Fac:aaPolicyYear] * CYFactor) *
				(1 + VU2030InstLow) + VU2030PrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVU2030InstLow:@"A"]) -
				([self ReturnRegWithdrawal:aaPolicyYear] * 0) + (NegativeValueOfMaxCashFundLow - 1) *
				MAX(0,(FundValueOfTheYearVU2030ValueLow_Basic/FundValueOfTheYearValueTotalLow));
			}
			else{
				if (aaRound == 1) {
					currentValue = ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear]) + IncreasePrem) * [self ReturnVU2030Fac:aaPolicyYear] * CYFactor +
									[self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnVU2030Fac:aaPolicyYear] * CYFactor +
									[self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnVU2030Fac:aaPolicyYear] * CYFactor) *
					(1 + VU2030InstLow) + VU2030PrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVU2030InstLow:@"A"]) -
					([self ReturnRegWithdrawal:aaPolicyYear] * 0);
					VU2030ValueLow = currentValue;
				}
				else{
					currentValue = VU2030ValueLow;
				}
				
			}
			
			if (ECAR60Exist == TRUE) {
				if (Age + aaPolicyYear < 60) {
					CashFactor = 0.00;
				}
				else if(Age + aaPolicyYear == 60){
					CashFactor = 1.00;
				}
				else{
					double tempValue = [self CalculateInst:@"M" andFund:@"2030" andLowMediumHigh:@"L"];
					
					CashFactor = 12 * (1 + tempValue)/(pow((1 + [self ReturnVU2030InstLow:@"A"]), (1.00/12.00)));
				}
			}
			
			if (aaRound == 2) {
				VU2030PrevValueLow = currentValue + VU2030Value_EverCash1 + VU2030Value_EverCash6  + (VU2030Value_EverCash60 * CashFactor);
			}
			
			return currentValue + VU2030Value_EverCash1 + VU2030Value_EverCash6  + (VU2030Value_EverCash60 * CashFactor);
			
		}
		
	}
	
	// below part to be edit later
}

-(double)ReturnVU2035ValueHigh :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andRound:(NSInteger)aaRound andMonth:(NSInteger)i{
	
	double currentValue;
	if (aaPolicyYear > YearDiff2035) {
		VU2035PrevValuehigh = 0.00;
		return 0;
	}
	else{
		if ([aaYearOrMonth isEqualToString:@"M"]) {
			
			
			if (i == 1) {
				MonthVU2035PrevValuehigh = VU2035PrevValuehigh;
			}
			
			if (i > MonthDiff2035 && aaPolicyYear == YearDiff2035) {
				MonthVU2035PrevValuehigh = 0;
				VU2035PrevValuehigh = 0.00;
				return 0;
			}
			
			double tempPrev = MonthVU2035PrevValuehigh;
			if(i == MonthDiff2030 + 1 && aaPolicyYear == YearDiff2030){
				MonthVU2035PrevValuehigh = MonthVU2035PrevValuehigh + (temp2030High * Fund2030ReinvestTo2035Fac/100.00);
			}
			else if(i == MonthDiff2028 + 1 && aaPolicyYear == YearDiff2028){
				MonthVU2035PrevValuehigh = MonthVU2035PrevValuehigh + (temp2028High * Fund2028ReinvestTo2035Fac/100.00);
			}
			else if(i == MonthDiff2025 + 1 && aaPolicyYear == YearDiff2025){
				MonthVU2035PrevValuehigh = MonthVU2035PrevValuehigh + (temp2025High * Fund2025ReinvestTo2035Fac/100.00);
			}
			else if(i == MonthDiff2023 + 1 && aaPolicyYear == YearDiff2023){
				MonthVU2035PrevValuehigh = MonthVU2035PrevValuehigh + (temp2023High * Fund2023ReinvestTo2035Fac/100.00);
			}
			else{
				
			}
			
            
			if (VUCashValueNegative == TRUE && MonthFundValueOfTheYearValueTotalHigh != 0 ) {
				
				currentValue=  ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear] * [self ReturnPremiumFactor:i] ) + IncreasePrem) * [self ReturnVU2035Fac:aaPolicyYear andMonth:i] * CYFactor +
								[self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnPremiumFactor:i] * [self ReturnVU2035Fac:aaPolicyYear andMonth:i] * CYFactor +
								[self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnPremiumFactor:i] * [self ReturnVU2035Fac:aaPolicyYear andMonth:i] * CYFactor) *
				pow(1 + [self ReturnVU2035InstHigh:@"A"], 1.00/12.00) + MonthVU2035PrevValuehigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
				pow(1 + [self ReturnVU2035InstHigh:@"A"], 1.00/12.00) - ([self ReturnRegWithdrawal:aaPolicyYear] * 0) + (NegativeValueOfMaxCashFundHigh - 1) *
				MAX(0,(MonthFundValueOfTheYearVU2035ValueHigh_Basic/MonthFundValueOfTheYearValueTotalHigh));
				
			}
			else if (VUCashValueNegative == TRUE && MonthFundValueOfTheYearValueTotalHigh == 0 ) {
				currentValue = 0;
			}
			else{
				currentValue = ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVU2035Fac:aaPolicyYear andMonth:i] * CYFactor +
								[self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnPremiumFactor:i] * [self ReturnVU2035Fac:aaPolicyYear andMonth:i] * CYFactor +
								[self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnPremiumFactor:i] * [self ReturnVU2035Fac:aaPolicyYear andMonth:i] * CYFactor) *
				pow(1 + [self ReturnVU2035InstHigh:@"A"], 1.00/12.00) + MonthVU2035PrevValuehigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
				pow(1 + [self ReturnVU2035InstHigh:@"A"], 1.00/12.00) - ([self ReturnRegWithdrawal:aaPolicyYear] * 0);
			}
			
			[self ReturnMonthEverCash60:aaPolicyYear andMonth:i];
			double EverCashValue = VU2035Value_EverCash1 * [self EverCash1_CashPaymentFactor:aaPolicyYear andMonth:i] +
                                    VU2035Value_EverCash6 *[self EverCash6_CashPaymentFactor:aaPolicyYear andMonth:i] +
                                    VU2035Value_EverCash60;
			
			if (i == MonthDiff2035 && aaPolicyYear == YearDiff2035) {
				if (Fund2035PartialReinvest != 100) {
					
					MonthFundMaturityValue2035_Bull = MonthVU2035PrevValuehigh * (100 - Fund2035PartialReinvest)/100.00;
					
					temp2035High = currentValue * (100 - Fund2035PartialReinvest)/100.00 + EverCashValue;
					Withdrawtemp2035High = currentValue * (Fund2035PartialReinvest)/100.00;
				}
				else{
                    Withdrawtemp2035High = currentValue * (Fund2035PartialReinvest)/100.00;
					MonthFundMaturityValue2035_Bull = 0;
				}
				
				if (aaRound == 2) {
					MonthVU2035PrevValuehigh = 0;
				}
				else{
					MonthVU2035PrevValuehigh = tempPrev;
				}
				
			}
			
			else{
				
				if (aaRound == 2) {
					MonthVU2035PrevValuehigh = currentValue + EverCashValue;
				}
				else{
					MonthVU2035PrevValuehigh = tempPrev ;
				}
				
			}
			
			
			if (i == 12 && aaRound == 2) {
                
				VU2035PrevValuehigh = MonthVU2035PrevValuehigh;
				
				if(MonthDiff2030 == 12 && aaPolicyYear == YearDiff2030){ //the reinvestment fund from 2030 will be bring forward to next year
					VU2035PrevValuehigh = VU2035PrevValuehigh +  (temp2030High * Fund2030ReinvestTo2035Fac/100.00) + EverCashValue;
				}
				else if(MonthDiff2028 == 12 && aaPolicyYear == YearDiff2028){ //the reinvestment fund from 2028 will be bring forward to next year
					VU2035PrevValuehigh = VU2035PrevValuehigh +  (temp2028High * Fund2028ReinvestTo2035Fac/100.00) + EverCashValue;
				}
				else if(MonthDiff2025 == 12 && aaPolicyYear == YearDiff2025){ //the reinvestment fund from 2025 will be bring forward to next year
					VU2035PrevValuehigh = VU2035PrevValuehigh +  (temp2025High * Fund2025ReinvestTo2035Fac/100.00) + EverCashValue;
				}
				else if(MonthDiff2035 == 12 && aaPolicyYear == YearDiff2035){
					VU2035PrevValuehigh = 0 + EverCashValue;
				}
				else{
					
				}
                
			}
            
			
			
			if (i == 12 && aaRound == 2) {
				//return currentValue + VU2035Value_EverCash1 + VU2035Value_EverCash6 + VU2035Value_EverCash60;
				
				if(MonthDiff2030 == 12 && aaPolicyYear == YearDiff2030){ //the reinvestment fund from 2030 will be bring forward to next year
					return currentValue +  (temp2030High * Fund2030ReinvestTo2035Fac/100.00) + EverCashValue;
				}
				else if(MonthDiff2028 == 12 && aaPolicyYear == YearDiff2028){ //the reinvestment fund from 2028 will be bring forward to next year
					return currentValue +  (temp2028High * Fund2028ReinvestTo2035Fac/100.00) + EverCashValue;
				}
				else if(MonthDiff2025 == 12 && aaPolicyYear == YearDiff2025){ //the reinvestment fund from 2025 will be bring forward to next year
					return currentValue +  (temp2025High * Fund2025ReinvestTo2035Fac/100.00) + EverCashValue;
				}
				else if(MonthDiff2035 == 12 && aaPolicyYear == YearDiff2035){
					return 0 + EverCashValue;
				}
				else{
					return currentValue + EverCashValue;
				}
			}
			else{
				//return MonthVU2035PrevValuehigh;
				return currentValue + EverCashValue;
			}
			
			
			
		}
		else{
			if (VUCashValueNegative == TRUE && FundValueOfTheYearValueTotalHigh != 0 ) {
				
				currentValue=  ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear]) + IncreasePrem) * [self ReturnVU2035Fac:aaPolicyYear] * CYFactor +
								[self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnVU2035Fac:aaPolicyYear] * CYFactor +
								[self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnVU2035Fac:aaPolicyYear] * CYFactor) *
				(1 + VU2035InstHigh) + VU2035PrevValuehigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVU2035InstHigh:@"A"]) -
				([self ReturnRegWithdrawal:aaPolicyYear] * 0) + (NegativeValueOfMaxCashFundHigh - 1) *
				MAX(0,(FundValueOfTheYearVU2035ValueHigh_Basic/FundValueOfTheYearValueTotalHigh));
				
			}
			else{
				if (aaRound == 1) {
					currentValue = ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear]) + IncreasePrem) * [self ReturnVU2035Fac:aaPolicyYear] * CYFactor +
									[self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnVU2035Fac:aaPolicyYear] * CYFactor +
									[self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnVU2035Fac:aaPolicyYear] * CYFactor) *
					(1 + VU2035InstHigh) + VU2035PrevValuehigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVU2035InstHigh:@"A"]) -
					([self ReturnRegWithdrawal:aaPolicyYear] * 0);
					
					VU2035ValueHigh = currentValue;
				}
				else{
					currentValue = VU2035ValueHigh;
				}
				
			}
			
			if (ECAR60Exist == TRUE) {
				if (Age + aaPolicyYear < 60) {
					CashFactor = 0.00;
				}
				else if(Age + aaPolicyYear == 60){
					CashFactor = 1.00;
				}
				else{
					double tempValue = [self CalculateInst:@"M" andFund:@"2035" andLowMediumHigh:@"H"];
					
					CashFactor = 12 * (1 + tempValue)/(pow((1 + [self ReturnVU2035InstHigh:@"A"]), (1.00/12.00)));
				}
			}
			
			if (aaRound == 2) {
				VU2035PrevValuehigh = currentValue + VU2035Value_EverCash1 + VU2035Value_EverCash6 + (VU2035Value_EverCash60 * CashFactor);
			}
			
			
			return currentValue + VU2035Value_EverCash1 + VU2035Value_EverCash6 + (VU2035Value_EverCash60 * CashFactor);
		}
		
		
	}
}

-(double)ReturnVU2035ValueMedian :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andRound:(NSInteger)aaRound andMonth:(int)i{
	
	double currentValue;
	if (aaPolicyYear > YearDiff2035) {
		VU2035PrevValueMedian = 0.00;
		return 0;
	}
	else{
		if ([aaYearOrMonth isEqualToString:@"M"]) {
			
			if (i == 1) {
				MonthVU2035PrevValueMedian = VU2035PrevValueMedian;
			}
			
			if (i > MonthDiff2035 && aaPolicyYear == YearDiff2035) {
				VU2035PrevValueMedian = 0.00;
				MonthVU2035PrevValueMedian = 0;
				return 0;
			}
			
			double tempPrev = MonthVU2035PrevValueMedian;
			if(i == MonthDiff2030 + 1 && aaPolicyYear == YearDiff2030){
				MonthVU2035PrevValueMedian = MonthVU2035PrevValueMedian + (temp2030Median * Fund2030ReinvestTo2035Fac/100.00);
			}
			else if(i == MonthDiff2028 + 1 && aaPolicyYear == YearDiff2028){
				MonthVU2035PrevValueMedian = MonthVU2035PrevValueMedian + (temp2028Median * Fund2028ReinvestTo2035Fac/100.00);
			}
			else if(i == MonthDiff2025 + 1 && aaPolicyYear == YearDiff2025){
				MonthVU2035PrevValueMedian = MonthVU2035PrevValueMedian + (temp2025Median * Fund2025ReinvestTo2035Fac/100.00);
			}
			else if(i == MonthDiff2023 + 1 && aaPolicyYear == YearDiff2023){
				MonthVU2035PrevValueMedian = MonthVU2035PrevValueMedian + (temp2023Median * Fund2023ReinvestTo2035Fac/100.00);
			}
			else{
				
			}
			
			if (VUCashValueNegative == TRUE && MonthFundValueOfTheYearValueTotalMedian != 0 ) {
				
				currentValue=  ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVU2035Fac:aaPolicyYear andMonth:i] * CYFactor +
								[self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnPremiumFactor:i] * [self ReturnVU2035Fac:aaPolicyYear andMonth:i] * CYFactor +
								[self ReturnExcessPrem:aaPolicyYear]  * ExcessAllo * [self ReturnPremiumFactor:i] * [self ReturnVU2035Fac:aaPolicyYear andMonth:i] * CYFactor) *
				pow((1 + [self ReturnVU2035InstMedian:@"A"]), (1.00/12.00)) + MonthVU2035PrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
				pow((1 + [self ReturnVU2035InstMedian:@"A"]), (1.00/12.00)) - ([self ReturnRegWithdrawal:aaPolicyYear] * 0) + (NegativeValueOfMaxCashFundMedian - 1) *
				MAX(0,(MonthFundValueOfTheYearVU2035ValueMedian_Basic/MonthFundValueOfTheYearValueTotalMedian));
			}
			else{
				currentValue = ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear] *[self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVU2035Fac:aaPolicyYear andMonth:i] * CYFactor +
								[self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnPremiumFactor:i] * [self ReturnVU2035Fac:aaPolicyYear andMonth:i] * CYFactor +
								[self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnPremiumFactor:i] * [self ReturnVU2035Fac:aaPolicyYear andMonth:i] * CYFactor) *
				pow((1 + [self ReturnVU2035InstMedian:@"A" ]), (1.00/12.00)) + MonthVU2035PrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
				pow((1 + [self ReturnVU2035InstMedian:@"A"]), (1.00/12.00)) - ([self ReturnRegWithdrawal:aaPolicyYear] * 0);
			}
			
			double EverCashValue = VU2035Value_EverCash1 * [self EverCash1_CashPaymentFactor:aaPolicyYear andMonth:i] +
			VU2035Value_EverCash6 * [self EverCash6_CashPaymentFactor:aaPolicyYear andMonth:i] +
			VU2035Value_EverCash60;
			
			if (i == MonthDiff2035 && aaPolicyYear == YearDiff2035) {
				if (Fund2035PartialReinvest != 100) {
					MonthFundMaturityValue2035_Flat = MonthVU2035PrevValueMedian * (100 - Fund2035PartialReinvest)/100.00;
					temp2035Median = currentValue * (100 - Fund2035PartialReinvest)/100.00 + EverCashValue;
					Withdrawtemp2035Median = currentValue * (Fund2035PartialReinvest)/100.00;
				}
				else{
                    Withdrawtemp2035Median = currentValue * (Fund2035PartialReinvest)/100.00;
					MonthFundMaturityValue2035_Flat = 0;
				}
				if (aaRound == 2) {
					MonthVU2035PrevValueMedian = 0;
				}
				else{
					MonthVU2035PrevValueMedian = tempPrev;
				}
				
			}
			else{
				if (aaRound == 2) {
					MonthVU2035PrevValueMedian = currentValue + EverCashValue;
				}
				else{
					MonthVU2035PrevValueMedian = tempPrev;
				}
				
			}
			
			
			
			if (i == 12 && aaRound == 2) {
				VU2035PrevValueMedian = MonthVU2035PrevValueMedian;
				
				if(MonthDiff2030 == 12 && aaPolicyYear == YearDiff2030){ //the reinvestment fund from 2030 will be bring forward to next year
					VU2035PrevValueMedian = VU2035PrevValueMedian +  (temp2030Median * Fund2030ReinvestTo2035Fac/100.00);
				}
				else if(MonthDiff2028 == 12 && aaPolicyYear == YearDiff2028){ //the reinvestment fund from 2028 will be bring forward to next year
					VU2035PrevValueMedian = VU2035PrevValueMedian +  (temp2028Median * Fund2028ReinvestTo2035Fac/100.00);
				}
				else if(MonthDiff2025 == 12 && aaPolicyYear == YearDiff2025){ //the reinvestment fund from 2025 will be bring forward to next year
					VU2035PrevValueMedian = VU2035PrevValueMedian +  (temp2025Median * Fund2025ReinvestTo2035Fac/100.00);
				}
				else if(MonthDiff2035 == 12 && aaPolicyYear == YearDiff2035){
					VU2035PrevValueMedian = 0 + EverCashValue;
				}
				else{
					//VU2035PrevValueMedian = VU2035PrevValueMedian + EverCashValue;
				}
			}
			
			//return MonthVU2035PrevValueMedian;
			if (i == 12 && aaRound == 2) {
				//return currentValue + VU2035Value_EverCash1 + VU2035Value_EverCash6 + VU2035Value_EverCash60;
				
				if(MonthDiff2030 == 12 && aaPolicyYear == YearDiff2030){ //the reinvestment fund from 2030 will be bring forward to next year
					return currentValue +  (temp2030Median * Fund2030ReinvestTo2035Fac/100.00) + EverCashValue;
				}
				else if(MonthDiff2028 == 12 && aaPolicyYear == YearDiff2028){ //the reinvestment fund from 2028 will be bring forward to next year
					return currentValue +  (temp2028Median * Fund2028ReinvestTo2035Fac/100.00) + EverCashValue;
				}
				else if(MonthDiff2025 == 12 && aaPolicyYear == YearDiff2025){ //the reinvestment fund from 2025 will be bring forward to next year
					return currentValue +  (temp2025Median * Fund2025ReinvestTo2035Fac/100.00) + EverCashValue;
				}
				else if(MonthDiff2035 == 12 && aaPolicyYear == YearDiff2035){
					return 0 + EverCashValue;
				}
				else{
					return currentValue + EverCashValue;
				}
                
			}
			else{
				return currentValue + EverCashValue;
			}
			
		}
		else{
			if (VUCashValueNegative == TRUE && FundValueOfTheYearValueTotalMedian != 0 ) {
				
				currentValue=  ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear] ) + IncreasePrem) * [self ReturnVU2035Fac:aaPolicyYear] * CYFactor +
								[self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnVU2035Fac:aaPolicyYear] * CYFactor +
								[self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnVU2035Fac:aaPolicyYear] * CYFactor) *
				(1 + VU2035InstMedian) + VU2035PrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVU2035InstMedian:@"A"]) -
				([self ReturnRegWithdrawal:aaPolicyYear] * 0) + (NegativeValueOfMaxCashFundMedian - 1) *
				MAX(0,(FundValueOfTheYearVU2035ValueMedian_Basic/FundValueOfTheYearValueTotalMedian));
			}
			else{
				if (aaRound == 1) {
					currentValue = ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear]) + IncreasePrem) * [self ReturnVU2035Fac:aaPolicyYear] * CYFactor +
									[self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnVU2035Fac:aaPolicyYear] * CYFactor +
									[self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnVU2035Fac:aaPolicyYear] * CYFactor) *
					(1 + VU2035InstMedian) + VU2035PrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVU2035InstMedian:@"A"]) -
					([self ReturnRegWithdrawal:aaPolicyYear] * 0);
					VU2035ValueMedian = currentValue;
				}
				else{
					currentValue = VU2035ValueMedian;
				}
			}
			
			//NSLog(@"%f", VU2035InstMedian);
			
			if (ECAR60Exist == TRUE) {
				if (Age + aaPolicyYear < 60) {
					CashFactor = 0.00;
				}
				else if(Age + aaPolicyYear == 60){
					CashFactor = 1.00;
				}
				else{
					double tempValue = [self CalculateInst:@"M" andFund:@"2035" andLowMediumHigh:@"M"];
					
					CashFactor = 12 * (1 + tempValue)/(pow((1 + [self ReturnVU2035InstMedian:@"A"]), (1.00/12.00)));
				}
			}
			
			if (aaRound == 2) {
				VU2035PrevValueMedian = currentValue + VU2035Value_EverCash1 + VU2035Value_EverCash6 + (VU2035Value_EverCash60 * CashFactor);
			}
			
			return currentValue + VU2035Value_EverCash1 + VU2035Value_EverCash6 + (VU2035Value_EverCash60 * CashFactor);
		}
		
		
	}
}

-(double)ReturnVU2035ValueLow :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andRound:(NSInteger)aaRound andMonth:(int)i{
	
	double currentValue;
	if (aaPolicyYear > YearDiff2035) {
		VU2035PrevValueLow = 0.00;
		return 0;
	}
	else{
		if ([aaYearOrMonth isEqualToString:@"M"]) {
			
			if (i == 1) {
				MonthVU2035PrevValueLow = VU2035PrevValueLow;
			}
			
			if (i > MonthDiff2035 && aaPolicyYear == YearDiff2035) {
				VU2035PrevValueLow = 0.00;
				MonthVU2035PrevValueLow = 0;
				return 0;
			}
			
			double tempPrev = MonthVU2035PrevValueLow;
			if(i == MonthDiff2030 + 1 && aaPolicyYear == YearDiff2030){
				MonthVU2035PrevValueLow = MonthVU2035PrevValueLow + (temp2030Low * Fund2030ReinvestTo2035Fac/100.00);
			}
			else if(i == MonthDiff2028 + 1 && aaPolicyYear == YearDiff2028){
				MonthVU2035PrevValueLow = MonthVU2035PrevValueLow + (temp2028Low * Fund2028ReinvestTo2035Fac/100.00);
			}
			else if(i == MonthDiff2025 + 1 && aaPolicyYear == YearDiff2025){
				MonthVU2035PrevValueLow = MonthVU2035PrevValueLow + (temp2025Low * Fund2025ReinvestTo2035Fac/100.00);
			}
			else if(i == MonthDiff2023 + 1 && aaPolicyYear == YearDiff2023){
				MonthVU2035PrevValueLow = MonthVU2035PrevValueLow + (temp2023Low * Fund2023ReinvestTo2035Fac/100.00);
			}
			else{
				
			}
			
			if (VUCashValueNegative == TRUE && MonthFundValueOfTheYearValueTotalLow != 0 ) {
				
				currentValue=  ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVU2035Fac:aaPolicyYear andMonth:i] * CYFactor +
								[self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnPremiumFactor:i] * [self ReturnVU2035Fac:aaPolicyYear andMonth:i] * CYFactor +
								[self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnPremiumFactor:i] * [self ReturnVU2035Fac:aaPolicyYear andMonth:i] * CYFactor) *
				pow((1 + [self ReturnVU2035InstLow:@"A"]), (1.00/12.00)) + MonthVU2035PrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
				pow((1 + [self ReturnVU2035InstLow:@"A"]), (1.00/12.00)) - ([self ReturnRegWithdrawal:aaPolicyYear] * 0) + (NegativeValueOfMaxCashFundLow - 1) *
				MAX(0,(MonthFundValueOfTheYearVU2035ValueLow_Basic/MonthFundValueOfTheYearValueTotalLow));
			}
			else{
				currentValue = ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear] *[self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVU2035Fac:aaPolicyYear andMonth:i] * CYFactor +
								[self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnPremiumFactor:i] * [self ReturnVU2035Fac:aaPolicyYear andMonth:i] * CYFactor +
								[self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnPremiumFactor:i] * [self ReturnVU2035Fac:aaPolicyYear andMonth:i] * CYFactor) *
				pow((1 + [self ReturnVU2035InstLow:@"A" ]), (1.00/12.00)) + MonthVU2035PrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
				pow((1 + [self ReturnVU2035InstLow:@"A"]), (1.00/12.00)) - ([self ReturnRegWithdrawal:aaPolicyYear] * 0);
			}
			
			double EverCashValue = VU2035Value_EverCash1 * [self EverCash1_CashPaymentFactor:aaPolicyYear andMonth:i] +
            VU2035Value_EverCash6 * [self EverCash6_CashPaymentFactor:aaPolicyYear andMonth:i]  +
            VU2035Value_EverCash60;
			
			if (i == MonthDiff2035 && aaPolicyYear == YearDiff2035) {
				if (Fund2035PartialReinvest != 100) {
					MonthFundMaturityValue2035_Bear = MonthVU2035PrevValueLow * (100 - Fund2035PartialReinvest)/100.00;
					temp2035Low = currentValue * (100 - Fund2035PartialReinvest)/100.00 + EverCashValue;
					Withdrawtemp2035Low = currentValue * (Fund2035PartialReinvest)/100.00;
				}
				else{
                    Withdrawtemp2035Low = currentValue * (Fund2035PartialReinvest)/100.00;
					MonthFundMaturityValue2035_Bear = 0;
				}
				
				if (aaRound == 2) {
					MonthVU2035PrevValueLow = 0;
				}
				else{
					MonthVU2035PrevValueLow = tempPrev;
				}
				
			}
			else{
				if (aaRound == 2) {
					MonthVU2035PrevValueLow = currentValue + EverCashValue;
				}
				else{
					MonthVU2035PrevValueLow = tempPrev;
				}
			}
			
			
			
			if (aaRound == 2 && i == 12) {
				VU2035PrevValueLow = MonthVU2035PrevValueLow;
				
				if(MonthDiff2030 == 12 && aaPolicyYear == YearDiff2030){ //the reinvestment fund from 2030 will be bring forward to next year
					VU2035PrevValueLow = VU2035PrevValueLow +  (temp2030Low * Fund2030ReinvestTo2035Fac/100.00);
				}
				else if(MonthDiff2028 == 12 && aaPolicyYear == YearDiff2028){ //the reinvestment fund from 2028 will be bring forward to next year
					VU2035PrevValueLow = VU2035PrevValueLow +  (temp2028Low * Fund2028ReinvestTo2035Fac/100.00);
				}
				else if(MonthDiff2025 == 12 && aaPolicyYear == YearDiff2025){ //the reinvestment fund from 2025 will be bring forward to next year
					VU2035PrevValueLow = VU2035PrevValueLow +  (temp2025Low * Fund2025ReinvestTo2035Fac/100.00);
				}
				else if(MonthDiff2035 == 12 && aaPolicyYear == YearDiff2035){
					VU2035PrevValueLow = 0;
				}
				else{
					//VU2035PrevValueLow = VU2035PrevValueLow + EverCashValue;
				}
			}
			
			//return MonthVU2035PrevValueLow;
			if (aaRound == 2 && i == 12) {
				//return currentValue + VU2035Value_EverCash1 + VU2035Value_EverCash6 + VU2035Value_EverCash60;
				
				if(MonthDiff2030 == 12 && aaPolicyYear == YearDiff2030){ //the reinvestment fund from 2030 will be bring forward to next year
					return currentValue +  (temp2030Low * Fund2030ReinvestTo2035Fac/100.00) + EverCashValue;
				}
				else if(MonthDiff2028 == 12 && aaPolicyYear == YearDiff2028){ //the reinvestment fund from 2028 will be bring forward to next year
					return currentValue +  (temp2028Low * Fund2028ReinvestTo2035Fac/100.00) + EverCashValue;
				}
				else if(MonthDiff2025 == 12 && aaPolicyYear == YearDiff2025){ //the reinvestment fund from 2025 will be bring forward to next year
					return currentValue +  (temp2025Low * Fund2025ReinvestTo2035Fac/100.00) + EverCashValue;
				}
				else if(MonthDiff2035 == 12 && aaPolicyYear == YearDiff2035){
					return 0 + EverCashValue;
				}
				else{
					return currentValue + EverCashValue;
				}
			}
			else{
 				return currentValue + EverCashValue;
			}
			
		}
		else{
			if (VUCashValueNegative == TRUE && FundValueOfTheYearValueTotalLow != 0 ) {
				
				currentValue=  ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear] ) + IncreasePrem) * [self ReturnVU2035Fac:aaPolicyYear] * CYFactor +
								[self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnVU2035Fac:aaPolicyYear] * CYFactor +
								[self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnVU2035Fac:aaPolicyYear] * CYFactor) *
				(1 + VU2035InstLow) + VU2035PrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVU2035InstLow:@"A"]) -
				([self ReturnRegWithdrawal:aaPolicyYear] * 0) + (NegativeValueOfMaxCashFundLow - 1) *
				MAX(0,(FundValueOfTheYearVU2035ValueLow_Basic/FundValueOfTheYearValueTotalLow));
			}
			else{
				if (aaRound == 1) {
					currentValue = ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear]) + IncreasePrem) * [self ReturnVU2035Fac:aaPolicyYear] * CYFactor +
									[self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnVU2035Fac:aaPolicyYear] * CYFactor +
									[self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnVU2035Fac:aaPolicyYear] * CYFactor) *
					(1 + VU2035InstLow) + VU2035PrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVU2035InstLow:@"A"]) -
					([self ReturnRegWithdrawal:aaPolicyYear] * 0);
					VU2035ValueLow = currentValue;
				}
				else{
					currentValue = VU2035ValueLow;
				}
			}
			
			if (ECAR60Exist == TRUE) {
				if (Age + aaPolicyYear < 60) {
					CashFactor = 0.00;
				}
				else if(Age + aaPolicyYear == 60){
					CashFactor = 1.00;
				}
				else{
					double tempValue = [self CalculateInst:@"M" andFund:@"2035" andLowMediumHigh:@"L"];
					
					CashFactor = 12 * (1 + tempValue)/(pow((1 + [self ReturnVU2035InstLow:@"A"]), (1.00/12.00)));
				}
			}
			
			if (aaRound == 2) {
				VU2035PrevValueLow = currentValue + VU2035Value_EverCash1 + VU2035Value_EverCash6 + (VU2035Value_EverCash60 * CashFactor);
			}
			
			return currentValue + VU2035Value_EverCash1 + VU2035Value_EverCash6 + (VU2035Value_EverCash60 * CashFactor);
		}
		
		
	}
}


-(double)ReturnVUCashValueHigh :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMonth:(int)i {
	
	double tempValue = 0.00;
	
	if ([aaYearOrMonth isEqualToString:@"M"]) {
		
		if (i == 1) {
			MonthVUCashPrevValueHigh = VUCashPrevValueHigh;
		}
        
		if ((i == MonthDiff2035 + 1  && aaPolicyYear == YearDiff2035)) {
			
			MonthVUCashPrevValueHigh = MonthVUCashPrevValueHigh + (temp2035High * Fund2035ReinvestToCashFac/100.00);
		}
		else if(i == MonthDiff2030 + 1 && aaPolicyYear == YearDiff2030){
			MonthVUCashPrevValueHigh = MonthVUCashPrevValueHigh + (temp2030High * Fund2030ReinvestToCashFac/100.00);
		}
		else if(i == MonthDiff2028 + 1 && aaPolicyYear == YearDiff2028){
			//NSLog(@"%f", temp2028High);
			MonthVUCashPrevValueHigh = MonthVUCashPrevValueHigh + (temp2028High * Fund2028ReinvestToCashFac/100.00);
		}
		else if(i == MonthDiff2025 + 1 && aaPolicyYear == YearDiff2025){
			MonthVUCashPrevValueHigh = MonthVUCashPrevValueHigh + (temp2025High * Fund2025ReinvestToCashFac/100.00);
		}
		else if(i == MonthDiff2023 + 1 && aaPolicyYear == YearDiff2023){
			MonthVUCashPrevValueHigh = MonthVUCashPrevValueHigh + (temp2023High * Fund2023ReinvestToCashFac/100.00);
		}
		else{
			
		}
		
		tempValue = ((( [strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear] * [self ReturnPremiumFactor:i] ) + IncreasePrem) * [self ReturnVUCashFac:aaPolicyYear andMonth:i] * CYFactor +
					 [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnPremiumFactor:i] * [self ReturnVUCashFac:aaPolicyYear andMonth:i] * CYFactor +
					 [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnPremiumFactor:i] * [self ReturnVUCashFac:aaPolicyYear andMonth:i] * CYFactor) *
		pow((1 + [self ReturnVUCashInstHigh:@"A"]), (1.00/12.00)) + MonthVUCashPrevValueHigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
		pow((1 + [self ReturnVUCashInstHigh:@"A"]), (1.00/12.00)) - (PolicyFee + [self ReturnTotalBasicMortHigh:aaPolicyYear]) -
		([self ReturnRegWithdrawal:aaPolicyYear] * [self ReturnRegWithdrawalFactor:i]);
		
		MonthVUCashPrevValueHigh =  tempValue;
		//NSLog(@"%f", MonthVUCashPrevValueHigh);
		
		
		
		double EverCashValue = VUCashValue_EverCash1 * [self EverCash1_CashPaymentFactor:aaPolicyYear andMonth:i] +
        VUCashValue_EverCash6 * [self EverCash6_CashPaymentFactor:aaPolicyYear andMonth:i] +
        VUCashValue_EverCash60;
		
		if (tempValue < 0) {    
			MonthVUCashPrevValueHigh = 1.00;
		}
		else{
			MonthVUCashPrevValueHigh = tempValue + EverCashValue;
		}
		
		
		
		if (i == 12) {
			VUCashPrevValueHigh = MonthVUCashPrevValueHigh ;
			
			if(MonthDiff2035 == 12 && aaPolicyYear == YearDiff2035){ //the reinvestment fund from 2035 will be bring forward to next year
				VUCashPrevValueHigh = VUCashPrevValueHigh +  (temp2035High * Fund2035ReinvestToCashFac/100.00);
			}
			else if(MonthDiff2030 == 12 && aaPolicyYear == YearDiff2030){ //the reinvestment fund from 2030 will be bring forward to next year
				VUCashPrevValueHigh = VUCashPrevValueHigh +  (temp2030High * Fund2030ReinvestToCashFac/100.00);
			}
			else if(MonthDiff2028 == 12 && aaPolicyYear == YearDiff2028){ //the reinvestment fund from 2028 will be bring forward to next year
				VUCashPrevValueHigh = VUCashPrevValueHigh +  (temp2028High * Fund2028ReinvestToCashFac/100.00);
			}
			else if(MonthDiff2025 == 12 && aaPolicyYear == YearDiff2025){ //the reinvestment fund from 2025 will be bring forward to next year
				VUCashPrevValueHigh = VUCashPrevValueHigh +  (temp2025High * Fund2025ReinvestToCashFac/100.00);
			}
		}
		
		if (tempValue < 0 && MonthFundValueOfTheYearValueTotalHigh != 0) {
			NegativeValueOfMaxCashFundHigh = tempValue;
			VUCashValueNegative = TRUE;
			//return MonthVUCashPrevValueHigh;
			if(MonthDiff2035 == 12 && aaPolicyYear == YearDiff2035){ //the reinvestment fund from 2035 will be bring forward to next year
				return MonthVUCashPrevValueHigh	+  (temp2035High * Fund2035ReinvestToCashFac/100.00);
			}
			else if(MonthDiff2030 == 12 && aaPolicyYear == YearDiff2030){ //the reinvestment fund from 2030 will be bring forward to next year
				return MonthVUCashPrevValueHigh	+  (temp2030High * Fund2030ReinvestToCashFac/100.00);
			}
			else if(MonthDiff2028 == 12 && aaPolicyYear == YearDiff2028){ //the reinvestment fund from 2028 will be bring forward to next year
				return MonthVUCashPrevValueHigh	+ (temp2028High * Fund2028ReinvestToCashFac/100.00);
			}
			else if(MonthDiff2025 == 12 && aaPolicyYear == YearDiff2025){ //the reinvestment fund from 2025 will be bring forward to next year
				return MonthVUCashPrevValueHigh	+ (temp2025High * Fund2025ReinvestToCashFac/100.00);
			}
			else
			{
				return MonthVUCashPrevValueHigh;
			}
		}else {
			NegativeValueOfMaxCashFundHigh = tempValue;
			VUCashValueNegative = FALSE;
			if (i == 12) {
				//return MonthVUCashPrevValueHigh	+ EverCashValue;
				
				if(MonthDiff2035 == 12 && aaPolicyYear == YearDiff2035){ //the reinvestment fund from 2035 will be bring forward to next year
					return MonthVUCashPrevValueHigh	+  (temp2035High * Fund2035ReinvestToCashFac/100.00) ;
				}
				else if(MonthDiff2030 == 12 && aaPolicyYear == YearDiff2030){ //the reinvestment fund from 2030 will be bring forward to next year
					return MonthVUCashPrevValueHigh	+  (temp2030High * Fund2030ReinvestToCashFac/100.00) ;
				}
				else if(MonthDiff2028 == 12 && aaPolicyYear == YearDiff2028){ //the reinvestment fund from 2028 will be bring forward to next year
					return MonthVUCashPrevValueHigh	+ (temp2028High * Fund2028ReinvestToCashFac/100.00) ;
				}
				else if(MonthDiff2025 == 12 && aaPolicyYear == YearDiff2025){ //the reinvestment fund from 2025 will be bring forward to next year
					return MonthVUCashPrevValueHigh	+ (temp2025High * Fund2025ReinvestToCashFac/100.00) ;
				}
				else
				{
					return MonthVUCashPrevValueHigh	+ EverCashValue;
				}
			}
			else{
				return MonthVUCashPrevValueHigh + 0; // to be edit later
			}
			
		}
		
	}
	else
	{
		tempValue = ((( [strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear] ) + IncreasePrem) * [self ReturnVUCashFac:aaPolicyYear] * CYFactor +
					 [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnVUCashFac:aaPolicyYear] * CYFactor +
					 [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnVUCashFac:aaPolicyYear] * CYFactor) *
		(1 + [self ReturnVUCashInstHigh:@""]) + VUCashPrevValueHigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUCashInstHigh:@"A"]) -
		(PolicyFee + [self ReturnTotalBasicMortHigh:aaPolicyYear]) * [self ReturnVUCashHigh] -
		([self ReturnRegWithdrawal:aaPolicyYear] * 1);
		
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear < 60) {
				CashFactor = 0.00;
			}
			else if(Age + aaPolicyYear == 60){
				CashFactor = 1.00;
			}
			else{
				CashFactor = 12 * (1 + [self ReturnVUCashInstHigh:@"M"])/(pow((1 + [self ReturnVUCashInstHigh:@"A"]), (1.00/12.00)));
			}
		}
		
		if (tempValue < 0) {
			VUCashPrevValueHigh = 1.00;
		}
		else{
			VUCashPrevValueHigh = tempValue + VUCashValue_EverCash1 + VUCashValue_EverCash6 + (VUCashValue_EverCash60 * CashFactor) ;
		}
		
		
		//VUCashPrevValueHigh = tempValue;
		if (tempValue < 0 && FundValueOfTheYearValueTotalHigh != 0) {
			//NegativeValueOfMaxCashFundHigh = tempValue;
			NegativeValueOfMaxCashFundHigh = tempValue;
			VUCashValueNegative = TRUE;
			return VUCashPrevValueHigh;
		} else {
			VUCashValueNegative = FALSE;
			NegativeValueOfMaxCashFundHigh = tempValue;
			return tempValue + VUCashValue_EverCash1 + VUCashValue_EverCash6 + (VUCashValue_EverCash60 * CashFactor) ; // to be edit later
		}
	}
	
	
	
	
	
}

-(double)ReturnVUCashValueMedian :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMonth:(int)i{
	
	double tempValue = 0.00;
	if ([aaYearOrMonth isEqualToString:@"M"]) {
		
		if (i == 1) {
			MonthVUCashPrevValueMedian = VUCashPrevValueMedian;
		}
		
		if ((i == MonthDiff2035 + 1 && aaPolicyYear == YearDiff2035)  ) {
			MonthVUCashPrevValueMedian = MonthVUCashPrevValueMedian + (temp2035Median * Fund2035ReinvestToCashFac/100.00);
		}
		else if(i == MonthDiff2030 + 1 && aaPolicyYear == YearDiff2030){
			MonthVUCashPrevValueMedian = MonthVUCashPrevValueMedian + (temp2030Median * Fund2030ReinvestToCashFac/100.00);
		}
		else if(i == MonthDiff2028 + 1 && aaPolicyYear == YearDiff2028){
			MonthVUCashPrevValueMedian = MonthVUCashPrevValueMedian + (temp2028Median * Fund2028ReinvestToCashFac/100.00);
		}
		else if(i == MonthDiff2025 + 1 && aaPolicyYear == YearDiff2025){
			MonthVUCashPrevValueMedian = MonthVUCashPrevValueMedian + (temp2025Median * Fund2025ReinvestToCashFac/100.00);
		}
		else if(i == MonthDiff2023 + 1 && aaPolicyYear == YearDiff2023){
			MonthVUCashPrevValueMedian = MonthVUCashPrevValueMedian + (temp2023Median * Fund2023ReinvestToCashFac/100.00);
		}
		else{
			
		}
		
		tempValue = ((( [strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear] * [self ReturnPremiumFactor:i] ) + IncreasePrem) * [self ReturnVUCashFac:aaPolicyYear andMonth:i] * CYFactor +
					 [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnPremiumFactor:i] * [self ReturnVUCashFac:aaPolicyYear andMonth:i] * CYFactor +
					 [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnPremiumFactor:i] * [self ReturnVUCashFac:aaPolicyYear andMonth:i] * CYFactor) *
		pow(1 + [self ReturnVUCashInstMedian:@"A"], 1.00/12.00) + MonthVUCashPrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
		pow(1 + [self ReturnVUCashInstMedian:@"A"], 1.00/12.00) - (PolicyFee + [self ReturnTotalBasicMortMedian:aaPolicyYear]) -
		([self ReturnRegWithdrawal:aaPolicyYear] * [self ReturnRegWithdrawalFactor:i]);
		
		MonthVUCashPrevValueMedian = tempValue;

        double EverCashValue = VUCashValue_EverCash1 * [self EverCash1_CashPaymentFactor:aaPolicyYear andMonth:i] +
        VUCashValue_EverCash6 * [self EverCash6_CashPaymentFactor:aaPolicyYear andMonth:i] +
        VUCashValue_EverCash60;
        
		if (tempValue < 0) {
			MonthVUCashPrevValueMedian = 1.00;
		}
		else{
			MonthVUCashPrevValueMedian = tempValue + EverCashValue;
		}
		

		
		if (i == 12) {
			VUCashPrevValueMedian = MonthVUCashPrevValueMedian + EverCashValue ;
			
			if(MonthDiff2035 == 12 && aaPolicyYear == YearDiff2035){ //the reinvestment fund from 2035 will be bring forward to next year
				VUCashPrevValueMedian = VUCashPrevValueMedian +  (temp2035Median * Fund2035ReinvestToCashFac/100.00);
			}
			
			if(MonthDiff2030 == 12 && aaPolicyYear == YearDiff2030){ //the reinvestment fund from 2030 will be bring forward to next year
				VUCashPrevValueMedian = VUCashPrevValueMedian +  (temp2030Median * Fund2030ReinvestToCashFac/100.00);
			}
			
			if(MonthDiff2028 == 12 && aaPolicyYear == YearDiff2028){ //the reinvestment fund from 2028 will be bring forward to next year
				VUCashPrevValueMedian = VUCashPrevValueMedian +  (temp2028Median * Fund2028ReinvestToCashFac/100.00);
			}
			
			if(MonthDiff2025 == 12 && aaPolicyYear == YearDiff2025){ //the reinvestment fund from 2025 will be bring forward to next year
				VUCashPrevValueMedian = VUCashPrevValueMedian +  (temp2025Median * Fund2025ReinvestToCashFac/100.00);
			}
		}
		
		
		if (tempValue < 0 && MonthFundValueOfTheYearValueTotalMedian != 0) {
			NegativeValueOfMaxCashFundMedian = tempValue;
			VUCashValueNegative = TRUE;
			//return  MonthVUCashPrevValueMedian;
			
			if(MonthDiff2035 == 12 && aaPolicyYear == YearDiff2035){ //the reinvestment fund from 2035 will be bring forward to next year
				return MonthVUCashPrevValueMedian	+  (temp2035Median * Fund2035ReinvestToCashFac/100.00);
			}
			else if(MonthDiff2030 == 12 && aaPolicyYear == YearDiff2030){ //the reinvestment fund from 2030 will be bring forward to next year
				return MonthVUCashPrevValueMedian	+  (temp2030Median * Fund2030ReinvestToCashFac/100.00);
			}
			else if(MonthDiff2028 == 12 && aaPolicyYear == YearDiff2028){ //the reinvestment fund from 2028 will be bring forward to next year
				return MonthVUCashPrevValueMedian	+ (temp2028Median * Fund2028ReinvestToCashFac/100.00);
			}
			else if(MonthDiff2025 == 12 && aaPolicyYear == YearDiff2025){ //the reinvestment fund from 2025 will be bring forward to next year
				return MonthVUCashPrevValueMedian	+ (temp2025Median * Fund2025ReinvestToCashFac/100.00);
			}
			else
			{
				return MonthVUCashPrevValueMedian;
			}
		} else {
			NegativeValueOfMaxCashFundMedian =  tempValue;
			VUCashValueNegative = FALSE;
			if (i == 12) {
				if(MonthDiff2035 == 12 && aaPolicyYear == YearDiff2035){ //the reinvestment fund from 2035 will be bring forward to next year
					return MonthVUCashPrevValueMedian	+  (temp2035Median * Fund2035ReinvestToCashFac/100.00) + EverCashValue;
				}
				else if(MonthDiff2030 == 12 && aaPolicyYear == YearDiff2030){ //the reinvestment fund from 2030 will be bring forward to next year
					return MonthVUCashPrevValueMedian	+  (temp2030Median * Fund2030ReinvestToCashFac/100.00) + EverCashValue;
				}
				else if(MonthDiff2028 == 12 && aaPolicyYear == YearDiff2028){ //the reinvestment fund from 2028 will be bring forward to next year
					return MonthVUCashPrevValueMedian	+ (temp2028Median * Fund2028ReinvestToCashFac/100.00) + EverCashValue;
				}
				else if(MonthDiff2025 == 12 && aaPolicyYear == YearDiff2025){ //the reinvestment fund from 2025 will be bring forward to next year
					return MonthVUCashPrevValueMedian	+ (temp2025Median * Fund2025ReinvestToCashFac/100.00) + EverCashValue;
				}
				else
				{
					return MonthVUCashPrevValueMedian	+ EverCashValue;
				}
				
				//return  MonthVUCashPrevValueMedian + VUCashValue_EverCash1 + VUCashValue_EverCash6 + VUCashValue_EverCash60;
			}
			else{
				return  MonthVUCashPrevValueMedian; // to be edit later
			}
		}
		
		
		
		
	}
	else{
		tempValue = ((( [strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear] ) + IncreasePrem) * [self ReturnVUCashFac:aaPolicyYear] * CYFactor +
					 [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnVUCashFac:aaPolicyYear] * CYFactor +
					 [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnVUCashFac:aaPolicyYear] * CYFactor) *
		(1 + [self ReturnVUCashInstMedian:@""]) + VUCashPrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUCashInstMedian:@"A"]) -
		(PolicyFee + [self ReturnTotalBasicMortMedian:aaPolicyYear]) * [self ReturnVUCashMedian] -
		([self ReturnRegWithdrawal:aaPolicyYear] * 1);
		
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear < 60) {
				CashFactor = 0.00;
			}
			else if(Age + aaPolicyYear == 60){
				CashFactor = 1.00;
			}
			else{
				CashFactor = 12 * (1 + [self ReturnVUCashInstMedian:@"M"])/(pow((1 + [self ReturnVUCashInstMedian:@"A"]), (1.00/12.00)));
			}
		}
		
		if (tempValue < 0) {
			VUCashPrevValueMedian = 1.00;
		}
		else{
			VUCashPrevValueMedian = tempValue + VUCashValue_EverCash1 + VUCashValue_EverCash6 + (VUCashValue_EverCash60 * CashFactor);
		}
		
		//VUCashPrevValueMedian = tempValue;
		if (tempValue < 0 && FundValueOfTheYearValueTotalMedian != 0) {
			NegativeValueOfMaxCashFundMedian = tempValue;
			VUCashValueNegative = TRUE;
			return VUCashPrevValueMedian;
			//return tempValue;
		} else {
			NegativeValueOfMaxCashFundMedian = tempValue;
			VUCashValueNegative = FALSE;
			return tempValue + VUCashValue_EverCash1 + VUCashValue_EverCash6 + (VUCashValue_EverCash60 * CashFactor);
		}
		
		
	}
	
	
	
	
}


-(double)ReturnVUCashValueLow :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMonth:(int)i{
	
	double tempValue = 0.00;
	if ([aaYearOrMonth isEqualToString:@"M"]) {
		
		if (i == 1) {
			MonthVUCashPrevValueLow = VUCashPrevValueLow;
		}
		
		if ((i == MonthDiff2035 + 1 && aaPolicyYear == YearDiff2035)  ) {
			MonthVUCashPrevValueLow = MonthVUCashPrevValueLow + (temp2035Low * Fund2035ReinvestToCashFac/100.00);
		}
		else if(i == MonthDiff2030 + 1 && aaPolicyYear == YearDiff2030){
			MonthVUCashPrevValueLow = MonthVUCashPrevValueLow + (temp2030Low * Fund2030ReinvestToCashFac/100.00);
		}
		else if(i == MonthDiff2028 + 1 && aaPolicyYear == YearDiff2028){
			MonthVUCashPrevValueLow = MonthVUCashPrevValueLow + (temp2028Low * Fund2028ReinvestToCashFac/100.00);
		}
		else if(i == MonthDiff2025 + 1 && aaPolicyYear == YearDiff2025){
			MonthVUCashPrevValueLow = MonthVUCashPrevValueLow + (temp2025Low * Fund2025ReinvestToCashFac/100.00);
		}
		else if(i == MonthDiff2023 + 1 && aaPolicyYear == YearDiff2023){
			MonthVUCashPrevValueLow = MonthVUCashPrevValueLow + (temp2023Low * Fund2023ReinvestToCashFac/100.00);
		}
		else{
			
		}
		
		tempValue = ((( [strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear] * [self ReturnPremiumFactor:i] ) + IncreasePrem) * [self ReturnVUCashFac:aaPolicyYear andMonth:i] * CYFactor +
					 [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnPremiumFactor:i] * [self ReturnVUCashFac:aaPolicyYear andMonth:i] * CYFactor +
					 [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnPremiumFactor:i] * [self ReturnVUCashFac:aaPolicyYear andMonth:i] * CYFactor) *
		pow(1 + [self ReturnVUCashInstLow:@"A"], 1.00/12.00) + MonthVUCashPrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
		pow(1 + [self ReturnVUCashInstLow:@"A"], 1.00/12.00) - (PolicyFee + [self ReturnTotalBasicMortLow:aaPolicyYear]) -
		([self ReturnRegWithdrawal:aaPolicyYear] * [self ReturnRegWithdrawalFactor:i]);
		
		
		
		if (tempValue < 0) {
			MonthVUCashPrevValueLow = 1.00;
		}
		else{
			MonthVUCashPrevValueLow = tempValue;
		}
		
		double EverCashValue = VUCashValue_EverCash1 + VUCashValue_EverCash6 + VUCashValue_EverCash60;
		
		if (i == 12) {
			VUCashPrevValueLow = MonthVUCashPrevValueLow + EverCashValue ;
			
			if(MonthDiff2035 == 12 && aaPolicyYear == YearDiff2035){ //the reinvestment fund from 2035 will be bring forward to next year
				VUCashPrevValueLow = VUCashPrevValueLow +  (temp2035Low * Fund2035ReinvestToCashFac/100.00);
			}
			
			if(MonthDiff2030 == 12 && aaPolicyYear == YearDiff2030){ //the reinvestment fund from 2030 will be bring forward to next year
				VUCashPrevValueLow = VUCashPrevValueLow +  (temp2030Low * Fund2030ReinvestToCashFac/100.00);
			}
			
			if(MonthDiff2028 == 12 && aaPolicyYear == YearDiff2028){ //the reinvestment fund from 2028 will be bring forward to next year
				VUCashPrevValueLow = VUCashPrevValueLow +  (temp2028Low * Fund2028ReinvestToCashFac/100.00);
			}
			
			if(MonthDiff2025 == 12 && aaPolicyYear == YearDiff2025){ //the reinvestment fund from 2025 will be bring forward to next year
				VUCashPrevValueLow = VUCashPrevValueLow +  (temp2025Low * Fund2025ReinvestToCashFac/100.00);
			}
		}
		
		
		
		
		if (tempValue < 0 && MonthFundValueOfTheYearValueTotalLow != 0) {
			NegativeValueOfMaxCashFundLow = tempValue;
			VUCashValueNegative = TRUE;
			//return  MonthVUCashPrevValueLow;
			
			if(MonthDiff2035 == 12 && aaPolicyYear == YearDiff2035){ //the reinvestment fund from 2035 will be bring forward to next year
				return MonthVUCashPrevValueLow	+  (temp2035Low * Fund2035ReinvestToCashFac/100.00);
			}
			else if(MonthDiff2030 == 12 && aaPolicyYear == YearDiff2030){ //the reinvestment fund from 2030 will be bring forward to next year
				return MonthVUCashPrevValueLow	+  (temp2030Low * Fund2030ReinvestToCashFac/100.00);
			}
			else if(MonthDiff2028 == 12 && aaPolicyYear == YearDiff2028){ //the reinvestment fund from 2028 will be bring forward to next year
				return MonthVUCashPrevValueLow	+ (temp2028Low * Fund2028ReinvestToCashFac/100.00);
			}
			else if(MonthDiff2025 == 12 && aaPolicyYear == YearDiff2025){ //the reinvestment fund from 2025 will be bring forward to next year
				return MonthVUCashPrevValueLow	+ (temp2025Low * Fund2025ReinvestToCashFac/100.00);
			}
			else
			{
				return MonthVUCashPrevValueLow;
			}
			
			
		} else {
			NegativeValueOfMaxCashFundLow =  tempValue;
			VUCashValueNegative = FALSE;
			if (i == 12) {
				if(MonthDiff2035 == 12 && aaPolicyYear == YearDiff2035){ //the reinvestment fund from 2035 will be bring forward to next year
					return MonthVUCashPrevValueLow	+  (temp2035Low * Fund2035ReinvestToCashFac/100.00) + EverCashValue;
				}
				else if(MonthDiff2030 == 12 && aaPolicyYear == YearDiff2030){ //the reinvestment fund from 2030 will be bring forward to next year
					return MonthVUCashPrevValueLow	+  (temp2030Low * Fund2030ReinvestToCashFac/100.00) + EverCashValue;
				}
				else if(MonthDiff2028 == 12 && aaPolicyYear == YearDiff2028){ //the reinvestment fund from 2028 will be bring forward to next year
					return MonthVUCashPrevValueLow	+ (temp2028Low * Fund2028ReinvestToCashFac/100.00) + EverCashValue;
				}
				else if(MonthDiff2025 == 12 && aaPolicyYear == YearDiff2025){ //the reinvestment fund from 2025 will be bring forward to next year
					return MonthVUCashPrevValueLow	+ (temp2025Low * Fund2025ReinvestToCashFac/100.00) + EverCashValue;
				}
				else
				{
					return MonthVUCashPrevValueLow	+ EverCashValue;
				}
				
				//return  MonthVUCashPrevValueLow  + VUCashValue_EverCash1 + VUCashValue_EverCash6 + VUCashValue_EverCash60;
			}
			else{
				return  MonthVUCashPrevValueLow; // to be edit later
			}
		}
	}
	else{
		tempValue = ((( [strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear] ) + IncreasePrem) * [self ReturnVUCashFac:aaPolicyYear] * CYFactor +
					 [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnVUCashFac:aaPolicyYear] * CYFactor +
					 [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnVUCashFac:aaPolicyYear] * CYFactor) *
		(1 + [self ReturnVUCashInstLow:@""]) + VUCashPrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUCashInstLow:@"A"]) -
		(PolicyFee + [self ReturnTotalBasicMortLow:aaPolicyYear]) * [self ReturnVUCashLow] -
		([self ReturnRegWithdrawal:aaPolicyYear] * 1);
		
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear < 60) {
				CashFactor = 0.00;
			}
			else if(Age + aaPolicyYear == 60){
				CashFactor = 1.00;
			}
			else{
				CashFactor = 12 * (1 + [self ReturnVUCashInstLow:@"M"])/(pow((1 + [self ReturnVUCashInstLow:@"A"]), (1.00/12.00)));
			}
		}
		
		if (tempValue < 0) {
			VUCashPrevValueLow = 1.00;
		}
		else{
			VUCashPrevValueLow = tempValue + VUCashValue_EverCash1 + VUCashValue_EverCash6 + (VUCashValue_EverCash60 * CashFactor);
		}
		
		//VUCashPrevValueLow = tempValue;
		if (tempValue < 0 && FundValueOfTheYearValueTotalLow != 0) {
			NegativeValueOfMaxCashFundLow = tempValue;
			VUCashValueNegative = TRUE;
			return VUCashPrevValueLow;
			//return tempValue;
		} else {
			NegativeValueOfMaxCashFundLow = tempValue;
			VUCashValueNegative = FALSE;
			return tempValue + VUCashValue_EverCash1 + VUCashValue_EverCash6 + (VUCashValue_EverCash60 * CashFactor); // to be edit later
		}
	}
	
	
	
	
}


-(double)ReturnVURetValueHigh :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andRound:(NSInteger)aaRound andMonth:(NSInteger)i{
	
	double currentValue =0.0;
	if ([aaYearOrMonth isEqualToString:@"M"]) {
		
		
		if (i == 1) {
			MonthVURetPrevValueHigh = VURetPrevValueHigh ;
		}
		
		double tempPrev = MonthVURetPrevValueHigh;
		
		if ((i == MonthDiff2035 + 1 && aaPolicyYear == YearDiff2035)) {
			MonthVURetPrevValueHigh = MonthVURetPrevValueHigh + (temp2035High * Fund2035ReinvestToRetFac/100.00);
		}
		else if(i == MonthDiff2030 + 1 && aaPolicyYear == YearDiff2030){
			MonthVURetPrevValueHigh = MonthVURetPrevValueHigh + (temp2030High * Fund2030ReinvestToRetFac/100.00);
		}
		else if(i == MonthDiff2028 + 1 && aaPolicyYear == YearDiff2028){
			MonthVURetPrevValueHigh = MonthVURetPrevValueHigh + (temp2028High * Fund2028ReinvestToRetFac/100.00);
		}
		else if(i == MonthDiff2025 + 1 && aaPolicyYear == YearDiff2025){
			MonthVURetPrevValueHigh = MonthVURetPrevValueHigh + (temp2025High * Fund2025ReinvestToRetFac/100.00);
		}
		else if(i == MonthDiff2023 + 1 && aaPolicyYear == YearDiff2023){
			MonthVURetPrevValueHigh = MonthVURetPrevValueHigh + (temp2023High * Fund2023ReinvestToRetFac/100.00);
		}
		else{
			
		}
        
        
		
		
		//NSLog(@"%f", MonthVURetPrevValueHigh);
		if (VUCashValueNegative == TRUE && MonthFundValueOfTheYearValueTotalHigh != 0 ) {
            
			currentValue= ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVURetFac:aaPolicyYear andMonth:i] * CYFactor +
						   [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnPremiumFactor:i] * [self ReturnVURetFac:aaPolicyYear andMonth:i] * CYFactor +
						   [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnPremiumFactor:i] * [self ReturnVURetFac:aaPolicyYear andMonth:i] * CYFactor) *
			pow(1 + [self ReturnVURetInstHigh:aaPolicyYear andMOP:@"A"],1.00/12.00) + MonthVURetPrevValueHigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
			pow(1 + [self ReturnVURetInstHigh:aaPolicyYear andMOP:@"A"], 1.00/12.00) -
			([self ReturnRegWithdrawal:aaPolicyYear] * 0) + (NegativeValueOfMaxCashFundHigh - 1) *
			MAX(0,(MonthFundValueOfTheYearVURetValueHigh_Basic/MonthFundValueOfTheYearValueTotalHigh));
            
			//NSLog(@"%f %f %f",NegativeValueOfMaxCashFundHigh, MonthVURetValueHigh,MonthFundValueOfTheYearValueTotalHigh );
			
		}
		else{
			
			currentValue = ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVURetFac:aaPolicyYear  andMonth:i] * CYFactor +
							[self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnPremiumFactor:i] * [self ReturnVURetFac:aaPolicyYear andMonth:i] * CYFactor +
							[self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnPremiumFactor:i] * [self ReturnVURetFac:aaPolicyYear andMonth:i] * CYFactor) *
			pow((1 + [self ReturnVURetInstHigh:aaPolicyYear andMOP:@"A"]),(1.00/12.00)) + MonthVURetPrevValueHigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
			pow((1 + [self ReturnVURetInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00)) -
			([self ReturnRegWithdrawal:aaPolicyYear] * 0);
			
			
		}
		
		//NSLog(@"%f, %f, %f, %f",NegativeValueOfMaxCashFundHigh, MonthVURetValueHigh, MonthFundValueOfTheYearValueTotalHigh, currentValue);
		
		[self ReturnMonthEverCash60:aaPolicyYear andMonth:i];
		
		double EverCashValue = VURetValue_EverCash1 * [self EverCash1_CashPaymentFactor:aaPolicyYear andMonth:i] +
                                VURetValue_EverCash6 * [self EverCash6_CashPaymentFactor:aaPolicyYear andMonth:i]
                                + VURetValue_EverCash60;
		
		if (aaRound == 2) {
			MonthVURetPrevValueHigh = currentValue + EverCashValue;
		}
		else{
			MonthVURetPrevValueHigh = tempPrev;
		}
		
		
		
		if (i == 12  && aaRound == 2) {
			VURetPrevValueHigh = MonthVURetPrevValueHigh;
			
			if(MonthDiff2035 == 12 && aaPolicyYear == YearDiff2035){ //the reinvestment fund from 2035 will be bring forward to next year
				VURetPrevValueHigh = VURetPrevValueHigh +  (temp2035High * Fund2035ReinvestToRetFac/100.00);
			}
			else if(MonthDiff2030 == 12 && aaPolicyYear == YearDiff2030){ //the reinvestment fund from 2030 will be bring forward to next year
				VURetPrevValueHigh = VURetPrevValueHigh +  (temp2030High * Fund2030ReinvestToRetFac/100.00);
			}
			else if(MonthDiff2028 == 12 && aaPolicyYear == YearDiff2028){ //the reinvestment fund from 2028 will be bring forward to next year
				VURetPrevValueHigh = VURetPrevValueHigh +  (temp2028High * Fund2028ReinvestToRetFac/100.00);
			}
			else if(MonthDiff2025 == 12 && aaPolicyYear == YearDiff2025){ //the reinvestment fund from 2025 will be bring forward to next year
				VURetPrevValueHigh = VURetPrevValueHigh +  (temp2025High * Fund2025ReinvestToRetFac/100.00);
			}
		}
		
		//NSLog(@"%d %f %f, %d ", i, MonthVURetValueHigh, MonthFundValueOfTheYearValueTotalHigh, VUCashValueNegative);
		//return MonthVURetPrevValueHigh;
		
		if (i == 12  && aaRound == 2) {
			if(MonthDiff2035 == 12 && aaPolicyYear == YearDiff2035){
				return currentValue + (temp2035High * Fund2035ReinvestToRetFac/100.00) + EverCashValue;
			}
			else if(MonthDiff2030 == 12 && aaPolicyYear == YearDiff2030){
				return currentValue +  (temp2030High * Fund2030ReinvestToRetFac/100.00) + EverCashValue;
			}
			else if(MonthDiff2028 == 12 && aaPolicyYear == YearDiff2028){
				return currentValue + (temp2028High * Fund2028ReinvestToRetFac/100.00) + EverCashValue;
			}
			else if(MonthDiff2025 == 12 && aaPolicyYear == YearDiff2025){
				return currentValue + (temp2025High * Fund2025ReinvestToRetFac/100.00) + EverCashValue;
			}
			else{
				return currentValue + EverCashValue;
			}
			
			//return currentValue + VURetValue_EverCash1 + VURetValue_EverCash6 + VURetValue_EverCash60;
		}
		else{
			return currentValue + EverCashValue;
			
		}
		
		
		
	}
	else{
		//if (VUCashValueHigh < 0 && [self ReturnFundValueOfTheYearValueTotalHigh:aaPolicyYear] != 0 ) {
		if (VUCashValueNegative == TRUE && FundValueOfTheYearValueTotalHigh != 0 ) {
			currentValue= ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear]) + IncreasePrem) * [self ReturnVURetFac:aaPolicyYear] * CYFactor +
						   [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnVURetFac:aaPolicyYear] * CYFactor +
						   [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnVURetFac:aaPolicyYear] * CYFactor) *
			(1 + [self ReturnVURetInstHigh:aaPolicyYear andMOP:@""]) + VURetPrevValueHigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVURetInstHigh:aaPolicyYear andMOP:@"A"]) -
			([self ReturnRegWithdrawal:aaPolicyYear] * 0) + (NegativeValueOfMaxCashFundHigh - 1) *
			MAX(0,(FundValueOfTheYearVURetValueHigh_Basic/FundValueOfTheYearValueTotalHigh));
			
		}
		else{
			if (aaRound == 1) {
				currentValue = ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear]) + IncreasePrem) * [self ReturnVURetFac:aaPolicyYear] * CYFactor +
								[self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnVURetFac:aaPolicyYear] * CYFactor +
								[self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnVURetFac:aaPolicyYear] * CYFactor) *
				(1 + [self ReturnVURetInstHigh:aaPolicyYear andMOP:@""]) + VURetPrevValueHigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVURetInstHigh:aaPolicyYear andMOP:@"A"]) -
				([self ReturnRegWithdrawal:aaPolicyYear] * 0);
				VURetValueHigh = currentValue;
			}
			else{
				currentValue = VURetValueHigh;
			}
			
		}
		
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear < 60) {
				CashFactor = 0.00;
			}
			else if(Age + aaPolicyYear == 60){
				CashFactor = 1.00;
               
			}
			else{
				
				CashFactor = 12 * (1 + [self ReturnVURetInstHigh:aaPolicyYear andMOP:@"M"])/(pow((1 + [self ReturnVURetInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00)));
			}
		}
		
		if (aaRound == 2) {
			VURetPrevValueHigh = currentValue + VURetValue_EverCash1 + VURetValue_EverCash6 + (VURetValue_EverCash60 * CashFactor);
		}
		
		
		return currentValue + VURetValue_EverCash1 + VURetValue_EverCash6 + (VURetValue_EverCash60 * CashFactor);
	}
	
	
}

-(double)ReturnVURetValueMedian :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andRound:(NSInteger)aaRound andMonth:(int)i{
	
	double currentValue;
	
	if ([aaYearOrMonth isEqualToString:@"M"]) {
		
		
		if (i == 1) {
			MonthVURetPrevValueMedian = VURetPrevValueMedian ;
		}
		
		double tempPrev = MonthVURetPrevValueMedian;
		if ((i == MonthDiff2035 + 1 && aaPolicyYear == YearDiff2035)  ) {
			MonthVURetPrevValueMedian = MonthVURetPrevValueMedian + (temp2035Median * Fund2035ReinvestToRetFac/100.00);
		}
		else if(i == MonthDiff2030 + 1 && aaPolicyYear == YearDiff2030){
			MonthVURetPrevValueMedian = MonthVURetPrevValueMedian + (temp2030Median * Fund2030ReinvestToRetFac/100.00);
		}
		else if(i == MonthDiff2028 + 1 && aaPolicyYear == YearDiff2028){
			MonthVURetPrevValueMedian = MonthVURetPrevValueMedian + (temp2028Median * Fund2028ReinvestToRetFac/100.00);
		}
		else if(i == MonthDiff2025 + 1 && aaPolicyYear == YearDiff2025){
			MonthVURetPrevValueMedian = MonthVURetPrevValueMedian + (temp2025Median * Fund2025ReinvestToRetFac/100.00);
		}
		else if(i == MonthDiff2023 + 1 && aaPolicyYear == YearDiff2023){
			MonthVURetPrevValueMedian = MonthVURetPrevValueMedian + (temp2023Median * Fund2023ReinvestToRetFac/100.00);
		}
		else{
			
		}
		
		if (VUCashValueNegative == TRUE && MonthFundValueOfTheYearValueTotalMedian != 0 ) {
			currentValue= ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVURetFac:aaPolicyYear  andMonth:i] * CYFactor +
						   [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnPremiumFactor:i] * [self ReturnVURetFac:aaPolicyYear  andMonth:i] * CYFactor +
						   [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnPremiumFactor:i] * [self ReturnVURetFac:aaPolicyYear  andMonth:i] * CYFactor) *
			pow(1 + [self ReturnVURetInstMedian:@"A"], 1.00/12.00) + MonthVURetPrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
			pow(1 + [self ReturnVURetInstMedian:@"A"], 1.00/12.00) - ([self ReturnRegWithdrawal:aaPolicyYear] * 0) + (NegativeValueOfMaxCashFundMedian - 1) *
			MAX(0,(MonthFundValueOfTheYearVURetValueMedian_Basic/MonthFundValueOfTheYearValueTotalMedian));
			
		}
		else{
			currentValue = ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVURetFac:aaPolicyYear  andMonth:i] * CYFactor +
							[self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnPremiumFactor:i] * [self ReturnVURetFac:aaPolicyYear  andMonth:i] * CYFactor +
							[self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnPremiumFactor:i] * [self ReturnVURetFac:aaPolicyYear  andMonth:i] * CYFactor) *
			pow(1 + [self ReturnVURetInstMedian:@"A"], 1.00/12.00) + MonthVURetPrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
			pow(1 + [self ReturnVURetInstMedian:@"A"], 1.00/12.00) - ([self ReturnRegWithdrawal:aaPolicyYear] * 0);
			
		}
        
		double EverCashValue = VURetValue_EverCash1 * [self EverCash1_CashPaymentFactor:aaPolicyYear andMonth:i] +
		VURetValue_EverCash6 * [self EverCash6_CashPaymentFactor:aaPolicyYear andMonth:i] +
		VURetValue_EverCash60;
		
		if (aaRound == 2) {
			MonthVURetPrevValueMedian = currentValue + EverCashValue;
		}
		else{
			MonthVURetPrevValueMedian = tempPrev;
		}
		
        
		
		if (i == 12  && aaRound == 2) {
			VURetPrevValueMedian = MonthVURetPrevValueMedian;
			
			if(MonthDiff2035 == 12 && aaPolicyYear == YearDiff2035){ //the reinvestment fund from 2035 will be bring forward to next year
				VURetPrevValueMedian = VURetPrevValueMedian +  (temp2035Median * Fund2035ReinvestToRetFac/100.00);
			}
			else if(MonthDiff2030 == 12 && aaPolicyYear == YearDiff2030){ //the reinvestment fund from 2030 will be bring forward to next year
				VURetPrevValueMedian = VURetPrevValueMedian +  (temp2030Median * Fund2030ReinvestToRetFac/100.00);
			}
			else if(MonthDiff2028 == 12 && aaPolicyYear == YearDiff2028){ //the reinvestment fund from 2028 will be bring forward to next year
				VURetPrevValueMedian = VURetPrevValueMedian +  (temp2028Median * Fund2028ReinvestToRetFac/100.00);
			}
			else if(MonthDiff2025 == 12 && aaPolicyYear == YearDiff2025){ //the reinvestment fund from 2025 will be bring forward to next year
				VURetPrevValueMedian = VURetPrevValueMedian +  (temp2025Median * Fund2025ReinvestToRetFac/100.00);
			}
		}
		
		if (i == 12  && aaRound == 2) {
			
			//return currentValue + VURetValue_EverCash1 + VURetValue_EverCash6 + VURetValue_EverCash60;
			
			if(MonthDiff2035 == 12 && aaPolicyYear == YearDiff2035){
				return currentValue + (temp2035Median * Fund2035ReinvestToRetFac/100.00) + EverCashValue;
			}
			else if(MonthDiff2030 == 12 && aaPolicyYear == YearDiff2030){
				return currentValue +  (temp2030Median * Fund2030ReinvestToRetFac/100.00) + EverCashValue;
			}
			else if(MonthDiff2028 == 12 && aaPolicyYear == YearDiff2028){
				return currentValue + (temp2028Median * Fund2028ReinvestToRetFac/100.00) + EverCashValue;
			}
			else if(MonthDiff2025 == 12 && aaPolicyYear == YearDiff2025){
				return currentValue + (temp2025Median * Fund2025ReinvestToRetFac/100.00) + EverCashValue;
			}
			else{
				return currentValue + EverCashValue;
			}
		}
		else
		{
			return currentValue + EverCashValue;
		}
		
		
	}
	else{
		//if (VUCashValueMedian < 0 && [self ReturnFundValueOfTheYearValueTotalMedian:aaPolicyYear] != 0 ) {
		if (VUCashValueNegative == TRUE && FundValueOfTheYearValueTotalMedian != 0 ) {
			currentValue= ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear]) + IncreasePrem) * [self ReturnVURetFac:aaPolicyYear] * CYFactor +
						   [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * [self ReturnDivideMode] * RegularAllo * [self ReturnVURetFac:aaPolicyYear] * CYFactor +
						   [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnVURetFac:aaPolicyYear] * CYFactor) *
			(1 + [self ReturnVURetInstMedian:@""]) + VURetPrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVURetInstMedian:@"A"]) -
			([self ReturnRegWithdrawal:aaPolicyYear] * 0) + (NegativeValueOfMaxCashFundMedian - 1) *
			MAX(0,(FundValueOfTheYearVURetValueMedian_Basic/FundValueOfTheYearValueTotalMedian));
			
		}
		else{
			if (aaRound == 1) {
				currentValue = ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear]) + IncreasePrem) * [self ReturnVURetFac:aaPolicyYear] * CYFactor +
								[self ReturnRegTopUpPrem] * [self ReturnDivideMode] * [self ReturnDivideMode] * RegularAllo * [self ReturnVURetFac:aaPolicyYear] * CYFactor +
								[self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnVURetFac:aaPolicyYear] * CYFactor) *
				(1 + [self ReturnVURetInstMedian:@""]) + VURetPrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVURetInstMedian:@"A"]) -
				([self ReturnRegWithdrawal:aaPolicyYear] * 0);
				VURetValueMedian = currentValue;
			}
			else{
				currentValue = VURetValueMedian;
			}
		}
		
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear < 60) {
				CashFactor = 0.00;
			}
			else if(Age + aaPolicyYear == 60){
				CashFactor = 1.00;
			}
			else{
				CashFactor = 12 * (1 + [self ReturnVURetInstMedian:@"M"])/(pow((1 + [self ReturnVURetInstMedian:@"A"]), (1.00/12.00)));
			}
		}
		
		if (aaRound == 2) {
			VURetPrevValueMedian = currentValue + VURetValue_EverCash1 + VURetValue_EverCash6 + (VURetValue_EverCash60 * CashFactor);
		}
		return currentValue + VURetValue_EverCash1 + VURetValue_EverCash6 + (VURetValue_EverCash60 * CashFactor);
	}
	
}

-(double)ReturnVURetValueLow :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andRound:(NSInteger)aaRound andMonth:(int)i{
	
	double currentValue;
	
	
	if ([aaYearOrMonth isEqualToString:@"M"]) {
		
		
		if (i == 1) {
			MonthVURetPrevValueLow = VURetPrevValueLow ;
		}
		
		double tempPrev = MonthVURetPrevValueLow;
		if ((i == MonthDiff2035 + 1 && aaPolicyYear == YearDiff2035)  ) {
			MonthVURetPrevValueLow = MonthVURetPrevValueLow + (temp2035Low * Fund2035ReinvestToRetFac/100.00);
		}
		else if(i == MonthDiff2030 + 1 && aaPolicyYear == YearDiff2030){
			MonthVURetPrevValueLow = MonthVURetPrevValueLow + (temp2030Low * Fund2030ReinvestToRetFac/100.00);
		}
		else if(i == MonthDiff2028 + 1 && aaPolicyYear == YearDiff2028){
			MonthVURetPrevValueLow = MonthVURetPrevValueLow + (temp2028Low * Fund2028ReinvestToRetFac/100.00);
		}
		else if(i == MonthDiff2025 + 1 && aaPolicyYear == YearDiff2025){
			MonthVURetPrevValueLow = MonthVURetPrevValueLow + (temp2025Low * Fund2025ReinvestToRetFac/100.00);
		}
		else if(i == MonthDiff2023 + 1 && aaPolicyYear == YearDiff2023){
			MonthVURetPrevValueLow = MonthVURetPrevValueLow + (temp2023Low * Fund2023ReinvestToRetFac/100.00);
		}
		else{
			
		}
		
		if (VUCashValueNegative == TRUE && MonthFundValueOfTheYearValueTotalLow != 0 ) {
			currentValue= ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVURetFac:aaPolicyYear  andMonth:i] * CYFactor +
						   [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnPremiumFactor:i] * [self ReturnVURetFac:aaPolicyYear  andMonth:i] * CYFactor +
						   [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnPremiumFactor:i]  * [self ReturnVURetFac:aaPolicyYear  andMonth:i] * CYFactor) *
			pow(1 + [self ReturnVURetInstLow:@"A"], 1.00/12.00) + MonthVURetPrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
			pow(1 + [self ReturnVURetInstLow:@"A"], 1.00/12.00) - ([self ReturnRegWithdrawal:aaPolicyYear] * 0) + (NegativeValueOfMaxCashFundLow - 1) *
			MAX(0,(MonthFundValueOfTheYearVURetValueLow_Basic/MonthFundValueOfTheYearValueTotalLow));
			
		}
		else{
			currentValue = ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVURetFac:aaPolicyYear  andMonth:i] * CYFactor +
							[self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnPremiumFactor:i] * [self ReturnVURetFac:aaPolicyYear  andMonth:i] * CYFactor +
							[self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnPremiumFactor:i] * [self ReturnVURetFac:aaPolicyYear  andMonth:i] * CYFactor) *
			pow(1 + [self ReturnVURetInstLow:@"A"], 1.00/12.00) + MonthVURetPrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
			pow(1 + [self ReturnVURetInstLow:@"A"], 1.00/12.00) - ([self ReturnRegWithdrawal:aaPolicyYear] * 0);
			
		}
        
		double EverCashValue =  VURetValue_EverCash1 * [self EverCash1_CashPaymentFactor:aaPolicyYear andMonth:i] +
		VURetValue_EverCash6 * [self EverCash6_CashPaymentFactor:aaPolicyYear andMonth:i]  +
		VURetValue_EverCash60;
		
		if (aaRound == 2) {
			MonthVURetPrevValueLow = currentValue + EverCashValue;
		}
		else{
			MonthVURetPrevValueLow = tempPrev;
		}
		
        
        
		if (i == 12  && aaRound == 2) {
			VURetPrevValueLow = MonthVURetPrevValueLow;
			
			if(MonthDiff2035 == 12 && aaPolicyYear == YearDiff2035){ //the reinvestment fund from 2035 will be bring forward to next year
				VURetPrevValueLow = VURetPrevValueLow +  (temp2035Low * Fund2035ReinvestToRetFac/100.00);
			}
			else if(MonthDiff2030 == 12 && aaPolicyYear == YearDiff2030){ //the reinvestment fund from 2030 will be bring forward to next year
				VURetPrevValueLow = VURetPrevValueLow +  (temp2030Low * Fund2030ReinvestToRetFac/100.00);
			}
			else if(MonthDiff2028 == 12 && aaPolicyYear == YearDiff2028){ //the reinvestment fund from 2028 will be bring forward to next year
				VURetPrevValueLow = VURetPrevValueLow +  (temp2028Low * Fund2028ReinvestToRetFac/100.00);
			}
			else if(MonthDiff2025 == 12 && aaPolicyYear == YearDiff2025){ //the reinvestment fund from 2025 will be bring forward to next year
				VURetPrevValueLow = VURetPrevValueLow +  (temp2025Low * Fund2025ReinvestToRetFac/100.00);
			}
			
		}
		
		if (i == 12  && aaRound == 2) {
			
			//return currentValue + VURetValue_EverCash1 + VURetValue_EverCash6 + VURetValue_EverCash60;
			
			if(MonthDiff2035 == 12 && aaPolicyYear == YearDiff2035){
				return currentValue + (temp2035Low * Fund2035ReinvestToRetFac/100.00) + EverCashValue;
			}
			else if(MonthDiff2030 == 12 && aaPolicyYear == YearDiff2030){
				return currentValue +  (temp2030Low * Fund2030ReinvestToRetFac/100.00) + EverCashValue;
			}
			else if(MonthDiff2028 == 12 && aaPolicyYear == YearDiff2028){
				return currentValue + (temp2028Low * Fund2028ReinvestToRetFac/100.00) + EverCashValue;
			}
			else if(MonthDiff2025 == 12 && aaPolicyYear == YearDiff2025){
				return currentValue + (temp2025Low * Fund2025ReinvestToRetFac/100.00) + EverCashValue;
			}
			else{
				return currentValue + EverCashValue;
			}
		}
		else{
			return currentValue + EverCashValue;
		}
		
	}
	else{
		if (VUCashValueNegative == TRUE && FundValueOfTheYearValueTotalLow != 0 ) {
			currentValue= ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear]) + IncreasePrem) * [self ReturnVURetFac:aaPolicyYear] * CYFactor +
						   [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnVURetFac:aaPolicyYear] * CYFactor +
						   [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnVURetFac:aaPolicyYear] * CYFactor) *
			(1 + [self ReturnVURetInstLow:@""]) + VURetPrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVURetInstLow:@"A"]) -
			([self ReturnRegWithdrawal:aaPolicyYear] * 0) + (NegativeValueOfMaxCashFundLow - 1) *
			MAX(0,(FundValueOfTheYearVURetValueLow_Basic/FundValueOfTheYearValueTotalLow));
			
			//NSLog(@"");
			
		}
		else{
			if (aaRound == 1) {
				currentValue = ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear]) + IncreasePrem) * [self ReturnVURetFac:aaPolicyYear] * CYFactor +
								[self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnVURetFac:aaPolicyYear] * CYFactor +
								[self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnVURetFac:aaPolicyYear] * CYFactor) *
				(1 + [self ReturnVURetInstLow:@""]) + VURetPrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVURetInstLow:@"A"]) -
				([self ReturnRegWithdrawal:aaPolicyYear] * 0);
				VURetValueLow = currentValue;
			}
			else{
				currentValue = VURetValueLow;
			}
			
		}
		
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear < 60) {
				CashFactor = 0.00;
			}
			else if(Age + aaPolicyYear == 60){
				CashFactor = 1.00;
			}
			else{
				CashFactor = 12 * (1 + [self ReturnVURetInstLow:@"M"])/(pow((1 + [self ReturnVURetInstLow:@"A"]), (1.00/12.00)));
			}
		}
		
		if (aaRound == 2) {
			VURetPrevValueLow = currentValue + VURetValue_EverCash1 + VURetValue_EverCash6 + (VURetValue_EverCash60 * CashFactor);
		}
		return currentValue + VURetValue_EverCash1 + VURetValue_EverCash6 + (VURetValue_EverCash60 * CashFactor);
	}
	
}

-(double)ReturnVUDanaValueHigh :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andRound:(NSInteger)aaRound andMonth:(NSInteger)i{
	
	double currentValue =0.0;
	if ([aaYearOrMonth isEqualToString:@"M"]) {
		
		
		if (i == 1) {
			MonthVUDanaPrevValueHigh = VUDanaPrevValueHigh ;
		}
		
		double tempPrev = MonthVUDanaPrevValueHigh;
		
		if ((i == MonthDiff2035 + 1 && aaPolicyYear == YearDiff2035)) {
			MonthVUDanaPrevValueHigh = MonthVUDanaPrevValueHigh + (temp2035High * Fund2035ReinvestToDanaFac/100.00);
		}
		else if(i == MonthDiff2030 + 1 && aaPolicyYear == YearDiff2030){
			MonthVUDanaPrevValueHigh = MonthVUDanaPrevValueHigh + (temp2030High * Fund2030ReinvestToDanaFac/100.00);
		}
		else if(i == MonthDiff2028 + 1 && aaPolicyYear == YearDiff2028){
			MonthVUDanaPrevValueHigh = MonthVUDanaPrevValueHigh + (temp2028High * Fund2028ReinvestToDanaFac/100.00);
		}
		else if(i == MonthDiff2025 + 1 && aaPolicyYear == YearDiff2025){
			MonthVUDanaPrevValueHigh = MonthVUDanaPrevValueHigh + (temp2025High * Fund2025ReinvestToDanaFac/100.00);
		}
		else if(i == MonthDiff2023 + 1 && aaPolicyYear == YearDiff2023){
			MonthVUDanaPrevValueHigh = MonthVUDanaPrevValueHigh + (temp2023High * Fund2023ReinvestToDanaFac/100.00);
		}
		else{
			
		}
		
		//NSLog(@"%f", MonthVURetPrevValueHigh);
		if (VUCashValueNegative == TRUE && MonthFundValueOfTheYearValueTotalHigh != 0 ) {
			currentValue= ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUDanaFac:aaPolicyYear andMonth:i] * CYFactor +
						   [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnPremiumFactor:i] * [self ReturnVUDanaFac:aaPolicyYear andMonth:i] * CYFactor +
						   [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnPremiumFactor:i] * [self ReturnVUDanaFac:aaPolicyYear andMonth:i] * CYFactor) *
			pow(1 + [self ReturnVUDanaInstHigh:aaPolicyYear andMOP:@"A"],1.00/12.00) + MonthVUDanaPrevValueHigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
			pow(1 + [self ReturnVUDanaInstHigh:aaPolicyYear andMOP:@"A"], 1.00/12.00) -
			([self ReturnRegWithdrawal:aaPolicyYear] * 0) + (NegativeValueOfMaxCashFundHigh - 1) *
			MAX(0,(MonthFundValueOfTheYearVUDanaValueHigh_Basic/MonthFundValueOfTheYearValueTotalHigh));
			
			//NSLog(@"%f %f %f",NegativeValueOfMaxCashFundHigh, MonthVURetValueHigh,MonthFundValueOfTheYearValueTotalHigh );
			
		}
		else{
			currentValue = ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUDanaFac:aaPolicyYear  andMonth:i] * CYFactor +
							[self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnPremiumFactor:i] * [self ReturnVUDanaFac:aaPolicyYear andMonth:i] * CYFactor +
							[self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnPremiumFactor:i] * [self ReturnVUDanaFac:aaPolicyYear andMonth:i] * CYFactor) *
			pow((1 + [self ReturnVUDanaInstHigh:aaPolicyYear andMOP:@"A"]),(1.00/12.00)) + MonthVUDanaPrevValueHigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
			pow((1 + [self ReturnVUDanaInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00)) -
			([self ReturnRegWithdrawal:aaPolicyYear] * 0);
			
			
		}
		
		//NSLog(@"%f, %f, %f, %f",NegativeValueOfMaxCashFundHigh, MonthVURetValueHigh, MonthFundValueOfTheYearValueTotalHigh, currentValue);
        
		double EverCashValue = VUDanaValue_EverCash1 * [self EverCash1_CashPaymentFactor:aaPolicyYear andMonth:i] +
		VUDanaValue_EverCash6 * [self EverCash6_CashPaymentFactor:aaPolicyYear andMonth:i] +
		VUDanaValue_EverCash60;
		
		if (aaRound == 2) {
			MonthVUDanaPrevValueHigh = currentValue + EverCashValue;
		}
		else{
			MonthVUDanaPrevValueHigh = tempPrev;
		}
		
        
		
		if (i == 12  && aaRound == 2) {
			VUDanaPrevValueHigh = MonthVUDanaPrevValueHigh;
			
			if(MonthDiff2035 == 12 && aaPolicyYear == YearDiff2035){ //the reinvestment fund from 2035 will be bring forward to next year
				VUDanaPrevValueHigh = VUDanaPrevValueHigh +  (temp2035High * Fund2035ReinvestToDanaFac/100.00);
			}
			else if(MonthDiff2030 == 12 && aaPolicyYear == YearDiff2030){ //the reinvestment fund from 2030 will be bring forward to next year
				VUDanaPrevValueHigh = VUDanaPrevValueHigh +  (temp2030High * Fund2030ReinvestToDanaFac/100.00);
			}
			else if(MonthDiff2028 == 12 && aaPolicyYear == YearDiff2028){ //the reinvestment fund from 2028 will be bring forward to next year
				VUDanaPrevValueHigh = VUDanaPrevValueHigh +  (temp2028High * Fund2028ReinvestToDanaFac/100.00);
			}
			else if(MonthDiff2025 == 12 && aaPolicyYear == YearDiff2025){ //the reinvestment fund from 2025 will be bring forward to next year
				VUDanaPrevValueHigh = VUDanaPrevValueHigh +  (temp2025High * Fund2025ReinvestToDanaFac/100.00);
			}
		}
		
		//NSLog(@"%d %f %f, %d ", i, MonthVURetValueHigh, MonthFundValueOfTheYearValueTotalHigh, VUCashValueNegative);
		//return MonthVURetPrevValueHigh;
		if (i == 12  && aaRound == 2) {
			if(MonthDiff2035 == 12 && aaPolicyYear == YearDiff2035){ //the reinvestment fund from 2035 will be bring forward to next year
				return currentValue + (temp2035High * Fund2035ReinvestToDanaFac/100.00) + EverCashValue;
			}
			else if(MonthDiff2030 == 12 && aaPolicyYear == YearDiff2030){ //the reinvestment fund from 2030 will be bring forward to next year
				return currentValue +  (temp2030High * Fund2030ReinvestToDanaFac/100.00) + EverCashValue;
			}
			else if(MonthDiff2028 == 12 && aaPolicyYear == YearDiff2028){ //the reinvestment fund from 2028 will be bring forward to next year
				return  currentValue +  (temp2028High * Fund2028ReinvestToDanaFac/100.00) + EverCashValue;
			}
			else if(MonthDiff2025 == 12 && aaPolicyYear == YearDiff2025){ //the reinvestment fund from 2025 will be bring forward to next year
				return currentValue +  (temp2025High * Fund2025ReinvestToDanaFac/100.00) + EverCashValue;
			}
			else{
				return currentValue + EverCashValue;
			}
			//return currentValue + VUDanaValue_EverCash1 + VUDanaValue_EverCash6 + VUDanaValue_EverCash60;
		}
		else{
			return currentValue + EverCashValue ;
		}
		
		
		
		
	}
	else{
		//if (VUCashValueHigh < 0 && [self ReturnFundValueOfTheYearValueTotalHigh:aaPolicyYear] != 0 ) {
		if (VUCashValueNegative == TRUE && FundValueOfTheYearValueTotalHigh != 0 ) {
			currentValue= ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear]) + IncreasePrem) * [self ReturnVUDanaFac:aaPolicyYear] * CYFactor +
						   [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnVUDanaFac:aaPolicyYear] * CYFactor +
						   [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnVUDanaFac:aaPolicyYear] * CYFactor) *
			(1 + [self ReturnVUDanaInstHigh:aaPolicyYear andMOP:@""]) + VUDanaPrevValueHigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUDanaInstHigh:aaPolicyYear andMOP:@"A"]) -
			([self ReturnRegWithdrawal:aaPolicyYear] * 0) + (NegativeValueOfMaxCashFundHigh - 1) *
			MAX(0,(FundValueOfTheYearVUDanaValueHigh_Basic/FundValueOfTheYearValueTotalHigh));
			
		}
		else{
			if (aaRound == 1) {
				currentValue = ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear]) + IncreasePrem) * [self ReturnVUDanaFac:aaPolicyYear] * CYFactor +
								[self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnVUDanaFac:aaPolicyYear] * CYFactor +
								[self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnVUDanaFac:aaPolicyYear] * CYFactor) *
				(1 + [self ReturnVUDanaInstHigh:aaPolicyYear andMOP:@""]) + VUDanaPrevValueHigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUDanaInstHigh:aaPolicyYear andMOP:@"A"]) -
				([self ReturnRegWithdrawal:aaPolicyYear] * 0);
				
				VUDanaValueHigh = currentValue;
			}
			else{
				currentValue = VUDanaValueHigh;
			}
			
		}
        
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear < 60) {
				CashFactor = 0.00;
			}
			else if(Age + aaPolicyYear == 60){
				CashFactor = 1.00;
			}
			else{
				CashFactor = 12 * (1 + [self ReturnVUDanaInstHigh:aaPolicyYear andMOP:@"M"])/(pow((1 + [self ReturnVURetInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00)));
			}
		}
		
		//NSLog(@"%d %f, %d ", aaPolicyYear,  [self ReturnVUDanaFac:aaPolicyYear], aaRound );
		
		if (aaRound == 2) {
			VUDanaPrevValueHigh = currentValue +  VUDanaValue_EverCash1 + VUDanaValue_EverCash6 + (VUDanaValue_EverCash60 * CashFactor);
		}
		
		return currentValue +  VUDanaValue_EverCash1 + VUDanaValue_EverCash6 + (VUDanaValue_EverCash60 * CashFactor);
	}
	
	
}

-(double)ReturnVUDanaValueMedian :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andRound:(NSInteger)aaRound andMonth:(int)i{
	
	double currentValue;
	
	if ([aaYearOrMonth isEqualToString:@"M"]) {
		
		
		if (i == 1) {
			MonthVUDanaPrevValueMedian = VUDanaPrevValueMedian ;
		}
		
		double tempPrev = MonthVUDanaPrevValueMedian;
		if ((i == MonthDiff2035 + 1 && aaPolicyYear == YearDiff2035)  ) {
			MonthVUDanaPrevValueMedian = MonthVUDanaPrevValueMedian + (temp2035Median * Fund2035ReinvestToDanaFac/100.00);
		}
		else if(i == MonthDiff2030 + 1 && aaPolicyYear == YearDiff2030){
			MonthVUDanaPrevValueMedian = MonthVUDanaPrevValueMedian + (temp2030Median * Fund2030ReinvestToDanaFac/100.00);
		}
		else if(i == MonthDiff2028 + 1 && aaPolicyYear == YearDiff2028){
			MonthVUDanaPrevValueMedian = MonthVUDanaPrevValueMedian + (temp2028Median * Fund2028ReinvestToDanaFac/100.00);
		}
		else if(i == MonthDiff2025 + 1 && aaPolicyYear == YearDiff2025){
			MonthVUDanaPrevValueMedian = MonthVUDanaPrevValueMedian + (temp2025Median * Fund2025ReinvestToDanaFac/100.00);
		}
		else if(i == MonthDiff2023 + 1 && aaPolicyYear == YearDiff2023){
			MonthVUDanaPrevValueMedian = MonthVUDanaPrevValueMedian + (temp2023Median * Fund2023ReinvestToDanaFac/100.00);
		}
		else{
			
		}
		
		if (VUCashValueNegative == TRUE && MonthFundValueOfTheYearValueTotalMedian != 0 ) {
			currentValue= ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUDanaFac:aaPolicyYear  andMonth:i] * CYFactor +
						   [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnPremiumFactor:i] * [self ReturnVUDanaFac:aaPolicyYear  andMonth:i] * CYFactor +
						   [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnPremiumFactor:i] * [self ReturnVUDanaFac:aaPolicyYear  andMonth:i] * CYFactor) *
			pow(1 + [self ReturnVUDanaInstMedian:@"A"], 1.00/12.00) + MonthVUDanaPrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
			pow(1 + [self ReturnVUDanaInstMedian:@"A"], 1.00/12.00) - ([self ReturnRegWithdrawal:aaPolicyYear] * 0) + (NegativeValueOfMaxCashFundMedian - 1) *
			MAX(0,(MonthFundValueOfTheYearVUDanaValueMedian_Basic/MonthFundValueOfTheYearValueTotalMedian));
			
		}
		else{
			currentValue = ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUDanaFac:aaPolicyYear  andMonth:i] * CYFactor +
							[self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnPremiumFactor:i] * [self ReturnVUDanaFac:aaPolicyYear  andMonth:i] * CYFactor +
							[self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnPremiumFactor:i] * [self ReturnVUDanaFac:aaPolicyYear  andMonth:i] * CYFactor) *
			pow(1 + [self ReturnVUDanaInstMedian:@"A"], 1.00/12.00) + MonthVUDanaPrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
			pow(1 + [self ReturnVUDanaInstMedian:@"A"], 1.00/12.00) - ([self ReturnRegWithdrawal:aaPolicyYear] * 0);
			
		}
        
		double EverCashValue = VUDanaValue_EverCash1 * [self EverCash1_CashPaymentFactor:aaPolicyYear andMonth:i] +
		VUDanaValue_EverCash6 * [self EverCash6_CashPaymentFactor:aaPolicyYear andMonth:i] +
		VUDanaValue_EverCash60;
		
		if (aaRound == 2) {
			MonthVUDanaPrevValueMedian = currentValue + EverCashValue;
		}
		else{
			MonthVUDanaPrevValueMedian = tempPrev;
		}
		
        
		
		if (i == 12  && aaRound == 2) {
			VUDanaPrevValueMedian = MonthVUDanaPrevValueMedian;
			
			if(MonthDiff2035 == 12 && aaPolicyYear == YearDiff2035){ //the reinvestment fund from 2035 will be bring forward to next year
				VUDanaPrevValueMedian = VUDanaPrevValueMedian +  (temp2035Median * Fund2035ReinvestToDanaFac/100.00);
			}
			else if(MonthDiff2030 == 12 && aaPolicyYear == YearDiff2030){ //the reinvestment fund from 2030 will be bring forward to next year
				VUDanaPrevValueMedian = VUDanaPrevValueMedian +  (temp2030Median * Fund2030ReinvestToDanaFac/100.00);
			}
			else if(MonthDiff2028 == 12 && aaPolicyYear == YearDiff2028){ //the reinvestment fund from 2028 will be bring forward to next year
				VUDanaPrevValueMedian = VUDanaPrevValueMedian +  (temp2028Median * Fund2028ReinvestToDanaFac/100.00);
			}
			else if(MonthDiff2025 == 12 && aaPolicyYear == YearDiff2025){ //the reinvestment fund from 2025 will be bring forward to next year
				VUDanaPrevValueMedian = VUDanaPrevValueMedian +  (temp2025Median * Fund2025ReinvestToDanaFac/100.00);
			}
		}
		
		if (i == 12  && aaRound == 2) {
			
			if(MonthDiff2035 == 12 && aaPolicyYear == YearDiff2035){ //the reinvestment fund from 2035 will be bring forward to next year
				return currentValue +  (temp2035Median * Fund2035ReinvestToDanaFac/100.00) + EverCashValue;
			}
			else if(MonthDiff2030 == 12 && aaPolicyYear == YearDiff2030){ //the reinvestment fund from 2030 will be bring forward to next year
				return currentValue + (temp2030Median * Fund2030ReinvestToDanaFac/100.00) + EverCashValue;
			}
			else if(MonthDiff2028 == 12 && aaPolicyYear == YearDiff2028){ //the reinvestment fund from 2028 will be bring forward to next year
				return currentValue +  (temp2028Median * Fund2028ReinvestToDanaFac/100.00) + EverCashValue;
			}
			else if(MonthDiff2025 == 12 && aaPolicyYear == YearDiff2025){ //the reinvestment fund from 2025 will be bring forward to next year
				return currentValue + (temp2025Median * Fund2025ReinvestToDanaFac/100.00) + EverCashValue;
			}
			else{
				return currentValue + EverCashValue;
			}
			
			//return currentValue + VUDanaValue_EverCash1 + VUDanaValue_EverCash6 + VUDanaValue_EverCash60;
		}
		else{
			//return MonthVURetPrevValueMedian;
			return currentValue + EverCashValue;
		}
		
	}
	else{
		//if (VUCashValueMedian < 0 && [self ReturnFundValueOfTheYearValueTotalMedian:aaPolicyYear] != 0 ) {
		if (VUCashValueNegative == TRUE && FundValueOfTheYearValueTotalMedian != 0 ) {
			currentValue= ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear]) + IncreasePrem) * [self ReturnVUDanaFac:aaPolicyYear] * CYFactor +
						   [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnVUDanaFac:aaPolicyYear] * CYFactor +
						   [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnVUDanaFac:aaPolicyYear] * CYFactor) *
			(1 + [self ReturnVUDanaInstMedian:@""]) + VUDanaPrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUDanaInstMedian:@"A"]) -
			([self ReturnRegWithdrawal:aaPolicyYear] * 0) + (NegativeValueOfMaxCashFundMedian - 1) *
			MAX(0,(FundValueOfTheYearVUDanaValueMedian_Basic/FundValueOfTheYearValueTotalMedian));
			
		}
		else{
			if (aaRound == 1) {
				currentValue = ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear]) + IncreasePrem) * [self ReturnVUDanaFac:aaPolicyYear] * CYFactor +
								[self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnVUDanaFac:aaPolicyYear] * CYFactor +
								[self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnVUDanaFac:aaPolicyYear] * CYFactor) *
				(1 + [self ReturnVUDanaInstMedian:@""]) + VUDanaPrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUDanaInstMedian:@"A"]) -
				([self ReturnRegWithdrawal:aaPolicyYear] * 0);
				VUDanaValueMedian = currentValue;
			}
			else{
				currentValue = VUDanaValueMedian;
			}
		}
		
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear < 60) {
				CashFactor = 0.00;
			}
			else if(Age + aaPolicyYear == 60){
				CashFactor = 1.00;
			}
			else{
				CashFactor = 12 * (1 + [self ReturnVUDanaInstMedian:@"M"])/(pow((1 + [self ReturnVUDanaInstMedian:@"A"]), (1.00/12.00)));
			}
		}
		
		if (aaRound == 2) {
			VUDanaPrevValueMedian = currentValue +  VUDanaValue_EverCash1  + VUDanaValue_EverCash6 + (VUDanaValue_EverCash60 * CashFactor);
		}
		return currentValue +  VUDanaValue_EverCash1 + VUDanaValue_EverCash6 + (VUDanaValue_EverCash60 * CashFactor);
	}
	
}

-(double)ReturnVUDanaValueLow :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andRound:(NSInteger)aaRound andMonth:(int)i{
	
	double currentValue;
	
	
	if ([aaYearOrMonth isEqualToString:@"M"]) {
		
		
		if (i == 1) {
			MonthVUDanaPrevValueLow = VUDanaPrevValueLow ;
		}
		
		double tempPrev = MonthVUDanaPrevValueLow;
		if ((i == MonthDiff2035 + 1 && aaPolicyYear == YearDiff2035)  ) {
			MonthVUDanaPrevValueLow = MonthVUDanaPrevValueLow + (temp2035Low * Fund2035ReinvestToDanaFac/100.00);
		}
		else if(i == MonthDiff2030 + 1 && aaPolicyYear == YearDiff2030){
			MonthVUDanaPrevValueLow = MonthVUDanaPrevValueLow + (temp2030Low * Fund2030ReinvestToDanaFac/100.00);
		}
		else if(i == MonthDiff2028 + 1 && aaPolicyYear == YearDiff2028){
			MonthVUDanaPrevValueLow = MonthVUDanaPrevValueLow + (temp2028Low * Fund2028ReinvestToDanaFac/100.00);
		}
		else if(i == MonthDiff2025 + 1 && aaPolicyYear == YearDiff2025){
			MonthVUDanaPrevValueLow = MonthVUDanaPrevValueLow + (temp2025Low * Fund2025ReinvestToDanaFac/100.00);
		}
		else if(i == MonthDiff2023 + 1 && aaPolicyYear == YearDiff2023){
			MonthVUDanaPrevValueLow = MonthVUDanaPrevValueLow + (temp2023Low * Fund2023ReinvestToDanaFac/100.00);
		}
		else{
			
		}
		
		if (VUCashValueNegative == TRUE && MonthFundValueOfTheYearValueTotalLow != 0 ) {
			currentValue= ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUDanaFac:aaPolicyYear  andMonth:i] * CYFactor +
						   [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnPremiumFactor:i] * [self ReturnVUDanaFac:aaPolicyYear  andMonth:i]* CYFactor +
						   [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnPremiumFactor:i] * [self ReturnVUDanaFac:aaPolicyYear  andMonth:i] * CYFactor) *
			pow(1 + [self ReturnVUDanaInstLow:@"A"], 1.00/12.00) + MonthVUDanaPrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
			pow(1 + [self ReturnVUDanaInstLow:@"A"], 1.00/12.00) - ([self ReturnRegWithdrawal:aaPolicyYear] * 0) + (NegativeValueOfMaxCashFundLow - 1) *
			MAX(0,(MonthFundValueOfTheYearVUDanaValueLow_Basic/MonthFundValueOfTheYearValueTotalLow));
			
		}
		else{
			currentValue = ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUDanaFac:aaPolicyYear  andMonth:i] * CYFactor +
							[self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnPremiumFactor:i] * [self ReturnVUDanaFac:aaPolicyYear  andMonth:i] * CYFactor +
							[self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnPremiumFactor:i] * [self ReturnVUDanaFac:aaPolicyYear  andMonth:i] * CYFactor) *
			pow(1 + [self ReturnVUDanaInstLow:@"A"], 1.00/12.00) + MonthVUDanaPrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
			pow(1 + [self ReturnVUDanaInstLow:@"A"], 1.00/12.00) - ([self ReturnRegWithdrawal:aaPolicyYear] * 0);
			
		}
		
		double EverCashValue = VUDanaValue_EverCash1 * [self EverCash1_CashPaymentFactor:aaPolicyYear andMonth:i] +
		VUDanaValue_EverCash6 * [self EverCash6_CashPaymentFactor:aaPolicyYear andMonth:i] +
		VUDanaValue_EverCash60;
		
		if (aaRound == 2) {
			MonthVUDanaPrevValueLow = currentValue + EverCashValue;
		}
		else{
			MonthVUDanaPrevValueLow = tempPrev;
		}
		
        
		
		if (i == 12  && aaRound == 2) {
			VUDanaPrevValueLow = MonthVUDanaPrevValueLow ;
			
			if(MonthDiff2035 == 12 && aaPolicyYear == YearDiff2035){ //the reinvestment fund from 2035 will be bring forward to next year
				VUDanaPrevValueLow = VUDanaPrevValueLow +  (temp2035Low * Fund2035ReinvestToDanaFac/100.00);
			}
			else if(MonthDiff2030 == 12 && aaPolicyYear == YearDiff2030){ //the reinvestment fund from 2030 will be bring forward to next year
				VUDanaPrevValueLow = VUDanaPrevValueLow +  (temp2030Low * Fund2030ReinvestToDanaFac/100.00);
			}
			else if(MonthDiff2028 == 12 && aaPolicyYear == YearDiff2028){ //the reinvestment fund from 2028 will be bring forward to next year
				VUDanaPrevValueLow = VUDanaPrevValueLow +  (temp2028Low * Fund2028ReinvestToDanaFac/100.00);
			}
			else if(MonthDiff2025 == 12 && aaPolicyYear == YearDiff2025){ //the reinvestment fund from 2025 will be bring forward to next year
				VUDanaPrevValueLow = VUDanaPrevValueLow +  (temp2025Low * Fund2025ReinvestToDanaFac/100.00);
			}
		}
		
		if (i == 12  && aaRound == 2) {
			
			if(MonthDiff2035 == 12 && aaPolicyYear == YearDiff2035){ //the reinvestment fund from 2035 will be bring forward to next year
				return currentValue +  (temp2035Low * Fund2035ReinvestToDanaFac/100.00) + EverCashValue;
			}
			else if(MonthDiff2030 == 12 && aaPolicyYear == YearDiff2030){ //the reinvestment fund from 2030 will be bring forward to next year
				return currentValue +  (temp2030Low * Fund2030ReinvestToDanaFac/100.00) + EverCashValue;
			}
			else if(MonthDiff2028 == 12 && aaPolicyYear == YearDiff2028){ //the reinvestment fund from 2028 will be bring forward to next year
				return currentValue +  (temp2028Low * Fund2028ReinvestToDanaFac/100.00) + EverCashValue;
			}
			else if(MonthDiff2025 == 12 && aaPolicyYear == YearDiff2025){ //the reinvestment fund from 2025 will be bring forward to next year
				return currentValue +  (temp2025Low * Fund2025ReinvestToDanaFac/100.00) + EverCashValue;
			}
			else{
				return currentValue + EverCashValue;
			}
			
			//return currentValue + VUDanaValue_EverCash1 + VUDanaValue_EverCash6 + VUDanaValue_EverCash60;
		}
		else{
			return currentValue + EverCashValue;
		}
		
	}
	else{
		if (VUCashValueNegative == TRUE && FundValueOfTheYearValueTotalLow != 0 ) {
			currentValue= ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear]) + IncreasePrem) * [self ReturnVUDanaFac:aaPolicyYear] * CYFactor +
						   [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnVUDanaFac:aaPolicyYear] * CYFactor +
						   [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnVUDanaFac:aaPolicyYear] * CYFactor) *
			(1 + [self ReturnVUDanaInstLow:@""]) + VUDanaPrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUDanaInstLow:@"A"]) -
			([self ReturnRegWithdrawal:aaPolicyYear] * 0) + (NegativeValueOfMaxCashFundLow - 1) *
			MAX(0,(FundValueOfTheYearVUDanaValueLow_Basic/FundValueOfTheYearValueTotalLow));
			
		}
		else{
			if (aaRound == 1) {
				currentValue = ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear]) + IncreasePrem) * [self ReturnVUDanaFac:aaPolicyYear] * CYFactor +
								[self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnVUDanaFac:aaPolicyYear] * CYFactor +
								[self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnVUDanaFac:aaPolicyYear] * CYFactor) *
				(1 + [self ReturnVUDanaInstLow:@""]) + VUDanaPrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUDanaInstLow:@"A"]) -
				([self ReturnRegWithdrawal:aaPolicyYear] * 0);
				VUDanaValueLow = currentValue;
			}
			else{
				currentValue = VUDanaValueLow;
			}
			
		}
		
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear < 60) {
				CashFactor = 0.00;
			}
			else if(Age + aaPolicyYear == 60){
				CashFactor = 1.00;
			}
			else{
				CashFactor = 12 * (1 + [self ReturnVUDanaInstLow:@"M"])/(pow((1 + [self ReturnVUDanaInstLow:@"A"]), (1.00/12.00)));
			}
		}
		
		if (aaRound == 2) {
			VUDanaPrevValueLow = currentValue +  VUDanaValue_EverCash1 + VUDanaValue_EverCash6 + (VUDanaValue_EverCash60 * CashFactor);
		}
		return currentValue +  VUDanaValue_EverCash1 + VUDanaValue_EverCash6 + (VUDanaValue_EverCash60 * CashFactor);
	}
	
}

-(double)ReturnVUSmartValueHigh :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andRound:(NSInteger)aaRound andMonth:(NSInteger)i{
	
	double currentValue =0.0;
	if ([aaYearOrMonth isEqualToString:@"M"]) {
		
		
		if (i == 1) {
			MonthVUSmartPrevValueHigh = VUSmartPrevValueHigh ;
		}
		
		double tempPrev = MonthVUSmartPrevValueHigh;
		
		if ((i == MonthDiff2035 + 1 && aaPolicyYear == YearDiff2035)) {
			MonthVUSmartPrevValueHigh = MonthVUSmartPrevValueHigh + (temp2035High * Fund2035ReinvestToSmartFac/100.00);
		}
		else if(i == MonthDiff2030 + 1 && aaPolicyYear == YearDiff2030){
			MonthVUSmartPrevValueHigh = MonthVUSmartPrevValueHigh + (temp2030High * Fund2030ReinvestToSmartFac/100.00);
		}
		else if(i == MonthDiff2028 + 1 && aaPolicyYear == YearDiff2028){
			MonthVUSmartPrevValueHigh = MonthVUSmartPrevValueHigh + (temp2028High * Fund2028ReinvestToSmartFac/100.00);
		}
		else if(i == MonthDiff2025 + 1 && aaPolicyYear == YearDiff2025){
			MonthVUSmartPrevValueHigh = MonthVUSmartPrevValueHigh + (temp2025High * Fund2025ReinvestToSmartFac/100.00);
		}
		else if(i == MonthDiff2023 + 1 && aaPolicyYear == YearDiff2023){
			MonthVUSmartPrevValueHigh = MonthVUSmartPrevValueHigh + (temp2023High * 0/100.00);
		}
		else{
			
		}
		
		//NSLog(@"%f", MonthVURetPrevValueHigh);
		if (VUCashValueNegative == TRUE && MonthFundValueOfTheYearValueTotalHigh != 0 ) {
			currentValue= ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUSmartFac:aaPolicyYear andMonth:i] * CYFactor +
						   [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnPremiumFactor:i] * [self ReturnVUSmartFac:aaPolicyYear andMonth:i]* CYFactor +
						   [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnPremiumFactor:i] * [self ReturnVUSmartFac:aaPolicyYear andMonth:i] * CYFactor) *
			pow(1 + [self ReturnVUSmartInstHigh:aaPolicyYear andMOP:@"A"],1.00/12.00) + MonthVUSmartPrevValueHigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
			pow(1 + [self ReturnVUSmartInstHigh:aaPolicyYear andMOP:@"A"], 1.00/12.00) -
			([self ReturnRegWithdrawal:aaPolicyYear] * 0) + (NegativeValueOfMaxCashFundHigh - 1) *
			MAX(0,(MonthFundValueOfTheYearVUSmartValueHigh_Basic/MonthFundValueOfTheYearValueTotalHigh));
			
			//NSLog(@"%f %f %f",NegativeValueOfMaxCashFundHigh, MonthVURetValueHigh,MonthFundValueOfTheYearValueTotalHigh );
			
		}
		else{
			currentValue = ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUSmartFac:aaPolicyYear  andMonth:i] * CYFactor +
							[self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnPremiumFactor:i] * [self ReturnVUSmartFac:aaPolicyYear andMonth:i] * CYFactor +
							[self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnPremiumFactor:i] * [self ReturnVUSmartFac:aaPolicyYear andMonth:i] * CYFactor) *
			pow((1 + [self ReturnVUSmartInstHigh:aaPolicyYear andMOP:@"A"]),(1.00/12.00)) + MonthVUSmartPrevValueHigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
			pow((1 + [self ReturnVUSmartInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00)) -
			([self ReturnRegWithdrawal:aaPolicyYear] * 0);
			
			
		}
		
		//NSLog(@"%f, %f, %f, %f",NegativeValueOfMaxCashFundHigh, MonthVURetValueHigh, MonthFundValueOfTheYearValueTotalHigh, currentValue);
        
		double EverCashValue = VUSmartValue_EverCash1 * [self EverCash1_CashPaymentFactor:aaPolicyYear andMonth:i] +
		VUSmartValue_EverCash6 * [self EverCash6_CashPaymentFactor:aaPolicyYear andMonth:i] +
		VUSmartValue_EverCash60;
		
		if (aaRound == 2) {
			MonthVUSmartPrevValueHigh = currentValue + EverCashValue;
		}
		else{
			MonthVUSmartPrevValueHigh = tempPrev;
		}
		
        
		
		if (i == 12  && aaRound == 2) {
			VUSmartPrevValueHigh = MonthVUSmartPrevValueHigh;
			
			if(MonthDiff2035 == 12 && aaPolicyYear == YearDiff2035){ //the reinvestment fund from 2035 will be bring forward to next year
				VUSmartPrevValueHigh = VUSmartPrevValueHigh +  (temp2035High * Fund2035ReinvestToSmartFac/100.00);
			}
			else if(MonthDiff2030 == 12 && aaPolicyYear == YearDiff2030){ //the reinvestment fund from 2030 will be bring forward to next year
				VUSmartPrevValueHigh = VUSmartPrevValueHigh +  (temp2030High * Fund2030ReinvestToSmartFac/100.00);
			}
			else if(MonthDiff2028 == 12 && aaPolicyYear == YearDiff2028){ //the reinvestment fund from 2028 will be bring forward to next year
				VUSmartPrevValueHigh = VUSmartPrevValueHigh +  (temp2028High * Fund2028ReinvestToSmartFac/100.00);
			}
			else if(MonthDiff2025 == 12 && aaPolicyYear == YearDiff2025){ //the reinvestment fund from 2025 will be bring forward to next year
				VUSmartPrevValueHigh = VUSmartPrevValueHigh +  (temp2025High * Fund2025ReinvestToSmartFac/100.00);
			}
		}
		
		//NSLog(@"%d %f %f, %d ", i, MonthVURetValueHigh, MonthFundValueOfTheYearValueTotalHigh, VUCashValueNegative);
		//return MonthVURetPrevValueHigh;
		if (i == 12  && aaRound == 2) {
			if(MonthDiff2035 == 12 && aaPolicyYear == YearDiff2035){ //the reinvestment fund from 2035 will be bring forward to next year
				return currentValue + (temp2035High * Fund2035ReinvestToSmartFac/100.00) + EverCashValue;
			}
			else if(MonthDiff2030 == 12 && aaPolicyYear == YearDiff2030){ //the reinvestment fund from 2030 will be bring forward to next year
				return currentValue +  (temp2030High * Fund2030ReinvestToSmartFac/100.00) + EverCashValue;
			}
			else if(MonthDiff2028 == 12 && aaPolicyYear == YearDiff2028){ //the reinvestment fund from 2028 will be bring forward to next year
				return  currentValue +  (temp2028High * Fund2028ReinvestToSmartFac/100.00) + EverCashValue;
			}
			else if(MonthDiff2025 == 12 && aaPolicyYear == YearDiff2025){ //the reinvestment fund from 2025 will be bring forward to next year
				return currentValue +  (temp2025High * Fund2025ReinvestToSmartFac/100.00) + EverCashValue;
			}
			else{
				return currentValue + EverCashValue;
			}
			//return currentValue + VUDanaValue_EverCash1 + VUDanaValue_EverCash6 + VUDanaValue_EverCash60;
		}
		else{
			return currentValue + EverCashValue ;
		}
		
		
		
		
	}
	else{
		//if (VUCashValueHigh < 0 && [self ReturnFundValueOfTheYearValueTotalHigh:aaPolicyYear] != 0 ) {
		if (VUCashValueNegative == TRUE && FundValueOfTheYearValueTotalHigh != 0 ) {
			currentValue= ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear]) + IncreasePrem) * [self ReturnVUSmartFac:aaPolicyYear] * CYFactor +
						   [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnVUSmartFac:aaPolicyYear] * CYFactor +
						   [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnVUSmartFac:aaPolicyYear] * CYFactor) *
			(1 + [self ReturnVUSmartInstHigh:aaPolicyYear andMOP:@""]) + VUSmartPrevValueHigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUSmartInstHigh:aaPolicyYear andMOP:@"A"]) -
			([self ReturnRegWithdrawal:aaPolicyYear] * 0) + (NegativeValueOfMaxCashFundHigh - 1) *
			MAX(0,(FundValueOfTheYearVUSmartValueHigh_Basic/FundValueOfTheYearValueTotalHigh));
			
		}
		else{
			if (aaRound == 1) {
				currentValue = ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear]) + IncreasePrem) * [self ReturnVUSmartFac:aaPolicyYear] * CYFactor +
								[self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnVUSmartFac:aaPolicyYear] * CYFactor +
								[self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnVUSmartFac:aaPolicyYear] * CYFactor) *
				(1 + [self ReturnVUSmartInstHigh:aaPolicyYear andMOP:@""]) + VUSmartPrevValueHigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUSmartInstHigh:aaPolicyYear andMOP:@"A"]) - ([self ReturnRegWithdrawal:aaPolicyYear] * 0);
				
				VUSmartValueHigh = currentValue;
			}
			else{
				currentValue = VUSmartValueHigh;
			}
			
		}
        
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear < 60) {
				CashFactor = 0.00;
			}
			else if(Age + aaPolicyYear == 60){
				CashFactor = 1.00;
			}
			else{
				CashFactor = 12 * (1 + [self ReturnVUSmartInstHigh:aaPolicyYear andMOP:@"M"])/(pow((1 + [self ReturnVUSmartInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00)));
			}
		}
		
		//NSLog(@"%d %f, %d ", aaPolicyYear,  [self ReturnVUDanaFac:aaPolicyYear], aaRound );
		
		if (aaRound == 2) {
			VUSmartPrevValueHigh = currentValue +  VUSmartValue_EverCash1 + VUSmartValue_EverCash6 + (VUSmartValue_EverCash60 * CashFactor);
		}
		
		return currentValue +  VUSmartValue_EverCash1 + VUSmartValue_EverCash6 + (VUSmartValue_EverCash60 * CashFactor);
	}
	
	
}

-(double)ReturnVUSmartValueMedian :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andRound:(NSInteger)aaRound andMonth:(int)i{
	
	double currentValue;
	
	if ([aaYearOrMonth isEqualToString:@"M"]) {
		
		
		if (i == 1) {
			MonthVUSmartPrevValueMedian = VUSmartPrevValueMedian ;
		}
		
		double tempPrev = MonthVUSmartPrevValueMedian;
		if ((i == MonthDiff2035 + 1 && aaPolicyYear == YearDiff2035)  ) {
			MonthVUSmartPrevValueMedian = MonthVUSmartPrevValueMedian + (temp2035Median * Fund2035ReinvestToSmartFac/100.00);
		}
		else if(i == MonthDiff2030 + 1 && aaPolicyYear == YearDiff2030){
			MonthVUSmartPrevValueMedian = MonthVUSmartPrevValueMedian + (temp2030Median * Fund2030ReinvestToSmartFac/100.00);
		}
		else if(i == MonthDiff2028 + 1 && aaPolicyYear == YearDiff2028){
			MonthVUSmartPrevValueMedian = MonthVUSmartPrevValueMedian + (temp2028Median * Fund2028ReinvestToSmartFac/100.00);
		}
		else if(i == MonthDiff2025 + 1 && aaPolicyYear == YearDiff2025){
			MonthVUSmartPrevValueMedian = MonthVUSmartPrevValueMedian + (temp2025Median * Fund2025ReinvestToSmartFac/100.00);
		}
		else if(i == MonthDiff2023 + 1 && aaPolicyYear == YearDiff2023){
			MonthVUSmartPrevValueMedian = MonthVUSmartPrevValueMedian + (temp2023Median * 0/100.00);
		}
		else{
			
		}
		
		if (VUCashValueNegative == TRUE && MonthFundValueOfTheYearValueTotalMedian != 0 ) {
			currentValue= ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUSmartFac:aaPolicyYear  andMonth:i] * CYFactor +
						   [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnPremiumFactor:i] * [self ReturnVUSmartFac:aaPolicyYear  andMonth:i] * CYFactor +
						   [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnPremiumFactor:i] * [self ReturnVUSmartFac:aaPolicyYear  andMonth:i] * CYFactor) *
			pow(1 + [self ReturnVUSmartInstMedian:@"A"], 1.00/12.00) + MonthVUSmartPrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
			pow(1 + [self ReturnVUSmartInstMedian:@"A"], 1.00/12.00) - ([self ReturnRegWithdrawal:aaPolicyYear] * 0) + (NegativeValueOfMaxCashFundMedian - 1) *
			MAX(0,(MonthFundValueOfTheYearVUSmartValueMedian_Basic/MonthFundValueOfTheYearValueTotalMedian));
			
		}
		else{
			currentValue = ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUSmartFac:aaPolicyYear  andMonth:i] * CYFactor +
							[self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnPremiumFactor:i] * [self ReturnVUSmartFac:aaPolicyYear  andMonth:i] * CYFactor +
							[self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnPremiumFactor:i] * [self ReturnVUSmartFac:aaPolicyYear  andMonth:i] * CYFactor) *
			pow(1 + [self ReturnVUSmartInstMedian:@"A"], 1.00/12.00) + MonthVUSmartPrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
			pow(1 + [self ReturnVUSmartInstMedian:@"A"], 1.00/12.00) - ([self ReturnRegWithdrawal:aaPolicyYear] * 0);
			
		}
        
		double EverCashValue = VUSmartValue_EverCash1 * [self EverCash1_CashPaymentFactor:aaPolicyYear andMonth:i] + VUSmartValue_EverCash6 * [self EverCash6_CashPaymentFactor:aaPolicyYear andMonth:i] +
        VUSmartValue_EverCash60;
		
		if (aaRound == 2) {
			MonthVUSmartPrevValueMedian = currentValue + EverCashValue;
		}
		else{
			MonthVUSmartPrevValueMedian = tempPrev;
		}
		
        
		
		if (i == 12  && aaRound == 2) {
			VUSmartPrevValueMedian = MonthVUSmartPrevValueMedian;
			
			if(MonthDiff2035 == 12 && aaPolicyYear == YearDiff2035){ //the reinvestment fund from 2035 will be bring forward to next year
				VUSmartPrevValueMedian = VUSmartPrevValueMedian +  (temp2035Median * Fund2035ReinvestToSmartFac/100.00);
			}
			else if(MonthDiff2030 == 12 && aaPolicyYear == YearDiff2030){ //the reinvestment fund from 2030 will be bring forward to next year
				VUSmartPrevValueMedian = VUSmartPrevValueMedian +  (temp2030Median * Fund2030ReinvestToSmartFac/100.00);
			}
			else if(MonthDiff2028 == 12 && aaPolicyYear == YearDiff2028){ //the reinvestment fund from 2028 will be bring forward to next year
				VUSmartPrevValueMedian = VUSmartPrevValueMedian +  (temp2028Median * Fund2028ReinvestToSmartFac/100.00);
			}
			else if(MonthDiff2025 == 12 && aaPolicyYear == YearDiff2025){ //the reinvestment fund from 2025 will be bring forward to next year
				VUSmartPrevValueMedian = VUSmartPrevValueMedian +  (temp2025Median * Fund2025ReinvestToSmartFac/100.00);
			}
		}
		
		if (i == 12  && aaRound == 2) {
			
			if(MonthDiff2035 == 12 && aaPolicyYear == YearDiff2035){ //the reinvestment fund from 2035 will be bring forward to next year
				return currentValue +  (temp2035Median * Fund2035ReinvestToSmartFac/100.00) + EverCashValue;
			}
			else if(MonthDiff2030 == 12 && aaPolicyYear == YearDiff2030){ //the reinvestment fund from 2030 will be bring forward to next year
				return currentValue + (temp2030Median * Fund2030ReinvestToSmartFac/100.00) + EverCashValue;
			}
			else if(MonthDiff2028 == 12 && aaPolicyYear == YearDiff2028){ //the reinvestment fund from 2028 will be bring forward to next year
				return currentValue +  (temp2028Median * Fund2028ReinvestToSmartFac/100.00) + EverCashValue;
			}
			else if(MonthDiff2025 == 12 && aaPolicyYear == YearDiff2025){ //the reinvestment fund from 2025 will be bring forward to next year
				return currentValue + (temp2025Median * Fund2025ReinvestToSmartFac/100.00) + EverCashValue;
			}
			else{
				return currentValue + EverCashValue;
			}
			
			//return currentValue + VUDanaValue_EverCash1 + VUDanaValue_EverCash6 + VUDanaValue_EverCash60;
		}
		else{
			//return MonthVURetPrevValueMedian;
			return currentValue + EverCashValue;
		}
		
	}
	else{
		//if (VUCashValueMedian < 0 && [self ReturnFundValueOfTheYearValueTotalMedian:aaPolicyYear] != 0 ) {
		if (VUCashValueNegative == TRUE && FundValueOfTheYearValueTotalMedian != 0 ) {
			currentValue= ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear]) + IncreasePrem) * [self ReturnVUSmartFac:aaPolicyYear] * CYFactor +
						   [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnVUSmartFac:aaPolicyYear] * CYFactor +
						   [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnVUSmartFac:aaPolicyYear] * CYFactor) *
			(1 + [self ReturnVUSmartInstMedian:@""]) + VUSmartPrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUSmartInstMedian:@"A"]) -
			([self ReturnRegWithdrawal:aaPolicyYear] * 0) + (NegativeValueOfMaxCashFundMedian - 1) *
			MAX(0,(FundValueOfTheYearVUSmartValueMedian_Basic/FundValueOfTheYearValueTotalMedian));
			
		}
		else{
			if (aaRound == 1) {
				currentValue = ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear]) + IncreasePrem) * [self ReturnVUSmartFac:aaPolicyYear] * CYFactor +
								[self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnVUSmartFac:aaPolicyYear] * CYFactor +
								[self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnVUSmartFac:aaPolicyYear] * CYFactor) *
				(1 + [self ReturnVUSmartInstMedian:@""]) + VUSmartPrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUSmartInstMedian:@"A"]) -
				([self ReturnRegWithdrawal:aaPolicyYear] * 0);
				VUSmartValueMedian = currentValue;
			}
			else{
				currentValue = VUSmartValueMedian;
			}
		}
		
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear < 60) {
				CashFactor = 0.00;
			}
			else if(Age + aaPolicyYear == 60){
				CashFactor = 1.00;
			}
			else{
				CashFactor = 12 * (1 + [self ReturnVUSmartInstMedian:@"M"])/(pow((1 + [self ReturnVUSmartInstMedian:@"A"]), (1.00/12.00)));
			}
		}
		
		if (aaRound == 2) {
			VUSmartPrevValueMedian = currentValue +  VUSmartValue_EverCash1  + VUSmartValue_EverCash6 + (VUSmartValue_EverCash60 * CashFactor);
		}
		return currentValue +  VUSmartValue_EverCash1 + VUSmartValue_EverCash6 + (VUSmartValue_EverCash60 * CashFactor);
	}
	
}

-(double)ReturnVUSmartValueLow :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andRound:(NSInteger)aaRound andMonth:(int)i{
	
	double currentValue;
	
	
	if ([aaYearOrMonth isEqualToString:@"M"]) {
		
		
		if (i == 1) {
			MonthVUSmartPrevValueLow = VUSmartPrevValueLow ;
		}
		
		double tempPrev = MonthVUSmartPrevValueLow;
		if ((i == MonthDiff2035 + 1 && aaPolicyYear == YearDiff2035)  ) {
			MonthVUSmartPrevValueLow = MonthVUSmartPrevValueLow + (temp2035Low * Fund2035ReinvestToSmartFac/100.00);
		}
		else if(i == MonthDiff2030 + 1 && aaPolicyYear == YearDiff2030){
			MonthVUSmartPrevValueLow = MonthVUSmartPrevValueLow + (temp2030Low * Fund2030ReinvestToSmartFac/100.00);
		}
		else if(i == MonthDiff2028 + 1 && aaPolicyYear == YearDiff2028){
			MonthVUSmartPrevValueLow = MonthVUSmartPrevValueLow + (temp2028Low * Fund2028ReinvestToSmartFac/100.00);
		}
		else if(i == MonthDiff2025 + 1 && aaPolicyYear == YearDiff2025){
			MonthVUSmartPrevValueLow = MonthVUSmartPrevValueLow + (temp2025Low * Fund2025ReinvestToSmartFac/100.00);
		}
		else if(i == MonthDiff2023 + 1 && aaPolicyYear == YearDiff2023){
			MonthVUSmartPrevValueLow = MonthVUSmartPrevValueLow + (temp2023Low * 0/100.00);
		}
		else{
			
		}
		
		if (VUCashValueNegative == TRUE && MonthFundValueOfTheYearValueTotalLow != 0 ) {
			currentValue= ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUSmartFac:aaPolicyYear  andMonth:i] * CYFactor +
						   [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnPremiumFactor:i] * [self ReturnVUSmartFac:aaPolicyYear  andMonth:i] * CYFactor +
						   [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnPremiumFactor:i] * [self ReturnVUSmartFac:aaPolicyYear  andMonth:i] * CYFactor) *
			pow(1 + [self ReturnVUSmartInstLow:@"A"], 1.00/12.00) + MonthVUSmartPrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
			pow(1 + [self ReturnVUSmartInstLow:@"A"], 1.00/12.00) - ([self ReturnRegWithdrawal:aaPolicyYear] * 0) + (NegativeValueOfMaxCashFundLow - 1) *
			MAX(0,(MonthFundValueOfTheYearVUSmartValueLow_Basic/MonthFundValueOfTheYearValueTotalLow));
			
		}
		else{
			currentValue = ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUSmartFac:aaPolicyYear  andMonth:i] * CYFactor +
							[self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnPremiumFactor:i] * [self ReturnVUSmartFac:aaPolicyYear  andMonth:i] * CYFactor +
							[self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnPremiumFactor:i] * [self ReturnVUSmartFac:aaPolicyYear  andMonth:i] * CYFactor) *
			pow(1 + [self ReturnVUSmartInstLow:@"A"], 1.00/12.00) + MonthVUSmartPrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
			pow(1 + [self ReturnVUSmartInstLow:@"A"], 1.00/12.00) - ([self ReturnRegWithdrawal:aaPolicyYear] * 0);
			
		}
		
		double EverCashValue = VUSmartValue_EverCash1 * [self EverCash1_CashPaymentFactor:aaPolicyYear andMonth:i] +
		VUSmartValue_EverCash6 * [self EverCash6_CashPaymentFactor:aaPolicyYear andMonth:i] +
		VUSmartValue_EverCash60;
		
		if (aaRound == 2) {
			MonthVUSmartPrevValueLow = currentValue + EverCashValue;
		}
		else{
			MonthVUSmartPrevValueLow = tempPrev;
		}
		
        
		
		if (i == 12  && aaRound == 2) {
			VUSmartPrevValueLow = MonthVUSmartPrevValueLow ;
			
			if(MonthDiff2035 == 12 && aaPolicyYear == YearDiff2035){ //the reinvestment fund from 2035 will be bring forward to next year
				VUSmartPrevValueLow = VUSmartPrevValueLow +  (temp2035Low * Fund2035ReinvestToSmartFac/100.00);
			}
			else if(MonthDiff2030 == 12 && aaPolicyYear == YearDiff2030){ //the reinvestment fund from 2030 will be bring forward to next year
				VUSmartPrevValueLow = VUSmartPrevValueLow +  (temp2030Low * Fund2030ReinvestToSmartFac/100.00);
			}
			else if(MonthDiff2028 == 12 && aaPolicyYear == YearDiff2028){ //the reinvestment fund from 2028 will be bring forward to next year
				VUSmartPrevValueLow = VUSmartPrevValueLow +  (temp2028Low * Fund2028ReinvestToSmartFac/100.00);
			}
			else if(MonthDiff2025 == 12 && aaPolicyYear == YearDiff2025){ //the reinvestment fund from 2025 will be bring forward to next year
				VUSmartPrevValueLow = VUSmartPrevValueLow +  (temp2025Low * Fund2025ReinvestToSmartFac/100.00);
			}
		}
		
		if (i == 12  && aaRound == 2) {
			
			if(MonthDiff2035 == 12 && aaPolicyYear == YearDiff2035){ //the reinvestment fund from 2035 will be bring forward to next year
				return currentValue +  (temp2035Low * Fund2035ReinvestToSmartFac/100.00) + EverCashValue;
			}
			else if(MonthDiff2030 == 12 && aaPolicyYear == YearDiff2030){ //the reinvestment fund from 2030 will be bring forward to next year
				return currentValue +  (temp2030Low * Fund2030ReinvestToSmartFac/100.00) + EverCashValue;
			}
			else if(MonthDiff2028 == 12 && aaPolicyYear == YearDiff2028){ //the reinvestment fund from 2028 will be bring forward to next year
				return currentValue +  (temp2028Low * Fund2028ReinvestToSmartFac/100.00) + EverCashValue;
			}
			else if(MonthDiff2025 == 12 && aaPolicyYear == YearDiff2025){ //the reinvestment fund from 2025 will be bring forward to next year
				return currentValue +  (temp2025Low * Fund2025ReinvestToSmartFac/100.00) + EverCashValue;
			}
			else{
				return currentValue + EverCashValue;
			}
			
			//return currentValue + VUDanaValue_EverCash1 + VUDanaValue_EverCash6 + VUDanaValue_EverCash60;
		}
		else{
			return currentValue + EverCashValue;
		}
		
	}
	else{
		if (VUCashValueNegative == TRUE && FundValueOfTheYearValueTotalLow != 0 ) {
			currentValue= ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear]) + IncreasePrem) * [self ReturnVUSmartFac:aaPolicyYear] * CYFactor +
						   [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnVUSmartFac:aaPolicyYear] * CYFactor +
						   [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnVUSmartFac:aaPolicyYear] * CYFactor) *
			(1 + [self ReturnVUSmartInstLow:@""]) + VUSmartPrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUSmartInstLow:@"A"]) -
			([self ReturnRegWithdrawal:aaPolicyYear] * 0) + (NegativeValueOfMaxCashFundLow - 1) *
			MAX(0,(FundValueOfTheYearVUSmartValueLow_Basic/FundValueOfTheYearValueTotalLow));
			
		}
		else{
			if (aaRound == 1) {
				currentValue = ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear]) + IncreasePrem) * [self ReturnVUSmartFac:aaPolicyYear] * CYFactor +
								[self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnVUSmartFac:aaPolicyYear] * CYFactor +
								[self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnVUSmartFac:aaPolicyYear] * CYFactor) *
				(1 + [self ReturnVUSmartInstLow:@""]) + VUSmartPrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUSmartInstLow:@"A"]) -
				([self ReturnRegWithdrawal:aaPolicyYear] * 0);
				VUSmartValueLow = currentValue;
			}
			else{
				currentValue = VUSmartValueLow;
			}
			
		}
		
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear < 60) {
				CashFactor = 0.00;
			}
			else if(Age + aaPolicyYear == 60){
				CashFactor = 1.00;
			}
			else{
				CashFactor = 12 * (1 + [self ReturnVUSmartInstLow:@"M"])/(pow((1 + [self ReturnVUSmartInstLow:@"A"]), (1.00/12.00)));
			}
		}
		
		if (aaRound == 2) {
			VUSmartPrevValueLow = currentValue +  VUSmartValue_EverCash1 + VUSmartValue_EverCash6 + (VUSmartValue_EverCash60 * CashFactor);
		}
		return currentValue +  VUSmartValue_EverCash1 + VUSmartValue_EverCash6 + (VUSmartValue_EverCash60 * CashFactor);
	}
	
}

-(double)ReturnVUVentureValueHigh :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andRound:(NSInteger)aaRound andMonth:(NSInteger)i{
	
	double currentValue =0.0;
	if ([aaYearOrMonth isEqualToString:@"M"]) {
		
		
		if (i == 1) {
			MonthVUVenturePrevValueHigh = VUVenturePrevValueHigh ;
		}
		
		double tempPrev = MonthVUVenturePrevValueHigh;
		
		if ((i == MonthDiff2035 + 1 && aaPolicyYear == YearDiff2035)) {
			MonthVUVenturePrevValueHigh = MonthVUVenturePrevValueHigh + (temp2035High * Fund2035ReinvestToVentureFac/100.00);
		}
		else if(i == MonthDiff2030 + 1 && aaPolicyYear == YearDiff2030){
			MonthVUVenturePrevValueHigh = MonthVUVenturePrevValueHigh + (temp2030High * Fund2030ReinvestToVentureFac/100.00);
		}
		else if(i == MonthDiff2028 + 1 && aaPolicyYear == YearDiff2028){
			MonthVUVenturePrevValueHigh = MonthVUVenturePrevValueHigh + (temp2028High * Fund2028ReinvestToVentureFac/100.00);
		}
		else if(i == MonthDiff2025 + 1 && aaPolicyYear == YearDiff2025){
			MonthVUVenturePrevValueHigh = MonthVUVenturePrevValueHigh + (temp2025High * Fund2025ReinvestToVentureFac/100.00);
		}
		else if(i == MonthDiff2023 + 1 && aaPolicyYear == YearDiff2023){
			MonthVUVenturePrevValueHigh = MonthVUVenturePrevValueHigh + (temp2023High * 0/100.00);
		}
		else{
			
		}
		
		//NSLog(@"%f", MonthVURetPrevValueHigh);
		if (VUCashValueNegative == TRUE && MonthFundValueOfTheYearValueTotalHigh != 0 ) {
			currentValue= ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVentureFac:aaPolicyYear andMonth:i] * CYFactor +
						   [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnPremiumFactor:i] * [self ReturnVUVentureFac:aaPolicyYear andMonth:i] * CYFactor +
						   [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnPremiumFactor:i] * [self ReturnVUVentureFac:aaPolicyYear andMonth:i] * CYFactor) *
			pow(1 + [self ReturnVUVentureInstHigh:aaPolicyYear andMOP:@"A"],1.00/12.00) + MonthVUVenturePrevValueHigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
			pow(1 + [self ReturnVUVentureInstHigh:aaPolicyYear andMOP:@"A"], 1.00/12.00) -
			([self ReturnRegWithdrawal:aaPolicyYear] * 0) + (NegativeValueOfMaxCashFundHigh - 1) *
			MAX(0,(MonthFundValueOfTheYearVUVentureValueHigh_Basic/MonthFundValueOfTheYearValueTotalHigh));
			
			//NSLog(@"%f %f %f",NegativeValueOfMaxCashFundHigh, MonthVURetValueHigh,MonthFundValueOfTheYearValueTotalHigh );
			
		}
		else{
			currentValue = ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVentureFac:aaPolicyYear  andMonth:i] * CYFactor+
							[self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnPremiumFactor:i] * [self ReturnVUVentureFac:aaPolicyYear andMonth:i] * CYFactor +
							[self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnPremiumFactor:i] * [self ReturnVUVentureFac:aaPolicyYear andMonth:i] * CYFactor) *
			pow((1 + [self ReturnVUVentureInstHigh:aaPolicyYear andMOP:@"A"]),(1.00/12.00)) + MonthVUVenturePrevValueHigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
			pow((1 + [self ReturnVUVentureInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00)) -
			([self ReturnRegWithdrawal:aaPolicyYear] * 0);
			
			
		}
		
		//NSLog(@"%f, %f, %f, %f",NegativeValueOfMaxCashFundHigh, MonthVURetValueHigh, MonthFundValueOfTheYearValueTotalHigh, currentValue);
        
		double EverCashValue = VUVentureValue_EverCash1 * [self EverCash1_CashPaymentFactor:aaPolicyYear andMonth:i] + VUVentureValue_EverCash6 * [self EverCash6_CashPaymentFactor:aaPolicyYear andMonth:i] +
        VUVentureValue_EverCash60;
		
		if (aaRound == 2) {
			MonthVUVenturePrevValueHigh = currentValue + EverCashValue;
		}
		else{
			MonthVUVenturePrevValueHigh = tempPrev;
		}
		
        
		
		if (i == 12  && aaRound == 2) {
			VUVenturePrevValueHigh = MonthVUVenturePrevValueHigh;
			
			if(MonthDiff2035 == 12 && aaPolicyYear == YearDiff2035){ //the reinvestment fund from 2035 will be bring forward to next year
				VUVenturePrevValueHigh = VUVenturePrevValueHigh +  (temp2035High * Fund2035ReinvestToVentureFac/100.00);
			}
			else if(MonthDiff2030 == 12 && aaPolicyYear == YearDiff2030){ //the reinvestment fund from 2030 will be bring forward to next year
				VUVenturePrevValueHigh = VUVenturePrevValueHigh +  (temp2030High * Fund2030ReinvestToVentureFac/100.00);
			}
			else if(MonthDiff2028 == 12 && aaPolicyYear == YearDiff2028){ //the reinvestment fund from 2028 will be bring forward to next year
				VUVenturePrevValueHigh = VUVenturePrevValueHigh +  (temp2028High * Fund2028ReinvestToVentureFac/100.00);
			}
			else if(MonthDiff2025 == 12 && aaPolicyYear == YearDiff2025){ //the reinvestment fund from 2025 will be bring forward to next year
				VUVenturePrevValueHigh = VUVenturePrevValueHigh +  (temp2025High * Fund2025ReinvestToVentureFac/100.00);
			}
		}
		
		//NSLog(@"%d %f %f, %d ", i, MonthVURetValueHigh, MonthFundValueOfTheYearValueTotalHigh, VUCashValueNegative);
		//return MonthVURetPrevValueHigh;
		if (i == 12  && aaRound == 2) {
			if(MonthDiff2035 == 12 && aaPolicyYear == YearDiff2035){ //the reinvestment fund from 2035 will be bring forward to next year
				return currentValue + (temp2035High * Fund2035ReinvestToVentureFac/100.00) + EverCashValue;
			}
			else if(MonthDiff2030 == 12 && aaPolicyYear == YearDiff2030){ //the reinvestment fund from 2030 will be bring forward to next year
				return currentValue +  (temp2030High * Fund2030ReinvestToVentureFac/100.00) + EverCashValue;
			}
			else if(MonthDiff2028 == 12 && aaPolicyYear == YearDiff2028){ //the reinvestment fund from 2028 will be bring forward to next year
				return  currentValue +  (temp2028High * Fund2028ReinvestToVentureFac/100.00) + EverCashValue;
			}
			else if(MonthDiff2025 == 12 && aaPolicyYear == YearDiff2025){ //the reinvestment fund from 2025 will be bring forward to next year
				return currentValue +  (temp2025High * Fund2025ReinvestToVentureFac/100.00) + EverCashValue;
			}
			else{
				return currentValue + EverCashValue;
			}
			//return currentValue + VUDanaValue_EverCash1 + VUDanaValue_EverCash6 + VUDanaValue_EverCash60;
		}
		else{
			return currentValue + EverCashValue ;
		}
		
		
		
		
	}
	else{
		//if (VUCashValueHigh < 0 && [self ReturnFundValueOfTheYearValueTotalHigh:aaPolicyYear] != 0 ) {
		if (VUCashValueNegative == TRUE && FundValueOfTheYearValueTotalHigh != 0 ) {
			currentValue= ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear]) + IncreasePrem) * [self ReturnVUVentureFac:aaPolicyYear] * CYFactor +
						   [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnVUVentureFac:aaPolicyYear] * CYFactor +
						   [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnVUVentureFac:aaPolicyYear] * CYFactor) *
			(1 + [self ReturnVUVentureInstHigh:aaPolicyYear andMOP:@""]) + VUVenturePrevValueHigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) *
            (1 + [self ReturnVUVentureInstHigh:aaPolicyYear andMOP:@"A"])- ([self ReturnRegWithdrawal:aaPolicyYear] * 0) + (NegativeValueOfMaxCashFundHigh - 1) *
			MAX(0,(FundValueOfTheYearVUVentureValueHigh_Basic/FundValueOfTheYearValueTotalHigh));
			
		}
		else{
			if (aaRound == 1) {
				currentValue = ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear]) + IncreasePrem) * [self ReturnVUVentureFac:aaPolicyYear] * CYFactor +
								[self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnVUVentureFac:aaPolicyYear] * CYFactor +
								[self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnVUVentureFac:aaPolicyYear] * CYFactor) *
				(1 + [self ReturnVUVentureInstHigh:aaPolicyYear andMOP:@""]) + VUVenturePrevValueHigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) *
                (1 + [self ReturnVUVentureInstHigh:aaPolicyYear andMOP:@"A"]) - ([self ReturnRegWithdrawal:aaPolicyYear] * 0);
				

                
				VUVentureValueHigh = currentValue;
			}
			else{
				currentValue = VUVentureValueHigh;
			}
			
		}
        
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear < 60) {
				CashFactor = 0.00;
			}
			else if(Age + aaPolicyYear == 60){
				CashFactor = 1.00;
			}
			else{
				CashFactor = 12 * (1 + [self ReturnVUVentureInstHigh:aaPolicyYear andMOP:@"M"])/(pow((1 + [self ReturnVUVentureInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00)));
			}
		}
		
		//NSLog(@"%d %f, %d ", aaPolicyYear,  [self ReturnVUDanaFac:aaPolicyYear], aaRound );
		
		if (aaRound == 2) {
			VUVenturePrevValueHigh = currentValue +  VUVentureValue_EverCash1 + VUVentureValue_EverCash6 + (VUVentureValue_EverCash60 * CashFactor);
		}
		
		return currentValue +  VUVentureValue_EverCash1 + VUVentureValue_EverCash6 + (VUVentureValue_EverCash60 * CashFactor);
	}
	
	
}

-(double)ReturnVUVentureValueMedian :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andRound:(NSInteger)aaRound andMonth:(int)i{
	
	double currentValue;
	
	if ([aaYearOrMonth isEqualToString:@"M"]) {
		
		
		if (i == 1) {
			MonthVUVenturePrevValueMedian = VUVenturePrevValueMedian ;
		}
		
		double tempPrev = MonthVUVenturePrevValueMedian;
		if ((i == MonthDiff2035 + 1 && aaPolicyYear == YearDiff2035)  ) {
			MonthVUVenturePrevValueMedian = MonthVUVenturePrevValueMedian + (temp2035Median * Fund2035ReinvestToVentureFac/100.00);
		}
		else if(i == MonthDiff2030 + 1 && aaPolicyYear == YearDiff2030){
			MonthVUVenturePrevValueMedian = MonthVUVenturePrevValueMedian + (temp2030Median * Fund2030ReinvestToVentureFac/100.00);
		}
		else if(i == MonthDiff2028 + 1 && aaPolicyYear == YearDiff2028){
			MonthVUVenturePrevValueMedian = MonthVUVenturePrevValueMedian + (temp2028Median * Fund2028ReinvestToVentureFac/100.00);
		}
		else if(i == MonthDiff2025 + 1 && aaPolicyYear == YearDiff2025){
			MonthVUVenturePrevValueMedian = MonthVUVenturePrevValueMedian + (temp2025Median * Fund2025ReinvestToVentureFac/100.00);
		}
		else if(i == MonthDiff2023 + 1 && aaPolicyYear == YearDiff2023){
			MonthVUVenturePrevValueMedian = MonthVUVenturePrevValueMedian + (temp2023Median * 0/100.00);
		}
		else{
			
		}
		
		if (VUCashValueNegative == TRUE && MonthFundValueOfTheYearValueTotalMedian != 0 ) {
			currentValue= ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVentureFac:aaPolicyYear  andMonth:i] * CYFactor +
						   [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnPremiumFactor:i] * [self ReturnVUVentureFac:aaPolicyYear  andMonth:i]* CYFactor +
						   [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnPremiumFactor:i] * [self ReturnVUVentureFac:aaPolicyYear  andMonth:i] * CYFactor) *
			pow(1 + [self ReturnVUVentureInstMedian:@"A"], 1.00/12.00) + MonthVUVenturePrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
			pow(1 + [self ReturnVUVentureInstMedian:@"A"], 1.00/12.00) - ([self ReturnRegWithdrawal:aaPolicyYear] * 0) + (NegativeValueOfMaxCashFundMedian - 1) *
			MAX(0,(MonthFundValueOfTheYearVUVentureValueMedian_Basic/MonthFundValueOfTheYearValueTotalMedian));
			
		}
		else{
			currentValue = ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVentureFac:aaPolicyYear  andMonth:i] *CYFactor +
							[self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnPremiumFactor:i] * [self ReturnVUVentureFac:aaPolicyYear  andMonth:i] * CYFactor +
							[self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnPremiumFactor:i] * [self ReturnVUVentureFac:aaPolicyYear  andMonth:i] * CYFactor) *
			pow(1 + [self ReturnVUVentureInstMedian:@"A"], 1.00/12.00) + MonthVUVenturePrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
			pow(1 + [self ReturnVUVentureInstMedian:@"A"], 1.00/12.00) - ([self ReturnRegWithdrawal:aaPolicyYear] * 0);
			
		}
        
		double EverCashValue = VUVentureValue_EverCash1 * [self EverCash1_CashPaymentFactor:aaPolicyYear andMonth:i] +
                                VUVentureValue_EverCash6 * [self EverCash6_CashPaymentFactor:aaPolicyYear andMonth:i] +
                                VUVentureValue_EverCash60;
		
		if (aaRound == 2) {
			MonthVUVenturePrevValueMedian = currentValue + EverCashValue;
		}
		else{
			MonthVUVenturePrevValueMedian = tempPrev;
		}
        
		
		if (i == 12  && aaRound == 2) {
			VUVenturePrevValueMedian = MonthVUVenturePrevValueMedian;
			
			if(MonthDiff2035 == 12 && aaPolicyYear == YearDiff2035){ //the reinvestment fund from 2035 will be bring forward to next year
				VUVenturePrevValueMedian = VUVenturePrevValueMedian +  (temp2035Median * Fund2035ReinvestToVentureFac/100.00);
			}
			else if(MonthDiff2030 == 12 && aaPolicyYear == YearDiff2030){ //the reinvestment fund from 2030 will be bring forward to next year
				VUVenturePrevValueMedian = VUVenturePrevValueMedian +  (temp2030Median * Fund2030ReinvestToVentureFac/100.00);
			}
			else if(MonthDiff2028 == 12 && aaPolicyYear == YearDiff2028){ //the reinvestment fund from 2028 will be bring forward to next year
				VUVenturePrevValueMedian = VUVenturePrevValueMedian +  (temp2028Median * Fund2028ReinvestToVentureFac/100.00);
			}
			else if(MonthDiff2025 == 12 && aaPolicyYear == YearDiff2025){ //the reinvestment fund from 2025 will be bring forward to next year
				VUVenturePrevValueMedian = VUVenturePrevValueMedian +  (temp2025Median * Fund2025ReinvestToVentureFac/100.00);
			}
		}
		
		if (i == 12  && aaRound == 2) {
			
			if(MonthDiff2035 == 12 && aaPolicyYear == YearDiff2035){ //the reinvestment fund from 2035 will be bring forward to next year
				return currentValue +  (temp2035Median * Fund2035ReinvestToVentureFac/100.00) + EverCashValue;
			}
			else if(MonthDiff2030 == 12 && aaPolicyYear == YearDiff2030){ //the reinvestment fund from 2030 will be bring forward to next year
				return currentValue + (temp2030Median * Fund2030ReinvestToVentureFac/100.00) + EverCashValue;
			}
			else if(MonthDiff2028 == 12 && aaPolicyYear == YearDiff2028){ //the reinvestment fund from 2028 will be bring forward to next year
				return currentValue +  (temp2028Median * Fund2028ReinvestToVentureFac/100.00) + EverCashValue;
			}
			else if(MonthDiff2025 == 12 && aaPolicyYear == YearDiff2025){ //the reinvestment fund from 2025 will be bring forward to next year
				return currentValue + (temp2025Median * Fund2025ReinvestToVentureFac/100.00) + EverCashValue;
			}
			else{
				return currentValue + EverCashValue;
			}
			
			//return currentValue + VUDanaValue_EverCash1 + VUDanaValue_EverCash6 + VUDanaValue_EverCash60;
		}
		else{
			//return MonthVURetPrevValueMedian;
			return currentValue + EverCashValue;
		}
		
	}
	else{
		//if (VUCashValueMedian < 0 && [self ReturnFundValueOfTheYearValueTotalMedian:aaPolicyYear] != 0 ) {
		if (VUCashValueNegative == TRUE && FundValueOfTheYearValueTotalMedian != 0 ) {
			currentValue= ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear]) + IncreasePrem) * [self ReturnVUVentureFac:aaPolicyYear] * CYFactor +
						   [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnVUVentureFac:aaPolicyYear] * CYFactor +
						   [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnVUVentureFac:aaPolicyYear] * CYFactor) *
			(1 + [self ReturnVUVentureInstMedian:@""]) + VUVenturePrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVentureInstMedian:@"A"]) -
			([self ReturnRegWithdrawal:aaPolicyYear] * 0) + (NegativeValueOfMaxCashFundMedian - 1) *
			MAX(0,(FundValueOfTheYearVUVentureValueMedian_Basic/FundValueOfTheYearValueTotalMedian));
			
		}
		else{
			if (aaRound == 1) {
				currentValue = ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear]) + IncreasePrem) * [self ReturnVUVentureFac:aaPolicyYear] * CYFactor +
								[self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnVUVentureFac:aaPolicyYear] * CYFactor +
								[self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnVUVentureFac:aaPolicyYear] * CYFactor) *
				(1 + [self ReturnVUVentureInstMedian:@""]) + VUVenturePrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVentureInstMedian:@"A"]) -
				([self ReturnRegWithdrawal:aaPolicyYear] * 0);
				VUVentureValueMedian = currentValue;
			}
			else{
				currentValue = VUVentureValueMedian;
			}
		}
		
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear < 60) {
				CashFactor = 0.00;
			}
			else if(Age + aaPolicyYear == 60){
				CashFactor = 1.00;
			}
			else{
				CashFactor = 12 * (1 + [self ReturnVUVentureInstMedian:@"M"])/(pow((1 + [self ReturnVUVentureInstMedian:@"A"]), (1.00/12.00)));
			}
		}
		
		if (aaRound == 2) {
			VUVenturePrevValueMedian = currentValue +  VUVentureValue_EverCash1  + VUVentureValue_EverCash6 + (VUVentureValue_EverCash60 * CashFactor);
		}
		return currentValue +  VUVentureValue_EverCash1 + VUVentureValue_EverCash6 + (VUVentureValue_EverCash60 * CashFactor);
	}
	
}

-(double)ReturnVUVentureValueLow :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andRound:(NSInteger)aaRound andMonth:(int)i{
	
	double currentValue;
	
	
	if ([aaYearOrMonth isEqualToString:@"M"]) {
		
		
		if (i == 1) {
			MonthVUVenturePrevValueLow = VUVenturePrevValueLow ;
		}
		
		double tempPrev = MonthVUVenturePrevValueLow;
		if ((i == MonthDiff2035 + 1 && aaPolicyYear == YearDiff2035)  ) {
			MonthVUVenturePrevValueLow = MonthVUVenturePrevValueLow + (temp2035Low * Fund2035ReinvestToVentureFac/100.00);
		}
		else if(i == MonthDiff2030 + 1 && aaPolicyYear == YearDiff2030){
			MonthVUVenturePrevValueLow = MonthVUVenturePrevValueLow + (temp2030Low * Fund2030ReinvestToVentureFac/100.00);
		}
		else if(i == MonthDiff2028 + 1 && aaPolicyYear == YearDiff2028){
			MonthVUVenturePrevValueLow = MonthVUVenturePrevValueLow + (temp2028Low * Fund2028ReinvestToVentureFac/100.00);
		}
		else if(i == MonthDiff2025 + 1 && aaPolicyYear == YearDiff2025){
			MonthVUVenturePrevValueLow = MonthVUVenturePrevValueLow + (temp2025Low * Fund2025ReinvestToVentureFac/100.00);
		}
		else if(i == MonthDiff2023 + 1 && aaPolicyYear == YearDiff2023){
			MonthVUVenturePrevValueLow = MonthVUVenturePrevValueLow + (temp2023Low * 0/100.00);
		}
		else{
			
		}
		
		if (VUCashValueNegative == TRUE && MonthFundValueOfTheYearValueTotalLow != 0 ) {
			currentValue= ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVentureFac:aaPolicyYear  andMonth:i] * CYFactor +
						   [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnPremiumFactor:i] * [self ReturnVUVentureFac:aaPolicyYear  andMonth:i] * CYFactor +
						   [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnPremiumFactor:i] * [self ReturnVUVentureFac:aaPolicyYear  andMonth:i]* CYFactor) *
			pow(1 + [self ReturnVUVentureInstLow:@"A"], 1.00/12.00) + MonthVUVenturePrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
			pow(1 + [self ReturnVUVentureInstLow:@"A"], 1.00/12.00) - ([self ReturnRegWithdrawal:aaPolicyYear] * 0) + (NegativeValueOfMaxCashFundLow - 1) *
			MAX(0,(MonthFundValueOfTheYearVUVentureValueLow_Basic/MonthFundValueOfTheYearValueTotalLow));
			
		}
		else{
			currentValue = ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVentureFac:aaPolicyYear  andMonth:i] * CYFactor+
							[self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnPremiumFactor:i] * [self ReturnVUVentureFac:aaPolicyYear  andMonth:i] * CYFactor +
							[self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnPremiumFactor:i] * [self ReturnVUVentureFac:aaPolicyYear  andMonth:i] * CYFactor) *
			pow(1 + [self ReturnVUVentureInstLow:@"A"], 1.00/12.00) + MonthVUVenturePrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
			pow(1 + [self ReturnVUVentureInstLow:@"A"], 1.00/12.00) - ([self ReturnRegWithdrawal:aaPolicyYear] * 0);
			
		}
		
		double EverCashValue = VUVentureValue_EverCash1 * [self EverCash1_CashPaymentFactor:aaPolicyYear andMonth:i] +
                                VUVentureValue_EverCash6 * [self EverCash6_CashPaymentFactor:aaPolicyYear andMonth:i] +
                                VUVentureValue_EverCash60;
		
		if (aaRound == 2) {
			MonthVUVenturePrevValueLow = currentValue + EverCashValue;
		}
		else{
			MonthVUVenturePrevValueLow = tempPrev;
		}
		
        
		
		if (i == 12  && aaRound == 2) {
			VUVenturePrevValueLow = MonthVUVenturePrevValueLow ;
			
			if(MonthDiff2035 == 12 && aaPolicyYear == YearDiff2035){ //the reinvestment fund from 2035 will be bring forward to next year
				VUVenturePrevValueLow = VUVenturePrevValueLow +  (temp2035Low * Fund2035ReinvestToVentureFac/100.00);
			}
			else if(MonthDiff2030 == 12 && aaPolicyYear == YearDiff2030){ //the reinvestment fund from 2030 will be bring forward to next year
				VUVenturePrevValueLow = VUVenturePrevValueLow +  (temp2030Low * Fund2030ReinvestToVentureFac/100.00);
			}
			else if(MonthDiff2028 == 12 && aaPolicyYear == YearDiff2028){ //the reinvestment fund from 2028 will be bring forward to next year
				VUVenturePrevValueLow = VUVenturePrevValueLow +  (temp2028Low * Fund2028ReinvestToVentureFac/100.00);
			}
			else if(MonthDiff2025 == 12 && aaPolicyYear == YearDiff2025){ //the reinvestment fund from 2025 will be bring forward to next year
				VUVenturePrevValueLow = VUVenturePrevValueLow +  (temp2025Low * Fund2025ReinvestToVentureFac/100.00);
			}
		}
		
		if (i == 12  && aaRound == 2) {
			
			if(MonthDiff2035 == 12 && aaPolicyYear == YearDiff2035){ //the reinvestment fund from 2035 will be bring forward to next year
				return currentValue +  (temp2035Low * Fund2035ReinvestToVentureFac/100.00) + EverCashValue;
			}
			else if(MonthDiff2030 == 12 && aaPolicyYear == YearDiff2030){ //the reinvestment fund from 2030 will be bring forward to next year
				return currentValue +  (temp2030Low * Fund2030ReinvestToVentureFac/100.00) + EverCashValue;
			}
			else if(MonthDiff2028 == 12 && aaPolicyYear == YearDiff2028){ //the reinvestment fund from 2028 will be bring forward to next year
				return currentValue +  (temp2028Low * Fund2028ReinvestToVentureFac/100.00) + EverCashValue;
			}
			else if(MonthDiff2025 == 12 && aaPolicyYear == YearDiff2025){ //the reinvestment fund from 2025 will be bring forward to next year
				return currentValue +  (temp2025Low * Fund2025ReinvestToVentureFac/100.00) + EverCashValue;
			}
			else{
				return currentValue + EverCashValue;
			}
			
			//return currentValue + VUDanaValue_EverCash1 + VUDanaValue_EverCash6 + VUDanaValue_EverCash60;
		}
		else{
			return currentValue + EverCashValue;
		}
		
	}
	else{
		if (VUCashValueNegative == TRUE && FundValueOfTheYearValueTotalLow != 0 ) {
			currentValue= ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear]) + IncreasePrem) * [self ReturnVUVentureFac:aaPolicyYear] * CYFactor +
						   [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnVUVentureFac:aaPolicyYear] * CYFactor +
						   [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnVUVentureFac:aaPolicyYear] * CYFactor) *
			(1 + [self ReturnVUVentureInstLow:@""]) + VUVenturePrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVentureInstLow:@"A"]) -
			([self ReturnRegWithdrawal:aaPolicyYear] * 0) + (NegativeValueOfMaxCashFundLow - 1) *
			MAX(0,(FundValueOfTheYearVUVentureValueLow_Basic/FundValueOfTheYearValueTotalLow));
			
		}
		else{
			if (aaRound == 1) {
				currentValue = ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear]) + IncreasePrem) * [self ReturnVUVentureFac:aaPolicyYear] * CYFactor +
								[self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnVUVentureFac:aaPolicyYear] * CYFactor +
								[self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnVUVentureFac:aaPolicyYear] * CYFactor) *
				(1 + [self ReturnVUVentureInstLow:@""]) + VUVenturePrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVentureInstLow:@"A"]) -
				([self ReturnRegWithdrawal:aaPolicyYear] * 0);
				VUVentureValueLow = currentValue;
			}
			else{
				currentValue = VUVentureValueLow;
			}
			
		}
		
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear < 60) {
				CashFactor = 0.00;
			}
			else if(Age + aaPolicyYear == 60){
				CashFactor = 1.00;
			}
			else{
				CashFactor = 12 * (1 + [self ReturnVUVentureInstLow:@"M"])/(pow((1 + [self ReturnVUVentureInstLow:@"A"]), (1.00/12.00)));
			}
		}
		
		if (aaRound == 2) {
			VUVenturePrevValueLow = currentValue +  VUVentureValue_EverCash1 + VUVentureValue_EverCash6 + (VUVentureValue_EverCash60 * CashFactor);
		}
		return currentValue +  VUVentureValue_EverCash1 + VUVentureValue_EverCash6 + (VUVentureValue_EverCash60 * CashFactor);
	}
	
}



-(double)ReturnVUVentureGrowthValueHigh :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andRound:(NSInteger)aaRound andMonth:(NSInteger)i{
    
    double currentValue =0.0;
    if ([aaYearOrMonth isEqualToString:@"M"]) {
        
        
        if (i == 1) {
            MonthVUVentureGrowthPrevValueHigh = VUVentureGrowthPrevValueHigh ;
        }
        
        double tempPrev = MonthVUVentureGrowthPrevValueHigh;
        
        if ((i == MonthDiff2035 + 1 && aaPolicyYear == YearDiff2035)) {
            MonthVUVentureGrowthPrevValueHigh = MonthVUVentureGrowthPrevValueHigh + (temp2035High * Fund2035ReinvestToVentureGrowthFac/100.00);
        }
        else if(i == MonthDiff2030 + 1 && aaPolicyYear == YearDiff2030){
            MonthVUVentureGrowthPrevValueHigh = MonthVUVentureGrowthPrevValueHigh + (temp2030High * Fund2030ReinvestToVentureGrowthFac/100.00);
        }
        else if(i == MonthDiff2028 + 1 && aaPolicyYear == YearDiff2028){
            MonthVUVentureGrowthPrevValueHigh = MonthVUVentureGrowthPrevValueHigh + (temp2028High * Fund2028ReinvestToVentureGrowthFac/100.00);
        }
        else if(i == MonthDiff2025 + 1 && aaPolicyYear == YearDiff2025){
            MonthVUVentureGrowthPrevValueHigh = MonthVUVentureGrowthPrevValueHigh + (temp2025High * Fund2025ReinvestToVentureGrowthFac/100.00);
        }
        else if(i == MonthDiff2023 + 1 && aaPolicyYear == YearDiff2023){
            MonthVUVentureGrowthPrevValueHigh = MonthVUVentureGrowthPrevValueHigh + (temp2023High * Fund2023ReinvestToVentureGrowthFac/100.00);
        }
        else{
            
        }
        
        
        
        
        //NSLog(@"%f", MonthVUVentureGrowthPrevValueHigh);
        if (VUCashValueNegative == TRUE && MonthFundValueOfTheYearValueTotalHigh != 0 ) {
            
            currentValue= ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVentureGrowthFac:aaPolicyYear andMonth:i] * CYFactor +
                           [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnPremiumFactor:i] * [self ReturnVUVentureGrowthFac:aaPolicyYear andMonth:i] * CYFactor +
                           [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnPremiumFactor:i] * [self ReturnVUVentureGrowthFac:aaPolicyYear andMonth:i] * CYFactor) *
            pow(1 + [self ReturnVUVentureGrowthInstHigh:aaPolicyYear andMOP:@"A"],1.00/12.00) + MonthVUVentureGrowthPrevValueHigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
            pow(1 + [self ReturnVUVentureGrowthInstHigh:aaPolicyYear andMOP:@"A"], 1.00/12.00) -
            ([self ReturnRegWithdrawal:aaPolicyYear] * 0) + (NegativeValueOfMaxCashFundHigh - 1) *
            MAX(0,(MonthFundValueOfTheYearVUVentureGrowthValueHigh_Basic/MonthFundValueOfTheYearValueTotalHigh));
            
            //NSLog(@"%f %f %f",NegativeValueOfMaxCashFundHigh, MonthVUVentureGrowthValueHigh,MonthFundValueOfTheYearValueTotalHigh );
            
        }
        else{
            
            currentValue = ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVentureGrowthFac:aaPolicyYear  andMonth:i] * CYFactor +
                            [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnPremiumFactor:i] * [self ReturnVUVentureGrowthFac:aaPolicyYear andMonth:i] * CYFactor +
                            [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnPremiumFactor:i] * [self ReturnVUVentureGrowthFac:aaPolicyYear andMonth:i] * CYFactor) *
            pow((1 + [self ReturnVUVentureGrowthInstHigh:aaPolicyYear andMOP:@"A"]),(1.00/12.00)) + MonthVUVentureGrowthPrevValueHigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
            pow((1 + [self ReturnVUVentureGrowthInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00)) -
            ([self ReturnRegWithdrawal:aaPolicyYear] * 0);
            
            
        }
        
        //NSLog(@"%f, %f, %f, %f",NegativeValueOfMaxCashFundHigh, MonthVUVentureGrowthValueHigh, MonthFundValueOfTheYearValueTotalHigh, currentValue);
        
        [self ReturnMonthEverCash60:aaPolicyYear andMonth:i];
        
        double EverCashValue = VUVentureGrowthValue_EverCash1 * [self EverCash1_CashPaymentFactor:aaPolicyYear andMonth:i] +
        VUVentureGrowthValue_EverCash6 * [self EverCash6_CashPaymentFactor:aaPolicyYear andMonth:i]
        + VUVentureGrowthValue_EverCash60;
        
        if (aaRound == 2) {
            MonthVUVentureGrowthPrevValueHigh = currentValue + EverCashValue;
        }
        else{
            MonthVUVentureGrowthPrevValueHigh = tempPrev;
        }
        
        
        
        if (i == 12  && aaRound == 2) {
            VUVentureGrowthPrevValueHigh = MonthVUVentureGrowthPrevValueHigh;
            
            if(MonthDiff2035 == 12 && aaPolicyYear == YearDiff2035){ //the reinvestment fund from 2035 will be bring forward to next year
                VUVentureGrowthPrevValueHigh = VUVentureGrowthPrevValueHigh +  (temp2035High * Fund2035ReinvestToVentureGrowthFac/100.00);
            }
            else if(MonthDiff2030 == 12 && aaPolicyYear == YearDiff2030){ //the reinvestment fund from 2030 will be bring forward to next year
                VUVentureGrowthPrevValueHigh = VUVentureGrowthPrevValueHigh +  (temp2030High * Fund2030ReinvestToVentureGrowthFac/100.00);
            }
            else if(MonthDiff2028 == 12 && aaPolicyYear == YearDiff2028){ //the reinvestment fund from 2028 will be bring forward to next year
                VUVentureGrowthPrevValueHigh = VUVentureGrowthPrevValueHigh +  (temp2028High * Fund2028ReinvestToVentureGrowthFac/100.00);
            }
            else if(MonthDiff2025 == 12 && aaPolicyYear == YearDiff2025){ //the reinvestment fund from 2025 will be bring forward to next year
                VUVentureGrowthPrevValueHigh = VUVentureGrowthPrevValueHigh +  (temp2025High * Fund2025ReinvestToVentureGrowthFac/100.00);
            }
        }
        
        //NSLog(@"%d %f %f, %d ", i, MonthVUVentureGrowthValueHigh, MonthFundValueOfTheYearValueTotalHigh, VUCashValueNegative);
        //return MonthVUVentureGrowthPrevValueHigh;
        
        if (i == 12  && aaRound == 2) {
            if(MonthDiff2035 == 12 && aaPolicyYear == YearDiff2035){
                return currentValue + (temp2035High * Fund2035ReinvestToVentureGrowthFac/100.00) + EverCashValue;
            }
            else if(MonthDiff2030 == 12 && aaPolicyYear == YearDiff2030){
                return currentValue +  (temp2030High * Fund2030ReinvestToVentureGrowthFac/100.00) + EverCashValue;
            }
            else if(MonthDiff2028 == 12 && aaPolicyYear == YearDiff2028){
                return currentValue + (temp2028High * Fund2028ReinvestToVentureGrowthFac/100.00) + EverCashValue;
            }
            else if(MonthDiff2025 == 12 && aaPolicyYear == YearDiff2025){
                return currentValue + (temp2025High * Fund2025ReinvestToVentureGrowthFac/100.00) + EverCashValue;
            }
            else{
                return currentValue + EverCashValue;
            }
            
            //return currentValue + VUVentureGrowthValue_EverCash1 + VUVentureGrowthValue_EverCash6 + VUVentureGrowthValue_EverCash60;
        }
        else{
            return currentValue + EverCashValue;
            
        }
        
        
        
    }
    else{
        //if (VUCashValueHigh < 0 && [self ReturnFundValueOfTheYearValueTotalHigh:aaPolicyYear] != 0 ) {
        if (VUCashValueNegative == TRUE && FundValueOfTheYearValueTotalHigh != 0 ) {
            currentValue= ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear]) + IncreasePrem) * [self ReturnVUVentureGrowthFac:aaPolicyYear] * CYFactor +
                           [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnVUVentureGrowthFac:aaPolicyYear] * CYFactor +
                           [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnVUVentureGrowthFac:aaPolicyYear] * CYFactor) *
            (1 + [self ReturnVUVentureGrowthInstHigh:aaPolicyYear andMOP:@""]) + VUVentureGrowthPrevValueHigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVentureGrowthInstHigh:aaPolicyYear andMOP:@"A"]) -
            ([self ReturnRegWithdrawal:aaPolicyYear] * 0) + (NegativeValueOfMaxCashFundHigh - 1) *
            MAX(0,(FundValueOfTheYearVUVentureGrowthValueHigh_Basic/FundValueOfTheYearValueTotalHigh));
            
        }
        else{
            if (aaRound == 1) {
                currentValue = ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear]) + IncreasePrem) * [self ReturnVUVentureGrowthFac:aaPolicyYear] * CYFactor +
                                [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnVUVentureGrowthFac:aaPolicyYear] * CYFactor +
                                [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnVUVentureGrowthFac:aaPolicyYear] * CYFactor) *
                (1 + [self ReturnVUVentureGrowthInstHigh:aaPolicyYear andMOP:@""]) + VUVentureGrowthPrevValueHigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVentureGrowthInstHigh:aaPolicyYear andMOP:@"A"]) -
                ([self ReturnRegWithdrawal:aaPolicyYear] * 0);
                VUVentureGrowthValueHigh = currentValue;
            }
            else{
                currentValue = VUVentureGrowthValueHigh;
            }
            
        }
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear < 60) {
                CashFactor = 0.00;
            }
            else if(Age + aaPolicyYear == 60){
                CashFactor = 1.00;
                
            }
            else{
                
                CashFactor = 12 * (1 + [self ReturnVUVentureGrowthInstHigh:aaPolicyYear andMOP:@"M"])/(pow((1 + [self ReturnVUVentureGrowthInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00)));
            }
        }
        
        if (aaRound == 2) {
            VUVentureGrowthPrevValueHigh = currentValue + VUVentureGrowthValue_EverCash1 + VUVentureGrowthValue_EverCash6 + (VUVentureGrowthValue_EverCash60 * CashFactor);
        }
        
        
        return currentValue + VUVentureGrowthValue_EverCash1 + VUVentureGrowthValue_EverCash6 + (VUVentureGrowthValue_EverCash60 * CashFactor);
    }
    
    
}

-(double)ReturnVUVentureGrowthValueMedian :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andRound:(NSInteger)aaRound andMonth:(int)i{
    
    double currentValue;
    
    if ([aaYearOrMonth isEqualToString:@"M"]) {
        
        
        if (i == 1) {
            MonthVUVentureGrowthPrevValueMedian = VUVentureGrowthPrevValueMedian ;
        }
        
        double tempPrev = MonthVUVentureGrowthPrevValueMedian;
        if ((i == MonthDiff2035 + 1 && aaPolicyYear == YearDiff2035)  ) {
            MonthVUVentureGrowthPrevValueMedian = MonthVUVentureGrowthPrevValueMedian + (temp2035Median * Fund2035ReinvestToVentureGrowthFac/100.00);
        }
        else if(i == MonthDiff2030 + 1 && aaPolicyYear == YearDiff2030){
            MonthVUVentureGrowthPrevValueMedian = MonthVUVentureGrowthPrevValueMedian + (temp2030Median * Fund2030ReinvestToVentureGrowthFac/100.00);
        }
        else if(i == MonthDiff2028 + 1 && aaPolicyYear == YearDiff2028){
            MonthVUVentureGrowthPrevValueMedian = MonthVUVentureGrowthPrevValueMedian + (temp2028Median * Fund2028ReinvestToVentureGrowthFac/100.00);
        }
        else if(i == MonthDiff2025 + 1 && aaPolicyYear == YearDiff2025){
            MonthVUVentureGrowthPrevValueMedian = MonthVUVentureGrowthPrevValueMedian + (temp2025Median * Fund2025ReinvestToVentureGrowthFac/100.00);
        }
        else if(i == MonthDiff2023 + 1 && aaPolicyYear == YearDiff2023){
            MonthVUVentureGrowthPrevValueMedian = MonthVUVentureGrowthPrevValueMedian + (temp2023Median * Fund2023ReinvestToVentureGrowthFac/100.00);
        }
        else{
            
        }
        
        if (VUCashValueNegative == TRUE && MonthFundValueOfTheYearValueTotalMedian != 0 ) {
            currentValue= ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVentureGrowthFac:aaPolicyYear  andMonth:i] * CYFactor +
                           [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnPremiumFactor:i] * [self ReturnVUVentureGrowthFac:aaPolicyYear  andMonth:i] * CYFactor +
                           [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnPremiumFactor:i] * [self ReturnVUVentureGrowthFac:aaPolicyYear  andMonth:i] * CYFactor) *
            pow(1 + [self ReturnVUVentureGrowthInstMedian:@"A"], 1.00/12.00) + MonthVUVentureGrowthPrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
            pow(1 + [self ReturnVUVentureGrowthInstMedian:@"A"], 1.00/12.00) - ([self ReturnRegWithdrawal:aaPolicyYear] * 0) + (NegativeValueOfMaxCashFundMedian - 1) *
            MAX(0,(MonthFundValueOfTheYearVUVentureGrowthValueMedian_Basic/MonthFundValueOfTheYearValueTotalMedian));
            
        }
        else{
            currentValue = ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVentureGrowthFac:aaPolicyYear  andMonth:i] * CYFactor +
                            [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnPremiumFactor:i] * [self ReturnVUVentureGrowthFac:aaPolicyYear  andMonth:i] * CYFactor +
                            [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnPremiumFactor:i] * [self ReturnVUVentureGrowthFac:aaPolicyYear  andMonth:i] * CYFactor) *
            pow(1 + [self ReturnVUVentureGrowthInstMedian:@"A"], 1.00/12.00) + MonthVUVentureGrowthPrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
            pow(1 + [self ReturnVUVentureGrowthInstMedian:@"A"], 1.00/12.00) - ([self ReturnRegWithdrawal:aaPolicyYear] * 0);
            
        }
        
        double EverCashValue = VUVentureGrowthValue_EverCash1 * [self EverCash1_CashPaymentFactor:aaPolicyYear andMonth:i] +
        VUVentureGrowthValue_EverCash6 * [self EverCash6_CashPaymentFactor:aaPolicyYear andMonth:i] +
        VUVentureGrowthValue_EverCash60;
        
        if (aaRound == 2) {
            MonthVUVentureGrowthPrevValueMedian = currentValue + EverCashValue;
        }
        else{
            MonthVUVentureGrowthPrevValueMedian = tempPrev;
        }
        
        
        
        if (i == 12  && aaRound == 2) {
            VUVentureGrowthPrevValueMedian = MonthVUVentureGrowthPrevValueMedian;
            
            if(MonthDiff2035 == 12 && aaPolicyYear == YearDiff2035){ //the reinvestment fund from 2035 will be bring forward to next year
                VUVentureGrowthPrevValueMedian = VUVentureGrowthPrevValueMedian +  (temp2035Median * Fund2035ReinvestToVentureGrowthFac/100.00);
            }
            else if(MonthDiff2030 == 12 && aaPolicyYear == YearDiff2030){ //the reinvestment fund from 2030 will be bring forward to next year
                VUVentureGrowthPrevValueMedian = VUVentureGrowthPrevValueMedian +  (temp2030Median * Fund2030ReinvestToVentureGrowthFac/100.00);
            }
            else if(MonthDiff2028 == 12 && aaPolicyYear == YearDiff2028){ //the reinvestment fund from 2028 will be bring forward to next year
                VUVentureGrowthPrevValueMedian = VUVentureGrowthPrevValueMedian +  (temp2028Median * Fund2028ReinvestToVentureGrowthFac/100.00);
            }
            else if(MonthDiff2025 == 12 && aaPolicyYear == YearDiff2025){ //the reinvestment fund from 2025 will be bring forward to next year
                VUVentureGrowthPrevValueMedian = VUVentureGrowthPrevValueMedian +  (temp2025Median * Fund2025ReinvestToVentureGrowthFac/100.00);
            }
        }
        
        if (i == 12  && aaRound == 2) {
            
            //return currentValue + VUVentureGrowthValue_EverCash1 + VUVentureGrowthValue_EverCash6 + VUVentureGrowthValue_EverCash60;
            
            if(MonthDiff2035 == 12 && aaPolicyYear == YearDiff2035){
                return currentValue + (temp2035Median * Fund2035ReinvestToVentureGrowthFac/100.00) + EverCashValue;
            }
            else if(MonthDiff2030 == 12 && aaPolicyYear == YearDiff2030){
                return currentValue +  (temp2030Median * Fund2030ReinvestToVentureGrowthFac/100.00) + EverCashValue;
            }
            else if(MonthDiff2028 == 12 && aaPolicyYear == YearDiff2028){
                return currentValue + (temp2028Median * Fund2028ReinvestToVentureGrowthFac/100.00) + EverCashValue;
            }
            else if(MonthDiff2025 == 12 && aaPolicyYear == YearDiff2025){
                return currentValue + (temp2025Median * Fund2025ReinvestToVentureGrowthFac/100.00) + EverCashValue;
            }
            else{
                return currentValue + EverCashValue;
            }
        }
        else
        {
            return currentValue + EverCashValue;
        }
        
        
    }
    else{
        //if (VUCashValueMedian < 0 && [self ReturnFundValueOfTheYearValueTotalMedian:aaPolicyYear] != 0 ) {
        if (VUCashValueNegative == TRUE && FundValueOfTheYearValueTotalMedian != 0 ) {
            currentValue= ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear]) + IncreasePrem) * [self ReturnVUVentureGrowthFac:aaPolicyYear] * CYFactor +
                           [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * [self ReturnDivideMode] * RegularAllo * [self ReturnVUVentureGrowthFac:aaPolicyYear] * CYFactor +
                           [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnVUVentureGrowthFac:aaPolicyYear] * CYFactor) *
            (1 + [self ReturnVUVentureGrowthInstMedian:@""]) + VUVentureGrowthPrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVentureGrowthInstMedian:@"A"]) -
            ([self ReturnRegWithdrawal:aaPolicyYear] * 0) + (NegativeValueOfMaxCashFundMedian - 1) *
            MAX(0,(FundValueOfTheYearVUVentureGrowthValueMedian_Basic/FundValueOfTheYearValueTotalMedian));
            
        }
        else{
            if (aaRound == 1) {
                currentValue = ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear]) + IncreasePrem) * [self ReturnVUVentureGrowthFac:aaPolicyYear] * CYFactor +
                                [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * [self ReturnDivideMode] * RegularAllo * [self ReturnVUVentureGrowthFac:aaPolicyYear] * CYFactor +
                                [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnVUVentureGrowthFac:aaPolicyYear] * CYFactor) *
                (1 + [self ReturnVUVentureGrowthInstMedian:@""]) + VUVentureGrowthPrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVentureGrowthInstMedian:@"A"]) -
                ([self ReturnRegWithdrawal:aaPolicyYear] * 0);
                VUVentureGrowthValueMedian = currentValue;
            }
            else{
                currentValue = VUVentureGrowthValueMedian;
            }
        }
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear < 60) {
                CashFactor = 0.00;
            }
            else if(Age + aaPolicyYear == 60){
                CashFactor = 1.00;
            }
            else{
                CashFactor = 12 * (1 + [self ReturnVUVentureGrowthInstMedian:@"M"])/(pow((1 + [self ReturnVUVentureGrowthInstMedian:@"A"]), (1.00/12.00)));
            }
        }
        
        if (aaRound == 2) {
            VUVentureGrowthPrevValueMedian = currentValue + VUVentureGrowthValue_EverCash1 + VUVentureGrowthValue_EverCash6 + (VUVentureGrowthValue_EverCash60 * CashFactor);
        }
        return currentValue + VUVentureGrowthValue_EverCash1 + VUVentureGrowthValue_EverCash6 + (VUVentureGrowthValue_EverCash60 * CashFactor);
    }
    
}

-(double)ReturnVUVentureGrowthValueLow :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andRound:(NSInteger)aaRound andMonth:(int)i{
    
    double currentValue;
    
    
    if ([aaYearOrMonth isEqualToString:@"M"]) {
        
        
        if (i == 1) {
            MonthVUVentureGrowthPrevValueLow = VUVentureGrowthPrevValueLow ;
        }
        
        double tempPrev = MonthVUVentureGrowthPrevValueLow;
        if ((i == MonthDiff2035 + 1 && aaPolicyYear == YearDiff2035)  ) {
            MonthVUVentureGrowthPrevValueLow = MonthVUVentureGrowthPrevValueLow + (temp2035Low * Fund2035ReinvestToVentureGrowthFac/100.00);
        }
        else if(i == MonthDiff2030 + 1 && aaPolicyYear == YearDiff2030){
            MonthVUVentureGrowthPrevValueLow = MonthVUVentureGrowthPrevValueLow + (temp2030Low * Fund2030ReinvestToVentureGrowthFac/100.00);
        }
        else if(i == MonthDiff2028 + 1 && aaPolicyYear == YearDiff2028){
            MonthVUVentureGrowthPrevValueLow = MonthVUVentureGrowthPrevValueLow + (temp2028Low * Fund2028ReinvestToVentureGrowthFac/100.00);
        }
        else if(i == MonthDiff2025 + 1 && aaPolicyYear == YearDiff2025){
            MonthVUVentureGrowthPrevValueLow = MonthVUVentureGrowthPrevValueLow + (temp2025Low * Fund2025ReinvestToVentureGrowthFac/100.00);
        }
        else if(i == MonthDiff2023 + 1 && aaPolicyYear == YearDiff2023){
            MonthVUVentureGrowthPrevValueLow = MonthVUVentureGrowthPrevValueLow + (temp2023Low * Fund2023ReinvestToVentureGrowthFac/100.00);
        }
        else{
            
        }
        
        if (VUCashValueNegative == TRUE && MonthFundValueOfTheYearValueTotalLow != 0 ) {
            currentValue= ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVentureGrowthFac:aaPolicyYear  andMonth:i] * CYFactor +
                           [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnPremiumFactor:i] * [self ReturnVUVentureGrowthFac:aaPolicyYear  andMonth:i] * CYFactor +
                           [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnPremiumFactor:i]  * [self ReturnVUVentureGrowthFac:aaPolicyYear  andMonth:i] * CYFactor) *
            pow(1 + [self ReturnVUVentureGrowthInstLow:@"A"], 1.00/12.00) + MonthVUVentureGrowthPrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
            pow(1 + [self ReturnVUVentureGrowthInstLow:@"A"], 1.00/12.00) - ([self ReturnRegWithdrawal:aaPolicyYear] * 0) + (NegativeValueOfMaxCashFundLow - 1) *
            MAX(0,(MonthFundValueOfTheYearVUVentureGrowthValueLow_Basic/MonthFundValueOfTheYearValueTotalLow));
            
        }
        else{
            currentValue = ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVentureGrowthFac:aaPolicyYear  andMonth:i] * CYFactor +
                            [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnPremiumFactor:i] * [self ReturnVUVentureGrowthFac:aaPolicyYear  andMonth:i] * CYFactor +
                            [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnPremiumFactor:i] * [self ReturnVUVentureGrowthFac:aaPolicyYear  andMonth:i] * CYFactor) *
            pow(1 + [self ReturnVUVentureGrowthInstLow:@"A"], 1.00/12.00) + MonthVUVentureGrowthPrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
            pow(1 + [self ReturnVUVentureGrowthInstLow:@"A"], 1.00/12.00) - ([self ReturnRegWithdrawal:aaPolicyYear] * 0);
            
        }
        
        double EverCashValue =  VUVentureGrowthValue_EverCash1 * [self EverCash1_CashPaymentFactor:aaPolicyYear andMonth:i] +
        VUVentureGrowthValue_EverCash6 * [self EverCash6_CashPaymentFactor:aaPolicyYear andMonth:i]  +
        VUVentureGrowthValue_EverCash60;
        
        if (aaRound == 2) {
            MonthVUVentureGrowthPrevValueLow = currentValue + EverCashValue;
        }
        else{
            MonthVUVentureGrowthPrevValueLow = tempPrev;
        }
        
        
        
        if (i == 12  && aaRound == 2) {
            VUVentureGrowthPrevValueLow = MonthVUVentureGrowthPrevValueLow;
            
            if(MonthDiff2035 == 12 && aaPolicyYear == YearDiff2035){ //the reinvestment fund from 2035 will be bring forward to next year
                VUVentureGrowthPrevValueLow = VUVentureGrowthPrevValueLow +  (temp2035Low * Fund2035ReinvestToVentureGrowthFac/100.00);
            }
            else if(MonthDiff2030 == 12 && aaPolicyYear == YearDiff2030){ //the reinvestment fund from 2030 will be bring forward to next year
                VUVentureGrowthPrevValueLow = VUVentureGrowthPrevValueLow +  (temp2030Low * Fund2030ReinvestToVentureGrowthFac/100.00);
            }
            else if(MonthDiff2028 == 12 && aaPolicyYear == YearDiff2028){ //the reinvestment fund from 2028 will be bring forward to next year
                VUVentureGrowthPrevValueLow = VUVentureGrowthPrevValueLow +  (temp2028Low * Fund2028ReinvestToVentureGrowthFac/100.00);
            }
            else if(MonthDiff2025 == 12 && aaPolicyYear == YearDiff2025){ //the reinvestment fund from 2025 will be bring forward to next year
                VUVentureGrowthPrevValueLow = VUVentureGrowthPrevValueLow +  (temp2025Low * Fund2025ReinvestToVentureGrowthFac/100.00);
            }
            
        }
        
        if (i == 12  && aaRound == 2) {
            
            //return currentValue + VUVentureGrowthValue_EverCash1 + VUVentureGrowthValue_EverCash6 + VUVentureGrowthValue_EverCash60;
            
            if(MonthDiff2035 == 12 && aaPolicyYear == YearDiff2035){
                return currentValue + (temp2035Low * Fund2035ReinvestToVentureGrowthFac/100.00) + EverCashValue;
            }
            else if(MonthDiff2030 == 12 && aaPolicyYear == YearDiff2030){
                return currentValue +  (temp2030Low * Fund2030ReinvestToVentureGrowthFac/100.00) + EverCashValue;
            }
            else if(MonthDiff2028 == 12 && aaPolicyYear == YearDiff2028){
                return currentValue + (temp2028Low * Fund2028ReinvestToVentureGrowthFac/100.00) + EverCashValue;
            }
            else if(MonthDiff2025 == 12 && aaPolicyYear == YearDiff2025){
                return currentValue + (temp2025Low * Fund2025ReinvestToVentureGrowthFac/100.00) + EverCashValue;
            }
            else{
                return currentValue + EverCashValue;
            }
        }
        else{
            return currentValue + EverCashValue;
        }
        
    }
    else{
        if (VUCashValueNegative == TRUE && FundValueOfTheYearValueTotalLow != 0 ) {
            currentValue= ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear]) + IncreasePrem) * [self ReturnVUVentureGrowthFac:aaPolicyYear] * CYFactor +
                           [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnVUVentureGrowthFac:aaPolicyYear] * CYFactor +
                           [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnVUVentureGrowthFac:aaPolicyYear] * CYFactor) *
            (1 + [self ReturnVUVentureGrowthInstLow:@""]) + VUVentureGrowthPrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVentureGrowthInstLow:@"A"]) -
            ([self ReturnRegWithdrawal:aaPolicyYear] * 0) + (NegativeValueOfMaxCashFundLow - 1) *
            MAX(0,(FundValueOfTheYearVUVentureGrowthValueLow_Basic/FundValueOfTheYearValueTotalLow));
            
            //NSLog(@"");
            
        }
        else{
            if (aaRound == 1) {
                currentValue = ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear]) + IncreasePrem) * [self ReturnVUVentureGrowthFac:aaPolicyYear] * CYFactor +
                                [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnVUVentureGrowthFac:aaPolicyYear] * CYFactor +
                                [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnVUVentureGrowthFac:aaPolicyYear] * CYFactor) *
                (1 + [self ReturnVUVentureGrowthInstLow:@""]) + VUVentureGrowthPrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVentureGrowthInstLow:@"A"]) -
                ([self ReturnRegWithdrawal:aaPolicyYear] * 0);
                VUVentureGrowthValueLow = currentValue;
            }
            else{
                currentValue = VUVentureGrowthValueLow;
            }
            
        }
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear < 60) {
                CashFactor = 0.00;
            }
            else if(Age + aaPolicyYear == 60){
                CashFactor = 1.00;
            }
            else{
                CashFactor = 12 * (1 + [self ReturnVUVentureGrowthInstLow:@"M"])/(pow((1 + [self ReturnVUVentureGrowthInstLow:@"A"]), (1.00/12.00)));
            }
        }
        
        if (aaRound == 2) {
            VUVentureGrowthPrevValueLow = currentValue + VUVentureGrowthValue_EverCash1 + VUVentureGrowthValue_EverCash6 + (VUVentureGrowthValue_EverCash60 * CashFactor);
        }
        return currentValue + VUVentureGrowthValue_EverCash1 + VUVentureGrowthValue_EverCash6 + (VUVentureGrowthValue_EverCash60 * CashFactor);
    }
    
}

-(double)ReturnVUVentureBlueChipValueHigh :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andRound:(NSInteger)aaRound andMonth:(NSInteger)i{
    
    double currentValue =0.0;
    if ([aaYearOrMonth isEqualToString:@"M"]) {
        
        
        if (i == 1) {
            MonthVUVentureBlueChipPrevValueHigh = VUVentureBlueChipPrevValueHigh ;
        }
        
        double tempPrev = MonthVUVentureBlueChipPrevValueHigh;
        
        if ((i == MonthDiff2035 + 1 && aaPolicyYear == YearDiff2035)) {
            MonthVUVentureBlueChipPrevValueHigh = MonthVUVentureBlueChipPrevValueHigh + (temp2035High * Fund2035ReinvestToVentureBlueChipFac/100.00);
        }
        else if(i == MonthDiff2030 + 1 && aaPolicyYear == YearDiff2030){
            MonthVUVentureBlueChipPrevValueHigh = MonthVUVentureBlueChipPrevValueHigh + (temp2030High * Fund2030ReinvestToVentureBlueChipFac/100.00);
        }
        else if(i == MonthDiff2028 + 1 && aaPolicyYear == YearDiff2028){
            MonthVUVentureBlueChipPrevValueHigh = MonthVUVentureBlueChipPrevValueHigh + (temp2028High * Fund2028ReinvestToVentureBlueChipFac/100.00);
        }
        else if(i == MonthDiff2025 + 1 && aaPolicyYear == YearDiff2025){
            MonthVUVentureBlueChipPrevValueHigh = MonthVUVentureBlueChipPrevValueHigh + (temp2025High * Fund2025ReinvestToVentureBlueChipFac/100.00);
        }
        else if(i == MonthDiff2023 + 1 && aaPolicyYear == YearDiff2023){
            MonthVUVentureBlueChipPrevValueHigh = MonthVUVentureBlueChipPrevValueHigh + (temp2023High * Fund2023ReinvestToVentureBlueChipFac/100.00);
        }
        else{
            
        }
        
        
        
        
        //NSLog(@"%f", MonthVUVentureBlueChipPrevValueHigh);
        if (VUCashValueNegative == TRUE && MonthFundValueOfTheYearValueTotalHigh != 0 ) {
            
            currentValue= ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVentureBlueChipFac:aaPolicyYear andMonth:i] * CYFactor +
                           [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnPremiumFactor:i] * [self ReturnVUVentureBlueChipFac:aaPolicyYear andMonth:i] * CYFactor +
                           [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnPremiumFactor:i] * [self ReturnVUVentureBlueChipFac:aaPolicyYear andMonth:i] * CYFactor) *
            pow(1 + [self ReturnVUVentureBlueChipInstHigh:aaPolicyYear andMOP:@"A"],1.00/12.00) + MonthVUVentureBlueChipPrevValueHigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
            pow(1 + [self ReturnVUVentureBlueChipInstHigh:aaPolicyYear andMOP:@"A"], 1.00/12.00) -
            ([self ReturnRegWithdrawal:aaPolicyYear] * 0) + (NegativeValueOfMaxCashFundHigh - 1) *
            MAX(0,(MonthFundValueOfTheYearVUVentureBlueChipValueHigh_Basic/MonthFundValueOfTheYearValueTotalHigh));
            
            //NSLog(@"%f %f %f",NegativeValueOfMaxCashFundHigh, MonthVUVentureBlueChipValueHigh,MonthFundValueOfTheYearValueTotalHigh );
            
        }
        else{
            
            currentValue = ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVentureBlueChipFac:aaPolicyYear  andMonth:i] * CYFactor +
                            [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnPremiumFactor:i] * [self ReturnVUVentureBlueChipFac:aaPolicyYear andMonth:i] * CYFactor +
                            [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnPremiumFactor:i] * [self ReturnVUVentureBlueChipFac:aaPolicyYear andMonth:i] * CYFactor) *
            pow((1 + [self ReturnVUVentureBlueChipInstHigh:aaPolicyYear andMOP:@"A"]),(1.00/12.00)) + MonthVUVentureBlueChipPrevValueHigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
            pow((1 + [self ReturnVUVentureBlueChipInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00)) -
            ([self ReturnRegWithdrawal:aaPolicyYear] * 0);
            
            
        }
        
        //NSLog(@"%f, %f, %f, %f",NegativeValueOfMaxCashFundHigh, MonthVUVentureBlueChipValueHigh, MonthFundValueOfTheYearValueTotalHigh, currentValue);
        
        [self ReturnMonthEverCash60:aaPolicyYear andMonth:i];
        
        double EverCashValue = VUVentureBlueChipValue_EverCash1 * [self EverCash1_CashPaymentFactor:aaPolicyYear andMonth:i] +
        VUVentureBlueChipValue_EverCash6 * [self EverCash6_CashPaymentFactor:aaPolicyYear andMonth:i]
        + VUVentureBlueChipValue_EverCash60;
        
        if (aaRound == 2) {
            MonthVUVentureBlueChipPrevValueHigh = currentValue + EverCashValue;
        }
        else{
            MonthVUVentureBlueChipPrevValueHigh = tempPrev;
        }
        
        
        
        if (i == 12  && aaRound == 2) {
            VUVentureBlueChipPrevValueHigh = MonthVUVentureBlueChipPrevValueHigh;
            
            if(MonthDiff2035 == 12 && aaPolicyYear == YearDiff2035){ //the reinvestment fund from 2035 will be bring forward to next year
                VUVentureBlueChipPrevValueHigh = VUVentureBlueChipPrevValueHigh +  (temp2035High * Fund2035ReinvestToVentureBlueChipFac/100.00);
            }
            else if(MonthDiff2030 == 12 && aaPolicyYear == YearDiff2030){ //the reinvestment fund from 2030 will be bring forward to next year
                VUVentureBlueChipPrevValueHigh = VUVentureBlueChipPrevValueHigh +  (temp2030High * Fund2030ReinvestToVentureBlueChipFac/100.00);
            }
            else if(MonthDiff2028 == 12 && aaPolicyYear == YearDiff2028){ //the reinvestment fund from 2028 will be bring forward to next year
                VUVentureBlueChipPrevValueHigh = VUVentureBlueChipPrevValueHigh +  (temp2028High * Fund2028ReinvestToVentureBlueChipFac/100.00);
            }
            else if(MonthDiff2025 == 12 && aaPolicyYear == YearDiff2025){ //the reinvestment fund from 2025 will be bring forward to next year
                VUVentureBlueChipPrevValueHigh = VUVentureBlueChipPrevValueHigh +  (temp2025High * Fund2025ReinvestToVentureBlueChipFac/100.00);
            }
        }
        
        //NSLog(@"%d %f %f, %d ", i, MonthVUVentureBlueChipValueHigh, MonthFundValueOfTheYearValueTotalHigh, VUCashValueNegative);
        //return MonthVUVentureBlueChipPrevValueHigh;
        
        if (i == 12  && aaRound == 2) {
            if(MonthDiff2035 == 12 && aaPolicyYear == YearDiff2035){
                return currentValue + (temp2035High * Fund2035ReinvestToVentureBlueChipFac/100.00) + EverCashValue;
            }
            else if(MonthDiff2030 == 12 && aaPolicyYear == YearDiff2030){
                return currentValue +  (temp2030High * Fund2030ReinvestToVentureBlueChipFac/100.00) + EverCashValue;
            }
            else if(MonthDiff2028 == 12 && aaPolicyYear == YearDiff2028){
                return currentValue + (temp2028High * Fund2028ReinvestToVentureBlueChipFac/100.00) + EverCashValue;
            }
            else if(MonthDiff2025 == 12 && aaPolicyYear == YearDiff2025){
                return currentValue + (temp2025High * Fund2025ReinvestToVentureBlueChipFac/100.00) + EverCashValue;
            }
            else{
                return currentValue + EverCashValue;
            }
            
            //return currentValue + VUVentureBlueChipValue_EverCash1 + VUVentureBlueChipValue_EverCash6 + VUVentureBlueChipValue_EverCash60;
        }
        else{
            return currentValue + EverCashValue;
            
        }
        
        
        
    }
    else{
        //if (VUCashValueHigh < 0 && [self ReturnFundValueOfTheYearValueTotalHigh:aaPolicyYear] != 0 ) {
        if (VUCashValueNegative == TRUE && FundValueOfTheYearValueTotalHigh != 0 ) {
            currentValue= ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear]) + IncreasePrem) * [self ReturnVUVentureBlueChipFac:aaPolicyYear] * CYFactor +
                           [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnVUVentureBlueChipFac:aaPolicyYear] * CYFactor +
                           [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnVUVentureBlueChipFac:aaPolicyYear] * CYFactor) *
            (1 + [self ReturnVUVentureBlueChipInstHigh:aaPolicyYear andMOP:@""]) + VUVentureBlueChipPrevValueHigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVentureBlueChipInstHigh:aaPolicyYear andMOP:@"A"]) -
            ([self ReturnRegWithdrawal:aaPolicyYear] * 0) + (NegativeValueOfMaxCashFundHigh - 1) *
            MAX(0,(FundValueOfTheYearVUVentureBlueChipValueHigh_Basic/FundValueOfTheYearValueTotalHigh));
            
        }
        else{
            if (aaRound == 1) {
                currentValue = ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear]) + IncreasePrem) * [self ReturnVUVentureBlueChipFac:aaPolicyYear] * CYFactor +
                                [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnVUVentureBlueChipFac:aaPolicyYear] * CYFactor +
                                [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnVUVentureBlueChipFac:aaPolicyYear] * CYFactor) *
                (1 + [self ReturnVUVentureBlueChipInstHigh:aaPolicyYear andMOP:@""]) + VUVentureBlueChipPrevValueHigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVentureBlueChipInstHigh:aaPolicyYear andMOP:@"A"]) -
                ([self ReturnRegWithdrawal:aaPolicyYear] * 0);
                VUVentureBlueChipValueHigh = currentValue;
            }
            else{
                currentValue = VUVentureBlueChipValueHigh;
            }
            
        }
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear < 60) {
                CashFactor = 0.00;
            }
            else if(Age + aaPolicyYear == 60){
                CashFactor = 1.00;
                
            }
            else{
                
                CashFactor = 12 * (1 + [self ReturnVUVentureBlueChipInstHigh:aaPolicyYear andMOP:@"M"])/(pow((1 + [self ReturnVUVentureBlueChipInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00)));
            }
        }
        
        if (aaRound == 2) {
            VUVentureBlueChipPrevValueHigh = currentValue + VUVentureBlueChipValue_EverCash1 + VUVentureBlueChipValue_EverCash6 + (VUVentureBlueChipValue_EverCash60 * CashFactor);
        }
        
        
        return currentValue + VUVentureBlueChipValue_EverCash1 + VUVentureBlueChipValue_EverCash6 + (VUVentureBlueChipValue_EverCash60 * CashFactor);
    }
    
    
}

-(double)ReturnVUVentureBlueChipValueMedian :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andRound:(NSInteger)aaRound andMonth:(int)i{
    
    double currentValue;
    
    if ([aaYearOrMonth isEqualToString:@"M"]) {
        
        
        if (i == 1) {
            MonthVUVentureBlueChipPrevValueMedian = VUVentureBlueChipPrevValueMedian ;
        }
        
        double tempPrev = MonthVUVentureBlueChipPrevValueMedian;
        if ((i == MonthDiff2035 + 1 && aaPolicyYear == YearDiff2035)  ) {
            MonthVUVentureBlueChipPrevValueMedian = MonthVUVentureBlueChipPrevValueMedian + (temp2035Median * Fund2035ReinvestToVentureBlueChipFac/100.00);
        }
        else if(i == MonthDiff2030 + 1 && aaPolicyYear == YearDiff2030){
            MonthVUVentureBlueChipPrevValueMedian = MonthVUVentureBlueChipPrevValueMedian + (temp2030Median * Fund2030ReinvestToVentureBlueChipFac/100.00);
        }
        else if(i == MonthDiff2028 + 1 && aaPolicyYear == YearDiff2028){
            MonthVUVentureBlueChipPrevValueMedian = MonthVUVentureBlueChipPrevValueMedian + (temp2028Median * Fund2028ReinvestToVentureBlueChipFac/100.00);
        }
        else if(i == MonthDiff2025 + 1 && aaPolicyYear == YearDiff2025){
            MonthVUVentureBlueChipPrevValueMedian = MonthVUVentureBlueChipPrevValueMedian + (temp2025Median * Fund2025ReinvestToVentureBlueChipFac/100.00);
        }
        else if(i == MonthDiff2023 + 1 && aaPolicyYear == YearDiff2023){
            MonthVUVentureBlueChipPrevValueMedian = MonthVUVentureBlueChipPrevValueMedian + (temp2023Median * Fund2023ReinvestToVentureBlueChipFac/100.00);
        }
        else{
            
        }
        
        if (VUCashValueNegative == TRUE && MonthFundValueOfTheYearValueTotalMedian != 0 ) {
            currentValue= ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVentureBlueChipFac:aaPolicyYear  andMonth:i] * CYFactor +
                           [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnPremiumFactor:i] * [self ReturnVUVentureBlueChipFac:aaPolicyYear  andMonth:i] * CYFactor +
                           [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnPremiumFactor:i] * [self ReturnVUVentureBlueChipFac:aaPolicyYear  andMonth:i] * CYFactor) *
            pow(1 + [self ReturnVUVentureBlueChipInstMedian:@"A"], 1.00/12.00) + MonthVUVentureBlueChipPrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
            pow(1 + [self ReturnVUVentureBlueChipInstMedian:@"A"], 1.00/12.00) - ([self ReturnRegWithdrawal:aaPolicyYear] * 0) + (NegativeValueOfMaxCashFundMedian - 1) *
            MAX(0,(MonthFundValueOfTheYearVUVentureBlueChipValueMedian_Basic/MonthFundValueOfTheYearValueTotalMedian));
            
        }
        else{
            currentValue = ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVentureBlueChipFac:aaPolicyYear  andMonth:i] * CYFactor +
                            [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnPremiumFactor:i] * [self ReturnVUVentureBlueChipFac:aaPolicyYear  andMonth:i] * CYFactor +
                            [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnPremiumFactor:i] * [self ReturnVUVentureBlueChipFac:aaPolicyYear  andMonth:i] * CYFactor) *
            pow(1 + [self ReturnVUVentureBlueChipInstMedian:@"A"], 1.00/12.00) + MonthVUVentureBlueChipPrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
            pow(1 + [self ReturnVUVentureBlueChipInstMedian:@"A"], 1.00/12.00) - ([self ReturnRegWithdrawal:aaPolicyYear] * 0);
            
        }
        
        double EverCashValue = VUVentureBlueChipValue_EverCash1 * [self EverCash1_CashPaymentFactor:aaPolicyYear andMonth:i] +
        VUVentureBlueChipValue_EverCash6 * [self EverCash6_CashPaymentFactor:aaPolicyYear andMonth:i] +
        VUVentureBlueChipValue_EverCash60;
        
        if (aaRound == 2) {
            MonthVUVentureBlueChipPrevValueMedian = currentValue + EverCashValue;
        }
        else{
            MonthVUVentureBlueChipPrevValueMedian = tempPrev;
        }
        
        
        
        if (i == 12  && aaRound == 2) {
            VUVentureBlueChipPrevValueMedian = MonthVUVentureBlueChipPrevValueMedian;
            
            if(MonthDiff2035 == 12 && aaPolicyYear == YearDiff2035){ //the reinvestment fund from 2035 will be bring forward to next year
                VUVentureBlueChipPrevValueMedian = VUVentureBlueChipPrevValueMedian +  (temp2035Median * Fund2035ReinvestToVentureBlueChipFac/100.00);
            }
            else if(MonthDiff2030 == 12 && aaPolicyYear == YearDiff2030){ //the reinvestment fund from 2030 will be bring forward to next year
                VUVentureBlueChipPrevValueMedian = VUVentureBlueChipPrevValueMedian +  (temp2030Median * Fund2030ReinvestToVentureBlueChipFac/100.00);
            }
            else if(MonthDiff2028 == 12 && aaPolicyYear == YearDiff2028){ //the reinvestment fund from 2028 will be bring forward to next year
                VUVentureBlueChipPrevValueMedian = VUVentureBlueChipPrevValueMedian +  (temp2028Median * Fund2028ReinvestToVentureBlueChipFac/100.00);
            }
            else if(MonthDiff2025 == 12 && aaPolicyYear == YearDiff2025){ //the reinvestment fund from 2025 will be bring forward to next year
                VUVentureBlueChipPrevValueMedian = VUVentureBlueChipPrevValueMedian +  (temp2025Median * Fund2025ReinvestToVentureBlueChipFac/100.00);
            }
        }
        
        if (i == 12  && aaRound == 2) {
            
            //return currentValue + VUVentureBlueChipValue_EverCash1 + VUVentureBlueChipValue_EverCash6 + VUVentureBlueChipValue_EverCash60;
            
            if(MonthDiff2035 == 12 && aaPolicyYear == YearDiff2035){
                return currentValue + (temp2035Median * Fund2035ReinvestToVentureBlueChipFac/100.00) + EverCashValue;
            }
            else if(MonthDiff2030 == 12 && aaPolicyYear == YearDiff2030){
                return currentValue +  (temp2030Median * Fund2030ReinvestToVentureBlueChipFac/100.00) + EverCashValue;
            }
            else if(MonthDiff2028 == 12 && aaPolicyYear == YearDiff2028){
                return currentValue + (temp2028Median * Fund2028ReinvestToVentureBlueChipFac/100.00) + EverCashValue;
            }
            else if(MonthDiff2025 == 12 && aaPolicyYear == YearDiff2025){
                return currentValue + (temp2025Median * Fund2025ReinvestToVentureBlueChipFac/100.00) + EverCashValue;
            }
            else{
                return currentValue + EverCashValue;
            }
        }
        else
        {
            return currentValue + EverCashValue;
        }
        
        
    }
    else{
        //if (VUCashValueMedian < 0 && [self ReturnFundValueOfTheYearValueTotalMedian:aaPolicyYear] != 0 ) {
        if (VUCashValueNegative == TRUE && FundValueOfTheYearValueTotalMedian != 0 ) {
            currentValue= ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear]) + IncreasePrem) * [self ReturnVUVentureBlueChipFac:aaPolicyYear] * CYFactor +
                           [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * [self ReturnDivideMode] * RegularAllo * [self ReturnVUVentureBlueChipFac:aaPolicyYear] * CYFactor +
                           [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnVUVentureBlueChipFac:aaPolicyYear] * CYFactor) *
            (1 + [self ReturnVUVentureBlueChipInstMedian:@""]) + VUVentureBlueChipPrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVentureBlueChipInstMedian:@"A"]) -
            ([self ReturnRegWithdrawal:aaPolicyYear] * 0) + (NegativeValueOfMaxCashFundMedian - 1) *
            MAX(0,(FundValueOfTheYearVUVentureBlueChipValueMedian_Basic/FundValueOfTheYearValueTotalMedian));
            
        }
        else{
            if (aaRound == 1) {
                currentValue = ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear]) + IncreasePrem) * [self ReturnVUVentureBlueChipFac:aaPolicyYear] * CYFactor +
                                [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * [self ReturnDivideMode] * RegularAllo * [self ReturnVUVentureBlueChipFac:aaPolicyYear] * CYFactor +
                                [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnVUVentureBlueChipFac:aaPolicyYear] * CYFactor) *
                (1 + [self ReturnVUVentureBlueChipInstMedian:@""]) + VUVentureBlueChipPrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVentureBlueChipInstMedian:@"A"]) -
                ([self ReturnRegWithdrawal:aaPolicyYear] * 0);
                VUVentureBlueChipValueMedian = currentValue;
            }
            else{
                currentValue = VUVentureBlueChipValueMedian;
            }
        }
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear < 60) {
                CashFactor = 0.00;
            }
            else if(Age + aaPolicyYear == 60){
                CashFactor = 1.00;
            }
            else{
                CashFactor = 12 * (1 + [self ReturnVUVentureBlueChipInstMedian:@"M"])/(pow((1 + [self ReturnVUVentureBlueChipInstMedian:@"A"]), (1.00/12.00)));
            }
        }
        
        if (aaRound == 2) {
            VUVentureBlueChipPrevValueMedian = currentValue + VUVentureBlueChipValue_EverCash1 + VUVentureBlueChipValue_EverCash6 + (VUVentureBlueChipValue_EverCash60 * CashFactor);
        }
        return currentValue + VUVentureBlueChipValue_EverCash1 + VUVentureBlueChipValue_EverCash6 + (VUVentureBlueChipValue_EverCash60 * CashFactor);
    }
    
}

-(double)ReturnVUVentureBlueChipValueLow :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andRound:(NSInteger)aaRound andMonth:(int)i{
    
    double currentValue;
    
    
    if ([aaYearOrMonth isEqualToString:@"M"]) {
        
        
        if (i == 1) {
            MonthVUVentureBlueChipPrevValueLow = VUVentureBlueChipPrevValueLow ;
        }
        
        double tempPrev = MonthVUVentureBlueChipPrevValueLow;
        if ((i == MonthDiff2035 + 1 && aaPolicyYear == YearDiff2035)  ) {
            MonthVUVentureBlueChipPrevValueLow = MonthVUVentureBlueChipPrevValueLow + (temp2035Low * Fund2035ReinvestToVentureBlueChipFac/100.00);
        }
        else if(i == MonthDiff2030 + 1 && aaPolicyYear == YearDiff2030){
            MonthVUVentureBlueChipPrevValueLow = MonthVUVentureBlueChipPrevValueLow + (temp2030Low * Fund2030ReinvestToVentureBlueChipFac/100.00);
        }
        else if(i == MonthDiff2028 + 1 && aaPolicyYear == YearDiff2028){
            MonthVUVentureBlueChipPrevValueLow = MonthVUVentureBlueChipPrevValueLow + (temp2028Low * Fund2028ReinvestToVentureBlueChipFac/100.00);
        }
        else if(i == MonthDiff2025 + 1 && aaPolicyYear == YearDiff2025){
            MonthVUVentureBlueChipPrevValueLow = MonthVUVentureBlueChipPrevValueLow + (temp2025Low * Fund2025ReinvestToVentureBlueChipFac/100.00);
        }
        else if(i == MonthDiff2023 + 1 && aaPolicyYear == YearDiff2023){
            MonthVUVentureBlueChipPrevValueLow = MonthVUVentureBlueChipPrevValueLow + (temp2023Low * Fund2023ReinvestToVentureBlueChipFac/100.00);
        }
        else{
            
        }
        
        if (VUCashValueNegative == TRUE && MonthFundValueOfTheYearValueTotalLow != 0 ) {
            currentValue= ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVentureBlueChipFac:aaPolicyYear  andMonth:i] * CYFactor +
                           [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnPremiumFactor:i] * [self ReturnVUVentureBlueChipFac:aaPolicyYear  andMonth:i] * CYFactor +
                           [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnPremiumFactor:i]  * [self ReturnVUVentureBlueChipFac:aaPolicyYear  andMonth:i] * CYFactor) *
            pow(1 + [self ReturnVUVentureBlueChipInstLow:@"A"], 1.00/12.00) + MonthVUVentureBlueChipPrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
            pow(1 + [self ReturnVUVentureBlueChipInstLow:@"A"], 1.00/12.00) - ([self ReturnRegWithdrawal:aaPolicyYear] * 0) + (NegativeValueOfMaxCashFundLow - 1) *
            MAX(0,(MonthFundValueOfTheYearVUVentureBlueChipValueLow_Basic/MonthFundValueOfTheYearValueTotalLow));
            
        }
        else{
            currentValue = ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVentureBlueChipFac:aaPolicyYear  andMonth:i] * CYFactor +
                            [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnPremiumFactor:i] * [self ReturnVUVentureBlueChipFac:aaPolicyYear  andMonth:i] * CYFactor +
                            [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnPremiumFactor:i] * [self ReturnVUVentureBlueChipFac:aaPolicyYear  andMonth:i] * CYFactor) *
            pow(1 + [self ReturnVUVentureBlueChipInstLow:@"A"], 1.00/12.00) + MonthVUVentureBlueChipPrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
            pow(1 + [self ReturnVUVentureBlueChipInstLow:@"A"], 1.00/12.00) - ([self ReturnRegWithdrawal:aaPolicyYear] * 0);
            
        }
        
        double EverCashValue =  VUVentureBlueChipValue_EverCash1 * [self EverCash1_CashPaymentFactor:aaPolicyYear andMonth:i] +
        VUVentureBlueChipValue_EverCash6 * [self EverCash6_CashPaymentFactor:aaPolicyYear andMonth:i]  +
        VUVentureBlueChipValue_EverCash60;
        
        if (aaRound == 2) {
            MonthVUVentureBlueChipPrevValueLow = currentValue + EverCashValue;
        }
        else{
            MonthVUVentureBlueChipPrevValueLow = tempPrev;
        }
        
        
        
        if (i == 12  && aaRound == 2) {
            VUVentureBlueChipPrevValueLow = MonthVUVentureBlueChipPrevValueLow;
            
            if(MonthDiff2035 == 12 && aaPolicyYear == YearDiff2035){ //the reinvestment fund from 2035 will be bring forward to next year
                VUVentureBlueChipPrevValueLow = VUVentureBlueChipPrevValueLow +  (temp2035Low * Fund2035ReinvestToVentureBlueChipFac/100.00);
            }
            else if(MonthDiff2030 == 12 && aaPolicyYear == YearDiff2030){ //the reinvestment fund from 2030 will be bring forward to next year
                VUVentureBlueChipPrevValueLow = VUVentureBlueChipPrevValueLow +  (temp2030Low * Fund2030ReinvestToVentureBlueChipFac/100.00);
            }
            else if(MonthDiff2028 == 12 && aaPolicyYear == YearDiff2028){ //the reinvestment fund from 2028 will be bring forward to next year
                VUVentureBlueChipPrevValueLow = VUVentureBlueChipPrevValueLow +  (temp2028Low * Fund2028ReinvestToVentureBlueChipFac/100.00);
            }
            else if(MonthDiff2025 == 12 && aaPolicyYear == YearDiff2025){ //the reinvestment fund from 2025 will be bring forward to next year
                VUVentureBlueChipPrevValueLow = VUVentureBlueChipPrevValueLow +  (temp2025Low * Fund2025ReinvestToVentureBlueChipFac/100.00);
            }
            
        }
        
        if (i == 12  && aaRound == 2) {
            
            //return currentValue + VUVentureBlueChipValue_EverCash1 + VUVentureBlueChipValue_EverCash6 + VUVentureBlueChipValue_EverCash60;
            
            if(MonthDiff2035 == 12 && aaPolicyYear == YearDiff2035){
                return currentValue + (temp2035Low * Fund2035ReinvestToVentureBlueChipFac/100.00) + EverCashValue;
            }
            else if(MonthDiff2030 == 12 && aaPolicyYear == YearDiff2030){
                return currentValue +  (temp2030Low * Fund2030ReinvestToVentureBlueChipFac/100.00) + EverCashValue;
            }
            else if(MonthDiff2028 == 12 && aaPolicyYear == YearDiff2028){
                return currentValue + (temp2028Low * Fund2028ReinvestToVentureBlueChipFac/100.00) + EverCashValue;
            }
            else if(MonthDiff2025 == 12 && aaPolicyYear == YearDiff2025){
                return currentValue + (temp2025Low * Fund2025ReinvestToVentureBlueChipFac/100.00) + EverCashValue;
            }
            else{
                return currentValue + EverCashValue;
            }
        }
        else{
            return currentValue + EverCashValue;
        }
        
    }
    else{
        if (VUCashValueNegative == TRUE && FundValueOfTheYearValueTotalLow != 0 ) {
            currentValue= ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear]) + IncreasePrem) * [self ReturnVUVentureBlueChipFac:aaPolicyYear] * CYFactor +
                           [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnVUVentureBlueChipFac:aaPolicyYear] * CYFactor +
                           [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnVUVentureBlueChipFac:aaPolicyYear] * CYFactor) *
            (1 + [self ReturnVUVentureBlueChipInstLow:@""]) + VUVentureBlueChipPrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVentureBlueChipInstLow:@"A"]) -
            ([self ReturnRegWithdrawal:aaPolicyYear] * 0) + (NegativeValueOfMaxCashFundLow - 1) *
            MAX(0,(FundValueOfTheYearVUVentureBlueChipValueLow_Basic/FundValueOfTheYearValueTotalLow));
            
            //NSLog(@"");
            
        }
        else{
            if (aaRound == 1) {
                currentValue = ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear]) + IncreasePrem) * [self ReturnVUVentureBlueChipFac:aaPolicyYear] * CYFactor +
                                [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnVUVentureBlueChipFac:aaPolicyYear] * CYFactor +
                                [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnVUVentureBlueChipFac:aaPolicyYear] * CYFactor) *
                (1 + [self ReturnVUVentureBlueChipInstLow:@""]) + VUVentureBlueChipPrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVentureBlueChipInstLow:@"A"]) -
                ([self ReturnRegWithdrawal:aaPolicyYear] * 0);
                VUVentureBlueChipValueLow = currentValue;
            }
            else{
                currentValue = VUVentureBlueChipValueLow;
            }
            
        }
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear < 60) {
                CashFactor = 0.00;
            }
            else if(Age + aaPolicyYear == 60){
                CashFactor = 1.00;
            }
            else{
                CashFactor = 12 * (1 + [self ReturnVUVentureBlueChipInstLow:@"M"])/(pow((1 + [self ReturnVUVentureBlueChipInstLow:@"A"]), (1.00/12.00)));
            }
        }
        
        if (aaRound == 2) {
            VUVentureBlueChipPrevValueLow = currentValue + VUVentureBlueChipValue_EverCash1 + VUVentureBlueChipValue_EverCash6 + (VUVentureBlueChipValue_EverCash60 * CashFactor);
        }
        return currentValue + VUVentureBlueChipValue_EverCash1 + VUVentureBlueChipValue_EverCash6 + (VUVentureBlueChipValue_EverCash60 * CashFactor);
    }
    
}

-(double)ReturnVUVentureDanaValueHigh :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andRound:(NSInteger)aaRound andMonth:(NSInteger)i{
    
    double currentValue =0.0;
    if ([aaYearOrMonth isEqualToString:@"M"]) {
        
        
        if (i == 1) {
            MonthVUVentureDanaPrevValueHigh = VUVentureDanaPrevValueHigh ;
        }
        
        double tempPrev = MonthVUVentureDanaPrevValueHigh;
        
        if ((i == MonthDiff2035 + 1 && aaPolicyYear == YearDiff2035)) {
            MonthVUVentureDanaPrevValueHigh = MonthVUVentureDanaPrevValueHigh + (temp2035High * Fund2035ReinvestToVentureDanaFac/100.00);
        }
        else if(i == MonthDiff2030 + 1 && aaPolicyYear == YearDiff2030){
            MonthVUVentureDanaPrevValueHigh = MonthVUVentureDanaPrevValueHigh + (temp2030High * Fund2030ReinvestToVentureDanaFac/100.00);
        }
        else if(i == MonthDiff2028 + 1 && aaPolicyYear == YearDiff2028){
            MonthVUVentureDanaPrevValueHigh = MonthVUVentureDanaPrevValueHigh + (temp2028High * Fund2028ReinvestToVentureDanaFac/100.00);
        }
        else if(i == MonthDiff2025 + 1 && aaPolicyYear == YearDiff2025){
            MonthVUVentureDanaPrevValueHigh = MonthVUVentureDanaPrevValueHigh + (temp2025High * Fund2025ReinvestToVentureDanaFac/100.00);
        }
        else if(i == MonthDiff2023 + 1 && aaPolicyYear == YearDiff2023){
            MonthVUVentureDanaPrevValueHigh = MonthVUVentureDanaPrevValueHigh + (temp2023High * Fund2023ReinvestToVentureDanaFac/100.00);
        }
        else{
            
        }
        
        
        
        
        //NSLog(@"%f", MonthVUVentureDanaPrevValueHigh);
        if (VUCashValueNegative == TRUE && MonthFundValueOfTheYearValueTotalHigh != 0 ) {
            
            currentValue= ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVentureDanaFac:aaPolicyYear andMonth:i] * CYFactor +
                           [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnPremiumFactor:i] * [self ReturnVUVentureDanaFac:aaPolicyYear andMonth:i] * CYFactor +
                           [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnPremiumFactor:i] * [self ReturnVUVentureDanaFac:aaPolicyYear andMonth:i] * CYFactor) *
            pow(1 + [self ReturnVUVentureDanaInstHigh:aaPolicyYear andMOP:@"A"],1.00/12.00) + MonthVUVentureDanaPrevValueHigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
            pow(1 + [self ReturnVUVentureDanaInstHigh:aaPolicyYear andMOP:@"A"], 1.00/12.00) -
            ([self ReturnRegWithdrawal:aaPolicyYear] * 0) + (NegativeValueOfMaxCashFundHigh - 1) *
            MAX(0,(MonthFundValueOfTheYearVUVentureDanaValueHigh_Basic/MonthFundValueOfTheYearValueTotalHigh));
            
            //NSLog(@"%f %f %f",NegativeValueOfMaxCashFundHigh, MonthVUVentureDanaValueHigh,MonthFundValueOfTheYearValueTotalHigh );
            
        }
        else{
            
            currentValue = ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVentureDanaFac:aaPolicyYear  andMonth:i] * CYFactor +
                            [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnPremiumFactor:i] * [self ReturnVUVentureDanaFac:aaPolicyYear andMonth:i] * CYFactor +
                            [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnPremiumFactor:i] * [self ReturnVUVentureDanaFac:aaPolicyYear andMonth:i] * CYFactor) *
            pow((1 + [self ReturnVUVentureDanaInstHigh:aaPolicyYear andMOP:@"A"]),(1.00/12.00)) + MonthVUVentureDanaPrevValueHigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
            pow((1 + [self ReturnVUVentureDanaInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00)) -
            ([self ReturnRegWithdrawal:aaPolicyYear] * 0);
            
            
        }
        
        //NSLog(@"%f, %f, %f, %f",NegativeValueOfMaxCashFundHigh, MonthVUVentureDanaValueHigh, MonthFundValueOfTheYearValueTotalHigh, currentValue);
        
        [self ReturnMonthEverCash60:aaPolicyYear andMonth:i];
        
        double EverCashValue = VUVentureDanaValue_EverCash1 * [self EverCash1_CashPaymentFactor:aaPolicyYear andMonth:i] +
        VUVentureDanaValue_EverCash6 * [self EverCash6_CashPaymentFactor:aaPolicyYear andMonth:i]
        + VUVentureDanaValue_EverCash60;
        
        if (aaRound == 2) {
            MonthVUVentureDanaPrevValueHigh = currentValue + EverCashValue;
        }
        else{
            MonthVUVentureDanaPrevValueHigh = tempPrev;
        }
        
        
        
        if (i == 12  && aaRound == 2) {
            VUVentureDanaPrevValueHigh = MonthVUVentureDanaPrevValueHigh;
            
            if(MonthDiff2035 == 12 && aaPolicyYear == YearDiff2035){ //the reinvestment fund from 2035 will be bring forward to next year
                VUVentureDanaPrevValueHigh = VUVentureDanaPrevValueHigh +  (temp2035High * Fund2035ReinvestToVentureDanaFac/100.00);
            }
            else if(MonthDiff2030 == 12 && aaPolicyYear == YearDiff2030){ //the reinvestment fund from 2030 will be bring forward to next year
                VUVentureDanaPrevValueHigh = VUVentureDanaPrevValueHigh +  (temp2030High * Fund2030ReinvestToVentureDanaFac/100.00);
            }
            else if(MonthDiff2028 == 12 && aaPolicyYear == YearDiff2028){ //the reinvestment fund from 2028 will be bring forward to next year
                VUVentureDanaPrevValueHigh = VUVentureDanaPrevValueHigh +  (temp2028High * Fund2028ReinvestToVentureDanaFac/100.00);
            }
            else if(MonthDiff2025 == 12 && aaPolicyYear == YearDiff2025){ //the reinvestment fund from 2025 will be bring forward to next year
                VUVentureDanaPrevValueHigh = VUVentureDanaPrevValueHigh +  (temp2025High * Fund2025ReinvestToVentureDanaFac/100.00);
            }
        }
        
        //NSLog(@"%d %f %f, %d ", i, MonthVUVentureDanaValueHigh, MonthFundValueOfTheYearValueTotalHigh, VUCashValueNegative);
        //return MonthVUVentureDanaPrevValueHigh;
        
        if (i == 12  && aaRound == 2) {
            if(MonthDiff2035 == 12 && aaPolicyYear == YearDiff2035){
                return currentValue + (temp2035High * Fund2035ReinvestToVentureDanaFac/100.00) + EverCashValue;
            }
            else if(MonthDiff2030 == 12 && aaPolicyYear == YearDiff2030){
                return currentValue +  (temp2030High * Fund2030ReinvestToVentureDanaFac/100.00) + EverCashValue;
            }
            else if(MonthDiff2028 == 12 && aaPolicyYear == YearDiff2028){
                return currentValue + (temp2028High * Fund2028ReinvestToVentureDanaFac/100.00) + EverCashValue;
            }
            else if(MonthDiff2025 == 12 && aaPolicyYear == YearDiff2025){
                return currentValue + (temp2025High * Fund2025ReinvestToVentureDanaFac/100.00) + EverCashValue;
            }
            else{
                return currentValue + EverCashValue;
            }
            
            //return currentValue + VUVentureDanaValue_EverCash1 + VUVentureDanaValue_EverCash6 + VUVentureDanaValue_EverCash60;
        }
        else{
            return currentValue + EverCashValue;
            
        }
        
        
        
    }
    else{
        //if (VUCashValueHigh < 0 && [self ReturnFundValueOfTheYearValueTotalHigh:aaPolicyYear] != 0 ) {
        if (VUCashValueNegative == TRUE && FundValueOfTheYearValueTotalHigh != 0 ) {
            currentValue= ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear]) + IncreasePrem) * [self ReturnVUVentureDanaFac:aaPolicyYear] * CYFactor +
                           [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnVUVentureDanaFac:aaPolicyYear] * CYFactor +
                           [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnVUVentureDanaFac:aaPolicyYear] * CYFactor) *
            (1 + [self ReturnVUVentureDanaInstHigh:aaPolicyYear andMOP:@""]) + VUVentureDanaPrevValueHigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVentureDanaInstHigh:aaPolicyYear andMOP:@"A"]) -
            ([self ReturnRegWithdrawal:aaPolicyYear] * 0) + (NegativeValueOfMaxCashFundHigh - 1) *
            MAX(0,(FundValueOfTheYearVUVentureDanaValueHigh_Basic/FundValueOfTheYearValueTotalHigh));
            
        }
        else{
            if (aaRound == 1) {
                currentValue = ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear]) + IncreasePrem) * [self ReturnVUVentureDanaFac:aaPolicyYear] * CYFactor +
                                [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnVUVentureDanaFac:aaPolicyYear] * CYFactor +
                                [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnVUVentureDanaFac:aaPolicyYear] * CYFactor) *
                (1 + [self ReturnVUVentureDanaInstHigh:aaPolicyYear andMOP:@""]) + VUVentureDanaPrevValueHigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVentureDanaInstHigh:aaPolicyYear andMOP:@"A"]) -
                ([self ReturnRegWithdrawal:aaPolicyYear] * 0);
                VUVentureDanaValueHigh = currentValue;
            }
            else{
                currentValue = VUVentureDanaValueHigh;
            }
            
        }
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear < 60) {
                CashFactor = 0.00;
            }
            else if(Age + aaPolicyYear == 60){
                CashFactor = 1.00;
                
            }
            else{
                
                CashFactor = 12 * (1 + [self ReturnVUVentureDanaInstHigh:aaPolicyYear andMOP:@"M"])/(pow((1 + [self ReturnVUVentureDanaInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00)));
            }
        }
        
        if (aaRound == 2) {
            VUVentureDanaPrevValueHigh = currentValue + VUVentureDanaValue_EverCash1 + VUVentureDanaValue_EverCash6 + (VUVentureDanaValue_EverCash60 * CashFactor);
        }
        
        
        return currentValue + VUVentureDanaValue_EverCash1 + VUVentureDanaValue_EverCash6 + (VUVentureDanaValue_EverCash60 * CashFactor);
    }
    
    
}

-(double)ReturnVUVentureDanaValueMedian :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andRound:(NSInteger)aaRound andMonth:(int)i{
    
    double currentValue;
    
    if ([aaYearOrMonth isEqualToString:@"M"]) {
        
        
        if (i == 1) {
            MonthVUVentureDanaPrevValueMedian = VUVentureDanaPrevValueMedian ;
        }
        
        double tempPrev = MonthVUVentureDanaPrevValueMedian;
        if ((i == MonthDiff2035 + 1 && aaPolicyYear == YearDiff2035)  ) {
            MonthVUVentureDanaPrevValueMedian = MonthVUVentureDanaPrevValueMedian + (temp2035Median * Fund2035ReinvestToVentureDanaFac/100.00);
        }
        else if(i == MonthDiff2030 + 1 && aaPolicyYear == YearDiff2030){
            MonthVUVentureDanaPrevValueMedian = MonthVUVentureDanaPrevValueMedian + (temp2030Median * Fund2030ReinvestToVentureDanaFac/100.00);
        }
        else if(i == MonthDiff2028 + 1 && aaPolicyYear == YearDiff2028){
            MonthVUVentureDanaPrevValueMedian = MonthVUVentureDanaPrevValueMedian + (temp2028Median * Fund2028ReinvestToVentureDanaFac/100.00);
        }
        else if(i == MonthDiff2025 + 1 && aaPolicyYear == YearDiff2025){
            MonthVUVentureDanaPrevValueMedian = MonthVUVentureDanaPrevValueMedian + (temp2025Median * Fund2025ReinvestToVentureDanaFac/100.00);
        }
        else if(i == MonthDiff2023 + 1 && aaPolicyYear == YearDiff2023){
            MonthVUVentureDanaPrevValueMedian = MonthVUVentureDanaPrevValueMedian + (temp2023Median * Fund2023ReinvestToVentureDanaFac/100.00);
        }
        else{
            
        }
        
        if (VUCashValueNegative == TRUE && MonthFundValueOfTheYearValueTotalMedian != 0 ) {
            currentValue= ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVentureDanaFac:aaPolicyYear  andMonth:i] * CYFactor +
                           [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnPremiumFactor:i] * [self ReturnVUVentureDanaFac:aaPolicyYear  andMonth:i] * CYFactor +
                           [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnPremiumFactor:i] * [self ReturnVUVentureDanaFac:aaPolicyYear  andMonth:i] * CYFactor) *
            pow(1 + [self ReturnVUVentureDanaInstMedian:@"A"], 1.00/12.00) + MonthVUVentureDanaPrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
            pow(1 + [self ReturnVUVentureDanaInstMedian:@"A"], 1.00/12.00) - ([self ReturnRegWithdrawal:aaPolicyYear] * 0) + (NegativeValueOfMaxCashFundMedian - 1) *
            MAX(0,(MonthFundValueOfTheYearVUVentureDanaValueMedian_Basic/MonthFundValueOfTheYearValueTotalMedian));
            
        }
        else{
            currentValue = ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVentureDanaFac:aaPolicyYear  andMonth:i] * CYFactor +
                            [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnPremiumFactor:i] * [self ReturnVUVentureDanaFac:aaPolicyYear  andMonth:i] * CYFactor +
                            [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnPremiumFactor:i] * [self ReturnVUVentureDanaFac:aaPolicyYear  andMonth:i] * CYFactor) *
            pow(1 + [self ReturnVUVentureDanaInstMedian:@"A"], 1.00/12.00) + MonthVUVentureDanaPrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
            pow(1 + [self ReturnVUVentureDanaInstMedian:@"A"], 1.00/12.00) - ([self ReturnRegWithdrawal:aaPolicyYear] * 0);
            
        }
        
        double EverCashValue = VUVentureDanaValue_EverCash1 * [self EverCash1_CashPaymentFactor:aaPolicyYear andMonth:i] +
        VUVentureDanaValue_EverCash6 * [self EverCash6_CashPaymentFactor:aaPolicyYear andMonth:i] +
        VUVentureDanaValue_EverCash60;
        
        if (aaRound == 2) {
            MonthVUVentureDanaPrevValueMedian = currentValue + EverCashValue;
        }
        else{
            MonthVUVentureDanaPrevValueMedian = tempPrev;
        }
        
        
        
        if (i == 12  && aaRound == 2) {
            VUVentureDanaPrevValueMedian = MonthVUVentureDanaPrevValueMedian;
            
            if(MonthDiff2035 == 12 && aaPolicyYear == YearDiff2035){ //the reinvestment fund from 2035 will be bring forward to next year
                VUVentureDanaPrevValueMedian = VUVentureDanaPrevValueMedian +  (temp2035Median * Fund2035ReinvestToVentureDanaFac/100.00);
            }
            else if(MonthDiff2030 == 12 && aaPolicyYear == YearDiff2030){ //the reinvestment fund from 2030 will be bring forward to next year
                VUVentureDanaPrevValueMedian = VUVentureDanaPrevValueMedian +  (temp2030Median * Fund2030ReinvestToVentureDanaFac/100.00);
            }
            else if(MonthDiff2028 == 12 && aaPolicyYear == YearDiff2028){ //the reinvestment fund from 2028 will be bring forward to next year
                VUVentureDanaPrevValueMedian = VUVentureDanaPrevValueMedian +  (temp2028Median * Fund2028ReinvestToVentureDanaFac/100.00);
            }
            else if(MonthDiff2025 == 12 && aaPolicyYear == YearDiff2025){ //the reinvestment fund from 2025 will be bring forward to next year
                VUVentureDanaPrevValueMedian = VUVentureDanaPrevValueMedian +  (temp2025Median * Fund2025ReinvestToVentureDanaFac/100.00);
            }
        }
        
        if (i == 12  && aaRound == 2) {
            
            //return currentValue + VUVentureDanaValue_EverCash1 + VUVentureDanaValue_EverCash6 + VUVentureDanaValue_EverCash60;
            
            if(MonthDiff2035 == 12 && aaPolicyYear == YearDiff2035){
                return currentValue + (temp2035Median * Fund2035ReinvestToVentureDanaFac/100.00) + EverCashValue;
            }
            else if(MonthDiff2030 == 12 && aaPolicyYear == YearDiff2030){
                return currentValue +  (temp2030Median * Fund2030ReinvestToVentureDanaFac/100.00) + EverCashValue;
            }
            else if(MonthDiff2028 == 12 && aaPolicyYear == YearDiff2028){
                return currentValue + (temp2028Median * Fund2028ReinvestToVentureDanaFac/100.00) + EverCashValue;
            }
            else if(MonthDiff2025 == 12 && aaPolicyYear == YearDiff2025){
                return currentValue + (temp2025Median * Fund2025ReinvestToVentureDanaFac/100.00) + EverCashValue;
            }
            else{
                return currentValue + EverCashValue;
            }
        }
        else
        {
            return currentValue + EverCashValue;
        }
        
        
    }
    else{
        //if (VUCashValueMedian < 0 && [self ReturnFundValueOfTheYearValueTotalMedian:aaPolicyYear] != 0 ) {
        if (VUCashValueNegative == TRUE && FundValueOfTheYearValueTotalMedian != 0 ) {
            currentValue= ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear]) + IncreasePrem) * [self ReturnVUVentureDanaFac:aaPolicyYear] * CYFactor +
                           [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * [self ReturnDivideMode] * RegularAllo * [self ReturnVUVentureDanaFac:aaPolicyYear] * CYFactor +
                           [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnVUVentureDanaFac:aaPolicyYear] * CYFactor) *
            (1 + [self ReturnVUVentureDanaInstMedian:@""]) + VUVentureDanaPrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVentureDanaInstMedian:@"A"]) -
            ([self ReturnRegWithdrawal:aaPolicyYear] * 0) + (NegativeValueOfMaxCashFundMedian - 1) *
            MAX(0,(FundValueOfTheYearVUVentureDanaValueMedian_Basic/FundValueOfTheYearValueTotalMedian));
            
        }
        else{
            if (aaRound == 1) {
                currentValue = ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear]) + IncreasePrem) * [self ReturnVUVentureDanaFac:aaPolicyYear] * CYFactor +
                                [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * [self ReturnDivideMode] * RegularAllo * [self ReturnVUVentureDanaFac:aaPolicyYear] * CYFactor +
                                [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnVUVentureDanaFac:aaPolicyYear] * CYFactor) *
                (1 + [self ReturnVUVentureDanaInstMedian:@""]) + VUVentureDanaPrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVentureDanaInstMedian:@"A"]) -
                ([self ReturnRegWithdrawal:aaPolicyYear] * 0);
                VUVentureDanaValueMedian = currentValue;
            }
            else{
                currentValue = VUVentureDanaValueMedian;
            }
        }
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear < 60) {
                CashFactor = 0.00;
            }
            else if(Age + aaPolicyYear == 60){
                CashFactor = 1.00;
            }
            else{
                CashFactor = 12 * (1 + [self ReturnVUVentureDanaInstMedian:@"M"])/(pow((1 + [self ReturnVUVentureDanaInstMedian:@"A"]), (1.00/12.00)));
            }
        }
        
        if (aaRound == 2) {
            VUVentureDanaPrevValueMedian = currentValue + VUVentureDanaValue_EverCash1 + VUVentureDanaValue_EverCash6 + (VUVentureDanaValue_EverCash60 * CashFactor);
        }
        return currentValue + VUVentureDanaValue_EverCash1 + VUVentureDanaValue_EverCash6 + (VUVentureDanaValue_EverCash60 * CashFactor);
    }
    
}


-(double)ReturnVUVentureDanaValueLow :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andRound:(NSInteger)aaRound andMonth:(int)i{
    
    double currentValue;
    
    
    if ([aaYearOrMonth isEqualToString:@"M"]) {
        
        
        if (i == 1) {
            MonthVUVentureDanaPrevValueLow = VUVentureDanaPrevValueLow ;
        }
        
        double tempPrev = MonthVUVentureDanaPrevValueLow;
        if ((i == MonthDiff2035 + 1 && aaPolicyYear == YearDiff2035)  ) {
            MonthVUVentureDanaPrevValueLow = MonthVUVentureDanaPrevValueLow + (temp2035Low * Fund2035ReinvestToVentureDanaFac/100.00);
        }
        else if(i == MonthDiff2030 + 1 && aaPolicyYear == YearDiff2030){
            MonthVUVentureDanaPrevValueLow = MonthVUVentureDanaPrevValueLow + (temp2030Low * Fund2030ReinvestToVentureDanaFac/100.00);
        }
        else if(i == MonthDiff2028 + 1 && aaPolicyYear == YearDiff2028){
            MonthVUVentureDanaPrevValueLow = MonthVUVentureDanaPrevValueLow + (temp2028Low * Fund2028ReinvestToVentureDanaFac/100.00);
        }
        else if(i == MonthDiff2025 + 1 && aaPolicyYear == YearDiff2025){
            MonthVUVentureDanaPrevValueLow = MonthVUVentureDanaPrevValueLow + (temp2025Low * Fund2025ReinvestToVentureDanaFac/100.00);
        }
        else if(i == MonthDiff2023 + 1 && aaPolicyYear == YearDiff2023){
            MonthVUVentureDanaPrevValueLow = MonthVUVentureDanaPrevValueLow + (temp2023Low * Fund2023ReinvestToVentureDanaFac/100.00);
        }
        else{
            
        }
        
        if (VUCashValueNegative == TRUE && MonthFundValueOfTheYearValueTotalLow != 0 ) {
            currentValue= ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVentureDanaFac:aaPolicyYear  andMonth:i] * CYFactor +
                           [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnPremiumFactor:i] * [self ReturnVUVentureDanaFac:aaPolicyYear  andMonth:i] * CYFactor +
                           [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnPremiumFactor:i]  * [self ReturnVUVentureDanaFac:aaPolicyYear  andMonth:i] * CYFactor) *
            pow(1 + [self ReturnVUVentureDanaInstLow:@"A"], 1.00/12.00) + MonthVUVentureDanaPrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
            pow(1 + [self ReturnVUVentureDanaInstLow:@"A"], 1.00/12.00) - ([self ReturnRegWithdrawal:aaPolicyYear] * 0) + (NegativeValueOfMaxCashFundLow - 1) *
            MAX(0,(MonthFundValueOfTheYearVUVentureDanaValueLow_Basic/MonthFundValueOfTheYearValueTotalLow));
            
        }
        else{
            currentValue = ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVentureDanaFac:aaPolicyYear  andMonth:i] * CYFactor +
                            [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnPremiumFactor:i] * [self ReturnVUVentureDanaFac:aaPolicyYear  andMonth:i] * CYFactor +
                            [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnPremiumFactor:i] * [self ReturnVUVentureDanaFac:aaPolicyYear  andMonth:i] * CYFactor) *
            pow(1 + [self ReturnVUVentureDanaInstLow:@"A"], 1.00/12.00) + MonthVUVentureDanaPrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
            pow(1 + [self ReturnVUVentureDanaInstLow:@"A"], 1.00/12.00) - ([self ReturnRegWithdrawal:aaPolicyYear] * 0);
            
        }
        
        double EverCashValue =  VUVentureDanaValue_EverCash1 * [self EverCash1_CashPaymentFactor:aaPolicyYear andMonth:i] +
        VUVentureDanaValue_EverCash6 * [self EverCash6_CashPaymentFactor:aaPolicyYear andMonth:i]  +
        VUVentureDanaValue_EverCash60;
        
        if (aaRound == 2) {
            MonthVUVentureDanaPrevValueLow = currentValue + EverCashValue;
        }
        else{
            MonthVUVentureDanaPrevValueLow = tempPrev;
        }
        
        
        
        if (i == 12  && aaRound == 2) {
            VUVentureDanaPrevValueLow = MonthVUVentureDanaPrevValueLow;
            
            if(MonthDiff2035 == 12 && aaPolicyYear == YearDiff2035){ //the reinvestment fund from 2035 will be bring forward to next year
                VUVentureDanaPrevValueLow = VUVentureDanaPrevValueLow +  (temp2035Low * Fund2035ReinvestToVentureDanaFac/100.00);
            }
            else if(MonthDiff2030 == 12 && aaPolicyYear == YearDiff2030){ //the reinvestment fund from 2030 will be bring forward to next year
                VUVentureDanaPrevValueLow = VUVentureDanaPrevValueLow +  (temp2030Low * Fund2030ReinvestToVentureDanaFac/100.00);
            }
            else if(MonthDiff2028 == 12 && aaPolicyYear == YearDiff2028){ //the reinvestment fund from 2028 will be bring forward to next year
                VUVentureDanaPrevValueLow = VUVentureDanaPrevValueLow +  (temp2028Low * Fund2028ReinvestToVentureDanaFac/100.00);
            }
            else if(MonthDiff2025 == 12 && aaPolicyYear == YearDiff2025){ //the reinvestment fund from 2025 will be bring forward to next year
                VUVentureDanaPrevValueLow = VUVentureDanaPrevValueLow +  (temp2025Low * Fund2025ReinvestToVentureDanaFac/100.00);
            }
            
        }
        
        if (i == 12  && aaRound == 2) {
            
            //return currentValue + VUVentureDanaValue_EverCash1 + VUVentureDanaValue_EverCash6 + VUVentureDanaValue_EverCash60;
            
            if(MonthDiff2035 == 12 && aaPolicyYear == YearDiff2035){
                return currentValue + (temp2035Low * Fund2035ReinvestToVentureDanaFac/100.00) + EverCashValue;
            }
            else if(MonthDiff2030 == 12 && aaPolicyYear == YearDiff2030){
                return currentValue +  (temp2030Low * Fund2030ReinvestToVentureDanaFac/100.00) + EverCashValue;
            }
            else if(MonthDiff2028 == 12 && aaPolicyYear == YearDiff2028){
                return currentValue + (temp2028Low * Fund2028ReinvestToVentureDanaFac/100.00) + EverCashValue;
            }
            else if(MonthDiff2025 == 12 && aaPolicyYear == YearDiff2025){
                return currentValue + (temp2025Low * Fund2025ReinvestToVentureDanaFac/100.00) + EverCashValue;
            }
            else{
                return currentValue + EverCashValue;
            }
        }
        else{
            return currentValue + EverCashValue;
        }
        
    }
    else{
        if (VUCashValueNegative == TRUE && FundValueOfTheYearValueTotalLow != 0 ) {
            currentValue= ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear]) + IncreasePrem) * [self ReturnVUVentureDanaFac:aaPolicyYear] * CYFactor +
                           [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnVUVentureDanaFac:aaPolicyYear] * CYFactor +
                           [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnVUVentureDanaFac:aaPolicyYear] * CYFactor) *
            (1 + [self ReturnVUVentureDanaInstLow:@""]) + VUVentureDanaPrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVentureDanaInstLow:@"A"]) -
            ([self ReturnRegWithdrawal:aaPolicyYear] * 0) + (NegativeValueOfMaxCashFundLow - 1) *
            MAX(0,(FundValueOfTheYearVUVentureDanaValueLow_Basic/FundValueOfTheYearValueTotalLow));
            
            //NSLog(@"");
            
        }
        else{
            if (aaRound == 1) {
                currentValue = ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear]) + IncreasePrem) * [self ReturnVUVentureDanaFac:aaPolicyYear] * CYFactor +
                                [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnVUVentureDanaFac:aaPolicyYear] * CYFactor +
                                [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnVUVentureDanaFac:aaPolicyYear] * CYFactor) *
                (1 + [self ReturnVUVentureDanaInstLow:@""]) + VUVentureDanaPrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVentureDanaInstLow:@"A"]) -
                ([self ReturnRegWithdrawal:aaPolicyYear] * 0);
                VUVentureDanaValueLow = currentValue;
            }
            else{
                currentValue = VUVentureDanaValueLow;
            }
            
        }
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear < 60) {
                CashFactor = 0.00;
            }
            else if(Age + aaPolicyYear == 60){
                CashFactor = 1.00;
            }
            else{
                CashFactor = 12 * (1 + [self ReturnVUVentureDanaInstLow:@"M"])/(pow((1 + [self ReturnVUVentureDanaInstLow:@"A"]), (1.00/12.00)));
            }
        }
        
        if (aaRound == 2) {
            VUVentureDanaPrevValueLow = currentValue + VUVentureDanaValue_EverCash1 + VUVentureDanaValue_EverCash6 + (VUVentureDanaValue_EverCash60 * CashFactor);
        }
        return currentValue + VUVentureDanaValue_EverCash1 + VUVentureDanaValue_EverCash6 + (VUVentureDanaValue_EverCash60 * CashFactor);
    }
    
}


-(double)ReturnVUVentureManagedValueHigh :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andRound:(NSInteger)aaRound andMonth:(NSInteger)i{
    
    double currentValue =0.0;
    if ([aaYearOrMonth isEqualToString:@"M"]) {
        
        
        if (i == 1) {
            MonthVUVentureManagedPrevValueHigh = VUVentureManagedPrevValueHigh ;
        }
        
        double tempPrev = MonthVUVentureManagedPrevValueHigh;
        
        if ((i == MonthDiff2035 + 1 && aaPolicyYear == YearDiff2035)) {
            MonthVUVentureManagedPrevValueHigh = MonthVUVentureManagedPrevValueHigh + (temp2035High * Fund2035ReinvestToVentureManagedFac/100.00);
        }
        else if(i == MonthDiff2030 + 1 && aaPolicyYear == YearDiff2030){
            MonthVUVentureManagedPrevValueHigh = MonthVUVentureManagedPrevValueHigh + (temp2030High * Fund2030ReinvestToVentureManagedFac/100.00);
        }
        else if(i == MonthDiff2028 + 1 && aaPolicyYear == YearDiff2028){
            MonthVUVentureManagedPrevValueHigh = MonthVUVentureManagedPrevValueHigh + (temp2028High * Fund2028ReinvestToVentureManagedFac/100.00);
        }
        else if(i == MonthDiff2025 + 1 && aaPolicyYear == YearDiff2025){
            MonthVUVentureManagedPrevValueHigh = MonthVUVentureManagedPrevValueHigh + (temp2025High * Fund2025ReinvestToVentureManagedFac/100.00);
        }
        else if(i == MonthDiff2023 + 1 && aaPolicyYear == YearDiff2023){
            MonthVUVentureManagedPrevValueHigh = MonthVUVentureManagedPrevValueHigh + (temp2023High * Fund2023ReinvestToVentureManagedFac/100.00);
        }
        else{
            
        }
        
        
        
        
        //NSLog(@"%f", MonthVUVentureManagedPrevValueHigh);
        if (VUCashValueNegative == TRUE && MonthFundValueOfTheYearValueTotalHigh != 0 ) {
            
            currentValue= ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVentureManagedFac:aaPolicyYear andMonth:i] * CYFactor +
                           [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnPremiumFactor:i] * [self ReturnVUVentureManagedFac:aaPolicyYear andMonth:i] * CYFactor +
                           [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnPremiumFactor:i] * [self ReturnVUVentureManagedFac:aaPolicyYear andMonth:i] * CYFactor) *
            pow(1 + [self ReturnVUVentureManagedInstHigh:aaPolicyYear andMOP:@"A"],1.00/12.00) + MonthVUVentureManagedPrevValueHigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
            pow(1 + [self ReturnVUVentureManagedInstHigh:aaPolicyYear andMOP:@"A"], 1.00/12.00) -
            ([self ReturnRegWithdrawal:aaPolicyYear] * 0) + (NegativeValueOfMaxCashFundHigh - 1) *
            MAX(0,(MonthFundValueOfTheYearVUVentureManagedValueHigh_Basic/MonthFundValueOfTheYearValueTotalHigh));
            
            //NSLog(@"%f %f %f",NegativeValueOfMaxCashFundHigh, MonthVUVentureManagedValueHigh,MonthFundValueOfTheYearValueTotalHigh );
            
        }
        else{
            
            currentValue = ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVentureManagedFac:aaPolicyYear  andMonth:i] * CYFactor +
                            [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnPremiumFactor:i] * [self ReturnVUVentureManagedFac:aaPolicyYear andMonth:i] * CYFactor +
                            [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnPremiumFactor:i] * [self ReturnVUVentureManagedFac:aaPolicyYear andMonth:i] * CYFactor) *
            pow((1 + [self ReturnVUVentureManagedInstHigh:aaPolicyYear andMOP:@"A"]),(1.00/12.00)) + MonthVUVentureManagedPrevValueHigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
            pow((1 + [self ReturnVUVentureManagedInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00)) -
            ([self ReturnRegWithdrawal:aaPolicyYear] * 0);
            
            
        }
        
        //NSLog(@"%f, %f, %f, %f",NegativeValueOfMaxCashFundHigh, MonthVUVentureManagedValueHigh, MonthFundValueOfTheYearValueTotalHigh, currentValue);
        
        [self ReturnMonthEverCash60:aaPolicyYear andMonth:i];
        
        double EverCashValue = VUVentureManagedValue_EverCash1 * [self EverCash1_CashPaymentFactor:aaPolicyYear andMonth:i] +
        VUVentureManagedValue_EverCash6 * [self EverCash6_CashPaymentFactor:aaPolicyYear andMonth:i]
        + VUVentureManagedValue_EverCash60;
        
        if (aaRound == 2) {
            MonthVUVentureManagedPrevValueHigh = currentValue + EverCashValue;
        }
        else{
            MonthVUVentureManagedPrevValueHigh = tempPrev;
        }
        
        
        
        if (i == 12  && aaRound == 2) {
            VUVentureManagedPrevValueHigh = MonthVUVentureManagedPrevValueHigh;
            
            if(MonthDiff2035 == 12 && aaPolicyYear == YearDiff2035){ //the reinvestment fund from 2035 will be bring forward to next year
                VUVentureManagedPrevValueHigh = VUVentureManagedPrevValueHigh +  (temp2035High * Fund2035ReinvestToVentureManagedFac/100.00);
            }
            else if(MonthDiff2030 == 12 && aaPolicyYear == YearDiff2030){ //the reinvestment fund from 2030 will be bring forward to next year
                VUVentureManagedPrevValueHigh = VUVentureManagedPrevValueHigh +  (temp2030High * Fund2030ReinvestToVentureManagedFac/100.00);
            }
            else if(MonthDiff2028 == 12 && aaPolicyYear == YearDiff2028){ //the reinvestment fund from 2028 will be bring forward to next year
                VUVentureManagedPrevValueHigh = VUVentureManagedPrevValueHigh +  (temp2028High * Fund2028ReinvestToVentureManagedFac/100.00);
            }
            else if(MonthDiff2025 == 12 && aaPolicyYear == YearDiff2025){ //the reinvestment fund from 2025 will be bring forward to next year
                VUVentureManagedPrevValueHigh = VUVentureManagedPrevValueHigh +  (temp2025High * Fund2025ReinvestToVentureManagedFac/100.00);
            }
        }
        
        //NSLog(@"%d %f %f, %d ", i, MonthVUVentureManagedValueHigh, MonthFundValueOfTheYearValueTotalHigh, VUCashValueNegative);
        //return MonthVUVentureManagedPrevValueHigh;
        
        if (i == 12  && aaRound == 2) {
            if(MonthDiff2035 == 12 && aaPolicyYear == YearDiff2035){
                return currentValue + (temp2035High * Fund2035ReinvestToVentureManagedFac/100.00) + EverCashValue;
            }
            else if(MonthDiff2030 == 12 && aaPolicyYear == YearDiff2030){
                return currentValue +  (temp2030High * Fund2030ReinvestToVentureManagedFac/100.00) + EverCashValue;
            }
            else if(MonthDiff2028 == 12 && aaPolicyYear == YearDiff2028){
                return currentValue + (temp2028High * Fund2028ReinvestToVentureManagedFac/100.00) + EverCashValue;
            }
            else if(MonthDiff2025 == 12 && aaPolicyYear == YearDiff2025){
                return currentValue + (temp2025High * Fund2025ReinvestToVentureManagedFac/100.00) + EverCashValue;
            }
            else{
                return currentValue + EverCashValue;
            }
            
            //return currentValue + VUVentureManagedValue_EverCash1 + VUVentureManagedValue_EverCash6 + VUVentureManagedValue_EverCash60;
        }
        else{
            return currentValue + EverCashValue;
            
        }
        
        
        
    }
    else{
        //if (VUCashValueHigh < 0 && [self ReturnFundValueOfTheYearValueTotalHigh:aaPolicyYear] != 0 ) {
        if (VUCashValueNegative == TRUE && FundValueOfTheYearValueTotalHigh != 0 ) {
            currentValue= ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear]) + IncreasePrem) * [self ReturnVUVentureManagedFac:aaPolicyYear] * CYFactor +
                           [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnVUVentureManagedFac:aaPolicyYear] * CYFactor +
                           [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnVUVentureManagedFac:aaPolicyYear] * CYFactor) *
            (1 + [self ReturnVUVentureManagedInstHigh:aaPolicyYear andMOP:@""]) + VUVentureManagedPrevValueHigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVentureManagedInstHigh:aaPolicyYear andMOP:@"A"]) -
            ([self ReturnRegWithdrawal:aaPolicyYear] * 0) + (NegativeValueOfMaxCashFundHigh - 1) *
            MAX(0,(FundValueOfTheYearVUVentureManagedValueHigh_Basic/FundValueOfTheYearValueTotalHigh));
            
        }
        else{
            if (aaRound == 1) {
                currentValue = ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear]) + IncreasePrem) * [self ReturnVUVentureManagedFac:aaPolicyYear] * CYFactor +
                                [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnVUVentureManagedFac:aaPolicyYear] * CYFactor +
                                [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnVUVentureManagedFac:aaPolicyYear] * CYFactor) *
                (1 + [self ReturnVUVentureManagedInstHigh:aaPolicyYear andMOP:@""]) + VUVentureManagedPrevValueHigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVentureManagedInstHigh:aaPolicyYear andMOP:@"A"]) -
                ([self ReturnRegWithdrawal:aaPolicyYear] * 0);
                VUVentureManagedValueHigh = currentValue;
            }
            else{
                currentValue = VUVentureManagedValueHigh;
            }
            
        }
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear < 60) {
                CashFactor = 0.00;
            }
            else if(Age + aaPolicyYear == 60){
                CashFactor = 1.00;
                
            }
            else{
                
                CashFactor = 12 * (1 + [self ReturnVUVentureManagedInstHigh:aaPolicyYear andMOP:@"M"])/(pow((1 + [self ReturnVUVentureManagedInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00)));
            }
        }
        
        if (aaRound == 2) {
            VUVentureManagedPrevValueHigh = currentValue + VUVentureManagedValue_EverCash1 + VUVentureManagedValue_EverCash6 + (VUVentureManagedValue_EverCash60 * CashFactor);
        }
        
        
        return currentValue + VUVentureManagedValue_EverCash1 + VUVentureManagedValue_EverCash6 + (VUVentureManagedValue_EverCash60 * CashFactor);
    }
    
    
}

-(double)ReturnVUVentureManagedValueMedian :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andRound:(NSInteger)aaRound andMonth:(int)i{
    
    double currentValue;
    
    if ([aaYearOrMonth isEqualToString:@"M"]) {
        
        
        if (i == 1) {
            MonthVUVentureManagedPrevValueMedian = VUVentureManagedPrevValueMedian ;
        }
        
        double tempPrev = MonthVUVentureManagedPrevValueMedian;
        if ((i == MonthDiff2035 + 1 && aaPolicyYear == YearDiff2035)  ) {
            MonthVUVentureManagedPrevValueMedian = MonthVUVentureManagedPrevValueMedian + (temp2035Median * Fund2035ReinvestToVentureManagedFac/100.00);
        }
        else if(i == MonthDiff2030 + 1 && aaPolicyYear == YearDiff2030){
            MonthVUVentureManagedPrevValueMedian = MonthVUVentureManagedPrevValueMedian + (temp2030Median * Fund2030ReinvestToVentureManagedFac/100.00);
        }
        else if(i == MonthDiff2028 + 1 && aaPolicyYear == YearDiff2028){
            MonthVUVentureManagedPrevValueMedian = MonthVUVentureManagedPrevValueMedian + (temp2028Median * Fund2028ReinvestToVentureManagedFac/100.00);
        }
        else if(i == MonthDiff2025 + 1 && aaPolicyYear == YearDiff2025){
            MonthVUVentureManagedPrevValueMedian = MonthVUVentureManagedPrevValueMedian + (temp2025Median * Fund2025ReinvestToVentureManagedFac/100.00);
        }
        else if(i == MonthDiff2023 + 1 && aaPolicyYear == YearDiff2023){
            MonthVUVentureManagedPrevValueMedian = MonthVUVentureManagedPrevValueMedian + (temp2023Median * Fund2023ReinvestToVentureManagedFac/100.00);
        }
        else{
            
        }
        
        if (VUCashValueNegative == TRUE && MonthFundValueOfTheYearValueTotalMedian != 0 ) {
            currentValue= ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVentureManagedFac:aaPolicyYear  andMonth:i] * CYFactor +
                           [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnPremiumFactor:i] * [self ReturnVUVentureManagedFac:aaPolicyYear  andMonth:i] * CYFactor +
                           [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnPremiumFactor:i] * [self ReturnVUVentureManagedFac:aaPolicyYear  andMonth:i] * CYFactor) *
            pow(1 + [self ReturnVUVentureManagedInstMedian:@"A"], 1.00/12.00) + MonthVUVentureManagedPrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
            pow(1 + [self ReturnVUVentureManagedInstMedian:@"A"], 1.00/12.00) - ([self ReturnRegWithdrawal:aaPolicyYear] * 0) + (NegativeValueOfMaxCashFundMedian - 1) *
            MAX(0,(MonthFundValueOfTheYearVUVentureManagedValueMedian_Basic/MonthFundValueOfTheYearValueTotalMedian));
            
        }
        else{
            currentValue = ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVentureManagedFac:aaPolicyYear  andMonth:i] * CYFactor +
                            [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnPremiumFactor:i] * [self ReturnVUVentureManagedFac:aaPolicyYear  andMonth:i] * CYFactor +
                            [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnPremiumFactor:i] * [self ReturnVUVentureManagedFac:aaPolicyYear  andMonth:i] * CYFactor) *
            pow(1 + [self ReturnVUVentureManagedInstMedian:@"A"], 1.00/12.00) + MonthVUVentureManagedPrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
            pow(1 + [self ReturnVUVentureManagedInstMedian:@"A"], 1.00/12.00) - ([self ReturnRegWithdrawal:aaPolicyYear] * 0);
            
        }
        
        double EverCashValue = VUVentureManagedValue_EverCash1 * [self EverCash1_CashPaymentFactor:aaPolicyYear andMonth:i] +
        VUVentureManagedValue_EverCash6 * [self EverCash6_CashPaymentFactor:aaPolicyYear andMonth:i] +
        VUVentureManagedValue_EverCash60;
        
        if (aaRound == 2) {
            MonthVUVentureManagedPrevValueMedian = currentValue + EverCashValue;
        }
        else{
            MonthVUVentureManagedPrevValueMedian = tempPrev;
        }
        
        
        
        if (i == 12  && aaRound == 2) {
            VUVentureManagedPrevValueMedian = MonthVUVentureManagedPrevValueMedian;
            
            if(MonthDiff2035 == 12 && aaPolicyYear == YearDiff2035){ //the reinvestment fund from 2035 will be bring forward to next year
                VUVentureManagedPrevValueMedian = VUVentureManagedPrevValueMedian +  (temp2035Median * Fund2035ReinvestToVentureManagedFac/100.00);
            }
            else if(MonthDiff2030 == 12 && aaPolicyYear == YearDiff2030){ //the reinvestment fund from 2030 will be bring forward to next year
                VUVentureManagedPrevValueMedian = VUVentureManagedPrevValueMedian +  (temp2030Median * Fund2030ReinvestToVentureManagedFac/100.00);
            }
            else if(MonthDiff2028 == 12 && aaPolicyYear == YearDiff2028){ //the reinvestment fund from 2028 will be bring forward to next year
                VUVentureManagedPrevValueMedian = VUVentureManagedPrevValueMedian +  (temp2028Median * Fund2028ReinvestToVentureManagedFac/100.00);
            }
            else if(MonthDiff2025 == 12 && aaPolicyYear == YearDiff2025){ //the reinvestment fund from 2025 will be bring forward to next year
                VUVentureManagedPrevValueMedian = VUVentureManagedPrevValueMedian +  (temp2025Median * Fund2025ReinvestToVentureManagedFac/100.00);
            }
        }
        
        if (i == 12  && aaRound == 2) {
            
            //return currentValue + VUVentureManagedValue_EverCash1 + VUVentureManagedValue_EverCash6 + VUVentureManagedValue_EverCash60;
            
            if(MonthDiff2035 == 12 && aaPolicyYear == YearDiff2035){
                return currentValue + (temp2035Median * Fund2035ReinvestToVentureManagedFac/100.00) + EverCashValue;
            }
            else if(MonthDiff2030 == 12 && aaPolicyYear == YearDiff2030){
                return currentValue +  (temp2030Median * Fund2030ReinvestToVentureManagedFac/100.00) + EverCashValue;
            }
            else if(MonthDiff2028 == 12 && aaPolicyYear == YearDiff2028){
                return currentValue + (temp2028Median * Fund2028ReinvestToVentureManagedFac/100.00) + EverCashValue;
            }
            else if(MonthDiff2025 == 12 && aaPolicyYear == YearDiff2025){
                return currentValue + (temp2025Median * Fund2025ReinvestToVentureManagedFac/100.00) + EverCashValue;
            }
            else{
                return currentValue + EverCashValue;
            }
        }
        else
        {
            return currentValue + EverCashValue;
        }
        
        
    }
    else{
        //if (VUCashValueMedian < 0 && [self ReturnFundValueOfTheYearValueTotalMedian:aaPolicyYear] != 0 ) {
        if (VUCashValueNegative == TRUE && FundValueOfTheYearValueTotalMedian != 0 ) {
            currentValue= ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear]) + IncreasePrem) * [self ReturnVUVentureManagedFac:aaPolicyYear] * CYFactor +
                           [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * [self ReturnDivideMode] * RegularAllo * [self ReturnVUVentureManagedFac:aaPolicyYear] * CYFactor +
                           [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnVUVentureManagedFac:aaPolicyYear] * CYFactor) *
            (1 + [self ReturnVUVentureManagedInstMedian:@""]) + VUVentureManagedPrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVentureManagedInstMedian:@"A"]) -
            ([self ReturnRegWithdrawal:aaPolicyYear] * 0) + (NegativeValueOfMaxCashFundMedian - 1) *
            MAX(0,(FundValueOfTheYearVUVentureManagedValueMedian_Basic/FundValueOfTheYearValueTotalMedian));
            
        }
        else{
            if (aaRound == 1) {
                currentValue = ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear]) + IncreasePrem) * [self ReturnVUVentureManagedFac:aaPolicyYear] * CYFactor +
                                [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * [self ReturnDivideMode] * RegularAllo * [self ReturnVUVentureManagedFac:aaPolicyYear] * CYFactor +
                                [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnVUVentureManagedFac:aaPolicyYear] * CYFactor) *
                (1 + [self ReturnVUVentureManagedInstMedian:@""]) + VUVentureManagedPrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVentureManagedInstMedian:@"A"]) -
                ([self ReturnRegWithdrawal:aaPolicyYear] * 0);
                VUVentureManagedValueMedian = currentValue;
            }
            else{
                currentValue = VUVentureManagedValueMedian;
            }
        }
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear < 60) {
                CashFactor = 0.00;
            }
            else if(Age + aaPolicyYear == 60){
                CashFactor = 1.00;
            }
            else{
                CashFactor = 12 * (1 + [self ReturnVUVentureManagedInstMedian:@"M"])/(pow((1 + [self ReturnVUVentureManagedInstMedian:@"A"]), (1.00/12.00)));
            }
        }
        
        if (aaRound == 2) {
            VUVentureManagedPrevValueMedian = currentValue + VUVentureManagedValue_EverCash1 + VUVentureManagedValue_EverCash6 + (VUVentureManagedValue_EverCash60 * CashFactor);
        }
        return currentValue + VUVentureManagedValue_EverCash1 + VUVentureManagedValue_EverCash6 + (VUVentureManagedValue_EverCash60 * CashFactor);
    }
    
}

-(double)ReturnVUVentureManagedValueLow :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andRound:(NSInteger)aaRound andMonth:(int)i{
    
    double currentValue;
    
    
    if ([aaYearOrMonth isEqualToString:@"M"]) {
        
        
        if (i == 1) {
            MonthVUVentureManagedPrevValueLow = VUVentureManagedPrevValueLow ;
        }
        
        double tempPrev = MonthVUVentureManagedPrevValueLow;
        if ((i == MonthDiff2035 + 1 && aaPolicyYear == YearDiff2035)  ) {
            MonthVUVentureManagedPrevValueLow = MonthVUVentureManagedPrevValueLow + (temp2035Low * Fund2035ReinvestToVentureManagedFac/100.00);
        }
        else if(i == MonthDiff2030 + 1 && aaPolicyYear == YearDiff2030){
            MonthVUVentureManagedPrevValueLow = MonthVUVentureManagedPrevValueLow + (temp2030Low * Fund2030ReinvestToVentureManagedFac/100.00);
        }
        else if(i == MonthDiff2028 + 1 && aaPolicyYear == YearDiff2028){
            MonthVUVentureManagedPrevValueLow = MonthVUVentureManagedPrevValueLow + (temp2028Low * Fund2028ReinvestToVentureManagedFac/100.00);
        }
        else if(i == MonthDiff2025 + 1 && aaPolicyYear == YearDiff2025){
            MonthVUVentureManagedPrevValueLow = MonthVUVentureManagedPrevValueLow + (temp2025Low * Fund2025ReinvestToVentureManagedFac/100.00);
        }
        else if(i == MonthDiff2023 + 1 && aaPolicyYear == YearDiff2023){
            MonthVUVentureManagedPrevValueLow = MonthVUVentureManagedPrevValueLow + (temp2023Low * Fund2023ReinvestToVentureManagedFac/100.00);
        }
        else{
            
        }
        
        if (VUCashValueNegative == TRUE && MonthFundValueOfTheYearValueTotalLow != 0 ) {
            currentValue= ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVentureManagedFac:aaPolicyYear  andMonth:i] * CYFactor +
                           [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnPremiumFactor:i] * [self ReturnVUVentureManagedFac:aaPolicyYear  andMonth:i] * CYFactor +
                           [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnPremiumFactor:i]  * [self ReturnVUVentureManagedFac:aaPolicyYear  andMonth:i] * CYFactor) *
            pow(1 + [self ReturnVUVentureManagedInstLow:@"A"], 1.00/12.00) + MonthVUVentureManagedPrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
            pow(1 + [self ReturnVUVentureManagedInstLow:@"A"], 1.00/12.00) - ([self ReturnRegWithdrawal:aaPolicyYear] * 0) + (NegativeValueOfMaxCashFundLow - 1) *
            MAX(0,(MonthFundValueOfTheYearVUVentureManagedValueLow_Basic/MonthFundValueOfTheYearValueTotalLow));
            
        }
        else{
            currentValue = ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVentureManagedFac:aaPolicyYear  andMonth:i] * CYFactor +
                            [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnPremiumFactor:i] * [self ReturnVUVentureManagedFac:aaPolicyYear  andMonth:i] * CYFactor +
                            [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnPremiumFactor:i] * [self ReturnVUVentureManagedFac:aaPolicyYear  andMonth:i] * CYFactor) *
            pow(1 + [self ReturnVUVentureManagedInstLow:@"A"], 1.00/12.00) + MonthVUVentureManagedPrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
            pow(1 + [self ReturnVUVentureManagedInstLow:@"A"], 1.00/12.00) - ([self ReturnRegWithdrawal:aaPolicyYear] * 0);
            
        }
        
        double EverCashValue =  VUVentureManagedValue_EverCash1 * [self EverCash1_CashPaymentFactor:aaPolicyYear andMonth:i] +
        VUVentureManagedValue_EverCash6 * [self EverCash6_CashPaymentFactor:aaPolicyYear andMonth:i]  +
        VUVentureManagedValue_EverCash60;
        
        if (aaRound == 2) {
            MonthVUVentureManagedPrevValueLow = currentValue + EverCashValue;
        }
        else{
            MonthVUVentureManagedPrevValueLow = tempPrev;
        }
        
        
        
        if (i == 12  && aaRound == 2) {
            VUVentureManagedPrevValueLow = MonthVUVentureManagedPrevValueLow;
            
            if(MonthDiff2035 == 12 && aaPolicyYear == YearDiff2035){ //the reinvestment fund from 2035 will be bring forward to next year
                VUVentureManagedPrevValueLow = VUVentureManagedPrevValueLow +  (temp2035Low * Fund2035ReinvestToVentureManagedFac/100.00);
            }
            else if(MonthDiff2030 == 12 && aaPolicyYear == YearDiff2030){ //the reinvestment fund from 2030 will be bring forward to next year
                VUVentureManagedPrevValueLow = VUVentureManagedPrevValueLow +  (temp2030Low * Fund2030ReinvestToVentureManagedFac/100.00);
            }
            else if(MonthDiff2028 == 12 && aaPolicyYear == YearDiff2028){ //the reinvestment fund from 2028 will be bring forward to next year
                VUVentureManagedPrevValueLow = VUVentureManagedPrevValueLow +  (temp2028Low * Fund2028ReinvestToVentureManagedFac/100.00);
            }
            else if(MonthDiff2025 == 12 && aaPolicyYear == YearDiff2025){ //the reinvestment fund from 2025 will be bring forward to next year
                VUVentureManagedPrevValueLow = VUVentureManagedPrevValueLow +  (temp2025Low * Fund2025ReinvestToVentureManagedFac/100.00);
            }
            
        }
        
        if (i == 12  && aaRound == 2) {
            
            //return currentValue + VUVentureManagedValue_EverCash1 + VUVentureManagedValue_EverCash6 + VUVentureManagedValue_EverCash60;
            
            if(MonthDiff2035 == 12 && aaPolicyYear == YearDiff2035){
                return currentValue + (temp2035Low * Fund2035ReinvestToVentureManagedFac/100.00) + EverCashValue;
            }
            else if(MonthDiff2030 == 12 && aaPolicyYear == YearDiff2030){
                return currentValue +  (temp2030Low * Fund2030ReinvestToVentureManagedFac/100.00) + EverCashValue;
            }
            else if(MonthDiff2028 == 12 && aaPolicyYear == YearDiff2028){
                return currentValue + (temp2028Low * Fund2028ReinvestToVentureManagedFac/100.00) + EverCashValue;
            }
            else if(MonthDiff2025 == 12 && aaPolicyYear == YearDiff2025){
                return currentValue + (temp2025Low * Fund2025ReinvestToVentureManagedFac/100.00) + EverCashValue;
            }
            else{
                return currentValue + EverCashValue;
            }
        }
        else{
            return currentValue + EverCashValue;
        }
        
    }
    else{
        if (VUCashValueNegative == TRUE && FundValueOfTheYearValueTotalLow != 0 ) {
            currentValue= ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear]) + IncreasePrem) * [self ReturnVUVentureManagedFac:aaPolicyYear] * CYFactor +
                           [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnVUVentureManagedFac:aaPolicyYear] * CYFactor +
                           [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnVUVentureManagedFac:aaPolicyYear] * CYFactor) *
            (1 + [self ReturnVUVentureManagedInstLow:@""]) + VUVentureManagedPrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVentureManagedInstLow:@"A"]) -
            ([self ReturnRegWithdrawal:aaPolicyYear] * 0) + (NegativeValueOfMaxCashFundLow - 1) *
            MAX(0,(FundValueOfTheYearVUVentureManagedValueLow_Basic/FundValueOfTheYearValueTotalLow));
            
            //NSLog(@"");
            
        }
        else{
            if (aaRound == 1) {
                currentValue = ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear]) + IncreasePrem) * [self ReturnVUVentureManagedFac:aaPolicyYear] * CYFactor +
                                [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnVUVentureManagedFac:aaPolicyYear] * CYFactor +
                                [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnVUVentureManagedFac:aaPolicyYear] * CYFactor) *
                (1 + [self ReturnVUVentureManagedInstLow:@""]) + VUVentureManagedPrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVentureManagedInstLow:@"A"]) -
                ([self ReturnRegWithdrawal:aaPolicyYear] * 0);
                VUVentureManagedValueLow = currentValue;
            }
            else{
                currentValue = VUVentureManagedValueLow;
            }
            
        }
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear < 60) {
                CashFactor = 0.00;
            }
            else if(Age + aaPolicyYear == 60){
                CashFactor = 1.00;
            }
            else{
                CashFactor = 12 * (1 + [self ReturnVUVentureManagedInstLow:@"M"])/(pow((1 + [self ReturnVUVentureManagedInstLow:@"A"]), (1.00/12.00)));
            }
        }
        
        if (aaRound == 2) {
            VUVentureManagedPrevValueLow = currentValue + VUVentureManagedValue_EverCash1 + VUVentureManagedValue_EverCash6 + (VUVentureManagedValue_EverCash60 * CashFactor);
        }
        return currentValue + VUVentureManagedValue_EverCash1 + VUVentureManagedValue_EverCash6 + (VUVentureManagedValue_EverCash60 * CashFactor);
    }
    
}

-(double)ReturnVUVentureIncomeValueHigh :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andRound:(NSInteger)aaRound andMonth:(NSInteger)i{
    
    double currentValue =0.0;
    if ([aaYearOrMonth isEqualToString:@"M"]) {
        
        
        if (i == 1) {
            MonthVUVentureIncomePrevValueHigh = VUVentureIncomePrevValueHigh ;
        }
        
        double tempPrev = MonthVUVentureIncomePrevValueHigh;
        
        if ((i == MonthDiff2035 + 1 && aaPolicyYear == YearDiff2035)) {
            MonthVUVentureIncomePrevValueHigh = MonthVUVentureIncomePrevValueHigh + (temp2035High * Fund2035ReinvestToVentureIncomeFac/100.00);
        }
        else if(i == MonthDiff2030 + 1 && aaPolicyYear == YearDiff2030){
            MonthVUVentureIncomePrevValueHigh = MonthVUVentureIncomePrevValueHigh + (temp2030High * Fund2030ReinvestToVentureIncomeFac/100.00);
        }
        else if(i == MonthDiff2028 + 1 && aaPolicyYear == YearDiff2028){
            MonthVUVentureIncomePrevValueHigh = MonthVUVentureIncomePrevValueHigh + (temp2028High * Fund2028ReinvestToVentureIncomeFac/100.00);
        }
        else if(i == MonthDiff2025 + 1 && aaPolicyYear == YearDiff2025){
            MonthVUVentureIncomePrevValueHigh = MonthVUVentureIncomePrevValueHigh + (temp2025High * Fund2025ReinvestToVentureIncomeFac/100.00);
        }
        else if(i == MonthDiff2023 + 1 && aaPolicyYear == YearDiff2023){
            MonthVUVentureIncomePrevValueHigh = MonthVUVentureIncomePrevValueHigh + (temp2023High * Fund2023ReinvestToVentureIncomeFac/100.00);
        }
        else{
            
        }
        
        
        
        
        //NSLog(@"%f", MonthVUVentureIncomePrevValueHigh);
        if (VUCashValueNegative == TRUE && MonthFundValueOfTheYearValueTotalHigh != 0 ) {
            
            currentValue= ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVentureIncomeFac:aaPolicyYear andMonth:i] * CYFactor +
                           [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnPremiumFactor:i] * [self ReturnVUVentureIncomeFac:aaPolicyYear andMonth:i] * CYFactor +
                           [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnPremiumFactor:i] * [self ReturnVUVentureIncomeFac:aaPolicyYear andMonth:i] * CYFactor) *
            pow(1 + [self ReturnVUVentureIncomeInstHigh:aaPolicyYear andMOP:@"A"],1.00/12.00) + MonthVUVentureIncomePrevValueHigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
            pow(1 + [self ReturnVUVentureIncomeInstHigh:aaPolicyYear andMOP:@"A"], 1.00/12.00) -
            ([self ReturnRegWithdrawal:aaPolicyYear] * 0) + (NegativeValueOfMaxCashFundHigh - 1) *
            MAX(0,(MonthFundValueOfTheYearVUVentureIncomeValueHigh_Basic/MonthFundValueOfTheYearValueTotalHigh));
            
            //NSLog(@"%f %f %f",NegativeValueOfMaxCashFundHigh, MonthVUVentureIncomeValueHigh,MonthFundValueOfTheYearValueTotalHigh );
            
        }
        else{
            
            currentValue = ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVentureIncomeFac:aaPolicyYear  andMonth:i] * CYFactor +
                            [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnPremiumFactor:i] * [self ReturnVUVentureIncomeFac:aaPolicyYear andMonth:i] * CYFactor +
                            [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnPremiumFactor:i] * [self ReturnVUVentureIncomeFac:aaPolicyYear andMonth:i] * CYFactor) *
            pow((1 + [self ReturnVUVentureIncomeInstHigh:aaPolicyYear andMOP:@"A"]),(1.00/12.00)) + MonthVUVentureIncomePrevValueHigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
            pow((1 + [self ReturnVUVentureIncomeInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00)) -
            ([self ReturnRegWithdrawal:aaPolicyYear] * 0);
            
            
        }
        
        //NSLog(@"%f, %f, %f, %f",NegativeValueOfMaxCashFundHigh, MonthVUVentureIncomeValueHigh, MonthFundValueOfTheYearValueTotalHigh, currentValue);
        
        [self ReturnMonthEverCash60:aaPolicyYear andMonth:i];
        
        double EverCashValue = VUVentureIncomeValue_EverCash1 * [self EverCash1_CashPaymentFactor:aaPolicyYear andMonth:i] +
        VUVentureIncomeValue_EverCash6 * [self EverCash6_CashPaymentFactor:aaPolicyYear andMonth:i]
        + VUVentureIncomeValue_EverCash60;
        
        if (aaRound == 2) {
            MonthVUVentureIncomePrevValueHigh = currentValue + EverCashValue;
        }
        else{
            MonthVUVentureIncomePrevValueHigh = tempPrev;
        }
        
        
        
        if (i == 12  && aaRound == 2) {
            VUVentureIncomePrevValueHigh = MonthVUVentureIncomePrevValueHigh;
            
            if(MonthDiff2035 == 12 && aaPolicyYear == YearDiff2035){ //the reinvestment fund from 2035 will be bring forward to next year
                VUVentureIncomePrevValueHigh = VUVentureIncomePrevValueHigh +  (temp2035High * Fund2035ReinvestToVentureIncomeFac/100.00);
            }
            else if(MonthDiff2030 == 12 && aaPolicyYear == YearDiff2030){ //the reinvestment fund from 2030 will be bring forward to next year
                VUVentureIncomePrevValueHigh = VUVentureIncomePrevValueHigh +  (temp2030High * Fund2030ReinvestToVentureIncomeFac/100.00);
            }
            else if(MonthDiff2028 == 12 && aaPolicyYear == YearDiff2028){ //the reinvestment fund from 2028 will be bring forward to next year
                VUVentureIncomePrevValueHigh = VUVentureIncomePrevValueHigh +  (temp2028High * Fund2028ReinvestToVentureIncomeFac/100.00);
            }
            else if(MonthDiff2025 == 12 && aaPolicyYear == YearDiff2025){ //the reinvestment fund from 2025 will be bring forward to next year
                VUVentureIncomePrevValueHigh = VUVentureIncomePrevValueHigh +  (temp2025High * Fund2025ReinvestToVentureIncomeFac/100.00);
            }
        }
        
        //NSLog(@"%d %f %f, %d ", i, MonthVUVentureIncomeValueHigh, MonthFundValueOfTheYearValueTotalHigh, VUCashValueNegative);
        //return MonthVUVentureIncomePrevValueHigh;
        
        if (i == 12  && aaRound == 2) {
            if(MonthDiff2035 == 12 && aaPolicyYear == YearDiff2035){
                return currentValue + (temp2035High * Fund2035ReinvestToVentureIncomeFac/100.00) + EverCashValue;
            }
            else if(MonthDiff2030 == 12 && aaPolicyYear == YearDiff2030){
                return currentValue +  (temp2030High * Fund2030ReinvestToVentureIncomeFac/100.00) + EverCashValue;
            }
            else if(MonthDiff2028 == 12 && aaPolicyYear == YearDiff2028){
                return currentValue + (temp2028High * Fund2028ReinvestToVentureIncomeFac/100.00) + EverCashValue;
            }
            else if(MonthDiff2025 == 12 && aaPolicyYear == YearDiff2025){
                return currentValue + (temp2025High * Fund2025ReinvestToVentureIncomeFac/100.00) + EverCashValue;
            }
            else{
                return currentValue + EverCashValue;
            }
            
            //return currentValue + VUVentureIncomeValue_EverCash1 + VUVentureIncomeValue_EverCash6 + VUVentureIncomeValue_EverCash60;
        }
        else{
            return currentValue + EverCashValue;
            
        }
        
        
        
    }
    else{
        //if (VUCashValueHigh < 0 && [self ReturnFundValueOfTheYearValueTotalHigh:aaPolicyYear] != 0 ) {
        if (VUCashValueNegative == TRUE && FundValueOfTheYearValueTotalHigh != 0 ) {
            currentValue= ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear]) + IncreasePrem) * [self ReturnVUVentureIncomeFac:aaPolicyYear] * CYFactor +
                           [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnVUVentureIncomeFac:aaPolicyYear] * CYFactor +
                           [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnVUVentureIncomeFac:aaPolicyYear] * CYFactor) *
            (1 + [self ReturnVUVentureIncomeInstHigh:aaPolicyYear andMOP:@""]) + VUVentureIncomePrevValueHigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVentureIncomeInstHigh:aaPolicyYear andMOP:@"A"]) -
            ([self ReturnRegWithdrawal:aaPolicyYear] * 0) + (NegativeValueOfMaxCashFundHigh - 1) *
            MAX(0,(FundValueOfTheYearVUVentureIncomeValueHigh_Basic/FundValueOfTheYearValueTotalHigh));
            
        }
        else{
            if (aaRound == 1) {
                currentValue = ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear]) + IncreasePrem) * [self ReturnVUVentureIncomeFac:aaPolicyYear] * CYFactor +
                                [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnVUVentureIncomeFac:aaPolicyYear] * CYFactor +
                                [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnVUVentureIncomeFac:aaPolicyYear] * CYFactor) *
                (1 + [self ReturnVUVentureIncomeInstHigh:aaPolicyYear andMOP:@""]) + VUVentureIncomePrevValueHigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVentureIncomeInstHigh:aaPolicyYear andMOP:@"A"]) -
                ([self ReturnRegWithdrawal:aaPolicyYear] * 0);
                VUVentureIncomeValueHigh = currentValue;
            }
            else{
                currentValue = VUVentureIncomeValueHigh;
            }
            
        }
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear < 60) {
                CashFactor = 0.00;
            }
            else if(Age + aaPolicyYear == 60){
                CashFactor = 1.00;
                
            }
            else{
                
                CashFactor = 12 * (1 + [self ReturnVUVentureIncomeInstHigh:aaPolicyYear andMOP:@"M"])/(pow((1 + [self ReturnVUVentureIncomeInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00)));
            }
        }
        
        if (aaRound == 2) {
            VUVentureIncomePrevValueHigh = currentValue + VUVentureIncomeValue_EverCash1 + VUVentureIncomeValue_EverCash6 + (VUVentureIncomeValue_EverCash60 * CashFactor);
        }
        
        
        return currentValue + VUVentureIncomeValue_EverCash1 + VUVentureIncomeValue_EverCash6 + (VUVentureIncomeValue_EverCash60 * CashFactor);
    }
    
    
}

-(double)ReturnVUVentureIncomeValueMedian :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andRound:(NSInteger)aaRound andMonth:(int)i{
    
    double currentValue;
    
    if ([aaYearOrMonth isEqualToString:@"M"]) {
        
        
        if (i == 1) {
            MonthVUVentureIncomePrevValueMedian = VUVentureIncomePrevValueMedian ;
        }
        
        double tempPrev = MonthVUVentureIncomePrevValueMedian;
        if ((i == MonthDiff2035 + 1 && aaPolicyYear == YearDiff2035)  ) {
            MonthVUVentureIncomePrevValueMedian = MonthVUVentureIncomePrevValueMedian + (temp2035Median * Fund2035ReinvestToVentureIncomeFac/100.00);
        }
        else if(i == MonthDiff2030 + 1 && aaPolicyYear == YearDiff2030){
            MonthVUVentureIncomePrevValueMedian = MonthVUVentureIncomePrevValueMedian + (temp2030Median * Fund2030ReinvestToVentureIncomeFac/100.00);
        }
        else if(i == MonthDiff2028 + 1 && aaPolicyYear == YearDiff2028){
            MonthVUVentureIncomePrevValueMedian = MonthVUVentureIncomePrevValueMedian + (temp2028Median * Fund2028ReinvestToVentureIncomeFac/100.00);
        }
        else if(i == MonthDiff2025 + 1 && aaPolicyYear == YearDiff2025){
            MonthVUVentureIncomePrevValueMedian = MonthVUVentureIncomePrevValueMedian + (temp2025Median * Fund2025ReinvestToVentureIncomeFac/100.00);
        }
        else if(i == MonthDiff2023 + 1 && aaPolicyYear == YearDiff2023){
            MonthVUVentureIncomePrevValueMedian = MonthVUVentureIncomePrevValueMedian + (temp2023Median * Fund2023ReinvestToVentureIncomeFac/100.00);
        }
        else{
            
        }
        
        if (VUCashValueNegative == TRUE && MonthFundValueOfTheYearValueTotalMedian != 0 ) {
            currentValue= ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVentureIncomeFac:aaPolicyYear  andMonth:i] * CYFactor +
                           [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnPremiumFactor:i] * [self ReturnVUVentureIncomeFac:aaPolicyYear  andMonth:i] * CYFactor +
                           [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnPremiumFactor:i] * [self ReturnVUVentureIncomeFac:aaPolicyYear  andMonth:i] * CYFactor) *
            pow(1 + [self ReturnVUVentureIncomeInstMedian:@"A"], 1.00/12.00) + MonthVUVentureIncomePrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
            pow(1 + [self ReturnVUVentureIncomeInstMedian:@"A"], 1.00/12.00) - ([self ReturnRegWithdrawal:aaPolicyYear] * 0) + (NegativeValueOfMaxCashFundMedian - 1) *
            MAX(0,(MonthFundValueOfTheYearVUVentureIncomeValueMedian_Basic/MonthFundValueOfTheYearValueTotalMedian));
            
        }
        else{
            currentValue = ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVentureIncomeFac:aaPolicyYear  andMonth:i] * CYFactor +
                            [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnPremiumFactor:i] * [self ReturnVUVentureIncomeFac:aaPolicyYear  andMonth:i] * CYFactor +
                            [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnPremiumFactor:i] * [self ReturnVUVentureIncomeFac:aaPolicyYear  andMonth:i] * CYFactor) *
            pow(1 + [self ReturnVUVentureIncomeInstMedian:@"A"], 1.00/12.00) + MonthVUVentureIncomePrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
            pow(1 + [self ReturnVUVentureIncomeInstMedian:@"A"], 1.00/12.00) - ([self ReturnRegWithdrawal:aaPolicyYear] * 0);
            
        }
        
        double EverCashValue = VUVentureIncomeValue_EverCash1 * [self EverCash1_CashPaymentFactor:aaPolicyYear andMonth:i] +
        VUVentureIncomeValue_EverCash6 * [self EverCash6_CashPaymentFactor:aaPolicyYear andMonth:i] +
        VUVentureIncomeValue_EverCash60;
        
        if (aaRound == 2) {
            MonthVUVentureIncomePrevValueMedian = currentValue + EverCashValue;
        }
        else{
            MonthVUVentureIncomePrevValueMedian = tempPrev;
        }
        
        
        
        if (i == 12  && aaRound == 2) {
            VUVentureIncomePrevValueMedian = MonthVUVentureIncomePrevValueMedian;
            
            if(MonthDiff2035 == 12 && aaPolicyYear == YearDiff2035){ //the reinvestment fund from 2035 will be bring forward to next year
                VUVentureIncomePrevValueMedian = VUVentureIncomePrevValueMedian +  (temp2035Median * Fund2035ReinvestToVentureIncomeFac/100.00);
            }
            else if(MonthDiff2030 == 12 && aaPolicyYear == YearDiff2030){ //the reinvestment fund from 2030 will be bring forward to next year
                VUVentureIncomePrevValueMedian = VUVentureIncomePrevValueMedian +  (temp2030Median * Fund2030ReinvestToVentureIncomeFac/100.00);
            }
            else if(MonthDiff2028 == 12 && aaPolicyYear == YearDiff2028){ //the reinvestment fund from 2028 will be bring forward to next year
                VUVentureIncomePrevValueMedian = VUVentureIncomePrevValueMedian +  (temp2028Median * Fund2028ReinvestToVentureIncomeFac/100.00);
            }
            else if(MonthDiff2025 == 12 && aaPolicyYear == YearDiff2025){ //the reinvestment fund from 2025 will be bring forward to next year
                VUVentureIncomePrevValueMedian = VUVentureIncomePrevValueMedian +  (temp2025Median * Fund2025ReinvestToVentureIncomeFac/100.00);
            }
        }
        
        if (i == 12  && aaRound == 2) {
            
            //return currentValue + VUVentureIncomeValue_EverCash1 + VUVentureIncomeValue_EverCash6 + VUVentureIncomeValue_EverCash60;
            
            if(MonthDiff2035 == 12 && aaPolicyYear == YearDiff2035){
                return currentValue + (temp2035Median * Fund2035ReinvestToVentureIncomeFac/100.00) + EverCashValue;
            }
            else if(MonthDiff2030 == 12 && aaPolicyYear == YearDiff2030){
                return currentValue +  (temp2030Median * Fund2030ReinvestToVentureIncomeFac/100.00) + EverCashValue;
            }
            else if(MonthDiff2028 == 12 && aaPolicyYear == YearDiff2028){
                return currentValue + (temp2028Median * Fund2028ReinvestToVentureIncomeFac/100.00) + EverCashValue;
            }
            else if(MonthDiff2025 == 12 && aaPolicyYear == YearDiff2025){
                return currentValue + (temp2025Median * Fund2025ReinvestToVentureIncomeFac/100.00) + EverCashValue;
            }
            else{
                return currentValue + EverCashValue;
            }
        }
        else
        {
            return currentValue + EverCashValue;
        }
        
        
    }
    else{
        //if (VUCashValueMedian < 0 && [self ReturnFundValueOfTheYearValueTotalMedian:aaPolicyYear] != 0 ) {
        if (VUCashValueNegative == TRUE && FundValueOfTheYearValueTotalMedian != 0 ) {
            currentValue= ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear]) + IncreasePrem) * [self ReturnVUVentureIncomeFac:aaPolicyYear] * CYFactor +
                           [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * [self ReturnDivideMode] * RegularAllo * [self ReturnVUVentureIncomeFac:aaPolicyYear] * CYFactor +
                           [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnVUVentureIncomeFac:aaPolicyYear] * CYFactor) *
            (1 + [self ReturnVUVentureIncomeInstMedian:@""]) + VUVentureIncomePrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVentureIncomeInstMedian:@"A"]) -
            ([self ReturnRegWithdrawal:aaPolicyYear] * 0) + (NegativeValueOfMaxCashFundMedian - 1) *
            MAX(0,(FundValueOfTheYearVUVentureIncomeValueMedian_Basic/FundValueOfTheYearValueTotalMedian));
            
        }
        else{
            if (aaRound == 1) {
                currentValue = ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear]) + IncreasePrem) * [self ReturnVUVentureIncomeFac:aaPolicyYear] * CYFactor +
                                [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * [self ReturnDivideMode] * RegularAllo * [self ReturnVUVentureIncomeFac:aaPolicyYear] * CYFactor +
                                [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnVUVentureIncomeFac:aaPolicyYear] * CYFactor) *
                (1 + [self ReturnVUVentureIncomeInstMedian:@""]) + VUVentureIncomePrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVentureIncomeInstMedian:@"A"]) -
                ([self ReturnRegWithdrawal:aaPolicyYear] * 0);
                VUVentureIncomeValueMedian = currentValue;
            }
            else{
                currentValue = VUVentureIncomeValueMedian;
            }
        }
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear < 60) {
                CashFactor = 0.00;
            }
            else if(Age + aaPolicyYear == 60){
                CashFactor = 1.00;
            }
            else{
                CashFactor = 12 * (1 + [self ReturnVUVentureIncomeInstMedian:@"M"])/(pow((1 + [self ReturnVUVentureIncomeInstMedian:@"A"]), (1.00/12.00)));
            }
        }
        
        if (aaRound == 2) {
            VUVentureIncomePrevValueMedian = currentValue + VUVentureIncomeValue_EverCash1 + VUVentureIncomeValue_EverCash6 + (VUVentureIncomeValue_EverCash60 * CashFactor);
        }
        return currentValue + VUVentureIncomeValue_EverCash1 + VUVentureIncomeValue_EverCash6 + (VUVentureIncomeValue_EverCash60 * CashFactor);
    }
    
}


-(double)ReturnVUVentureIncomeValueLow :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andRound:(NSInteger)aaRound andMonth:(int)i{
    
    double currentValue;
    
    
    if ([aaYearOrMonth isEqualToString:@"M"]) {
        
        
        if (i == 1) {
            MonthVUVentureIncomePrevValueLow = VUVentureIncomePrevValueLow ;
        }
        
        double tempPrev = MonthVUVentureIncomePrevValueLow;
        if ((i == MonthDiff2035 + 1 && aaPolicyYear == YearDiff2035)  ) {
            MonthVUVentureIncomePrevValueLow = MonthVUVentureIncomePrevValueLow + (temp2035Low * Fund2035ReinvestToVentureIncomeFac/100.00);
        }
        else if(i == MonthDiff2030 + 1 && aaPolicyYear == YearDiff2030){
            MonthVUVentureIncomePrevValueLow = MonthVUVentureIncomePrevValueLow + (temp2030Low * Fund2030ReinvestToVentureIncomeFac/100.00);
        }
        else if(i == MonthDiff2028 + 1 && aaPolicyYear == YearDiff2028){
            MonthVUVentureIncomePrevValueLow = MonthVUVentureIncomePrevValueLow + (temp2028Low * Fund2028ReinvestToVentureIncomeFac/100.00);
        }
        else if(i == MonthDiff2025 + 1 && aaPolicyYear == YearDiff2025){
            MonthVUVentureIncomePrevValueLow = MonthVUVentureIncomePrevValueLow + (temp2025Low * Fund2025ReinvestToVentureIncomeFac/100.00);
        }
        else if(i == MonthDiff2023 + 1 && aaPolicyYear == YearDiff2023){
            MonthVUVentureIncomePrevValueLow = MonthVUVentureIncomePrevValueLow + (temp2023Low * Fund2023ReinvestToVentureIncomeFac/100.00);
        }
        else{
            
        }
        
        if (VUCashValueNegative == TRUE && MonthFundValueOfTheYearValueTotalLow != 0 ) {
            currentValue= ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVentureIncomeFac:aaPolicyYear  andMonth:i] * CYFactor +
                           [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnPremiumFactor:i] * [self ReturnVUVentureIncomeFac:aaPolicyYear  andMonth:i] * CYFactor +
                           [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnPremiumFactor:i]  * [self ReturnVUVentureIncomeFac:aaPolicyYear  andMonth:i] * CYFactor) *
            pow(1 + [self ReturnVUVentureIncomeInstLow:@"A"], 1.00/12.00) + MonthVUVentureIncomePrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
            pow(1 + [self ReturnVUVentureIncomeInstLow:@"A"], 1.00/12.00) - ([self ReturnRegWithdrawal:aaPolicyYear] * 0) + (NegativeValueOfMaxCashFundLow - 1) *
            MAX(0,(MonthFundValueOfTheYearVUVentureIncomeValueLow_Basic/MonthFundValueOfTheYearValueTotalLow));
            
        }
        else{
            currentValue = ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVentureIncomeFac:aaPolicyYear  andMonth:i] * CYFactor +
                            [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnPremiumFactor:i] * [self ReturnVUVentureIncomeFac:aaPolicyYear  andMonth:i] * CYFactor +
                            [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnPremiumFactor:i] * [self ReturnVUVentureIncomeFac:aaPolicyYear  andMonth:i] * CYFactor) *
            pow(1 + [self ReturnVUVentureIncomeInstLow:@"A"], 1.00/12.00) + MonthVUVentureIncomePrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
            pow(1 + [self ReturnVUVentureIncomeInstLow:@"A"], 1.00/12.00) - ([self ReturnRegWithdrawal:aaPolicyYear] * 0);
            
        }
        
        double EverCashValue =  VUVentureIncomeValue_EverCash1 * [self EverCash1_CashPaymentFactor:aaPolicyYear andMonth:i] +
        VUVentureIncomeValue_EverCash6 * [self EverCash6_CashPaymentFactor:aaPolicyYear andMonth:i]  +
        VUVentureIncomeValue_EverCash60;
        
        if (aaRound == 2) {
            MonthVUVentureIncomePrevValueLow = currentValue + EverCashValue;
        }
        else{
            MonthVUVentureIncomePrevValueLow = tempPrev;
        }
        
        
        
        if (i == 12  && aaRound == 2) {
            VUVentureIncomePrevValueLow = MonthVUVentureIncomePrevValueLow;
            
            if(MonthDiff2035 == 12 && aaPolicyYear == YearDiff2035){ //the reinvestment fund from 2035 will be bring forward to next year
                VUVentureIncomePrevValueLow = VUVentureIncomePrevValueLow +  (temp2035Low * Fund2035ReinvestToVentureIncomeFac/100.00);
            }
            else if(MonthDiff2030 == 12 && aaPolicyYear == YearDiff2030){ //the reinvestment fund from 2030 will be bring forward to next year
                VUVentureIncomePrevValueLow = VUVentureIncomePrevValueLow +  (temp2030Low * Fund2030ReinvestToVentureIncomeFac/100.00);
            }
            else if(MonthDiff2028 == 12 && aaPolicyYear == YearDiff2028){ //the reinvestment fund from 2028 will be bring forward to next year
                VUVentureIncomePrevValueLow = VUVentureIncomePrevValueLow +  (temp2028Low * Fund2028ReinvestToVentureIncomeFac/100.00);
            }
            else if(MonthDiff2025 == 12 && aaPolicyYear == YearDiff2025){ //the reinvestment fund from 2025 will be bring forward to next year
                VUVentureIncomePrevValueLow = VUVentureIncomePrevValueLow +  (temp2025Low * Fund2025ReinvestToVentureIncomeFac/100.00);
            }
            
        }
        
        if (i == 12  && aaRound == 2) {
            
            //return currentValue + VUVentureIncomeValue_EverCash1 + VUVentureIncomeValue_EverCash6 + VUVentureIncomeValue_EverCash60;
            
            if(MonthDiff2035 == 12 && aaPolicyYear == YearDiff2035){
                return currentValue + (temp2035Low * Fund2035ReinvestToVentureIncomeFac/100.00) + EverCashValue;
            }
            else if(MonthDiff2030 == 12 && aaPolicyYear == YearDiff2030){
                return currentValue +  (temp2030Low * Fund2030ReinvestToVentureIncomeFac/100.00) + EverCashValue;
            }
            else if(MonthDiff2028 == 12 && aaPolicyYear == YearDiff2028){
                return currentValue + (temp2028Low * Fund2028ReinvestToVentureIncomeFac/100.00) + EverCashValue;
            }
            else if(MonthDiff2025 == 12 && aaPolicyYear == YearDiff2025){
                return currentValue + (temp2025Low * Fund2025ReinvestToVentureIncomeFac/100.00) + EverCashValue;
            }
            else{
                return currentValue + EverCashValue;
            }
        }
        else{
            return currentValue + EverCashValue;
        }
        
    }
    else{
        if (VUCashValueNegative == TRUE && FundValueOfTheYearValueTotalLow != 0 ) {
            currentValue= ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear]) + IncreasePrem) * [self ReturnVUVentureIncomeFac:aaPolicyYear] * CYFactor +
                           [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnVUVentureIncomeFac:aaPolicyYear] * CYFactor +
                           [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnVUVentureIncomeFac:aaPolicyYear] * CYFactor) *
            (1 + [self ReturnVUVentureIncomeInstLow:@""]) + VUVentureIncomePrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVentureIncomeInstLow:@"A"]) -
            ([self ReturnRegWithdrawal:aaPolicyYear] * 0) + (NegativeValueOfMaxCashFundLow - 1) *
            MAX(0,(FundValueOfTheYearVUVentureIncomeValueLow_Basic/FundValueOfTheYearValueTotalLow));
            
            //NSLog(@"");
            
        }
        else{
            if (aaRound == 1) {
                currentValue = ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear]) + IncreasePrem) * [self ReturnVUVentureIncomeFac:aaPolicyYear] * CYFactor +
                                [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnVUVentureIncomeFac:aaPolicyYear] * CYFactor +
                                [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnVUVentureIncomeFac:aaPolicyYear] * CYFactor) *
                (1 + [self ReturnVUVentureIncomeInstLow:@""]) + VUVentureIncomePrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVentureIncomeInstLow:@"A"]) -
                ([self ReturnRegWithdrawal:aaPolicyYear] * 0);
                VUVentureIncomeValueLow = currentValue;
            }
            else{
                currentValue = VUVentureIncomeValueLow;
            }
            
        }
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear < 60) {
                CashFactor = 0.00;
            }
            else if(Age + aaPolicyYear == 60){
                CashFactor = 1.00;
            }
            else{
                CashFactor = 12 * (1 + [self ReturnVUVentureIncomeInstLow:@"M"])/(pow((1 + [self ReturnVUVentureIncomeInstLow:@"A"]), (1.00/12.00)));
            }
        }
        
        if (aaRound == 2) {
            VUVentureIncomePrevValueLow = currentValue + VUVentureIncomeValue_EverCash1 + VUVentureIncomeValue_EverCash6 + (VUVentureIncomeValue_EverCash60 * CashFactor);
        }
        return currentValue + VUVentureIncomeValue_EverCash1 + VUVentureIncomeValue_EverCash6 + (VUVentureIncomeValue_EverCash60 * CashFactor);
    }
    
}

-(double)ReturnVUVenture6666ValueHigh :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andRound:(NSInteger)aaRound andMonth:(NSInteger)i{
    
    double currentValue =0.0;
    if ([aaYearOrMonth isEqualToString:@"M"]) {
        
        
        if (i == 1) {
            MonthVUVenture6666PrevValueHigh = VUVenture6666PrevValueHigh ;
        }
        
        double tempPrev = MonthVUVenture6666PrevValueHigh;
        
        if ((i == MonthDiff2035 + 1 && aaPolicyYear == YearDiff2035)) {
            MonthVUVenture6666PrevValueHigh = MonthVUVenture6666PrevValueHigh + (temp2035High * Fund2035ReinvestToVenture6666Fac/100.00);
        }
        else if(i == MonthDiff2030 + 1 && aaPolicyYear == YearDiff2030){
            MonthVUVenture6666PrevValueHigh = MonthVUVenture6666PrevValueHigh + (temp2030High * Fund2030ReinvestToVenture6666Fac/100.00);
        }
        else if(i == MonthDiff2028 + 1 && aaPolicyYear == YearDiff2028){
            MonthVUVenture6666PrevValueHigh = MonthVUVenture6666PrevValueHigh + (temp2028High * Fund2028ReinvestToVenture6666Fac/100.00);
        }
        else if(i == MonthDiff2025 + 1 && aaPolicyYear == YearDiff2025){
            MonthVUVenture6666PrevValueHigh = MonthVUVenture6666PrevValueHigh + (temp2025High * Fund2025ReinvestToVenture6666Fac/100.00);
        }
        else if(i == MonthDiff2023 + 1 && aaPolicyYear == YearDiff2023){
            MonthVUVenture6666PrevValueHigh = MonthVUVenture6666PrevValueHigh + (temp2023High * Fund2023ReinvestToVenture6666Fac/100.00);
        }
        else{
            
        }
        
        
        
        
        //NSLog(@"%f", MonthVUVenture6666PrevValueHigh);
        if (VUCashValueNegative == TRUE && MonthFundValueOfTheYearValueTotalHigh != 0 ) {
            
            currentValue= ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVenture6666Fac:aaPolicyYear andMonth:i] * CYFactor +
                           [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnPremiumFactor:i] * [self ReturnVUVenture6666Fac:aaPolicyYear andMonth:i] * CYFactor +
                           [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnPremiumFactor:i] * [self ReturnVUVenture6666Fac:aaPolicyYear andMonth:i] * CYFactor) *
            pow(1 + [self ReturnVUVenture6666InstHigh:aaPolicyYear andMOP:@"A"],1.00/12.00) + MonthVUVenture6666PrevValueHigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
            pow(1 + [self ReturnVUVenture6666InstHigh:aaPolicyYear andMOP:@"A"], 1.00/12.00) -
            ([self ReturnRegWithdrawal:aaPolicyYear] * 0) + (NegativeValueOfMaxCashFundHigh - 1) *
            MAX(0,(MonthFundValueOfTheYearVUVenture6666ValueHigh_Basic/MonthFundValueOfTheYearValueTotalHigh));
            
            //NSLog(@"%f %f %f",NegativeValueOfMaxCashFundHigh, MonthVUVenture6666ValueHigh,MonthFundValueOfTheYearValueTotalHigh );
            
        }
        else{
            
            currentValue = ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVenture6666Fac:aaPolicyYear  andMonth:i] * CYFactor +
                            [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnPremiumFactor:i] * [self ReturnVUVenture6666Fac:aaPolicyYear andMonth:i] * CYFactor +
                            [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnPremiumFactor:i] * [self ReturnVUVenture6666Fac:aaPolicyYear andMonth:i] * CYFactor) *
            pow((1 + [self ReturnVUVenture6666InstHigh:aaPolicyYear andMOP:@"A"]),(1.00/12.00)) + MonthVUVenture6666PrevValueHigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
            pow((1 + [self ReturnVUVenture6666InstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00)) -
            ([self ReturnRegWithdrawal:aaPolicyYear] * 0);
            
            
        }
        
        //NSLog(@"%f, %f, %f, %f",NegativeValueOfMaxCashFundHigh, MonthVUVenture6666ValueHigh, MonthFundValueOfTheYearValueTotalHigh, currentValue);
        
        [self ReturnMonthEverCash60:aaPolicyYear andMonth:i];
        
        double EverCashValue = VUVenture6666Value_EverCash1 * [self EverCash1_CashPaymentFactor:aaPolicyYear andMonth:i] +
        VUVenture6666Value_EverCash6 * [self EverCash6_CashPaymentFactor:aaPolicyYear andMonth:i]
        + VUVenture6666Value_EverCash60;
        
        if (aaRound == 2) {
            MonthVUVenture6666PrevValueHigh = currentValue + EverCashValue;
        }
        else{
            MonthVUVenture6666PrevValueHigh = tempPrev;
        }
        
        
        
        if (i == 12  && aaRound == 2) {
            VUVenture6666PrevValueHigh = MonthVUVenture6666PrevValueHigh;
            
            if(MonthDiff2035 == 12 && aaPolicyYear == YearDiff2035){ //the reinvestment fund from 2035 will be bring forward to next year
                VUVenture6666PrevValueHigh = VUVenture6666PrevValueHigh +  (temp2035High * Fund2035ReinvestToVenture6666Fac/100.00);
            }
            else if(MonthDiff2030 == 12 && aaPolicyYear == YearDiff2030){ //the reinvestment fund from 2030 will be bring forward to next year
                VUVenture6666PrevValueHigh = VUVenture6666PrevValueHigh +  (temp2030High * Fund2030ReinvestToVenture6666Fac/100.00);
            }
            else if(MonthDiff2028 == 12 && aaPolicyYear == YearDiff2028){ //the reinvestment fund from 2028 will be bring forward to next year
                VUVenture6666PrevValueHigh = VUVenture6666PrevValueHigh +  (temp2028High * Fund2028ReinvestToVenture6666Fac/100.00);
            }
            else if(MonthDiff2025 == 12 && aaPolicyYear == YearDiff2025){ //the reinvestment fund from 2025 will be bring forward to next year
                VUVenture6666PrevValueHigh = VUVenture6666PrevValueHigh +  (temp2025High * Fund2025ReinvestToVenture6666Fac/100.00);
            }
        }
        
        //NSLog(@"%d %f %f, %d ", i, MonthVUVenture6666ValueHigh, MonthFundValueOfTheYearValueTotalHigh, VUCashValueNegative);
        //return MonthVUVenture6666PrevValueHigh;
        
        if (i == 12  && aaRound == 2) {
            if(MonthDiff2035 == 12 && aaPolicyYear == YearDiff2035){
                return currentValue + (temp2035High * Fund2035ReinvestToVenture6666Fac/100.00) + EverCashValue;
            }
            else if(MonthDiff2030 == 12 && aaPolicyYear == YearDiff2030){
                return currentValue +  (temp2030High * Fund2030ReinvestToVenture6666Fac/100.00) + EverCashValue;
            }
            else if(MonthDiff2028 == 12 && aaPolicyYear == YearDiff2028){
                return currentValue + (temp2028High * Fund2028ReinvestToVenture6666Fac/100.00) + EverCashValue;
            }
            else if(MonthDiff2025 == 12 && aaPolicyYear == YearDiff2025){
                return currentValue + (temp2025High * Fund2025ReinvestToVenture6666Fac/100.00) + EverCashValue;
            }
            else{
                return currentValue + EverCashValue;
            }
            
            //return currentValue + VUVenture6666Value_EverCash1 + VUVenture6666Value_EverCash6 + VUVenture6666Value_EverCash60;
        }
        else{
            return currentValue + EverCashValue;
            
        }
        
        
        
    }
    else{
        //if (VUCashValueHigh < 0 && [self ReturnFundValueOfTheYearValueTotalHigh:aaPolicyYear] != 0 ) {
        if (VUCashValueNegative == TRUE && FundValueOfTheYearValueTotalHigh != 0 ) {
            currentValue= ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear]) + IncreasePrem) * [self ReturnVUVenture6666Fac:aaPolicyYear] * CYFactor +
                           [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnVUVenture6666Fac:aaPolicyYear] * CYFactor +
                           [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnVUVenture6666Fac:aaPolicyYear] * CYFactor) *
            (1 + [self ReturnVUVenture6666InstHigh:aaPolicyYear andMOP:@""]) + VUVenture6666PrevValueHigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVenture6666InstHigh:aaPolicyYear andMOP:@"A"]) -
            ([self ReturnRegWithdrawal:aaPolicyYear] * 0) + (NegativeValueOfMaxCashFundHigh - 1) *
            MAX(0,(FundValueOfTheYearVUVenture6666ValueHigh_Basic/FundValueOfTheYearValueTotalHigh));
            
        }
        else{
            if (aaRound == 1) {
                currentValue = ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear]) + IncreasePrem) * [self ReturnVUVenture6666Fac:aaPolicyYear] * CYFactor +
                                [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnVUVenture6666Fac:aaPolicyYear] * CYFactor +
                                [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnVUVenture6666Fac:aaPolicyYear] * CYFactor) *
                (1 + [self ReturnVUVenture6666InstHigh:aaPolicyYear andMOP:@""]) + VUVenture6666PrevValueHigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVenture6666InstHigh:aaPolicyYear andMOP:@"A"]) -
                ([self ReturnRegWithdrawal:aaPolicyYear] * 0);
                VUVenture6666ValueHigh = currentValue;
            }
            else{
                currentValue = VUVenture6666ValueHigh;
            }
            
        }
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear < 60) {
                CashFactor = 0.00;
            }
            else if(Age + aaPolicyYear == 60){
                CashFactor = 1.00;
                
            }
            else{
                
                CashFactor = 12 * (1 + [self ReturnVUVenture6666InstHigh:aaPolicyYear andMOP:@"M"])/(pow((1 + [self ReturnVUVenture6666InstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00)));
            }
        }
        
        if (aaRound == 2) {
            VUVenture6666PrevValueHigh = currentValue + VUVenture6666Value_EverCash1 + VUVenture6666Value_EverCash6 + (VUVenture6666Value_EverCash60 * CashFactor);
        }
        
        
        return currentValue + VUVenture6666Value_EverCash1 + VUVenture6666Value_EverCash6 + (VUVenture6666Value_EverCash60 * CashFactor);
    }
    
    
}


-(double)ReturnVUVenture6666ValueMedian :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andRound:(NSInteger)aaRound andMonth:(int)i{
    
    double currentValue;
    
    if ([aaYearOrMonth isEqualToString:@"M"]) {
        
        
        if (i == 1) {
            MonthVUVenture6666PrevValueMedian = VUVenture6666PrevValueMedian ;
        }
        
        double tempPrev = MonthVUVenture6666PrevValueMedian;
        if ((i == MonthDiff2035 + 1 && aaPolicyYear == YearDiff2035)  ) {
            MonthVUVenture6666PrevValueMedian = MonthVUVenture6666PrevValueMedian + (temp2035Median * Fund2035ReinvestToVenture6666Fac/100.00);
        }
        else if(i == MonthDiff2030 + 1 && aaPolicyYear == YearDiff2030){
            MonthVUVenture6666PrevValueMedian = MonthVUVenture6666PrevValueMedian + (temp2030Median * Fund2030ReinvestToVenture6666Fac/100.00);
        }
        else if(i == MonthDiff2028 + 1 && aaPolicyYear == YearDiff2028){
            MonthVUVenture6666PrevValueMedian = MonthVUVenture6666PrevValueMedian + (temp2028Median * Fund2028ReinvestToVenture6666Fac/100.00);
        }
        else if(i == MonthDiff2025 + 1 && aaPolicyYear == YearDiff2025){
            MonthVUVenture6666PrevValueMedian = MonthVUVenture6666PrevValueMedian + (temp2025Median * Fund2025ReinvestToVenture6666Fac/100.00);
        }
        else if(i == MonthDiff2023 + 1 && aaPolicyYear == YearDiff2023){
            MonthVUVenture6666PrevValueMedian = MonthVUVenture6666PrevValueMedian + (temp2023Median * Fund2023ReinvestToVenture6666Fac/100.00);
        }
        else{
            
        }
        
        if (VUCashValueNegative == TRUE && MonthFundValueOfTheYearValueTotalMedian != 0 ) {
            currentValue= ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVenture6666Fac:aaPolicyYear  andMonth:i] * CYFactor +
                           [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnPremiumFactor:i] * [self ReturnVUVenture6666Fac:aaPolicyYear  andMonth:i] * CYFactor +
                           [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnPremiumFactor:i] * [self ReturnVUVenture6666Fac:aaPolicyYear  andMonth:i] * CYFactor) *
            pow(1 + [self ReturnVUVenture6666InstMedian:@"A"], 1.00/12.00) + MonthVUVenture6666PrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
            pow(1 + [self ReturnVUVenture6666InstMedian:@"A"], 1.00/12.00) - ([self ReturnRegWithdrawal:aaPolicyYear] * 0) + (NegativeValueOfMaxCashFundMedian - 1) *
            MAX(0,(MonthFundValueOfTheYearVUVenture6666ValueMedian_Basic/MonthFundValueOfTheYearValueTotalMedian));
            
        }
        else{
            currentValue = ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVenture6666Fac:aaPolicyYear  andMonth:i] * CYFactor +
                            [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnPremiumFactor:i] * [self ReturnVUVenture6666Fac:aaPolicyYear  andMonth:i] * CYFactor +
                            [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnPremiumFactor:i] * [self ReturnVUVenture6666Fac:aaPolicyYear  andMonth:i] * CYFactor) *
            pow(1 + [self ReturnVUVenture6666InstMedian:@"A"], 1.00/12.00) + MonthVUVenture6666PrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
            pow(1 + [self ReturnVUVenture6666InstMedian:@"A"], 1.00/12.00) - ([self ReturnRegWithdrawal:aaPolicyYear] * 0);
            
        }
        
        double EverCashValue = VUVenture6666Value_EverCash1 * [self EverCash1_CashPaymentFactor:aaPolicyYear andMonth:i] +
        VUVenture6666Value_EverCash6 * [self EverCash6_CashPaymentFactor:aaPolicyYear andMonth:i] +
        VUVenture6666Value_EverCash60;
        
        if (aaRound == 2) {
            MonthVUVenture6666PrevValueMedian = currentValue + EverCashValue;
        }
        else{
            MonthVUVenture6666PrevValueMedian = tempPrev;
        }
        
        
        
        if (i == 12  && aaRound == 2) {
            VUVenture6666PrevValueMedian = MonthVUVenture6666PrevValueMedian;
            
            if(MonthDiff2035 == 12 && aaPolicyYear == YearDiff2035){ //the reinvestment fund from 2035 will be bring forward to next year
                VUVenture6666PrevValueMedian = VUVenture6666PrevValueMedian +  (temp2035Median * Fund2035ReinvestToVenture6666Fac/100.00);
            }
            else if(MonthDiff2030 == 12 && aaPolicyYear == YearDiff2030){ //the reinvestment fund from 2030 will be bring forward to next year
                VUVenture6666PrevValueMedian = VUVenture6666PrevValueMedian +  (temp2030Median * Fund2030ReinvestToVenture6666Fac/100.00);
            }
            else if(MonthDiff2028 == 12 && aaPolicyYear == YearDiff2028){ //the reinvestment fund from 2028 will be bring forward to next year
                VUVenture6666PrevValueMedian = VUVenture6666PrevValueMedian +  (temp2028Median * Fund2028ReinvestToVenture6666Fac/100.00);
            }
            else if(MonthDiff2025 == 12 && aaPolicyYear == YearDiff2025){ //the reinvestment fund from 2025 will be bring forward to next year
                VUVenture6666PrevValueMedian = VUVenture6666PrevValueMedian +  (temp2025Median * Fund2025ReinvestToVenture6666Fac/100.00);
            }
        }
        
        if (i == 12  && aaRound == 2) {
            
            //return currentValue + VUVenture6666Value_EverCash1 + VUVenture6666Value_EverCash6 + VUVenture6666Value_EverCash60;
            
            if(MonthDiff2035 == 12 && aaPolicyYear == YearDiff2035){
                return currentValue + (temp2035Median * Fund2035ReinvestToVenture6666Fac/100.00) + EverCashValue;
            }
            else if(MonthDiff2030 == 12 && aaPolicyYear == YearDiff2030){
                return currentValue +  (temp2030Median * Fund2030ReinvestToVenture6666Fac/100.00) + EverCashValue;
            }
            else if(MonthDiff2028 == 12 && aaPolicyYear == YearDiff2028){
                return currentValue + (temp2028Median * Fund2028ReinvestToVenture6666Fac/100.00) + EverCashValue;
            }
            else if(MonthDiff2025 == 12 && aaPolicyYear == YearDiff2025){
                return currentValue + (temp2025Median * Fund2025ReinvestToVenture6666Fac/100.00) + EverCashValue;
            }
            else{
                return currentValue + EverCashValue;
            }
        }
        else
        {
            return currentValue + EverCashValue;
        }
        
        
    }
    else{
        //if (VUCashValueMedian < 0 && [self ReturnFundValueOfTheYearValueTotalMedian:aaPolicyYear] != 0 ) {
        if (VUCashValueNegative == TRUE && FundValueOfTheYearValueTotalMedian != 0 ) {
            currentValue= ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear]) + IncreasePrem) * [self ReturnVUVenture6666Fac:aaPolicyYear] * CYFactor +
                           [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * [self ReturnDivideMode] * RegularAllo * [self ReturnVUVenture6666Fac:aaPolicyYear] * CYFactor +
                           [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnVUVenture6666Fac:aaPolicyYear] * CYFactor) *
            (1 + [self ReturnVUVenture6666InstMedian:@""]) + VUVenture6666PrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVenture6666InstMedian:@"A"]) -
            ([self ReturnRegWithdrawal:aaPolicyYear] * 0) + (NegativeValueOfMaxCashFundMedian - 1) *
            MAX(0,(FundValueOfTheYearVUVenture6666ValueMedian_Basic/FundValueOfTheYearValueTotalMedian));
            
        }
        else{
            if (aaRound == 1) {
                currentValue = ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear]) + IncreasePrem) * [self ReturnVUVenture6666Fac:aaPolicyYear] * CYFactor +
                                [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * [self ReturnDivideMode] * RegularAllo * [self ReturnVUVenture6666Fac:aaPolicyYear] * CYFactor +
                                [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnVUVenture6666Fac:aaPolicyYear] * CYFactor) *
                (1 + [self ReturnVUVenture6666InstMedian:@""]) + VUVenture6666PrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVenture6666InstMedian:@"A"]) -
                ([self ReturnRegWithdrawal:aaPolicyYear] * 0);
                VUVenture6666ValueMedian = currentValue;
            }
            else{
                currentValue = VUVenture6666ValueMedian;
            }
        }
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear < 60) {
                CashFactor = 0.00;
            }
            else if(Age + aaPolicyYear == 60){
                CashFactor = 1.00;
            }
            else{
                CashFactor = 12 * (1 + [self ReturnVUVenture6666InstMedian:@"M"])/(pow((1 + [self ReturnVUVenture6666InstMedian:@"A"]), (1.00/12.00)));
            }
        }
        
        if (aaRound == 2) {
            VUVenture6666PrevValueMedian = currentValue + VUVenture6666Value_EverCash1 + VUVenture6666Value_EverCash6 + (VUVenture6666Value_EverCash60 * CashFactor);
        }
        return currentValue + VUVenture6666Value_EverCash1 + VUVenture6666Value_EverCash6 + (VUVenture6666Value_EverCash60 * CashFactor);
    }
    
}


-(double)ReturnVUVenture6666ValueLow :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andRound:(NSInteger)aaRound andMonth:(int)i{
    
    double currentValue;
    
    
    if ([aaYearOrMonth isEqualToString:@"M"]) {
        
        
        if (i == 1) {
            MonthVUVenture6666PrevValueLow = VUVenture6666PrevValueLow ;
        }
        
        double tempPrev = MonthVUVenture6666PrevValueLow;
        if ((i == MonthDiff2035 + 1 && aaPolicyYear == YearDiff2035)  ) {
            MonthVUVenture6666PrevValueLow = MonthVUVenture6666PrevValueLow + (temp2035Low * Fund2035ReinvestToVenture6666Fac/100.00);
        }
        else if(i == MonthDiff2030 + 1 && aaPolicyYear == YearDiff2030){
            MonthVUVenture6666PrevValueLow = MonthVUVenture6666PrevValueLow + (temp2030Low * Fund2030ReinvestToVenture6666Fac/100.00);
        }
        else if(i == MonthDiff2028 + 1 && aaPolicyYear == YearDiff2028){
            MonthVUVenture6666PrevValueLow = MonthVUVenture6666PrevValueLow + (temp2028Low * Fund2028ReinvestToVenture6666Fac/100.00);
        }
        else if(i == MonthDiff2025 + 1 && aaPolicyYear == YearDiff2025){
            MonthVUVenture6666PrevValueLow = MonthVUVenture6666PrevValueLow + (temp2025Low * Fund2025ReinvestToVenture6666Fac/100.00);
        }
        else if(i == MonthDiff2023 + 1 && aaPolicyYear == YearDiff2023){
            MonthVUVenture6666PrevValueLow = MonthVUVenture6666PrevValueLow + (temp2023Low * Fund2023ReinvestToVenture6666Fac/100.00);
        }
        else{
            
        }
        
        if (VUCashValueNegative == TRUE && MonthFundValueOfTheYearValueTotalLow != 0 ) {
            currentValue= ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVenture6666Fac:aaPolicyYear  andMonth:i] * CYFactor +
                           [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnPremiumFactor:i] * [self ReturnVUVenture6666Fac:aaPolicyYear  andMonth:i] * CYFactor +
                           [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnPremiumFactor:i]  * [self ReturnVUVenture6666Fac:aaPolicyYear  andMonth:i] * CYFactor) *
            pow(1 + [self ReturnVUVenture6666InstLow:@"A"], 1.00/12.00) + MonthVUVenture6666PrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
            pow(1 + [self ReturnVUVenture6666InstLow:@"A"], 1.00/12.00) - ([self ReturnRegWithdrawal:aaPolicyYear] * 0) + (NegativeValueOfMaxCashFundLow - 1) *
            MAX(0,(MonthFundValueOfTheYearVUVenture6666ValueLow_Basic/MonthFundValueOfTheYearValueTotalLow));
            
        }
        else{
            currentValue = ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVenture6666Fac:aaPolicyYear  andMonth:i] * CYFactor +
                            [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnPremiumFactor:i] * [self ReturnVUVenture6666Fac:aaPolicyYear  andMonth:i] * CYFactor +
                            [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnPremiumFactor:i] * [self ReturnVUVenture6666Fac:aaPolicyYear  andMonth:i] * CYFactor) *
            pow(1 + [self ReturnVUVenture6666InstLow:@"A"], 1.00/12.00) + MonthVUVenture6666PrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
            pow(1 + [self ReturnVUVenture6666InstLow:@"A"], 1.00/12.00) - ([self ReturnRegWithdrawal:aaPolicyYear] * 0);
            
        }
        
        double EverCashValue =  VUVenture6666Value_EverCash1 * [self EverCash1_CashPaymentFactor:aaPolicyYear andMonth:i] +
        VUVenture6666Value_EverCash6 * [self EverCash6_CashPaymentFactor:aaPolicyYear andMonth:i]  +
        VUVenture6666Value_EverCash60;
        
        if (aaRound == 2) {
            MonthVUVenture6666PrevValueLow = currentValue + EverCashValue;
        }
        else{
            MonthVUVenture6666PrevValueLow = tempPrev;
        }
        
        
        
        if (i == 12  && aaRound == 2) {
            VUVenture6666PrevValueLow = MonthVUVenture6666PrevValueLow;
            
            if(MonthDiff2035 == 12 && aaPolicyYear == YearDiff2035){ //the reinvestment fund from 2035 will be bring forward to next year
                VUVenture6666PrevValueLow = VUVenture6666PrevValueLow +  (temp2035Low * Fund2035ReinvestToVenture6666Fac/100.00);
            }
            else if(MonthDiff2030 == 12 && aaPolicyYear == YearDiff2030){ //the reinvestment fund from 2030 will be bring forward to next year
                VUVenture6666PrevValueLow = VUVenture6666PrevValueLow +  (temp2030Low * Fund2030ReinvestToVenture6666Fac/100.00);
            }
            else if(MonthDiff2028 == 12 && aaPolicyYear == YearDiff2028){ //the reinvestment fund from 2028 will be bring forward to next year
                VUVenture6666PrevValueLow = VUVenture6666PrevValueLow +  (temp2028Low * Fund2028ReinvestToVenture6666Fac/100.00);
            }
            else if(MonthDiff2025 == 12 && aaPolicyYear == YearDiff2025){ //the reinvestment fund from 2025 will be bring forward to next year
                VUVenture6666PrevValueLow = VUVenture6666PrevValueLow +  (temp2025Low * Fund2025ReinvestToVenture6666Fac/100.00);
            }
            
        }
        
        if (i == 12  && aaRound == 2) {
            
            //return currentValue + VUVenture6666Value_EverCash1 + VUVenture6666Value_EverCash6 + VUVenture6666Value_EverCash60;
            
            if(MonthDiff2035 == 12 && aaPolicyYear == YearDiff2035){
                return currentValue + (temp2035Low * Fund2035ReinvestToVenture6666Fac/100.00) + EverCashValue;
            }
            else if(MonthDiff2030 == 12 && aaPolicyYear == YearDiff2030){
                return currentValue +  (temp2030Low * Fund2030ReinvestToVenture6666Fac/100.00) + EverCashValue;
            }
            else if(MonthDiff2028 == 12 && aaPolicyYear == YearDiff2028){
                return currentValue + (temp2028Low * Fund2028ReinvestToVenture6666Fac/100.00) + EverCashValue;
            }
            else if(MonthDiff2025 == 12 && aaPolicyYear == YearDiff2025){
                return currentValue + (temp2025Low * Fund2025ReinvestToVenture6666Fac/100.00) + EverCashValue;
            }
            else{
                return currentValue + EverCashValue;
            }
        }
        else{
            return currentValue + EverCashValue;
        }
        
    }
    else{
        if (VUCashValueNegative == TRUE && FundValueOfTheYearValueTotalLow != 0 ) {
            currentValue= ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear]) + IncreasePrem) * [self ReturnVUVenture6666Fac:aaPolicyYear] * CYFactor +
                           [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnVUVenture6666Fac:aaPolicyYear] * CYFactor +
                           [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnVUVenture6666Fac:aaPolicyYear] * CYFactor) *
            (1 + [self ReturnVUVenture6666InstLow:@""]) + VUVenture6666PrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVenture6666InstLow:@"A"]) -
            ([self ReturnRegWithdrawal:aaPolicyYear] * 0) + (NegativeValueOfMaxCashFundLow - 1) *
            MAX(0,(FundValueOfTheYearVUVenture6666ValueLow_Basic/FundValueOfTheYearValueTotalLow));
            
            //NSLog(@"");
            
        }
        else{
            if (aaRound == 1) {
                currentValue = ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear]) + IncreasePrem) * [self ReturnVUVenture6666Fac:aaPolicyYear] * CYFactor +
                                [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnVUVenture6666Fac:aaPolicyYear] * CYFactor +
                                [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnVUVenture6666Fac:aaPolicyYear] * CYFactor) *
                (1 + [self ReturnVUVenture6666InstLow:@""]) + VUVenture6666PrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVenture6666InstLow:@"A"]) -
                ([self ReturnRegWithdrawal:aaPolicyYear] * 0);
                VUVenture6666ValueLow = currentValue;
            }
            else{
                currentValue = VUVenture6666ValueLow;
            }
            
        }
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear < 60) {
                CashFactor = 0.00;
            }
            else if(Age + aaPolicyYear == 60){
                CashFactor = 1.00;
            }
            else{
                CashFactor = 12 * (1 + [self ReturnVUVenture6666InstLow:@"M"])/(pow((1 + [self ReturnVUVenture6666InstLow:@"A"]), (1.00/12.00)));
            }
        }
        
        if (aaRound == 2) {
            VUVenture6666PrevValueLow = currentValue + VUVenture6666Value_EverCash1 + VUVenture6666Value_EverCash6 + (VUVenture6666Value_EverCash60 * CashFactor);
        }
        return currentValue + VUVenture6666Value_EverCash1 + VUVenture6666Value_EverCash6 + (VUVenture6666Value_EverCash60 * CashFactor);
    }
    
}

-(double)ReturnVUVenture7777ValueHigh :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andRound:(NSInteger)aaRound andMonth:(NSInteger)i{
    
    double currentValue =0.0;
    if ([aaYearOrMonth isEqualToString:@"M"]) {
        
        
        if (i == 1) {
            MonthVUVenture7777PrevValueHigh = VUVenture7777PrevValueHigh ;
        }
        
        double tempPrev = MonthVUVenture7777PrevValueHigh;
        
        if ((i == MonthDiff2035 + 1 && aaPolicyYear == YearDiff2035)) {
            MonthVUVenture7777PrevValueHigh = MonthVUVenture7777PrevValueHigh + (temp2035High * Fund2035ReinvestToVenture7777Fac/100.00);
        }
        else if(i == MonthDiff2030 + 1 && aaPolicyYear == YearDiff2030){
            MonthVUVenture7777PrevValueHigh = MonthVUVenture7777PrevValueHigh + (temp2030High * Fund2030ReinvestToVenture7777Fac/100.00);
        }
        else if(i == MonthDiff2028 + 1 && aaPolicyYear == YearDiff2028){
            MonthVUVenture7777PrevValueHigh = MonthVUVenture7777PrevValueHigh + (temp2028High * Fund2028ReinvestToVenture7777Fac/100.00);
        }
        else if(i == MonthDiff2025 + 1 && aaPolicyYear == YearDiff2025){
            MonthVUVenture7777PrevValueHigh = MonthVUVenture7777PrevValueHigh + (temp2025High * Fund2025ReinvestToVenture7777Fac/100.00);
        }
        else if(i == MonthDiff2023 + 1 && aaPolicyYear == YearDiff2023){
            MonthVUVenture7777PrevValueHigh = MonthVUVenture7777PrevValueHigh + (temp2023High * Fund2023ReinvestToVenture7777Fac/100.00);
        }
        else{
            
        }
        
        
        
        
        //NSLog(@"%f", MonthVUVenture7777PrevValueHigh);
        if (VUCashValueNegative == TRUE && MonthFundValueOfTheYearValueTotalHigh != 0 ) {
            
            currentValue= ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVenture7777Fac:aaPolicyYear andMonth:i] * CYFactor +
                           [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnPremiumFactor:i] * [self ReturnVUVenture7777Fac:aaPolicyYear andMonth:i] * CYFactor +
                           [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnPremiumFactor:i] * [self ReturnVUVenture7777Fac:aaPolicyYear andMonth:i] * CYFactor) *
            pow(1 + [self ReturnVUVenture7777InstHigh:aaPolicyYear andMOP:@"A"],1.00/12.00) + MonthVUVenture7777PrevValueHigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
            pow(1 + [self ReturnVUVenture7777InstHigh:aaPolicyYear andMOP:@"A"], 1.00/12.00) -
            ([self ReturnRegWithdrawal:aaPolicyYear] * 0) + (NegativeValueOfMaxCashFundHigh - 1) *
            MAX(0,(MonthFundValueOfTheYearVUVenture7777ValueHigh_Basic/MonthFundValueOfTheYearValueTotalHigh));
            
            //NSLog(@"%f %f %f",NegativeValueOfMaxCashFundHigh, MonthVUVenture7777ValueHigh,MonthFundValueOfTheYearValueTotalHigh );
            
        }
        else{
            
            currentValue = ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVenture7777Fac:aaPolicyYear  andMonth:i] * CYFactor +
                            [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnPremiumFactor:i] * [self ReturnVUVenture7777Fac:aaPolicyYear andMonth:i] * CYFactor +
                            [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnPremiumFactor:i] * [self ReturnVUVenture7777Fac:aaPolicyYear andMonth:i] * CYFactor) *
            pow((1 + [self ReturnVUVenture7777InstHigh:aaPolicyYear andMOP:@"A"]),(1.00/12.00)) + MonthVUVenture7777PrevValueHigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
            pow((1 + [self ReturnVUVenture7777InstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00)) -
            ([self ReturnRegWithdrawal:aaPolicyYear] * 0);
            
            
        }
        
        //NSLog(@"%f, %f, %f, %f",NegativeValueOfMaxCashFundHigh, MonthVUVenture7777ValueHigh, MonthFundValueOfTheYearValueTotalHigh, currentValue);
        
        [self ReturnMonthEverCash60:aaPolicyYear andMonth:i];
        
        double EverCashValue = VUVenture7777Value_EverCash1 * [self EverCash1_CashPaymentFactor:aaPolicyYear andMonth:i] +
        VUVenture7777Value_EverCash6 * [self EverCash6_CashPaymentFactor:aaPolicyYear andMonth:i]
        + VUVenture7777Value_EverCash60;
        
        if (aaRound == 2) {
            MonthVUVenture7777PrevValueHigh = currentValue + EverCashValue;
        }
        else{
            MonthVUVenture7777PrevValueHigh = tempPrev;
        }
        
        
        
        if (i == 12  && aaRound == 2) {
            VUVenture7777PrevValueHigh = MonthVUVenture7777PrevValueHigh;
            
            if(MonthDiff2035 == 12 && aaPolicyYear == YearDiff2035){ //the reinvestment fund from 2035 will be bring forward to next year
                VUVenture7777PrevValueHigh = VUVenture7777PrevValueHigh +  (temp2035High * Fund2035ReinvestToVenture7777Fac/100.00);
            }
            else if(MonthDiff2030 == 12 && aaPolicyYear == YearDiff2030){ //the reinvestment fund from 2030 will be bring forward to next year
                VUVenture7777PrevValueHigh = VUVenture7777PrevValueHigh +  (temp2030High * Fund2030ReinvestToVenture7777Fac/100.00);
            }
            else if(MonthDiff2028 == 12 && aaPolicyYear == YearDiff2028){ //the reinvestment fund from 2028 will be bring forward to next year
                VUVenture7777PrevValueHigh = VUVenture7777PrevValueHigh +  (temp2028High * Fund2028ReinvestToVenture7777Fac/100.00);
            }
            else if(MonthDiff2025 == 12 && aaPolicyYear == YearDiff2025){ //the reinvestment fund from 2025 will be bring forward to next year
                VUVenture7777PrevValueHigh = VUVenture7777PrevValueHigh +  (temp2025High * Fund2025ReinvestToVenture7777Fac/100.00);
            }
        }
        
        //NSLog(@"%d %f %f, %d ", i, MonthVUVenture7777ValueHigh, MonthFundValueOfTheYearValueTotalHigh, VUCashValueNegative);
        //return MonthVUVenture7777PrevValueHigh;
        
        if (i == 12  && aaRound == 2) {
            if(MonthDiff2035 == 12 && aaPolicyYear == YearDiff2035){
                return currentValue + (temp2035High * Fund2035ReinvestToVenture7777Fac/100.00) + EverCashValue;
            }
            else if(MonthDiff2030 == 12 && aaPolicyYear == YearDiff2030){
                return currentValue +  (temp2030High * Fund2030ReinvestToVenture7777Fac/100.00) + EverCashValue;
            }
            else if(MonthDiff2028 == 12 && aaPolicyYear == YearDiff2028){
                return currentValue + (temp2028High * Fund2028ReinvestToVenture7777Fac/100.00) + EverCashValue;
            }
            else if(MonthDiff2025 == 12 && aaPolicyYear == YearDiff2025){
                return currentValue + (temp2025High * Fund2025ReinvestToVenture7777Fac/100.00) + EverCashValue;
            }
            else{
                return currentValue + EverCashValue;
            }
            
            //return currentValue + VUVenture7777Value_EverCash1 + VUVenture7777Value_EverCash6 + VUVenture7777Value_EverCash60;
        }
        else{
            return currentValue + EverCashValue;
            
        }
        
        
        
    }
    else{
        //if (VUCashValueHigh < 0 && [self ReturnFundValueOfTheYearValueTotalHigh:aaPolicyYear] != 0 ) {
        if (VUCashValueNegative == TRUE && FundValueOfTheYearValueTotalHigh != 0 ) {
            currentValue= ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear]) + IncreasePrem) * [self ReturnVUVenture7777Fac:aaPolicyYear] * CYFactor +
                           [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnVUVenture7777Fac:aaPolicyYear] * CYFactor +
                           [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnVUVenture7777Fac:aaPolicyYear] * CYFactor) *
            (1 + [self ReturnVUVenture7777InstHigh:aaPolicyYear andMOP:@""]) + VUVenture7777PrevValueHigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVenture7777InstHigh:aaPolicyYear andMOP:@"A"]) -
            ([self ReturnRegWithdrawal:aaPolicyYear] * 0) + (NegativeValueOfMaxCashFundHigh - 1) *
            MAX(0,(FundValueOfTheYearVUVenture7777ValueHigh_Basic/FundValueOfTheYearValueTotalHigh));
            
        }
        else{
            if (aaRound == 1) {
                currentValue = ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear]) + IncreasePrem) * [self ReturnVUVenture7777Fac:aaPolicyYear] * CYFactor +
                                [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnVUVenture7777Fac:aaPolicyYear] * CYFactor +
                                [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnVUVenture7777Fac:aaPolicyYear] * CYFactor) *
                (1 + [self ReturnVUVenture7777InstHigh:aaPolicyYear andMOP:@""]) + VUVenture7777PrevValueHigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVenture7777InstHigh:aaPolicyYear andMOP:@"A"]) -
                ([self ReturnRegWithdrawal:aaPolicyYear] * 0);
                VUVenture7777ValueHigh = currentValue;
            }
            else{
                currentValue = VUVenture7777ValueHigh;
            }
            
        }
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear < 60) {
                CashFactor = 0.00;
            }
            else if(Age + aaPolicyYear == 60){
                CashFactor = 1.00;
                
            }
            else{
                
                CashFactor = 12 * (1 + [self ReturnVUVenture7777InstHigh:aaPolicyYear andMOP:@"M"])/(pow((1 + [self ReturnVUVenture7777InstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00)));
            }
        }
        
        if (aaRound == 2) {
            VUVenture7777PrevValueHigh = currentValue + VUVenture7777Value_EverCash1 + VUVenture7777Value_EverCash6 + (VUVenture7777Value_EverCash60 * CashFactor);
        }
        
        
        return currentValue + VUVenture7777Value_EverCash1 + VUVenture7777Value_EverCash6 + (VUVenture7777Value_EverCash60 * CashFactor);
    }
    
    
}


-(double)ReturnVUVenture7777ValueMedian :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andRound:(NSInteger)aaRound andMonth:(int)i{
    
    double currentValue;
    
    if ([aaYearOrMonth isEqualToString:@"M"]) {
        
        
        if (i == 1) {
            MonthVUVenture7777PrevValueMedian = VUVenture7777PrevValueMedian ;
        }
        
        double tempPrev = MonthVUVenture7777PrevValueMedian;
        if ((i == MonthDiff2035 + 1 && aaPolicyYear == YearDiff2035)  ) {
            MonthVUVenture7777PrevValueMedian = MonthVUVenture7777PrevValueMedian + (temp2035Median * Fund2035ReinvestToVenture7777Fac/100.00);
        }
        else if(i == MonthDiff2030 + 1 && aaPolicyYear == YearDiff2030){
            MonthVUVenture7777PrevValueMedian = MonthVUVenture7777PrevValueMedian + (temp2030Median * Fund2030ReinvestToVenture7777Fac/100.00);
        }
        else if(i == MonthDiff2028 + 1 && aaPolicyYear == YearDiff2028){
            MonthVUVenture7777PrevValueMedian = MonthVUVenture7777PrevValueMedian + (temp2028Median * Fund2028ReinvestToVenture7777Fac/100.00);
        }
        else if(i == MonthDiff2025 + 1 && aaPolicyYear == YearDiff2025){
            MonthVUVenture7777PrevValueMedian = MonthVUVenture7777PrevValueMedian + (temp2025Median * Fund2025ReinvestToVenture7777Fac/100.00);
        }
        else if(i == MonthDiff2023 + 1 && aaPolicyYear == YearDiff2023){
            MonthVUVenture7777PrevValueMedian = MonthVUVenture7777PrevValueMedian + (temp2023Median * Fund2023ReinvestToVenture7777Fac/100.00);
        }
        else{
            
        }
        
        if (VUCashValueNegative == TRUE && MonthFundValueOfTheYearValueTotalMedian != 0 ) {
            currentValue= ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVenture7777Fac:aaPolicyYear  andMonth:i] * CYFactor +
                           [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnPremiumFactor:i] * [self ReturnVUVenture7777Fac:aaPolicyYear  andMonth:i] * CYFactor +
                           [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnPremiumFactor:i] * [self ReturnVUVenture7777Fac:aaPolicyYear  andMonth:i] * CYFactor) *
            pow(1 + [self ReturnVUVenture7777InstMedian:@"A"], 1.00/12.00) + MonthVUVenture7777PrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
            pow(1 + [self ReturnVUVenture7777InstMedian:@"A"], 1.00/12.00) - ([self ReturnRegWithdrawal:aaPolicyYear] * 0) + (NegativeValueOfMaxCashFundMedian - 1) *
            MAX(0,(MonthFundValueOfTheYearVUVenture7777ValueMedian_Basic/MonthFundValueOfTheYearValueTotalMedian));
            
        }
        else{
            currentValue = ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVenture7777Fac:aaPolicyYear  andMonth:i] * CYFactor +
                            [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnPremiumFactor:i] * [self ReturnVUVenture7777Fac:aaPolicyYear  andMonth:i] * CYFactor +
                            [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnPremiumFactor:i] * [self ReturnVUVenture7777Fac:aaPolicyYear  andMonth:i] * CYFactor) *
            pow(1 + [self ReturnVUVenture7777InstMedian:@"A"], 1.00/12.00) + MonthVUVenture7777PrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
            pow(1 + [self ReturnVUVenture7777InstMedian:@"A"], 1.00/12.00) - ([self ReturnRegWithdrawal:aaPolicyYear] * 0);
            
        }
        
        double EverCashValue = VUVenture7777Value_EverCash1 * [self EverCash1_CashPaymentFactor:aaPolicyYear andMonth:i] +
        VUVenture7777Value_EverCash6 * [self EverCash6_CashPaymentFactor:aaPolicyYear andMonth:i] +
        VUVenture7777Value_EverCash60;
        
        if (aaRound == 2) {
            MonthVUVenture7777PrevValueMedian = currentValue + EverCashValue;
        }
        else{
            MonthVUVenture7777PrevValueMedian = tempPrev;
        }
        
        
        
        if (i == 12  && aaRound == 2) {
            VUVenture7777PrevValueMedian = MonthVUVenture7777PrevValueMedian;
            
            if(MonthDiff2035 == 12 && aaPolicyYear == YearDiff2035){ //the reinvestment fund from 2035 will be bring forward to next year
                VUVenture7777PrevValueMedian = VUVenture7777PrevValueMedian +  (temp2035Median * Fund2035ReinvestToVenture7777Fac/100.00);
            }
            else if(MonthDiff2030 == 12 && aaPolicyYear == YearDiff2030){ //the reinvestment fund from 2030 will be bring forward to next year
                VUVenture7777PrevValueMedian = VUVenture7777PrevValueMedian +  (temp2030Median * Fund2030ReinvestToVenture7777Fac/100.00);
            }
            else if(MonthDiff2028 == 12 && aaPolicyYear == YearDiff2028){ //the reinvestment fund from 2028 will be bring forward to next year
                VUVenture7777PrevValueMedian = VUVenture7777PrevValueMedian +  (temp2028Median * Fund2028ReinvestToVenture7777Fac/100.00);
            }
            else if(MonthDiff2025 == 12 && aaPolicyYear == YearDiff2025){ //the reinvestment fund from 2025 will be bring forward to next year
                VUVenture7777PrevValueMedian = VUVenture7777PrevValueMedian +  (temp2025Median * Fund2025ReinvestToVenture7777Fac/100.00);
            }
        }
        
        if (i == 12  && aaRound == 2) {
            
            //return currentValue + VUVenture7777Value_EverCash1 + VUVenture7777Value_EverCash6 + VUVenture7777Value_EverCash60;
            
            if(MonthDiff2035 == 12 && aaPolicyYear == YearDiff2035){
                return currentValue + (temp2035Median * Fund2035ReinvestToVenture7777Fac/100.00) + EverCashValue;
            }
            else if(MonthDiff2030 == 12 && aaPolicyYear == YearDiff2030){
                return currentValue +  (temp2030Median * Fund2030ReinvestToVenture7777Fac/100.00) + EverCashValue;
            }
            else if(MonthDiff2028 == 12 && aaPolicyYear == YearDiff2028){
                return currentValue + (temp2028Median * Fund2028ReinvestToVenture7777Fac/100.00) + EverCashValue;
            }
            else if(MonthDiff2025 == 12 && aaPolicyYear == YearDiff2025){
                return currentValue + (temp2025Median * Fund2025ReinvestToVenture7777Fac/100.00) + EverCashValue;
            }
            else{
                return currentValue + EverCashValue;
            }
        }
        else
        {
            return currentValue + EverCashValue;
        }
        
        
    }
    else{
        //if (VUCashValueMedian < 0 && [self ReturnFundValueOfTheYearValueTotalMedian:aaPolicyYear] != 0 ) {
        if (VUCashValueNegative == TRUE && FundValueOfTheYearValueTotalMedian != 0 ) {
            currentValue= ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear]) + IncreasePrem) * [self ReturnVUVenture7777Fac:aaPolicyYear] * CYFactor +
                           [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * [self ReturnDivideMode] * RegularAllo * [self ReturnVUVenture7777Fac:aaPolicyYear] * CYFactor +
                           [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnVUVenture7777Fac:aaPolicyYear] * CYFactor) *
            (1 + [self ReturnVUVenture7777InstMedian:@""]) + VUVenture7777PrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVenture7777InstMedian:@"A"]) -
            ([self ReturnRegWithdrawal:aaPolicyYear] * 0) + (NegativeValueOfMaxCashFundMedian - 1) *
            MAX(0,(FundValueOfTheYearVUVenture7777ValueMedian_Basic/FundValueOfTheYearValueTotalMedian));
            
        }
        else{
            if (aaRound == 1) {
                currentValue = ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear]) + IncreasePrem) * [self ReturnVUVenture7777Fac:aaPolicyYear] * CYFactor +
                                [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * [self ReturnDivideMode] * RegularAllo * [self ReturnVUVenture7777Fac:aaPolicyYear] * CYFactor +
                                [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnVUVenture7777Fac:aaPolicyYear] * CYFactor) *
                (1 + [self ReturnVUVenture7777InstMedian:@""]) + VUVenture7777PrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVenture7777InstMedian:@"A"]) -
                ([self ReturnRegWithdrawal:aaPolicyYear] * 0);
                VUVenture7777ValueMedian = currentValue;
            }
            else{
                currentValue = VUVenture7777ValueMedian;
            }
        }
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear < 60) {
                CashFactor = 0.00;
            }
            else if(Age + aaPolicyYear == 60){
                CashFactor = 1.00;
            }
            else{
                CashFactor = 12 * (1 + [self ReturnVUVenture7777InstMedian:@"M"])/(pow((1 + [self ReturnVUVenture7777InstMedian:@"A"]), (1.00/12.00)));
            }
        }
        
        if (aaRound == 2) {
            VUVenture7777PrevValueMedian = currentValue + VUVenture7777Value_EverCash1 + VUVenture7777Value_EverCash6 + (VUVenture7777Value_EverCash60 * CashFactor);
        }
        return currentValue + VUVenture7777Value_EverCash1 + VUVenture7777Value_EverCash6 + (VUVenture7777Value_EverCash60 * CashFactor);
    }
    
}


-(double)ReturnVUVenture7777ValueLow :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andRound:(NSInteger)aaRound andMonth:(int)i{
    
    double currentValue;
    
    
    if ([aaYearOrMonth isEqualToString:@"M"]) {
        
        
        if (i == 1) {
            MonthVUVenture7777PrevValueLow = VUVenture7777PrevValueLow ;
        }
        
        double tempPrev = MonthVUVenture7777PrevValueLow;
        if ((i == MonthDiff2035 + 1 && aaPolicyYear == YearDiff2035)  ) {
            MonthVUVenture7777PrevValueLow = MonthVUVenture7777PrevValueLow + (temp2035Low * Fund2035ReinvestToVenture7777Fac/100.00);
        }
        else if(i == MonthDiff2030 + 1 && aaPolicyYear == YearDiff2030){
            MonthVUVenture7777PrevValueLow = MonthVUVenture7777PrevValueLow + (temp2030Low * Fund2030ReinvestToVenture7777Fac/100.00);
        }
        else if(i == MonthDiff2028 + 1 && aaPolicyYear == YearDiff2028){
            MonthVUVenture7777PrevValueLow = MonthVUVenture7777PrevValueLow + (temp2028Low * Fund2028ReinvestToVenture7777Fac/100.00);
        }
        else if(i == MonthDiff2025 + 1 && aaPolicyYear == YearDiff2025){
            MonthVUVenture7777PrevValueLow = MonthVUVenture7777PrevValueLow + (temp2025Low * Fund2025ReinvestToVenture7777Fac/100.00);
        }
        else if(i == MonthDiff2023 + 1 && aaPolicyYear == YearDiff2023){
            MonthVUVenture7777PrevValueLow = MonthVUVenture7777PrevValueLow + (temp2023Low * Fund2023ReinvestToVenture7777Fac/100.00);
        }
        else{
            
        }
        
        if (VUCashValueNegative == TRUE && MonthFundValueOfTheYearValueTotalLow != 0 ) {
            currentValue= ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVenture7777Fac:aaPolicyYear  andMonth:i] * CYFactor +
                           [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnPremiumFactor:i] * [self ReturnVUVenture7777Fac:aaPolicyYear  andMonth:i] * CYFactor +
                           [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnPremiumFactor:i]  * [self ReturnVUVenture7777Fac:aaPolicyYear  andMonth:i] * CYFactor) *
            pow(1 + [self ReturnVUVenture7777InstLow:@"A"], 1.00/12.00) + MonthVUVenture7777PrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
            pow(1 + [self ReturnVUVenture7777InstLow:@"A"], 1.00/12.00) - ([self ReturnRegWithdrawal:aaPolicyYear] * 0) + (NegativeValueOfMaxCashFundLow - 1) *
            MAX(0,(MonthFundValueOfTheYearVUVenture7777ValueLow_Basic/MonthFundValueOfTheYearValueTotalLow));
            
        }
        else{
            currentValue = ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVenture7777Fac:aaPolicyYear  andMonth:i] * CYFactor +
                            [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnPremiumFactor:i] * [self ReturnVUVenture7777Fac:aaPolicyYear  andMonth:i] * CYFactor +
                            [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnPremiumFactor:i] * [self ReturnVUVenture7777Fac:aaPolicyYear  andMonth:i] * CYFactor) *
            pow(1 + [self ReturnVUVenture7777InstLow:@"A"], 1.00/12.00) + MonthVUVenture7777PrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
            pow(1 + [self ReturnVUVenture7777InstLow:@"A"], 1.00/12.00) - ([self ReturnRegWithdrawal:aaPolicyYear] * 0);
            
        }
        
        double EverCashValue =  VUVenture7777Value_EverCash1 * [self EverCash1_CashPaymentFactor:aaPolicyYear andMonth:i] +
        VUVenture7777Value_EverCash6 * [self EverCash6_CashPaymentFactor:aaPolicyYear andMonth:i]  +
        VUVenture7777Value_EverCash60;
        
        if (aaRound == 2) {
            MonthVUVenture7777PrevValueLow = currentValue + EverCashValue;
        }
        else{
            MonthVUVenture7777PrevValueLow = tempPrev;
        }
        
        
        
        if (i == 12  && aaRound == 2) {
            VUVenture7777PrevValueLow = MonthVUVenture7777PrevValueLow;
            
            if(MonthDiff2035 == 12 && aaPolicyYear == YearDiff2035){ //the reinvestment fund from 2035 will be bring forward to next year
                VUVenture7777PrevValueLow = VUVenture7777PrevValueLow +  (temp2035Low * Fund2035ReinvestToVenture7777Fac/100.00);
            }
            else if(MonthDiff2030 == 12 && aaPolicyYear == YearDiff2030){ //the reinvestment fund from 2030 will be bring forward to next year
                VUVenture7777PrevValueLow = VUVenture7777PrevValueLow +  (temp2030Low * Fund2030ReinvestToVenture7777Fac/100.00);
            }
            else if(MonthDiff2028 == 12 && aaPolicyYear == YearDiff2028){ //the reinvestment fund from 2028 will be bring forward to next year
                VUVenture7777PrevValueLow = VUVenture7777PrevValueLow +  (temp2028Low * Fund2028ReinvestToVenture7777Fac/100.00);
            }
            else if(MonthDiff2025 == 12 && aaPolicyYear == YearDiff2025){ //the reinvestment fund from 2025 will be bring forward to next year
                VUVenture7777PrevValueLow = VUVenture7777PrevValueLow +  (temp2025Low * Fund2025ReinvestToVenture7777Fac/100.00);
            }
            
        }
        
        if (i == 12  && aaRound == 2) {
            
            //return currentValue + VUVenture7777Value_EverCash1 + VUVenture7777Value_EverCash6 + VUVenture7777Value_EverCash60;
            
            if(MonthDiff2035 == 12 && aaPolicyYear == YearDiff2035){
                return currentValue + (temp2035Low * Fund2035ReinvestToVenture7777Fac/100.00) + EverCashValue;
            }
            else if(MonthDiff2030 == 12 && aaPolicyYear == YearDiff2030){
                return currentValue +  (temp2030Low * Fund2030ReinvestToVenture7777Fac/100.00) + EverCashValue;
            }
            else if(MonthDiff2028 == 12 && aaPolicyYear == YearDiff2028){
                return currentValue + (temp2028Low * Fund2028ReinvestToVenture7777Fac/100.00) + EverCashValue;
            }
            else if(MonthDiff2025 == 12 && aaPolicyYear == YearDiff2025){
                return currentValue + (temp2025Low * Fund2025ReinvestToVenture7777Fac/100.00) + EverCashValue;
            }
            else{
                return currentValue + EverCashValue;
            }
        }
        else{
            return currentValue + EverCashValue;
        }
        
    }
    else{
        if (VUCashValueNegative == TRUE && FundValueOfTheYearValueTotalLow != 0 ) {
            currentValue= ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear]) + IncreasePrem) * [self ReturnVUVenture7777Fac:aaPolicyYear] * CYFactor +
                           [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnVUVenture7777Fac:aaPolicyYear] * CYFactor +
                           [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnVUVenture7777Fac:aaPolicyYear] * CYFactor) *
            (1 + [self ReturnVUVenture7777InstLow:@""]) + VUVenture7777PrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVenture7777InstLow:@"A"]) -
            ([self ReturnRegWithdrawal:aaPolicyYear] * 0) + (NegativeValueOfMaxCashFundLow - 1) *
            MAX(0,(FundValueOfTheYearVUVenture7777ValueLow_Basic/FundValueOfTheYearValueTotalLow));
            
            //NSLog(@"");
            
        }
        else{
            if (aaRound == 1) {
                currentValue = ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear]) + IncreasePrem) * [self ReturnVUVenture7777Fac:aaPolicyYear] * CYFactor +
                                [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnVUVenture7777Fac:aaPolicyYear] * CYFactor +
                                [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnVUVenture7777Fac:aaPolicyYear] * CYFactor) *
                (1 + [self ReturnVUVenture7777InstLow:@""]) + VUVenture7777PrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVenture7777InstLow:@"A"]) -
                ([self ReturnRegWithdrawal:aaPolicyYear] * 0);
                VUVenture7777ValueLow = currentValue;
            }
            else{
                currentValue = VUVenture7777ValueLow;
            }
            
        }
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear < 60) {
                CashFactor = 0.00;
            }
            else if(Age + aaPolicyYear == 60){
                CashFactor = 1.00;
            }
            else{
                CashFactor = 12 * (1 + [self ReturnVUVenture7777InstLow:@"M"])/(pow((1 + [self ReturnVUVenture7777InstLow:@"A"]), (1.00/12.00)));
            }
        }
        
        if (aaRound == 2) {
            VUVenture7777PrevValueLow = currentValue + VUVenture7777Value_EverCash1 + VUVenture7777Value_EverCash6 + (VUVenture7777Value_EverCash60 * CashFactor);
        }
        return currentValue + VUVenture7777Value_EverCash1 + VUVenture7777Value_EverCash6 + (VUVenture7777Value_EverCash60 * CashFactor);
    }
    
}

-(double)ReturnVUVenture8888ValueHigh :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andRound:(NSInteger)aaRound andMonth:(NSInteger)i{
    
    double currentValue =0.0;
    if ([aaYearOrMonth isEqualToString:@"M"]) {
        
        
        if (i == 1) {
            MonthVUVenture8888PrevValueHigh = VUVenture8888PrevValueHigh ;
        }
        
        double tempPrev = MonthVUVenture8888PrevValueHigh;
        
        if ((i == MonthDiff2035 + 1 && aaPolicyYear == YearDiff2035)) {
            MonthVUVenture8888PrevValueHigh = MonthVUVenture8888PrevValueHigh + (temp2035High * Fund2035ReinvestToVenture8888Fac/100.00);
        }
        else if(i == MonthDiff2030 + 1 && aaPolicyYear == YearDiff2030){
            MonthVUVenture8888PrevValueHigh = MonthVUVenture8888PrevValueHigh + (temp2030High * Fund2030ReinvestToVenture8888Fac/100.00);
        }
        else if(i == MonthDiff2028 + 1 && aaPolicyYear == YearDiff2028){
            MonthVUVenture8888PrevValueHigh = MonthVUVenture8888PrevValueHigh + (temp2028High * Fund2028ReinvestToVenture8888Fac/100.00);
        }
        else if(i == MonthDiff2025 + 1 && aaPolicyYear == YearDiff2025){
            MonthVUVenture8888PrevValueHigh = MonthVUVenture8888PrevValueHigh + (temp2025High * Fund2025ReinvestToVenture8888Fac/100.00);
        }
        else if(i == MonthDiff2023 + 1 && aaPolicyYear == YearDiff2023){
            MonthVUVenture8888PrevValueHigh = MonthVUVenture8888PrevValueHigh + (temp2023High * Fund2023ReinvestToVenture8888Fac/100.00);
        }
        else{
            
        }
        
        
        
        
        //NSLog(@"%f", MonthVUVenture8888PrevValueHigh);
        if (VUCashValueNegative == TRUE && MonthFundValueOfTheYearValueTotalHigh != 0 ) {
            
            currentValue= ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVenture8888Fac:aaPolicyYear andMonth:i] * CYFactor +
                           [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnPremiumFactor:i] * [self ReturnVUVenture8888Fac:aaPolicyYear andMonth:i] * CYFactor +
                           [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnPremiumFactor:i] * [self ReturnVUVenture8888Fac:aaPolicyYear andMonth:i] * CYFactor) *
            pow(1 + [self ReturnVUVenture8888InstHigh:aaPolicyYear andMOP:@"A"],1.00/12.00) + MonthVUVenture8888PrevValueHigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
            pow(1 + [self ReturnVUVenture8888InstHigh:aaPolicyYear andMOP:@"A"], 1.00/12.00) -
            ([self ReturnRegWithdrawal:aaPolicyYear] * 0) + (NegativeValueOfMaxCashFundHigh - 1) *
            MAX(0,(MonthFundValueOfTheYearVUVenture8888ValueHigh_Basic/MonthFundValueOfTheYearValueTotalHigh));
            
            //NSLog(@"%f %f %f",NegativeValueOfMaxCashFundHigh, MonthVUVenture8888ValueHigh,MonthFundValueOfTheYearValueTotalHigh );
            
        }
        else{
            
            currentValue = ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVenture8888Fac:aaPolicyYear  andMonth:i] * CYFactor +
                            [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnPremiumFactor:i] * [self ReturnVUVenture8888Fac:aaPolicyYear andMonth:i] * CYFactor +
                            [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnPremiumFactor:i] * [self ReturnVUVenture8888Fac:aaPolicyYear andMonth:i] * CYFactor) *
            pow((1 + [self ReturnVUVenture8888InstHigh:aaPolicyYear andMOP:@"A"]),(1.00/12.00)) + MonthVUVenture8888PrevValueHigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
            pow((1 + [self ReturnVUVenture8888InstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00)) -
            ([self ReturnRegWithdrawal:aaPolicyYear] * 0);
            
            
        }
        
        //NSLog(@"%f, %f, %f, %f",NegativeValueOfMaxCashFundHigh, MonthVUVenture8888ValueHigh, MonthFundValueOfTheYearValueTotalHigh, currentValue);
        
        [self ReturnMonthEverCash60:aaPolicyYear andMonth:i];
        
        double EverCashValue = VUVenture8888Value_EverCash1 * [self EverCash1_CashPaymentFactor:aaPolicyYear andMonth:i] +
        VUVenture8888Value_EverCash6 * [self EverCash6_CashPaymentFactor:aaPolicyYear andMonth:i]
        + VUVenture8888Value_EverCash60;
        
        if (aaRound == 2) {
            MonthVUVenture8888PrevValueHigh = currentValue + EverCashValue;
        }
        else{
            MonthVUVenture8888PrevValueHigh = tempPrev;
        }
        
        
        
        if (i == 12  && aaRound == 2) {
            VUVenture8888PrevValueHigh = MonthVUVenture8888PrevValueHigh;
            
            if(MonthDiff2035 == 12 && aaPolicyYear == YearDiff2035){ //the reinvestment fund from 2035 will be bring forward to next year
                VUVenture8888PrevValueHigh = VUVenture8888PrevValueHigh +  (temp2035High * Fund2035ReinvestToVenture8888Fac/100.00);
            }
            else if(MonthDiff2030 == 12 && aaPolicyYear == YearDiff2030){ //the reinvestment fund from 2030 will be bring forward to next year
                VUVenture8888PrevValueHigh = VUVenture8888PrevValueHigh +  (temp2030High * Fund2030ReinvestToVenture8888Fac/100.00);
            }
            else if(MonthDiff2028 == 12 && aaPolicyYear == YearDiff2028){ //the reinvestment fund from 2028 will be bring forward to next year
                VUVenture8888PrevValueHigh = VUVenture8888PrevValueHigh +  (temp2028High * Fund2028ReinvestToVenture8888Fac/100.00);
            }
            else if(MonthDiff2025 == 12 && aaPolicyYear == YearDiff2025){ //the reinvestment fund from 2025 will be bring forward to next year
                VUVenture8888PrevValueHigh = VUVenture8888PrevValueHigh +  (temp2025High * Fund2025ReinvestToVenture8888Fac/100.00);
            }
        }
        
        //NSLog(@"%d %f %f, %d ", i, MonthVUVenture8888ValueHigh, MonthFundValueOfTheYearValueTotalHigh, VUCashValueNegative);
        //return MonthVUVenture8888PrevValueHigh;
        
        if (i == 12  && aaRound == 2) {
            if(MonthDiff2035 == 12 && aaPolicyYear == YearDiff2035){
                return currentValue + (temp2035High * Fund2035ReinvestToVenture8888Fac/100.00) + EverCashValue;
            }
            else if(MonthDiff2030 == 12 && aaPolicyYear == YearDiff2030){
                return currentValue +  (temp2030High * Fund2030ReinvestToVenture8888Fac/100.00) + EverCashValue;
            }
            else if(MonthDiff2028 == 12 && aaPolicyYear == YearDiff2028){
                return currentValue + (temp2028High * Fund2028ReinvestToVenture8888Fac/100.00) + EverCashValue;
            }
            else if(MonthDiff2025 == 12 && aaPolicyYear == YearDiff2025){
                return currentValue + (temp2025High * Fund2025ReinvestToVenture8888Fac/100.00) + EverCashValue;
            }
            else{
                return currentValue + EverCashValue;
            }
            
            //return currentValue + VUVenture8888Value_EverCash1 + VUVenture8888Value_EverCash6 + VUVenture8888Value_EverCash60;
        }
        else{
            return currentValue + EverCashValue;
            
        }
        
        
        
    }
    else{
        //if (VUCashValueHigh < 0 && [self ReturnFundValueOfTheYearValueTotalHigh:aaPolicyYear] != 0 ) {
        if (VUCashValueNegative == TRUE && FundValueOfTheYearValueTotalHigh != 0 ) {
            currentValue= ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear]) + IncreasePrem) * [self ReturnVUVenture8888Fac:aaPolicyYear] * CYFactor +
                           [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnVUVenture8888Fac:aaPolicyYear] * CYFactor +
                           [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnVUVenture8888Fac:aaPolicyYear] * CYFactor) *
            (1 + [self ReturnVUVenture8888InstHigh:aaPolicyYear andMOP:@""]) + VUVenture8888PrevValueHigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVenture8888InstHigh:aaPolicyYear andMOP:@"A"]) -
            ([self ReturnRegWithdrawal:aaPolicyYear] * 0) + (NegativeValueOfMaxCashFundHigh - 1) *
            MAX(0,(FundValueOfTheYearVUVenture8888ValueHigh_Basic/FundValueOfTheYearValueTotalHigh));
            
        }
        else{
            if (aaRound == 1) {
                currentValue = ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear]) + IncreasePrem) * [self ReturnVUVenture8888Fac:aaPolicyYear] * CYFactor +
                                [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnVUVenture8888Fac:aaPolicyYear] * CYFactor +
                                [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnVUVenture8888Fac:aaPolicyYear] * CYFactor) *
                (1 + [self ReturnVUVenture8888InstHigh:aaPolicyYear andMOP:@""]) + VUVenture8888PrevValueHigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVenture8888InstHigh:aaPolicyYear andMOP:@"A"]) -
                ([self ReturnRegWithdrawal:aaPolicyYear] * 0);
                VUVenture8888ValueHigh = currentValue;
            }
            else{
                currentValue = VUVenture8888ValueHigh;
            }
            
        }
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear < 60) {
                CashFactor = 0.00;
            }
            else if(Age + aaPolicyYear == 60){
                CashFactor = 1.00;
                
            }
            else{
                
                CashFactor = 12 * (1 + [self ReturnVUVenture8888InstHigh:aaPolicyYear andMOP:@"M"])/(pow((1 + [self ReturnVUVenture8888InstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00)));
            }
        }
        
        if (aaRound == 2) {
            VUVenture8888PrevValueHigh = currentValue + VUVenture8888Value_EverCash1 + VUVenture8888Value_EverCash6 + (VUVenture8888Value_EverCash60 * CashFactor);
        }
        
        
        return currentValue + VUVenture8888Value_EverCash1 + VUVenture8888Value_EverCash6 + (VUVenture8888Value_EverCash60 * CashFactor);
    }
    
    
}


-(double)ReturnVUVenture8888ValueMedian :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andRound:(NSInteger)aaRound andMonth:(int)i{
    
    double currentValue;
    
    if ([aaYearOrMonth isEqualToString:@"M"]) {
        
        
        if (i == 1) {
            MonthVUVenture8888PrevValueMedian = VUVenture8888PrevValueMedian ;
        }
        
        double tempPrev = MonthVUVenture8888PrevValueMedian;
        if ((i == MonthDiff2035 + 1 && aaPolicyYear == YearDiff2035)  ) {
            MonthVUVenture8888PrevValueMedian = MonthVUVenture8888PrevValueMedian + (temp2035Median * Fund2035ReinvestToVenture8888Fac/100.00);
        }
        else if(i == MonthDiff2030 + 1 && aaPolicyYear == YearDiff2030){
            MonthVUVenture8888PrevValueMedian = MonthVUVenture8888PrevValueMedian + (temp2030Median * Fund2030ReinvestToVenture8888Fac/100.00);
        }
        else if(i == MonthDiff2028 + 1 && aaPolicyYear == YearDiff2028){
            MonthVUVenture8888PrevValueMedian = MonthVUVenture8888PrevValueMedian + (temp2028Median * Fund2028ReinvestToVenture8888Fac/100.00);
        }
        else if(i == MonthDiff2025 + 1 && aaPolicyYear == YearDiff2025){
            MonthVUVenture8888PrevValueMedian = MonthVUVenture8888PrevValueMedian + (temp2025Median * Fund2025ReinvestToVenture8888Fac/100.00);
        }
        else if(i == MonthDiff2023 + 1 && aaPolicyYear == YearDiff2023){
            MonthVUVenture8888PrevValueMedian = MonthVUVenture8888PrevValueMedian + (temp2023Median * Fund2023ReinvestToVenture8888Fac/100.00);
        }
        else{
            
        }
        
        if (VUCashValueNegative == TRUE && MonthFundValueOfTheYearValueTotalMedian != 0 ) {
            currentValue= ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVenture8888Fac:aaPolicyYear  andMonth:i] * CYFactor +
                           [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnPremiumFactor:i] * [self ReturnVUVenture8888Fac:aaPolicyYear  andMonth:i] * CYFactor +
                           [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnPremiumFactor:i] * [self ReturnVUVenture8888Fac:aaPolicyYear  andMonth:i] * CYFactor) *
            pow(1 + [self ReturnVUVenture8888InstMedian:@"A"], 1.00/12.00) + MonthVUVenture8888PrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
            pow(1 + [self ReturnVUVenture8888InstMedian:@"A"], 1.00/12.00) - ([self ReturnRegWithdrawal:aaPolicyYear] * 0) + (NegativeValueOfMaxCashFundMedian - 1) *
            MAX(0,(MonthFundValueOfTheYearVUVenture8888ValueMedian_Basic/MonthFundValueOfTheYearValueTotalMedian));
            
        }
        else{
            currentValue = ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVenture8888Fac:aaPolicyYear  andMonth:i] * CYFactor +
                            [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnPremiumFactor:i] * [self ReturnVUVenture8888Fac:aaPolicyYear  andMonth:i] * CYFactor +
                            [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnPremiumFactor:i] * [self ReturnVUVenture8888Fac:aaPolicyYear  andMonth:i] * CYFactor) *
            pow(1 + [self ReturnVUVenture8888InstMedian:@"A"], 1.00/12.00) + MonthVUVenture8888PrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
            pow(1 + [self ReturnVUVenture8888InstMedian:@"A"], 1.00/12.00) - ([self ReturnRegWithdrawal:aaPolicyYear] * 0);
            
        }
        
        double EverCashValue = VUVenture8888Value_EverCash1 * [self EverCash1_CashPaymentFactor:aaPolicyYear andMonth:i] +
        VUVenture8888Value_EverCash6 * [self EverCash6_CashPaymentFactor:aaPolicyYear andMonth:i] +
        VUVenture8888Value_EverCash60;
        
        if (aaRound == 2) {
            MonthVUVenture8888PrevValueMedian = currentValue + EverCashValue;
        }
        else{
            MonthVUVenture8888PrevValueMedian = tempPrev;
        }
        
        
        
        if (i == 12  && aaRound == 2) {
            VUVenture8888PrevValueMedian = MonthVUVenture8888PrevValueMedian;
            
            if(MonthDiff2035 == 12 && aaPolicyYear == YearDiff2035){ //the reinvestment fund from 2035 will be bring forward to next year
                VUVenture8888PrevValueMedian = VUVenture8888PrevValueMedian +  (temp2035Median * Fund2035ReinvestToVenture8888Fac/100.00);
            }
            else if(MonthDiff2030 == 12 && aaPolicyYear == YearDiff2030){ //the reinvestment fund from 2030 will be bring forward to next year
                VUVenture8888PrevValueMedian = VUVenture8888PrevValueMedian +  (temp2030Median * Fund2030ReinvestToVenture8888Fac/100.00);
            }
            else if(MonthDiff2028 == 12 && aaPolicyYear == YearDiff2028){ //the reinvestment fund from 2028 will be bring forward to next year
                VUVenture8888PrevValueMedian = VUVenture8888PrevValueMedian +  (temp2028Median * Fund2028ReinvestToVenture8888Fac/100.00);
            }
            else if(MonthDiff2025 == 12 && aaPolicyYear == YearDiff2025){ //the reinvestment fund from 2025 will be bring forward to next year
                VUVenture8888PrevValueMedian = VUVenture8888PrevValueMedian +  (temp2025Median * Fund2025ReinvestToVenture8888Fac/100.00);
            }
        }
        
        if (i == 12  && aaRound == 2) {
            
            //return currentValue + VUVenture8888Value_EverCash1 + VUVenture8888Value_EverCash6 + VUVenture8888Value_EverCash60;
            
            if(MonthDiff2035 == 12 && aaPolicyYear == YearDiff2035){
                return currentValue + (temp2035Median * Fund2035ReinvestToVenture8888Fac/100.00) + EverCashValue;
            }
            else if(MonthDiff2030 == 12 && aaPolicyYear == YearDiff2030){
                return currentValue +  (temp2030Median * Fund2030ReinvestToVenture8888Fac/100.00) + EverCashValue;
            }
            else if(MonthDiff2028 == 12 && aaPolicyYear == YearDiff2028){
                return currentValue + (temp2028Median * Fund2028ReinvestToVenture8888Fac/100.00) + EverCashValue;
            }
            else if(MonthDiff2025 == 12 && aaPolicyYear == YearDiff2025){
                return currentValue + (temp2025Median * Fund2025ReinvestToVenture8888Fac/100.00) + EverCashValue;
            }
            else{
                return currentValue + EverCashValue;
            }
        }
        else
        {
            return currentValue + EverCashValue;
        }
        
        
    }
    else{
        //if (VUCashValueMedian < 0 && [self ReturnFundValueOfTheYearValueTotalMedian:aaPolicyYear] != 0 ) {
        if (VUCashValueNegative == TRUE && FundValueOfTheYearValueTotalMedian != 0 ) {
            currentValue= ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear]) + IncreasePrem) * [self ReturnVUVenture8888Fac:aaPolicyYear] * CYFactor +
                           [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * [self ReturnDivideMode] * RegularAllo * [self ReturnVUVenture8888Fac:aaPolicyYear] * CYFactor +
                           [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnVUVenture8888Fac:aaPolicyYear] * CYFactor) *
            (1 + [self ReturnVUVenture8888InstMedian:@""]) + VUVenture8888PrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVenture8888InstMedian:@"A"]) -
            ([self ReturnRegWithdrawal:aaPolicyYear] * 0) + (NegativeValueOfMaxCashFundMedian - 1) *
            MAX(0,(FundValueOfTheYearVUVenture8888ValueMedian_Basic/FundValueOfTheYearValueTotalMedian));
            
        }
        else{
            if (aaRound == 1) {
                currentValue = ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear]) + IncreasePrem) * [self ReturnVUVenture8888Fac:aaPolicyYear] * CYFactor +
                                [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * [self ReturnDivideMode] * RegularAllo * [self ReturnVUVenture8888Fac:aaPolicyYear] * CYFactor +
                                [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnVUVenture8888Fac:aaPolicyYear] * CYFactor) *
                (1 + [self ReturnVUVenture8888InstMedian:@""]) + VUVenture8888PrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVenture8888InstMedian:@"A"]) -
                ([self ReturnRegWithdrawal:aaPolicyYear] * 0);
                VUVenture8888ValueMedian = currentValue;
            }
            else{
                currentValue = VUVenture8888ValueMedian;
            }
        }
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear < 60) {
                CashFactor = 0.00;
            }
            else if(Age + aaPolicyYear == 60){
                CashFactor = 1.00;
            }
            else{
                CashFactor = 12 * (1 + [self ReturnVUVenture8888InstMedian:@"M"])/(pow((1 + [self ReturnVUVenture8888InstMedian:@"A"]), (1.00/12.00)));
            }
        }
        
        if (aaRound == 2) {
            VUVenture8888PrevValueMedian = currentValue + VUVenture8888Value_EverCash1 + VUVenture8888Value_EverCash6 + (VUVenture8888Value_EverCash60 * CashFactor);
        }
        return currentValue + VUVenture8888Value_EverCash1 + VUVenture8888Value_EverCash6 + (VUVenture8888Value_EverCash60 * CashFactor);
    }
    
}


-(double)ReturnVUVenture8888ValueLow :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andRound:(NSInteger)aaRound andMonth:(int)i{
    
    double currentValue;
    
    
    if ([aaYearOrMonth isEqualToString:@"M"]) {
        
        
        if (i == 1) {
            MonthVUVenture8888PrevValueLow = VUVenture8888PrevValueLow ;
        }
        
        double tempPrev = MonthVUVenture8888PrevValueLow;
        if ((i == MonthDiff2035 + 1 && aaPolicyYear == YearDiff2035)  ) {
            MonthVUVenture8888PrevValueLow = MonthVUVenture8888PrevValueLow + (temp2035Low * Fund2035ReinvestToVenture8888Fac/100.00);
        }
        else if(i == MonthDiff2030 + 1 && aaPolicyYear == YearDiff2030){
            MonthVUVenture8888PrevValueLow = MonthVUVenture8888PrevValueLow + (temp2030Low * Fund2030ReinvestToVenture8888Fac/100.00);
        }
        else if(i == MonthDiff2028 + 1 && aaPolicyYear == YearDiff2028){
            MonthVUVenture8888PrevValueLow = MonthVUVenture8888PrevValueLow + (temp2028Low * Fund2028ReinvestToVenture8888Fac/100.00);
        }
        else if(i == MonthDiff2025 + 1 && aaPolicyYear == YearDiff2025){
            MonthVUVenture8888PrevValueLow = MonthVUVenture8888PrevValueLow + (temp2025Low * Fund2025ReinvestToVenture8888Fac/100.00);
        }
        else if(i == MonthDiff2023 + 1 && aaPolicyYear == YearDiff2023){
            MonthVUVenture8888PrevValueLow = MonthVUVenture8888PrevValueLow + (temp2023Low * Fund2023ReinvestToVenture8888Fac/100.00);
        }
        else{
            
        }
        
        if (VUCashValueNegative == TRUE && MonthFundValueOfTheYearValueTotalLow != 0 ) {
            currentValue= ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVenture8888Fac:aaPolicyYear  andMonth:i] * CYFactor +
                           [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnPremiumFactor:i] * [self ReturnVUVenture8888Fac:aaPolicyYear  andMonth:i] * CYFactor +
                           [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnPremiumFactor:i]  * [self ReturnVUVenture8888Fac:aaPolicyYear  andMonth:i] * CYFactor) *
            pow(1 + [self ReturnVUVenture8888InstLow:@"A"], 1.00/12.00) + MonthVUVenture8888PrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
            pow(1 + [self ReturnVUVenture8888InstLow:@"A"], 1.00/12.00) - ([self ReturnRegWithdrawal:aaPolicyYear] * 0) + (NegativeValueOfMaxCashFundLow - 1) *
            MAX(0,(MonthFundValueOfTheYearVUVenture8888ValueLow_Basic/MonthFundValueOfTheYearValueTotalLow));
            
        }
        else{
            currentValue = ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVenture8888Fac:aaPolicyYear  andMonth:i] * CYFactor +
                            [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnPremiumFactor:i] * [self ReturnVUVenture8888Fac:aaPolicyYear  andMonth:i] * CYFactor +
                            [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnPremiumFactor:i] * [self ReturnVUVenture8888Fac:aaPolicyYear  andMonth:i] * CYFactor) *
            pow(1 + [self ReturnVUVenture8888InstLow:@"A"], 1.00/12.00) + MonthVUVenture8888PrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
            pow(1 + [self ReturnVUVenture8888InstLow:@"A"], 1.00/12.00) - ([self ReturnRegWithdrawal:aaPolicyYear] * 0);
            
        }
        
        double EverCashValue =  VUVenture8888Value_EverCash1 * [self EverCash1_CashPaymentFactor:aaPolicyYear andMonth:i] +
        VUVenture8888Value_EverCash6 * [self EverCash6_CashPaymentFactor:aaPolicyYear andMonth:i]  +
        VUVenture8888Value_EverCash60;
        
        if (aaRound == 2) {
            MonthVUVenture8888PrevValueLow = currentValue + EverCashValue;
        }
        else{
            MonthVUVenture8888PrevValueLow = tempPrev;
        }
        
        
        
        if (i == 12  && aaRound == 2) {
            VUVenture8888PrevValueLow = MonthVUVenture8888PrevValueLow;
            
            if(MonthDiff2035 == 12 && aaPolicyYear == YearDiff2035){ //the reinvestment fund from 2035 will be bring forward to next year
                VUVenture8888PrevValueLow = VUVenture8888PrevValueLow +  (temp2035Low * Fund2035ReinvestToVenture8888Fac/100.00);
            }
            else if(MonthDiff2030 == 12 && aaPolicyYear == YearDiff2030){ //the reinvestment fund from 2030 will be bring forward to next year
                VUVenture8888PrevValueLow = VUVenture8888PrevValueLow +  (temp2030Low * Fund2030ReinvestToVenture8888Fac/100.00);
            }
            else if(MonthDiff2028 == 12 && aaPolicyYear == YearDiff2028){ //the reinvestment fund from 2028 will be bring forward to next year
                VUVenture8888PrevValueLow = VUVenture8888PrevValueLow +  (temp2028Low * Fund2028ReinvestToVenture8888Fac/100.00);
            }
            else if(MonthDiff2025 == 12 && aaPolicyYear == YearDiff2025){ //the reinvestment fund from 2025 will be bring forward to next year
                VUVenture8888PrevValueLow = VUVenture8888PrevValueLow +  (temp2025Low * Fund2025ReinvestToVenture8888Fac/100.00);
            }
            
        }
        
        if (i == 12  && aaRound == 2) {
            
            //return currentValue + VUVenture8888Value_EverCash1 + VUVenture8888Value_EverCash6 + VUVenture8888Value_EverCash60;
            
            if(MonthDiff2035 == 12 && aaPolicyYear == YearDiff2035){
                return currentValue + (temp2035Low * Fund2035ReinvestToVenture8888Fac/100.00) + EverCashValue;
            }
            else if(MonthDiff2030 == 12 && aaPolicyYear == YearDiff2030){
                return currentValue +  (temp2030Low * Fund2030ReinvestToVenture8888Fac/100.00) + EverCashValue;
            }
            else if(MonthDiff2028 == 12 && aaPolicyYear == YearDiff2028){
                return currentValue + (temp2028Low * Fund2028ReinvestToVenture8888Fac/100.00) + EverCashValue;
            }
            else if(MonthDiff2025 == 12 && aaPolicyYear == YearDiff2025){
                return currentValue + (temp2025Low * Fund2025ReinvestToVenture8888Fac/100.00) + EverCashValue;
            }
            else{
                return currentValue + EverCashValue;
            }
        }
        else{
            return currentValue + EverCashValue;
        }
        
    }
    else{
        if (VUCashValueNegative == TRUE && FundValueOfTheYearValueTotalLow != 0 ) {
            currentValue= ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear]) + IncreasePrem) * [self ReturnVUVenture8888Fac:aaPolicyYear] * CYFactor +
                           [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnVUVenture8888Fac:aaPolicyYear] * CYFactor +
                           [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnVUVenture8888Fac:aaPolicyYear] * CYFactor) *
            (1 + [self ReturnVUVenture8888InstLow:@""]) + VUVenture8888PrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVenture8888InstLow:@"A"]) -
            ([self ReturnRegWithdrawal:aaPolicyYear] * 0) + (NegativeValueOfMaxCashFundLow - 1) *
            MAX(0,(FundValueOfTheYearVUVenture8888ValueLow_Basic/FundValueOfTheYearValueTotalLow));
            
            //NSLog(@"");
            
        }
        else{
            if (aaRound == 1) {
                currentValue = ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear]) + IncreasePrem) * [self ReturnVUVenture8888Fac:aaPolicyYear] * CYFactor +
                                [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnVUVenture8888Fac:aaPolicyYear] * CYFactor +
                                [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnVUVenture8888Fac:aaPolicyYear] * CYFactor) *
                (1 + [self ReturnVUVenture8888InstLow:@""]) + VUVenture8888PrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVenture8888InstLow:@"A"]) -
                ([self ReturnRegWithdrawal:aaPolicyYear] * 0);
                VUVenture8888ValueLow = currentValue;
            }
            else{
                currentValue = VUVenture8888ValueLow;
            }
            
        }
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear < 60) {
                CashFactor = 0.00;
            }
            else if(Age + aaPolicyYear == 60){
                CashFactor = 1.00;
            }
            else{
                CashFactor = 12 * (1 + [self ReturnVUVenture8888InstLow:@"M"])/(pow((1 + [self ReturnVUVenture8888InstLow:@"A"]), (1.00/12.00)));
            }
        }
        
        if (aaRound == 2) {
            VUVenture8888PrevValueLow = currentValue + VUVenture8888Value_EverCash1 + VUVenture8888Value_EverCash6 + (VUVenture8888Value_EverCash60 * CashFactor);
        }
        return currentValue + VUVenture8888Value_EverCash1 + VUVenture8888Value_EverCash6 + (VUVenture8888Value_EverCash60 * CashFactor);
    }
    
}

-(double)ReturnVUVenture9999ValueHigh :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andRound:(NSInteger)aaRound andMonth:(NSInteger)i{
    
    double currentValue =0.0;
    if ([aaYearOrMonth isEqualToString:@"M"]) {
        
        
        if (i == 1) {
            MonthVUVenture9999PrevValueHigh = VUVenture9999PrevValueHigh ;
        }
        
        double tempPrev = MonthVUVenture9999PrevValueHigh;
        
        if ((i == MonthDiff2035 + 1 && aaPolicyYear == YearDiff2035)) {
            MonthVUVenture9999PrevValueHigh = MonthVUVenture9999PrevValueHigh + (temp2035High * Fund2035ReinvestToVenture9999Fac/100.00);
        }
        else if(i == MonthDiff2030 + 1 && aaPolicyYear == YearDiff2030){
            MonthVUVenture9999PrevValueHigh = MonthVUVenture9999PrevValueHigh + (temp2030High * Fund2030ReinvestToVenture9999Fac/100.00);
        }
        else if(i == MonthDiff2028 + 1 && aaPolicyYear == YearDiff2028){
            MonthVUVenture9999PrevValueHigh = MonthVUVenture9999PrevValueHigh + (temp2028High * Fund2028ReinvestToVenture9999Fac/100.00);
        }
        else if(i == MonthDiff2025 + 1 && aaPolicyYear == YearDiff2025){
            MonthVUVenture9999PrevValueHigh = MonthVUVenture9999PrevValueHigh + (temp2025High * Fund2025ReinvestToVenture9999Fac/100.00);
        }
        else if(i == MonthDiff2023 + 1 && aaPolicyYear == YearDiff2023){
            MonthVUVenture9999PrevValueHigh = MonthVUVenture9999PrevValueHigh + (temp2023High * Fund2023ReinvestToVenture9999Fac/100.00);
        }
        else{
            
        }
        
        
        
        
        //NSLog(@"%f", MonthVUVenture9999PrevValueHigh);
        if (VUCashValueNegative == TRUE && MonthFundValueOfTheYearValueTotalHigh != 0 ) {
            
            currentValue= ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVenture9999Fac:aaPolicyYear andMonth:i] * CYFactor +
                           [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnPremiumFactor:i] * [self ReturnVUVenture9999Fac:aaPolicyYear andMonth:i] * CYFactor +
                           [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnPremiumFactor:i] * [self ReturnVUVenture9999Fac:aaPolicyYear andMonth:i] * CYFactor) *
            pow(1 + [self ReturnVUVenture9999InstHigh:aaPolicyYear andMOP:@"A"],1.00/12.00) + MonthVUVenture9999PrevValueHigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
            pow(1 + [self ReturnVUVenture9999InstHigh:aaPolicyYear andMOP:@"A"], 1.00/12.00) -
            ([self ReturnRegWithdrawal:aaPolicyYear] * 0) + (NegativeValueOfMaxCashFundHigh - 1) *
            MAX(0,(MonthFundValueOfTheYearVUVenture9999ValueHigh_Basic/MonthFundValueOfTheYearValueTotalHigh));
            
            //NSLog(@"%f %f %f",NegativeValueOfMaxCashFundHigh, MonthVUVenture9999ValueHigh,MonthFundValueOfTheYearValueTotalHigh );
            
        }
        else{
            
            currentValue = ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVenture9999Fac:aaPolicyYear  andMonth:i] * CYFactor +
                            [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnPremiumFactor:i] * [self ReturnVUVenture9999Fac:aaPolicyYear andMonth:i] * CYFactor +
                            [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnPremiumFactor:i] * [self ReturnVUVenture9999Fac:aaPolicyYear andMonth:i] * CYFactor) *
            pow((1 + [self ReturnVUVenture9999InstHigh:aaPolicyYear andMOP:@"A"]),(1.00/12.00)) + MonthVUVenture9999PrevValueHigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
            pow((1 + [self ReturnVUVenture9999InstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00)) -
            ([self ReturnRegWithdrawal:aaPolicyYear] * 0);
            
            
        }
        
        //NSLog(@"%f, %f, %f, %f",NegativeValueOfMaxCashFundHigh, MonthVUVenture9999ValueHigh, MonthFundValueOfTheYearValueTotalHigh, currentValue);
        
        [self ReturnMonthEverCash60:aaPolicyYear andMonth:i];
        
        double EverCashValue = VUVenture9999Value_EverCash1 * [self EverCash1_CashPaymentFactor:aaPolicyYear andMonth:i] +
        VUVenture9999Value_EverCash6 * [self EverCash6_CashPaymentFactor:aaPolicyYear andMonth:i]
        + VUVenture9999Value_EverCash60;
        
        if (aaRound == 2) {
            MonthVUVenture9999PrevValueHigh = currentValue + EverCashValue;
        }
        else{
            MonthVUVenture9999PrevValueHigh = tempPrev;
        }
        
        
        
        if (i == 12  && aaRound == 2) {
            VUVenture9999PrevValueHigh = MonthVUVenture9999PrevValueHigh;
            
            if(MonthDiff2035 == 12 && aaPolicyYear == YearDiff2035){ //the reinvestment fund from 2035 will be bring forward to next year
                VUVenture9999PrevValueHigh = VUVenture9999PrevValueHigh +  (temp2035High * Fund2035ReinvestToVenture9999Fac/100.00);
            }
            else if(MonthDiff2030 == 12 && aaPolicyYear == YearDiff2030){ //the reinvestment fund from 2030 will be bring forward to next year
                VUVenture9999PrevValueHigh = VUVenture9999PrevValueHigh +  (temp2030High * Fund2030ReinvestToVenture9999Fac/100.00);
            }
            else if(MonthDiff2028 == 12 && aaPolicyYear == YearDiff2028){ //the reinvestment fund from 2028 will be bring forward to next year
                VUVenture9999PrevValueHigh = VUVenture9999PrevValueHigh +  (temp2028High * Fund2028ReinvestToVenture9999Fac/100.00);
            }
            else if(MonthDiff2025 == 12 && aaPolicyYear == YearDiff2025){ //the reinvestment fund from 2025 will be bring forward to next year
                VUVenture9999PrevValueHigh = VUVenture9999PrevValueHigh +  (temp2025High * Fund2025ReinvestToVenture9999Fac/100.00);
            }
        }
        
        //NSLog(@"%d %f %f, %d ", i, MonthVUVenture9999ValueHigh, MonthFundValueOfTheYearValueTotalHigh, VUCashValueNegative);
        //return MonthVUVenture9999PrevValueHigh;
        
        if (i == 12  && aaRound == 2) {
            if(MonthDiff2035 == 12 && aaPolicyYear == YearDiff2035){
                return currentValue + (temp2035High * Fund2035ReinvestToVenture9999Fac/100.00) + EverCashValue;
            }
            else if(MonthDiff2030 == 12 && aaPolicyYear == YearDiff2030){
                return currentValue +  (temp2030High * Fund2030ReinvestToVenture9999Fac/100.00) + EverCashValue;
            }
            else if(MonthDiff2028 == 12 && aaPolicyYear == YearDiff2028){
                return currentValue + (temp2028High * Fund2028ReinvestToVenture9999Fac/100.00) + EverCashValue;
            }
            else if(MonthDiff2025 == 12 && aaPolicyYear == YearDiff2025){
                return currentValue + (temp2025High * Fund2025ReinvestToVenture9999Fac/100.00) + EverCashValue;
            }
            else{
                return currentValue + EverCashValue;
            }
            
            //return currentValue + VUVenture9999Value_EverCash1 + VUVenture9999Value_EverCash6 + VUVenture9999Value_EverCash60;
        }
        else{
            return currentValue + EverCashValue;
            
        }
        
        
        
    }
    else{
        //if (VUCashValueHigh < 0 && [self ReturnFundValueOfTheYearValueTotalHigh:aaPolicyYear] != 0 ) {
        if (VUCashValueNegative == TRUE && FundValueOfTheYearValueTotalHigh != 0 ) {
            currentValue= ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear]) + IncreasePrem) * [self ReturnVUVenture9999Fac:aaPolicyYear] * CYFactor +
                           [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnVUVenture9999Fac:aaPolicyYear] * CYFactor +
                           [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnVUVenture9999Fac:aaPolicyYear] * CYFactor) *
            (1 + [self ReturnVUVenture9999InstHigh:aaPolicyYear andMOP:@""]) + VUVenture9999PrevValueHigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVenture9999InstHigh:aaPolicyYear andMOP:@"A"]) -
            ([self ReturnRegWithdrawal:aaPolicyYear] * 0) + (NegativeValueOfMaxCashFundHigh - 1) *
            MAX(0,(FundValueOfTheYearVUVenture9999ValueHigh_Basic/FundValueOfTheYearValueTotalHigh));
            
        }
        else{
            if (aaRound == 1) {
                currentValue = ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear]) + IncreasePrem) * [self ReturnVUVenture9999Fac:aaPolicyYear] * CYFactor +
                                [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnVUVenture9999Fac:aaPolicyYear] * CYFactor +
                                [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnVUVenture9999Fac:aaPolicyYear] * CYFactor) *
                (1 + [self ReturnVUVenture9999InstHigh:aaPolicyYear andMOP:@""]) + VUVenture9999PrevValueHigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVenture9999InstHigh:aaPolicyYear andMOP:@"A"]) -
                ([self ReturnRegWithdrawal:aaPolicyYear] * 0);
                VUVenture9999ValueHigh = currentValue;
            }
            else{
                currentValue = VUVenture9999ValueHigh;
            }
            
        }
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear < 60) {
                CashFactor = 0.00;
            }
            else if(Age + aaPolicyYear == 60){
                CashFactor = 1.00;
                
            }
            else{
                
                CashFactor = 12 * (1 + [self ReturnVUVenture9999InstHigh:aaPolicyYear andMOP:@"M"])/(pow((1 + [self ReturnVUVenture9999InstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00)));
            }
        }
        
        if (aaRound == 2) {
            VUVenture9999PrevValueHigh = currentValue + VUVenture9999Value_EverCash1 + VUVenture9999Value_EverCash6 + (VUVenture9999Value_EverCash60 * CashFactor);
        }
        
        
        return currentValue + VUVenture9999Value_EverCash1 + VUVenture9999Value_EverCash6 + (VUVenture9999Value_EverCash60 * CashFactor);
    }
    
    
}


-(double)ReturnVUVenture9999ValueMedian :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andRound:(NSInteger)aaRound andMonth:(int)i{
    
    double currentValue;
    
    if ([aaYearOrMonth isEqualToString:@"M"]) {
        
        
        if (i == 1) {
            MonthVUVenture9999PrevValueMedian = VUVenture9999PrevValueMedian ;
        }
        
        double tempPrev = MonthVUVenture9999PrevValueMedian;
        if ((i == MonthDiff2035 + 1 && aaPolicyYear == YearDiff2035)  ) {
            MonthVUVenture9999PrevValueMedian = MonthVUVenture9999PrevValueMedian + (temp2035Median * Fund2035ReinvestToVenture9999Fac/100.00);
        }
        else if(i == MonthDiff2030 + 1 && aaPolicyYear == YearDiff2030){
            MonthVUVenture9999PrevValueMedian = MonthVUVenture9999PrevValueMedian + (temp2030Median * Fund2030ReinvestToVenture9999Fac/100.00);
        }
        else if(i == MonthDiff2028 + 1 && aaPolicyYear == YearDiff2028){
            MonthVUVenture9999PrevValueMedian = MonthVUVenture9999PrevValueMedian + (temp2028Median * Fund2028ReinvestToVenture9999Fac/100.00);
        }
        else if(i == MonthDiff2025 + 1 && aaPolicyYear == YearDiff2025){
            MonthVUVenture9999PrevValueMedian = MonthVUVenture9999PrevValueMedian + (temp2025Median * Fund2025ReinvestToVenture9999Fac/100.00);
        }
        else if(i == MonthDiff2023 + 1 && aaPolicyYear == YearDiff2023){
            MonthVUVenture9999PrevValueMedian = MonthVUVenture9999PrevValueMedian + (temp2023Median * Fund2023ReinvestToVenture9999Fac/100.00);
        }
        else{
            
        }
        
        if (VUCashValueNegative == TRUE && MonthFundValueOfTheYearValueTotalMedian != 0 ) {
            currentValue= ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVenture9999Fac:aaPolicyYear  andMonth:i] * CYFactor +
                           [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnPremiumFactor:i] * [self ReturnVUVenture9999Fac:aaPolicyYear  andMonth:i] * CYFactor +
                           [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnPremiumFactor:i] * [self ReturnVUVenture9999Fac:aaPolicyYear  andMonth:i] * CYFactor) *
            pow(1 + [self ReturnVUVenture9999InstMedian:@"A"], 1.00/12.00) + MonthVUVenture9999PrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
            pow(1 + [self ReturnVUVenture9999InstMedian:@"A"], 1.00/12.00) - ([self ReturnRegWithdrawal:aaPolicyYear] * 0) + (NegativeValueOfMaxCashFundMedian - 1) *
            MAX(0,(MonthFundValueOfTheYearVUVenture9999ValueMedian_Basic/MonthFundValueOfTheYearValueTotalMedian));
            
        }
        else{
            currentValue = ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVenture9999Fac:aaPolicyYear  andMonth:i] * CYFactor +
                            [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnPremiumFactor:i] * [self ReturnVUVenture9999Fac:aaPolicyYear  andMonth:i] * CYFactor +
                            [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnPremiumFactor:i] * [self ReturnVUVenture9999Fac:aaPolicyYear  andMonth:i] * CYFactor) *
            pow(1 + [self ReturnVUVenture9999InstMedian:@"A"], 1.00/12.00) + MonthVUVenture9999PrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
            pow(1 + [self ReturnVUVenture9999InstMedian:@"A"], 1.00/12.00) - ([self ReturnRegWithdrawal:aaPolicyYear] * 0);
            
        }
        
        double EverCashValue = VUVenture9999Value_EverCash1 * [self EverCash1_CashPaymentFactor:aaPolicyYear andMonth:i] +
        VUVenture9999Value_EverCash6 * [self EverCash6_CashPaymentFactor:aaPolicyYear andMonth:i] +
        VUVenture9999Value_EverCash60;
        
        if (aaRound == 2) {
            MonthVUVenture9999PrevValueMedian = currentValue + EverCashValue;
        }
        else{
            MonthVUVenture9999PrevValueMedian = tempPrev;
        }
        
        
        
        if (i == 12  && aaRound == 2) {
            VUVenture9999PrevValueMedian = MonthVUVenture9999PrevValueMedian;
            
            if(MonthDiff2035 == 12 && aaPolicyYear == YearDiff2035){ //the reinvestment fund from 2035 will be bring forward to next year
                VUVenture9999PrevValueMedian = VUVenture9999PrevValueMedian +  (temp2035Median * Fund2035ReinvestToVenture9999Fac/100.00);
            }
            else if(MonthDiff2030 == 12 && aaPolicyYear == YearDiff2030){ //the reinvestment fund from 2030 will be bring forward to next year
                VUVenture9999PrevValueMedian = VUVenture9999PrevValueMedian +  (temp2030Median * Fund2030ReinvestToVenture9999Fac/100.00);
            }
            else if(MonthDiff2028 == 12 && aaPolicyYear == YearDiff2028){ //the reinvestment fund from 2028 will be bring forward to next year
                VUVenture9999PrevValueMedian = VUVenture9999PrevValueMedian +  (temp2028Median * Fund2028ReinvestToVenture9999Fac/100.00);
            }
            else if(MonthDiff2025 == 12 && aaPolicyYear == YearDiff2025){ //the reinvestment fund from 2025 will be bring forward to next year
                VUVenture9999PrevValueMedian = VUVenture9999PrevValueMedian +  (temp2025Median * Fund2025ReinvestToVenture9999Fac/100.00);
            }
        }
        
        if (i == 12  && aaRound == 2) {
            
            //return currentValue + VUVenture9999Value_EverCash1 + VUVenture9999Value_EverCash6 + VUVenture9999Value_EverCash60;
            
            if(MonthDiff2035 == 12 && aaPolicyYear == YearDiff2035){
                return currentValue + (temp2035Median * Fund2035ReinvestToVenture9999Fac/100.00) + EverCashValue;
            }
            else if(MonthDiff2030 == 12 && aaPolicyYear == YearDiff2030){
                return currentValue +  (temp2030Median * Fund2030ReinvestToVenture9999Fac/100.00) + EverCashValue;
            }
            else if(MonthDiff2028 == 12 && aaPolicyYear == YearDiff2028){
                return currentValue + (temp2028Median * Fund2028ReinvestToVenture9999Fac/100.00) + EverCashValue;
            }
            else if(MonthDiff2025 == 12 && aaPolicyYear == YearDiff2025){
                return currentValue + (temp2025Median * Fund2025ReinvestToVenture9999Fac/100.00) + EverCashValue;
            }
            else{
                return currentValue + EverCashValue;
            }
        }
        else
        {
            return currentValue + EverCashValue;
        }
        
        
    }
    else{
        //if (VUCashValueMedian < 0 && [self ReturnFundValueOfTheYearValueTotalMedian:aaPolicyYear] != 0 ) {
        if (VUCashValueNegative == TRUE && FundValueOfTheYearValueTotalMedian != 0 ) {
            currentValue= ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear]) + IncreasePrem) * [self ReturnVUVenture9999Fac:aaPolicyYear] * CYFactor +
                           [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * [self ReturnDivideMode] * RegularAllo * [self ReturnVUVenture9999Fac:aaPolicyYear] * CYFactor +
                           [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnVUVenture9999Fac:aaPolicyYear] * CYFactor) *
            (1 + [self ReturnVUVenture9999InstMedian:@""]) + VUVenture9999PrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVenture9999InstMedian:@"A"]) -
            ([self ReturnRegWithdrawal:aaPolicyYear] * 0) + (NegativeValueOfMaxCashFundMedian - 1) *
            MAX(0,(FundValueOfTheYearVUVenture9999ValueMedian_Basic/FundValueOfTheYearValueTotalMedian));
            
        }
        else{
            if (aaRound == 1) {
                currentValue = ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear]) + IncreasePrem) * [self ReturnVUVenture9999Fac:aaPolicyYear] * CYFactor +
                                [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * [self ReturnDivideMode] * RegularAllo * [self ReturnVUVenture9999Fac:aaPolicyYear] * CYFactor +
                                [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnVUVenture9999Fac:aaPolicyYear] * CYFactor) *
                (1 + [self ReturnVUVenture9999InstMedian:@""]) + VUVenture9999PrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVenture9999InstMedian:@"A"]) -
                ([self ReturnRegWithdrawal:aaPolicyYear] * 0);
                VUVenture9999ValueMedian = currentValue;
            }
            else{
                currentValue = VUVenture9999ValueMedian;
            }
        }
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear < 60) {
                CashFactor = 0.00;
            }
            else if(Age + aaPolicyYear == 60){
                CashFactor = 1.00;
            }
            else{
                CashFactor = 12 * (1 + [self ReturnVUVenture9999InstMedian:@"M"])/(pow((1 + [self ReturnVUVenture9999InstMedian:@"A"]), (1.00/12.00)));
            }
        }
        
        if (aaRound == 2) {
            VUVenture9999PrevValueMedian = currentValue + VUVenture9999Value_EverCash1 + VUVenture9999Value_EverCash6 + (VUVenture9999Value_EverCash60 * CashFactor);
        }
        return currentValue + VUVenture9999Value_EverCash1 + VUVenture9999Value_EverCash6 + (VUVenture9999Value_EverCash60 * CashFactor);
    }
    
}


-(double)ReturnVUVenture9999ValueLow :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andRound:(NSInteger)aaRound andMonth:(int)i{
    
    double currentValue;
    
    
    if ([aaYearOrMonth isEqualToString:@"M"]) {
        
        
        if (i == 1) {
            MonthVUVenture9999PrevValueLow = VUVenture9999PrevValueLow ;
        }
        
        double tempPrev = MonthVUVenture9999PrevValueLow;
        if ((i == MonthDiff2035 + 1 && aaPolicyYear == YearDiff2035)  ) {
            MonthVUVenture9999PrevValueLow = MonthVUVenture9999PrevValueLow + (temp2035Low * Fund2035ReinvestToVenture9999Fac/100.00);
        }
        else if(i == MonthDiff2030 + 1 && aaPolicyYear == YearDiff2030){
            MonthVUVenture9999PrevValueLow = MonthVUVenture9999PrevValueLow + (temp2030Low * Fund2030ReinvestToVenture9999Fac/100.00);
        }
        else if(i == MonthDiff2028 + 1 && aaPolicyYear == YearDiff2028){
            MonthVUVenture9999PrevValueLow = MonthVUVenture9999PrevValueLow + (temp2028Low * Fund2028ReinvestToVenture9999Fac/100.00);
        }
        else if(i == MonthDiff2025 + 1 && aaPolicyYear == YearDiff2025){
            MonthVUVenture9999PrevValueLow = MonthVUVenture9999PrevValueLow + (temp2025Low * Fund2025ReinvestToVenture9999Fac/100.00);
        }
        else if(i == MonthDiff2023 + 1 && aaPolicyYear == YearDiff2023){
            MonthVUVenture9999PrevValueLow = MonthVUVenture9999PrevValueLow + (temp2023Low * Fund2023ReinvestToVenture9999Fac/100.00);
        }
        else{
            
        }
        
        if (VUCashValueNegative == TRUE && MonthFundValueOfTheYearValueTotalLow != 0 ) {
            currentValue= ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVenture9999Fac:aaPolicyYear  andMonth:i] * CYFactor +
                           [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnPremiumFactor:i] * [self ReturnVUVenture9999Fac:aaPolicyYear  andMonth:i] * CYFactor +
                           [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnPremiumFactor:i]  * [self ReturnVUVenture9999Fac:aaPolicyYear  andMonth:i] * CYFactor) *
            pow(1 + [self ReturnVUVenture9999InstLow:@"A"], 1.00/12.00) + MonthVUVenture9999PrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
            pow(1 + [self ReturnVUVenture9999InstLow:@"A"], 1.00/12.00) - ([self ReturnRegWithdrawal:aaPolicyYear] * 0) + (NegativeValueOfMaxCashFundLow - 1) *
            MAX(0,(MonthFundValueOfTheYearVUVenture9999ValueLow_Basic/MonthFundValueOfTheYearValueTotalLow));
            
        }
        else{
            currentValue = ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVenture9999Fac:aaPolicyYear  andMonth:i] * CYFactor +
                            [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnPremiumFactor:i] * [self ReturnVUVenture9999Fac:aaPolicyYear  andMonth:i] * CYFactor +
                            [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnPremiumFactor:i] * [self ReturnVUVenture9999Fac:aaPolicyYear  andMonth:i] * CYFactor) *
            pow(1 + [self ReturnVUVenture9999InstLow:@"A"], 1.00/12.00) + MonthVUVenture9999PrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
            pow(1 + [self ReturnVUVenture9999InstLow:@"A"], 1.00/12.00) - ([self ReturnRegWithdrawal:aaPolicyYear] * 0);
            
        }
        
        double EverCashValue =  VUVenture9999Value_EverCash1 * [self EverCash1_CashPaymentFactor:aaPolicyYear andMonth:i] +
        VUVenture9999Value_EverCash6 * [self EverCash6_CashPaymentFactor:aaPolicyYear andMonth:i]  +
        VUVenture9999Value_EverCash60;
        
        if (aaRound == 2) {
            MonthVUVenture9999PrevValueLow = currentValue + EverCashValue;
        }
        else{
            MonthVUVenture9999PrevValueLow = tempPrev;
        }
        
        
        
        if (i == 12  && aaRound == 2) {
            VUVenture9999PrevValueLow = MonthVUVenture9999PrevValueLow;
            
            if(MonthDiff2035 == 12 && aaPolicyYear == YearDiff2035){ //the reinvestment fund from 2035 will be bring forward to next year
                VUVenture9999PrevValueLow = VUVenture9999PrevValueLow +  (temp2035Low * Fund2035ReinvestToVenture9999Fac/100.00);
            }
            else if(MonthDiff2030 == 12 && aaPolicyYear == YearDiff2030){ //the reinvestment fund from 2030 will be bring forward to next year
                VUVenture9999PrevValueLow = VUVenture9999PrevValueLow +  (temp2030Low * Fund2030ReinvestToVenture9999Fac/100.00);
            }
            else if(MonthDiff2028 == 12 && aaPolicyYear == YearDiff2028){ //the reinvestment fund from 2028 will be bring forward to next year
                VUVenture9999PrevValueLow = VUVenture9999PrevValueLow +  (temp2028Low * Fund2028ReinvestToVenture9999Fac/100.00);
            }
            else if(MonthDiff2025 == 12 && aaPolicyYear == YearDiff2025){ //the reinvestment fund from 2025 will be bring forward to next year
                VUVenture9999PrevValueLow = VUVenture9999PrevValueLow +  (temp2025Low * Fund2025ReinvestToVenture9999Fac/100.00);
            }
            
        }
        
        if (i == 12  && aaRound == 2) {
            
            //return currentValue + VUVenture9999Value_EverCash1 + VUVenture9999Value_EverCash6 + VUVenture9999Value_EverCash60;
            
            if(MonthDiff2035 == 12 && aaPolicyYear == YearDiff2035){
                return currentValue + (temp2035Low * Fund2035ReinvestToVenture9999Fac/100.00) + EverCashValue;
            }
            else if(MonthDiff2030 == 12 && aaPolicyYear == YearDiff2030){
                return currentValue +  (temp2030Low * Fund2030ReinvestToVenture9999Fac/100.00) + EverCashValue;
            }
            else if(MonthDiff2028 == 12 && aaPolicyYear == YearDiff2028){
                return currentValue + (temp2028Low * Fund2028ReinvestToVenture9999Fac/100.00) + EverCashValue;
            }
            else if(MonthDiff2025 == 12 && aaPolicyYear == YearDiff2025){
                return currentValue + (temp2025Low * Fund2025ReinvestToVenture9999Fac/100.00) + EverCashValue;
            }
            else{
                return currentValue + EverCashValue;
            }
        }
        else{
            return currentValue + EverCashValue;
        }
        
    }
    else{
        if (VUCashValueNegative == TRUE && FundValueOfTheYearValueTotalLow != 0 ) {
            currentValue= ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear]) + IncreasePrem) * [self ReturnVUVenture9999Fac:aaPolicyYear] * CYFactor +
                           [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnVUVenture9999Fac:aaPolicyYear] * CYFactor +
                           [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnVUVenture9999Fac:aaPolicyYear] * CYFactor) *
            (1 + [self ReturnVUVenture9999InstLow:@""]) + VUVenture9999PrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVenture9999InstLow:@"A"]) -
            ([self ReturnRegWithdrawal:aaPolicyYear] * 0) + (NegativeValueOfMaxCashFundLow - 1) *
            MAX(0,(FundValueOfTheYearVUVenture9999ValueLow_Basic/FundValueOfTheYearValueTotalLow));
            
            //NSLog(@"");
            
        }
        else{
            if (aaRound == 1) {
                currentValue = ((([strBasicPremium doubleValue ] * [self ReturnPremAllocation:aaPolicyYear]) + IncreasePrem) * [self ReturnVUVenture9999Fac:aaPolicyYear] * CYFactor +
                                [self ReturnRegTopUpPrem] * [self ReturnDivideMode] * RegularAllo * [self ReturnVUVenture9999Fac:aaPolicyYear] * CYFactor +
                                [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * [self ReturnVUVenture9999Fac:aaPolicyYear] * CYFactor) *
                (1 + [self ReturnVUVenture9999InstLow:@""]) + VUVenture9999PrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVenture9999InstLow:@"A"]) -
                ([self ReturnRegWithdrawal:aaPolicyYear] * 0);
                VUVenture9999ValueLow = currentValue;
            }
            else{
                currentValue = VUVenture9999ValueLow;
            }
            
        }
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear < 60) {
                CashFactor = 0.00;
            }
            else if(Age + aaPolicyYear == 60){
                CashFactor = 1.00;
            }
            else{
                CashFactor = 12 * (1 + [self ReturnVUVenture9999InstLow:@"M"])/(pow((1 + [self ReturnVUVenture9999InstLow:@"A"]), (1.00/12.00)));
            }
        }
        
        if (aaRound == 2) {
            VUVenture9999PrevValueLow = currentValue + VUVenture9999Value_EverCash1 + VUVenture9999Value_EverCash6 + (VUVenture9999Value_EverCash60 * CashFactor);
        }
        return currentValue + VUVenture9999Value_EverCash1 + VUVenture9999Value_EverCash6 + (VUVenture9999Value_EverCash60 * CashFactor);
    }
    
}

#pragma mark - Calculate Fund Surrender Value for Rider
-(double)ReturnRiderVU2023ValueHigh :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andRound:(NSInteger)aaRound andMonth:(NSInteger)aaMonth{
	double currentValue;
	if (aaPolicyYear > YearDiff2023) {
		RiderVU2023PrevValuehigh = 0.00;
		return 0.00;
	}
	else{
		if ([aaYearOrMonth isEqualToString:@"M"]) {
			//month calculation
			
			
			if (aaMonth == 1) {
				RiderMonthVU2023PrevValuehigh = RiderVU2023PrevValuehigh;
			}
			
			if (aaMonth > MonthDiff2023 && aaPolicyYear == YearDiff2023) {
				RiderMonthVU2023PrevValuehigh = 0;
				RiderVU2023PrevValuehigh = 0.00;
				return 0;
			}
			
			double tempPrev = RiderMonthVU2023PrevValuehigh;
			
			if (RiderVUCashValueNegative == TRUE && RiderMonthFundValueOfTheYearValueTotalHigh != 0 ) {
				
				currentValue =((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] * [self ReturnPremiumFactor:aaMonth] ) + IncreasePrem) * [self ReturnVU2023Fac] +
							   [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VU2023Factor * [self ReturnPremiumFactor:aaMonth]) *
				pow((1 + [self ReturnVU2023InstHigh:@"A" ]), (1.00/12.00)) + RiderMonthVU2023PrevValuehigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear] * [self ReturnLoyaltyBonusFactor:aaMonth]/100.00)) *
				pow((1 + [self ReturnVU2023InstHigh:@"A" ]), 1.00/12.00)  + (NegativeValueOfMaxCashFundHigh - 1) *
				(MAX(0,(RiderMonthFundValueOfTheYearVU2023ValueHigh_Basic/RiderMonthFundValueOfTheYearValueTotalHigh)));
				
			}
			else{
				currentValue =((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] * [self ReturnPremiumFactor:aaMonth]) + IncreasePrem) * [self ReturnVU2023Fac] +
							   [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VU2023Factor * [self ReturnPremiumFactor:aaMonth]) *
				pow(1 + [self ReturnVU2023InstHigh:@"A" ], 1.00/12.00) + RiderMonthVU2023PrevValuehigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:aaMonth]/100.00)) *
				pow(1 + [self ReturnVU2023InstHigh:@"A" ], 1.00/12.00);
			}
			if (aaMonth == MonthDiff2023 && aaPolicyYear == YearDiff2023) {
				if (Fund2023PartialReinvest != 100) {
					MonthFundMaturityValue2023_Bull = MonthVU2023PrevValuehigh * (100 - Fund2023PartialReinvest)/100.00;
					
					Ridertemp2023High = currentValue * (100 - Fund2023PartialReinvest)/100.00;
					RiderWithdrawtemp2023High = currentValue * (Fund2023PartialReinvest)/100.00;
					//NSLog(@"%f", temp2028High);
				}
				else{
					MonthFundMaturityValue2023_Bull = 0;
				}
				
				if (aaRound == 2) {
					RiderMonthVU2023PrevValuehigh = 0;
				}
				else{
					RiderMonthVU2023PrevValuehigh = tempPrev;
				}
			}
			else{
				if (aaRound == 2) {
					RiderMonthVU2023PrevValuehigh = currentValue;
				}
				else{
					RiderMonthVU2023PrevValuehigh = tempPrev;
				}
			}
			
			if (aaMonth == 12 && aaRound == 2) {
				RiderVU2023PrevValuehigh = RiderMonthVU2023PrevValuehigh;
			}
			
			return currentValue;
			// below part to be edit later
		}
		else{
			//year calculation
			if (RiderVUCashValueNegative == TRUE && RiderFundValueOfTheYearValueTotalHigh != 0 ) {
				
				currentValue =((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ]) + IncreasePrem) * [self ReturnVU2023Fac] +
							   [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VU2023Factor) *
				(1 + VU2023InstHigh) + RiderVU2023PrevValuehigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVU2023InstHigh:@"A"])
				+ (RiderNegativeValueOfMaxCashFundHigh - 1) *
				(RiderFundValueOfTheYearVU2023ValueHigh_Basic/RiderFundValueOfTheYearValueTotalHigh);
				
			}
			else{
				if (aaRound == 1) {
					currentValue =((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ]) + IncreasePrem) * [self ReturnVU2023Fac]  +
								   [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VU2023Factor) *
					(1 + VU2023InstHigh) + RiderVU2023PrevValuehigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVU2023InstHigh:@"A"]);
					RiderVU2023ValueHigh = currentValue;
				}
				else{
					currentValue = RiderVU2023ValueHigh;
				}
				
			}
			
			if (aaRound == 2){
				RiderVU2023PrevValuehigh = currentValue;
			}
			
			return currentValue;
			// below part to be edit later
		}
		
	}
}

-(double)ReturnRiderVU2023ValueMedian :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andRound:(NSInteger)aaRound andMonth:(int)i{
	double currentValue;
	if (aaPolicyYear > YearDiff2023) {
		RiderVU2023PrevValueMedian = 0.00;
		return 0.00;
	}
	else{
		
		if ([aaYearOrMonth isEqualToString:@"M"]) {
			
			
			if (i == 1) {
				RiderMonthVU2023PrevValueMedian = RiderVU2023PrevValueMedian;
			}
			
			if (i > MonthDiff2023 && aaPolicyYear == YearDiff2023) {
				RiderMonthVU2023PrevValueMedian = 0;
				RiderVU2023PrevValueMedian = 0.00;
				return 0;
			}
			
			double tempPrev = RiderMonthVU2023PrevValueMedian;
			
			if (RiderVUCashValueNegative == TRUE && RiderMonthFundValueOfTheYearValueTotalMedian != 0 ) {
				
				currentValue =((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVU2023Fac]  +
							   [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VU2023Factor) *
				pow(1 + [self ReturnVU2023InstMedian:@"A" ], 1.00/12.00) + RiderMonthVU2023PrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
				pow(1 + [self ReturnVU2023InstMedian:@"A" ], 1.00/12.00) + (RiderNegativeValueOfMaxCashFundMedian - 1) *
				(MAX(0,(RiderMonthFundValueOfTheYearVU2023ValueMedian_Basic/RiderMonthFundValueOfTheYearValueTotalMedian)));
				
			}
			else{
				currentValue =((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVU2023Fac ]  +
							   [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VU2023Factor) *
				pow(1 + [self ReturnVU2023InstMedian:@"A" ], 1.00/12.00) + RiderMonthVU2023PrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
				pow(1 + [self ReturnVU2023InstMedian:@"A" ], 1.00/12.00);
			}
			
			if (i == MonthDiff2023 && aaPolicyYear == YearDiff2023) {
				if (Fund2023PartialReinvest != 100) {
					MonthFundMaturityValue2023_Flat = MonthVU2023PrevValueMedian * (100 - Fund2023PartialReinvest)/100.00;
					
					Ridertemp2023Median = currentValue * (100 - Fund2023PartialReinvest)/100.00;
					RiderWithdrawtemp2023Median = currentValue * (Fund2023PartialReinvest)/100.00;
					//NSLog(@"%f", temp2028High);
				}
				else{
					MonthFundMaturityValue2023_Flat = 0;
				}
				
				if (aaRound == 2) {
					RiderMonthVU2023PrevValueMedian = 0;
				}
				else{
					RiderMonthVU2023PrevValueMedian = tempPrev;
				}
			}
			else{
				if (aaRound == 2) {
					RiderMonthVU2023PrevValueMedian = currentValue;
				}
				else{
					RiderMonthVU2023PrevValueMedian = tempPrev;
				}
				
			}
			
			
			if (i == 12 && aaRound == 2) {
				RiderVU2023PrevValueMedian = RiderMonthVU2023PrevValueMedian;
			}
			
			return currentValue;
			// below part to be edit later
		}
		else{
			if (RiderVUCashValueNegative == TRUE && RiderFundValueOfTheYearValueTotalMedian != 0 ) {
				
				currentValue =((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ]) + IncreasePrem) * [self ReturnVU2023Fac]  +
							   [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VU2023Factor) *
				(1 + VU2023InstMedian) + RiderVU2023PrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVU2023InstMedian:@"A"])
				+ (RiderNegativeValueOfMaxCashFundMedian - 1) *
				(RiderFundValueOfTheYearVU2023ValueMedian_Basic/RiderFundValueOfTheYearValueTotalMedian);
				
			}
			else{
				if (aaRound == 1) {
					currentValue =((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ]) + IncreasePrem) * [self ReturnVU2023Fac]  +
								   [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VU2023Factor  +
								   [self ReturnExcessPrem:aaPolicyYear] * ExcessAllo * VU2023Factor * CYFactor) *
					(1 + VU2023InstMedian) + RiderVU2023PrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVU2023InstMedian:@"A"]);
					RiderVU2023ValueMedian = currentValue;
				}
				else{
					currentValue = RiderVU2023ValueMedian;
				}
				
			}
			
			if (aaRound == 2){
				RiderVU2023PrevValueMedian = currentValue;
			}
			
			return currentValue;
			// below part to be edit later
		}
		
	}
}

-(double)ReturnRiderVU2023ValueLow :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andRound:(NSInteger)aaRound andMonth:(int)i{
	double currentValue;
	if (aaPolicyYear > YearDiff2023) {
		RiderVU2023PrevValueLow = 0.00;
		return 0.00;
	}
	else{
		
		if ([aaYearOrMonth isEqualToString:@"M"]) {
			
			
			if (i == 1) {
				RiderMonthVU2023PrevValueLow = RiderVU2023PrevValueLow;
			}
			
			if (i > MonthDiff2023 && aaPolicyYear == YearDiff2023) {
				RiderVU2023PrevValueLow = 0.00;
				RiderMonthVU2023PrevValueLow = 0;
				return 0;
			}
			
			double tempPrev = RiderMonthVU2023PrevValueLow;
			
			if (RiderVUCashValueNegative == TRUE && RiderMonthFundValueOfTheYearValueTotalLow != 0 ) {
				
				currentValue =((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVU2023Fac]  +
							   [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VU2023Factor * [self ReturnPremiumFactor:aaPolicyYear]) *
				pow(1 + [self ReturnVU2023InstLow:@"A" ], 1.00/12.00) + RiderMonthVU2023PrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
				pow(1 + [self ReturnVU2023InstLow:@"A" ], 1.00/12.00)  + (RiderNegativeValueOfMaxCashFundLow - 1) *
				(MAX(0,(RiderMonthFundValueOfTheYearVU2023ValueLow_Basic/RiderMonthFundValueOfTheYearValueTotalLow)));
				
			}
			else{
				currentValue =((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVU2023Fac ]  +
							   [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VU2023Factor * [self ReturnPremiumFactor:aaPolicyYear]) *
				pow(1 + [self ReturnVU2023InstLow:@"A" ], 1.00/12.00) + RiderMonthVU2023PrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
				pow(1 + [self ReturnVU2023InstLow:@"A" ], 1.00/12.00);
			}
			
			if (i == MonthDiff2023 && aaPolicyYear == YearDiff2023) {
				if (Fund2023PartialReinvest != 100) {
					MonthFundMaturityValue2023_Bear = RiderMonthVU2023PrevValueLow * (100 - Fund2023PartialReinvest)/100.00;
					
					Ridertemp2023Low = currentValue * (100 - Fund2023PartialReinvest)/100.00;
					RiderWithdrawtemp2023Low = currentValue * (Fund2023PartialReinvest)/100.00;
					//NSLog(@"%f", temp2028High);
				}
				else{
					MonthFundMaturityValue2023_Bear = 0;
				}
				if (aaRound == 2) {
					RiderMonthVU2023PrevValueLow = 0;
				}
				else{
					RiderMonthVU2023PrevValueLow = tempPrev;
				}
			}
			else{
				if (aaRound == 2) {
					RiderMonthVU2023PrevValueLow = currentValue;
				}
				else{
					RiderMonthVU2023PrevValueLow = tempPrev;
				}
			}
			
			if (i == 12 && aaRound == 2) {
				RiderVU2023PrevValueLow = RiderMonthVU2023PrevValueLow;
			}
			
			return currentValue;
			// below part to be edit later
            
			
		}
		else{
			if (RiderVUCashValueNegative == TRUE && RiderFundValueOfTheYearValueTotalLow != 0 ) {
				
				currentValue =((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1 ] doubleValue ]) + IncreasePrem) * [self ReturnVU2023Fac]  +
							   [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VU2023Factor * [self ReturnPremiumFactor:aaPolicyYear]) *
				(1 + VU2023InstLow) + RiderVU2023PrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVU2023InstLow:@"A"]) +
				(RiderNegativeValueOfMaxCashFundLow - 1) *
				(RiderFundValueOfTheYearVU2023ValueLow_Basic/RiderFundValueOfTheYearValueTotalLow);
				
			}
			else{
				
				if (aaRound == 1) {
					currentValue =((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ]) + IncreasePrem) * [self ReturnVU2023Fac] * +
								   [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VU2023Factor * [self ReturnPremiumFactor:aaPolicyYear]) *
					(1 + VU2023InstLow) + RiderVU2023PrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVU2023InstLow:@"A"]);
					RiderVU2023ValueLow = currentValue ;
				}
				else{
					currentValue = RiderVU2023ValueLow;
				}
				
			}
			
			if (aaRound == 2){
				RiderVU2023PrevValueLow = currentValue;
			}
			
			return currentValue;
			// below part to be edit later
		}
		
	}
}


-(double)ReturnRiderVU2025ValueHigh :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andRound:(NSInteger)aaRound andMonth:(NSInteger)i{
	
	double currentValue;
	if (aaPolicyYear > YearDiff2025) {
		RiderVU2025PrevValuehigh = 0.00;
		return 0;
	}
	else{
		if ([aaYearOrMonth isEqualToString:@"M"]) {
			
			
			if (i == 1) {
				RiderMonthVU2025PrevValuehigh = RiderVU2025PrevValuehigh;
			}
			
			if (i > MonthDiff2025 && aaPolicyYear == YearDiff2025) {
				RiderVU2025PrevValuehigh = 0.00;
				RiderMonthVU2025PrevValuehigh = 0;
				return 0;
			}
			
			double tempPrev = RiderMonthVU2025PrevValuehigh;
			
			if(i == MonthDiff2023 + 1 && aaPolicyYear == YearDiff2023){
				RiderMonthVU2025PrevValuehigh = RiderMonthVU2025PrevValuehigh + (Ridertemp2023High * Fund2023ReinvestTo2025Fac/100.00);
			}
			else{
				
			}
			
			if (RiderVUCashValueNegative == TRUE && RiderMonthFundValueOfTheYearValueTotalHigh != 0 ) {
				currentValue =((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ]  * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVU2025Fac:aaPolicyYear  andMonth:i]  +
							   [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VU2025Factor/100.00 * [self ReturnPremiumFactor:i]) *
				pow(1 + [self ReturnVU2025InstHigh:@"A" ], 1.00/12.00) + RiderMonthVU2025PrevValuehigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
				pow(1 + [self ReturnVU2025InstHigh:@"A" ], 1.00/12.00) - ([self ReturnRegWithdrawal:aaPolicyYear] * 0) + (RiderNegativeValueOfMaxCashFundHigh - 1) *
				(MAX(0,(RiderMonthFundValueOfTheYearVU2025ValueHigh_Basic/RiderMonthFundValueOfTheYearValueTotalHigh)));
			}
			else{
				currentValue= ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVU2025Fac:aaPolicyYear  andMonth:i]  +
							   [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VU2025Factor/100.00 * [self ReturnPremiumFactor:i]) *
				pow(1 + [self ReturnVU2025InstHigh:@"A" ], 1.00/12.00) + RiderMonthVU2025PrevValuehigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
				pow(1 + [self ReturnVU2025InstHigh:@"A" ], 1.00/12.00);
			}
			
			if (i == MonthDiff2025 && aaPolicyYear == YearDiff2025) {
				if (Fund2025PartialReinvest != 100) {
					MonthFundMaturityValue2025_Bull = MonthVU2025PrevValuehigh * (100 - Fund2025PartialReinvest)/100.00;
					
					Ridertemp2025High = currentValue * (100 - Fund2025PartialReinvest)/100.00;
					RiderWithdrawtemp2025High = currentValue * (Fund2025PartialReinvest)/100.00;
					//NSLog(@"%f", temp2028High);
				}
				else{
					MonthFundMaturityValue2025_Bull = 0;
				}
				if (aaRound == 2){
					RiderMonthVU2025PrevValuehigh = 0;
				}
				else{
					RiderMonthVU2025PrevValuehigh = tempPrev;
				}
				
			}
			else{
				if (aaRound == 2){
					RiderMonthVU2025PrevValuehigh = currentValue;
				}
				else{
					RiderMonthVU2025PrevValuehigh = tempPrev;
				}
				
			}
			
			
			if (aaRound == 2 && i == 12) {
				RiderVU2025PrevValuehigh = RiderMonthVU2025PrevValuehigh;
			}
			
			return currentValue;
		}
		else{
			if (RiderVUCashValueNegative == TRUE && RiderFundValueOfTheYearValueTotalHigh != 0 ) {
				currentValue =((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ]) + IncreasePrem) * [self ReturnVU2025Fac:aaPolicyYear]  +
							   [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VU2025Factor/100.00 * [self ReturnPremiumFactor:i]) *
				(1 + VU2025InstHigh) + RiderVU2025PrevValuehigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVU2025InstHigh:@"A"]) -
				([self ReturnRegWithdrawal:aaPolicyYear] * 0) + (RiderNegativeValueOfMaxCashFundHigh - 1) *
				(MAX(0,(RiderFundValueOfTheYearVU2025ValueHigh_Basic/RiderFundValueOfTheYearValueTotalHigh)));
				
				
			}
			else{
				
				if (aaRound == 1) {
					currentValue= ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ]) + IncreasePrem) * [self ReturnVU2025Fac:aaPolicyYear] +
								   [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VU2025Factor/100.00 * [self ReturnPremiumFactor:i]) *
					(1 + VU2025InstHigh) + RiderVU2025PrevValuehigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVU2025InstHigh:@"A"]) -
					([self ReturnRegWithdrawal:aaPolicyYear] * 0);
					
					RiderVU2025ValueHigh = currentValue;
				}
				else{
					currentValue = RiderVU2025ValueHigh;
				}
				
			}
			
			if (aaRound == 2) {
				RiderVU2025PrevValuehigh = currentValue;
			}
			
			return currentValue;
		}
		
	}
	
	// below part to be edit later
}

-(double)ReturnRiderVU2025ValueMedian :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andRound:(NSInteger)aaRound andMonth:(int)i{
	
	double currentValue;
	if (aaPolicyYear > YearDiff2025) {
		RiderVU2025PrevValueMedian = 0.00;
		return 0;
	}
	else{
		if ([aaYearOrMonth isEqualToString:@"M"]) {
			
			
			
			if (i == 1) {
				RiderMonthVU2025PrevValueMedian = RiderVU2025PrevValueMedian;
			}
			
			if (i > MonthDiff2025 && aaPolicyYear == YearDiff2025) {
				RiderVU2025PrevValueMedian = 0.00;
				RiderMonthVU2025PrevValueMedian = 0;
				return 0;
			}
			
			double tempPrev = RiderMonthVU2025PrevValueMedian;
			
			if(i == MonthDiff2023 + 1 && aaPolicyYear == YearDiff2023){
				RiderMonthVU2025PrevValueMedian = RiderMonthVU2025PrevValueMedian + (Ridertemp2023Median * Fund2023ReinvestTo2025Fac/100.00);
			}
			else{
				
			}
			
			if (RiderVUCashValueNegative == TRUE && RiderMonthFundValueOfTheYearValueTotalMedian != 0 ) {
				currentValue =((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVU2025Fac:aaPolicyYear  andMonth:i]  +
							   [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VU2025Factor/100.00 * [self ReturnPremiumFactor:i]) *
				pow(1 + [self ReturnVU2025InstMedian:@"A" ], 1.00/12.00) + RiderMonthVU2025PrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
				pow(1 + [self ReturnVU2025InstMedian:@"A" ], 1.00/12.00) + (RiderNegativeValueOfMaxCashFundMedian - 1) *
				(MAX(0,(RiderMonthFundValueOfTheYearVU2025ValueMedian_Basic/RiderMonthFundValueOfTheYearValueTotalMedian)));
			}
			else{
				currentValue= ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVU2025Fac:aaPolicyYear  andMonth:i]  +
							   [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VU2025Factor/100.00 * [self ReturnPremiumFactor:i]) *
				pow(1 + [self ReturnVU2025InstMedian:@"A" ], 1.00/12.00) + RiderMonthVU2025PrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
				pow(1 + [self ReturnVU2025InstMedian:@"A" ], 1.00/12.00);
			}
			
			if (i == MonthDiff2025 && aaPolicyYear == YearDiff2025) {
				if (Fund2025PartialReinvest != 100) {
					MonthFundMaturityValue2025_Flat = RiderMonthVU2025PrevValueMedian * (100 - Fund2025PartialReinvest)/100.00;
					
					Ridertemp2025Median = currentValue * (100 - Fund2025PartialReinvest)/100.00;
					RiderWithdrawtemp2025Median = currentValue * (Fund2025PartialReinvest)/100.00;
					//NSLog(@"%f", temp2028High);
				}
				else{
					MonthFundMaturityValue2025_Flat = 0;
				}
				if (aaRound == 2){
					RiderMonthVU2025PrevValueMedian = 0;
				}
				else{
					RiderMonthVU2025PrevValueMedian = tempPrev;
				}
				
			}
			else{
				if (aaRound == 2){
					RiderMonthVU2025PrevValueMedian = currentValue;
				}
				else{
					RiderMonthVU2025PrevValueMedian = tempPrev;
				}
				
			}
			
			
			if (aaRound == 2 && i == 12) {
				RiderVU2025PrevValueMedian = RiderMonthVU2025PrevValueMedian;
			}
			
			
			return currentValue;
		}
		else{
			if (RiderVUCashValueNegative == TRUE && RiderFundValueOfTheYearValueTotalMedian != 0 ) {
				currentValue =((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ]) + IncreasePrem) * [self ReturnVU2025Fac:aaPolicyYear]  +
							   [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VU2025Factor/100.00 * [self ReturnPremiumFactor:i]) *
				(1 + VU2025InstMedian) + RiderVU2025PrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVU2025InstMedian:@"A"]) + (RiderNegativeValueOfMaxCashFundMedian - 1) *
				(MAX(0,(RiderFundValueOfTheYearVU2025ValueMedian_Basic/RiderFundValueOfTheYearValueTotalMedian)));
			}
			else{
				if (aaRound == 1) {
					currentValue= ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ]) + IncreasePrem) * [self ReturnVU2025Fac:aaPolicyYear]  +
								   [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VU2025Factor/100.00 * [self ReturnPremiumFactor:i]) *
					(1 + VU2025InstMedian) + RiderVU2025PrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVU2025InstMedian:@"A"]);
					
					RiderVU2025ValueMedian = currentValue;
				}
				else{
					currentValue = RiderVU2025ValueMedian;
				}
				
			}
			
			if (aaRound == 2) {
				RiderVU2025PrevValueMedian = currentValue;
			}
			
			return currentValue;
		}
		
	}
	
	// below part to be edit later
}


-(double)ReturnRiderVU2025ValueLow :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andRound:(NSInteger)aaRound andMonth:(int)i{
	
	double currentValue;
	if (aaPolicyYear > YearDiff2025) {
		RiderVU2025PrevValueLow = 0.00;
		return 0;
	}
	else{
		if ([aaYearOrMonth isEqualToString:@"M"]) {
			
			
			
			if (i == 1) {
				RiderMonthVU2025PrevValueLow = RiderVU2025PrevValueLow;
			}
			
			if (i > MonthDiff2025 && aaPolicyYear == YearDiff2025) {
				RiderVU2025PrevValueLow = 0.00;
				RiderMonthVU2025PrevValueLow = 0;
				return 0;
			}
			
			double tempPrev = RiderMonthVU2025PrevValueLow;
			
			if(i == MonthDiff2023 + 1 && aaPolicyYear == YearDiff2023){
				RiderMonthVU2025PrevValueLow = RiderMonthVU2025PrevValueLow + (Ridertemp2023Low * Fund2023ReinvestTo2025Fac/100.00);
			}
			else{
				
			}
			
			if (RiderVUCashValueNegative == TRUE && RiderMonthFundValueOfTheYearValueTotalLow != 0 ) {
				currentValue =((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVU2025Fac:aaPolicyYear  andMonth:i] +
							   [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VU2025Factor/100.00 * [self ReturnPremiumFactor:i]) *
				pow(1 + [self ReturnVU2025InstLow:@"A" ], 1.00/12.00) + RiderMonthVU2025PrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
				pow(1 + [self ReturnVU2025InstLow:@"A" ], 1.00/12.00) + (RiderNegativeValueOfMaxCashFundLow - 1) *
				(MAX(0,(RiderMonthFundValueOfTheYearVU2025ValueLow_Basic/RiderMonthFundValueOfTheYearValueTotalLow)));
			}
			else{
				currentValue= ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ]  * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVU2025Fac:aaPolicyYear  andMonth:i]  +
							   [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VU2025Factor/100.00 * [self ReturnPremiumFactor:i]) *
				pow(1 + [self ReturnVU2025InstLow:@"A" ], 1.00/12.00) + RiderMonthVU2025PrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
				pow(1 + [self ReturnVU2025InstLow:@"A" ], 1.00/12.00);
			}
			
			if (i == MonthDiff2025 && aaPolicyYear == YearDiff2025) {
				if (Fund2025PartialReinvest != 100) {
					MonthFundMaturityValue2025_Bear = RiderMonthVU2025PrevValueLow * (100 - Fund2025PartialReinvest)/100.00;
					
					Ridertemp2025Low = currentValue * (100 - Fund2025PartialReinvest)/100.00;
					RiderWithdrawtemp2025Low = currentValue * (Fund2025PartialReinvest)/100.00;
					//NSLog(@"%f", temp2028High);
				}
				else{
					MonthFundMaturityValue2025_Bear = 0;
				}
				if (aaRound == 2){
					RiderMonthVU2025PrevValueLow = 0;
				}
				else{
					RiderMonthVU2025PrevValueLow = tempPrev;
				}
				
			}
			else{
				if (aaRound == 2){
					RiderMonthVU2025PrevValueLow = currentValue;
				}
				else{
					RiderMonthVU2025PrevValueLow = tempPrev;
				}
				
			}
			
			if (aaRound == 2 && i == 12) {
				RiderVU2025PrevValueLow = RiderMonthVU2025PrevValueLow;
			}
			
			
			return currentValue;
		}
		else{
			if (RiderVUCashValueNegative == TRUE && RiderFundValueOfTheYearValueTotalLow != 0 ) {
				currentValue =((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] ) + IncreasePrem) * [self ReturnVU2025Fac:aaPolicyYear] +
							   [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VU2025Factor/100.00 * [self ReturnPremiumFactor:i]) *
				(1 + VU2025InstLow) + RiderVU2025PrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVU2025InstLow:@"A"]) + (RiderNegativeValueOfMaxCashFundLow - 1) *
				(MAX(0,(RiderFundValueOfTheYearVU2025ValueLow_Basic/RiderFundValueOfTheYearValueTotalLow)));
			}
			else{
				if (aaRound == 1) {
					currentValue= ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ]) + IncreasePrem) * [self ReturnVU2025Fac:aaPolicyYear] +
								   [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VU2025Factor/100.00 * [self ReturnPremiumFactor:i]) *
					(1 + VU2025InstLow) + RiderVU2025PrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVU2025InstLow:@"A"]);
					
					RiderVU2025ValueLow = currentValue;
				}
				else{
					currentValue =RiderVU2025ValueLow;
				}
			}
			
			if (aaRound == 2) {
				RiderVU2025PrevValueLow = currentValue;
			}
			
			return currentValue;
		}
		
	}
	
	// below part to be edit later
}

-(double)ReturnRiderVU2028ValueHigh :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andRound:(NSInteger)aaRound andMonth:(int)i{
	
	double currentValue;
	if (aaPolicyYear > YearDiff2028) {
		RiderVU2028PrevValuehigh = 0.00;
		return 0;
	}
	else{
		if ([aaYearOrMonth isEqualToString:@"M"]) {
			
			
			if (i == 1) {
				RiderMonthVU2028PrevValuehigh = RiderVU2028PrevValuehigh;
			}
			
			if (i > MonthDiff2028 && aaPolicyYear == YearDiff2028) {
				RiderVU2028PrevValuehigh = 0.00;
				RiderMonthVU2028PrevValuehigh = 0;
				return 0;
			}
			
			double tempPrev = RiderMonthVU2028PrevValuehigh;
			if(i == MonthDiff2025 + 1 && aaPolicyYear == YearDiff2025){
				RiderMonthVU2028PrevValuehigh = RiderMonthVU2028PrevValuehigh + (Ridertemp2025High * Fund2025ReinvestTo2028Fac/100.00);
			}
			else if(i == MonthDiff2023 + 1 && aaPolicyYear == YearDiff2023){
				RiderMonthVU2028PrevValuehigh = RiderMonthVU2028PrevValuehigh + (Ridertemp2023High * Fund2023ReinvestTo2028Fac/100.00);
			}
			else{
				
			}
			
			if (RiderVUCashValueNegative == TRUE && RiderMonthFundValueOfTheYearValueTotalHigh != 0) {
				currentValue= ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVU2028Fac:aaPolicyYear  andMonth:i]  +
							   [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VU2028Factor/100.00 * [self ReturnPremiumFactor:i]) *
				pow(1 + [self ReturnVU2028InstHigh:@"A" ], 1.00/12.00) + RiderMonthVU2028PrevValuehigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
				pow(1 + [self ReturnVU2028InstHigh:@"A"], 1.00/12.00) + (RiderNegativeValueOfMaxCashFundHigh - 1) *
				(MAX(0,(RiderMonthFundValueOfTheYearVU2028ValueHigh_Basic/RiderMonthFundValueOfTheYearValueTotalHigh)));
			}
			else{
				currentValue = ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVU2028Fac:aaPolicyYear  andMonth:i] +
								[self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VU2028Factor/100.00 * [self ReturnPremiumFactor:i]) *
				pow(1 + [self ReturnVU2028InstHigh:@"A" ], 1.00/12.00)+ RiderMonthVU2028PrevValuehigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
				pow(1 + [self ReturnVU2028InstHigh:@"A"], 1.00/12.00);
			}
			
			if (i == MonthDiff2028 && aaPolicyYear == YearDiff2028) {
				if (Fund2028PartialReinvest != 100) {
					MonthFundMaturityValue2028_Bull = MonthVU2028PrevValuehigh * (100 - Fund2028PartialReinvest)/100.00;
					
					Ridertemp2028High = currentValue * (100 - Fund2028PartialReinvest)/100.00;
					RiderWithdrawtemp2028High = currentValue * (Fund2028PartialReinvest)/100.00;
					//NSLog(@"%f", temp2028High);
				}
				else{
					MonthFundMaturityValue2028_Bull = 0;
				}
				if (aaRound == 2) {
					RiderMonthVU2028PrevValuehigh = 0;
				}
				else{
					RiderMonthVU2028PrevValuehigh = tempPrev;
				}
			}
			else{
				if (aaRound == 2) {
					RiderMonthVU2028PrevValuehigh = currentValue;
				}
				else{
					RiderMonthVU2028PrevValuehigh = tempPrev;
				}
				
			}
			
			if (i == 12 && aaRound == 2) {
				RiderVU2028PrevValuehigh = RiderMonthVU2028PrevValuehigh;
			}
			
			return currentValue;
			
		}
		else{
			if (RiderVUCashValueNegative == TRUE && RiderFundValueOfTheYearValueTotalHigh != 0) {
				currentValue= ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ]) + IncreasePrem) * [self ReturnVU2028Fac:aaPolicyYear]  +
							   [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VU2028Factor/100.00 * [self ReturnPremiumFactor:i]) *
				(1 + VU2028InstHigh) + RiderVU2028PrevValuehigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVU2028InstHigh:@"A"]) + (RiderNegativeValueOfMaxCashFundHigh - 1) *
				(MAX(0,(RiderFundValueOfTheYearVU2028ValueHigh_Basic/RiderFundValueOfTheYearValueTotalHigh)));
			}
			else{
				if (aaRound == 1) {
					currentValue = ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ]) + IncreasePrem) * [self ReturnVU2028Fac:aaPolicyYear] +
									[self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VU2028Factor/100.00 * [self ReturnPremiumFactor:i]) *
					(1 + VU2028InstHigh) + RiderVU2028PrevValuehigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVU2028InstHigh:@"A"]);
					RiderVU2028ValueHigh = currentValue;
				}
				else{
					currentValue = RiderVU2028ValueHigh;
				}
				
			}
			
			if (aaRound == 2) {
				RiderVU2028PrevValuehigh = currentValue;
			}
			
			return currentValue;
			
		}
		
	}
	
}

-(double)ReturnRiderVU2028ValueMedian :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andRound:(NSInteger)aaRound andMonth:(int)i{
	
	double currentValue;
	if (aaPolicyYear > YearDiff2028) {
		RiderVU2028PrevValueMedian = 0.00;
		return 0;
	}
	else{
		if ([aaYearOrMonth isEqualToString:@"M"]) {
			
			
			if (i == 1) {
				RiderMonthVU2028PrevValueMedian = RiderVU2028PrevValueMedian;
			}
			
			if (i > MonthDiff2028 && aaPolicyYear == YearDiff2028) {
				RiderVU2028PrevValueMedian = 0.00;
				RiderMonthVU2028PrevValueMedian = 0;
				return 0;
			}
			
			double tempPrev = RiderMonthVU2028PrevValueMedian;
			if(i == MonthDiff2025 + 1 && aaPolicyYear == YearDiff2025){
				RiderMonthVU2028PrevValueMedian = RiderMonthVU2028PrevValueMedian + (Ridertemp2025Median * Fund2025ReinvestTo2028Fac/100.00);
			}
			else if(i == MonthDiff2023 + 1 && aaPolicyYear == YearDiff2023){
				RiderMonthVU2028PrevValueMedian = RiderMonthVU2028PrevValueMedian + (Ridertemp2023Median * Fund2023ReinvestTo2028Fac/100.00);
			}
			else{
				
			}
			
			if (RiderVUCashValueNegative == TRUE && RiderMonthFundValueOfTheYearValueTotalMedian != 0) {
				currentValue= ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVU2028Fac:aaPolicyYear  andMonth:i] +
							   [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VU2028Factor/100.00 * [self ReturnPremiumFactor:i]) *
				pow(1 + [self ReturnVU2028InstMedian:@"A" ], 1.00/12.00) + RiderMonthVU2028PrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
				pow(1 + [self ReturnVU2028InstMedian:@"A"],1.00/12.00) + (RiderNegativeValueOfMaxCashFundMedian - 1) *
				(MAX(0,(RiderMonthFundValueOfTheYearVU2028ValueMedian_Basic/RiderMonthFundValueOfTheYearValueTotalMedian)));
			}
			else{
				currentValue = ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVU2028Fac:aaPolicyYear  andMonth:i] +
								[self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VU2028Factor/100.00 * [self ReturnPremiumFactor:i]) *
				pow(1 + [self ReturnVU2028InstMedian:@"A" ], 1.00/12.00)+ RiderMonthVU2028PrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
				pow(1 + [self ReturnVU2028InstMedian:@"A"], 1.00/12.00);
			}
			if (i == MonthDiff2028 && aaPolicyYear == YearDiff2028) {
				if (Fund2028PartialReinvest != 100) {
					MonthFundMaturityValue2028_Flat = RiderMonthVU2028PrevValueMedian * (100 - Fund2028PartialReinvest)/100.00;
					
					Ridertemp2028Median = currentValue * (100 - Fund2028PartialReinvest)/100.00;
					RiderWithdrawtemp2028Median = currentValue * (Fund2028PartialReinvest)/100.00;
				}
				else{
					MonthFundMaturityValue2028_Flat = 0;
				}
				
				if (aaRound == 2) {
					RiderMonthVU2028PrevValueMedian = 0;
				}
				else{
					RiderMonthVU2028PrevValueMedian = tempPrev;
				}
			}
			else{
				if (aaRound == 2) {
					RiderMonthVU2028PrevValueMedian = currentValue;
				}
				else{
					RiderMonthVU2028PrevValueMedian = tempPrev;
				}
				
			}
			
			if (i == 12 && aaRound == 2) {
				RiderVU2028PrevValueMedian = RiderMonthVU2028PrevValueMedian;
			}
			
			
			return currentValue;
		}
		else{
			if (RiderVUCashValueNegative == TRUE && RiderFundValueOfTheYearValueTotalMedian != 0) {
				currentValue= ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ]) + IncreasePrem) * [self ReturnVU2028Fac:aaPolicyYear] +
							   [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VU2028Factor/100.00 * [self ReturnPremiumFactor:i]) *
				(1 + VU2028InstMedian) + RiderVU2028PrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVU2028InstMedian:@"A"]) + (RiderNegativeValueOfMaxCashFundMedian - 1) *
				(MAX(0,(RiderFundValueOfTheYearVU2028ValueMedian_Basic/RiderFundValueOfTheYearValueTotalMedian)));
			}
			else{
				if (aaRound == 1) {
					currentValue = ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ]) + IncreasePrem) * [self ReturnVU2028Fac:aaPolicyYear] +
									[self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VU2028Factor/100.00 * [self ReturnPremiumFactor:i]) *
					(1 + VU2028InstMedian) + RiderVU2028PrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVU2028InstMedian:@"A"]);
					RiderVU2028ValueMedian = currentValue;
				}
				else{
					currentValue = RiderVU2028ValueMedian;
				}
				
			}
			
			if (aaRound == 2) {
				RiderVU2028PrevValueMedian = currentValue;
			}
			
			return currentValue;
		}
		
	}
	
}

-(double)ReturnRiderVU2028ValueLow :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andRound:(NSInteger)aaRound andMonth:(int)i{
	
	double currentValue;
	if (aaPolicyYear > YearDiff2028) {
		RiderVU2028PrevValueLow = 0.00;
		return 0;
	}
	else{
		if ([aaYearOrMonth isEqualToString:@"M"]) {
			
			if (i == 1) {
				RiderMonthVU2028PrevValueLow = RiderVU2028PrevValueLow;
			}
			
			if (i > MonthDiff2028 && aaPolicyYear == YearDiff2028) {
				RiderVU2028PrevValueLow = 0.00;
				RiderMonthVU2028PrevValueLow = 0;
				return 0;
			}
			
			double tempPrev = RiderMonthVU2028PrevValueLow;
			if(i == MonthDiff2025 + 1 && aaPolicyYear == YearDiff2025){
				RiderMonthVU2028PrevValueLow = RiderMonthVU2028PrevValueLow + (Ridertemp2025Low * Fund2025ReinvestTo2028Fac/100.00);
			}
			else if(i == MonthDiff2023 + 1 && aaPolicyYear == YearDiff2023){
				RiderMonthVU2028PrevValueLow = RiderMonthVU2028PrevValueLow + (Ridertemp2023Low * Fund2023ReinvestTo2028Fac/100.00);
			}
			else{
				
			}
			
			if (RiderVUCashValueNegative == TRUE && RiderMonthFundValueOfTheYearValueTotalLow != 0) {
				currentValue= ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVU2028Fac:aaPolicyYear  andMonth:i] +
							   [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VU2028Factor/100.00 * [self ReturnPremiumFactor:i]) *
				pow(1 + [self ReturnVU2028InstLow:@"A" ], 1.00/12.00) + RiderMonthVU2028PrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
				pow(1 + [self ReturnVU2028InstLow:@"A"],1.00/12.00) + (RiderNegativeValueOfMaxCashFundLow - 1) *
				(MAX(0,(RiderMonthFundValueOfTheYearVU2028ValueLow_Basic/RiderMonthFundValueOfTheYearValueTotalLow)));
			}
			else{
				currentValue = ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVU2028Fac:aaPolicyYear  andMonth:i] +
								[self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VU2028Factor/100.00 * [self ReturnPremiumFactor:i]) *
				pow(1 + [self ReturnVU2028InstLow:@"A" ], 1.00/12.00)+ RiderMonthVU2028PrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
				pow(1 + [self ReturnVU2028InstLow:@"A"], 1.00/12.00);
			}
			if (i == MonthDiff2028 && aaPolicyYear == YearDiff2028) {
				if (Fund2028PartialReinvest != 100) {
					MonthFundMaturityValue2028_Bear = RiderMonthVU2028PrevValueLow * (100 - Fund2028PartialReinvest)/100.00;
					
					Ridertemp2028Low = currentValue * (100 - Fund2028PartialReinvest)/100.00;
					RiderWithdrawtemp2028Low = currentValue * (Fund2028PartialReinvest)/100.00;
				}
				else{
					MonthFundMaturityValue2028_Bear = 0;
				}
				
				if (aaRound == 2) {
					RiderMonthVU2028PrevValueLow = 0;
				}
				else{
					RiderMonthVU2028PrevValueLow = tempPrev;
				}
				
			}
			else{
				if (aaRound == 2) {
					RiderMonthVU2028PrevValueLow = currentValue;
				}
				else{
					RiderMonthVU2028PrevValueLow = tempPrev;
				}
				
			}
			
			if (i == 12 && aaRound == 2) {
				RiderVU2028PrevValueLow = RiderMonthVU2028PrevValueLow;
			}
			
			
			return currentValue;
		}
		else{
			if (RiderVUCashValueNegative == TRUE && RiderFundValueOfTheYearValueTotalLow != 0) {
				currentValue= ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ]) + IncreasePrem) * [self ReturnVU2028Fac:aaPolicyYear] +
							   [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VU2028Factor/100.00 * [self ReturnPremiumFactor:i]) *
				(1 + VU2028InstLow) + RiderVU2028PrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVU2028InstLow:@"A"]) + (RiderNegativeValueOfMaxCashFundLow - 1) *
				(MAX(0,(RiderFundValueOfTheYearVU2028ValueLow_Basic/RiderFundValueOfTheYearValueTotalLow)));
			}
			else{
				if (aaRound == 1) {
					currentValue = ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ]) + IncreasePrem) * [self ReturnVU2028Fac:aaPolicyYear] +
									[self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VU2028Factor/100.00 * [self ReturnPremiumFactor:i]) *
					(1 + VU2028InstLow) + RiderVU2028PrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVU2028InstLow:@"A"]);
					RiderVU2028ValueLow = currentValue;
				}
				else{
					currentValue = RiderVU2028ValueLow;
				}
				
			}
			
			if (aaRound == 2) {
				RiderVU2028PrevValueLow = currentValue;
			}
			
			return currentValue;
		}
		
	}
	
}

-(double)ReturnRiderVU2030ValueHigh :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andRound:(NSInteger)aaRound andMonth:(int)i{
	
	double currentValue;
	if (aaPolicyYear > YearDiff2030) {
		RiderVU2030PrevValuehigh = 0.00;
		return 0;
	}
	else{
		if ([aaYearOrMonth isEqualToString:@"M"]) {
			
			if (i == 1) {
				RiderMonthVU2030PrevValuehigh = RiderVU2030PrevValuehigh;
			}
			
			if (i > MonthDiff2030 && aaPolicyYear == YearDiff2030) {
				RiderVU2030PrevValuehigh = 0.00;
				RiderMonthVU2030PrevValuehigh = 0;
				return 0;
			}
			
			double tempPrev = RiderMonthVU2030PrevValuehigh;
			if(i == MonthDiff2028 + 1 && aaPolicyYear == YearDiff2028){
				RiderMonthVU2030PrevValuehigh = RiderMonthVU2030PrevValuehigh + (Ridertemp2028High * Fund2028ReinvestTo2030Fac/100.00);
			}
			else if(i == MonthDiff2025 + 1 && aaPolicyYear == YearDiff2025){
				RiderMonthVU2030PrevValuehigh = RiderMonthVU2030PrevValuehigh + (Ridertemp2025High * Fund2025ReinvestTo2030Fac/100.00);
			}
			else if(i == MonthDiff2023 + 1 && aaPolicyYear == YearDiff2023){
				RiderMonthVU2030PrevValuehigh = RiderMonthVU2030PrevValuehigh + (Ridertemp2023High * Fund2023ReinvestTo2030Fac/100.00);
			}
			else{
				
			}
			
			if (RiderVUCashValueNegative == TRUE && RiderMonthFundValueOfTheYearValueTotalHigh != 0) {
				currentValue= ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVU2030Fac:aaPolicyYear  andMonth:i]  +
							   [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VU2030Factor/100.00 * [self ReturnPremiumFactor:i]) *
				pow(1 + [self ReturnVU2030InstHigh:@"A" ], 1.00/12.00) + RiderMonthVU2030PrevValuehigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
				pow(1 + [self ReturnVU2030InstHigh:@"A"], 1.00/12.00)  + (RiderNegativeValueOfMaxCashFundHigh - 1) *
				(MAX(0,(RiderMonthFundValueOfTheYearVU2030ValueHigh_Basic/RiderMonthFundValueOfTheYearValueTotalHigh)));
			}
			else{
				currentValue = ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVU2030Fac:aaPolicyYear  andMonth:i]  +
								[self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VU2030Factor/100.00 * [self ReturnPremiumFactor:i]) *
				pow(1 + [self ReturnVU2030InstHigh:@"A" ], 1.00/12.00) + RiderMonthVU2030PrevValuehigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
				pow(1 + [self ReturnVU2030InstHigh:@"A"], 1.00/12.00);
			}
			
			if (i == MonthDiff2030 && aaPolicyYear == YearDiff2030) {
				if (Fund2030PartialReinvest != 100) {
					MonthFundMaturityValue2030_Bear = RiderMonthVU2030PrevValuehigh * (100 - Fund2030PartialReinvest)/100.00;
					
					Ridertemp2030High = currentValue * (100 - Fund2030PartialReinvest)/100.00;
					RiderWithdrawtemp2030High = currentValue * (Fund2030PartialReinvest)/100.00;
				}
				else{
					MonthFundMaturityValue2030_Bear = 0;
				}
				if (aaRound == 2) {
					RiderMonthVU2030PrevValuehigh = 0;
				}
				
			}
			else{
				if (aaRound == 2) {
					RiderMonthVU2030PrevValuehigh = currentValue;
				}
				else{
					RiderMonthVU2030PrevValuehigh = tempPrev;
				}
				
			}
			
			if (aaRound == 2 && i == 12) {
				RiderVU2030PrevValuehigh = RiderMonthVU2030PrevValuehigh;
			}
			
			return currentValue;
			
		}
		else{
			
			if (RiderVUCashValueNegative == TRUE && RiderFundValueOfTheYearValueTotalHigh != 0) {
				currentValue= ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ]) + IncreasePrem) * [self ReturnVU2030Fac:aaPolicyYear] +
							   [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VU2030Factor/100.00 * [self ReturnPremiumFactor:i]) *
				(1 + VU2030InstHigh) + RiderVU2030PrevValuehigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVU2030InstHigh:@"A"]) + (RiderNegativeValueOfMaxCashFundHigh - 1) *
				(MAX(0,(RiderFundValueOfTheYearVU2030ValueHigh_Basic/RiderFundValueOfTheYearValueTotalHigh)));
			}
			else{
				if (aaRound == 1) {
					currentValue = ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ]) + IncreasePrem) * [self ReturnVU2030Fac:aaPolicyYear]  +
									[self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VU2030Factor/100.00 * [self ReturnPremiumFactor:i]) *
					(1 + VU2030InstHigh) + RiderVU2030PrevValuehigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVU2030InstHigh:@"A"]);
					RiderVU2030ValueHigh = currentValue;
				}
				else{
					currentValue = RiderVU2030ValueHigh;
				}
				
			}
			
			if (aaRound == 2) {
				RiderVU2030PrevValuehigh = currentValue;
			}
			
			return currentValue;
			
		}
		
	}
	
	// below part to be edit later
}

-(double)ReturnRiderVU2030ValueMedian :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andRound:(NSInteger)aaRound andMonth:(int)i{
	
	double currentValue;
	if (aaPolicyYear > YearDiff2030) {
		RiderVU2030PrevValueMedian = 0.00;
		return 0;
	}
	else{
		if ([aaYearOrMonth isEqualToString:@"M"]) {
			
			
			if (i == 1) {
				RiderMonthVU2030PrevValueMedian = RiderVU2030PrevValueMedian;
			}
			
			if (i > MonthDiff2030 && aaPolicyYear == YearDiff2030) {
				RiderVU2030PrevValueMedian = 0.00;
				RiderMonthVU2030PrevValueMedian = 0;
				return 0;
			}
			
			double tempPrev = RiderMonthVU2030PrevValueMedian;
			if(i == MonthDiff2028 + 1 && aaPolicyYear == YearDiff2028){
				RiderMonthVU2030PrevValueMedian = RiderMonthVU2030PrevValueMedian + (Ridertemp2028Median * Fund2028ReinvestTo2030Fac/100.00);
			}
			else if(i == MonthDiff2025 + 1 && aaPolicyYear == YearDiff2025){
				RiderMonthVU2030PrevValueMedian = RiderMonthVU2030PrevValueMedian + (Ridertemp2025Median * Fund2025ReinvestTo2030Fac/100.00);
			}
			else if(i == MonthDiff2023 + 1 && aaPolicyYear == YearDiff2023){
				RiderMonthVU2030PrevValueMedian = RiderMonthVU2030PrevValueMedian + (Ridertemp2023Median * Fund2023ReinvestTo2030Fac/100.00);
			}
			else{
				
			}
			
			if (RiderVUCashValueNegative ==TRUE && RiderMonthFundValueOfTheYearValueTotalMedian != 0) {
				currentValue= ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVU2030Fac:aaPolicyYear andMonth:i] +
							   [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VU2030Factor/100.00 * [self ReturnPremiumFactor:i]) *
				pow(1 + [self ReturnVU2030InstMedian:@"A" ], 1.00/12.00) + RiderMonthVU2030PrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
				pow(1 + [self ReturnVU2030InstMedian:@"A"], 1.00/12.00) + (RiderNegativeValueOfMaxCashFundMedian - 1) *
				(MAX(0,(RiderMonthFundValueOfTheYearVU2030ValueMedian_Basic/RiderMonthFundValueOfTheYearValueTotalMedian)));
			}
			else{
				currentValue = ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVU2030Fac:aaPolicyYear andMonth:i]  +
								[self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VU2030Factor/100.00 * [self ReturnPremiumFactor:i]) *
				pow(1 + [self ReturnVU2030InstMedian:@"A" ], 1.00/12.00) + RiderMonthVU2030PrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
				pow(1 + [self ReturnVU2030InstMedian:@"A"], 1.00/12.00);
			}
			
			if (i == MonthDiff2030 && aaPolicyYear == YearDiff2030) {
				if (Fund2030PartialReinvest != 100) {
					MonthFundMaturityValue2030_Flat = MonthVU2030PrevValueMedian * (100 - Fund2030PartialReinvest)/100.00;
					Ridertemp2030Median = currentValue * (100 - Fund2030PartialReinvest)/100.00;
					RiderWithdrawtemp2030Median = currentValue * (Fund2030PartialReinvest)/100.00;
				}
				else{
					MonthFundMaturityValue2030_Flat = 0;
				}
				if (aaRound == 2) {
					RiderMonthVU2030PrevValueMedian = 0;
				}
				
			}
			else{
				if (aaRound == 2) {
					RiderMonthVU2030PrevValueMedian = currentValue;
				}
				else{
					RiderMonthVU2030PrevValueMedian = tempPrev;
				}
			}
			
			if (aaRound == 2 && i == 12) {
				RiderVU2030PrevValueMedian = RiderMonthVU2030PrevValueMedian;
			}
			
			
			return currentValue;
			
		}
		else{
			if (RiderVUCashValueNegative == TRUE && RiderFundValueOfTheYearValueTotalMedian != 0) {
				currentValue= ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ]) + IncreasePrem) * [self ReturnVU2030Fac:aaPolicyYear] +
							   [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VU2030Factor/100.00 * [self ReturnPremiumFactor:i]) *
				(1 + VU2030InstMedian) + RiderVU2030PrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVU2030InstMedian:@"A"]) + (RiderNegativeValueOfMaxCashFundMedian - 1) *
				(MAX(0,(RiderFundValueOfTheYearVU2030ValueMedian_Basic/RiderFundValueOfTheYearValueTotalMedian)));
			}
			else{
				if (aaRound == 1) {
					currentValue = ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ]) + IncreasePrem) * [self ReturnVU2030Fac:aaPolicyYear] +
									[self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VU2030Factor/100.00 * [self ReturnPremiumFactor:i]) *
					(1 + VU2030InstMedian) + RiderVU2030PrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVU2030InstMedian:@"A"]);
					RiderVU2030ValueMedian = currentValue;
				}
				else{
					currentValue = RiderVU2030ValueMedian;
				}
				
			}
			
			if (aaRound == 2) {
				RiderVU2030PrevValueMedian = currentValue;
			}
			
			return currentValue;
			
		}
		
	}
	
	// below part to be edit later
}

-(double)ReturnRiderVU2030ValueLow :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andRound:(NSInteger)aaRound andMonth:(int)i{
	
	double currentValue;
	if (aaPolicyYear > YearDiff2030) {
		RiderVU2030PrevValueLow = 0.00;
		return 0;
	}
	else{
		if ([aaYearOrMonth isEqualToString:@"M"]) {
			
			if (i == 1) {
				RiderMonthVU2030PrevValueLow = RiderVU2030PrevValueLow;
			}
			
			if (i > MonthDiff2030 && aaPolicyYear == YearDiff2030) {
				RiderVU2030PrevValueLow = 0.00;
				RiderMonthVU2030PrevValueLow = 0;
				return 0;
			}
			
			double tempPrev = RiderMonthVU2030PrevValueLow;
			if(i == MonthDiff2028 + 1 && aaPolicyYear == YearDiff2028){
				RiderMonthVU2030PrevValueLow = RiderMonthVU2030PrevValueLow + (Ridertemp2028Low * Fund2028ReinvestTo2030Fac/100.00);
			}
			else if(i == MonthDiff2025 + 1 && aaPolicyYear == YearDiff2025){
				RiderMonthVU2030PrevValueLow = RiderMonthVU2030PrevValueLow + (Ridertemp2025Low * Fund2025ReinvestTo2030Fac/100.00);
			}
			else if(i == MonthDiff2023 + 1 && aaPolicyYear == YearDiff2023){
				RiderMonthVU2030PrevValueLow = RiderMonthVU2030PrevValueLow + (Ridertemp2023Low * Fund2023ReinvestTo2030Fac/100.00);
			}
			else{
				
			}
			
			if (RiderVUCashValueNegative == TRUE && RiderMonthFundValueOfTheYearValueTotalLow != 0) {
				currentValue= ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVU2030Fac:aaPolicyYear andMonth:i] +
							   [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VU2030Factor/100.00 * [self ReturnPremiumFactor:i]) *
				pow(1 + [self ReturnVU2030InstLow:@"A" ], 1.00/12.00) + RiderMonthVU2030PrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
				pow(1 + [self ReturnVU2030InstLow:@"A"], 1.00/12.00) + (RiderNegativeValueOfMaxCashFundLow - 1) *
				(MAX(0,(RiderMonthFundValueOfTheYearVU2030ValueLow_Basic/RiderMonthFundValueOfTheYearValueTotalLow)));
			}
			else{
				currentValue = ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVU2030Fac:aaPolicyYear andMonth:i] +
								[self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VU2030Factor/100.00 * [self ReturnPremiumFactor:i]) *
				pow(1 + [self ReturnVU2030InstLow:@"A" ], 1.00/12.00) + RiderMonthVU2030PrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
				pow(1 + [self ReturnVU2030InstLow:@"A"], 1.00/12.00);
			}
			
			if (i == MonthDiff2030 && aaPolicyYear == YearDiff2030) {
				if (Fund2030PartialReinvest != 100) {
					MonthFundMaturityValue2030_Bear = MonthVU2030PrevValueLow * (100 - Fund2030PartialReinvest)/100.00;
					Ridertemp2030Low = currentValue * (100 - Fund2030PartialReinvest)/100.00;
					RiderWithdrawtemp2030Low = currentValue * (Fund2030PartialReinvest)/100.00;
				}
				else{
					MonthFundMaturityValue2030_Bear = 0;
				}
				if (aaRound == 2) {
					RiderMonthVU2030PrevValueLow = 0;
				}
				
			}
			else{
				if (aaRound == 2) {
					RiderMonthVU2030PrevValueLow = currentValue;
				}
				else{
					RiderMonthVU2030PrevValueLow = tempPrev;
				}
				
			}
			
			if (aaRound == 2 && i == 12) {
				RiderVU2030PrevValueLow = RiderMonthVU2030PrevValueLow;
			}
			
			
			return currentValue;
			
		}
		else{
			if (RiderVUCashValueNegative == TRUE && RiderFundValueOfTheYearValueTotalLow != 0) {
				currentValue= ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ]) + IncreasePrem) * [self ReturnVU2030Fac:aaPolicyYear] +
							   [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VU2030Factor/100.00 * [self ReturnPremiumFactor:i]) *
				(1 + VU2030InstLow) + RiderVU2030PrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVU2030InstLow:@"A"]) + (RiderNegativeValueOfMaxCashFundLow - 1) *
				(MAX(0,(RiderFundValueOfTheYearVU2030ValueLow_Basic/RiderFundValueOfTheYearValueTotalLow)));
			}
			else{
				if (aaRound == 1) {
					currentValue = ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ]) + IncreasePrem) * [self ReturnVU2030Fac:aaPolicyYear]  +
									[self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VU2030Factor/100.00 * [self ReturnPremiumFactor:i]) *
					(1 + VU2030InstLow) + RiderVU2030PrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVU2030InstLow:@"A"]);
					RiderVU2030ValueLow = currentValue;
				}
				else{
					currentValue = RiderVU2030ValueLow;
				}
				
			}
			
			if (aaRound == 2) {
				RiderVU2030PrevValueLow = currentValue;
			}
			
			return currentValue;
			
		}
		
	}
	
	// below part to be edit later
}

-(double)ReturnRiderVU2035ValueHigh :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andRound:(NSInteger)aaRound andMonth:(NSInteger)i{
	
	double currentValue;
	if (aaPolicyYear > YearDiff2035) {
		RiderVU2035PrevValuehigh = 0.00;
		return 0;
	}
	else{
		if ([aaYearOrMonth isEqualToString:@"M"]) {
			
			
			if (i == 1) {
				RiderMonthVU2035PrevValuehigh = RiderVU2035PrevValuehigh;
			}
			
			if (i > MonthDiff2035 && aaPolicyYear == YearDiff2035) {
				RiderMonthVU2035PrevValuehigh = 0;
				RiderVU2035PrevValuehigh = 0.00;
				return 0;
			}
			
			double tempPrev = RiderMonthVU2035PrevValuehigh;
			if(i == MonthDiff2030 + 1 && aaPolicyYear == YearDiff2030){
				RiderMonthVU2035PrevValuehigh = RiderMonthVU2035PrevValuehigh + (Ridertemp2030High * Fund2030ReinvestTo2035Fac/100.00);
			}
			else if(i == MonthDiff2028 + 1 && aaPolicyYear == YearDiff2028){
				RiderMonthVU2035PrevValuehigh = RiderMonthVU2035PrevValuehigh + (Ridertemp2028High * Fund2028ReinvestTo2035Fac/100.00);
			}
			else if(i == MonthDiff2025 + 1 && aaPolicyYear == YearDiff2025){
				RiderMonthVU2035PrevValuehigh = RiderMonthVU2035PrevValuehigh + (Ridertemp2025High * Fund2025ReinvestTo2035Fac/100.00);
			}
			else if(i == MonthDiff2023 + 1 && aaPolicyYear == YearDiff2023){
				RiderMonthVU2035PrevValuehigh = RiderMonthVU2035PrevValuehigh + (Ridertemp2023High * Fund2023ReinvestTo2035Fac/100.00);
			}
			else{
				
			}
			
			if (RiderVUCashValueNegative == TRUE && RiderMonthFundValueOfTheYearValueTotalHigh != 0 ) {
				
				currentValue=  ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] * [self ReturnPremiumFactor:i] ) + IncreasePrem) * [self ReturnVU2035Fac:aaPolicyYear andMonth:i] +
								[self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VU2035Factor/100.00 * [self ReturnPremiumFactor:i]) *
				pow(1 + [self ReturnVU2035InstHigh:@"A"], 1.00/12.00) + RiderMonthVU2035PrevValuehigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
				pow(1 + [self ReturnVU2035InstHigh:@"A"], 1.00/12.00) + (RiderNegativeValueOfMaxCashFundHigh - 1) *
				(MAX(0, (RiderMonthFundValueOfTheYearVU2035ValueHigh_Basic/RiderMonthFundValueOfTheYearValueTotalHigh)));
				if (aaPolicyYear == 23) {
					//NSLog(@"%f %f %f", NegativeValueOfMaxCashFundHigh, MonthVU2035ValueHigh, MonthFundValueOfTheYearValueTotalHigh );
				}
			}
			else if (RiderVUCashValueNegative == TRUE && RiderMonthFundValueOfTheYearValueTotalHigh == 0 ) {
				currentValue = 0;
			}
			else{
				currentValue = ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVU2035Fac:aaPolicyYear andMonth:i] +
								[self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VU2035Factor/100.00 * [self ReturnPremiumFactor:i]) *
				pow(1 + [self ReturnVU2035InstHigh:@"A"], 1.00/12.00) + RiderMonthVU2035PrevValuehigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
				pow(1 + [self ReturnVU2035InstHigh:@"A"], 1.00/12.00);
			}
			
			if (i == MonthDiff2035 && aaPolicyYear == YearDiff2035) {
				if (Fund2035PartialReinvest != 100) {
					
					MonthFundMaturityValue2035_Bull = RiderMonthVU2035PrevValuehigh * (100 - Fund2035PartialReinvest)/100.00;
					
					Ridertemp2035High = currentValue * (100 - Fund2035PartialReinvest)/100.00;
					RiderWithdrawtemp2035High = currentValue * (Fund2035PartialReinvest)/100.00;
				}
				else{
					MonthFundMaturityValue2035_Bull = 0;
				}
				
				if (aaRound == 2) {
					RiderMonthVU2035PrevValuehigh = 0;
				}
				else{
					RiderMonthVU2035PrevValuehigh = tempPrev;
				}
				
			}
			
			else{
				
				if (aaRound == 2) {
					RiderMonthVU2035PrevValuehigh = currentValue;
				}
				else{
					RiderMonthVU2035PrevValuehigh = tempPrev;
				}
				
			}
			
			if (i == 12 && aaRound == 2) {
				RiderVU2035PrevValuehigh = RiderMonthVU2035PrevValuehigh;
			}
			
			
			//return MonthVU2035PrevValuehigh;
			return currentValue;
			
			
		}
		else{
			if (RiderVUCashValueNegative == TRUE && RiderFundValueOfTheYearValueTotalHigh != 0 ) {
				
				currentValue=  ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] ) + IncreasePrem) * [self ReturnVU2035Fac:aaPolicyYear] +
								[self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VU2035Factor/100.00 * [self ReturnPremiumFactor:i]) *
				(1 + VU2035InstHigh) + RiderVU2035PrevValuehigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVU2035InstHigh:@"A"]) + (RiderNegativeValueOfMaxCashFundHigh - 1) *
				(MAX(0,(RiderFundValueOfTheYearVU2035ValueHigh_Basic/RiderFundValueOfTheYearValueTotalHigh)));
			}
			else{
				if (aaRound == 1) {
					currentValue = ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ]) + IncreasePrem) * [self ReturnVU2035Fac:aaPolicyYear]  +
									[self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VU2035Factor/100.00 * [self ReturnPremiumFactor:i]) *
					(1 + VU2035InstHigh) + RiderVU2035PrevValuehigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVU2035InstHigh:@"A"]);
					
					RiderVU2035ValueHigh = currentValue;
				}
				else{
					currentValue = RiderVU2035ValueHigh;
				}
				
			}
			
			if (aaRound == 2) {
				RiderVU2035PrevValuehigh = currentValue;
			}
			
			
			return currentValue;
		}
		
		
	}
}

-(double)ReturnRiderVU2035ValueMedian :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andRound:(NSInteger)aaRound andMonth:(int)i{
	
	double currentValue;
	if (aaPolicyYear > YearDiff2035) {
		RiderVU2035PrevValueMedian = 0.00;
		return 0;
	}
	else{
		if ([aaYearOrMonth isEqualToString:@"M"]) {
			
			if (i == 1) {
				RiderMonthVU2035PrevValueMedian = RiderVU2035PrevValueMedian;
			}
			
			if (i > MonthDiff2035 && aaPolicyYear == YearDiff2035) {
				RiderVU2035PrevValueMedian = 0.00;
				RiderMonthVU2035PrevValueMedian = 0;
				return 0;
			}
			
			double tempPrev = RiderMonthVU2035PrevValueMedian;
			if(i == MonthDiff2030 + 1 && aaPolicyYear == YearDiff2030){
				RiderMonthVU2035PrevValueMedian = RiderMonthVU2035PrevValueMedian + (Ridertemp2030Median * Fund2030ReinvestTo2035Fac/100.00);
			}
			else if(i == MonthDiff2028 + 1 && aaPolicyYear == YearDiff2028){
				RiderMonthVU2035PrevValueMedian = RiderMonthVU2035PrevValueMedian + (Ridertemp2028Median * Fund2028ReinvestTo2035Fac/100.00);
			}
			else if(i == MonthDiff2025 + 1 && aaPolicyYear == YearDiff2025){
				RiderMonthVU2035PrevValueMedian = RiderMonthVU2035PrevValueMedian + (Ridertemp2025Median * Fund2025ReinvestTo2035Fac/100.00);
			}
			else if(i == MonthDiff2023 + 1 && aaPolicyYear == YearDiff2023){
				RiderMonthVU2035PrevValueMedian = RiderMonthVU2035PrevValueMedian + (Ridertemp2023Median * Fund2023ReinvestTo2035Fac/100.00);
			}
			else{
				
			}
			
			if (RiderVUCashValueNegative == TRUE && RiderMonthFundValueOfTheYearValueTotalMedian != 0 ) {
				
				currentValue=  ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVU2035Fac:aaPolicyYear andMonth:i] +
								[self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VU2035Factor/100.00 * [self ReturnPremiumFactor:i]) *
				pow((1 + [self ReturnVU2035InstMedian:@"A"]), (1.00/12.00)) + RiderMonthVU2035PrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
				pow((1 + [self ReturnVU2035InstMedian:@"A"]), (1.00/12.00)) + (RiderNegativeValueOfMaxCashFundMedian - 1) *
				(MAX(0,(RiderMonthFundValueOfTheYearVU2035ValueMedian_Basic/RiderMonthFundValueOfTheYearValueTotalMedian)));
			}
			else{
				currentValue = ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] *[self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVU2035Fac:aaPolicyYear andMonth:i] +
								[self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VU2035Factor/100.00 * [self ReturnPremiumFactor:i]) *
				pow((1 + [self ReturnVU2035InstMedian:@"A" ]), (1.00/12.00)) + RiderMonthVU2035PrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
				pow((1 + [self ReturnVU2035InstMedian:@"A"]), (1.00/12.00));
			}
			
			
			if (i == MonthDiff2035 && aaPolicyYear == YearDiff2035) {
				if (Fund2035PartialReinvest != 100) {
					MonthFundMaturityValue2035_Flat = RiderMonthVU2035PrevValueMedian * (100 - Fund2035PartialReinvest)/100.00;
					Ridertemp2035Median = currentValue * (100 - Fund2035PartialReinvest)/100.00;
					RiderWithdrawtemp2035Median = currentValue * (Fund2035PartialReinvest)/100.00;
				}
				else{
					MonthFundMaturityValue2035_Flat = 0;
				}
				if (aaRound == 2) {
					RiderMonthVU2035PrevValueMedian = 0;
				}
				else{
					RiderMonthVU2035PrevValueMedian = tempPrev;
				}
				
			}
			else{
				if (aaRound == 2) {
					RiderMonthVU2035PrevValueMedian = currentValue;
				}
				else{
					RiderMonthVU2035PrevValueMedian = tempPrev;
				}
				
			}
			
			if (i == 12 && aaRound == 2) {
				RiderVU2035PrevValueMedian = RiderMonthVU2035PrevValueMedian;
			}
			
			//return MonthVU2035PrevValueMedian;
			return currentValue;
		}
		else{
			if (RiderVUCashValueNegative == TRUE && RiderFundValueOfTheYearValueTotalMedian != 0 ) {
				
				currentValue=  ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] ) + IncreasePrem) * [self ReturnVU2035Fac:aaPolicyYear]  +
								[self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VU2035Factor/100.00 * [self ReturnPremiumFactor:i]) *
				(1 + VU2035InstMedian) + RiderVU2035PrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVU2035InstMedian:@"A"]) + (RiderNegativeValueOfMaxCashFundMedian - 1) *
				(MAX(0,(RiderFundValueOfTheYearVU2035ValueMedian_Basic/RiderFundValueOfTheYearValueTotalMedian)));
			}
			else{
				if (aaRound == 1) {
					currentValue = ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ]) + IncreasePrem) * [self ReturnVU2035Fac:aaPolicyYear] +
									[self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VU2035Factor/100.00 * [self ReturnPremiumFactor:i]) *
					(1 + VU2035InstMedian) + RiderVU2035PrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVU2035InstMedian:@"A"]);
					RiderVU2035ValueMedian = currentValue;
				}
				else{
					currentValue = RiderVU2035ValueMedian;
				}
			}
			
			if (aaRound == 2) {
				RiderVU2035PrevValueMedian = currentValue;
			}
			
			return currentValue;
		}
		
		
	}
}

-(double)ReturnRiderVU2035ValueLow :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andRound:(NSInteger)aaRound andMonth:(int)i{
	
	double currentValue;
	if (aaPolicyYear > YearDiff2035) {
		RiderVU2035PrevValueLow = 0.00;
		return 0;
	}
	else{
		if ([aaYearOrMonth isEqualToString:@"M"]) {
			
			if (i == 1) {
				RiderMonthVU2035PrevValueLow = RiderVU2035PrevValueLow;
			}
			
			if (i > MonthDiff2035 && aaPolicyYear == YearDiff2035) {
				RiderVU2035PrevValueLow = 0.00;
				RiderMonthVU2035PrevValueLow = 0;
				return 0;
			}
			
			double tempPrev = RiderMonthVU2035PrevValueLow;
			if(i == MonthDiff2030 + 1 && aaPolicyYear == YearDiff2030){
				RiderMonthVU2035PrevValueLow = RiderMonthVU2035PrevValueLow + (Ridertemp2030Low * Fund2030ReinvestTo2035Fac/100.00);
			}
			else if(i == MonthDiff2028 + 1 && aaPolicyYear == YearDiff2028){
				RiderMonthVU2035PrevValueLow = RiderMonthVU2035PrevValueLow + (Ridertemp2028Low * Fund2028ReinvestTo2035Fac/100.00);
			}
			else if(i == MonthDiff2025 + 1 && aaPolicyYear == YearDiff2025){
				RiderMonthVU2035PrevValueLow = RiderMonthVU2035PrevValueLow + (Ridertemp2025Low * Fund2025ReinvestTo2035Fac/100.00);
			}
			else if(i == MonthDiff2023 + 1 && aaPolicyYear == YearDiff2023){
				RiderMonthVU2035PrevValueLow = RiderMonthVU2035PrevValueLow + (Ridertemp2023Low * Fund2023ReinvestTo2035Fac/100.00);
			}
			else{
				
			}
			
			if (RiderVUCashValueNegative == TRUE && RiderMonthFundValueOfTheYearValueTotalLow != 0 ) {
				
				currentValue=  ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVU2035Fac:aaPolicyYear andMonth:i]  +
								[self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VU2035Factor/100.00 * [self ReturnPremiumFactor:i]) *
				pow((1 + [self ReturnVU2035InstLow:@"A"]), (1.00/12.00)) + RiderMonthVU2035PrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
				pow((1 + [self ReturnVU2035InstLow:@"A"]), (1.00/12.00)) + (RiderNegativeValueOfMaxCashFundLow - 1) *
				(MAX(0,(RiderMonthFundValueOfTheYearVU2035ValueLow_Basic/RiderMonthFundValueOfTheYearValueTotalLow)));
			}
			else{
				currentValue = ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] *[self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVU2035Fac:aaPolicyYear andMonth:i] +
								[self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VU2035Factor/100.00 * [self ReturnPremiumFactor:i]) *
				pow((1 + [self ReturnVU2035InstLow:@"A" ]), (1.00/12.00)) + RiderMonthVU2035PrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
				pow((1 + [self ReturnVU2035InstLow:@"A"]), (1.00/12.00));
			}
			
			
			if (i == MonthDiff2035 && aaPolicyYear == YearDiff2035) {
				if (Fund2035PartialReinvest != 100) {
					MonthFundMaturityValue2035_Bear = MonthVU2035PrevValueLow * (100 - Fund2035PartialReinvest)/100.00;
					Ridertemp2035Low = currentValue * (100 - Fund2035PartialReinvest)/100.00;
					RiderWithdrawtemp2035Low = currentValue * (Fund2035PartialReinvest)/100.00;
				}
				else{
					MonthFundMaturityValue2035_Bear = 0;
				}
				
				if (aaRound == 2) {
					RiderMonthVU2035PrevValueLow = 0;
				}
				else{
					RiderMonthVU2035PrevValueLow = tempPrev;
				}
				
			}
			else{
				if (aaRound == 2) {
					RiderMonthVU2035PrevValueLow = currentValue;
				}
				else{
					RiderMonthVU2035PrevValueLow = tempPrev;
				}
			}
			
			if (aaRound == 2 && i == 12) {
				RiderVU2035PrevValueLow = RiderMonthVU2035PrevValueLow;
			}
			
			//return MonthVU2035PrevValueLow;
			return currentValue;
		}
		else{
			if (RiderVUCashValueNegative == TRUE && RiderFundValueOfTheYearValueTotalLow != 0 ) {
				
				currentValue=  ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] ) + IncreasePrem) * [self ReturnVU2035Fac:aaPolicyYear]  +
								[self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VU2035Factor/100.00 * [self ReturnPremiumFactor:i]) *
				(1 + VU2035InstLow) + RiderVU2035PrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVU2035InstLow:@"A"]) + (RiderNegativeValueOfMaxCashFundLow - 1) *
				(MAX(0,(RiderFundValueOfTheYearVU2035ValueLow_Basic/RiderFundValueOfTheYearValueTotalLow)));
			}
			else{
				if (aaRound == 1) {
					currentValue = ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] ) + IncreasePrem) * [self ReturnVU2035Fac:aaPolicyYear] +
									[self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VU2035Factor/100.00 * [self ReturnPremiumFactor:i]) *
					(1 + VU2035InstLow) + RiderVU2035PrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVU2035InstLow:@"A"]);
					RiderVU2035ValueLow = currentValue;
				}
				else{
					currentValue = RiderVU2035ValueLow;
				}
			}
			
			if (aaRound == 2) {
				RiderVU2035PrevValueLow = currentValue;
			}
			
			return currentValue;
		}
		
		
	}
}


-(double)ReturnRiderVUCashValueHigh :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMonth:(int)i {
	
	double tempValue = 0.00;
	
	if ([aaYearOrMonth isEqualToString:@"M"]) {
		
		if (i == 1) {
			RiderMonthVUCashPrevValueHigh = RiderVUCashPrevValueHigh;
		}
		
		if ((i == MonthDiff2035 + 1 && aaPolicyYear == YearDiff2035)  ) {
			
			RiderMonthVUCashPrevValueHigh = RiderMonthVUCashPrevValueHigh + (Ridertemp2035High * Fund2035ReinvestToCashFac/100.00);
		}
		else if(i == MonthDiff2030 + 1 && aaPolicyYear == YearDiff2030){
			RiderMonthVUCashPrevValueHigh = RiderMonthVUCashPrevValueHigh + (Ridertemp2030High * Fund2030ReinvestToCashFac/100.00);
		}
		else if(i == MonthDiff2028 + 1 && aaPolicyYear == YearDiff2028){
			//NSLog(@"%f", temp2028High);
			RiderMonthVUCashPrevValueHigh = RiderMonthVUCashPrevValueHigh + (Ridertemp2028High * Fund2028ReinvestToCashFac/100.00);
		}
		else if(i == MonthDiff2025 + 1 && aaPolicyYear == YearDiff2025){
			RiderMonthVUCashPrevValueHigh = RiderMonthVUCashPrevValueHigh + (Ridertemp2025High * Fund2025ReinvestToCashFac/100.00);
		}
		else if(i == MonthDiff2023 + 1 && aaPolicyYear == YearDiff2023){
			RiderMonthVUCashPrevValueHigh = RiderMonthVUCashPrevValueHigh + (Ridertemp2023High * Fund2023ReinvestToCashFac/100.00);
		}
		else{
			
		}
		
		tempValue = ((( [[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] * [self ReturnPremiumFactor:i] ) + IncreasePrem) * [self ReturnVUCashFac:aaPolicyYear andMonth:i] +
					 [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * [self ReturnVUCashFac:aaPolicyYear andMonth:i] * [self ReturnPremiumFactor:i]) *
		pow((1 + [self ReturnVUCashInstHigh:@"A"]), (1.00/12.00)) + RiderMonthVUCashPrevValueHigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
		pow((1 + [self ReturnVUCashInstHigh:@"A"]), (1.00/12.00)) - ([self ReturnRiderPolicyFee:aaPolicyYear] + [self ReturnTotalRiderMort:aaPolicyYear]);
		
		RiderMonthVUCashPrevValueHigh =  tempValue;
		//NSLog(@"%f", MonthVUCashPrevValueHigh);
		
		if (tempValue < 0) {
			RiderMonthVUCashPrevValueHigh = 1.00;
		}
		else{
			RiderMonthVUCashPrevValueHigh = tempValue;
		}
		
		if (i == 12) {
			RiderVUCashPrevValueHigh = RiderMonthVUCashPrevValueHigh;
		}
		
		if (tempValue < 0 && RiderMonthFundValueOfTheYearValueTotalHigh != 0) {
			RiderNegativeValueOfMaxCashFundHigh = tempValue;
			RiderVUCashValueNegative = TRUE;
			return RiderMonthVUCashPrevValueHigh;
		} else {
			RiderNegativeValueOfMaxCashFundHigh = tempValue;
			RiderVUCashValueNegative = FALSE;
			return RiderMonthVUCashPrevValueHigh + 0; // to be edit later
		}
		
	}
	else
	{
     
		tempValue = ((( [[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ]) + IncreasePrem) * [self ReturnVUCashFac:aaPolicyYear] +
					 [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * [self ReturnVUCashFac:aaPolicyYear] * [self ReturnPremiumFactor:i]) *
		(1 + [self ReturnVUCashInstHigh:@""]) + RiderVUCashPrevValueHigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUCashInstHigh:@"A"]) -
		([self ReturnRiderPolicyFee:aaPolicyYear ] + [self ReturnTotalRiderMort:aaPolicyYear]) * [self ReturnVUCashHigh];
        
        
		//NSLog(@"%f, %f", [self ReturnRiderPolicyFee:aaPolicyYear ], [self ReturnTotalRiderMort:aaPolicyYear] );
		
		
		
		if (tempValue < 0) {
			RiderVUCashPrevValueHigh = 1.00;
		}
		else{
			RiderVUCashPrevValueHigh = tempValue;
		}
		
		
		//VUCashPrevValueHigh = tempValue;
		if (tempValue < 0 && RiderFundValueOfTheYearValueTotalHigh != 0) {
			//NegativeValueOfMaxCashFundHigh = tempValue;
			RiderNegativeValueOfMaxCashFundHigh = tempValue;
			RiderVUCashValueNegative = TRUE;
			return RiderVUCashPrevValueHigh;
		} else {
			RiderVUCashValueNegative = FALSE;
			RiderNegativeValueOfMaxCashFundHigh = tempValue;
			return tempValue + 0; // to be edit later
		}
	}
	
	
	
	
	
}

-(double)ReturnRiderVUCashValueMedian :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMonth:(int)i{
	
	double tempValue = 0.00;
	if ([aaYearOrMonth isEqualToString:@"M"]) {
		
		if (i == 1) {
			RiderMonthVUCashPrevValueMedian = RiderVUCashPrevValueMedian;
		}
		
		if ((i == MonthDiff2035 + 1 && aaPolicyYear == YearDiff2035)  ) {
			RiderMonthVUCashPrevValueMedian = RiderMonthVUCashPrevValueMedian + (Ridertemp2035Median * Fund2035ReinvestToCashFac/100.00);
		}
		else if(i == MonthDiff2030 + 1 && aaPolicyYear == YearDiff2030){
			RiderMonthVUCashPrevValueMedian = RiderMonthVUCashPrevValueMedian + (Ridertemp2030Median * Fund2030ReinvestToCashFac/100.00);
		}
		else if(i == MonthDiff2028 + 1 && aaPolicyYear == YearDiff2028){
			RiderMonthVUCashPrevValueMedian = RiderMonthVUCashPrevValueMedian + (Ridertemp2028Median * Fund2028ReinvestToCashFac/100.00);
		}
		else if(i == MonthDiff2025 + 1 && aaPolicyYear == YearDiff2025){
			RiderMonthVUCashPrevValueMedian = RiderMonthVUCashPrevValueMedian + (Ridertemp2025Median * Fund2025ReinvestToCashFac/100.00);
		}
		else if(i == MonthDiff2023 + 1 && aaPolicyYear == YearDiff2023){
			RiderMonthVUCashPrevValueMedian = RiderMonthVUCashPrevValueMedian + (Ridertemp2023Median * Fund2023ReinvestToCashFac/100.00);
		}
		else{
			
		}
		
		tempValue = ((( [[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] * [self ReturnPremiumFactor:i] ) + IncreasePrem) * [self ReturnVUCashFac:aaPolicyYear andMonth:i] +
					 [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * [self ReturnVUCashFac:aaPolicyYear andMonth:i] * [self ReturnPremiumFactor:i]) *
		pow(1 + [self ReturnVUCashInstMedian:@"A"], 1.00/12.00) + RiderMonthVUCashPrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
		pow(1 + [self ReturnVUCashInstMedian:@"A"], 1.00/12.00) - ([self ReturnRiderPolicyFee:aaPolicyYear ] + [self ReturnTotalRiderMort:aaPolicyYear]);
		
		RiderMonthVUCashPrevValueMedian = tempValue;
		
		if (tempValue < 0) {
			RiderMonthVUCashPrevValueMedian = 1.00;
		}
		else{
			RiderMonthVUCashPrevValueMedian = tempValue;
		}
		
		if (i == 12) {
			RiderVUCashPrevValueMedian = RiderMonthVUCashPrevValueMedian;
		}
		
		
		if (tempValue < 0 && RiderMonthFundValueOfTheYearValueTotalMedian != 0) {
			RiderNegativeValueOfMaxCashFundMedian = tempValue;
			RiderVUCashValueNegative = TRUE;
			return  RiderMonthVUCashPrevValueMedian;
		} else {
			RiderNegativeValueOfMaxCashFundMedian =  tempValue;
			RiderVUCashValueNegative = FALSE;
			return  RiderMonthVUCashPrevValueMedian + 0; // to be edit later
		}
		
		
		
		
	}
	else{
		tempValue = ((( [[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ]) + IncreasePrem) * [self ReturnVUCashFac:aaPolicyYear] +
					 [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * [self ReturnVUCashFac:aaPolicyYear] * [self ReturnPremiumFactor:i]) *
		(1 + [self ReturnVUCashInstMedian:@""]) + RiderVUCashPrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUCashInstMedian:@"A"]) -
		([self ReturnRiderPolicyFee:aaPolicyYear ] + [self ReturnTotalRiderMort:aaPolicyYear]) * [self ReturnVUCashMedian];
		
		
		if (tempValue < 0) {
			RiderVUCashPrevValueMedian = 1.00;
		}
		else{
			RiderVUCashPrevValueMedian = tempValue;
		}
		
		//VUCashPrevValueMedian = tempValue;
		if (tempValue < 0 && RiderFundValueOfTheYearValueTotalMedian != 0) {
			RiderNegativeValueOfMaxCashFundMedian = tempValue;
			RiderVUCashValueNegative = TRUE;
			return RiderVUCashPrevValueMedian;
			//return tempValue;
		} else {
			RiderNegativeValueOfMaxCashFundMedian = tempValue;
			RiderVUCashValueNegative = FALSE;
			return tempValue + 0; // to be edit later
		}
	}
	
	
	
	
}


-(double)ReturnRiderVUCashValueLow :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMonth:(int)i{
	
	double tempValue = 0.00;
	if ([aaYearOrMonth isEqualToString:@"M"]) {
		
		if (i == 1) {
			RiderMonthVUCashPrevValueLow = RiderVUCashPrevValueLow;
		}
		
		if ((i == MonthDiff2035 + 1 && aaPolicyYear == YearDiff2035)  ) {
			RiderMonthVUCashPrevValueLow = RiderMonthVUCashPrevValueLow + (Ridertemp2035Low * Fund2035ReinvestToCashFac/100.00);
		}
		else if(i == MonthDiff2030 + 1 && aaPolicyYear == YearDiff2030){
			RiderMonthVUCashPrevValueLow = RiderMonthVUCashPrevValueLow + (Ridertemp2030Low * Fund2030ReinvestToCashFac/100.00);
		}
		else if(i == MonthDiff2028 + 1 && aaPolicyYear == YearDiff2028){
			RiderMonthVUCashPrevValueLow = RiderMonthVUCashPrevValueLow + (Ridertemp2028Low * Fund2028ReinvestToCashFac/100.00);
		}
		else if(i == MonthDiff2025 + 1 && aaPolicyYear == YearDiff2025){
			RiderMonthVUCashPrevValueLow = RiderMonthVUCashPrevValueLow + (Ridertemp2025Low * Fund2025ReinvestToCashFac/100.00);
		}
		else if(i == MonthDiff2023 + 1 && aaPolicyYear == YearDiff2023){
			RiderMonthVUCashPrevValueLow = RiderMonthVUCashPrevValueLow + (Ridertemp2023Low * Fund2023ReinvestToCashFac/100.00);
		}
		else{
			
		}
		
		tempValue = ((( [[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] * [self ReturnPremiumFactor:i] ) + IncreasePrem) * [self ReturnVUCashFac:aaPolicyYear andMonth:i] +
					 [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * [self ReturnVUCashFac:aaPolicyYear andMonth:i] * [self ReturnPremiumFactor:i]) *
		pow(1 + [self ReturnVUCashInstLow:@"A"], 1.00/12.00) + RiderMonthVUCashPrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
		pow(1 + [self ReturnVUCashInstLow:@"A"], 1.00/12.00) - ([self ReturnRiderPolicyFee:aaPolicyYear ] + [self ReturnTotalRiderMort:aaPolicyYear]);
		
		
		
		if (tempValue < 0) {
			RiderMonthVUCashPrevValueLow = 1.00;
		}
		else{
			RiderMonthVUCashPrevValueLow = tempValue;
		}
		
		if (i == 12) {
			RiderVUCashPrevValueLow = RiderMonthVUCashPrevValueLow;
		}
		
		
		
		
		if (tempValue < 0 && RiderMonthFundValueOfTheYearValueTotalLow != 0) {
			RiderNegativeValueOfMaxCashFundLow = tempValue;
			RiderVUCashValueNegative = TRUE;
			return  RiderMonthVUCashPrevValueLow;
		} else {
			RiderNegativeValueOfMaxCashFundLow =  tempValue;
			RiderVUCashValueNegative = FALSE;
			return  RiderMonthVUCashPrevValueLow + 0; // to be edit later
		}
	}
	else{
		tempValue = ((( [[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] ) + IncreasePrem) * [self ReturnVUCashFac:aaPolicyYear] +
					 [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * [self ReturnVUCashFac:aaPolicyYear] * [self ReturnPremiumFactor:i]) *
		(1 + [self ReturnVUCashInstLow:@""]) + RiderVUCashPrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUCashInstLow:@"A"]) -
		([self ReturnRiderPolicyFee:aaPolicyYear ] + [self ReturnTotalRiderMort:aaPolicyYear]) * [self ReturnVUCashLow];
		
		if (tempValue < 0) {
			RiderVUCashPrevValueLow = 1.00;
		}
		else{
			RiderVUCashPrevValueLow = tempValue;
		}
		
		//VUCashPrevValueLow = tempValue;
		if (tempValue < 0 && RiderFundValueOfTheYearValueTotalLow != 0) {
			RiderNegativeValueOfMaxCashFundLow = tempValue;
			RiderVUCashValueNegative = TRUE;
			return RiderVUCashPrevValueLow;
			//return tempValue;
		} else {
			RiderNegativeValueOfMaxCashFundLow = tempValue;
			RiderVUCashValueNegative = FALSE;
			return tempValue + 0; // to be edit later
		}
	}
	
	
	
	
}


-(double)ReturnRiderVURetValueHigh :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andRound:(NSInteger)aaRound andMonth:(NSInteger)i{
	
	double currentValue =0.0;
	if ([aaYearOrMonth isEqualToString:@"M"]) {
		
		
		if (i == 1) {
			RiderMonthVURetPrevValueHigh = RiderVURetPrevValueHigh ;
		}
		
		double tempPrev = RiderMonthVURetPrevValueHigh;
		
		if ((i == MonthDiff2035 + 1 && aaPolicyYear == YearDiff2035)) {
			RiderMonthVURetPrevValueHigh = RiderMonthVURetPrevValueHigh + (Ridertemp2035High * Fund2035ReinvestToRetFac/100.00);
		}
		else if(i == MonthDiff2030 + 1 && aaPolicyYear == YearDiff2030){
			RiderMonthVURetPrevValueHigh = RiderMonthVURetPrevValueHigh + (Ridertemp2030High * Fund2030ReinvestToRetFac/100.00);
		}
		else if(i == MonthDiff2028 + 1 && aaPolicyYear == YearDiff2028){
			RiderMonthVURetPrevValueHigh = RiderMonthVURetPrevValueHigh + (Ridertemp2028High * Fund2028ReinvestToRetFac/100.00);
		}
		else if(i == MonthDiff2025 + 1 && aaPolicyYear == YearDiff2025){
			RiderMonthVURetPrevValueHigh = RiderMonthVURetPrevValueHigh + (Ridertemp2025High * Fund2025ReinvestToRetFac/100.00);
		}
		else if(i == MonthDiff2023 + 1 && aaPolicyYear == YearDiff2023){
			RiderMonthVURetPrevValueHigh = RiderMonthVURetPrevValueHigh + (Ridertemp2023High * Fund2023ReinvestToRetFac/100.00);
		}
		else{
			
		}
		
		//NSLog(@"%f", MonthVURetPrevValueHigh);
		if (RiderVUCashValueNegative == TRUE && RiderMonthFundValueOfTheYearValueTotalHigh != 0 ) {
			currentValue= ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVURetFac:aaPolicyYear andMonth:i] +
						   [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VURetFactor/100.00 * [self ReturnPremiumFactor:i]) *
			pow(1 + [self ReturnVURetInstHigh:aaPolicyYear andMOP:@"A"],1.00/12.00) + RiderMonthVURetPrevValueHigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
			pow(1 + [self ReturnVURetInstHigh:aaPolicyYear andMOP:@"A"], 1.00/12.00) + (RiderNegativeValueOfMaxCashFundHigh - 1) *
			(MAX(0,(RiderMonthFundValueOfTheYearVURetValueHigh_Basic/RiderMonthFundValueOfTheYearValueTotalHigh)));
			
			//NSLog(@"%f %f %f",NegativeValueOfMaxCashFundHigh, MonthVURetValueHigh,MonthFundValueOfTheYearValueTotalHigh );
			
		}
		else{
			currentValue = ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVURetFac:aaPolicyYear  andMonth:i] +
							[self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VURetFactor/100.00 * [self ReturnPremiumFactor:i]) *
			pow((1 + [self ReturnVURetInstHigh:aaPolicyYear andMOP:@"A"]),(1.00/12.00)) + RiderMonthVURetPrevValueHigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
			pow((1 + [self ReturnVURetInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00));
			
			
		}
		
		//NSLog(@"%f, %f, %f, %f",NegativeValueOfMaxCashFundHigh, MonthVURetValueHigh, MonthFundValueOfTheYearValueTotalHigh, currentValue);
		
		if (aaRound == 2) {
			RiderMonthVURetPrevValueHigh = currentValue;
		}
		else{
			RiderMonthVURetPrevValueHigh = tempPrev;
		}
		
		
		if (i == 12  && aaRound == 2) {
			RiderVURetPrevValueHigh = RiderMonthVURetPrevValueHigh;
		}
		
		//NSLog(@"%d %f %f, %d ", i, MonthVURetValueHigh, MonthFundValueOfTheYearValueTotalHigh, VUCashValueNegative);
		//return MonthVURetPrevValueHigh;
		return currentValue;
		
		
		
		
	}
	else{
		//if (VUCashValueHigh < 0 && [self ReturnFundValueOfTheYearValueTotalHigh:aaPolicyYear] != 0 ) {
		if (RiderVUCashValueNegative == TRUE && RiderFundValueOfTheYearValueTotalHigh != 0 ) {
			currentValue= ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] ) + IncreasePrem) * [self ReturnVURetFac:aaPolicyYear] +
						   [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VURetFactor/100.00 * [self ReturnPremiumFactor:i]) *
			(1 + [self ReturnVURetInstHigh:aaPolicyYear andMOP:@""]) + RiderVURetPrevValueHigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVURetInstHigh:aaPolicyYear andMOP:@"A"]) + (RiderNegativeValueOfMaxCashFundHigh - 1) *
			(MAX(0,(RiderFundValueOfTheYearVURetValueHigh_Basic/RiderFundValueOfTheYearValueTotalHigh)));
			
		}
		else{
			if (aaRound == 1) {
				currentValue = ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] ) + IncreasePrem) * [self ReturnVURetFac:aaPolicyYear] +
								[self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VURetFactor/100.00 * [self ReturnPremiumFactor:i]) *
				(1 + [self ReturnVURetInstHigh:aaPolicyYear andMOP:@""]) + RiderVURetPrevValueHigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVURetInstHigh:aaPolicyYear andMOP:@"A"]);
				RiderVURetValueHigh = currentValue;
			}
			else{
				currentValue = RiderVURetValueHigh;
			}
			
		}
		
		if (aaRound == 2) {
			RiderVURetPrevValueHigh = currentValue;
		}
		
		return currentValue;
	}
	
	
}

-(double)ReturnRiderVURetValueMedian :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andRound:(NSInteger)aaRound andMonth:(int)i{
	
	double currentValue;
	
	if ([aaYearOrMonth isEqualToString:@"M"]) {
		
		
		if (i == 1) {
			RiderMonthVURetPrevValueMedian = RiderVURetPrevValueMedian ;
		}
		
		double tempPrev = RiderMonthVURetPrevValueMedian;
		if ((i == MonthDiff2035 + 1 && aaPolicyYear == YearDiff2035)  ) {
			RiderMonthVURetPrevValueMedian = RiderMonthVURetPrevValueMedian + (Ridertemp2035Median * Fund2035ReinvestToRetFac/100.00);
		}
		else if(i == MonthDiff2030 + 1 && aaPolicyYear == YearDiff2030){
			RiderMonthVURetPrevValueMedian = RiderMonthVURetPrevValueMedian + (Ridertemp2030Median * Fund2030ReinvestToRetFac/100.00);
		}
		else if(i == MonthDiff2028 + 1 && aaPolicyYear == YearDiff2028){
			RiderMonthVURetPrevValueMedian = RiderMonthVURetPrevValueMedian + (Ridertemp2028Median * Fund2028ReinvestToRetFac/100.00);
		}
		else if(i == MonthDiff2025 + 1 && aaPolicyYear == YearDiff2025){
			RiderMonthVURetPrevValueMedian = RiderMonthVURetPrevValueMedian + (Ridertemp2025Median * Fund2025ReinvestToRetFac/100.00);
		}
		else if(i == MonthDiff2023 + 1 && aaPolicyYear == YearDiff2023){
			RiderMonthVURetPrevValueMedian = RiderMonthVURetPrevValueMedian + (Ridertemp2023Median * Fund2023ReinvestToRetFac/100.00);
		}
		else{
			
		}
		
		if (RiderVUCashValueNegative == TRUE && RiderMonthFundValueOfTheYearValueTotalMedian != 0 ) {
			currentValue= ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVURetFac:aaPolicyYear  andMonth:i] +
						   [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VURetFactor/100.00 * [self ReturnPremiumFactor:i]) *
			pow(1 + [self ReturnVURetInstMedian:@"A"], 1.00/12.00) + RiderMonthVURetPrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
			pow(1 + [self ReturnVURetInstMedian:@"A"], 1.00/12.00) + (RiderNegativeValueOfMaxCashFundMedian - 1) *
			(MAX(0,(RiderMonthFundValueOfTheYearVURetValueMedian_Basic/RiderMonthFundValueOfTheYearValueTotalMedian)));
			
		}
		else{
			currentValue = ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVURetFac:aaPolicyYear  andMonth:i] +
							[self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VURetFactor/100.00 * [self ReturnPremiumFactor:i]) *
			pow(1 + [self ReturnVURetInstMedian:@"A"], 1.00/12.00) + RiderMonthVURetPrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
			pow(1 + [self ReturnVURetInstMedian:@"A"], 1.00/12.00);
			
		}
		
		if (aaRound == 2) {
			RiderMonthVURetPrevValueMedian = currentValue;
		}
		else{
			RiderMonthVURetPrevValueMedian = tempPrev;
		}
		
		if (i == 12  && aaRound == 2) {
			RiderVURetPrevValueMedian = RiderMonthVURetPrevValueMedian ;
		}
		
		
		//return MonthVURetPrevValueMedian;
		return currentValue;
		
	}
	else{
		//if (VUCashValueMedian < 0 && [self ReturnFundValueOfTheYearValueTotalMedian:aaPolicyYear] != 0 ) {
		if (RiderVUCashValueNegative == TRUE && RiderFundValueOfTheYearValueTotalMedian != 0 ) {
			currentValue= ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ]) + IncreasePrem) * [self ReturnVURetFac:aaPolicyYear] +
						   [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VURetFactor/100.00 * [self ReturnPremiumFactor:i]) *
			(1 + [self ReturnVURetInstMedian:@""]) + RiderVURetPrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVURetInstMedian:@"A"]) + (RiderNegativeValueOfMaxCashFundMedian - 1) *
			(MAX(0,(RiderFundValueOfTheYearVURetValueMedian_Basic/RiderFundValueOfTheYearValueTotalMedian)));
			
		}
		else{
			if (aaRound == 1) {
				currentValue = ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ]) + IncreasePrem) * [self ReturnVURetFac:aaPolicyYear] +
								[self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VURetFactor/100.00 * [self ReturnPremiumFactor:i]) *
				(1 + [self ReturnVURetInstMedian:@""]) + RiderVURetPrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVURetInstMedian:@"A"]);
				RiderVURetValueMedian = currentValue;
			}
			else{
				currentValue = RiderVURetValueMedian;
			}
		}
		
		if (aaRound == 2) {
			RiderVURetPrevValueMedian = currentValue;
		}
		return currentValue;
	}
	
}

-(double)ReturnRiderVURetValueLow :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andRound:(NSInteger)aaRound andMonth:(int)i{
	
	double currentValue;
	
	
	if ([aaYearOrMonth isEqualToString:@"M"]) {
		
		
		if (i == 1) {
			RiderMonthVURetPrevValueLow = RiderVURetPrevValueLow ;
		}
		
		double tempPrev = RiderMonthVURetPrevValueLow;
		if ((i == MonthDiff2035 + 1 && aaPolicyYear == YearDiff2035)  ) {
			RiderMonthVURetPrevValueLow = RiderMonthVURetPrevValueLow + (Ridertemp2035Low * Fund2035ReinvestToRetFac/100.00);
		}
		else if(i == MonthDiff2030 + 1 && aaPolicyYear == YearDiff2030){
			RiderMonthVURetPrevValueLow = RiderMonthVURetPrevValueLow + (Ridertemp2030Low * Fund2030ReinvestToRetFac/100.00);
		}
		else if(i == MonthDiff2028 + 1 && aaPolicyYear == YearDiff2028){
			RiderMonthVURetPrevValueLow = RiderMonthVURetPrevValueLow + (Ridertemp2028Low * Fund2028ReinvestToRetFac/100.00);
		}
		else if(i == MonthDiff2025 + 1 && aaPolicyYear == YearDiff2025){
			RiderMonthVURetPrevValueLow = RiderMonthVURetPrevValueLow + (Ridertemp2025Low * Fund2025ReinvestToRetFac/100.00);
		}
		else if(i == MonthDiff2023 + 1 && aaPolicyYear == YearDiff2023){
			RiderMonthVURetPrevValueLow = RiderMonthVURetPrevValueLow + (Ridertemp2023Low * Fund2023ReinvestToRetFac/100.00);
		}
		else{
			
		}
		
		if (RiderVUCashValueNegative == TRUE && RiderMonthFundValueOfTheYearValueTotalLow != 0 ) {
			currentValue= ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVURetFac:aaPolicyYear  andMonth:i] +
						   [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VURetFactor/100.00 * [self ReturnPremiumFactor:i]) *
			pow(1 + [self ReturnVURetInstLow:@"A"], 1.00/12.00) + RiderMonthVURetPrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
			pow(1 + [self ReturnVURetInstLow:@"A"], 1.00/12.00) + (RiderNegativeValueOfMaxCashFundLow - 1) *
			(MAX(0,(RiderMonthFundValueOfTheYearVURetValueLow_Basic/RiderMonthFundValueOfTheYearValueTotalLow)));
			
		}
		else{
			currentValue = ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVURetFac:aaPolicyYear  andMonth:i] +
							[self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VURetFactor/100.00 * [self ReturnPremiumFactor:i]) *
			pow(1 + [self ReturnVURetInstLow:@"A"], 1.00/12.00) + RiderMonthVURetPrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
			pow(1 + [self ReturnVURetInstLow:@"A"], 1.00/12.00);
			
		}
		
		
		if (aaRound == 2) {
			RiderMonthVURetPrevValueLow = currentValue;
		}
		else{
			RiderMonthVURetPrevValueLow = tempPrev;
		}
		
		if (i == 12  && aaRound == 2) {
			RiderVURetPrevValueLow = RiderMonthVURetPrevValueLow ;
		}
		
		//return MonthVURetPrevValueLow;
		return currentValue;
		
	}
	else{
		if (RiderVUCashValueNegative == TRUE && RiderFundValueOfTheYearValueTotalLow != 0 ) {
			currentValue= ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ]) + IncreasePrem) * [self ReturnVURetFac:aaPolicyYear]  +
						   [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VURetFactor/100.00 * [self ReturnPremiumFactor:i]) *
			(1 + [self ReturnVURetInstLow:@""]) + RiderVURetPrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVURetInstLow:@"A"]) + (RiderNegativeValueOfMaxCashFundLow - 1) *
			(MAX(0,(RiderFundValueOfTheYearVURetValueLow_Basic/RiderFundValueOfTheYearValueTotalLow)));
			
		}
		else{
			if (aaRound == 1) {
				currentValue = ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ]) + IncreasePrem) * [self ReturnVURetFac:aaPolicyYear] +
								[self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VURetFactor/100.00 * [self ReturnPremiumFactor:i]) *
				(1 + [self ReturnVURetInstLow:@""]) + RiderVURetPrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVURetInstLow:@"A"]);
				RiderVURetValueLow = currentValue;
			}
			else{
				currentValue = RiderVURetValueLow;
			}
			
		}
		
		if (aaRound == 2) {
			RiderVURetPrevValueLow = currentValue;
		}
		return currentValue;
	}
	
}

-(double)ReturnRiderVUDanaValueHigh :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andRound:(NSInteger)aaRound andMonth:(NSInteger)i{
	
	double currentValue =0.0;
	if ([aaYearOrMonth isEqualToString:@"M"]) {
		
		
		if (i == 1) {
			RiderMonthVUDanaPrevValueHigh = RiderVUDanaPrevValueHigh ;
		}
		
		double tempPrev = RiderMonthVUDanaPrevValueHigh;
		
		if ((i == MonthDiff2035 + 1 && aaPolicyYear == YearDiff2035)) {
			RiderMonthVUDanaPrevValueHigh = RiderMonthVUDanaPrevValueHigh + (Ridertemp2035High * Fund2035ReinvestToDanaFac/100.00);
		}
		else if(i == MonthDiff2030 + 1 && aaPolicyYear == YearDiff2030){
			RiderMonthVUDanaPrevValueHigh = RiderMonthVUDanaPrevValueHigh + (Ridertemp2030High * Fund2030ReinvestToDanaFac/100.00);
		}
		else if(i == MonthDiff2028 + 1 && aaPolicyYear == YearDiff2028){
			RiderMonthVUDanaPrevValueHigh = RiderMonthVUDanaPrevValueHigh + (Ridertemp2028High * Fund2028ReinvestToDanaFac/100.00);
		}
		else if(i == MonthDiff2025 + 1 && aaPolicyYear == YearDiff2025){
			RiderMonthVUDanaPrevValueHigh = RiderMonthVUDanaPrevValueHigh + (Ridertemp2025High * Fund2025ReinvestToDanaFac/100.00);
		}
		else if(i == MonthDiff2023 + 1 && aaPolicyYear == YearDiff2023){
			RiderMonthVUDanaPrevValueHigh = RiderMonthVUDanaPrevValueHigh + (Ridertemp2023High * Fund2023ReinvestToDanaFac/100.00);
		}
		else{
			
		}
		
		//NSLog(@"%f", MonthVURetPrevValueHigh);
		if (RiderVUCashValueNegative == TRUE && RiderMonthFundValueOfTheYearValueTotalHigh != 0 ) {
			currentValue= ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUDanaFac:aaPolicyYear andMonth:i] +
						   [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUDanaFactor/100.00 * [self ReturnPremiumFactor:i]) *
			pow(1 + [self ReturnVUDanaInstHigh:aaPolicyYear andMOP:@"A"],1.00/12.00) + RiderMonthVUDanaPrevValueHigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
			pow(1 + [self ReturnVUDanaInstHigh:aaPolicyYear andMOP:@"A"], 1.00/12.00) + (RiderNegativeValueOfMaxCashFundHigh - 1) *
			(MAX(0,(RiderMonthFundValueOfTheYearVUDanaValueHigh_Basic/RiderMonthFundValueOfTheYearValueTotalHigh)));
			
			//NSLog(@"%f %f %f",NegativeValueOfMaxCashFundHigh, MonthVURetValueHigh,MonthFundValueOfTheYearValueTotalHigh );
			
		}
		else{
			currentValue = ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUDanaFac:aaPolicyYear  andMonth:i] +
							[self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUDanaFactor/100.00 * [self ReturnPremiumFactor:i]) *
			pow((1 + [self ReturnVUDanaInstHigh:aaPolicyYear andMOP:@"A"]),(1.00/12.00)) + RiderMonthVUDanaPrevValueHigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
			pow((1 + [self ReturnVUDanaInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00));
			
			
		}
		
		//NSLog(@"%f, %f, %f, %f",NegativeValueOfMaxCashFundHigh, MonthVURetValueHigh, MonthFundValueOfTheYearValueTotalHigh, currentValue);
		
		if (aaRound == 2) {
			RiderMonthVUDanaPrevValueHigh = currentValue;
		}
		else{
			RiderMonthVUDanaPrevValueHigh = tempPrev;
		}
		
		
		if (i == 12  && aaRound == 2) {
			RiderVUDanaPrevValueHigh = RiderMonthVUDanaPrevValueHigh;
		}
		
		//NSLog(@"%d %f %f, %d ", i, MonthVURetValueHigh, MonthFundValueOfTheYearValueTotalHigh, VUCashValueNegative);
		//return MonthVURetPrevValueHigh;
		return currentValue;
		
		
		
		
	}
	else{
		//if (VUCashValueHigh < 0 && [self ReturnFundValueOfTheYearValueTotalHigh:aaPolicyYear] != 0 ) {
		if (RiderVUCashValueNegative == TRUE && RiderFundValueOfTheYearValueTotalHigh != 0 ) {
			currentValue= ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] ) + IncreasePrem) * [self ReturnVUDanaFac:aaPolicyYear] +
						   [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUDanaFactor/100.00 * [self ReturnPremiumFactor:i]) *
			(1 + [self ReturnVUDanaInstHigh:aaPolicyYear andMOP:@""]) + RiderVUDanaPrevValueHigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUDanaInstHigh:aaPolicyYear andMOP:@"A"]) + (RiderNegativeValueOfMaxCashFundHigh - 1) *
			(MAX(0,(RiderFundValueOfTheYearVUDanaValueHigh_Basic/RiderFundValueOfTheYearValueTotalHigh)));
			
		}
		else{
			if (aaRound == 1) {
				currentValue = ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] ) + IncreasePrem) * [self ReturnVUDanaFac:aaPolicyYear] +
								[self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUDanaFactor/100.00 * [self ReturnPremiumFactor:i]) *
				(1 + [self ReturnVUDanaInstHigh:aaPolicyYear andMOP:@""]) + RiderVUDanaPrevValueHigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUDanaInstHigh:aaPolicyYear andMOP:@"A"]);
				RiderVUDanaValueHigh = currentValue;
			}
			else{
				currentValue = RiderVUDanaValueHigh;
			}
			
		}
		
		if (aaRound == 2) {
			RiderVUDanaPrevValueHigh = currentValue;
		}
		
		return currentValue;
	}
	
	
}

-(double)ReturnRiderVUDanaValueMedian :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andRound:(NSInteger)aaRound andMonth:(int)i{
	
	double currentValue;
	
	if ([aaYearOrMonth isEqualToString:@"M"]) {
		
		
		if (i == 1) {
			RiderMonthVUDanaPrevValueMedian = RiderVUDanaPrevValueMedian ;
		}
		
		double tempPrev = RiderMonthVUDanaPrevValueMedian;
		if ((i == MonthDiff2035 + 1 && aaPolicyYear == YearDiff2035)  ) {
			RiderMonthVUDanaPrevValueMedian = RiderMonthVUDanaPrevValueMedian + (Ridertemp2035Median * Fund2035ReinvestToDanaFac/100.00);
		}
		else if(i == MonthDiff2030 + 1 && aaPolicyYear == YearDiff2030){
			RiderMonthVUDanaPrevValueMedian = RiderMonthVUDanaPrevValueMedian + (Ridertemp2030Median * Fund2030ReinvestToDanaFac/100.00);
		}
		else if(i == MonthDiff2028 + 1 && aaPolicyYear == YearDiff2028){
			RiderMonthVUDanaPrevValueMedian = RiderMonthVUDanaPrevValueMedian + (Ridertemp2028Median * Fund2028ReinvestToDanaFac/100.00);
		}
		else if(i == MonthDiff2025 + 1 && aaPolicyYear == YearDiff2025){
			RiderMonthVUDanaPrevValueMedian = RiderMonthVUDanaPrevValueMedian + (Ridertemp2025Median * Fund2025ReinvestToDanaFac/100.00);
		}
		else if(i == MonthDiff2023 + 1 && aaPolicyYear == YearDiff2023){
			RiderMonthVUDanaPrevValueMedian = RiderMonthVUDanaPrevValueMedian + (Ridertemp2023Median * Fund2023ReinvestToDanaFac/100.00);
		}
		else{
			
		}
		
		if (RiderVUCashValueNegative == TRUE && RiderMonthFundValueOfTheYearValueTotalMedian != 0 ) {
			currentValue= ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUDanaFac:aaPolicyYear  andMonth:i] +
						   [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUDanaFactor/100.00 * [self ReturnPremiumFactor:i]) *
			pow(1 + [self ReturnVUDanaInstMedian:@"A"], 1.00/12.00) + RiderMonthVUDanaPrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
			pow(1 + [self ReturnVUDanaInstMedian:@"A"], 1.00/12.00) + (RiderNegativeValueOfMaxCashFundMedian - 1) *
			(MAX(0,(RiderMonthFundValueOfTheYearVUDanaValueMedian_Basic/RiderMonthFundValueOfTheYearValueTotalMedian)));
			
		}
		else{
			currentValue = ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUDanaFac:aaPolicyYear  andMonth:i] +
							[self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUDanaFactor/100.00 * [self ReturnPremiumFactor:i]) *
			pow(1 + [self ReturnVUDanaInstMedian:@"A"], 1.00/12.00) + RiderMonthVUDanaPrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
			pow(1 + [self ReturnVUDanaInstMedian:@"A"], 1.00/12.00);
			
		}
		
		if (aaRound == 2) {
			RiderMonthVUDanaPrevValueMedian = currentValue;
		}
		else{
			RiderMonthVUDanaPrevValueMedian = tempPrev;
		}
		
		if (i == 12  && aaRound == 2) {
			RiderVUDanaPrevValueMedian = RiderMonthVUDanaPrevValueMedian ;
		}
		
		
		//return MonthVURetPrevValueMedian;
		return currentValue;
		
	}
	else{
		//if (VUCashValueMedian < 0 && [self ReturnFundValueOfTheYearValueTotalMedian:aaPolicyYear] != 0 ) {
		if (RiderVUCashValueNegative == TRUE && RiderFundValueOfTheYearValueTotalMedian != 0 ) {
			currentValue= ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ]) + IncreasePrem) * [self ReturnVUDanaFac:aaPolicyYear] +
						   [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUDanaFactor/100.00 * [self ReturnPremiumFactor:i]) *
			(1 + [self ReturnVUDanaInstMedian:@""]) + RiderVUDanaPrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUDanaInstMedian:@"A"]) + (RiderNegativeValueOfMaxCashFundMedian - 1) *
			(MAX(0,(RiderFundValueOfTheYearVUDanaValueMedian_Basic/RiderFundValueOfTheYearValueTotalMedian)));
			
		}
		else{
			if (aaRound == 1) {
				currentValue = ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ]) + IncreasePrem) * [self ReturnVUDanaFac:aaPolicyYear] +
								[self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUDanaFactor/100.00 * [self ReturnPremiumFactor:i]) *
				(1 + [self ReturnVUDanaInstMedian:@""]) + RiderVUDanaPrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUDanaInstMedian:@"A"]);
				RiderVUDanaValueMedian = currentValue;
			}
			else{
				currentValue = RiderVUDanaValueMedian;
			}
		}
		
		if (aaRound == 2) {
			RiderVUDanaPrevValueMedian = currentValue;
		}
		return currentValue;
	}
	
}

-(double)ReturnRiderVUDanaValueLow :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andRound:(NSInteger)aaRound andMonth:(int)i{
	
	double currentValue;
	
	
	if ([aaYearOrMonth isEqualToString:@"M"]) {
		
		
		if (i == 1) {
			RiderMonthVUDanaPrevValueLow = RiderVUDanaPrevValueLow ;
		}
		
		double tempPrev = RiderMonthVUDanaPrevValueLow;
		if ((i == MonthDiff2035 + 1 && aaPolicyYear == YearDiff2035)  ) {
			RiderMonthVUDanaPrevValueLow = RiderMonthVUDanaPrevValueLow + (Ridertemp2035Low * Fund2035ReinvestToDanaFac/100.00);
		}
		else if(i == MonthDiff2030 + 1 && aaPolicyYear == YearDiff2030){
			RiderMonthVUDanaPrevValueLow = RiderMonthVUDanaPrevValueLow + (Ridertemp2030Low * Fund2030ReinvestToDanaFac/100.00);
		}
		else if(i == MonthDiff2028 + 1 && aaPolicyYear == YearDiff2028){
			RiderMonthVUDanaPrevValueLow = RiderMonthVUDanaPrevValueLow + (Ridertemp2028Low * Fund2028ReinvestToDanaFac/100.00);
		}
		else if(i == MonthDiff2025 + 1 && aaPolicyYear == YearDiff2025){
			RiderMonthVUDanaPrevValueLow = RiderMonthVUDanaPrevValueLow + (Ridertemp2025Low * Fund2025ReinvestToDanaFac/100.00);
		}
		else if(i == MonthDiff2023 + 1 && aaPolicyYear == YearDiff2023){
			RiderMonthVUDanaPrevValueLow = RiderMonthVUDanaPrevValueLow + (Ridertemp2023Low * Fund2023ReinvestToDanaFac/100.00);
		}
		else{
			
		}
		
		if (RiderVUCashValueNegative == TRUE && RiderMonthFundValueOfTheYearValueTotalLow != 0 ) {
			currentValue= ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUDanaFac:aaPolicyYear  andMonth:i] +
						   [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUDanaFactor/100.00 * [self ReturnPremiumFactor:i]) *
			pow(1 + [self ReturnVUDanaInstLow:@"A"], 1.00/12.00) + RiderMonthVUDanaPrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
			pow(1 + [self ReturnVUDanaInstLow:@"A"], 1.00/12.00) + (RiderNegativeValueOfMaxCashFundLow - 1) *
			(MAX(0,(RiderMonthFundValueOfTheYearVUDanaValueLow_Basic/RiderMonthFundValueOfTheYearValueTotalLow)));
			
		}
		else{
			currentValue = ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUDanaFac:aaPolicyYear  andMonth:i] +
							[self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUDanaFactor/100.00 * [self ReturnPremiumFactor:i]) *
			pow(1 + [self ReturnVUDanaInstLow:@"A"], 1.00/12.00) + RiderMonthVUDanaPrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
			pow(1 + [self ReturnVUDanaInstLow:@"A"], 1.00/12.00);
			
		}
		
		
		if (aaRound == 2) {
			RiderMonthVUDanaPrevValueLow = currentValue;
		}
		else{
			RiderMonthVUDanaPrevValueLow = tempPrev;
		}
		
		if (i == 12  && aaRound == 2) {
			RiderVUDanaPrevValueLow = RiderMonthVUDanaPrevValueLow ;
		}
		
		//return MonthVURetPrevValueLow;
		return currentValue;
		
	}
	else{
		if (RiderVUCashValueNegative == TRUE && RiderFundValueOfTheYearValueTotalLow != 0 ) {
			currentValue= ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ]) + IncreasePrem) * [self ReturnVUDanaFac:aaPolicyYear]  +
						   [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUDanaFactor/100.00* [self ReturnPremiumFactor:i]) *
			(1 + [self ReturnVUDanaInstLow:@""]) + RiderVUDanaPrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUDanaInstLow:@"A"]) + (RiderNegativeValueOfMaxCashFundLow - 1) *
			(MAX(0,(RiderFundValueOfTheYearVUDanaValueLow_Basic/RiderFundValueOfTheYearValueTotalLow)));
			
		}
		else{
			if (aaRound == 1) {
				currentValue = ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ]) + IncreasePrem) * [self ReturnVUDanaFac:aaPolicyYear] +
								[self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUDanaFactor/100.00 * [self ReturnPremiumFactor:i]) *
				(1 + [self ReturnVUDanaInstLow:@""]) + RiderVUDanaPrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUDanaInstLow:@"A"]);
				RiderVUDanaValueLow = currentValue;
			}
			else{
				currentValue = RiderVUDanaValueLow;
			}
			
		}
		
		if (aaRound == 2) {
			RiderVUDanaPrevValueLow = currentValue;
		}
		return currentValue;
	}
	
}

-(double)ReturnRiderVUSmartValueHigh :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andRound:(NSInteger)aaRound andMonth:(NSInteger)i{
	
	double currentValue =0.0;
	if ([aaYearOrMonth isEqualToString:@"M"]) {
		
		
		if (i == 1) {
			RiderMonthVUSmartPrevValueHigh = RiderVUSmartPrevValueHigh ;
		}
		
		double tempPrev = RiderMonthVUSmartPrevValueHigh;
		
		if ((i == MonthDiff2035 + 1 && aaPolicyYear == YearDiff2035)) {
			RiderMonthVUSmartPrevValueHigh = RiderMonthVUSmartPrevValueHigh + (Ridertemp2035High * Fund2035ReinvestToSmartFac/100.00);
		}
		else if(i == MonthDiff2030 + 1 && aaPolicyYear == YearDiff2030){
			RiderMonthVUSmartPrevValueHigh = RiderMonthVUSmartPrevValueHigh + (Ridertemp2030High * Fund2030ReinvestToSmartFac/100.00);
		}
		else if(i == MonthDiff2028 + 1 && aaPolicyYear == YearDiff2028){
			RiderMonthVUSmartPrevValueHigh = RiderMonthVUSmartPrevValueHigh + (Ridertemp2028High * Fund2028ReinvestToSmartFac/100.00);
		}
		else if(i == MonthDiff2025 + 1 && aaPolicyYear == YearDiff2025){
			RiderMonthVUSmartPrevValueHigh = RiderMonthVUSmartPrevValueHigh + (Ridertemp2025High * Fund2025ReinvestToSmartFac/100.00);
		}
		else if(i == MonthDiff2023 + 1 && aaPolicyYear == YearDiff2023){
			RiderMonthVUSmartPrevValueHigh = RiderMonthVUSmartPrevValueHigh + (Ridertemp2023High * 0/100.00);
		}
		else{
			
		}
		
		//NSLog(@"%f", MonthVURetPrevValueHigh);
		if (RiderVUCashValueNegative == TRUE && RiderMonthFundValueOfTheYearValueTotalHigh != 0 ) {
			currentValue= ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUSmartFac:aaPolicyYear andMonth:i] +
						   [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUSmartFactor/100.00 * [self ReturnPremiumFactor:i]) *
			pow(1 + [self ReturnVUSmartInstHigh:aaPolicyYear andMOP:@"A"],1.00/12.00) + RiderMonthVUSmartPrevValueHigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
			pow(1 + [self ReturnVUSmartInstHigh:aaPolicyYear andMOP:@"A"], 1.00/12.00) + (RiderNegativeValueOfMaxCashFundHigh - 1) *
			(MAX(0,(RiderMonthFundValueOfTheYearVUSmartValueHigh_Basic/RiderMonthFundValueOfTheYearValueTotalHigh)));
			
			//NSLog(@"%f %f %f",NegativeValueOfMaxCashFundHigh, MonthVURetValueHigh,MonthFundValueOfTheYearValueTotalHigh );
			
		}
		else{
			currentValue = ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUSmartFac:aaPolicyYear  andMonth:i] +
							[self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUSmartFactor/100.00 * [self ReturnPremiumFactor:i]) *
			pow((1 + [self ReturnVUSmartInstHigh:aaPolicyYear andMOP:@"A"]),(1.00/12.00)) + RiderMonthVUSmartPrevValueHigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
			pow((1 + [self ReturnVUSmartInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00));
			
			
		}
		
		//NSLog(@"%f, %f, %f, %f",NegativeValueOfMaxCashFundHigh, MonthVURetValueHigh, MonthFundValueOfTheYearValueTotalHigh, currentValue);
		
		if (aaRound == 2) {
			RiderMonthVUSmartPrevValueHigh = currentValue;
		}
		else{
			RiderMonthVUSmartPrevValueHigh = tempPrev;
		}
		
		
		if (i == 12  && aaRound == 2) {
			RiderVUSmartPrevValueHigh = RiderMonthVUSmartPrevValueHigh;
		}
		
		//NSLog(@"%d %f %f, %d ", i, MonthVURetValueHigh, MonthFundValueOfTheYearValueTotalHigh, VUCashValueNegative);
		//return MonthVURetPrevValueHigh;
		return currentValue;
		
		
		
		
	}
	else{
		//if (VUCashValueHigh < 0 && [self ReturnFundValueOfTheYearValueTotalHigh:aaPolicyYear] != 0 ) {
		if (RiderVUCashValueNegative == TRUE && RiderFundValueOfTheYearValueTotalHigh != 0 ) {
			currentValue= ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] ) + IncreasePrem) * [self ReturnVUSmartFac:aaPolicyYear] +
						   [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUSmartFactor/100.00 * [self ReturnPremiumFactor:i]) *
			(1 + [self ReturnVUSmartInstHigh:aaPolicyYear andMOP:@""]) + RiderVUSmartPrevValueHigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUSmartInstHigh:aaPolicyYear andMOP:@"A"]) + (RiderNegativeValueOfMaxCashFundHigh - 1) *
			(MAX(0,(RiderFundValueOfTheYearVUSmartValueHigh_Basic/RiderFundValueOfTheYearValueTotalHigh)));
			
		}
		else{
			if (aaRound == 1) {
				currentValue = ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] ) + IncreasePrem) * [self ReturnVUSmartFac:aaPolicyYear] +
								[self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUSmartFactor/100.00 * [self ReturnPremiumFactor:i]) *
				(1 + [self ReturnVUSmartInstHigh:aaPolicyYear andMOP:@""]) + RiderVUSmartPrevValueHigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUSmartInstHigh:aaPolicyYear andMOP:@"A"]);
				RiderVUSmartValueHigh = currentValue;
			}
			else{
				currentValue = RiderVUSmartValueHigh;
			}
			
		}
		
		if (aaRound == 2) {
			RiderVUSmartPrevValueHigh = currentValue;
		}
		
		return currentValue;
	}
	
	
}

-(double)ReturnRiderVUSmartValueMedian :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andRound:(NSInteger)aaRound andMonth:(int)i{
	
	double currentValue;
	
	if ([aaYearOrMonth isEqualToString:@"M"]) {
		
		
		if (i == 1) {
			RiderMonthVUSmartPrevValueMedian = RiderVUSmartPrevValueMedian ;
		}
		
		double tempPrev = RiderMonthVUSmartPrevValueMedian;
		if ((i == MonthDiff2035 + 1 && aaPolicyYear == YearDiff2035)  ) {
			RiderMonthVUSmartPrevValueMedian = RiderMonthVUSmartPrevValueMedian + (Ridertemp2035Median * Fund2035ReinvestToSmartFac/100.00);
		}
		else if(i == MonthDiff2030 + 1 && aaPolicyYear == YearDiff2030){
			RiderMonthVUSmartPrevValueMedian = RiderMonthVUSmartPrevValueMedian + (Ridertemp2030Median * Fund2030ReinvestToSmartFac/100.00);
		}
		else if(i == MonthDiff2028 + 1 && aaPolicyYear == YearDiff2028){
			RiderMonthVUSmartPrevValueMedian = RiderMonthVUSmartPrevValueMedian + (Ridertemp2028Median * Fund2028ReinvestToSmartFac/100.00);
		}
		else if(i == MonthDiff2025 + 1 && aaPolicyYear == YearDiff2025){
			RiderMonthVUSmartPrevValueMedian = RiderMonthVUSmartPrevValueMedian + (Ridertemp2025Median * Fund2025ReinvestToSmartFac/100.00);
		}
		else if(i == MonthDiff2023 + 1 && aaPolicyYear == YearDiff2023){
			RiderMonthVUSmartPrevValueMedian = RiderMonthVUSmartPrevValueMedian + (Ridertemp2023Median * 0/100.00);
		}
		else{
			
		}
		
		if (RiderVUCashValueNegative == TRUE && RiderMonthFundValueOfTheYearValueTotalMedian != 0 ) {
			currentValue= ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUSmartFac:aaPolicyYear  andMonth:i] +
						   [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUSmartFactor/100.00 * [self ReturnPremiumFactor:i]) *
			pow(1 + [self ReturnVUSmartInstMedian:@"A"], 1.00/12.00) + RiderMonthVUSmartPrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
			pow(1 + [self ReturnVUSmartInstMedian:@"A"], 1.00/12.00) + (RiderNegativeValueOfMaxCashFundMedian - 1) *
			(MAX(0,(RiderMonthFundValueOfTheYearVUSmartValueMedian_Basic/RiderMonthFundValueOfTheYearValueTotalMedian)));
			
		}
		else{
			currentValue = ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUSmartFac:aaPolicyYear  andMonth:i] +
							[self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUSmartFactor/100.00 * [self ReturnPremiumFactor:i]) *
			pow(1 + [self ReturnVUSmartInstMedian:@"A"], 1.00/12.00) + RiderMonthVUSmartPrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
			pow(1 + [self ReturnVUSmartInstMedian:@"A"], 1.00/12.00);
			
		}
		
		if (aaRound == 2) {
			RiderMonthVUSmartPrevValueMedian = currentValue;
		}
		else{
			RiderMonthVUSmartPrevValueMedian = tempPrev;
		}
		
		if (i == 12  && aaRound == 2) {
			RiderVUSmartPrevValueMedian = RiderMonthVUSmartPrevValueMedian ;
		}
		
		
		//return MonthVUSmartPrevValueMedian;
		return currentValue;
		
	}
	else{
		//if (VUCashValueMedian < 0 && [self ReturnFundValueOfTheYearValueTotalMedian:aaPolicyYear] != 0 ) {
		if (RiderVUCashValueNegative == TRUE && RiderFundValueOfTheYearValueTotalMedian != 0 ) {
			currentValue= ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ]) + IncreasePrem) * [self ReturnVUSmartFac:aaPolicyYear] +
						   [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUSmartFactor/100.00 * [self ReturnPremiumFactor:i]) *
			(1 + [self ReturnVUSmartInstMedian:@""]) + RiderVUSmartPrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUSmartInstMedian:@"A"]) + (RiderNegativeValueOfMaxCashFundMedian - 1) *
			(MAX(0,(RiderFundValueOfTheYearVUSmartValueMedian_Basic/RiderFundValueOfTheYearValueTotalMedian)));
			
		}
		else{
			if (aaRound == 1) {
				currentValue = ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ]) + IncreasePrem) * [self ReturnVUSmartFac:aaPolicyYear] +
								[self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUSmartFactor/100.00 * [self ReturnPremiumFactor:i]) *
				(1 + [self ReturnVUSmartInstMedian:@""]) + RiderVUSmartPrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUSmartInstMedian:@"A"]);
				RiderVUSmartValueMedian = currentValue;
			}
			else{
				currentValue = RiderVUSmartValueMedian;
			}
		}
		
		if (aaRound == 2) {
			RiderVUSmartPrevValueMedian = currentValue;
		}
		return currentValue;
	}
	
}

-(double)ReturnRiderVUSmartValueLow :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andRound:(NSInteger)aaRound andMonth:(int)i{
	
	double currentValue;
	
	
	if ([aaYearOrMonth isEqualToString:@"M"]) {
		
		
		if (i == 1) {
			RiderMonthVUSmartPrevValueLow = RiderVUSmartPrevValueLow ;
		}
		
		double tempPrev = RiderMonthVUSmartPrevValueLow;
		if ((i == MonthDiff2035 + 1 && aaPolicyYear == YearDiff2035)  ) {
			RiderMonthVUSmartPrevValueLow = RiderMonthVUSmartPrevValueLow + (Ridertemp2035Low * Fund2035ReinvestToSmartFac/100.00);
		}
		else if(i == MonthDiff2030 + 1 && aaPolicyYear == YearDiff2030){
			RiderMonthVUSmartPrevValueLow = RiderMonthVUSmartPrevValueLow + (Ridertemp2030Low * Fund2030ReinvestToSmartFac/100.00);
		}
		else if(i == MonthDiff2028 + 1 && aaPolicyYear == YearDiff2028){
			RiderMonthVUSmartPrevValueLow = RiderMonthVUSmartPrevValueLow + (Ridertemp2028Low * Fund2028ReinvestToSmartFac/100.00);
		}
		else if(i == MonthDiff2025 + 1 && aaPolicyYear == YearDiff2025){
			RiderMonthVUSmartPrevValueLow = RiderMonthVUSmartPrevValueLow + (Ridertemp2025Low * Fund2025ReinvestToSmartFac/100.00);
		}
		else if(i == MonthDiff2023 + 1 && aaPolicyYear == YearDiff2023){
			RiderMonthVUSmartPrevValueLow = RiderMonthVUSmartPrevValueLow + (Ridertemp2023Low * 0/100.00);
		}
		else{
			
		}
		
		if (RiderVUCashValueNegative == TRUE && RiderMonthFundValueOfTheYearValueTotalLow != 0 ) {
			currentValue= ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUSmartFac:aaPolicyYear  andMonth:i] +
						   [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUSmartFactor/100.00 * [self ReturnPremiumFactor:i]) *
			pow(1 + [self ReturnVUSmartInstLow:@"A"], 1.00/12.00) + RiderMonthVUSmartPrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
			pow(1 + [self ReturnVUSmartInstLow:@"A"], 1.00/12.00) + (RiderNegativeValueOfMaxCashFundLow - 1) *
			(MAX(0,(RiderMonthFundValueOfTheYearVUSmartValueLow_Basic/RiderMonthFundValueOfTheYearValueTotalLow)));
			
		}
		else{
			currentValue = ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUSmartFac:aaPolicyYear  andMonth:i] +
							[self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUSmartFactor/100.00 * [self ReturnPremiumFactor:i]) *
			pow(1 + [self ReturnVUSmartInstLow:@"A"], 1.00/12.00) + RiderMonthVUSmartPrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
			pow(1 + [self ReturnVUSmartInstLow:@"A"], 1.00/12.00);
			
		}
		
		
		if (aaRound == 2) {
			RiderMonthVUSmartPrevValueLow = currentValue;
		}
		else{
			RiderMonthVUSmartPrevValueLow = tempPrev;
		}
		
		if (i == 12  && aaRound == 2) {
			RiderVUSmartPrevValueLow = RiderMonthVUSmartPrevValueLow ;
		}
		
		//return MonthVUSmartPrevValueLow;
		return currentValue;
		
	}
	else{
		if (RiderVUCashValueNegative == TRUE && RiderFundValueOfTheYearValueTotalLow != 0 ) {
			currentValue= ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ]) + IncreasePrem) * [self ReturnVUSmartFac:aaPolicyYear]  +
						   [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUSmartFactor/100.00 * [self ReturnPremiumFactor:i]) *
			(1 + [self ReturnVUSmartInstLow:@""]) + RiderVUSmartPrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUSmartInstLow:@"A"]) + (RiderNegativeValueOfMaxCashFundLow - 1) *
			(MAX(0,(RiderFundValueOfTheYearVUSmartValueLow_Basic/RiderFundValueOfTheYearValueTotalLow)));
			
		}
		else{
			if (aaRound == 1) {
				currentValue = ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ]) + IncreasePrem) * [self ReturnVUSmartFac:aaPolicyYear] +
								[self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUSmartFactor/100.00 * [self ReturnPremiumFactor:i]) *
				(1 + [self ReturnVUSmartInstLow:@""]) + RiderVUSmartPrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUSmartInstLow:@"A"]);
				RiderVUSmartValueLow = currentValue;
			}
			else{
				currentValue = RiderVUSmartValueLow;
			}
			
		}
		
		if (aaRound == 2) {
			RiderVUSmartPrevValueLow = currentValue;
		}
		return currentValue;
	}
	
}

-(double)ReturnRiderVUVentureValueHigh :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andRound:(NSInteger)aaRound andMonth:(NSInteger)i{
	
	double currentValue =0.0;
	if ([aaYearOrMonth isEqualToString:@"M"]) {
		
		
		if (i == 1) {
			RiderMonthVUVenturePrevValueHigh = RiderVUVenturePrevValueHigh ;
		}
		
		double tempPrev = RiderMonthVUVenturePrevValueHigh;
		
		if ((i == MonthDiff2035 + 1 && aaPolicyYear == YearDiff2035)) {
			RiderMonthVUVenturePrevValueHigh = RiderMonthVUVenturePrevValueHigh + (Ridertemp2035High * Fund2035ReinvestToVentureFac/100.00);
		}
		else if(i == MonthDiff2030 + 1 && aaPolicyYear == YearDiff2030){
			RiderMonthVUVenturePrevValueHigh = RiderMonthVUVenturePrevValueHigh + (Ridertemp2030High * Fund2030ReinvestToVentureFac/100.00);
		}
		else if(i == MonthDiff2028 + 1 && aaPolicyYear == YearDiff2028){
			RiderMonthVUVenturePrevValueHigh = RiderMonthVUVenturePrevValueHigh + (Ridertemp2028High * Fund2028ReinvestToVentureFac/100.00);
		}
		else if(i == MonthDiff2025 + 1 && aaPolicyYear == YearDiff2025){
			RiderMonthVUVenturePrevValueHigh = RiderMonthVUVenturePrevValueHigh + (Ridertemp2025High * Fund2025ReinvestToVentureFac/100.00);
		}
		else if(i == MonthDiff2023 + 1 && aaPolicyYear == YearDiff2023){
			RiderMonthVUVenturePrevValueHigh = RiderMonthVUVenturePrevValueHigh + (Ridertemp2023High * 0/100.00);
		}
		else{
			
		}
		
		//NSLog(@"%f", MonthVURetPrevValueHigh);
		if (RiderVUCashValueNegative == TRUE && RiderMonthFundValueOfTheYearValueTotalHigh != 0 ) {
			currentValue= ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVentureFac:aaPolicyYear andMonth:i] +
						   [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVentureFactor/100.00 * [self ReturnPremiumFactor:i]) *
			pow(1 + [self ReturnVUVentureInstHigh:aaPolicyYear andMOP:@"A"],1.00/12.00) + RiderMonthVUVenturePrevValueHigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
			pow(1 + [self ReturnVUVentureInstHigh:aaPolicyYear andMOP:@"A"], 1.00/12.00) + (RiderNegativeValueOfMaxCashFundHigh - 1) *
			(MAX(0,(RiderMonthFundValueOfTheYearVUVentureValueHigh_Basic/RiderMonthFundValueOfTheYearValueTotalHigh)));
			
			//NSLog(@"%f %f %f",NegativeValueOfMaxCashFundHigh, MonthVURetValueHigh,MonthFundValueOfTheYearValueTotalHigh );
			
		}
		else{
			currentValue = ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVentureFac:aaPolicyYear  andMonth:i] +
							[self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVentureFactor/100.00 * [self ReturnPremiumFactor:i]) *
			pow((1 + [self ReturnVUVentureInstHigh:aaPolicyYear andMOP:@"A"]),(1.00/12.00)) + RiderMonthVUVenturePrevValueHigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
			pow((1 + [self ReturnVUVentureInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00));
			
			
		}
		
		//NSLog(@"%f, %f, %f, %f",NegativeValueOfMaxCashFundHigh, MonthVURetValueHigh, MonthFundValueOfTheYearValueTotalHigh, currentValue);
		
		if (aaRound == 2) {
			RiderMonthVUVenturePrevValueHigh = currentValue;
		}
		else{
			RiderMonthVUVenturePrevValueHigh = tempPrev;
		}
		
		
		if (i == 12  && aaRound == 2) {
			RiderVUVenturePrevValueHigh = RiderMonthVUVenturePrevValueHigh;
		}
		
		//NSLog(@"%d %f %f, %d ", i, MonthVURetValueHigh, MonthFundValueOfTheYearValueTotalHigh, VUCashValueNegative);
		//return MonthVURetPrevValueHigh;
		return currentValue;
		
		
		
		
	}
	else{
		//if (VUCashValueHigh < 0 && [self ReturnFundValueOfTheYearValueTotalHigh:aaPolicyYear] != 0 ) {
		if (RiderVUCashValueNegative == TRUE && RiderFundValueOfTheYearValueTotalHigh != 0 ) {
			currentValue= ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] ) + IncreasePrem) * [self ReturnVUVentureFac:aaPolicyYear] +
						   [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVentureFactor/100.00 * [self ReturnPremiumFactor:i]) *
			(1 + [self ReturnVUVentureInstHigh:aaPolicyYear andMOP:@""]) + RiderVUVenturePrevValueHigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVentureInstHigh:aaPolicyYear andMOP:@"A"]) + (RiderNegativeValueOfMaxCashFundHigh - 1) *
			(MAX(0,(RiderFundValueOfTheYearVUVentureValueHigh_Basic/RiderFundValueOfTheYearValueTotalHigh)));
			
		}
		else{
			if (aaRound == 1) {
				currentValue = ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] ) + IncreasePrem) * [self ReturnVUVentureFac:aaPolicyYear] +
								[self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVentureFactor/100.00 * [self ReturnPremiumFactor:i]) *
				(1 + [self ReturnVUVentureInstHigh:aaPolicyYear andMOP:@""]) + RiderVUVenturePrevValueHigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVentureInstHigh:aaPolicyYear andMOP:@"A"]);
				RiderVUVentureValueHigh = currentValue;
			}
			else{
				currentValue = RiderVUVentureValueHigh;
			}
			
		}
		
		if (aaRound == 2) {
			RiderVUVenturePrevValueHigh = currentValue;
		}
		
		return currentValue;
	}
	
	
}

-(double)ReturnRiderVUVentureValueMedian :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andRound:(NSInteger)aaRound andMonth:(int)i{
	
	double currentValue;
	
	if ([aaYearOrMonth isEqualToString:@"M"]) {
		
		
		if (i == 1) {
			RiderMonthVUVenturePrevValueMedian = RiderVUVenturePrevValueMedian ;
		}
		
		double tempPrev = RiderMonthVUVenturePrevValueMedian;
		if ((i == MonthDiff2035 + 1 && aaPolicyYear == YearDiff2035)  ) {
			RiderMonthVUVenturePrevValueMedian = RiderMonthVUVenturePrevValueMedian + (Ridertemp2035Median * Fund2035ReinvestToVentureFac/100.00);
		}
		else if(i == MonthDiff2030 + 1 && aaPolicyYear == YearDiff2030){
			RiderMonthVUVenturePrevValueMedian = RiderMonthVUVenturePrevValueMedian + (Ridertemp2030Median * Fund2030ReinvestToVentureFac/100.00);
		}
		else if(i == MonthDiff2028 + 1 && aaPolicyYear == YearDiff2028){
			RiderMonthVUVenturePrevValueMedian = RiderMonthVUVenturePrevValueMedian + (Ridertemp2028Median * Fund2028ReinvestToVentureFac/100.00);
		}
		else if(i == MonthDiff2025 + 1 && aaPolicyYear == YearDiff2025){
			RiderMonthVUVenturePrevValueMedian = RiderMonthVUVenturePrevValueMedian + (Ridertemp2025Median * Fund2025ReinvestToVentureFac/100.00);
		}
		else if(i == MonthDiff2023 + 1 && aaPolicyYear == YearDiff2023){
			RiderMonthVUVenturePrevValueMedian = RiderMonthVUVenturePrevValueMedian + (Ridertemp2023Median * 0/100.00);
		}
		else{
			
		}
		
		if (RiderVUCashValueNegative == TRUE && RiderMonthFundValueOfTheYearValueTotalMedian != 0 ) {
			currentValue= ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVentureFac:aaPolicyYear  andMonth:i] +
						   [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVentureFactor/100.00 * [self ReturnPremiumFactor:i]) *
			pow(1 + [self ReturnVUVentureInstMedian:@"A"], 1.00/12.00) + RiderMonthVUVenturePrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
			pow(1 + [self ReturnVUVentureInstMedian:@"A"], 1.00/12.00) + (RiderNegativeValueOfMaxCashFundMedian - 1) *
			(MAX(0,(RiderMonthFundValueOfTheYearVUVentureValueMedian_Basic/RiderMonthFundValueOfTheYearValueTotalMedian)));
			
		}
		else{
			currentValue = ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVentureFac:aaPolicyYear  andMonth:i] +
							[self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVentureFactor/100.00 * [self ReturnPremiumFactor:i]) *
			pow(1 + [self ReturnVUVentureInstMedian:@"A"], 1.00/12.00) + RiderMonthVUVenturePrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
			pow(1 + [self ReturnVUVentureInstMedian:@"A"], 1.00/12.00);
			
		}
		
		if (aaRound == 2) {
			RiderMonthVUVenturePrevValueMedian = currentValue;
		}
		else{
			RiderMonthVUVenturePrevValueMedian = tempPrev;
		}
		
		if (i == 12  && aaRound == 2) {
			RiderVUVenturePrevValueMedian = RiderMonthVUVenturePrevValueMedian ;
		}
		
		
		//return MonthVURetPrevValueMedian;
		return currentValue;
		
	}
	else{
		//if (VUCashValueMedian < 0 && [self ReturnFundValueOfTheYearValueTotalMedian:aaPolicyYear] != 0 ) {
		if (RiderVUCashValueNegative == TRUE && RiderFundValueOfTheYearValueTotalMedian != 0 ) {
			currentValue= ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ]) + IncreasePrem) * [self ReturnVUVentureFac:aaPolicyYear] +
						   [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVentureFactor/100.00 * [self ReturnPremiumFactor:i]) *
			(1 + [self ReturnVUVentureInstMedian:@""]) + RiderVUVenturePrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVentureInstMedian:@"A"]) + (RiderNegativeValueOfMaxCashFundMedian - 1) *
			(MAX(0,(RiderFundValueOfTheYearVUVentureValueMedian_Basic/RiderFundValueOfTheYearValueTotalMedian)));
			
		}
		else{
			if (aaRound == 1) {
				currentValue = ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ]) + IncreasePrem) * [self ReturnVUVentureFac:aaPolicyYear] +
								[self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVentureFactor/100.00 * [self ReturnPremiumFactor:i]) *
				(1 + [self ReturnVUVentureInstMedian:@""]) + RiderVUVenturePrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVentureInstMedian:@"A"]);
				RiderVUVentureValueMedian = currentValue;
			}
			else{
				currentValue = RiderVUVentureValueMedian;
			}
		}
		
		if (aaRound == 2) {
			RiderVUVenturePrevValueMedian = currentValue;
		}
		return currentValue;
	}
	
}

-(double)ReturnRiderVUVentureValueLow :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andRound:(NSInteger)aaRound andMonth:(int)i{
	
	double currentValue;
	
	
	if ([aaYearOrMonth isEqualToString:@"M"]) {
		
		
		if (i == 1) {
			RiderMonthVUVenturePrevValueLow = RiderVUVenturePrevValueLow ;
		}
		
		double tempPrev = RiderMonthVUVenturePrevValueLow;
		if ((i == MonthDiff2035 + 1 && aaPolicyYear == YearDiff2035)  ) {
			RiderMonthVUVenturePrevValueLow = RiderMonthVUVenturePrevValueLow + (Ridertemp2035Low * Fund2035ReinvestToVentureFac/100.00);
		}
		else if(i == MonthDiff2030 + 1 && aaPolicyYear == YearDiff2030){
			RiderMonthVUVenturePrevValueLow = RiderMonthVUVenturePrevValueLow + (Ridertemp2030Low * Fund2030ReinvestToVentureFac/100.00);
		}
		else if(i == MonthDiff2028 + 1 && aaPolicyYear == YearDiff2028){
			RiderMonthVUVenturePrevValueLow = RiderMonthVUVenturePrevValueLow + (Ridertemp2028Low * Fund2028ReinvestToVentureFac/100.00);
		}
		else if(i == MonthDiff2025 + 1 && aaPolicyYear == YearDiff2025){
			RiderMonthVUVenturePrevValueLow = RiderMonthVUVenturePrevValueLow + (Ridertemp2025Low * Fund2025ReinvestToVentureFac/100.00);
		}
		else if(i == MonthDiff2023 + 1 && aaPolicyYear == YearDiff2023){
			RiderMonthVUVenturePrevValueLow = RiderMonthVUVenturePrevValueLow + (Ridertemp2023Low * 0/100.00);
		}
		else{
			
		}
		
		if (RiderVUCashValueNegative == TRUE && RiderMonthFundValueOfTheYearValueTotalLow != 0 ) {
			currentValue= ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVentureFac:aaPolicyYear  andMonth:i] +
						   [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVentureFactor/100.00 * [self ReturnPremiumFactor:i]) *
			pow(1 + [self ReturnVUVentureInstLow:@"A"], 1.00/12.00) + RiderMonthVUVenturePrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
			pow(1 + [self ReturnVUVentureInstLow:@"A"], 1.00/12.00) + (RiderNegativeValueOfMaxCashFundLow - 1) *
			(MAX(0,(RiderMonthFundValueOfTheYearVUVentureValueLow_Basic/RiderMonthFundValueOfTheYearValueTotalLow)));
			
		}
		else{
			currentValue = ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVentureFac:aaPolicyYear  andMonth:i] +
							[self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVentureFactor/100.00 * [self ReturnPremiumFactor:i]) *
			pow(1 + [self ReturnVUVentureInstLow:@"A"], 1.00/12.00) + RiderMonthVUVenturePrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
			pow(1 + [self ReturnVUVentureInstLow:@"A"], 1.00/12.00);
			
		}
		
		
		if (aaRound == 2) {
			RiderMonthVUVenturePrevValueLow = currentValue;
		}
		else{
			RiderMonthVUVenturePrevValueLow = tempPrev;
		}
		
		if (i == 12  && aaRound == 2) {
			RiderVUVenturePrevValueLow = RiderMonthVUVenturePrevValueLow ;
		}
		
		//return MonthVURetPrevValueLow;
		return currentValue;
		
	}
	else{
		if (RiderVUCashValueNegative == TRUE && RiderFundValueOfTheYearValueTotalLow != 0 ) {
			currentValue= ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ]) + IncreasePrem) * [self ReturnVUVentureFac:aaPolicyYear]  +
						   [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVentureFactor/100.00 * [self ReturnPremiumFactor:i]) *
			(1 + [self ReturnVUVentureInstLow:@""]) + RiderVUVenturePrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVentureInstLow:@"A"]) + (RiderNegativeValueOfMaxCashFundLow - 1) *
			(MAX(0,(RiderFundValueOfTheYearVUVentureValueLow_Basic/RiderFundValueOfTheYearValueTotalLow)));
			
		}
		else{
			if (aaRound == 1) {
				currentValue = ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ]) + IncreasePrem) * [self ReturnVUVentureFac:aaPolicyYear] +
								[self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVentureFactor/100.00 * [self ReturnPremiumFactor:i]) *
				(1 + [self ReturnVUVentureInstLow:@""]) + RiderVUVenturePrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVentureInstLow:@"A"]);
				RiderVUVentureValueLow = currentValue;
			}
			else{
				currentValue = RiderVUVentureValueLow;
			}
			
		}
		
		if (aaRound == 2) { 
			RiderVUVenturePrevValueLow = currentValue;
		}
		return currentValue;
	}
	
}

-(double)ReturnRiderVUVentureGrowthValueHigh :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andRound:(NSInteger)aaRound andMonth:(NSInteger)i{
    
    double currentValue =0.0;
    if ([aaYearOrMonth isEqualToString:@"M"]) {
        
        
        if (i == 1) {
            RiderMonthVUVentureGrowthPrevValueHigh = RiderVUVentureGrowthPrevValueHigh ;
        }
        
        double tempPrev = RiderMonthVUVentureGrowthPrevValueHigh;
        
        if ((i == MonthDiff2035 + 1 && aaPolicyYear == YearDiff2035)) {
            RiderMonthVUVentureGrowthPrevValueHigh = RiderMonthVUVentureGrowthPrevValueHigh + (Ridertemp2035High * Fund2035ReinvestToVentureGrowthFac/100.00);
        }
        else if(i == MonthDiff2030 + 1 && aaPolicyYear == YearDiff2030){
            RiderMonthVUVentureGrowthPrevValueHigh = RiderMonthVUVentureGrowthPrevValueHigh + (Ridertemp2030High * Fund2030ReinvestToVentureGrowthFac/100.00);
        }
        else if(i == MonthDiff2028 + 1 && aaPolicyYear == YearDiff2028){
            RiderMonthVUVentureGrowthPrevValueHigh = RiderMonthVUVentureGrowthPrevValueHigh + (Ridertemp2028High * Fund2028ReinvestToVentureGrowthFac/100.00);
        }
        else if(i == MonthDiff2025 + 1 && aaPolicyYear == YearDiff2025){
            RiderMonthVUVentureGrowthPrevValueHigh = RiderMonthVUVentureGrowthPrevValueHigh + (Ridertemp2025High * Fund2025ReinvestToVentureGrowthFac/100.00);
        }
        else if(i == MonthDiff2023 + 1 && aaPolicyYear == YearDiff2023){
            RiderMonthVUVentureGrowthPrevValueHigh = RiderMonthVUVentureGrowthPrevValueHigh + (Ridertemp2023High * Fund2023ReinvestToVentureGrowthFac/100.00);
        }
        else{
            
        }
        
        //NSLog(@"%f", MonthVUVentureGrowthPrevValueHigh);
        if (RiderVUCashValueNegative == TRUE && RiderMonthFundValueOfTheYearValueTotalHigh != 0 ) {
            currentValue= ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVentureGrowthFac:aaPolicyYear andMonth:i] +
                           [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVentureGrowthFactor/100.00 * [self ReturnPremiumFactor:i]) *
            pow(1 + [self ReturnVUVentureGrowthInstHigh:aaPolicyYear andMOP:@"A"],1.00/12.00) + RiderMonthVUVentureGrowthPrevValueHigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
            pow(1 + [self ReturnVUVentureGrowthInstHigh:aaPolicyYear andMOP:@"A"], 1.00/12.00) + (RiderNegativeValueOfMaxCashFundHigh - 1) *
            (MAX(0,(RiderMonthFundValueOfTheYearVUVentureGrowthValueHigh_Basic/RiderMonthFundValueOfTheYearValueTotalHigh)));
            
            //NSLog(@"%f %f %f",NegativeValueOfMaxCashFundHigh, MonthVUVentureGrowthValueHigh,MonthFundValueOfTheYearValueTotalHigh );
            
        }
        else{
            currentValue = ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVentureGrowthFac:aaPolicyYear  andMonth:i] +
                            [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVentureGrowthFactor/100.00 * [self ReturnPremiumFactor:i]) *
            pow((1 + [self ReturnVUVentureGrowthInstHigh:aaPolicyYear andMOP:@"A"]),(1.00/12.00)) + RiderMonthVUVentureGrowthPrevValueHigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
            pow((1 + [self ReturnVUVentureGrowthInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00));
            
            
        }
        
        //NSLog(@"%f, %f, %f, %f",NegativeValueOfMaxCashFundHigh, MonthVUVentureGrowthValueHigh, MonthFundValueOfTheYearValueTotalHigh, currentValue);
        
        if (aaRound == 2) {
            RiderMonthVUVentureGrowthPrevValueHigh = currentValue;
        }
        else{
            RiderMonthVUVentureGrowthPrevValueHigh = tempPrev;
        }
        
        
        if (i == 12  && aaRound == 2) {
            RiderVUVentureGrowthPrevValueHigh = RiderMonthVUVentureGrowthPrevValueHigh;
        }
        
        //NSLog(@"%d %f %f, %d ", i, MonthVUVentureGrowthValueHigh, MonthFundValueOfTheYearValueTotalHigh, VUCashValueNegative);
        //return MonthVUVentureGrowthPrevValueHigh;
        return currentValue;
        
        
        
        
    }
    else{
        //if (VUCashValueHigh < 0 && [self ReturnFundValueOfTheYearValueTotalHigh:aaPolicyYear] != 0 ) {
        if (RiderVUCashValueNegative == TRUE && RiderFundValueOfTheYearValueTotalHigh != 0 ) {
            currentValue= ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] ) + IncreasePrem) * [self ReturnVUVentureGrowthFac:aaPolicyYear] +
                           [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVentureGrowthFactor/100.00 * [self ReturnPremiumFactor:i]) *
            (1 + [self ReturnVUVentureGrowthInstHigh:aaPolicyYear andMOP:@""]) + RiderVUVentureGrowthPrevValueHigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVentureGrowthInstHigh:aaPolicyYear andMOP:@"A"]) + (RiderNegativeValueOfMaxCashFundHigh - 1) *
            (MAX(0,(RiderFundValueOfTheYearVUVentureGrowthValueHigh_Basic/RiderFundValueOfTheYearValueTotalHigh)));
            
        }
        else{
            if (aaRound == 1) {
                currentValue = ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] ) + IncreasePrem) * [self ReturnVUVentureGrowthFac:aaPolicyYear] +
                                [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVentureGrowthFactor/100.00 * [self ReturnPremiumFactor:i]) *
                (1 + [self ReturnVUVentureGrowthInstHigh:aaPolicyYear andMOP:@""]) + RiderVUVentureGrowthPrevValueHigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVentureGrowthInstHigh:aaPolicyYear andMOP:@"A"]);
                RiderVUVentureGrowthValueHigh = currentValue;
            }
            else{
                currentValue = RiderVUVentureGrowthValueHigh;
            }
            
        }
        
        if (aaRound == 2) {
            RiderVUVentureGrowthPrevValueHigh = currentValue;
        }
        
        return currentValue;
    }
    
    
}

-(double)ReturnRiderVUVentureGrowthValueMedian :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andRound:(NSInteger)aaRound andMonth:(int)i{
    
    double currentValue;
    
    if ([aaYearOrMonth isEqualToString:@"M"]) {
        
        
        if (i == 1) {
            RiderMonthVUVentureGrowthPrevValueMedian = RiderVUVentureGrowthPrevValueMedian ;
        }
        
        double tempPrev = RiderMonthVUVentureGrowthPrevValueMedian;
        if ((i == MonthDiff2035 + 1 && aaPolicyYear == YearDiff2035)  ) {
            RiderMonthVUVentureGrowthPrevValueMedian = RiderMonthVUVentureGrowthPrevValueMedian + (Ridertemp2035Median * Fund2035ReinvestToVentureGrowthFac/100.00);
        }
        else if(i == MonthDiff2030 + 1 && aaPolicyYear == YearDiff2030){
            RiderMonthVUVentureGrowthPrevValueMedian = RiderMonthVUVentureGrowthPrevValueMedian + (Ridertemp2030Median * Fund2030ReinvestToVentureGrowthFac/100.00);
        }
        else if(i == MonthDiff2028 + 1 && aaPolicyYear == YearDiff2028){
            RiderMonthVUVentureGrowthPrevValueMedian = RiderMonthVUVentureGrowthPrevValueMedian + (Ridertemp2028Median * Fund2028ReinvestToVentureGrowthFac/100.00);
        }
        else if(i == MonthDiff2025 + 1 && aaPolicyYear == YearDiff2025){
            RiderMonthVUVentureGrowthPrevValueMedian = RiderMonthVUVentureGrowthPrevValueMedian + (Ridertemp2025Median * Fund2025ReinvestToVentureGrowthFac/100.00);
        }
        else if(i == MonthDiff2023 + 1 && aaPolicyYear == YearDiff2023){
            RiderMonthVUVentureGrowthPrevValueMedian = RiderMonthVUVentureGrowthPrevValueMedian + (Ridertemp2023Median * Fund2023ReinvestToVentureGrowthFac/100.00);
        }
        else{
            
        }
        
        if (RiderVUCashValueNegative == TRUE && RiderMonthFundValueOfTheYearValueTotalMedian != 0 ) {
            currentValue= ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVentureGrowthFac:aaPolicyYear  andMonth:i] +
                           [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVentureGrowthFactor/100.00 * [self ReturnPremiumFactor:i]) *
            pow(1 + [self ReturnVUVentureGrowthInstMedian:@"A"], 1.00/12.00) + RiderMonthVUVentureGrowthPrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
            pow(1 + [self ReturnVUVentureGrowthInstMedian:@"A"], 1.00/12.00) + (RiderNegativeValueOfMaxCashFundMedian - 1) *
            (MAX(0,(RiderMonthFundValueOfTheYearVUVentureGrowthValueMedian_Basic/RiderMonthFundValueOfTheYearValueTotalMedian)));
            
        }
        else{
            currentValue = ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVentureGrowthFac:aaPolicyYear  andMonth:i] +
                            [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVentureGrowthFactor/100.00 * [self ReturnPremiumFactor:i]) *
            pow(1 + [self ReturnVUVentureGrowthInstMedian:@"A"], 1.00/12.00) + RiderMonthVUVentureGrowthPrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
            pow(1 + [self ReturnVUVentureGrowthInstMedian:@"A"], 1.00/12.00);
            
        }
        
        if (aaRound == 2) {
            RiderMonthVUVentureGrowthPrevValueMedian = currentValue;
        }
        else{
            RiderMonthVUVentureGrowthPrevValueMedian = tempPrev;
        }
        
        if (i == 12  && aaRound == 2) {
            RiderVUVentureGrowthPrevValueMedian = RiderMonthVUVentureGrowthPrevValueMedian ;
        }
        
        
        //return MonthVUVentureGrowthPrevValueMedian;
        return currentValue;
        
    }
    else{
        //if (VUCashValueMedian < 0 && [self ReturnFundValueOfTheYearValueTotalMedian:aaPolicyYear] != 0 ) {
        if (RiderVUCashValueNegative == TRUE && RiderFundValueOfTheYearValueTotalMedian != 0 ) {
            currentValue= ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ]) + IncreasePrem) * [self ReturnVUVentureGrowthFac:aaPolicyYear] +
                           [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVentureGrowthFactor/100.00 * [self ReturnPremiumFactor:i]) *
            (1 + [self ReturnVUVentureGrowthInstMedian:@""]) + RiderVUVentureGrowthPrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVentureGrowthInstMedian:@"A"]) + (RiderNegativeValueOfMaxCashFundMedian - 1) *
            (MAX(0,(RiderFundValueOfTheYearVUVentureGrowthValueMedian_Basic/RiderFundValueOfTheYearValueTotalMedian)));
            
        }
        else{
            if (aaRound == 1) {
                currentValue = ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ]) + IncreasePrem) * [self ReturnVUVentureGrowthFac:aaPolicyYear] +
                                [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVentureGrowthFactor/100.00 * [self ReturnPremiumFactor:i]) *
                (1 + [self ReturnVUVentureGrowthInstMedian:@""]) + RiderVUVentureGrowthPrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVentureGrowthInstMedian:@"A"]);
                RiderVUVentureGrowthValueMedian = currentValue;
            }
            else{
                currentValue = RiderVUVentureGrowthValueMedian;
            }
        }
        
        if (aaRound == 2) {
            RiderVUVentureGrowthPrevValueMedian = currentValue;
        }
        return currentValue;
    }
    
}

-(double)ReturnRiderVUVentureGrowthValueLow :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andRound:(NSInteger)aaRound andMonth:(int)i{
    
    double currentValue;
    
    
    if ([aaYearOrMonth isEqualToString:@"M"]) {
        
        
        if (i == 1) {
            RiderMonthVUVentureGrowthPrevValueLow = RiderVUVentureGrowthPrevValueLow ;
        }
        
        double tempPrev = RiderMonthVUVentureGrowthPrevValueLow;
        if ((i == MonthDiff2035 + 1 && aaPolicyYear == YearDiff2035)  ) {
            RiderMonthVUVentureGrowthPrevValueLow = RiderMonthVUVentureGrowthPrevValueLow + (Ridertemp2035Low * Fund2035ReinvestToVentureGrowthFac/100.00);
        }
        else if(i == MonthDiff2030 + 1 && aaPolicyYear == YearDiff2030){
            RiderMonthVUVentureGrowthPrevValueLow = RiderMonthVUVentureGrowthPrevValueLow + (Ridertemp2030Low * Fund2030ReinvestToVentureGrowthFac/100.00);
        }
        else if(i == MonthDiff2028 + 1 && aaPolicyYear == YearDiff2028){
            RiderMonthVUVentureGrowthPrevValueLow = RiderMonthVUVentureGrowthPrevValueLow + (Ridertemp2028Low * Fund2028ReinvestToVentureGrowthFac/100.00);
        }
        else if(i == MonthDiff2025 + 1 && aaPolicyYear == YearDiff2025){
            RiderMonthVUVentureGrowthPrevValueLow = RiderMonthVUVentureGrowthPrevValueLow + (Ridertemp2025Low * Fund2025ReinvestToVentureGrowthFac/100.00);
        }
        else if(i == MonthDiff2023 + 1 && aaPolicyYear == YearDiff2023){
            RiderMonthVUVentureGrowthPrevValueLow = RiderMonthVUVentureGrowthPrevValueLow + (Ridertemp2023Low * Fund2023ReinvestToVentureGrowthFac/100.00);
        }
        else{
            
        }
        
        if (RiderVUCashValueNegative == TRUE && RiderMonthFundValueOfTheYearValueTotalLow != 0 ) {
            currentValue= ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVentureGrowthFac:aaPolicyYear  andMonth:i] +
                           [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVentureGrowthFactor/100.00 * [self ReturnPremiumFactor:i]) *
            pow(1 + [self ReturnVUVentureGrowthInstLow:@"A"], 1.00/12.00) + RiderMonthVUVentureGrowthPrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
            pow(1 + [self ReturnVUVentureGrowthInstLow:@"A"], 1.00/12.00) + (RiderNegativeValueOfMaxCashFundLow - 1) *
            (MAX(0,(RiderMonthFundValueOfTheYearVUVentureGrowthValueLow_Basic/RiderMonthFundValueOfTheYearValueTotalLow)));
            
        }
        else{
            currentValue = ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVentureGrowthFac:aaPolicyYear  andMonth:i] +
                            [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVentureGrowthFactor/100.00 * [self ReturnPremiumFactor:i]) *
            pow(1 + [self ReturnVUVentureGrowthInstLow:@"A"], 1.00/12.00) + RiderMonthVUVentureGrowthPrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
            pow(1 + [self ReturnVUVentureGrowthInstLow:@"A"], 1.00/12.00);
            
        }
        
        
        if (aaRound == 2) {
            RiderMonthVUVentureGrowthPrevValueLow = currentValue;
        }
        else{
            RiderMonthVUVentureGrowthPrevValueLow = tempPrev;
        }
        
        if (i == 12  && aaRound == 2) {
            RiderVUVentureGrowthPrevValueLow = RiderMonthVUVentureGrowthPrevValueLow ;
        }
        
        //return MonthVUVentureGrowthPrevValueLow;
        return currentValue;
        
    }
    else{
        if (RiderVUCashValueNegative == TRUE && RiderFundValueOfTheYearValueTotalLow != 0 ) {
            currentValue= ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ]) + IncreasePrem) * [self ReturnVUVentureGrowthFac:aaPolicyYear]  +
                           [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVentureGrowthFactor/100.00 * [self ReturnPremiumFactor:i]) *
            (1 + [self ReturnVUVentureGrowthInstLow:@""]) + RiderVUVentureGrowthPrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVentureGrowthInstLow:@"A"]) + (RiderNegativeValueOfMaxCashFundLow - 1) *
            (MAX(0,(RiderFundValueOfTheYearVUVentureGrowthValueLow_Basic/RiderFundValueOfTheYearValueTotalLow)));
            
        }
        else{
            if (aaRound == 1) {
                currentValue = ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ]) + IncreasePrem) * [self ReturnVUVentureGrowthFac:aaPolicyYear] +
                                [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVentureGrowthFactor/100.00 * [self ReturnPremiumFactor:i]) *
                (1 + [self ReturnVUVentureGrowthInstLow:@""]) + RiderVUVentureGrowthPrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVentureGrowthInstLow:@"A"]);
                RiderVUVentureGrowthValueLow = currentValue;
            }
            else{
                currentValue = RiderVUVentureGrowthValueLow;
            }
            
        }
        
        if (aaRound == 2) {
            RiderVUVentureGrowthPrevValueLow = currentValue;
        }
        return currentValue;
    }
    
}


-(double)ReturnRiderVUVentureBlueChipValueHigh :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andRound:(NSInteger)aaRound andMonth:(NSInteger)i{
    
    double currentValue =0.0;
    if ([aaYearOrMonth isEqualToString:@"M"]) {
        
        
        if (i == 1) {
            RiderMonthVUVentureBlueChipPrevValueHigh = RiderVUVentureBlueChipPrevValueHigh ;
        }
        
        double tempPrev = RiderMonthVUVentureBlueChipPrevValueHigh;
        
        if ((i == MonthDiff2035 + 1 && aaPolicyYear == YearDiff2035)) {
            RiderMonthVUVentureBlueChipPrevValueHigh = RiderMonthVUVentureBlueChipPrevValueHigh + (Ridertemp2035High * Fund2035ReinvestToVentureBlueChipFac/100.00);
        }
        else if(i == MonthDiff2030 + 1 && aaPolicyYear == YearDiff2030){
            RiderMonthVUVentureBlueChipPrevValueHigh = RiderMonthVUVentureBlueChipPrevValueHigh + (Ridertemp2030High * Fund2030ReinvestToVentureBlueChipFac/100.00);
        }
        else if(i == MonthDiff2028 + 1 && aaPolicyYear == YearDiff2028){
            RiderMonthVUVentureBlueChipPrevValueHigh = RiderMonthVUVentureBlueChipPrevValueHigh + (Ridertemp2028High * Fund2028ReinvestToVentureBlueChipFac/100.00);
        }
        else if(i == MonthDiff2025 + 1 && aaPolicyYear == YearDiff2025){
            RiderMonthVUVentureBlueChipPrevValueHigh = RiderMonthVUVentureBlueChipPrevValueHigh + (Ridertemp2025High * Fund2025ReinvestToVentureBlueChipFac/100.00);
        }
        else if(i == MonthDiff2023 + 1 && aaPolicyYear == YearDiff2023){
            RiderMonthVUVentureBlueChipPrevValueHigh = RiderMonthVUVentureBlueChipPrevValueHigh + (Ridertemp2023High * Fund2023ReinvestToVentureBlueChipFac/100.00);
        }
        else{
            
        }
        
        //NSLog(@"%f", MonthVUVentureBlueChipPrevValueHigh);
        if (RiderVUCashValueNegative == TRUE && RiderMonthFundValueOfTheYearValueTotalHigh != 0 ) {
            currentValue= ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVentureBlueChipFac:aaPolicyYear andMonth:i] +
                           [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVentureBlueChipFactor/100.00 * [self ReturnPremiumFactor:i]) *
            pow(1 + [self ReturnVUVentureBlueChipInstHigh:aaPolicyYear andMOP:@"A"],1.00/12.00) + RiderMonthVUVentureBlueChipPrevValueHigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
            pow(1 + [self ReturnVUVentureBlueChipInstHigh:aaPolicyYear andMOP:@"A"], 1.00/12.00) + (RiderNegativeValueOfMaxCashFundHigh - 1) *
            (MAX(0,(RiderMonthFundValueOfTheYearVUVentureBlueChipValueHigh_Basic/RiderMonthFundValueOfTheYearValueTotalHigh)));
            
            //NSLog(@"%f %f %f",NegativeValueOfMaxCashFundHigh, MonthVUVentureBlueChipValueHigh,MonthFundValueOfTheYearValueTotalHigh );
            
        }
        else{
            currentValue = ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVentureBlueChipFac:aaPolicyYear  andMonth:i] +
                            [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVentureBlueChipFactor/100.00 * [self ReturnPremiumFactor:i]) *
            pow((1 + [self ReturnVUVentureBlueChipInstHigh:aaPolicyYear andMOP:@"A"]),(1.00/12.00)) + RiderMonthVUVentureBlueChipPrevValueHigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
            pow((1 + [self ReturnVUVentureBlueChipInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00));
            
            
        }
        
        //NSLog(@"%f, %f, %f, %f",NegativeValueOfMaxCashFundHigh, MonthVUVentureBlueChipValueHigh, MonthFundValueOfTheYearValueTotalHigh, currentValue);
        
        if (aaRound == 2) {
            RiderMonthVUVentureBlueChipPrevValueHigh = currentValue;
        }
        else{
            RiderMonthVUVentureBlueChipPrevValueHigh = tempPrev;
        }
        
        
        if (i == 12  && aaRound == 2) {
            RiderVUVentureBlueChipPrevValueHigh = RiderMonthVUVentureBlueChipPrevValueHigh;
        }
        
        //NSLog(@"%d %f %f, %d ", i, MonthVUVentureBlueChipValueHigh, MonthFundValueOfTheYearValueTotalHigh, VUCashValueNegative);
        //return MonthVUVentureBlueChipPrevValueHigh;
        return currentValue;
        
        
        
        
    }
    else{
        //if (VUCashValueHigh < 0 && [self ReturnFundValueOfTheYearValueTotalHigh:aaPolicyYear] != 0 ) {
        if (RiderVUCashValueNegative == TRUE && RiderFundValueOfTheYearValueTotalHigh != 0 ) {
            currentValue= ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] ) + IncreasePrem) * [self ReturnVUVentureBlueChipFac:aaPolicyYear] +
                           [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVentureBlueChipFactor/100.00 * [self ReturnPremiumFactor:i]) *
            (1 + [self ReturnVUVentureBlueChipInstHigh:aaPolicyYear andMOP:@""]) + RiderVUVentureBlueChipPrevValueHigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVentureBlueChipInstHigh:aaPolicyYear andMOP:@"A"]) + (RiderNegativeValueOfMaxCashFundHigh - 1) *
            (MAX(0,(RiderFundValueOfTheYearVUVentureBlueChipValueHigh_Basic/RiderFundValueOfTheYearValueTotalHigh)));
            
        }
        else{
            if (aaRound == 1) {
                currentValue = ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] ) + IncreasePrem) * [self ReturnVUVentureBlueChipFac:aaPolicyYear] +
                                [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVentureBlueChipFactor/100.00 * [self ReturnPremiumFactor:i]) *
                (1 + [self ReturnVUVentureBlueChipInstHigh:aaPolicyYear andMOP:@""]) + RiderVUVentureBlueChipPrevValueHigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVentureBlueChipInstHigh:aaPolicyYear andMOP:@"A"]);
                RiderVUVentureBlueChipValueHigh = currentValue;
            }
            else{
                currentValue = RiderVUVentureBlueChipValueHigh;
            }
            
        }
        
        if (aaRound == 2) {
            RiderVUVentureBlueChipPrevValueHigh = currentValue;
        }
        
        return currentValue;
    }
    
    
}

-(double)ReturnRiderVUVentureBlueChipValueMedian :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andRound:(NSInteger)aaRound andMonth:(int)i{
    
    double currentValue;
    
    if ([aaYearOrMonth isEqualToString:@"M"]) {
        
        
        if (i == 1) {
            RiderMonthVUVentureBlueChipPrevValueMedian = RiderVUVentureBlueChipPrevValueMedian ;
        }
        
        double tempPrev = RiderMonthVUVentureBlueChipPrevValueMedian;
        if ((i == MonthDiff2035 + 1 && aaPolicyYear == YearDiff2035)  ) {
            RiderMonthVUVentureBlueChipPrevValueMedian = RiderMonthVUVentureBlueChipPrevValueMedian + (Ridertemp2035Median * Fund2035ReinvestToVentureBlueChipFac/100.00);
        }
        else if(i == MonthDiff2030 + 1 && aaPolicyYear == YearDiff2030){
            RiderMonthVUVentureBlueChipPrevValueMedian = RiderMonthVUVentureBlueChipPrevValueMedian + (Ridertemp2030Median * Fund2030ReinvestToVentureBlueChipFac/100.00);
        }
        else if(i == MonthDiff2028 + 1 && aaPolicyYear == YearDiff2028){
            RiderMonthVUVentureBlueChipPrevValueMedian = RiderMonthVUVentureBlueChipPrevValueMedian + (Ridertemp2028Median * Fund2028ReinvestToVentureBlueChipFac/100.00);
        }
        else if(i == MonthDiff2025 + 1 && aaPolicyYear == YearDiff2025){
            RiderMonthVUVentureBlueChipPrevValueMedian = RiderMonthVUVentureBlueChipPrevValueMedian + (Ridertemp2025Median * Fund2025ReinvestToVentureBlueChipFac/100.00);
        }
        else if(i == MonthDiff2023 + 1 && aaPolicyYear == YearDiff2023){
            RiderMonthVUVentureBlueChipPrevValueMedian = RiderMonthVUVentureBlueChipPrevValueMedian + (Ridertemp2023Median * Fund2023ReinvestToVentureBlueChipFac/100.00);
        }
        else{
            
        }
        
        if (RiderVUCashValueNegative == TRUE && RiderMonthFundValueOfTheYearValueTotalMedian != 0 ) {
            currentValue= ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVentureBlueChipFac:aaPolicyYear  andMonth:i] +
                           [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVentureBlueChipFactor/100.00 * [self ReturnPremiumFactor:i]) *
            pow(1 + [self ReturnVUVentureBlueChipInstMedian:@"A"], 1.00/12.00) + RiderMonthVUVentureBlueChipPrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
            pow(1 + [self ReturnVUVentureBlueChipInstMedian:@"A"], 1.00/12.00) + (RiderNegativeValueOfMaxCashFundMedian - 1) *
            (MAX(0,(RiderMonthFundValueOfTheYearVUVentureBlueChipValueMedian_Basic/RiderMonthFundValueOfTheYearValueTotalMedian)));
            
        }
        else{
            currentValue = ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVentureBlueChipFac:aaPolicyYear  andMonth:i] +
                            [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVentureBlueChipFactor/100.00 * [self ReturnPremiumFactor:i]) *
            pow(1 + [self ReturnVUVentureBlueChipInstMedian:@"A"], 1.00/12.00) + RiderMonthVUVentureBlueChipPrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
            pow(1 + [self ReturnVUVentureBlueChipInstMedian:@"A"], 1.00/12.00);
            
        }
        
        if (aaRound == 2) {
            RiderMonthVUVentureBlueChipPrevValueMedian = currentValue;
        }
        else{
            RiderMonthVUVentureBlueChipPrevValueMedian = tempPrev;
        }
        
        if (i == 12  && aaRound == 2) {
            RiderVUVentureBlueChipPrevValueMedian = RiderMonthVUVentureBlueChipPrevValueMedian ;
        }
        
        
        //return MonthVUVentureBlueChipPrevValueMedian;
        return currentValue;
        
    }
    else{
        //if (VUCashValueMedian < 0 && [self ReturnFundValueOfTheYearValueTotalMedian:aaPolicyYear] != 0 ) {
        if (RiderVUCashValueNegative == TRUE && RiderFundValueOfTheYearValueTotalMedian != 0 ) {
            currentValue= ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ]) + IncreasePrem) * [self ReturnVUVentureBlueChipFac:aaPolicyYear] +
                           [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVentureBlueChipFactor/100.00 * [self ReturnPremiumFactor:i]) *
            (1 + [self ReturnVUVentureBlueChipInstMedian:@""]) + RiderVUVentureBlueChipPrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVentureBlueChipInstMedian:@"A"]) + (RiderNegativeValueOfMaxCashFundMedian - 1) *
            (MAX(0,(RiderFundValueOfTheYearVUVentureBlueChipValueMedian_Basic/RiderFundValueOfTheYearValueTotalMedian)));
            
        }
        else{
            if (aaRound == 1) {
                currentValue = ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ]) + IncreasePrem) * [self ReturnVUVentureBlueChipFac:aaPolicyYear] +
                                [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVentureBlueChipFactor/100.00 * [self ReturnPremiumFactor:i]) *
                (1 + [self ReturnVUVentureBlueChipInstMedian:@""]) + RiderVUVentureBlueChipPrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVentureBlueChipInstMedian:@"A"]);
                RiderVUVentureBlueChipValueMedian = currentValue;
            }
            else{
                currentValue = RiderVUVentureBlueChipValueMedian;
            }
        }
        
        if (aaRound == 2) {
            RiderVUVentureBlueChipPrevValueMedian = currentValue;
        }
        return currentValue;
    }
    
}

-(double)ReturnRiderVUVentureBlueChipValueLow :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andRound:(NSInteger)aaRound andMonth:(int)i{
    
    double currentValue;
    
    
    if ([aaYearOrMonth isEqualToString:@"M"]) {
        
        
        if (i == 1) {
            RiderMonthVUVentureBlueChipPrevValueLow = RiderVUVentureBlueChipPrevValueLow ;
        }
        
        double tempPrev = RiderMonthVUVentureBlueChipPrevValueLow;
        if ((i == MonthDiff2035 + 1 && aaPolicyYear == YearDiff2035)  ) {
            RiderMonthVUVentureBlueChipPrevValueLow = RiderMonthVUVentureBlueChipPrevValueLow + (Ridertemp2035Low * Fund2035ReinvestToVentureBlueChipFac/100.00);
        }
        else if(i == MonthDiff2030 + 1 && aaPolicyYear == YearDiff2030){
            RiderMonthVUVentureBlueChipPrevValueLow = RiderMonthVUVentureBlueChipPrevValueLow + (Ridertemp2030Low * Fund2030ReinvestToVentureBlueChipFac/100.00);
        }
        else if(i == MonthDiff2028 + 1 && aaPolicyYear == YearDiff2028){
            RiderMonthVUVentureBlueChipPrevValueLow = RiderMonthVUVentureBlueChipPrevValueLow + (Ridertemp2028Low * Fund2028ReinvestToVentureBlueChipFac/100.00);
        }
        else if(i == MonthDiff2025 + 1 && aaPolicyYear == YearDiff2025){
            RiderMonthVUVentureBlueChipPrevValueLow = RiderMonthVUVentureBlueChipPrevValueLow + (Ridertemp2025Low * Fund2025ReinvestToVentureBlueChipFac/100.00);
        }
        else if(i == MonthDiff2023 + 1 && aaPolicyYear == YearDiff2023){
            RiderMonthVUVentureBlueChipPrevValueLow = RiderMonthVUVentureBlueChipPrevValueLow + (Ridertemp2023Low * Fund2023ReinvestToVentureBlueChipFac/100.00);
        }
        else{
            
        }
        
        if (RiderVUCashValueNegative == TRUE && RiderMonthFundValueOfTheYearValueTotalLow != 0 ) {
            currentValue= ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVentureBlueChipFac:aaPolicyYear  andMonth:i] +
                           [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVentureBlueChipFactor/100.00 * [self ReturnPremiumFactor:i]) *
            pow(1 + [self ReturnVUVentureBlueChipInstLow:@"A"], 1.00/12.00) + RiderMonthVUVentureBlueChipPrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
            pow(1 + [self ReturnVUVentureBlueChipInstLow:@"A"], 1.00/12.00) + (RiderNegativeValueOfMaxCashFundLow - 1) *
            (MAX(0,(RiderMonthFundValueOfTheYearVUVentureBlueChipValueLow_Basic/RiderMonthFundValueOfTheYearValueTotalLow)));
            
        }
        else{
            currentValue = ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVentureBlueChipFac:aaPolicyYear  andMonth:i] +
                            [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVentureBlueChipFactor/100.00 * [self ReturnPremiumFactor:i]) *
            pow(1 + [self ReturnVUVentureBlueChipInstLow:@"A"], 1.00/12.00) + RiderMonthVUVentureBlueChipPrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
            pow(1 + [self ReturnVUVentureBlueChipInstLow:@"A"], 1.00/12.00);
            
        }
        
        
        if (aaRound == 2) {
            RiderMonthVUVentureBlueChipPrevValueLow = currentValue;
        }
        else{
            RiderMonthVUVentureBlueChipPrevValueLow = tempPrev;
        }
        
        if (i == 12  && aaRound == 2) {
            RiderVUVentureBlueChipPrevValueLow = RiderMonthVUVentureBlueChipPrevValueLow ;
        }
        
        //return MonthVUVentureBlueChipPrevValueLow;
        return currentValue;
        
    }
    else{
        if (RiderVUCashValueNegative == TRUE && RiderFundValueOfTheYearValueTotalLow != 0 ) {
            currentValue= ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ]) + IncreasePrem) * [self ReturnVUVentureBlueChipFac:aaPolicyYear]  +
                           [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVentureBlueChipFactor/100.00 * [self ReturnPremiumFactor:i]) *
            (1 + [self ReturnVUVentureBlueChipInstLow:@""]) + RiderVUVentureBlueChipPrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVentureBlueChipInstLow:@"A"]) + (RiderNegativeValueOfMaxCashFundLow - 1) *
            (MAX(0,(RiderFundValueOfTheYearVUVentureBlueChipValueLow_Basic/RiderFundValueOfTheYearValueTotalLow)));
            
        }
        else{
            if (aaRound == 1) {
                currentValue = ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ]) + IncreasePrem) * [self ReturnVUVentureBlueChipFac:aaPolicyYear] +
                                [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVentureBlueChipFactor/100.00 * [self ReturnPremiumFactor:i]) *
                (1 + [self ReturnVUVentureBlueChipInstLow:@""]) + RiderVUVentureBlueChipPrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVentureBlueChipInstLow:@"A"]);
                RiderVUVentureBlueChipValueLow = currentValue;
            }
            else{
                currentValue = RiderVUVentureBlueChipValueLow;
            }
            
        }
        
        if (aaRound == 2) {
            RiderVUVentureBlueChipPrevValueLow = currentValue;
        }
        return currentValue;
    }
    
}


-(double)ReturnRiderVUVentureDanaValueHigh :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andRound:(NSInteger)aaRound andMonth:(NSInteger)i{
    
    double currentValue =0.0;
    if ([aaYearOrMonth isEqualToString:@"M"]) {
        
        
        if (i == 1) {
            RiderMonthVUVentureDanaPrevValueHigh = RiderVUVentureDanaPrevValueHigh ;
        }
        
        double tempPrev = RiderMonthVUVentureDanaPrevValueHigh;
        
        if ((i == MonthDiff2035 + 1 && aaPolicyYear == YearDiff2035)) {
            RiderMonthVUVentureDanaPrevValueHigh = RiderMonthVUVentureDanaPrevValueHigh + (Ridertemp2035High * Fund2035ReinvestToVentureDanaFac/100.00);
        }
        else if(i == MonthDiff2030 + 1 && aaPolicyYear == YearDiff2030){
            RiderMonthVUVentureDanaPrevValueHigh = RiderMonthVUVentureDanaPrevValueHigh + (Ridertemp2030High * Fund2030ReinvestToVentureDanaFac/100.00);
        }
        else if(i == MonthDiff2028 + 1 && aaPolicyYear == YearDiff2028){
            RiderMonthVUVentureDanaPrevValueHigh = RiderMonthVUVentureDanaPrevValueHigh + (Ridertemp2028High * Fund2028ReinvestToVentureDanaFac/100.00);
        }
        else if(i == MonthDiff2025 + 1 && aaPolicyYear == YearDiff2025){
            RiderMonthVUVentureDanaPrevValueHigh = RiderMonthVUVentureDanaPrevValueHigh + (Ridertemp2025High * Fund2025ReinvestToVentureDanaFac/100.00);
        }
        else if(i == MonthDiff2023 + 1 && aaPolicyYear == YearDiff2023){
            RiderMonthVUVentureDanaPrevValueHigh = RiderMonthVUVentureDanaPrevValueHigh + (Ridertemp2023High * Fund2023ReinvestToVentureDanaFac/100.00);
        }
        else{
            
        }
        
        //NSLog(@"%f", MonthVUVentureDanaPrevValueHigh);
        if (RiderVUCashValueNegative == TRUE && RiderMonthFundValueOfTheYearValueTotalHigh != 0 ) {
            currentValue= ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVentureDanaFac:aaPolicyYear andMonth:i] +
                           [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVentureDanaFactor/100.00 * [self ReturnPremiumFactor:i]) *
            pow(1 + [self ReturnVUVentureDanaInstHigh:aaPolicyYear andMOP:@"A"],1.00/12.00) + RiderMonthVUVentureDanaPrevValueHigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
            pow(1 + [self ReturnVUVentureDanaInstHigh:aaPolicyYear andMOP:@"A"], 1.00/12.00) + (RiderNegativeValueOfMaxCashFundHigh - 1) *
            (MAX(0,(RiderMonthFundValueOfTheYearVUVentureDanaValueHigh_Basic/RiderMonthFundValueOfTheYearValueTotalHigh)));
            
            //NSLog(@"%f %f %f",NegativeValueOfMaxCashFundHigh, MonthVUVentureDanaValueHigh,MonthFundValueOfTheYearValueTotalHigh );
            
        }
        else{
            currentValue = ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVentureDanaFac:aaPolicyYear  andMonth:i] +
                            [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVentureDanaFactor/100.00 * [self ReturnPremiumFactor:i]) *
            pow((1 + [self ReturnVUVentureDanaInstHigh:aaPolicyYear andMOP:@"A"]),(1.00/12.00)) + RiderMonthVUVentureDanaPrevValueHigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
            pow((1 + [self ReturnVUVentureDanaInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00));
            
            
        }
        
        //NSLog(@"%f, %f, %f, %f",NegativeValueOfMaxCashFundHigh, MonthVUVentureDanaValueHigh, MonthFundValueOfTheYearValueTotalHigh, currentValue);
        
        if (aaRound == 2) {
            RiderMonthVUVentureDanaPrevValueHigh = currentValue;
        }
        else{
            RiderMonthVUVentureDanaPrevValueHigh = tempPrev;
        }
        
        
        if (i == 12  && aaRound == 2) {
            RiderVUVentureDanaPrevValueHigh = RiderMonthVUVentureDanaPrevValueHigh;
        }
        
        //NSLog(@"%d %f %f, %d ", i, MonthVUVentureDanaValueHigh, MonthFundValueOfTheYearValueTotalHigh, VUCashValueNegative);
        //return MonthVUVentureDanaPrevValueHigh;
        return currentValue;
        
        
        
        
    }
    else{
        //if (VUCashValueHigh < 0 && [self ReturnFundValueOfTheYearValueTotalHigh:aaPolicyYear] != 0 ) {
        if (RiderVUCashValueNegative == TRUE && RiderFundValueOfTheYearValueTotalHigh != 0 ) {
            currentValue= ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] ) + IncreasePrem) * [self ReturnVUVentureDanaFac:aaPolicyYear] +
                           [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVentureDanaFactor/100.00 * [self ReturnPremiumFactor:i]) *
            (1 + [self ReturnVUVentureDanaInstHigh:aaPolicyYear andMOP:@""]) + RiderVUVentureDanaPrevValueHigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVentureDanaInstHigh:aaPolicyYear andMOP:@"A"]) + (RiderNegativeValueOfMaxCashFundHigh - 1) *
            (MAX(0,(RiderFundValueOfTheYearVUVentureDanaValueHigh_Basic/RiderFundValueOfTheYearValueTotalHigh)));
            
        }
        else{
            if (aaRound == 1) {
                currentValue = ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] ) + IncreasePrem) * [self ReturnVUVentureDanaFac:aaPolicyYear] +
                                [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVentureDanaFactor/100.00 * [self ReturnPremiumFactor:i]) *
                (1 + [self ReturnVUVentureDanaInstHigh:aaPolicyYear andMOP:@""]) + RiderVUVentureDanaPrevValueHigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVentureDanaInstHigh:aaPolicyYear andMOP:@"A"]);
                RiderVUVentureDanaValueHigh = currentValue;
            }
            else{
                currentValue = RiderVUVentureDanaValueHigh;
            }
            
        }
        
        if (aaRound == 2) {
            RiderVUVentureDanaPrevValueHigh = currentValue;
        }
        
        return currentValue;
    }
    
    
}

-(double)ReturnRiderVUVentureDanaValueMedian :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andRound:(NSInteger)aaRound andMonth:(int)i{
    
    double currentValue;
    
    if ([aaYearOrMonth isEqualToString:@"M"]) {
        
        
        if (i == 1) {
            RiderMonthVUVentureDanaPrevValueMedian = RiderVUVentureDanaPrevValueMedian ;
        }
        
        double tempPrev = RiderMonthVUVentureDanaPrevValueMedian;
        if ((i == MonthDiff2035 + 1 && aaPolicyYear == YearDiff2035)  ) {
            RiderMonthVUVentureDanaPrevValueMedian = RiderMonthVUVentureDanaPrevValueMedian + (Ridertemp2035Median * Fund2035ReinvestToVentureDanaFac/100.00);
        }
        else if(i == MonthDiff2030 + 1 && aaPolicyYear == YearDiff2030){
            RiderMonthVUVentureDanaPrevValueMedian = RiderMonthVUVentureDanaPrevValueMedian + (Ridertemp2030Median * Fund2030ReinvestToVentureDanaFac/100.00);
        }
        else if(i == MonthDiff2028 + 1 && aaPolicyYear == YearDiff2028){
            RiderMonthVUVentureDanaPrevValueMedian = RiderMonthVUVentureDanaPrevValueMedian + (Ridertemp2028Median * Fund2028ReinvestToVentureDanaFac/100.00);
        }
        else if(i == MonthDiff2025 + 1 && aaPolicyYear == YearDiff2025){
            RiderMonthVUVentureDanaPrevValueMedian = RiderMonthVUVentureDanaPrevValueMedian + (Ridertemp2025Median * Fund2025ReinvestToVentureDanaFac/100.00);
        }
        else if(i == MonthDiff2023 + 1 && aaPolicyYear == YearDiff2023){
            RiderMonthVUVentureDanaPrevValueMedian = RiderMonthVUVentureDanaPrevValueMedian + (Ridertemp2023Median * Fund2023ReinvestToVentureDanaFac/100.00);
        }
        else{
            
        }
        
        if (RiderVUCashValueNegative == TRUE && RiderMonthFundValueOfTheYearValueTotalMedian != 0 ) {
            currentValue= ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVentureDanaFac:aaPolicyYear  andMonth:i] +
                           [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVentureDanaFactor/100.00 * [self ReturnPremiumFactor:i]) *
            pow(1 + [self ReturnVUVentureDanaInstMedian:@"A"], 1.00/12.00) + RiderMonthVUVentureDanaPrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
            pow(1 + [self ReturnVUVentureDanaInstMedian:@"A"], 1.00/12.00) + (RiderNegativeValueOfMaxCashFundMedian - 1) *
            (MAX(0,(RiderMonthFundValueOfTheYearVUVentureDanaValueMedian_Basic/RiderMonthFundValueOfTheYearValueTotalMedian)));
            
        }
        else{
            currentValue = ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVentureDanaFac:aaPolicyYear  andMonth:i] +
                            [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVentureDanaFactor/100.00 * [self ReturnPremiumFactor:i]) *
            pow(1 + [self ReturnVUVentureDanaInstMedian:@"A"], 1.00/12.00) + RiderMonthVUVentureDanaPrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
            pow(1 + [self ReturnVUVentureDanaInstMedian:@"A"], 1.00/12.00);
            
        }
        
        if (aaRound == 2) {
            RiderMonthVUVentureDanaPrevValueMedian = currentValue;
        }
        else{
            RiderMonthVUVentureDanaPrevValueMedian = tempPrev;
        }
        
        if (i == 12  && aaRound == 2) {
            RiderVUVentureDanaPrevValueMedian = RiderMonthVUVentureDanaPrevValueMedian ;
        }
        
        
        //return MonthVUVentureDanaPrevValueMedian;
        return currentValue;
        
    }
    else{
        //if (VUCashValueMedian < 0 && [self ReturnFundValueOfTheYearValueTotalMedian:aaPolicyYear] != 0 ) {
        if (RiderVUCashValueNegative == TRUE && RiderFundValueOfTheYearValueTotalMedian != 0 ) {
            currentValue= ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ]) + IncreasePrem) * [self ReturnVUVentureDanaFac:aaPolicyYear] +
                           [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVentureDanaFactor/100.00 * [self ReturnPremiumFactor:i]) *
            (1 + [self ReturnVUVentureDanaInstMedian:@""]) + RiderVUVentureDanaPrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVentureDanaInstMedian:@"A"]) + (RiderNegativeValueOfMaxCashFundMedian - 1) *
            (MAX(0,(RiderFundValueOfTheYearVUVentureDanaValueMedian_Basic/RiderFundValueOfTheYearValueTotalMedian)));
            
        }
        else{
            if (aaRound == 1) {
                currentValue = ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ]) + IncreasePrem) * [self ReturnVUVentureDanaFac:aaPolicyYear] +
                                [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVentureDanaFactor/100.00 * [self ReturnPremiumFactor:i]) *
                (1 + [self ReturnVUVentureDanaInstMedian:@""]) + RiderVUVentureDanaPrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVentureDanaInstMedian:@"A"]);
                RiderVUVentureDanaValueMedian = currentValue;
            }
            else{
                currentValue = RiderVUVentureDanaValueMedian;
            }
        }
        
        if (aaRound == 2) {
            RiderVUVentureDanaPrevValueMedian = currentValue;
        }
        return currentValue;
    }
    
}

-(double)ReturnRiderVUVentureDanaValueLow :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andRound:(NSInteger)aaRound andMonth:(int)i{
    
    double currentValue;
    
    
    if ([aaYearOrMonth isEqualToString:@"M"]) {
        
        
        if (i == 1) {
            RiderMonthVUVentureDanaPrevValueLow = RiderVUVentureDanaPrevValueLow ;
        }
        
        double tempPrev = RiderMonthVUVentureDanaPrevValueLow;
        if ((i == MonthDiff2035 + 1 && aaPolicyYear == YearDiff2035)  ) {
            RiderMonthVUVentureDanaPrevValueLow = RiderMonthVUVentureDanaPrevValueLow + (Ridertemp2035Low * Fund2035ReinvestToVentureDanaFac/100.00);
        }
        else if(i == MonthDiff2030 + 1 && aaPolicyYear == YearDiff2030){
            RiderMonthVUVentureDanaPrevValueLow = RiderMonthVUVentureDanaPrevValueLow + (Ridertemp2030Low * Fund2030ReinvestToVentureDanaFac/100.00);
        }
        else if(i == MonthDiff2028 + 1 && aaPolicyYear == YearDiff2028){
            RiderMonthVUVentureDanaPrevValueLow = RiderMonthVUVentureDanaPrevValueLow + (Ridertemp2028Low * Fund2028ReinvestToVentureDanaFac/100.00);
        }
        else if(i == MonthDiff2025 + 1 && aaPolicyYear == YearDiff2025){
            RiderMonthVUVentureDanaPrevValueLow = RiderMonthVUVentureDanaPrevValueLow + (Ridertemp2025Low * Fund2025ReinvestToVentureDanaFac/100.00);
        }
        else if(i == MonthDiff2023 + 1 && aaPolicyYear == YearDiff2023){
            RiderMonthVUVentureDanaPrevValueLow = RiderMonthVUVentureDanaPrevValueLow + (Ridertemp2023Low * Fund2023ReinvestToVentureDanaFac/100.00);
        }
        else{
            
        }
        
        if (RiderVUCashValueNegative == TRUE && RiderMonthFundValueOfTheYearValueTotalLow != 0 ) {
            currentValue= ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVentureDanaFac:aaPolicyYear  andMonth:i] +
                           [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVentureDanaFactor/100.00 * [self ReturnPremiumFactor:i]) *
            pow(1 + [self ReturnVUVentureDanaInstLow:@"A"], 1.00/12.00) + RiderMonthVUVentureDanaPrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
            pow(1 + [self ReturnVUVentureDanaInstLow:@"A"], 1.00/12.00) + (RiderNegativeValueOfMaxCashFundLow - 1) *
            (MAX(0,(RiderMonthFundValueOfTheYearVUVentureDanaValueLow_Basic/RiderMonthFundValueOfTheYearValueTotalLow)));
            
        }
        else{
            currentValue = ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVentureDanaFac:aaPolicyYear  andMonth:i] +
                            [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVentureDanaFactor/100.00 * [self ReturnPremiumFactor:i]) *
            pow(1 + [self ReturnVUVentureDanaInstLow:@"A"], 1.00/12.00) + RiderMonthVUVentureDanaPrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
            pow(1 + [self ReturnVUVentureDanaInstLow:@"A"], 1.00/12.00);
            
        }
        
        
        if (aaRound == 2) {
            RiderMonthVUVentureDanaPrevValueLow = currentValue;
        }
        else{
            RiderMonthVUVentureDanaPrevValueLow = tempPrev;
        }
        
        if (i == 12  && aaRound == 2) {
            RiderVUVentureDanaPrevValueLow = RiderMonthVUVentureDanaPrevValueLow ;
        }
        
        //return MonthVUVentureDanaPrevValueLow;
        return currentValue;
        
    }
    else{
        if (RiderVUCashValueNegative == TRUE && RiderFundValueOfTheYearValueTotalLow != 0 ) {
            currentValue= ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ]) + IncreasePrem) * [self ReturnVUVentureDanaFac:aaPolicyYear]  +
                           [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVentureDanaFactor/100.00 * [self ReturnPremiumFactor:i]) *
            (1 + [self ReturnVUVentureDanaInstLow:@""]) + RiderVUVentureDanaPrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVentureDanaInstLow:@"A"]) + (RiderNegativeValueOfMaxCashFundLow - 1) *
            (MAX(0,(RiderFundValueOfTheYearVUVentureDanaValueLow_Basic/RiderFundValueOfTheYearValueTotalLow)));
            
        }
        else{
            if (aaRound == 1) {
                currentValue = ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ]) + IncreasePrem) * [self ReturnVUVentureDanaFac:aaPolicyYear] +
                                [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVentureDanaFactor/100.00 * [self ReturnPremiumFactor:i]) *
                (1 + [self ReturnVUVentureDanaInstLow:@""]) + RiderVUVentureDanaPrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVentureDanaInstLow:@"A"]);
                RiderVUVentureDanaValueLow = currentValue;
            }
            else{
                currentValue = RiderVUVentureDanaValueLow;
            }
            
        }
        
        if (aaRound == 2) {
            RiderVUVentureDanaPrevValueLow = currentValue;
        }
        return currentValue;
    }
    
}


-(double)ReturnRiderVUVentureManagedValueHigh :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andRound:(NSInteger)aaRound andMonth:(NSInteger)i{
    
    double currentValue =0.0;
    if ([aaYearOrMonth isEqualToString:@"M"]) {
        
        
        if (i == 1) {
            RiderMonthVUVentureManagedPrevValueHigh = RiderVUVentureManagedPrevValueHigh ;
        }
        
        double tempPrev = RiderMonthVUVentureManagedPrevValueHigh;
        
        if ((i == MonthDiff2035 + 1 && aaPolicyYear == YearDiff2035)) {
            RiderMonthVUVentureManagedPrevValueHigh = RiderMonthVUVentureManagedPrevValueHigh + (Ridertemp2035High * Fund2035ReinvestToVentureManagedFac/100.00);
        }
        else if(i == MonthDiff2030 + 1 && aaPolicyYear == YearDiff2030){
            RiderMonthVUVentureManagedPrevValueHigh = RiderMonthVUVentureManagedPrevValueHigh + (Ridertemp2030High * Fund2030ReinvestToVentureManagedFac/100.00);
        }
        else if(i == MonthDiff2028 + 1 && aaPolicyYear == YearDiff2028){
            RiderMonthVUVentureManagedPrevValueHigh = RiderMonthVUVentureManagedPrevValueHigh + (Ridertemp2028High * Fund2028ReinvestToVentureManagedFac/100.00);
        }
        else if(i == MonthDiff2025 + 1 && aaPolicyYear == YearDiff2025){
            RiderMonthVUVentureManagedPrevValueHigh = RiderMonthVUVentureManagedPrevValueHigh + (Ridertemp2025High * Fund2025ReinvestToVentureManagedFac/100.00);
        }
        else if(i == MonthDiff2023 + 1 && aaPolicyYear == YearDiff2023){
            RiderMonthVUVentureManagedPrevValueHigh = RiderMonthVUVentureManagedPrevValueHigh + (Ridertemp2023High * Fund2023ReinvestToVentureManagedFac/100.00);
        }
        else{
            
        }
        
        //NSLog(@"%f", MonthVUVentureManagedPrevValueHigh);
        if (RiderVUCashValueNegative == TRUE && RiderMonthFundValueOfTheYearValueTotalHigh != 0 ) {
            currentValue= ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVentureManagedFac:aaPolicyYear andMonth:i] +
                           [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVentureManagedFactor/100.00 * [self ReturnPremiumFactor:i]) *
            pow(1 + [self ReturnVUVentureManagedInstHigh:aaPolicyYear andMOP:@"A"],1.00/12.00) + RiderMonthVUVentureManagedPrevValueHigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
            pow(1 + [self ReturnVUVentureManagedInstHigh:aaPolicyYear andMOP:@"A"], 1.00/12.00) + (RiderNegativeValueOfMaxCashFundHigh - 1) *
            (MAX(0,(RiderMonthFundValueOfTheYearVUVentureManagedValueHigh_Basic/RiderMonthFundValueOfTheYearValueTotalHigh)));
            
            //NSLog(@"%f %f %f",NegativeValueOfMaxCashFundHigh, MonthVUVentureManagedValueHigh,MonthFundValueOfTheYearValueTotalHigh );
            
        }
        else{
            currentValue = ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVentureManagedFac:aaPolicyYear  andMonth:i] +
                            [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVentureManagedFactor/100.00 * [self ReturnPremiumFactor:i]) *
            pow((1 + [self ReturnVUVentureManagedInstHigh:aaPolicyYear andMOP:@"A"]),(1.00/12.00)) + RiderMonthVUVentureManagedPrevValueHigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
            pow((1 + [self ReturnVUVentureManagedInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00));
            
            
        }
        
        //NSLog(@"%f, %f, %f, %f",NegativeValueOfMaxCashFundHigh, MonthVUVentureManagedValueHigh, MonthFundValueOfTheYearValueTotalHigh, currentValue);
        
        if (aaRound == 2) {
            RiderMonthVUVentureManagedPrevValueHigh = currentValue;
        }
        else{
            RiderMonthVUVentureManagedPrevValueHigh = tempPrev;
        }
        
        
        if (i == 12  && aaRound == 2) {
            RiderVUVentureManagedPrevValueHigh = RiderMonthVUVentureManagedPrevValueHigh;
        }
        
        //NSLog(@"%d %f %f, %d ", i, MonthVUVentureManagedValueHigh, MonthFundValueOfTheYearValueTotalHigh, VUCashValueNegative);
        //return MonthVUVentureManagedPrevValueHigh;
        return currentValue;
        
        
        
        
    }
    else{
        //if (VUCashValueHigh < 0 && [self ReturnFundValueOfTheYearValueTotalHigh:aaPolicyYear] != 0 ) {
        if (RiderVUCashValueNegative == TRUE && RiderFundValueOfTheYearValueTotalHigh != 0 ) {
            currentValue= ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] ) + IncreasePrem) * [self ReturnVUVentureManagedFac:aaPolicyYear] +
                           [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVentureManagedFactor/100.00 * [self ReturnPremiumFactor:i]) *
            (1 + [self ReturnVUVentureManagedInstHigh:aaPolicyYear andMOP:@""]) + RiderVUVentureManagedPrevValueHigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVentureManagedInstHigh:aaPolicyYear andMOP:@"A"]) + (RiderNegativeValueOfMaxCashFundHigh - 1) *
            (MAX(0,(RiderFundValueOfTheYearVUVentureManagedValueHigh_Basic/RiderFundValueOfTheYearValueTotalHigh)));
            
        }
        else{
            if (aaRound == 1) {
                currentValue = ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] ) + IncreasePrem) * [self ReturnVUVentureManagedFac:aaPolicyYear] +
                                [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVentureManagedFactor/100.00 * [self ReturnPremiumFactor:i]) *
                (1 + [self ReturnVUVentureManagedInstHigh:aaPolicyYear andMOP:@""]) + RiderVUVentureManagedPrevValueHigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVentureManagedInstHigh:aaPolicyYear andMOP:@"A"]);
                RiderVUVentureManagedValueHigh = currentValue;
            }
            else{
                currentValue = RiderVUVentureManagedValueHigh;
            }
            
        }
        
        if (aaRound == 2) {
            RiderVUVentureManagedPrevValueHigh = currentValue;
        }
        
        return currentValue;
    }
    
    
}

-(double)ReturnRiderVUVentureManagedValueMedian :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andRound:(NSInteger)aaRound andMonth:(int)i{
    
    double currentValue;
    
    if ([aaYearOrMonth isEqualToString:@"M"]) {
        
        
        if (i == 1) {
            RiderMonthVUVentureManagedPrevValueMedian = RiderVUVentureManagedPrevValueMedian ;
        }
        
        double tempPrev = RiderMonthVUVentureManagedPrevValueMedian;
        if ((i == MonthDiff2035 + 1 && aaPolicyYear == YearDiff2035)  ) {
            RiderMonthVUVentureManagedPrevValueMedian = RiderMonthVUVentureManagedPrevValueMedian + (Ridertemp2035Median * Fund2035ReinvestToVentureManagedFac/100.00);
        }
        else if(i == MonthDiff2030 + 1 && aaPolicyYear == YearDiff2030){
            RiderMonthVUVentureManagedPrevValueMedian = RiderMonthVUVentureManagedPrevValueMedian + (Ridertemp2030Median * Fund2030ReinvestToVentureManagedFac/100.00);
        }
        else if(i == MonthDiff2028 + 1 && aaPolicyYear == YearDiff2028){
            RiderMonthVUVentureManagedPrevValueMedian = RiderMonthVUVentureManagedPrevValueMedian + (Ridertemp2028Median * Fund2028ReinvestToVentureManagedFac/100.00);
        }
        else if(i == MonthDiff2025 + 1 && aaPolicyYear == YearDiff2025){
            RiderMonthVUVentureManagedPrevValueMedian = RiderMonthVUVentureManagedPrevValueMedian + (Ridertemp2025Median * Fund2025ReinvestToVentureManagedFac/100.00);
        }
        else if(i == MonthDiff2023 + 1 && aaPolicyYear == YearDiff2023){
            RiderMonthVUVentureManagedPrevValueMedian = RiderMonthVUVentureManagedPrevValueMedian + (Ridertemp2023Median * Fund2023ReinvestToVentureManagedFac/100.00);
        }
        else{
            
        }
        
        if (RiderVUCashValueNegative == TRUE && RiderMonthFundValueOfTheYearValueTotalMedian != 0 ) {
            currentValue= ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVentureManagedFac:aaPolicyYear  andMonth:i] +
                           [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVentureManagedFactor/100.00 * [self ReturnPremiumFactor:i]) *
            pow(1 + [self ReturnVUVentureManagedInstMedian:@"A"], 1.00/12.00) + RiderMonthVUVentureManagedPrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
            pow(1 + [self ReturnVUVentureManagedInstMedian:@"A"], 1.00/12.00) + (RiderNegativeValueOfMaxCashFundMedian - 1) *
            (MAX(0,(RiderMonthFundValueOfTheYearVUVentureManagedValueMedian_Basic/RiderMonthFundValueOfTheYearValueTotalMedian)));
            
        }
        else{
            currentValue = ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVentureManagedFac:aaPolicyYear  andMonth:i] +
                            [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVentureManagedFactor/100.00 * [self ReturnPremiumFactor:i]) *
            pow(1 + [self ReturnVUVentureManagedInstMedian:@"A"], 1.00/12.00) + RiderMonthVUVentureManagedPrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
            pow(1 + [self ReturnVUVentureManagedInstMedian:@"A"], 1.00/12.00);
            
        }
        
        if (aaRound == 2) {
            RiderMonthVUVentureManagedPrevValueMedian = currentValue;
        }
        else{
            RiderMonthVUVentureManagedPrevValueMedian = tempPrev;
        }
        
        if (i == 12  && aaRound == 2) {
            RiderVUVentureManagedPrevValueMedian = RiderMonthVUVentureManagedPrevValueMedian ;
        }
        
        
        //return MonthVUVentureManagedPrevValueMedian;
        return currentValue;
        
    }
    else{
        //if (VUCashValueMedian < 0 && [self ReturnFundValueOfTheYearValueTotalMedian:aaPolicyYear] != 0 ) {
        if (RiderVUCashValueNegative == TRUE && RiderFundValueOfTheYearValueTotalMedian != 0 ) {
            currentValue= ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ]) + IncreasePrem) * [self ReturnVUVentureManagedFac:aaPolicyYear] +
                           [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVentureManagedFactor/100.00 * [self ReturnPremiumFactor:i]) *
            (1 + [self ReturnVUVentureManagedInstMedian:@""]) + RiderVUVentureManagedPrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVentureManagedInstMedian:@"A"]) + (RiderNegativeValueOfMaxCashFundMedian - 1) *
            (MAX(0,(RiderFundValueOfTheYearVUVentureManagedValueMedian_Basic/RiderFundValueOfTheYearValueTotalMedian)));
            
        }
        else{
            if (aaRound == 1) {
                currentValue = ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ]) + IncreasePrem) * [self ReturnVUVentureManagedFac:aaPolicyYear] +
                                [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVentureManagedFactor/100.00 * [self ReturnPremiumFactor:i]) *
                (1 + [self ReturnVUVentureManagedInstMedian:@""]) + RiderVUVentureManagedPrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVentureManagedInstMedian:@"A"]);
                RiderVUVentureManagedValueMedian = currentValue;
            }
            else{
                currentValue = RiderVUVentureManagedValueMedian;
            }
        }
        
        if (aaRound == 2) {
            RiderVUVentureManagedPrevValueMedian = currentValue;
        }
        return currentValue;
    }
    
}

-(double)ReturnRiderVUVentureManagedValueLow :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andRound:(NSInteger)aaRound andMonth:(int)i{
    
    double currentValue;
    
    
    if ([aaYearOrMonth isEqualToString:@"M"]) {
        
        
        if (i == 1) {
            RiderMonthVUVentureManagedPrevValueLow = RiderVUVentureManagedPrevValueLow ;
        }
        
        double tempPrev = RiderMonthVUVentureManagedPrevValueLow;
        if ((i == MonthDiff2035 + 1 && aaPolicyYear == YearDiff2035)  ) {
            RiderMonthVUVentureManagedPrevValueLow = RiderMonthVUVentureManagedPrevValueLow + (Ridertemp2035Low * Fund2035ReinvestToVentureManagedFac/100.00);
        }
        else if(i == MonthDiff2030 + 1 && aaPolicyYear == YearDiff2030){
            RiderMonthVUVentureManagedPrevValueLow = RiderMonthVUVentureManagedPrevValueLow + (Ridertemp2030Low * Fund2030ReinvestToVentureManagedFac/100.00);
        }
        else if(i == MonthDiff2028 + 1 && aaPolicyYear == YearDiff2028){
            RiderMonthVUVentureManagedPrevValueLow = RiderMonthVUVentureManagedPrevValueLow + (Ridertemp2028Low * Fund2028ReinvestToVentureManagedFac/100.00);
        }
        else if(i == MonthDiff2025 + 1 && aaPolicyYear == YearDiff2025){
            RiderMonthVUVentureManagedPrevValueLow = RiderMonthVUVentureManagedPrevValueLow + (Ridertemp2025Low * Fund2025ReinvestToVentureManagedFac/100.00);
        }
        else if(i == MonthDiff2023 + 1 && aaPolicyYear == YearDiff2023){
            RiderMonthVUVentureManagedPrevValueLow = RiderMonthVUVentureManagedPrevValueLow + (Ridertemp2023Low * Fund2023ReinvestToVentureManagedFac/100.00);
        }
        else{
            
        }
        
        if (RiderVUCashValueNegative == TRUE && RiderMonthFundValueOfTheYearValueTotalLow != 0 ) {
            currentValue= ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVentureManagedFac:aaPolicyYear  andMonth:i] +
                           [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVentureManagedFactor/100.00 * [self ReturnPremiumFactor:i]) *
            pow(1 + [self ReturnVUVentureManagedInstLow:@"A"], 1.00/12.00) + RiderMonthVUVentureManagedPrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
            pow(1 + [self ReturnVUVentureManagedInstLow:@"A"], 1.00/12.00) + (RiderNegativeValueOfMaxCashFundLow - 1) *
            (MAX(0,(RiderMonthFundValueOfTheYearVUVentureManagedValueLow_Basic/RiderMonthFundValueOfTheYearValueTotalLow)));
            
        }
        else{
            currentValue = ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVentureManagedFac:aaPolicyYear  andMonth:i] +
                            [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVentureManagedFactor/100.00 * [self ReturnPremiumFactor:i]) *
            pow(1 + [self ReturnVUVentureManagedInstLow:@"A"], 1.00/12.00) + RiderMonthVUVentureManagedPrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
            pow(1 + [self ReturnVUVentureManagedInstLow:@"A"], 1.00/12.00);
            
        }
        
        
        if (aaRound == 2) {
            RiderMonthVUVentureManagedPrevValueLow = currentValue;
        }
        else{
            RiderMonthVUVentureManagedPrevValueLow = tempPrev;
        }
        
        if (i == 12  && aaRound == 2) {
            RiderVUVentureManagedPrevValueLow = RiderMonthVUVentureManagedPrevValueLow ;
        }
        
        //return MonthVUVentureManagedPrevValueLow;
        return currentValue;
        
    }
    else{
        if (RiderVUCashValueNegative == TRUE && RiderFundValueOfTheYearValueTotalLow != 0 ) {
            currentValue= ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ]) + IncreasePrem) * [self ReturnVUVentureManagedFac:aaPolicyYear]  +
                           [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVentureManagedFactor/100.00 * [self ReturnPremiumFactor:i]) *
            (1 + [self ReturnVUVentureManagedInstLow:@""]) + RiderVUVentureManagedPrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVentureManagedInstLow:@"A"]) + (RiderNegativeValueOfMaxCashFundLow - 1) *
            (MAX(0,(RiderFundValueOfTheYearVUVentureManagedValueLow_Basic/RiderFundValueOfTheYearValueTotalLow)));
            
        }
        else{
            if (aaRound == 1) {
                currentValue = ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ]) + IncreasePrem) * [self ReturnVUVentureManagedFac:aaPolicyYear] +
                                [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVentureManagedFactor/100.00 * [self ReturnPremiumFactor:i]) *
                (1 + [self ReturnVUVentureManagedInstLow:@""]) + RiderVUVentureManagedPrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVentureManagedInstLow:@"A"]);
                RiderVUVentureManagedValueLow = currentValue;
            }
            else{
                currentValue = RiderVUVentureManagedValueLow;
            }
            
        }
        
        if (aaRound == 2) {
            RiderVUVentureManagedPrevValueLow = currentValue;
        }
        return currentValue;
    }
    
}


-(double)ReturnRiderVUVentureIncomeValueHigh :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andRound:(NSInteger)aaRound andMonth:(NSInteger)i{
    
    double currentValue =0.0;
    if ([aaYearOrMonth isEqualToString:@"M"]) {
        
        
        if (i == 1) {
            RiderMonthVUVentureIncomePrevValueHigh = RiderVUVentureIncomePrevValueHigh ;
        }
        
        double tempPrev = RiderMonthVUVentureIncomePrevValueHigh;
        
        if ((i == MonthDiff2035 + 1 && aaPolicyYear == YearDiff2035)) {
            RiderMonthVUVentureIncomePrevValueHigh = RiderMonthVUVentureIncomePrevValueHigh + (Ridertemp2035High * Fund2035ReinvestToVentureIncomeFac/100.00);
        }
        else if(i == MonthDiff2030 + 1 && aaPolicyYear == YearDiff2030){
            RiderMonthVUVentureIncomePrevValueHigh = RiderMonthVUVentureIncomePrevValueHigh + (Ridertemp2030High * Fund2030ReinvestToVentureIncomeFac/100.00);
        }
        else if(i == MonthDiff2028 + 1 && aaPolicyYear == YearDiff2028){
            RiderMonthVUVentureIncomePrevValueHigh = RiderMonthVUVentureIncomePrevValueHigh + (Ridertemp2028High * Fund2028ReinvestToVentureIncomeFac/100.00);
        }
        else if(i == MonthDiff2025 + 1 && aaPolicyYear == YearDiff2025){
            RiderMonthVUVentureIncomePrevValueHigh = RiderMonthVUVentureIncomePrevValueHigh + (Ridertemp2025High * Fund2025ReinvestToVentureIncomeFac/100.00);
        }
        else if(i == MonthDiff2023 + 1 && aaPolicyYear == YearDiff2023){
            RiderMonthVUVentureIncomePrevValueHigh = RiderMonthVUVentureIncomePrevValueHigh + (Ridertemp2023High * Fund2023ReinvestToVentureIncomeFac/100.00);
        }
        else{
            
        }
        
        //NSLog(@"%f", MonthVUVentureIncomePrevValueHigh);
        if (RiderVUCashValueNegative == TRUE && RiderMonthFundValueOfTheYearValueTotalHigh != 0 ) {
            currentValue= ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVentureIncomeFac:aaPolicyYear andMonth:i] +
                           [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVentureIncomeFactor/100.00 * [self ReturnPremiumFactor:i]) *
            pow(1 + [self ReturnVUVentureIncomeInstHigh:aaPolicyYear andMOP:@"A"],1.00/12.00) + RiderMonthVUVentureIncomePrevValueHigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
            pow(1 + [self ReturnVUVentureIncomeInstHigh:aaPolicyYear andMOP:@"A"], 1.00/12.00) + (RiderNegativeValueOfMaxCashFundHigh - 1) *
            (MAX(0,(RiderMonthFundValueOfTheYearVUVentureIncomeValueHigh_Basic/RiderMonthFundValueOfTheYearValueTotalHigh)));
            
            //NSLog(@"%f %f %f",NegativeValueOfMaxCashFundHigh, MonthVUVentureIncomeValueHigh,MonthFundValueOfTheYearValueTotalHigh );
            
        }
        else{
            currentValue = ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVentureIncomeFac:aaPolicyYear  andMonth:i] +
                            [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVentureIncomeFactor/100.00 * [self ReturnPremiumFactor:i]) *
            pow((1 + [self ReturnVUVentureIncomeInstHigh:aaPolicyYear andMOP:@"A"]),(1.00/12.00)) + RiderMonthVUVentureIncomePrevValueHigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
            pow((1 + [self ReturnVUVentureIncomeInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00));
            
            
        }
        
        //NSLog(@"%f, %f, %f, %f",NegativeValueOfMaxCashFundHigh, MonthVUVentureIncomeValueHigh, MonthFundValueOfTheYearValueTotalHigh, currentValue);
        
        if (aaRound == 2) {
            RiderMonthVUVentureIncomePrevValueHigh = currentValue;
        }
        else{
            RiderMonthVUVentureIncomePrevValueHigh = tempPrev;
        }
        
        
        if (i == 12  && aaRound == 2) {
            RiderVUVentureIncomePrevValueHigh = RiderMonthVUVentureIncomePrevValueHigh;
        }
        
        //NSLog(@"%d %f %f, %d ", i, MonthVUVentureIncomeValueHigh, MonthFundValueOfTheYearValueTotalHigh, VUCashValueNegative);
        //return MonthVUVentureIncomePrevValueHigh;
        return currentValue;
        
        
        
        
    }
    else{
        //if (VUCashValueHigh < 0 && [self ReturnFundValueOfTheYearValueTotalHigh:aaPolicyYear] != 0 ) {
        if (RiderVUCashValueNegative == TRUE && RiderFundValueOfTheYearValueTotalHigh != 0 ) {
            currentValue= ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] ) + IncreasePrem) * [self ReturnVUVentureIncomeFac:aaPolicyYear] +
                           [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVentureIncomeFactor/100.00 * [self ReturnPremiumFactor:i]) *
            (1 + [self ReturnVUVentureIncomeInstHigh:aaPolicyYear andMOP:@""]) + RiderVUVentureIncomePrevValueHigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVentureIncomeInstHigh:aaPolicyYear andMOP:@"A"]) + (RiderNegativeValueOfMaxCashFundHigh - 1) *
            (MAX(0,(RiderFundValueOfTheYearVUVentureIncomeValueHigh_Basic/RiderFundValueOfTheYearValueTotalHigh)));
            
        }
        else{
            if (aaRound == 1) {
                currentValue = ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] ) + IncreasePrem) * [self ReturnVUVentureIncomeFac:aaPolicyYear] +
                                [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVentureIncomeFactor/100.00 * [self ReturnPremiumFactor:i]) *
                (1 + [self ReturnVUVentureIncomeInstHigh:aaPolicyYear andMOP:@""]) + RiderVUVentureIncomePrevValueHigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVentureIncomeInstHigh:aaPolicyYear andMOP:@"A"]);
                RiderVUVentureIncomeValueHigh = currentValue;
            }
            else{
                currentValue = RiderVUVentureIncomeValueHigh;
            }
            
        }
        
        if (aaRound == 2) {
            RiderVUVentureIncomePrevValueHigh = currentValue;
        }
        
        return currentValue;
    }
    
    
}

-(double)ReturnRiderVUVentureIncomeValueMedian :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andRound:(NSInteger)aaRound andMonth:(int)i{
    
    double currentValue;
    
    if ([aaYearOrMonth isEqualToString:@"M"]) {
        
        
        if (i == 1) {
            RiderMonthVUVentureIncomePrevValueMedian = RiderVUVentureIncomePrevValueMedian ;
        }
        
        double tempPrev = RiderMonthVUVentureIncomePrevValueMedian;
        if ((i == MonthDiff2035 + 1 && aaPolicyYear == YearDiff2035)  ) {
            RiderMonthVUVentureIncomePrevValueMedian = RiderMonthVUVentureIncomePrevValueMedian + (Ridertemp2035Median * Fund2035ReinvestToVentureIncomeFac/100.00);
        }
        else if(i == MonthDiff2030 + 1 && aaPolicyYear == YearDiff2030){
            RiderMonthVUVentureIncomePrevValueMedian = RiderMonthVUVentureIncomePrevValueMedian + (Ridertemp2030Median * Fund2030ReinvestToVentureIncomeFac/100.00);
        }
        else if(i == MonthDiff2028 + 1 && aaPolicyYear == YearDiff2028){
            RiderMonthVUVentureIncomePrevValueMedian = RiderMonthVUVentureIncomePrevValueMedian + (Ridertemp2028Median * Fund2028ReinvestToVentureIncomeFac/100.00);
        }
        else if(i == MonthDiff2025 + 1 && aaPolicyYear == YearDiff2025){
            RiderMonthVUVentureIncomePrevValueMedian = RiderMonthVUVentureIncomePrevValueMedian + (Ridertemp2025Median * Fund2025ReinvestToVentureIncomeFac/100.00);
        }
        else if(i == MonthDiff2023 + 1 && aaPolicyYear == YearDiff2023){
            RiderMonthVUVentureIncomePrevValueMedian = RiderMonthVUVentureIncomePrevValueMedian + (Ridertemp2023Median * Fund2023ReinvestToVentureIncomeFac/100.00);
        }
        else{
            
        }
        
        if (RiderVUCashValueNegative == TRUE && RiderMonthFundValueOfTheYearValueTotalMedian != 0 ) {
            currentValue= ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVentureIncomeFac:aaPolicyYear  andMonth:i] +
                           [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVentureIncomeFactor/100.00 * [self ReturnPremiumFactor:i]) *
            pow(1 + [self ReturnVUVentureIncomeInstMedian:@"A"], 1.00/12.00) + RiderMonthVUVentureIncomePrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
            pow(1 + [self ReturnVUVentureIncomeInstMedian:@"A"], 1.00/12.00) + (RiderNegativeValueOfMaxCashFundMedian - 1) *
            (MAX(0,(RiderMonthFundValueOfTheYearVUVentureIncomeValueMedian_Basic/RiderMonthFundValueOfTheYearValueTotalMedian)));
            
        }
        else{
            currentValue = ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVentureIncomeFac:aaPolicyYear  andMonth:i] +
                            [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVentureIncomeFactor/100.00 * [self ReturnPremiumFactor:i]) *
            pow(1 + [self ReturnVUVentureIncomeInstMedian:@"A"], 1.00/12.00) + RiderMonthVUVentureIncomePrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
            pow(1 + [self ReturnVUVentureIncomeInstMedian:@"A"], 1.00/12.00);
            
        }
        
        if (aaRound == 2) {
            RiderMonthVUVentureIncomePrevValueMedian = currentValue;
        }
        else{
            RiderMonthVUVentureIncomePrevValueMedian = tempPrev;
        }
        
        if (i == 12  && aaRound == 2) {
            RiderVUVentureIncomePrevValueMedian = RiderMonthVUVentureIncomePrevValueMedian ;
        }
        
        
        //return MonthVUVentureIncomePrevValueMedian;
        return currentValue;
        
    }
    else{
        //if (VUCashValueMedian < 0 && [self ReturnFundValueOfTheYearValueTotalMedian:aaPolicyYear] != 0 ) {
        if (RiderVUCashValueNegative == TRUE && RiderFundValueOfTheYearValueTotalMedian != 0 ) {
            currentValue= ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ]) + IncreasePrem) * [self ReturnVUVentureIncomeFac:aaPolicyYear] +
                           [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVentureIncomeFactor/100.00 * [self ReturnPremiumFactor:i]) *
            (1 + [self ReturnVUVentureIncomeInstMedian:@""]) + RiderVUVentureIncomePrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVentureIncomeInstMedian:@"A"]) + (RiderNegativeValueOfMaxCashFundMedian - 1) *
            (MAX(0,(RiderFundValueOfTheYearVUVentureIncomeValueMedian_Basic/RiderFundValueOfTheYearValueTotalMedian)));
            
        }
        else{
            if (aaRound == 1) {
                currentValue = ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ]) + IncreasePrem) * [self ReturnVUVentureIncomeFac:aaPolicyYear] +
                                [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVentureIncomeFactor/100.00 * [self ReturnPremiumFactor:i]) *
                (1 + [self ReturnVUVentureIncomeInstMedian:@""]) + RiderVUVentureIncomePrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVentureIncomeInstMedian:@"A"]);
                RiderVUVentureIncomeValueMedian = currentValue;
            }
            else{
                currentValue = RiderVUVentureIncomeValueMedian;
            }
        }
        
        if (aaRound == 2) {
            RiderVUVentureIncomePrevValueMedian = currentValue;
        }
        return currentValue;
    }
    
}

-(double)ReturnRiderVUVentureIncomeValueLow :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andRound:(NSInteger)aaRound andMonth:(int)i{
    
    double currentValue;
    
    
    if ([aaYearOrMonth isEqualToString:@"M"]) {
        
        
        if (i == 1) {
            RiderMonthVUVentureIncomePrevValueLow = RiderVUVentureIncomePrevValueLow ;
        }
        
        double tempPrev = RiderMonthVUVentureIncomePrevValueLow;
        if ((i == MonthDiff2035 + 1 && aaPolicyYear == YearDiff2035)  ) {
            RiderMonthVUVentureIncomePrevValueLow = RiderMonthVUVentureIncomePrevValueLow + (Ridertemp2035Low * Fund2035ReinvestToVentureIncomeFac/100.00);
        }
        else if(i == MonthDiff2030 + 1 && aaPolicyYear == YearDiff2030){
            RiderMonthVUVentureIncomePrevValueLow = RiderMonthVUVentureIncomePrevValueLow + (Ridertemp2030Low * Fund2030ReinvestToVentureIncomeFac/100.00);
        }
        else if(i == MonthDiff2028 + 1 && aaPolicyYear == YearDiff2028){
            RiderMonthVUVentureIncomePrevValueLow = RiderMonthVUVentureIncomePrevValueLow + (Ridertemp2028Low * Fund2028ReinvestToVentureIncomeFac/100.00);
        }
        else if(i == MonthDiff2025 + 1 && aaPolicyYear == YearDiff2025){
            RiderMonthVUVentureIncomePrevValueLow = RiderMonthVUVentureIncomePrevValueLow + (Ridertemp2025Low * Fund2025ReinvestToVentureIncomeFac/100.00);
        }
        else if(i == MonthDiff2023 + 1 && aaPolicyYear == YearDiff2023){
            RiderMonthVUVentureIncomePrevValueLow = RiderMonthVUVentureIncomePrevValueLow + (Ridertemp2023Low * Fund2023ReinvestToVentureIncomeFac/100.00);
        }
        else{
            
        }
        
        if (RiderVUCashValueNegative == TRUE && RiderMonthFundValueOfTheYearValueTotalLow != 0 ) {
            currentValue= ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVentureIncomeFac:aaPolicyYear  andMonth:i] +
                           [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVentureIncomeFactor/100.00 * [self ReturnPremiumFactor:i]) *
            pow(1 + [self ReturnVUVentureIncomeInstLow:@"A"], 1.00/12.00) + RiderMonthVUVentureIncomePrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
            pow(1 + [self ReturnVUVentureIncomeInstLow:@"A"], 1.00/12.00) + (RiderNegativeValueOfMaxCashFundLow - 1) *
            (MAX(0,(RiderMonthFundValueOfTheYearVUVentureIncomeValueLow_Basic/RiderMonthFundValueOfTheYearValueTotalLow)));
            
        }
        else{
            currentValue = ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVentureIncomeFac:aaPolicyYear  andMonth:i] +
                            [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVentureIncomeFactor/100.00 * [self ReturnPremiumFactor:i]) *
            pow(1 + [self ReturnVUVentureIncomeInstLow:@"A"], 1.00/12.00) + RiderMonthVUVentureIncomePrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
            pow(1 + [self ReturnVUVentureIncomeInstLow:@"A"], 1.00/12.00);
            
        }
        
        
        if (aaRound == 2) {
            RiderMonthVUVentureIncomePrevValueLow = currentValue;
        }
        else{
            RiderMonthVUVentureIncomePrevValueLow = tempPrev;
        }
        
        if (i == 12  && aaRound == 2) {
            RiderVUVentureIncomePrevValueLow = RiderMonthVUVentureIncomePrevValueLow ;
        }
        
        //return MonthVUVentureIncomePrevValueLow;
        return currentValue;
        
    }
    else{
        if (RiderVUCashValueNegative == TRUE && RiderFundValueOfTheYearValueTotalLow != 0 ) {
            currentValue= ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ]) + IncreasePrem) * [self ReturnVUVentureIncomeFac:aaPolicyYear]  +
                           [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVentureIncomeFactor/100.00 * [self ReturnPremiumFactor:i]) *
            (1 + [self ReturnVUVentureIncomeInstLow:@""]) + RiderVUVentureIncomePrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVentureIncomeInstLow:@"A"]) + (RiderNegativeValueOfMaxCashFundLow - 1) *
            (MAX(0,(RiderFundValueOfTheYearVUVentureIncomeValueLow_Basic/RiderFundValueOfTheYearValueTotalLow)));
            
        }
        else{
            if (aaRound == 1) {
                currentValue = ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ]) + IncreasePrem) * [self ReturnVUVentureIncomeFac:aaPolicyYear] +
                                [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVentureIncomeFactor/100.00 * [self ReturnPremiumFactor:i]) *
                (1 + [self ReturnVUVentureIncomeInstLow:@""]) + RiderVUVentureIncomePrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVentureIncomeInstLow:@"A"]);
                RiderVUVentureIncomeValueLow = currentValue;
            }
            else{
                currentValue = RiderVUVentureIncomeValueLow;
            }
            
        }
        
        if (aaRound == 2) {
            RiderVUVentureIncomePrevValueLow = currentValue;
        }
        return currentValue;
    }
    
}

-(double)ReturnRiderVUVenture6666ValueHigh :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andRound:(NSInteger)aaRound andMonth:(NSInteger)i{
    
    double currentValue =0.0;
    if ([aaYearOrMonth isEqualToString:@"M"]) {
        
        
        if (i == 1) {
            RiderMonthVUVenture6666PrevValueHigh = RiderVUVenture6666PrevValueHigh ;
        }
        
        double tempPrev = RiderMonthVUVenture6666PrevValueHigh;
        
        if ((i == MonthDiff2035 + 1 && aaPolicyYear == YearDiff2035)) {
            RiderMonthVUVenture6666PrevValueHigh = RiderMonthVUVenture6666PrevValueHigh + (Ridertemp2035High * Fund2035ReinvestToVenture6666Fac/100.00);
        }
        else if(i == MonthDiff2030 + 1 && aaPolicyYear == YearDiff2030){
            RiderMonthVUVenture6666PrevValueHigh = RiderMonthVUVenture6666PrevValueHigh + (Ridertemp2030High * Fund2030ReinvestToVenture6666Fac/100.00);
        }
        else if(i == MonthDiff2028 + 1 && aaPolicyYear == YearDiff2028){
            RiderMonthVUVenture6666PrevValueHigh = RiderMonthVUVenture6666PrevValueHigh + (Ridertemp2028High * Fund2028ReinvestToVenture6666Fac/100.00);
        }
        else if(i == MonthDiff2025 + 1 && aaPolicyYear == YearDiff2025){
            RiderMonthVUVenture6666PrevValueHigh = RiderMonthVUVenture6666PrevValueHigh + (Ridertemp2025High * Fund2025ReinvestToVenture6666Fac/100.00);
        }
        else if(i == MonthDiff2023 + 1 && aaPolicyYear == YearDiff2023){
            RiderMonthVUVenture6666PrevValueHigh = RiderMonthVUVenture6666PrevValueHigh + (Ridertemp2023High * Fund2023ReinvestToVenture6666Fac/100.00);
        }
        else{
            
        }
        
        //NSLog(@"%f", MonthVUVenture6666PrevValueHigh);
        if (RiderVUCashValueNegative == TRUE && RiderMonthFundValueOfTheYearValueTotalHigh != 0 ) {
            currentValue= ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVenture6666Fac:aaPolicyYear andMonth:i] +
                           [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVenture6666Factor/100.00 * [self ReturnPremiumFactor:i]) *
            pow(1 + [self ReturnVUVenture6666InstHigh:aaPolicyYear andMOP:@"A"],1.00/12.00) + RiderMonthVUVenture6666PrevValueHigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
            pow(1 + [self ReturnVUVenture6666InstHigh:aaPolicyYear andMOP:@"A"], 1.00/12.00) + (RiderNegativeValueOfMaxCashFundHigh - 1) *
            (MAX(0,(RiderMonthFundValueOfTheYearVUVenture6666ValueHigh_Basic/RiderMonthFundValueOfTheYearValueTotalHigh)));
            
            //NSLog(@"%f %f %f",NegativeValueOfMaxCashFundHigh, MonthVUVenture6666ValueHigh,MonthFundValueOfTheYearValueTotalHigh );
            
        }
        else{
            currentValue = ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVenture6666Fac:aaPolicyYear  andMonth:i] +
                            [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVenture6666Factor/100.00 * [self ReturnPremiumFactor:i]) *
            pow((1 + [self ReturnVUVenture6666InstHigh:aaPolicyYear andMOP:@"A"]),(1.00/12.00)) + RiderMonthVUVenture6666PrevValueHigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
            pow((1 + [self ReturnVUVenture6666InstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00));
            
            
        }
        
        //NSLog(@"%f, %f, %f, %f",NegativeValueOfMaxCashFundHigh, MonthVUVenture6666ValueHigh, MonthFundValueOfTheYearValueTotalHigh, currentValue);
        
        if (aaRound == 2) {
            RiderMonthVUVenture6666PrevValueHigh = currentValue;
        }
        else{
            RiderMonthVUVenture6666PrevValueHigh = tempPrev;
        }
        
        
        if (i == 12  && aaRound == 2) {
            RiderVUVenture6666PrevValueHigh = RiderMonthVUVenture6666PrevValueHigh;
        }
        
        //NSLog(@"%d %f %f, %d ", i, MonthVUVenture6666ValueHigh, MonthFundValueOfTheYearValueTotalHigh, VUCashValueNegative);
        //return MonthVUVenture6666PrevValueHigh;
        return currentValue;
        
        
        
        
    }
    else{
        //if (VUCashValueHigh < 0 && [self ReturnFundValueOfTheYearValueTotalHigh:aaPolicyYear] != 0 ) {
        if (RiderVUCashValueNegative == TRUE && RiderFundValueOfTheYearValueTotalHigh != 0 ) {
            currentValue= ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] ) + IncreasePrem) * [self ReturnVUVenture6666Fac:aaPolicyYear] +
                           [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVenture6666Factor/100.00 * [self ReturnPremiumFactor:i]) *
            (1 + [self ReturnVUVenture6666InstHigh:aaPolicyYear andMOP:@""]) + RiderVUVenture6666PrevValueHigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVenture6666InstHigh:aaPolicyYear andMOP:@"A"]) + (RiderNegativeValueOfMaxCashFundHigh - 1) *
            (MAX(0,(RiderFundValueOfTheYearVUVenture6666ValueHigh_Basic/RiderFundValueOfTheYearValueTotalHigh)));
            
        }
        else{
            if (aaRound == 1) {
                currentValue = ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] ) + IncreasePrem) * [self ReturnVUVenture6666Fac:aaPolicyYear] +
                                [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVenture6666Factor/100.00 * [self ReturnPremiumFactor:i]) *
                (1 + [self ReturnVUVenture6666InstHigh:aaPolicyYear andMOP:@""]) + RiderVUVenture6666PrevValueHigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVenture6666InstHigh:aaPolicyYear andMOP:@"A"]);
                RiderVUVenture6666ValueHigh = currentValue;
            }
            else{
                currentValue = RiderVUVenture6666ValueHigh;
            }
            
        }
        
        if (aaRound == 2) {
            RiderVUVenture6666PrevValueHigh = currentValue;
        }
        
        return currentValue;
    }
    
    
}

-(double)ReturnRiderVUVenture6666ValueMedian :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andRound:(NSInteger)aaRound andMonth:(int)i{
    
    double currentValue;
    
    if ([aaYearOrMonth isEqualToString:@"M"]) {
        
        
        if (i == 1) {
            RiderMonthVUVenture6666PrevValueMedian = RiderVUVenture6666PrevValueMedian ;
        }
        
        double tempPrev = RiderMonthVUVenture6666PrevValueMedian;
        if ((i == MonthDiff2035 + 1 && aaPolicyYear == YearDiff2035)  ) {
            RiderMonthVUVenture6666PrevValueMedian = RiderMonthVUVenture6666PrevValueMedian + (Ridertemp2035Median * Fund2035ReinvestToVenture6666Fac/100.00);
        }
        else if(i == MonthDiff2030 + 1 && aaPolicyYear == YearDiff2030){
            RiderMonthVUVenture6666PrevValueMedian = RiderMonthVUVenture6666PrevValueMedian + (Ridertemp2030Median * Fund2030ReinvestToVenture6666Fac/100.00);
        }
        else if(i == MonthDiff2028 + 1 && aaPolicyYear == YearDiff2028){
            RiderMonthVUVenture6666PrevValueMedian = RiderMonthVUVenture6666PrevValueMedian + (Ridertemp2028Median * Fund2028ReinvestToVenture6666Fac/100.00);
        }
        else if(i == MonthDiff2025 + 1 && aaPolicyYear == YearDiff2025){
            RiderMonthVUVenture6666PrevValueMedian = RiderMonthVUVenture6666PrevValueMedian + (Ridertemp2025Median * Fund2025ReinvestToVenture6666Fac/100.00);
        }
        else if(i == MonthDiff2023 + 1 && aaPolicyYear == YearDiff2023){
            RiderMonthVUVenture6666PrevValueMedian = RiderMonthVUVenture6666PrevValueMedian + (Ridertemp2023Median * Fund2023ReinvestToVenture6666Fac/100.00);
        }
        else{
            
        }
        
        if (RiderVUCashValueNegative == TRUE && RiderMonthFundValueOfTheYearValueTotalMedian != 0 ) {
            currentValue= ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVenture6666Fac:aaPolicyYear  andMonth:i] +
                           [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVenture6666Factor/100.00 * [self ReturnPremiumFactor:i]) *
            pow(1 + [self ReturnVUVenture6666InstMedian:@"A"], 1.00/12.00) + RiderMonthVUVenture6666PrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
            pow(1 + [self ReturnVUVenture6666InstMedian:@"A"], 1.00/12.00) + (RiderNegativeValueOfMaxCashFundMedian - 1) *
            (MAX(0,(RiderMonthFundValueOfTheYearVUVenture6666ValueMedian_Basic/RiderMonthFundValueOfTheYearValueTotalMedian)));
            
        }
        else{
            currentValue = ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVenture6666Fac:aaPolicyYear  andMonth:i] +
                            [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVenture6666Factor/100.00 * [self ReturnPremiumFactor:i]) *
            pow(1 + [self ReturnVUVenture6666InstMedian:@"A"], 1.00/12.00) + RiderMonthVUVenture6666PrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
            pow(1 + [self ReturnVUVenture6666InstMedian:@"A"], 1.00/12.00);
            
        }
        
        if (aaRound == 2) {
            RiderMonthVUVenture6666PrevValueMedian = currentValue;
        }
        else{
            RiderMonthVUVenture6666PrevValueMedian = tempPrev;
        }
        
        if (i == 12  && aaRound == 2) {
            RiderVUVenture6666PrevValueMedian = RiderMonthVUVenture6666PrevValueMedian ;
        }
        
        
        //return MonthVUVenture6666PrevValueMedian;
        return currentValue;
        
    }
    else{
        //if (VUCashValueMedian < 0 && [self ReturnFundValueOfTheYearValueTotalMedian:aaPolicyYear] != 0 ) {
        if (RiderVUCashValueNegative == TRUE && RiderFundValueOfTheYearValueTotalMedian != 0 ) {
            currentValue= ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ]) + IncreasePrem) * [self ReturnVUVenture6666Fac:aaPolicyYear] +
                           [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVenture6666Factor/100.00 * [self ReturnPremiumFactor:i]) *
            (1 + [self ReturnVUVenture6666InstMedian:@""]) + RiderVUVenture6666PrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVenture6666InstMedian:@"A"]) + (RiderNegativeValueOfMaxCashFundMedian - 1) *
            (MAX(0,(RiderFundValueOfTheYearVUVenture6666ValueMedian_Basic/RiderFundValueOfTheYearValueTotalMedian)));
            
        }
        else{
            if (aaRound == 1) {
                currentValue = ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ]) + IncreasePrem) * [self ReturnVUVenture6666Fac:aaPolicyYear] +
                                [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVenture6666Factor/100.00 * [self ReturnPremiumFactor:i]) *
                (1 + [self ReturnVUVenture6666InstMedian:@""]) + RiderVUVenture6666PrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVenture6666InstMedian:@"A"]);
                RiderVUVenture6666ValueMedian = currentValue;
            }
            else{
                currentValue = RiderVUVenture6666ValueMedian;
            }
        }
        
        if (aaRound == 2) {
            RiderVUVenture6666PrevValueMedian = currentValue;
        }
        return currentValue;
    }
    
}

-(double)ReturnRiderVUVenture6666ValueLow :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andRound:(NSInteger)aaRound andMonth:(int)i{
    
    double currentValue;
    
    
    if ([aaYearOrMonth isEqualToString:@"M"]) {
        
        
        if (i == 1) {
            RiderMonthVUVenture6666PrevValueLow = RiderVUVenture6666PrevValueLow ;
        }
        
        double tempPrev = RiderMonthVUVenture6666PrevValueLow;
        if ((i == MonthDiff2035 + 1 && aaPolicyYear == YearDiff2035)  ) {
            RiderMonthVUVenture6666PrevValueLow = RiderMonthVUVenture6666PrevValueLow + (Ridertemp2035Low * Fund2035ReinvestToVenture6666Fac/100.00);
        }
        else if(i == MonthDiff2030 + 1 && aaPolicyYear == YearDiff2030){
            RiderMonthVUVenture6666PrevValueLow = RiderMonthVUVenture6666PrevValueLow + (Ridertemp2030Low * Fund2030ReinvestToVenture6666Fac/100.00);
        }
        else if(i == MonthDiff2028 + 1 && aaPolicyYear == YearDiff2028){
            RiderMonthVUVenture6666PrevValueLow = RiderMonthVUVenture6666PrevValueLow + (Ridertemp2028Low * Fund2028ReinvestToVenture6666Fac/100.00);
        }
        else if(i == MonthDiff2025 + 1 && aaPolicyYear == YearDiff2025){
            RiderMonthVUVenture6666PrevValueLow = RiderMonthVUVenture6666PrevValueLow + (Ridertemp2025Low * Fund2025ReinvestToVenture6666Fac/100.00);
        }
        else if(i == MonthDiff2023 + 1 && aaPolicyYear == YearDiff2023){
            RiderMonthVUVenture6666PrevValueLow = RiderMonthVUVenture6666PrevValueLow + (Ridertemp2023Low * Fund2023ReinvestToVenture6666Fac/100.00);
        }
        else{
            
        }
        
        if (RiderVUCashValueNegative == TRUE && RiderMonthFundValueOfTheYearValueTotalLow != 0 ) {
            currentValue= ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVenture6666Fac:aaPolicyYear  andMonth:i] +
                           [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVenture6666Factor/100.00 * [self ReturnPremiumFactor:i]) *
            pow(1 + [self ReturnVUVenture6666InstLow:@"A"], 1.00/12.00) + RiderMonthVUVenture6666PrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
            pow(1 + [self ReturnVUVenture6666InstLow:@"A"], 1.00/12.00) + (RiderNegativeValueOfMaxCashFundLow - 1) *
            (MAX(0,(RiderMonthFundValueOfTheYearVUVenture6666ValueLow_Basic/RiderMonthFundValueOfTheYearValueTotalLow)));
            
        }
        else{
            currentValue = ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVenture6666Fac:aaPolicyYear  andMonth:i] +
                            [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVenture6666Factor/100.00 * [self ReturnPremiumFactor:i]) *
            pow(1 + [self ReturnVUVenture6666InstLow:@"A"], 1.00/12.00) + RiderMonthVUVenture6666PrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
            pow(1 + [self ReturnVUVenture6666InstLow:@"A"], 1.00/12.00);
            
        }
        
        
        if (aaRound == 2) {
            RiderMonthVUVenture6666PrevValueLow = currentValue;
        }
        else{
            RiderMonthVUVenture6666PrevValueLow = tempPrev;
        }
        
        if (i == 12  && aaRound == 2) {
            RiderVUVenture6666PrevValueLow = RiderMonthVUVenture6666PrevValueLow ;
        }
        
        //return MonthVUVenture6666PrevValueLow;
        return currentValue;
        
    }
    else{
        if (RiderVUCashValueNegative == TRUE && RiderFundValueOfTheYearValueTotalLow != 0 ) {
            currentValue= ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ]) + IncreasePrem) * [self ReturnVUVenture6666Fac:aaPolicyYear]  +
                           [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVenture6666Factor/100.00 * [self ReturnPremiumFactor:i]) *
            (1 + [self ReturnVUVenture6666InstLow:@""]) + RiderVUVenture6666PrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVenture6666InstLow:@"A"]) + (RiderNegativeValueOfMaxCashFundLow - 1) *
            (MAX(0,(RiderFundValueOfTheYearVUVenture6666ValueLow_Basic/RiderFundValueOfTheYearValueTotalLow)));
            
        }
        else{
            if (aaRound == 1) {
                currentValue = ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ]) + IncreasePrem) * [self ReturnVUVenture6666Fac:aaPolicyYear] +
                                [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVenture6666Factor/100.00 * [self ReturnPremiumFactor:i]) *
                (1 + [self ReturnVUVenture6666InstLow:@""]) + RiderVUVenture6666PrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVenture6666InstLow:@"A"]);
                RiderVUVenture6666ValueLow = currentValue;
            }
            else{
                currentValue = RiderVUVenture6666ValueLow;
            }
            
        }
        
        if (aaRound == 2) {
            RiderVUVenture6666PrevValueLow = currentValue;
        }
        return currentValue;
    }
    
}

-(double)ReturnRiderVUVenture7777ValueHigh :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andRound:(NSInteger)aaRound andMonth:(NSInteger)i{
    
    double currentValue =0.0;
    if ([aaYearOrMonth isEqualToString:@"M"]) {
        
        
        if (i == 1) {
            RiderMonthVUVenture7777PrevValueHigh = RiderVUVenture7777PrevValueHigh ;
        }
        
        double tempPrev = RiderMonthVUVenture7777PrevValueHigh;
        
        if ((i == MonthDiff2035 + 1 && aaPolicyYear == YearDiff2035)) {
            RiderMonthVUVenture7777PrevValueHigh = RiderMonthVUVenture7777PrevValueHigh + (Ridertemp2035High * Fund2035ReinvestToVenture7777Fac/100.00);
        }
        else if(i == MonthDiff2030 + 1 && aaPolicyYear == YearDiff2030){
            RiderMonthVUVenture7777PrevValueHigh = RiderMonthVUVenture7777PrevValueHigh + (Ridertemp2030High * Fund2030ReinvestToVenture7777Fac/100.00);
        }
        else if(i == MonthDiff2028 + 1 && aaPolicyYear == YearDiff2028){
            RiderMonthVUVenture7777PrevValueHigh = RiderMonthVUVenture7777PrevValueHigh + (Ridertemp2028High * Fund2028ReinvestToVenture7777Fac/100.00);
        }
        else if(i == MonthDiff2025 + 1 && aaPolicyYear == YearDiff2025){
            RiderMonthVUVenture7777PrevValueHigh = RiderMonthVUVenture7777PrevValueHigh + (Ridertemp2025High * Fund2025ReinvestToVenture7777Fac/100.00);
        }
        else if(i == MonthDiff2023 + 1 && aaPolicyYear == YearDiff2023){
            RiderMonthVUVenture7777PrevValueHigh = RiderMonthVUVenture7777PrevValueHigh + (Ridertemp2023High * Fund2023ReinvestToVenture7777Fac/100.00);
        }
        else{
            
        }
        
        //NSLog(@"%f", MonthVUVenture7777PrevValueHigh);
        if (RiderVUCashValueNegative == TRUE && RiderMonthFundValueOfTheYearValueTotalHigh != 0 ) {
            currentValue= ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVenture7777Fac:aaPolicyYear andMonth:i] +
                           [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVenture7777Factor/100.00 * [self ReturnPremiumFactor:i]) *
            pow(1 + [self ReturnVUVenture7777InstHigh:aaPolicyYear andMOP:@"A"],1.00/12.00) + RiderMonthVUVenture7777PrevValueHigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
            pow(1 + [self ReturnVUVenture7777InstHigh:aaPolicyYear andMOP:@"A"], 1.00/12.00) + (RiderNegativeValueOfMaxCashFundHigh - 1) *
            (MAX(0,(RiderMonthFundValueOfTheYearVUVenture7777ValueHigh_Basic/RiderMonthFundValueOfTheYearValueTotalHigh)));
            
            //NSLog(@"%f %f %f",NegativeValueOfMaxCashFundHigh, MonthVUVenture7777ValueHigh,MonthFundValueOfTheYearValueTotalHigh );
            
        }
        else{
            currentValue = ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVenture7777Fac:aaPolicyYear  andMonth:i] +
                            [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVenture7777Factor/100.00 * [self ReturnPremiumFactor:i]) *
            pow((1 + [self ReturnVUVenture7777InstHigh:aaPolicyYear andMOP:@"A"]),(1.00/12.00)) + RiderMonthVUVenture7777PrevValueHigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
            pow((1 + [self ReturnVUVenture7777InstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00));
            
            
        }
        
        //NSLog(@"%f, %f, %f, %f",NegativeValueOfMaxCashFundHigh, MonthVUVenture7777ValueHigh, MonthFundValueOfTheYearValueTotalHigh, currentValue);
        
        if (aaRound == 2) {
            RiderMonthVUVenture7777PrevValueHigh = currentValue;
        }
        else{
            RiderMonthVUVenture7777PrevValueHigh = tempPrev;
        }
        
        
        if (i == 12  && aaRound == 2) {
            RiderVUVenture7777PrevValueHigh = RiderMonthVUVenture7777PrevValueHigh;
        }
        
        //NSLog(@"%d %f %f, %d ", i, MonthVUVenture7777ValueHigh, MonthFundValueOfTheYearValueTotalHigh, VUCashValueNegative);
        //return MonthVUVenture7777PrevValueHigh;
        return currentValue;
        
        
        
        
    }
    else{
        //if (VUCashValueHigh < 0 && [self ReturnFundValueOfTheYearValueTotalHigh:aaPolicyYear] != 0 ) {
        if (RiderVUCashValueNegative == TRUE && RiderFundValueOfTheYearValueTotalHigh != 0 ) {
            currentValue= ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] ) + IncreasePrem) * [self ReturnVUVenture7777Fac:aaPolicyYear] +
                           [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVenture7777Factor/100.00 * [self ReturnPremiumFactor:i]) *
            (1 + [self ReturnVUVenture7777InstHigh:aaPolicyYear andMOP:@""]) + RiderVUVenture7777PrevValueHigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVenture7777InstHigh:aaPolicyYear andMOP:@"A"]) + (RiderNegativeValueOfMaxCashFundHigh - 1) *
            (MAX(0,(RiderFundValueOfTheYearVUVenture7777ValueHigh_Basic/RiderFundValueOfTheYearValueTotalHigh)));
            
        }
        else{
            if (aaRound == 1) {
                currentValue = ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] ) + IncreasePrem) * [self ReturnVUVenture7777Fac:aaPolicyYear] +
                                [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVenture7777Factor/100.00 * [self ReturnPremiumFactor:i]) *
                (1 + [self ReturnVUVenture7777InstHigh:aaPolicyYear andMOP:@""]) + RiderVUVenture7777PrevValueHigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVenture7777InstHigh:aaPolicyYear andMOP:@"A"]);
                RiderVUVenture7777ValueHigh = currentValue;
            }
            else{
                currentValue = RiderVUVenture7777ValueHigh;
            }
            
        }
        
        if (aaRound == 2) {
            RiderVUVenture7777PrevValueHigh = currentValue;
        }
        
        return currentValue;
    }
    
    
}

-(double)ReturnRiderVUVenture7777ValueMedian :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andRound:(NSInteger)aaRound andMonth:(int)i{
    
    double currentValue;
    
    if ([aaYearOrMonth isEqualToString:@"M"]) {
        
        
        if (i == 1) {
            RiderMonthVUVenture7777PrevValueMedian = RiderVUVenture7777PrevValueMedian ;
        }
        
        double tempPrev = RiderMonthVUVenture7777PrevValueMedian;
        if ((i == MonthDiff2035 + 1 && aaPolicyYear == YearDiff2035)  ) {
            RiderMonthVUVenture7777PrevValueMedian = RiderMonthVUVenture7777PrevValueMedian + (Ridertemp2035Median * Fund2035ReinvestToVenture7777Fac/100.00);
        }
        else if(i == MonthDiff2030 + 1 && aaPolicyYear == YearDiff2030){
            RiderMonthVUVenture7777PrevValueMedian = RiderMonthVUVenture7777PrevValueMedian + (Ridertemp2030Median * Fund2030ReinvestToVenture7777Fac/100.00);
        }
        else if(i == MonthDiff2028 + 1 && aaPolicyYear == YearDiff2028){
            RiderMonthVUVenture7777PrevValueMedian = RiderMonthVUVenture7777PrevValueMedian + (Ridertemp2028Median * Fund2028ReinvestToVenture7777Fac/100.00);
        }
        else if(i == MonthDiff2025 + 1 && aaPolicyYear == YearDiff2025){
            RiderMonthVUVenture7777PrevValueMedian = RiderMonthVUVenture7777PrevValueMedian + (Ridertemp2025Median * Fund2025ReinvestToVenture7777Fac/100.00);
        }
        else if(i == MonthDiff2023 + 1 && aaPolicyYear == YearDiff2023){
            RiderMonthVUVenture7777PrevValueMedian = RiderMonthVUVenture7777PrevValueMedian + (Ridertemp2023Median * Fund2023ReinvestToVenture7777Fac/100.00);
        }
        else{
            
        }
        
        if (RiderVUCashValueNegative == TRUE && RiderMonthFundValueOfTheYearValueTotalMedian != 0 ) {
            currentValue= ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVenture7777Fac:aaPolicyYear  andMonth:i] +
                           [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVenture7777Factor/100.00 * [self ReturnPremiumFactor:i]) *
            pow(1 + [self ReturnVUVenture7777InstMedian:@"A"], 1.00/12.00) + RiderMonthVUVenture7777PrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
            pow(1 + [self ReturnVUVenture7777InstMedian:@"A"], 1.00/12.00) + (RiderNegativeValueOfMaxCashFundMedian - 1) *
            (MAX(0,(RiderMonthFundValueOfTheYearVUVenture7777ValueMedian_Basic/RiderMonthFundValueOfTheYearValueTotalMedian)));
            
        }
        else{
            currentValue = ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVenture7777Fac:aaPolicyYear  andMonth:i] +
                            [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVenture7777Factor/100.00 * [self ReturnPremiumFactor:i]) *
            pow(1 + [self ReturnVUVenture7777InstMedian:@"A"], 1.00/12.00) + RiderMonthVUVenture7777PrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
            pow(1 + [self ReturnVUVenture7777InstMedian:@"A"], 1.00/12.00);
            
        }
        
        if (aaRound == 2) {
            RiderMonthVUVenture7777PrevValueMedian = currentValue;
        }
        else{
            RiderMonthVUVenture7777PrevValueMedian = tempPrev;
        }
        
        if (i == 12  && aaRound == 2) {
            RiderVUVenture7777PrevValueMedian = RiderMonthVUVenture7777PrevValueMedian ;
        }
        
        
        //return MonthVUVenture7777PrevValueMedian;
        return currentValue;
        
    }
    else{
        //if (VUCashValueMedian < 0 && [self ReturnFundValueOfTheYearValueTotalMedian:aaPolicyYear] != 0 ) {
        if (RiderVUCashValueNegative == TRUE && RiderFundValueOfTheYearValueTotalMedian != 0 ) {
            currentValue= ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ]) + IncreasePrem) * [self ReturnVUVenture7777Fac:aaPolicyYear] +
                           [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVenture7777Factor/100.00 * [self ReturnPremiumFactor:i]) *
            (1 + [self ReturnVUVenture7777InstMedian:@""]) + RiderVUVenture7777PrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVenture7777InstMedian:@"A"]) + (RiderNegativeValueOfMaxCashFundMedian - 1) *
            (MAX(0,(RiderFundValueOfTheYearVUVenture7777ValueMedian_Basic/RiderFundValueOfTheYearValueTotalMedian)));
            
        }
        else{
            if (aaRound == 1) {
                currentValue = ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ]) + IncreasePrem) * [self ReturnVUVenture7777Fac:aaPolicyYear] +
                                [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVenture7777Factor/100.00 * [self ReturnPremiumFactor:i]) *
                (1 + [self ReturnVUVenture7777InstMedian:@""]) + RiderVUVenture7777PrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVenture7777InstMedian:@"A"]);
                RiderVUVenture7777ValueMedian = currentValue;
            }
            else{
                currentValue = RiderVUVenture7777ValueMedian;
            }
        }
        
        if (aaRound == 2) {
            RiderVUVenture7777PrevValueMedian = currentValue;
        }
        return currentValue;
    }
    
}

-(double)ReturnRiderVUVenture7777ValueLow :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andRound:(NSInteger)aaRound andMonth:(int)i{
    
    double currentValue;
    
    
    if ([aaYearOrMonth isEqualToString:@"M"]) {
        
        
        if (i == 1) {
            RiderMonthVUVenture7777PrevValueLow = RiderVUVenture7777PrevValueLow ;
        }
        
        double tempPrev = RiderMonthVUVenture7777PrevValueLow;
        if ((i == MonthDiff2035 + 1 && aaPolicyYear == YearDiff2035)  ) {
            RiderMonthVUVenture7777PrevValueLow = RiderMonthVUVenture7777PrevValueLow + (Ridertemp2035Low * Fund2035ReinvestToVenture7777Fac/100.00);
        }
        else if(i == MonthDiff2030 + 1 && aaPolicyYear == YearDiff2030){
            RiderMonthVUVenture7777PrevValueLow = RiderMonthVUVenture7777PrevValueLow + (Ridertemp2030Low * Fund2030ReinvestToVenture7777Fac/100.00);
        }
        else if(i == MonthDiff2028 + 1 && aaPolicyYear == YearDiff2028){
            RiderMonthVUVenture7777PrevValueLow = RiderMonthVUVenture7777PrevValueLow + (Ridertemp2028Low * Fund2028ReinvestToVenture7777Fac/100.00);
        }
        else if(i == MonthDiff2025 + 1 && aaPolicyYear == YearDiff2025){
            RiderMonthVUVenture7777PrevValueLow = RiderMonthVUVenture7777PrevValueLow + (Ridertemp2025Low * Fund2025ReinvestToVenture7777Fac/100.00);
        }
        else if(i == MonthDiff2023 + 1 && aaPolicyYear == YearDiff2023){
            RiderMonthVUVenture7777PrevValueLow = RiderMonthVUVenture7777PrevValueLow + (Ridertemp2023Low * Fund2023ReinvestToVenture7777Fac/100.00);
        }
        else{
            
        }
        
        if (RiderVUCashValueNegative == TRUE && RiderMonthFundValueOfTheYearValueTotalLow != 0 ) {
            currentValue= ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVenture7777Fac:aaPolicyYear  andMonth:i] +
                           [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVenture7777Factor/100.00 * [self ReturnPremiumFactor:i]) *
            pow(1 + [self ReturnVUVenture7777InstLow:@"A"], 1.00/12.00) + RiderMonthVUVenture7777PrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
            pow(1 + [self ReturnVUVenture7777InstLow:@"A"], 1.00/12.00) + (RiderNegativeValueOfMaxCashFundLow - 1) *
            (MAX(0,(RiderMonthFundValueOfTheYearVUVenture7777ValueLow_Basic/RiderMonthFundValueOfTheYearValueTotalLow)));
            
        }
        else{
            currentValue = ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVenture7777Fac:aaPolicyYear  andMonth:i] +
                            [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVenture7777Factor/100.00 * [self ReturnPremiumFactor:i]) *
            pow(1 + [self ReturnVUVenture7777InstLow:@"A"], 1.00/12.00) + RiderMonthVUVenture7777PrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
            pow(1 + [self ReturnVUVenture7777InstLow:@"A"], 1.00/12.00);
            
        }
        
        
        if (aaRound == 2) {
            RiderMonthVUVenture7777PrevValueLow = currentValue;
        }
        else{
            RiderMonthVUVenture7777PrevValueLow = tempPrev;
        }
        
        if (i == 12  && aaRound == 2) {
            RiderVUVenture7777PrevValueLow = RiderMonthVUVenture7777PrevValueLow ;
        }
        
        //return MonthVUVenture7777PrevValueLow;
        return currentValue;
        
    }
    else{
        if (RiderVUCashValueNegative == TRUE && RiderFundValueOfTheYearValueTotalLow != 0 ) {
            currentValue= ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ]) + IncreasePrem) * [self ReturnVUVenture7777Fac:aaPolicyYear]  +
                           [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVenture7777Factor/100.00 * [self ReturnPremiumFactor:i]) *
            (1 + [self ReturnVUVenture7777InstLow:@""]) + RiderVUVenture7777PrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVenture7777InstLow:@"A"]) + (RiderNegativeValueOfMaxCashFundLow - 1) *
            (MAX(0,(RiderFundValueOfTheYearVUVenture7777ValueLow_Basic/RiderFundValueOfTheYearValueTotalLow)));
            
        }
        else{
            if (aaRound == 1) {
                currentValue = ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ]) + IncreasePrem) * [self ReturnVUVenture7777Fac:aaPolicyYear] +
                                [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVenture7777Factor/100.00 * [self ReturnPremiumFactor:i]) *
                (1 + [self ReturnVUVenture7777InstLow:@""]) + RiderVUVenture7777PrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVenture7777InstLow:@"A"]);
                RiderVUVenture7777ValueLow = currentValue;
            }
            else{
                currentValue = RiderVUVenture7777ValueLow;
            }
            
        }
        
        if (aaRound == 2) {
            RiderVUVenture7777PrevValueLow = currentValue;
        }
        return currentValue;
    }
    
}

-(double)ReturnRiderVUVenture8888ValueHigh :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andRound:(NSInteger)aaRound andMonth:(NSInteger)i{
    
    double currentValue =0.0;
    if ([aaYearOrMonth isEqualToString:@"M"]) {
        
        
        if (i == 1) {
            RiderMonthVUVenture8888PrevValueHigh = RiderVUVenture8888PrevValueHigh ;
        }
        
        double tempPrev = RiderMonthVUVenture8888PrevValueHigh;
        
        if ((i == MonthDiff2035 + 1 && aaPolicyYear == YearDiff2035)) {
            RiderMonthVUVenture8888PrevValueHigh = RiderMonthVUVenture8888PrevValueHigh + (Ridertemp2035High * Fund2035ReinvestToVenture8888Fac/100.00);
        }
        else if(i == MonthDiff2030 + 1 && aaPolicyYear == YearDiff2030){
            RiderMonthVUVenture8888PrevValueHigh = RiderMonthVUVenture8888PrevValueHigh + (Ridertemp2030High * Fund2030ReinvestToVenture8888Fac/100.00);
        }
        else if(i == MonthDiff2028 + 1 && aaPolicyYear == YearDiff2028){
            RiderMonthVUVenture8888PrevValueHigh = RiderMonthVUVenture8888PrevValueHigh + (Ridertemp2028High * Fund2028ReinvestToVenture8888Fac/100.00);
        }
        else if(i == MonthDiff2025 + 1 && aaPolicyYear == YearDiff2025){
            RiderMonthVUVenture8888PrevValueHigh = RiderMonthVUVenture8888PrevValueHigh + (Ridertemp2025High * Fund2025ReinvestToVenture8888Fac/100.00);
        }
        else if(i == MonthDiff2023 + 1 && aaPolicyYear == YearDiff2023){
            RiderMonthVUVenture8888PrevValueHigh = RiderMonthVUVenture8888PrevValueHigh + (Ridertemp2023High * Fund2023ReinvestToVenture8888Fac/100.00);
        }
        else{
            
        }
        
        //NSLog(@"%f", MonthVUVenture8888PrevValueHigh);
        if (RiderVUCashValueNegative == TRUE && RiderMonthFundValueOfTheYearValueTotalHigh != 0 ) {
            currentValue= ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVenture8888Fac:aaPolicyYear andMonth:i] +
                           [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVenture8888Factor/100.00 * [self ReturnPremiumFactor:i]) *
            pow(1 + [self ReturnVUVenture8888InstHigh:aaPolicyYear andMOP:@"A"],1.00/12.00) + RiderMonthVUVenture8888PrevValueHigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
            pow(1 + [self ReturnVUVenture8888InstHigh:aaPolicyYear andMOP:@"A"], 1.00/12.00) + (RiderNegativeValueOfMaxCashFundHigh - 1) *
            (MAX(0,(RiderMonthFundValueOfTheYearVUVenture8888ValueHigh_Basic/RiderMonthFundValueOfTheYearValueTotalHigh)));
            
            //NSLog(@"%f %f %f",NegativeValueOfMaxCashFundHigh, MonthVUVenture8888ValueHigh,MonthFundValueOfTheYearValueTotalHigh );
            
        }
        else{
            currentValue = ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVenture8888Fac:aaPolicyYear  andMonth:i] +
                            [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVenture8888Factor/100.00 * [self ReturnPremiumFactor:i]) *
            pow((1 + [self ReturnVUVenture8888InstHigh:aaPolicyYear andMOP:@"A"]),(1.00/12.00)) + RiderMonthVUVenture8888PrevValueHigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
            pow((1 + [self ReturnVUVenture8888InstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00));
            
            
        }
        
        //NSLog(@"%f, %f, %f, %f",NegativeValueOfMaxCashFundHigh, MonthVUVenture8888ValueHigh, MonthFundValueOfTheYearValueTotalHigh, currentValue);
        
        if (aaRound == 2) {
            RiderMonthVUVenture8888PrevValueHigh = currentValue;
        }
        else{
            RiderMonthVUVenture8888PrevValueHigh = tempPrev;
        }
        
        
        if (i == 12  && aaRound == 2) {
            RiderVUVenture8888PrevValueHigh = RiderMonthVUVenture8888PrevValueHigh;
        }
        
        //NSLog(@"%d %f %f, %d ", i, MonthVUVenture8888ValueHigh, MonthFundValueOfTheYearValueTotalHigh, VUCashValueNegative);
        //return MonthVUVenture8888PrevValueHigh;
        return currentValue;
        
        
        
        
    }
    else{
        //if (VUCashValueHigh < 0 && [self ReturnFundValueOfTheYearValueTotalHigh:aaPolicyYear] != 0 ) {
        if (RiderVUCashValueNegative == TRUE && RiderFundValueOfTheYearValueTotalHigh != 0 ) {
            currentValue= ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] ) + IncreasePrem) * [self ReturnVUVenture8888Fac:aaPolicyYear] +
                           [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVenture8888Factor/100.00 * [self ReturnPremiumFactor:i]) *
            (1 + [self ReturnVUVenture8888InstHigh:aaPolicyYear andMOP:@""]) + RiderVUVenture8888PrevValueHigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVenture8888InstHigh:aaPolicyYear andMOP:@"A"]) + (RiderNegativeValueOfMaxCashFundHigh - 1) *
            (MAX(0,(RiderFundValueOfTheYearVUVenture8888ValueHigh_Basic/RiderFundValueOfTheYearValueTotalHigh)));
            
        }
        else{
            if (aaRound == 1) {
                currentValue = ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] ) + IncreasePrem) * [self ReturnVUVenture8888Fac:aaPolicyYear] +
                                [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVenture8888Factor/100.00 * [self ReturnPremiumFactor:i]) *
                (1 + [self ReturnVUVenture8888InstHigh:aaPolicyYear andMOP:@""]) + RiderVUVenture8888PrevValueHigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVenture8888InstHigh:aaPolicyYear andMOP:@"A"]);
                RiderVUVenture8888ValueHigh = currentValue;
            }
            else{
                currentValue = RiderVUVenture8888ValueHigh;
            }
            
        }
        
        if (aaRound == 2) {
            RiderVUVenture8888PrevValueHigh = currentValue;
        }
        
        return currentValue;
    }
    
    
}

-(double)ReturnRiderVUVenture8888ValueMedian :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andRound:(NSInteger)aaRound andMonth:(int)i{
    
    double currentValue;
    
    if ([aaYearOrMonth isEqualToString:@"M"]) {
        
        
        if (i == 1) {
            RiderMonthVUVenture8888PrevValueMedian = RiderVUVenture8888PrevValueMedian ;
        }
        
        double tempPrev = RiderMonthVUVenture8888PrevValueMedian;
        if ((i == MonthDiff2035 + 1 && aaPolicyYear == YearDiff2035)  ) {
            RiderMonthVUVenture8888PrevValueMedian = RiderMonthVUVenture8888PrevValueMedian + (Ridertemp2035Median * Fund2035ReinvestToVenture8888Fac/100.00);
        }
        else if(i == MonthDiff2030 + 1 && aaPolicyYear == YearDiff2030){
            RiderMonthVUVenture8888PrevValueMedian = RiderMonthVUVenture8888PrevValueMedian + (Ridertemp2030Median * Fund2030ReinvestToVenture8888Fac/100.00);
        }
        else if(i == MonthDiff2028 + 1 && aaPolicyYear == YearDiff2028){
            RiderMonthVUVenture8888PrevValueMedian = RiderMonthVUVenture8888PrevValueMedian + (Ridertemp2028Median * Fund2028ReinvestToVenture8888Fac/100.00);
        }
        else if(i == MonthDiff2025 + 1 && aaPolicyYear == YearDiff2025){
            RiderMonthVUVenture8888PrevValueMedian = RiderMonthVUVenture8888PrevValueMedian + (Ridertemp2025Median * Fund2025ReinvestToVenture8888Fac/100.00);
        }
        else if(i == MonthDiff2023 + 1 && aaPolicyYear == YearDiff2023){
            RiderMonthVUVenture8888PrevValueMedian = RiderMonthVUVenture8888PrevValueMedian + (Ridertemp2023Median * Fund2023ReinvestToVenture8888Fac/100.00);
        }
        else{
            
        }
        
        if (RiderVUCashValueNegative == TRUE && RiderMonthFundValueOfTheYearValueTotalMedian != 0 ) {
            currentValue= ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVenture8888Fac:aaPolicyYear  andMonth:i] +
                           [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVenture8888Factor/100.00 * [self ReturnPremiumFactor:i]) *
            pow(1 + [self ReturnVUVenture8888InstMedian:@"A"], 1.00/12.00) + RiderMonthVUVenture8888PrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
            pow(1 + [self ReturnVUVenture8888InstMedian:@"A"], 1.00/12.00) + (RiderNegativeValueOfMaxCashFundMedian - 1) *
            (MAX(0,(RiderMonthFundValueOfTheYearVUVenture8888ValueMedian_Basic/RiderMonthFundValueOfTheYearValueTotalMedian)));
            
        }
        else{
            currentValue = ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVenture8888Fac:aaPolicyYear  andMonth:i] +
                            [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVenture8888Factor/100.00 * [self ReturnPremiumFactor:i]) *
            pow(1 + [self ReturnVUVenture8888InstMedian:@"A"], 1.00/12.00) + RiderMonthVUVenture8888PrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
            pow(1 + [self ReturnVUVenture8888InstMedian:@"A"], 1.00/12.00);
            
        }
        
        if (aaRound == 2) {
            RiderMonthVUVenture8888PrevValueMedian = currentValue;
        }
        else{
            RiderMonthVUVenture8888PrevValueMedian = tempPrev;
        }
        
        if (i == 12  && aaRound == 2) {
            RiderVUVenture8888PrevValueMedian = RiderMonthVUVenture8888PrevValueMedian ;
        }
        
        
        //return MonthVUVenture8888PrevValueMedian;
        return currentValue;
        
    }
    else{
        //if (VUCashValueMedian < 0 && [self ReturnFundValueOfTheYearValueTotalMedian:aaPolicyYear] != 0 ) {
        if (RiderVUCashValueNegative == TRUE && RiderFundValueOfTheYearValueTotalMedian != 0 ) {
            currentValue= ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ]) + IncreasePrem) * [self ReturnVUVenture8888Fac:aaPolicyYear] +
                           [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVenture8888Factor/100.00 * [self ReturnPremiumFactor:i]) *
            (1 + [self ReturnVUVenture8888InstMedian:@""]) + RiderVUVenture8888PrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVenture8888InstMedian:@"A"]) + (RiderNegativeValueOfMaxCashFundMedian - 1) *
            (MAX(0,(RiderFundValueOfTheYearVUVenture8888ValueMedian_Basic/RiderFundValueOfTheYearValueTotalMedian)));
            
        }
        else{
            if (aaRound == 1) {
                currentValue = ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ]) + IncreasePrem) * [self ReturnVUVenture8888Fac:aaPolicyYear] +
                                [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVenture8888Factor/100.00 * [self ReturnPremiumFactor:i]) *
                (1 + [self ReturnVUVenture8888InstMedian:@""]) + RiderVUVenture8888PrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVenture8888InstMedian:@"A"]);
                RiderVUVenture8888ValueMedian = currentValue;
            }
            else{
                currentValue = RiderVUVenture8888ValueMedian;
            }
        }
        
        if (aaRound == 2) {
            RiderVUVenture8888PrevValueMedian = currentValue;
        }
        return currentValue;
    }
    
}

-(double)ReturnRiderVUVenture8888ValueLow :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andRound:(NSInteger)aaRound andMonth:(int)i{
    
    double currentValue;
    
    
    if ([aaYearOrMonth isEqualToString:@"M"]) {
        
        
        if (i == 1) {
            RiderMonthVUVenture8888PrevValueLow = RiderVUVenture8888PrevValueLow ;
        }
        
        double tempPrev = RiderMonthVUVenture8888PrevValueLow;
        if ((i == MonthDiff2035 + 1 && aaPolicyYear == YearDiff2035)  ) {
            RiderMonthVUVenture8888PrevValueLow = RiderMonthVUVenture8888PrevValueLow + (Ridertemp2035Low * Fund2035ReinvestToVenture8888Fac/100.00);
        }
        else if(i == MonthDiff2030 + 1 && aaPolicyYear == YearDiff2030){
            RiderMonthVUVenture8888PrevValueLow = RiderMonthVUVenture8888PrevValueLow + (Ridertemp2030Low * Fund2030ReinvestToVenture8888Fac/100.00);
        }
        else if(i == MonthDiff2028 + 1 && aaPolicyYear == YearDiff2028){
            RiderMonthVUVenture8888PrevValueLow = RiderMonthVUVenture8888PrevValueLow + (Ridertemp2028Low * Fund2028ReinvestToVenture8888Fac/100.00);
        }
        else if(i == MonthDiff2025 + 1 && aaPolicyYear == YearDiff2025){
            RiderMonthVUVenture8888PrevValueLow = RiderMonthVUVenture8888PrevValueLow + (Ridertemp2025Low * Fund2025ReinvestToVenture8888Fac/100.00);
        }
        else if(i == MonthDiff2023 + 1 && aaPolicyYear == YearDiff2023){
            RiderMonthVUVenture8888PrevValueLow = RiderMonthVUVenture8888PrevValueLow + (Ridertemp2023Low * Fund2023ReinvestToVenture8888Fac/100.00);
        }
        else{
            
        }
        
        if (RiderVUCashValueNegative == TRUE && RiderMonthFundValueOfTheYearValueTotalLow != 0 ) {
            currentValue= ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVenture8888Fac:aaPolicyYear  andMonth:i] +
                           [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVenture8888Factor/100.00 * [self ReturnPremiumFactor:i]) *
            pow(1 + [self ReturnVUVenture8888InstLow:@"A"], 1.00/12.00) + RiderMonthVUVenture8888PrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
            pow(1 + [self ReturnVUVenture8888InstLow:@"A"], 1.00/12.00) + (RiderNegativeValueOfMaxCashFundLow - 1) *
            (MAX(0,(RiderMonthFundValueOfTheYearVUVenture8888ValueLow_Basic/RiderMonthFundValueOfTheYearValueTotalLow)));
            
        }
        else{
            currentValue = ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVenture8888Fac:aaPolicyYear  andMonth:i] +
                            [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVenture8888Factor/100.00 * [self ReturnPremiumFactor:i]) *
            pow(1 + [self ReturnVUVenture8888InstLow:@"A"], 1.00/12.00) + RiderMonthVUVenture8888PrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
            pow(1 + [self ReturnVUVenture8888InstLow:@"A"], 1.00/12.00);
            
        }
        
        
        if (aaRound == 2) {
            RiderMonthVUVenture8888PrevValueLow = currentValue;
        }
        else{
            RiderMonthVUVenture8888PrevValueLow = tempPrev;
        }
        
        if (i == 12  && aaRound == 2) {
            RiderVUVenture8888PrevValueLow = RiderMonthVUVenture8888PrevValueLow ;
        }
        
        //return MonthVUVenture8888PrevValueLow;
        return currentValue;
        
    }
    else{
        if (RiderVUCashValueNegative == TRUE && RiderFundValueOfTheYearValueTotalLow != 0 ) {
            currentValue= ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ]) + IncreasePrem) * [self ReturnVUVenture8888Fac:aaPolicyYear]  +
                           [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVenture8888Factor/100.00 * [self ReturnPremiumFactor:i]) *
            (1 + [self ReturnVUVenture8888InstLow:@""]) + RiderVUVenture8888PrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVenture8888InstLow:@"A"]) + (RiderNegativeValueOfMaxCashFundLow - 1) *
            (MAX(0,(RiderFundValueOfTheYearVUVenture8888ValueLow_Basic/RiderFundValueOfTheYearValueTotalLow)));
            
        }
        else{
            if (aaRound == 1) {
                currentValue = ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ]) + IncreasePrem) * [self ReturnVUVenture8888Fac:aaPolicyYear] +
                                [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVenture8888Factor/100.00 * [self ReturnPremiumFactor:i]) *
                (1 + [self ReturnVUVenture8888InstLow:@""]) + RiderVUVenture8888PrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVenture8888InstLow:@"A"]);
                RiderVUVenture8888ValueLow = currentValue;
            }
            else{
                currentValue = RiderVUVenture8888ValueLow;
            }
            
        }
        
        if (aaRound == 2) {
            RiderVUVenture8888PrevValueLow = currentValue;
        }
        return currentValue;
    }
    
}

-(double)ReturnRiderVUVenture9999ValueHigh :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andRound:(NSInteger)aaRound andMonth:(NSInteger)i{
    
    double currentValue =0.0;
    if ([aaYearOrMonth isEqualToString:@"M"]) {
        
        
        if (i == 1) {
            RiderMonthVUVenture9999PrevValueHigh = RiderVUVenture9999PrevValueHigh ;
        }
        
        double tempPrev = RiderMonthVUVenture9999PrevValueHigh;
        
        if ((i == MonthDiff2035 + 1 && aaPolicyYear == YearDiff2035)) {
            RiderMonthVUVenture9999PrevValueHigh = RiderMonthVUVenture9999PrevValueHigh + (Ridertemp2035High * Fund2035ReinvestToVenture9999Fac/100.00);
        }
        else if(i == MonthDiff2030 + 1 && aaPolicyYear == YearDiff2030){
            RiderMonthVUVenture9999PrevValueHigh = RiderMonthVUVenture9999PrevValueHigh + (Ridertemp2030High * Fund2030ReinvestToVenture9999Fac/100.00);
        }
        else if(i == MonthDiff2028 + 1 && aaPolicyYear == YearDiff2028){
            RiderMonthVUVenture9999PrevValueHigh = RiderMonthVUVenture9999PrevValueHigh + (Ridertemp2028High * Fund2028ReinvestToVenture9999Fac/100.00);
        }
        else if(i == MonthDiff2025 + 1 && aaPolicyYear == YearDiff2025){
            RiderMonthVUVenture9999PrevValueHigh = RiderMonthVUVenture9999PrevValueHigh + (Ridertemp2025High * Fund2025ReinvestToVenture9999Fac/100.00);
        }
        else if(i == MonthDiff2023 + 1 && aaPolicyYear == YearDiff2023){
            RiderMonthVUVenture9999PrevValueHigh = RiderMonthVUVenture9999PrevValueHigh + (Ridertemp2023High * Fund2023ReinvestToVenture9999Fac/100.00);
        }
        else{
            
        }
        
        //NSLog(@"%f", MonthVUVenture9999PrevValueHigh);
        if (RiderVUCashValueNegative == TRUE && RiderMonthFundValueOfTheYearValueTotalHigh != 0 ) {
            currentValue= ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVenture9999Fac:aaPolicyYear andMonth:i] +
                           [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVenture9999Factor/100.00 * [self ReturnPremiumFactor:i]) *
            pow(1 + [self ReturnVUVenture9999InstHigh:aaPolicyYear andMOP:@"A"],1.00/12.00) + RiderMonthVUVenture9999PrevValueHigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
            pow(1 + [self ReturnVUVenture9999InstHigh:aaPolicyYear andMOP:@"A"], 1.00/12.00) + (RiderNegativeValueOfMaxCashFundHigh - 1) *
            (MAX(0,(RiderMonthFundValueOfTheYearVUVenture9999ValueHigh_Basic/RiderMonthFundValueOfTheYearValueTotalHigh)));
            
            //NSLog(@"%f %f %f",NegativeValueOfMaxCashFundHigh, MonthVUVenture9999ValueHigh,MonthFundValueOfTheYearValueTotalHigh );
            
        }
        else{
            currentValue = ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVenture9999Fac:aaPolicyYear  andMonth:i] +
                            [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVenture9999Factor/100.00 * [self ReturnPremiumFactor:i]) *
            pow((1 + [self ReturnVUVenture9999InstHigh:aaPolicyYear andMOP:@"A"]),(1.00/12.00)) + RiderMonthVUVenture9999PrevValueHigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
            pow((1 + [self ReturnVUVenture9999InstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00));
            
            
        }
        
        //NSLog(@"%f, %f, %f, %f",NegativeValueOfMaxCashFundHigh, MonthVUVenture9999ValueHigh, MonthFundValueOfTheYearValueTotalHigh, currentValue);
        
        if (aaRound == 2) {
            RiderMonthVUVenture9999PrevValueHigh = currentValue;
        }
        else{
            RiderMonthVUVenture9999PrevValueHigh = tempPrev;
        }
        
        
        if (i == 12  && aaRound == 2) {
            RiderVUVenture9999PrevValueHigh = RiderMonthVUVenture9999PrevValueHigh;
        }
        
        //NSLog(@"%d %f %f, %d ", i, MonthVUVenture9999ValueHigh, MonthFundValueOfTheYearValueTotalHigh, VUCashValueNegative);
        //return MonthVUVenture9999PrevValueHigh;
        return currentValue;
        
        
        
        
    }
    else{
        //if (VUCashValueHigh < 0 && [self ReturnFundValueOfTheYearValueTotalHigh:aaPolicyYear] != 0 ) {
        if (RiderVUCashValueNegative == TRUE && RiderFundValueOfTheYearValueTotalHigh != 0 ) {
            currentValue= ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] ) + IncreasePrem) * [self ReturnVUVenture9999Fac:aaPolicyYear] +
                           [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVenture9999Factor/100.00 * [self ReturnPremiumFactor:i]) *
            (1 + [self ReturnVUVenture9999InstHigh:aaPolicyYear andMOP:@""]) + RiderVUVenture9999PrevValueHigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVenture9999InstHigh:aaPolicyYear andMOP:@"A"]) + (RiderNegativeValueOfMaxCashFundHigh - 1) *
            (MAX(0,(RiderFundValueOfTheYearVUVenture9999ValueHigh_Basic/RiderFundValueOfTheYearValueTotalHigh)));
            
        }
        else{
            if (aaRound == 1) {
                currentValue = ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] ) + IncreasePrem) * [self ReturnVUVenture9999Fac:aaPolicyYear] +
                                [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVenture9999Factor/100.00 * [self ReturnPremiumFactor:i]) *
                (1 + [self ReturnVUVenture9999InstHigh:aaPolicyYear andMOP:@""]) + RiderVUVenture9999PrevValueHigh * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVenture9999InstHigh:aaPolicyYear andMOP:@"A"]);
                RiderVUVenture9999ValueHigh = currentValue;
            }
            else{
                currentValue = RiderVUVenture9999ValueHigh;
            }
            
        }
        
        if (aaRound == 2) {
            RiderVUVenture9999PrevValueHigh = currentValue;
        }
        
        return currentValue;
    }
    
    
}

-(double)ReturnRiderVUVenture9999ValueMedian :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andRound:(NSInteger)aaRound andMonth:(int)i{
    
    double currentValue;
    
    if ([aaYearOrMonth isEqualToString:@"M"]) {
        
        
        if (i == 1) {
            RiderMonthVUVenture9999PrevValueMedian = RiderVUVenture9999PrevValueMedian ;
        }
        
        double tempPrev = RiderMonthVUVenture9999PrevValueMedian;
        if ((i == MonthDiff2035 + 1 && aaPolicyYear == YearDiff2035)  ) {
            RiderMonthVUVenture9999PrevValueMedian = RiderMonthVUVenture9999PrevValueMedian + (Ridertemp2035Median * Fund2035ReinvestToVenture9999Fac/100.00);
        }
        else if(i == MonthDiff2030 + 1 && aaPolicyYear == YearDiff2030){
            RiderMonthVUVenture9999PrevValueMedian = RiderMonthVUVenture9999PrevValueMedian + (Ridertemp2030Median * Fund2030ReinvestToVenture9999Fac/100.00);
        }
        else if(i == MonthDiff2028 + 1 && aaPolicyYear == YearDiff2028){
            RiderMonthVUVenture9999PrevValueMedian = RiderMonthVUVenture9999PrevValueMedian + (Ridertemp2028Median * Fund2028ReinvestToVenture9999Fac/100.00);
        }
        else if(i == MonthDiff2025 + 1 && aaPolicyYear == YearDiff2025){
            RiderMonthVUVenture9999PrevValueMedian = RiderMonthVUVenture9999PrevValueMedian + (Ridertemp2025Median * Fund2025ReinvestToVenture9999Fac/100.00);
        }
        else if(i == MonthDiff2023 + 1 && aaPolicyYear == YearDiff2023){
            RiderMonthVUVenture9999PrevValueMedian = RiderMonthVUVenture9999PrevValueMedian + (Ridertemp2023Median * Fund2023ReinvestToVenture9999Fac/100.00);
        }
        else{
            
        }
        
        if (RiderVUCashValueNegative == TRUE && RiderMonthFundValueOfTheYearValueTotalMedian != 0 ) {
            currentValue= ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVenture9999Fac:aaPolicyYear  andMonth:i] +
                           [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVenture9999Factor/100.00 * [self ReturnPremiumFactor:i]) *
            pow(1 + [self ReturnVUVenture9999InstMedian:@"A"], 1.00/12.00) + RiderMonthVUVenture9999PrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
            pow(1 + [self ReturnVUVenture9999InstMedian:@"A"], 1.00/12.00) + (RiderNegativeValueOfMaxCashFundMedian - 1) *
            (MAX(0,(RiderMonthFundValueOfTheYearVUVenture9999ValueMedian_Basic/RiderMonthFundValueOfTheYearValueTotalMedian)));
            
        }
        else{
            currentValue = ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVenture9999Fac:aaPolicyYear  andMonth:i] +
                            [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVenture9999Factor/100.00 * [self ReturnPremiumFactor:i]) *
            pow(1 + [self ReturnVUVenture9999InstMedian:@"A"], 1.00/12.00) + RiderMonthVUVenture9999PrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
            pow(1 + [self ReturnVUVenture9999InstMedian:@"A"], 1.00/12.00);
            
        }
        
        if (aaRound == 2) {
            RiderMonthVUVenture9999PrevValueMedian = currentValue;
        }
        else{
            RiderMonthVUVenture9999PrevValueMedian = tempPrev;
        }
        
        if (i == 12  && aaRound == 2) {
            RiderVUVenture9999PrevValueMedian = RiderMonthVUVenture9999PrevValueMedian ;
        }
        
        
        //return MonthVUVenture9999PrevValueMedian;
        return currentValue;
        
    }
    else{
        //if (VUCashValueMedian < 0 && [self ReturnFundValueOfTheYearValueTotalMedian:aaPolicyYear] != 0 ) {
        if (RiderVUCashValueNegative == TRUE && RiderFundValueOfTheYearValueTotalMedian != 0 ) {
            currentValue= ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ]) + IncreasePrem) * [self ReturnVUVenture9999Fac:aaPolicyYear] +
                           [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVenture9999Factor/100.00 * [self ReturnPremiumFactor:i]) *
            (1 + [self ReturnVUVenture9999InstMedian:@""]) + RiderVUVenture9999PrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVenture9999InstMedian:@"A"]) + (RiderNegativeValueOfMaxCashFundMedian - 1) *
            (MAX(0,(RiderFundValueOfTheYearVUVenture9999ValueMedian_Basic/RiderFundValueOfTheYearValueTotalMedian)));
            
        }
        else{
            if (aaRound == 1) {
                currentValue = ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ]) + IncreasePrem) * [self ReturnVUVenture9999Fac:aaPolicyYear] +
                                [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVenture9999Factor/100.00 * [self ReturnPremiumFactor:i]) *
                (1 + [self ReturnVUVenture9999InstMedian:@""]) + RiderVUVenture9999PrevValueMedian * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVenture9999InstMedian:@"A"]);
                RiderVUVenture9999ValueMedian = currentValue;
            }
            else{
                currentValue = RiderVUVenture9999ValueMedian;
            }
        }
        
        if (aaRound == 2) {
            RiderVUVenture9999PrevValueMedian = currentValue;
        }
        return currentValue;
    }
    
}

-(double)ReturnRiderVUVenture9999ValueLow :(int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andRound:(NSInteger)aaRound andMonth:(int)i{
    
    double currentValue;
    
    
    if ([aaYearOrMonth isEqualToString:@"M"]) {
        
        
        if (i == 1) {
            RiderMonthVUVenture9999PrevValueLow = RiderVUVenture9999PrevValueLow ;
        }
        
        double tempPrev = RiderMonthVUVenture9999PrevValueLow;
        if ((i == MonthDiff2035 + 1 && aaPolicyYear == YearDiff2035)  ) {
            RiderMonthVUVenture9999PrevValueLow = RiderMonthVUVenture9999PrevValueLow + (Ridertemp2035Low * Fund2035ReinvestToVenture9999Fac/100.00);
        }
        else if(i == MonthDiff2030 + 1 && aaPolicyYear == YearDiff2030){
            RiderMonthVUVenture9999PrevValueLow = RiderMonthVUVenture9999PrevValueLow + (Ridertemp2030Low * Fund2030ReinvestToVenture9999Fac/100.00);
        }
        else if(i == MonthDiff2028 + 1 && aaPolicyYear == YearDiff2028){
            RiderMonthVUVenture9999PrevValueLow = RiderMonthVUVenture9999PrevValueLow + (Ridertemp2028Low * Fund2028ReinvestToVenture9999Fac/100.00);
        }
        else if(i == MonthDiff2025 + 1 && aaPolicyYear == YearDiff2025){
            RiderMonthVUVenture9999PrevValueLow = RiderMonthVUVenture9999PrevValueLow + (Ridertemp2025Low * Fund2025ReinvestToVenture9999Fac/100.00);
        }
        else if(i == MonthDiff2023 + 1 && aaPolicyYear == YearDiff2023){
            RiderMonthVUVenture9999PrevValueLow = RiderMonthVUVenture9999PrevValueLow + (Ridertemp2023Low * Fund2023ReinvestToVenture9999Fac/100.00);
        }
        else{
            
        }
        
        if (RiderVUCashValueNegative == TRUE && RiderMonthFundValueOfTheYearValueTotalLow != 0 ) {
            currentValue= ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVenture9999Fac:aaPolicyYear  andMonth:i] +
                           [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVenture9999Factor/100.00 * [self ReturnPremiumFactor:i]) *
            pow(1 + [self ReturnVUVenture9999InstLow:@"A"], 1.00/12.00) + RiderMonthVUVenture9999PrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
            pow(1 + [self ReturnVUVenture9999InstLow:@"A"], 1.00/12.00) + (RiderNegativeValueOfMaxCashFundLow - 1) *
            (MAX(0,(RiderMonthFundValueOfTheYearVUVenture9999ValueLow_Basic/RiderMonthFundValueOfTheYearValueTotalLow)));
            
        }
        else{
            currentValue = ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ] * [self ReturnPremiumFactor:i]) + IncreasePrem) * [self ReturnVUVenture9999Fac:aaPolicyYear  andMonth:i] +
                            [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVenture9999Factor/100.00 * [self ReturnPremiumFactor:i]) *
            pow(1 + [self ReturnVUVenture9999InstLow:@"A"], 1.00/12.00) + RiderMonthVUVenture9999PrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]* [self ReturnLoyaltyBonusFactor:i]/100.00)) *
            pow(1 + [self ReturnVUVenture9999InstLow:@"A"], 1.00/12.00);
            
        }
        
        
        if (aaRound == 2) {
            RiderMonthVUVenture9999PrevValueLow = currentValue;
        }
        else{
            RiderMonthVUVenture9999PrevValueLow = tempPrev;
        }
        
        if (i == 12  && aaRound == 2) {
            RiderVUVenture9999PrevValueLow = RiderMonthVUVenture9999PrevValueLow ;
        }
        
        //return MonthVUVenture9999PrevValueLow;
        return currentValue;
        
    }
    else{
        if (RiderVUCashValueNegative == TRUE && RiderFundValueOfTheYearValueTotalLow != 0 ) {
            currentValue= ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ]) + IncreasePrem) * [self ReturnVUVenture9999Fac:aaPolicyYear]  +
                           [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVenture9999Factor/100.00 * [self ReturnPremiumFactor:i]) *
            (1 + [self ReturnVUVenture9999InstLow:@""]) + RiderVUVenture9999PrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVenture9999InstLow:@"A"]) + (RiderNegativeValueOfMaxCashFundLow - 1) *
            (MAX(0,(RiderFundValueOfTheYearVUVenture9999ValueLow_Basic/RiderFundValueOfTheYearValueTotalLow)));
            
        }
        else{
            if (aaRound == 1) {
                currentValue = ((([[UniTotalRiderPremWithAlloc objectAtIndex:aaPolicyYear - 1] doubleValue ]) + IncreasePrem) * [self ReturnVUVenture9999Fac:aaPolicyYear] +
                                [self ReturnRiderRegTopUpPrem:aaPolicyYear] * RegularAllo * VUVenture9999Factor/100.00 * [self ReturnPremiumFactor:i]) *
                (1 + [self ReturnVUVenture9999InstLow:@""]) + RiderVUVenture9999PrevValueLow * (1 + ([self ReturnLoyaltyBonus:aaPolicyYear]/100.00)) * (1 + [self ReturnVUVenture9999InstLow:@"A"]);
                RiderVUVenture9999ValueLow = currentValue;
            }
            else{
                currentValue = RiderVUVenture9999ValueLow;
            }
            
        }
        
        if (aaRound == 2) {
            RiderVUVenture9999PrevValueLow = currentValue;
        }
        return currentValue;
    }
    
}



#pragma mark - Calculate Total Yearly Income for each fund for Rider ECAR1,ECAR6,ECAR60

-(void)ReturnEverCash1 :(int)aaPolicyYear {
	double ECAR1SA = [ECAR1SumAssured doubleValue ];
	
	if(ECAR1Exist == FALSE){
		VU2023Value_EverCash1 = 0.00;
		VU2025Value_EverCash1 = 0.00;
		VU2028Value_EverCash1 = 0.00;
		VU2030Value_EverCash1 = 0.00;
		VU2035Value_EverCash1 = 0.00;
		VURetValue_EverCash1 = 0.00;
		VUDanaValue_EverCash1 = 0.00;
		VUCashValue_EverCash1 = 0.00;
        VUSmartValue_EverCash1 = 0.00;
		VUVentureValue_EverCash1 = 0.00;
        VUVentureGrowthValue_EverCash1 = 0.00;
        VUVentureBlueChipValue_EverCash1 = 0.00;
        VUVentureDanaValue_EverCash1 = 0.00;
        VUVentureManagedValue_EverCash1 = 0.00;
        VUVentureIncomeValue_EverCash1 = 0.00;
        VUVenture6666Value_EverCash1 = 0.00;
        VUVenture7777Value_EverCash1 = 0.00;
        VUVenture8888Value_EverCash1 = 0.00;
        VUVenture9999Value_EverCash1 = 0.00;
        
	}
	else{
		if (aaPolicyYear <= [ECAR1RiderTerm intValue] && [ECAR1ReinvestGYI isEqualToString:@"Yes"] ) {
			VUCash_FundAllo_Percen = [self ReturnVUCashFac:aaPolicyYear] * 100;
			VU2025_FundAllo_Percen = [self ReturnVU2025Fac:aaPolicyYear] * 100;
			VU2028_FundAllo_Percen = [self ReturnVU2028Fac:aaPolicyYear] * 100;
			VU2030_FundAllo_Percen = [self ReturnVU2030Fac:aaPolicyYear] * 100;
			VU2035_FundAllo_Percen = [self ReturnVU2035Fac:aaPolicyYear] * 100;
			VURet_FundAllo_Percen = [self ReturnVURetFac:aaPolicyYear] * 100;
			VUDana_FundAllo_Percen = [self ReturnVUDanaFac:aaPolicyYear] * 100;
            VUSmart_FundAllo_Percen = [self ReturnVUSmartFac:aaPolicyYear] * 100;
			VUVenture_FundAllo_Percen = [self ReturnVUVentureFac:aaPolicyYear] * 100;
            VUVentureGrowth_FundAllo_Percen = [self ReturnVUVentureGrowthFac:aaPolicyYear] * 100;
            VUVentureBlueChip_FundAllo_Percen = [self ReturnVUVentureBlueChipFac:aaPolicyYear] * 100;
            VUVentureDana_FundAllo_Percen = [self ReturnVUVentureDanaFac:aaPolicyYear] * 100;
            VUVentureManaged_FundAllo_Percen = [self ReturnVUVentureManagedFac:aaPolicyYear] * 100;
            VUVentureIncome_FundAllo_Percen = [self ReturnVUVentureIncomeFac:aaPolicyYear] * 100;
            VUVenture6666_FundAllo_Percen = [self ReturnVUVenture6666Fac:aaPolicyYear] * 100;
            VUVenture7777_FundAllo_Percen = [self ReturnVUVenture7777Fac:aaPolicyYear] * 100;
            VUVenture8888_FundAllo_Percen = [self ReturnVUVenture8888Fac:aaPolicyYear] * 100;
            VUVenture9999_FundAllo_Percen = [self ReturnVUVenture9999Fac:aaPolicyYear] * 100;
            /*
             if ([strBumpMode isEqualToString:@"S" ]) {
             ECAR1SA = ECAR1SA / 0.5;
             }
             else if ([strBumpMode isEqualToString:@"Q" ]){
             ECAR1SA = ECAR1SA / 0.25;
             }
             else if ([strBumpMode isEqualToString:@"M" ]){
             ECAR1SA = ECAR1SA / 0.0833333;
             }
             else{
             ECAR1SA = ECAR1SA / 1.00;
             }
             */
			if (aaPolicyYear >= FundTerm2023 && aaPolicyYear <= FundTermPrev2025) {
				if (VUCash_FundAllo_Percen == 100) {
					VU2023Value_EverCash1 = 0.00;
					VU2025Value_EverCash1 = 0.00;
					VU2028Value_EverCash1 = 0.00;
					VU2030Value_EverCash1 = 0.00;
					VU2035Value_EverCash1 = 0.00;
					VURetValue_EverCash1 = 0.00;
					VUDanaValue_EverCash1 = 0.00;
                    VUSmartValue_EverCash1 = 0.00;
					VUVentureValue_EverCash1 = 0.00;
                    VUVentureGrowthValue_EverCash1 = 0.00;
                    VUVentureBlueChipValue_EverCash1 = 0.00;
                    VUVentureDanaValue_EverCash1 = 0.00;
                    VUVentureManagedValue_EverCash1 = 0.00;
                    VUVentureIncomeValue_EverCash1 = 0.00;
                    VUVenture6666Value_EverCash1 = 0.00;
                    VUVenture7777Value_EverCash1 = 0.00;
                    VUVenture8888Value_EverCash1 = 0.00;
                    VUVenture9999Value_EverCash1 = 0.00;
                    VUCashValue_EverCash1 = ECAR1SA;
				}
				else{
					VU2023Value_EverCash1 = 0.00;
					VU2025Value_EverCash1 = ECAR1SA * (VU2025_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VU2028Value_EverCash1 = ECAR1SA * (VU2028_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VU2030Value_EverCash1 = ECAR1SA * (VU2030_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VU2035Value_EverCash1 = ECAR1SA * (VU2035_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VURetValue_EverCash1 = ECAR1SA * (VURet_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VUDanaValue_EverCash1 = ECAR1SA * (VUDana_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUSmartValue_EverCash1 = ECAR1SA * (VUSmart_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VUVentureValue_EverCash1 = ECAR1SA * (VUVenture_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureGrowthValue_EverCash1 = ECAR1SA * (VUVentureGrowth_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureBlueChipValue_EverCash1 = ECAR1SA * (VUVentureBlueChip_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureDanaValue_EverCash1 = ECAR1SA * (VUVentureDana_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureManagedValue_EverCash1 = ECAR1SA * (VUVentureManaged_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureIncomeValue_EverCash1 = ECAR1SA * (VUVentureIncome_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture6666Value_EverCash1 = ECAR1SA * (VUVenture6666_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture7777Value_EverCash1 = ECAR1SA * (VUVenture7777_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture8888Value_EverCash1 = ECAR1SA * (VUVenture8888_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture9999Value_EverCash1 = ECAR1SA * (VUVenture9999_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VUCashValue_EverCash1 = 0.00;
				}
			}
			else if (aaPolicyYear >= FundTerm2025 && aaPolicyYear <= FundTermPrev2028) {
				if (VUCash_FundAllo_Percen == 100) {
					VU2023Value_EverCash1 = 0.00;
					VU2025Value_EverCash1 = 0.00;
					VU2028Value_EverCash1 = 0.00;
					VU2030Value_EverCash1 = 0.00;
					VU2035Value_EverCash1 = 0.00;
					VURetValue_EverCash1 = 0.00;
					VUDanaValue_EverCash1 = 0.00;
                    VUSmartValue_EverCash1 = 0.00;
					VUVentureValue_EverCash1 = 0.00;
                    VUVentureGrowthValue_EverCash1 = 0.00;
                    VUVentureBlueChipValue_EverCash1 = 0.00;
                    VUVentureDanaValue_EverCash1 = 0.00;
                    VUVentureManagedValue_EverCash1 = 0.00;
                    VUVentureIncomeValue_EverCash1 = 0.00;
                    VUVenture6666Value_EverCash1 = 0.00;
                    VUVenture7777Value_EverCash1 = 0.00;
                    VUVenture8888Value_EverCash1 = 0.00;
                    VUVenture9999Value_EverCash1 = 0.00;
                    VUCashValue_EverCash1 = ECAR1SA;
				}
				else{
					VU2023Value_EverCash1 = 0.00;
					VU2025Value_EverCash1 = 0.00;
					VU2028Value_EverCash1 = ECAR1SA * (VU2028_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VU2030Value_EverCash1 = ECAR1SA * (VU2030_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VU2035Value_EverCash1 = ECAR1SA * (VU2035_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VURetValue_EverCash1 = ECAR1SA * (VURet_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VUDanaValue_EverCash1 = ECAR1SA * (VUDana_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUSmartValue_EverCash1 = ECAR1SA * (VUSmart_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VUVentureValue_EverCash1 = ECAR1SA * (VUVenture_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureGrowthValue_EverCash1 = ECAR1SA * (VUVentureGrowth_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureBlueChipValue_EverCash1 = ECAR1SA * (VUVentureBlueChip_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureDanaValue_EverCash1 = ECAR1SA * (VUVentureDana_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureManagedValue_EverCash1 = ECAR1SA * (VUVentureManaged_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureIncomeValue_EverCash1 = ECAR1SA * (VUVentureIncome_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture6666Value_EverCash1 = ECAR1SA * (VUVenture6666_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture7777Value_EverCash1 = ECAR1SA * (VUVenture7777_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture8888Value_EverCash1 = ECAR1SA * (VUVenture8888_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture9999Value_EverCash1 = ECAR1SA * (VUVenture9999_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VUCashValue_EverCash1 = 0.00;
				}
			}
			else if (aaPolicyYear >= FundTerm2028 && aaPolicyYear <= FundTermPrev2030) {
				if (VUCash_FundAllo_Percen == 100) {
					VU2023Value_EverCash1 = 0.00;
					VU2025Value_EverCash1 = 0.00;
					VU2028Value_EverCash1 = 0.00;
					VU2030Value_EverCash1 = 0.00;
					VU2035Value_EverCash1 = 0.00;
					VURetValue_EverCash1 = 0.00;
					VUDanaValue_EverCash1 = 0.00;
                    VUSmartValue_EverCash1 = 0.00;
					VUVentureValue_EverCash1 = 0.00;
                    VUVentureGrowthValue_EverCash1 = 0.00;
                    VUVentureBlueChipValue_EverCash1 = 0.00;
                    VUVentureDanaValue_EverCash1 = 0.00;
                    VUVentureManagedValue_EverCash1 = 0.00;
                    VUVentureIncomeValue_EverCash1 = 0.00;
                    VUVenture6666Value_EverCash1 = 0.00;
                    VUVenture7777Value_EverCash1 = 0.00;
                    VUVenture8888Value_EverCash1 = 0.00;
                    VUVenture9999Value_EverCash1 = 0.00;
                    VUCashValue_EverCash1 = ECAR1SA;
				}
				else{
					VU2023Value_EverCash1 = 0.00;
					VU2025Value_EverCash1 = 0.00;
					VU2028Value_EverCash1 = 0.00;
					VU2030Value_EverCash1 = ECAR1SA * (VU2030_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VU2035Value_EverCash1 = ECAR1SA * (VU2035_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VURetValue_EverCash1 = ECAR1SA * (VURet_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VUDanaValue_EverCash1 = ECAR1SA * (VUDana_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUSmartValue_EverCash1 = ECAR1SA * (VUSmart_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VUVentureValue_EverCash1 = ECAR1SA * (VUVenture_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureGrowthValue_EverCash1 = ECAR1SA * (VUVentureGrowth_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureBlueChipValue_EverCash1 = ECAR1SA * (VUVentureBlueChip_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureDanaValue_EverCash1 = ECAR1SA * (VUVentureDana_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureManagedValue_EverCash1 = ECAR1SA * (VUVentureManaged_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureIncomeValue_EverCash1 = ECAR1SA * (VUVentureIncome_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture6666Value_EverCash1 = ECAR1SA * (VUVenture6666_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture7777Value_EverCash1 = ECAR1SA * (VUVenture7777_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture8888Value_EverCash1 = ECAR1SA * (VUVenture8888_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture9999Value_EverCash1 = ECAR1SA * (VUVenture9999_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VUCashValue_EverCash1 = 0.00;
				}
			}
			else if (aaPolicyYear >= FundTerm2030 && aaPolicyYear <= FundTermPrev2035) {
				if (VUCash_FundAllo_Percen == 100) {
					VU2023Value_EverCash1 = 0.00;
					VU2025Value_EverCash1 = 0.00;
					VU2028Value_EverCash1 = 0.00;
					VU2030Value_EverCash1 = 0.00;
					VU2035Value_EverCash1 = 0.00;
					VURetValue_EverCash1 = 0.00;
					VUDanaValue_EverCash1 = 0.00;
                    VUSmartValue_EverCash1 = 0.00;
					VUVentureValue_EverCash1 = 0.00;
                    VUVentureGrowthValue_EverCash1 = 0.00;
                    VUVentureBlueChipValue_EverCash1 = 0.00;
                    VUVentureDanaValue_EverCash1 = 0.00;
                    VUVentureManagedValue_EverCash1 = 0.00;
                    VUVentureIncomeValue_EverCash1 = 0.00;
                    VUVenture6666Value_EverCash1 = 0.00;
                    VUVenture7777Value_EverCash1 = 0.00;
                    VUVenture8888Value_EverCash1 = 0.00;
                    VUVenture9999Value_EverCash1 = 0.00;
                    VUCashValue_EverCash1 = ECAR1SA;
				}
				else{
					VU2023Value_EverCash1 = 0.00;
					VU2025Value_EverCash1 = 0.00;
					VU2028Value_EverCash1 = 0.00;
					VU2030Value_EverCash1 = 0.00;
					VU2035Value_EverCash1 = ECAR1SA * (VU2035_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VURetValue_EverCash1 = ECAR1SA * (VURet_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VUDanaValue_EverCash1 = ECAR1SA * (VUDana_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUSmartValue_EverCash1 = ECAR1SA * (VUSmart_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VUVentureValue_EverCash1 = ECAR1SA * (VUVenture_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureGrowthValue_EverCash1 = ECAR1SA * (VUVentureGrowth_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureBlueChipValue_EverCash1 = ECAR1SA * (VUVentureBlueChip_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureDanaValue_EverCash1 = ECAR1SA * (VUVentureDana_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureManagedValue_EverCash1 = ECAR1SA * (VUVentureManaged_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureIncomeValue_EverCash1 = ECAR1SA * (VUVentureIncome_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture6666Value_EverCash1 = ECAR1SA * (VUVenture6666_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture7777Value_EverCash1 = ECAR1SA * (VUVenture7777_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture8888Value_EverCash1 = ECAR1SA * (VUVenture8888_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture9999Value_EverCash1 = ECAR1SA * (VUVenture9999_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VUCashValue_EverCash1 = 0.00;
				}
			}
			else if (aaPolicyYear == FundTermPrev2035) {
				if (VUCash_FundAllo_Percen == 100) {
					VU2023Value_EverCash1 = 0.00;
					VU2025Value_EverCash1 = 0.00;
					VU2028Value_EverCash1 = 0.00;
					VU2030Value_EverCash1 = 0.00;
					VU2035Value_EverCash1 = 0.00;
					VURetValue_EverCash1 = 0.00;
					VUDanaValue_EverCash1 = 0.00;
                    VUSmartValue_EverCash1 = 0.00;
					VUVentureValue_EverCash1 = 0.00;
                    VUVentureGrowthValue_EverCash1 = 0.00;
                    VUVentureBlueChipValue_EverCash1 = 0.00;
                    VUVentureDanaValue_EverCash1 = 0.00;
                    VUVentureManagedValue_EverCash1 = 0.00;
                    VUVentureIncomeValue_EverCash1 = 0.00;
                    VUVenture6666Value_EverCash1 = 0.00;
                    VUVenture7777Value_EverCash1 = 0.00;
                    VUVenture8888Value_EverCash1 = 0.00;
                    VUVenture9999Value_EverCash1 = 0.00;
					VUCashValue_EverCash1 = ECAR1SA;
				}
				else{
					VU2023Value_EverCash1 = 0.00;
					VU2025Value_EverCash1 = 0.00;
					VU2028Value_EverCash1 = 0.00;
					VU2030Value_EverCash1 = 0.00;
					VU2035Value_EverCash1 = 0.00;
					VURetValue_EverCash1 = ECAR1SA * (VURet_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VUDanaValue_EverCash1 = ECAR1SA * (VUDana_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUSmartValue_EverCash1 = ECAR1SA * (VUSmart_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VUVentureValue_EverCash1 = ECAR1SA * (VUVenture_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureGrowthValue_EverCash1 = ECAR1SA * (VUVentureGrowth_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureBlueChipValue_EverCash1 = ECAR1SA * (VUVentureBlueChip_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureDanaValue_EverCash1 = ECAR1SA * (VUVentureDana_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureManagedValue_EverCash1 = ECAR1SA * (VUVentureManaged_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureIncomeValue_EverCash1 = ECAR1SA * (VUVentureIncome_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture6666Value_EverCash1 = ECAR1SA * (VUVenture6666_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture7777Value_EverCash1 = ECAR1SA * (VUVenture7777_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture8888Value_EverCash1 = ECAR1SA * (VUVenture8888_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture9999Value_EverCash1 = ECAR1SA * (VUVenture9999_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VUCashValue_EverCash1 = 0.00;
				}
			}
			else if (aaPolicyYear > FundTermPrev2035) {
				if (VUCash_FundAllo_Percen == 100) {
					VU2023Value_EverCash1 = 0.00;
					VU2025Value_EverCash1 = 0.00;
					VU2028Value_EverCash1 = 0.00;
					VU2030Value_EverCash1 = 0.00;
					VU2035Value_EverCash1 = 0.00;
					VURetValue_EverCash1 = 0.00;
					VUDanaValue_EverCash1 = 0.00;
                    VUSmartValue_EverCash1 = 0.00;
					VUVentureValue_EverCash1 = 0.00;
                    VUVentureGrowthValue_EverCash1 = 0.00;
                    VUVentureBlueChipValue_EverCash1 = 0.00;
                    VUVentureDanaValue_EverCash1 = 0.00;
                    VUVentureManagedValue_EverCash1 = 0.00;
                    VUVentureIncomeValue_EverCash1 = 0.00;
                    VUVenture6666Value_EverCash1 = 0.00;
                    VUVenture7777Value_EverCash1 = 0.00;
                    VUVenture8888Value_EverCash1 = 0.00;
                    VUVenture9999Value_EverCash1 = 0.00;
					VUCashValue_EverCash1 = ECAR1SA;
				}
				else{
					VU2023Value_EverCash1 = 0.00;
					VU2025Value_EverCash1 = 0.00;
					VU2028Value_EverCash1 = 0.00;
					VU2030Value_EverCash1 = 0.00;
					VU2035Value_EverCash1 = 0.00;
					VURetValue_EverCash1 = ECAR1SA * (VURet_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VUDanaValue_EverCash1 = ECAR1SA * (VUDana_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUSmartValue_EverCash1 = ECAR1SA * (VUSmart_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VUVentureValue_EverCash1 = ECAR1SA * (VUVenture_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureGrowthValue_EverCash1 = ECAR1SA * (VUVentureGrowth_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureBlueChipValue_EverCash1 = ECAR1SA * (VUVentureBlueChip_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureDanaValue_EverCash1 = ECAR1SA * (VUVentureDana_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureManagedValue_EverCash1 = ECAR1SA * (VUVentureManaged_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureIncomeValue_EverCash1 = ECAR1SA * (VUVentureIncome_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture6666Value_EverCash1 = ECAR1SA * (VUVenture6666_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture7777Value_EverCash1 = ECAR1SA * (VUVenture7777_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture8888Value_EverCash1 = ECAR1SA * (VUVenture8888_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture9999Value_EverCash1 = ECAR1SA * (VUVenture9999_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VUCashValue_EverCash1 = 0.00;
				}
			}
			else{
				if (VUCash_FundAllo_Percen == 100) {
					VU2023Value_EverCash1 = 0.00;
					VU2025Value_EverCash1 = 0.00;
					VU2028Value_EverCash1 = 0.00;
					VU2030Value_EverCash1 = 0.00;
					VU2035Value_EverCash1 = 0.00;
					VURetValue_EverCash1 = 0.00;
					VUDanaValue_EverCash1 = 0.00;
                    VUSmartValue_EverCash1 = 0.00;
					VUVentureValue_EverCash1 = 0.00;
                    VUVentureGrowthValue_EverCash1 = 0.00;
                    VUVentureBlueChipValue_EverCash1 = 0.00;
                    VUVentureDanaValue_EverCash1 = 0.00;
                    VUVentureManagedValue_EverCash1 = 0.00;
                    VUVentureIncomeValue_EverCash1 = 0.00;
                    VUVenture6666Value_EverCash1 = 0.00;
                    VUVenture7777Value_EverCash1 = 0.00;
                    VUVenture8888Value_EverCash1 = 0.00;
                    VUVenture9999Value_EverCash1 = 0.00;
					VUCashValue_EverCash1 = 0.00;
				}
				else{
					if (VU2023_FundAllo_Percen > 0) {
						VU2023Value_EverCash1 = ECAR1SA * (VU2023_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					}
					else{
						VU2023Value_EverCash1 = 0.00;
					}
					
					if (VU2025_FundAllo_Percen > 0) {
						VU2025Value_EverCash1 = ECAR1SA * (VU2025_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					}
					else{
						VU2025Value_EverCash1 = 0.00;
					}
					
					if (VU2028_FundAllo_Percen > 0) {
						VU2028Value_EverCash1 = ECAR1SA * (VU2028_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					}
					else{
						VU2028Value_EverCash1 = 0.00;
					}
					
					if (VU2030_FundAllo_Percen > 0) {
						VU2030Value_EverCash1 = ECAR1SA * (VU2030_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					}
					else{
						VU2030Value_EverCash1 = 0.00;
					}
					
					if (VU2035_FundAllo_Percen > 0) {
						VU2035Value_EverCash1 = ECAR1SA * (VU2035_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					}
					else{
						VU2035Value_EverCash1 = 0.00;
					}
					
					if (VURet_FundAllo_Percen > 0) {
						VURetValue_EverCash1 = ECAR1SA * (VURet_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					}
					else{
						VURetValue_EverCash1 = 0.00;
					}
					
					if (VUDana_FundAllo_Percen > 0) {
						VUDanaValue_EverCash1 = ECAR1SA * (VUDana_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					}
					else{
						VUDanaValue_EverCash1 = 0.00;
					}
                    
                    if (VUSmart_FundAllo_Percen > 0) {
						VUSmartValue_EverCash1 = ECAR1SA * (VUSmart_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					}
					else{
						VUSmartValue_EverCash1 = 0.00;
					}
					
					if (VUVenture_FundAllo_Percen > 0) {
						VUVentureValue_EverCash1 = ECAR1SA * (VUVenture_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					}
					else{
						VUVentureValue_EverCash1 = 0.00;
					}
                    
                    if (VUVentureGrowth_FundAllo_Percen > 0) {
                        VUVentureGrowthValue_EverCash1 = ECAR1SA * (VUVentureGrowth_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    }
                    else{
                        VUVentureGrowthValue_EverCash1 = 0.00;
                    }
                    
                    if (VUVentureBlueChip_FundAllo_Percen > 0) {
                        VUVentureBlueChipValue_EverCash1 = ECAR1SA * (VUVentureBlueChip_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    }
                    else{
                        VUVentureBlueChipValue_EverCash1 = 0.00;
                    }
                    
                    if (VUVentureDana_FundAllo_Percen > 0) {
                        VUVentureDanaValue_EverCash1 = ECAR1SA * (VUVentureDana_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    }
                    else{
                        VUVentureDanaValue_EverCash1 = 0.00;
                    }
                    
                    if (VUVentureManaged_FundAllo_Percen > 0) {
                        VUVentureManagedValue_EverCash1 = ECAR1SA * (VUVentureManaged_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    }
                    else{
                        VUVentureManagedValue_EverCash1 = 0.00;
                    }
                    
                    if (VUVentureIncome_FundAllo_Percen > 0) {
                        VUVentureIncomeValue_EverCash1 = ECAR1SA * (VUVentureIncome_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    }
                    else{
                        VUVentureIncomeValue_EverCash1 = 0.00;
                    }
                    
                    if (VUVenture6666_FundAllo_Percen > 0) {
                        VUVenture6666Value_EverCash1 = ECAR1SA * (VUVenture6666_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    }
                    else{
                        VUVenture6666Value_EverCash1 = 0.00;
                    }
                    
                    if (VUVenture7777_FundAllo_Percen > 0) {
                        VUVenture7777Value_EverCash1 = ECAR1SA * (VUVenture7777_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    }
                    else{
                        VUVenture7777Value_EverCash1 = 0.00;
                    }
                    
                    if (VUVenture8888_FundAllo_Percen > 0) {
                        VUVenture8888Value_EverCash1 = ECAR1SA * (VUVenture8888_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    }
                    else{
                        VUVenture8888Value_EverCash1 = 0.00;
                    }
                    
                    if (VUVenture9999_FundAllo_Percen > 0) {
                        VUVenture9999Value_EverCash1 = ECAR1SA * (VUVenture9999_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    }
                    else{
                        VUVenture9999Value_EverCash1 = 0.00;
                    }
				}
				
			}
			
		}
		else{
			VU2023Value_EverCash1 = 0.00;
			VU2025Value_EverCash1 = 0.00;
			VU2028Value_EverCash1 = 0.00;
			VU2030Value_EverCash1 = 0.00;
			VU2035Value_EverCash1 = 0.00;
			VURetValue_EverCash1 = 0.00;
			VUDanaValue_EverCash1 = 0.00;
            VUSmartValue_EverCash1 = 0.00;
            VUVentureValue_EverCash1 = 0.00;
            VUVentureGrowthValue_EverCash1 = 0.00;
            VUVentureBlueChipValue_EverCash1 = 0.00;
            VUVentureDanaValue_EverCash1 = 0.00;
            VUVentureManagedValue_EverCash1 = 0.00;
            VUVentureIncomeValue_EverCash1 = 0.00;
            VUVenture6666Value_EverCash1 = 0.00;
            VUVenture7777Value_EverCash1 = 0.00;
            VUVenture8888Value_EverCash1 = 0.00;
            VUVenture9999Value_EverCash1 = 0.00;
			VUCashValue_EverCash1 = 0.00;
		}
	}
	
	
}

-(void)ReturnMonthEverCash1 :(int)aaPolicyYear andMonth :(int)aaMonth {
	double ECAR1SA = [ECAR1SumAssured doubleValue ];
	
	if(ECAR1Exist == FALSE){
		VU2023Value_EverCash1 = 0.00;
		VU2025Value_EverCash1 = 0.00;
		VU2028Value_EverCash1 = 0.00;
		VU2030Value_EverCash1 = 0.00;
		VU2035Value_EverCash1 = 0.00;
		VURetValue_EverCash1 = 0.00;
		VUDanaValue_EverCash1 = 0.00;
        VUSmartValue_EverCash1 = 0.00;
		VUVentureValue_EverCash1 = 0.00;
        VUVentureGrowthValue_EverCash1 = 0.00;
        VUVentureBlueChipValue_EverCash1 = 0.00;
        VUVentureDanaValue_EverCash1 = 0.00;
        VUVentureManagedValue_EverCash1 = 0.00;
        VUVentureIncomeValue_EverCash1 = 0.00;
        VUVenture6666Value_EverCash1 = 0.00;
        VUVenture7777Value_EverCash1 = 0.00;
        VUVenture8888Value_EverCash1 = 0.00;
        VUVenture9999Value_EverCash1 = 0.00;
        VUCashValue_EverCash1 = 0.00;
	}
	else{
		if (aaPolicyYear <= [ECAR1RiderTerm intValue] && [ECAR1ReinvestGYI isEqualToString:@"Yes"] ) {
			VUCash_FundAllo_Percen = [self ReturnVUCashFac:aaPolicyYear andMonth:aaMonth ] * 100;
			VU2025_FundAllo_Percen = [self ReturnVU2025Fac:aaPolicyYear andMonth:aaMonth] * 100;
			VU2028_FundAllo_Percen = [self ReturnVU2028Fac:aaPolicyYear andMonth:aaMonth] * 100;
			VU2030_FundAllo_Percen = [self ReturnVU2030Fac:aaPolicyYear andMonth:aaMonth] * 100;
			VU2035_FundAllo_Percen = [self ReturnVU2035Fac:aaPolicyYear andMonth:aaMonth] * 100;
			VURet_FundAllo_Percen = [self ReturnVURetFac:aaPolicyYear andMonth:aaMonth] * 100;
			VUDana_FundAllo_Percen = [self ReturnVUDanaFac:aaPolicyYear andMonth:aaMonth] * 100;
            VUSmart_FundAllo_Percen = [self ReturnVUSmartFac:aaPolicyYear andMonth:aaMonth] * 100;
			VUVenture_FundAllo_Percen = [self ReturnVUVentureFac:aaPolicyYear andMonth:aaMonth] * 100;
            
            VUVentureGrowth_FundAllo_Percen = [self ReturnVUVentureGrowthFac:aaPolicyYear andMonth:aaMonth] * 100;
            VUVentureBlueChip_FundAllo_Percen = [self ReturnVUVentureBlueChipFac:aaPolicyYear andMonth:aaMonth] * 100;
            VUVentureDana_FundAllo_Percen = [self ReturnVUVentureDanaFac:aaPolicyYear andMonth:aaMonth] * 100;
            VUVentureManaged_FundAllo_Percen = [self ReturnVUVentureManagedFac:aaPolicyYear andMonth:aaMonth] * 100;
            VUVentureIncome_FundAllo_Percen = [self ReturnVUVentureIncomeFac:aaPolicyYear andMonth:aaMonth] * 100;
            VUVenture6666_FundAllo_Percen = [self ReturnVUVenture6666Fac:aaPolicyYear andMonth:aaMonth] * 100;
            VUVenture7777_FundAllo_Percen = [self ReturnVUVenture7777Fac:aaPolicyYear andMonth:aaMonth] * 100;
            VUVenture8888_FundAllo_Percen = [self ReturnVUVenture8888Fac:aaPolicyYear andMonth:aaMonth] * 100;
            VUVenture9999_FundAllo_Percen = [self ReturnVUVenture9999Fac:aaPolicyYear andMonth:aaMonth] * 100;
            
			/*
             if ([strBumpMode isEqualToString:@"S" ]) {
             ECAR1SA = ECAR1SA / 0.5;
             }
             else if ([strBumpMode isEqualToString:@"Q" ]){
             ECAR1SA = ECAR1SA / 0.25;
             }
             else if ([strBumpMode isEqualToString:@"M" ]){
             ECAR1SA = ECAR1SA / 0.0833333;
             }
             else{
             ECAR1SA = ECAR1SA / 1.00;
             }
             */
			if (aaPolicyYear >= FundTerm2023 && aaPolicyYear <= FundTermPrev2025) {
				if (VUCash_FundAllo_Percen == 100) {
					VU2023Value_EverCash1 = 0.00;
					VU2025Value_EverCash1 = 0.00;
					VU2028Value_EverCash1 = 0.00;
					VU2030Value_EverCash1 = 0.00;
					VU2035Value_EverCash1 = 0.00;
					VURetValue_EverCash1 = 0.00;
					VUDanaValue_EverCash1 = 0.00;
                    VUSmartValue_EverCash1 = 0.00;
                    VUVentureValue_EverCash1 = 0.00;
                    VUVentureGrowthValue_EverCash1 = 0.00;
                    VUVentureBlueChipValue_EverCash1 = 0.00;
                    VUVentureDanaValue_EverCash1 = 0.00;
                    VUVentureManagedValue_EverCash1 = 0.00;
                    VUVentureIncomeValue_EverCash1 = 0.00;
                    VUVenture6666Value_EverCash1 = 0.00;
                    VUVenture7777Value_EverCash1 = 0.00;
                    VUVenture8888Value_EverCash1 = 0.00;
                    VUVenture9999Value_EverCash1 = 0.00;
                    VUCashValue_EverCash1 = ECAR1SA;
				}
				else{
					VU2023Value_EverCash1 = 0.00;
					VU2025Value_EverCash1 = ECAR1SA * (VU2025_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VU2028Value_EverCash1 = ECAR1SA * (VU2028_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VU2030Value_EverCash1 = ECAR1SA * (VU2030_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VU2035Value_EverCash1 = ECAR1SA * (VU2035_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VURetValue_EverCash1 = ECAR1SA * (VURet_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VUDanaValue_EverCash1 = ECAR1SA * (VUDana_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUSmartValue_EverCash1 = ECAR1SA * (VUSmart_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VUVentureValue_EverCash1 = ECAR1SA * (VUVenture_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureGrowthValue_EverCash1 = ECAR1SA * (VUVentureGrowth_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureBlueChipValue_EverCash1 = ECAR1SA * (VUVentureBlueChip_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureDanaValue_EverCash1 = ECAR1SA * (VUVentureDana_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureManagedValue_EverCash1 = ECAR1SA * (VUVentureManaged_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureIncomeValue_EverCash1 = ECAR1SA * (VUVentureIncome_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture6666Value_EverCash1 = ECAR1SA * (VUVenture6666_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture7777Value_EverCash1 = ECAR1SA * (VUVenture7777_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture8888Value_EverCash1 = ECAR1SA * (VUVenture8888_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture9999Value_EverCash1 = ECAR1SA * (VUVenture9999_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VUCashValue_EverCash1 = 0.00;
				}
			}
			else if (aaPolicyYear >= FundTerm2025 && aaPolicyYear <= FundTermPrev2028) {
				if (VUCash_FundAllo_Percen == 100) {
					VU2023Value_EverCash1 = 0.00;
					VU2025Value_EverCash1 = 0.00;
					VU2028Value_EverCash1 = 0.00;
					VU2030Value_EverCash1 = 0.00;
					VU2035Value_EverCash1 = 0.00;
					VURetValue_EverCash1 = 0.00;
					VUDanaValue_EverCash1 = 0.00;
                    VUSmartValue_EverCash1 = 0.00;
                    VUVentureValue_EverCash1 = 0.00;
                    VUVentureGrowthValue_EverCash1 = 0.00;
                    VUVentureBlueChipValue_EverCash1 = 0.00;
                    VUVentureDanaValue_EverCash1 = 0.00;
                    VUVentureManagedValue_EverCash1 = 0.00;
                    VUVentureIncomeValue_EverCash1 = 0.00;
                    VUVenture6666Value_EverCash1 = 0.00;
                    VUVenture7777Value_EverCash1 = 0.00;
                    VUVenture8888Value_EverCash1 = 0.00;
                    VUVenture9999Value_EverCash1 = 0.00;
                    VUCashValue_EverCash1 = ECAR1SA;
				}
				else{
					VU2023Value_EverCash1 = 0.00;
					VU2025Value_EverCash1 = 0.00;
					VU2028Value_EverCash1 = ECAR1SA * (VU2028_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VU2030Value_EverCash1 = ECAR1SA * (VU2030_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VU2035Value_EverCash1 = ECAR1SA * (VU2035_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VURetValue_EverCash1 = ECAR1SA * (VURet_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VUDanaValue_EverCash1 = ECAR1SA * (VUDana_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUSmartValue_EverCash1 = ECAR1SA * (VUSmart_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VUVentureValue_EverCash1 = ECAR1SA * (VUVenture_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureGrowthValue_EverCash1 = ECAR1SA * (VUVentureGrowth_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureBlueChipValue_EverCash1 = ECAR1SA * (VUVentureBlueChip_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureDanaValue_EverCash1 = ECAR1SA * (VUVentureDana_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureManagedValue_EverCash1 = ECAR1SA * (VUVentureManaged_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureIncomeValue_EverCash1 = ECAR1SA * (VUVentureIncome_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture6666Value_EverCash1 = ECAR1SA * (VUVenture6666_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture7777Value_EverCash1 = ECAR1SA * (VUVenture7777_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture8888Value_EverCash1 = ECAR1SA * (VUVenture8888_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture9999Value_EverCash1 = ECAR1SA * (VUVenture9999_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VUCashValue_EverCash1 = 0.00;
				}
			}
			else if (aaPolicyYear >= FundTerm2028 && aaPolicyYear <= FundTermPrev2030) {
				if (VUCash_FundAllo_Percen == 100) {
					VU2023Value_EverCash1 = 0.00;
					VU2025Value_EverCash1 = 0.00;
					VU2028Value_EverCash1 = 0.00;
					VU2030Value_EverCash1 = 0.00;
					VU2035Value_EverCash1 = 0.00;
					VURetValue_EverCash1 = 0.00;
					VUDanaValue_EverCash1 = 0.00;
                    VUSmartValue_EverCash1 = 0.00;
                    VUVentureValue_EverCash1 = 0.00;
                    VUVentureGrowthValue_EverCash1 = 0.00;
                    VUVentureBlueChipValue_EverCash1 = 0.00;
                    VUVentureDanaValue_EverCash1 = 0.00;
                    VUVentureManagedValue_EverCash1 = 0.00;
                    VUVentureIncomeValue_EverCash1 = 0.00;
                    VUVenture6666Value_EverCash1 = 0.00;
                    VUVenture7777Value_EverCash1 = 0.00;
                    VUVenture8888Value_EverCash1 = 0.00;
                    VUVenture9999Value_EverCash1 = 0.00;
                    VUCashValue_EverCash1 = ECAR1SA;
				}
				else{
					VU2023Value_EverCash1 = 0.00;
					VU2025Value_EverCash1 = 0.00;
					VU2028Value_EverCash1 = 0.00;
					VU2030Value_EverCash1 = ECAR1SA * (VU2030_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VU2035Value_EverCash1 = ECAR1SA * (VU2035_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VURetValue_EverCash1 = ECAR1SA * (VURet_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VUDanaValue_EverCash1 = ECAR1SA * (VUDana_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUSmartValue_EverCash1 = ECAR1SA * (VUSmart_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VUVentureValue_EverCash1 = ECAR1SA * (VUVenture_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureGrowthValue_EverCash1 = ECAR1SA * (VUVentureGrowth_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureBlueChipValue_EverCash1 = ECAR1SA * (VUVentureBlueChip_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureDanaValue_EverCash1 = ECAR1SA * (VUVentureDana_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureManagedValue_EverCash1 = ECAR1SA * (VUVentureManaged_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureIncomeValue_EverCash1 = ECAR1SA * (VUVentureIncome_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture6666Value_EverCash1 = ECAR1SA * (VUVenture6666_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture7777Value_EverCash1 = ECAR1SA * (VUVenture7777_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture8888Value_EverCash1 = ECAR1SA * (VUVenture8888_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture9999Value_EverCash1 = ECAR1SA * (VUVenture9999_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VUCashValue_EverCash1 = 0.00;
				}
			}
			else if (aaPolicyYear >= FundTerm2030 && aaPolicyYear <= FundTermPrev2035) {
				if (VUCash_FundAllo_Percen == 100) {
					VU2023Value_EverCash1 = 0.00;
					VU2025Value_EverCash1 = 0.00;
					VU2028Value_EverCash1 = 0.00;
					VU2030Value_EverCash1 = 0.00;
					VU2035Value_EverCash1 = 0.00;
					VURetValue_EverCash1 = 0.00;
					VUDanaValue_EverCash1 = 0.00;
                    VUSmartValue_EverCash1 = 0.00;
                    VUVentureValue_EverCash1 = 0.00;
                    VUVentureGrowthValue_EverCash1 = 0.00;
                    VUVentureBlueChipValue_EverCash1 = 0.00;
                    VUVentureDanaValue_EverCash1 = 0.00;
                    VUVentureManagedValue_EverCash1 = 0.00;
                    VUVentureIncomeValue_EverCash1 = 0.00;
                    VUVenture6666Value_EverCash1 = 0.00;
                    VUVenture7777Value_EverCash1 = 0.00;
                    VUVenture8888Value_EverCash1 = 0.00;
                    VUVenture9999Value_EverCash1 = 0.00;
                    VUCashValue_EverCash1 = ECAR1SA;
				}
				else{
					VU2023Value_EverCash1 = 0.00;
					VU2025Value_EverCash1 = 0.00;
					VU2028Value_EverCash1 = 0.00;
					VU2030Value_EverCash1 = 0.00;
					VU2035Value_EverCash1 = ECAR1SA * (VU2035_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VURetValue_EverCash1 = ECAR1SA * (VURet_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VUDanaValue_EverCash1 = ECAR1SA * (VUDana_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUSmartValue_EverCash1 = ECAR1SA * (VUSmart_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VUVentureValue_EverCash1 = ECAR1SA * (VUVenture_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureGrowthValue_EverCash1 = ECAR1SA * (VUVentureGrowth_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureBlueChipValue_EverCash1 = ECAR1SA * (VUVentureBlueChip_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureDanaValue_EverCash1 = ECAR1SA * (VUVentureDana_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureManagedValue_EverCash1 = ECAR1SA * (VUVentureManaged_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureIncomeValue_EverCash1 = ECAR1SA * (VUVentureIncome_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture6666Value_EverCash1 = ECAR1SA * (VUVenture6666_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture7777Value_EverCash1 = ECAR1SA * (VUVenture7777_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture8888Value_EverCash1 = ECAR1SA * (VUVenture8888_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture9999Value_EverCash1 = ECAR1SA * (VUVenture9999_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VUCashValue_EverCash1 = 0.00;
				}
			}
			else if (aaPolicyYear == FundTermPrev2035) {
				if (VUCash_FundAllo_Percen == 100) {
					VU2023Value_EverCash1 = 0.00;
					VU2025Value_EverCash1 = 0.00;
					VU2028Value_EverCash1 = 0.00;
					VU2030Value_EverCash1 = 0.00;
					VU2035Value_EverCash1 = 0.00;
					VURetValue_EverCash1 = 0.00;
					VUDanaValue_EverCash1 = 0.00;
                    VUSmartValue_EverCash1 = 0.00;
                    VUVentureValue_EverCash1 = 0.00;
                    VUVentureGrowthValue_EverCash1 = 0.00;
                    VUVentureBlueChipValue_EverCash1 = 0.00;
                    VUVentureDanaValue_EverCash1 = 0.00;
                    VUVentureManagedValue_EverCash1 = 0.00;
                    VUVentureIncomeValue_EverCash1 = 0.00;
                    VUVenture6666Value_EverCash1 = 0.00;
                    VUVenture7777Value_EverCash1 = 0.00;
                    VUVenture8888Value_EverCash1 = 0.00;
                    VUVenture9999Value_EverCash1 = 0.00;
                    VUCashValue_EverCash1 = ECAR1SA;
				}
				else{
					VU2023Value_EverCash1 = 0.00;
					VU2025Value_EverCash1 = 0.00;
					VU2028Value_EverCash1 = 0.00;
					VU2030Value_EverCash1 = 0.00;
					VU2035Value_EverCash1 = 0.00;
					VURetValue_EverCash1 = ECAR1SA * (VURet_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VUDanaValue_EverCash1 = ECAR1SA * (VUDana_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUSmartValue_EverCash1 = ECAR1SA * (VUSmart_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VUVentureValue_EverCash1 = ECAR1SA * (VUVenture_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureGrowthValue_EverCash1 = ECAR1SA * (VUVentureGrowth_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureBlueChipValue_EverCash1 = ECAR1SA * (VUVentureBlueChip_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureDanaValue_EverCash1 = ECAR1SA * (VUVentureDana_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureManagedValue_EverCash1 = ECAR1SA * (VUVentureManaged_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureIncomeValue_EverCash1 = ECAR1SA * (VUVentureIncome_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture6666Value_EverCash1 = ECAR1SA * (VUVenture6666_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture7777Value_EverCash1 = ECAR1SA * (VUVenture7777_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture8888Value_EverCash1 = ECAR1SA * (VUVenture8888_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture9999Value_EverCash1 = ECAR1SA * (VUVenture9999_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VUCashValue_EverCash1 = 0.00;
				}
			}
			else if (aaPolicyYear > FundTermPrev2035) {
				if (VUCash_FundAllo_Percen == 100) {
					VU2023Value_EverCash1 = 0.00;
					VU2025Value_EverCash1 = 0.00;
					VU2028Value_EverCash1 = 0.00;
					VU2030Value_EverCash1 = 0.00;
					VU2035Value_EverCash1 = 0.00;
					VURetValue_EverCash1 = 0.00;
					VUDanaValue_EverCash1 = 0.00;
                    VUSmartValue_EverCash1 = 0.00;
                    VUVentureValue_EverCash1 = 0.00;
                    VUVentureGrowthValue_EverCash1 = 0.00;
                    VUVentureBlueChipValue_EverCash1 = 0.00;
                    VUVentureDanaValue_EverCash1 = 0.00;
                    VUVentureManagedValue_EverCash1 = 0.00;
                    VUVentureIncomeValue_EverCash1 = 0.00;
                    VUVenture6666Value_EverCash1 = 0.00;
                    VUVenture7777Value_EverCash1 = 0.00;
                    VUVenture8888Value_EverCash1 = 0.00;
                    VUVenture9999Value_EverCash1 = 0.00;
					VUCashValue_EverCash1 = ECAR1SA;
				}
				else{
					VU2023Value_EverCash1 = 0.00;
					VU2025Value_EverCash1 = 0.00;
					VU2028Value_EverCash1 = 0.00;
					VU2030Value_EverCash1 = 0.00;
					VU2035Value_EverCash1 = 0.00;
					VURetValue_EverCash1 = ECAR1SA * (VURet_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VUDanaValue_EverCash1 = ECAR1SA * (VUDana_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUSmartValue_EverCash1 = ECAR1SA * (VUSmart_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VUVentureValue_EverCash1 = ECAR1SA * (VUVenture_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureGrowthValue_EverCash1 = ECAR1SA * (VUVentureGrowth_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureBlueChipValue_EverCash1 = ECAR1SA * (VUVentureBlueChip_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureDanaValue_EverCash1 = ECAR1SA * (VUVentureDana_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureManagedValue_EverCash1 = ECAR1SA * (VUVentureManaged_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureIncomeValue_EverCash1 = ECAR1SA * (VUVentureIncome_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture6666Value_EverCash1 = ECAR1SA * (VUVenture6666_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture7777Value_EverCash1 = ECAR1SA * (VUVenture7777_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture8888Value_EverCash1 = ECAR1SA * (VUVenture8888_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture9999Value_EverCash1 = ECAR1SA * (VUVenture9999_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VUCashValue_EverCash1 = 0.00;
				}
			}
			else{
				if (VUCash_FundAllo_Percen == 100) {
					VU2023Value_EverCash1 = 0.00;
					VU2025Value_EverCash1 = 0.00;
					VU2028Value_EverCash1 = 0.00;
					VU2030Value_EverCash1 = 0.00;
					VU2035Value_EverCash1 = 0.00;
					VURetValue_EverCash1 = 0.00;
					VUDanaValue_EverCash1 = 0.00;
                    VUSmartValue_EverCash1 = 0.00;
                    VUVentureValue_EverCash1 = 0.00;
                    VUVentureGrowthValue_EverCash1 = 0.00;
                    VUVentureBlueChipValue_EverCash1 = 0.00;
                    VUVentureDanaValue_EverCash1 = 0.00;
                    VUVentureManagedValue_EverCash1 = 0.00;
                    VUVentureIncomeValue_EverCash1 = 0.00;
                    VUVenture6666Value_EverCash1 = 0.00;
                    VUVenture7777Value_EverCash1 = 0.00;
                    VUVenture8888Value_EverCash1 = 0.00;
                    VUVenture9999Value_EverCash1 = 0.00;
                    VUCashValue_EverCash1 = 0.00;
				}
				else{
					if (VU2023_FundAllo_Percen > 0) {
						VU2023Value_EverCash1 = ECAR1SA * (VU2023_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					}
					else{
						VU2023Value_EverCash1 = 0.00;
					}
					
					if (VU2025_FundAllo_Percen > 0) {
						VU2025Value_EverCash1 = ECAR1SA * (VU2025_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					}
					else{
						VU2025Value_EverCash1 = 0.00;
					}
					
					if (VU2028_FundAllo_Percen > 0) {
						VU2028Value_EverCash1 = ECAR1SA * (VU2028_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					}
					else{
						VU2028Value_EverCash1 = 0.00;
					}
					
					if (VU2030_FundAllo_Percen > 0) {
						VU2030Value_EverCash1 = ECAR1SA * (VU2030_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					}
					else{
						VU2030Value_EverCash1 = 0.00;
					}
					
					if (VU2035_FundAllo_Percen > 0) {
						VU2035Value_EverCash1 = ECAR1SA * (VU2035_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
						
					}
					else{
						VU2035Value_EverCash1 = 0.00;
					}
					
					if (VURet_FundAllo_Percen > 0) {
						VURetValue_EverCash1 = ECAR1SA * (VURet_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					}
					else{
						VURetValue_EverCash1 = 0.00;
					}
					
					if (VUDana_FundAllo_Percen > 0) {
						VUDanaValue_EverCash1 = ECAR1SA * (VUDana_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					}
					else{
						VUDanaValue_EverCash1 = 0.00;
					}
                    
                    if (VUSmart_FundAllo_Percen > 0) {
						VUSmartValue_EverCash1 = ECAR1SA * (VUSmart_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					}
					else{
						VUSmartValue_EverCash1 = 0.00;
					}
					
					if (VUVenture_FundAllo_Percen > 0) {
						VUVentureValue_EverCash1 = ECAR1SA * (VUVenture_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					}
					else{
						VUVentureValue_EverCash1 = 0.00;
					}
                    
                    
                    if (VUVentureGrowth_FundAllo_Percen > 0) {
                        VUVentureGrowthValue_EverCash1 = ECAR1SA * (VUVentureGrowth_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    }
                    else{
                        VUVentureGrowthValue_EverCash1 = 0.00;
                    }
                    
                    if (VUVentureBlueChip_FundAllo_Percen > 0) {
                        VUVentureBlueChipValue_EverCash1 = ECAR1SA * (VUVentureBlueChip_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    }
                    else{
                        VUVentureBlueChipValue_EverCash1 = 0.00;
                    }
                    
                    if (VUVentureDana_FundAllo_Percen > 0) {
                        VUVentureDanaValue_EverCash1 = ECAR1SA * (VUVentureDana_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    }
                    else{
                        VUVentureDanaValue_EverCash1 = 0.00;
                    }
                    
                    if (VUVentureManaged_FundAllo_Percen > 0) {
                        VUVentureManagedValue_EverCash1 = ECAR1SA * (VUVentureManaged_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    }
                    else{
                        VUVentureManagedValue_EverCash1 = 0.00;
                    }
                    
                    if (VUVentureIncome_FundAllo_Percen > 0) {
                        VUVentureIncomeValue_EverCash1 = ECAR1SA * (VUVentureIncome_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    }
                    else{
                        VUVentureIncomeValue_EverCash1 = 0.00;
                    }
                    
                    if (VUVenture6666_FundAllo_Percen > 0) {
                        VUVenture6666Value_EverCash1 = ECAR1SA * (VUVenture6666_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    }
                    else{
                        VUVenture6666Value_EverCash1 = 0.00;
                    }
                    
                    if (VUVenture7777_FundAllo_Percen > 0) {
                        VUVenture7777Value_EverCash1 = ECAR1SA * (VUVenture7777_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    }
                    else{
                        VUVenture7777Value_EverCash1 = 0.00;
                    }
                    
                    if (VUVenture8888_FundAllo_Percen > 0) {
                        VUVenture8888Value_EverCash1 = ECAR1SA * (VUVenture8888_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    }
                    else{
                        VUVenture8888Value_EverCash1 = 0.00;
                    }
                    
                    if (VUVenture9999_FundAllo_Percen > 0) {
                        VUVenture9999Value_EverCash1 = ECAR1SA * (VUVenture9999_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    }
                    else{
                        VUVenture9999Value_EverCash1 = 0.00;
                    }
				}
				
			}
			
		}
		else{
			VU2023Value_EverCash1 = 0.00;
			VU2025Value_EverCash1 = 0.00;
			VU2028Value_EverCash1 = 0.00;
			VU2030Value_EverCash1 = 0.00;
			VU2035Value_EverCash1 = 0.00;
			VURetValue_EverCash1 = 0.00;
			VUDanaValue_EverCash1 = 0.00;
            VUSmartValue_EverCash1 = 0.00;
            VUVentureValue_EverCash1 = 0.00;
            VUVentureGrowthValue_EverCash1 = 0.00;
            VUVentureBlueChipValue_EverCash1 = 0.00;
            VUVentureDanaValue_EverCash1 = 0.00;
            VUVentureManagedValue_EverCash1 = 0.00;
            VUVentureIncomeValue_EverCash1 = 0.00;
            VUVenture6666Value_EverCash1 = 0.00;
            VUVenture7777Value_EverCash1 = 0.00;
            VUVenture8888Value_EverCash1 = 0.00;
            VUVenture9999Value_EverCash1 = 0.00;
			VUCashValue_EverCash1 = 0.00;
		}
	}
	
    
	
}

-(void)ReturnEverCash6 :(int)aaPolicyYear {
	double ECAR6SA = [ECAR6SumAssured doubleValue ];
	
	if(ECAR6Exist == FALSE){
		VU2023Value_EverCash6 = 0.00;
		VU2025Value_EverCash6 = 0.00;
		VU2028Value_EverCash6 = 0.00;
		VU2030Value_EverCash6 = 0.00;
		VU2035Value_EverCash6 = 0.00;
		VURetValue_EverCash6 = 0.00;
		VUDanaValue_EverCash6 = 0.00;
        VUSmartValue_EverCash6 = 0.00;
		VUVentureValue_EverCash6 = 0.00;
        VUVentureGrowthValue_EverCash6 = 0.00;
        VUVentureBlueChipValue_EverCash6 = 0.00;
        VUVentureDanaValue_EverCash6 = 0.00;
        VUVentureManagedValue_EverCash6 = 0.00;
        VUVentureIncomeValue_EverCash6 = 0.00;
        VUVenture6666Value_EverCash6 = 0.00;
        VUVenture7777Value_EverCash6 = 0.00;
        VUVenture8888Value_EverCash6 = 0.00;
        VUVenture9999Value_EverCash6 = 0.00;
		VUCashValue_EverCash6 = 0.00;
	}
	else{
		if (aaPolicyYear >= 6 && aaPolicyYear <= [ECAR6RiderTerm intValue] && [ECAR6ReinvestGYI isEqualToString:@"Yes"] ) {
			VUCash_FundAllo_Percen = [self ReturnVUCashFac:aaPolicyYear] * 100;
			VU2025_FundAllo_Percen = [self ReturnVU2025Fac:aaPolicyYear] * 100;
			VU2028_FundAllo_Percen = [self ReturnVU2028Fac:aaPolicyYear] * 100;
			VU2030_FundAllo_Percen = [self ReturnVU2030Fac:aaPolicyYear] * 100;
			VU2035_FundAllo_Percen = [self ReturnVU2035Fac:aaPolicyYear] * 100;
			VURet_FundAllo_Percen = [self ReturnVURetFac:aaPolicyYear] * 100;
			VUDana_FundAllo_Percen = [self ReturnVUDanaFac:aaPolicyYear] * 100;
            VUSmart_FundAllo_Percen = [self ReturnVUSmartFac:aaPolicyYear] * 100;
			VUVenture_FundAllo_Percen = [self ReturnVUVentureFac:aaPolicyYear] * 100;
            VUVentureGrowth_FundAllo_Percen = [self ReturnVUVentureGrowthFac:aaPolicyYear] * 100;
            VUVentureBlueChip_FundAllo_Percen = [self ReturnVUVentureBlueChipFac:aaPolicyYear] * 100;
            VUVentureDana_FundAllo_Percen = [self ReturnVUVentureDanaFac:aaPolicyYear] * 100;
            VUVentureManaged_FundAllo_Percen = [self ReturnVUVentureManagedFac:aaPolicyYear] * 100;
            VUVentureIncome_FundAllo_Percen = [self ReturnVUVentureIncomeFac:aaPolicyYear] * 100;
            VUVenture6666_FundAllo_Percen = [self ReturnVUVenture6666Fac:aaPolicyYear] * 100;
            VUVenture7777_FundAllo_Percen = [self ReturnVUVenture7777Fac:aaPolicyYear] * 100;
            VUVenture8888_FundAllo_Percen = [self ReturnVUVenture8888Fac:aaPolicyYear] * 100;
            VUVenture9999_FundAllo_Percen = [self ReturnVUVenture9999Fac:aaPolicyYear] * 100;
            /*
             if ([strBumpMode isEqualToString:@"S" ]) {
             ECAR6SA = ECAR6SA / 0.5;
             }
             else if ([strBumpMode isEqualToString:@"Q" ]){
             ECAR6SA = ECAR6SA / 0.25;
             }
             else if ([strBumpMode isEqualToString:@"M" ]){
             ECAR6SA = ECAR6SA / 0.0833333;
             }
             else{
             ECAR6SA = ECAR6SA / 1.00;
             }
             */
			if (aaPolicyYear >= FundTerm2023 && aaPolicyYear <= FundTermPrev2025) {
				if (VUCash_FundAllo_Percen == 100) {
					VU2023Value_EverCash6 = 0.00;
					VU2025Value_EverCash6 = 0.00;
					VU2028Value_EverCash6 = 0.00;
					VU2030Value_EverCash6 = 0.00;
					VU2035Value_EverCash6 = 0.00;
					VURetValue_EverCash6 = 0.00;
					VUDanaValue_EverCash6 = 0.00;
                    VUSmartValue_EverCash6 = 0.00;
                    VUVentureValue_EverCash6 = 0.00;
                    VUVentureGrowthValue_EverCash6 = 0.00;
                    VUVentureBlueChipValue_EverCash6 = 0.00;
                    VUVentureDanaValue_EverCash6 = 0.00;
                    VUVentureManagedValue_EverCash6 = 0.00;
                    VUVentureIncomeValue_EverCash6 = 0.00;
                    VUVenture6666Value_EverCash6 = 0.00;
                    VUVenture7777Value_EverCash6 = 0.00;
                    VUVenture8888Value_EverCash6 = 0.00;
                    VUVenture9999Value_EverCash6 = 0.00;
                    VUCashValue_EverCash6 = ECAR6SA;
				}
				else{
					VU2023Value_EverCash6 = 0.00;
					VU2025Value_EverCash6 = ECAR6SA * (VU2025_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VU2028Value_EverCash6 = ECAR6SA * (VU2028_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VU2030Value_EverCash6 = ECAR6SA * (VU2030_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VU2035Value_EverCash6 = ECAR6SA * (VU2035_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VURetValue_EverCash6 = ECAR6SA * (VURet_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VUDanaValue_EverCash6 = ECAR6SA * (VUDana_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUSmartValue_EverCash6 = ECAR6SA * (VUSmart_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VUVentureValue_EverCash6 = ECAR6SA * (VUVenture_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureGrowthValue_EverCash6 = ECAR6SA * (VUVentureGrowth_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureBlueChipValue_EverCash6 = ECAR6SA * (VUVentureBlueChip_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureDanaValue_EverCash6 = ECAR6SA * (VUVentureDana_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureManagedValue_EverCash6 = ECAR6SA * (VUVentureManaged_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureIncomeValue_EverCash6 = ECAR6SA * (VUVentureIncome_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture6666Value_EverCash6 = ECAR6SA * (VUVenture6666_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture7777Value_EverCash6 = ECAR6SA * (VUVenture7777_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture8888Value_EverCash6 = ECAR6SA * (VUVenture8888_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture9999Value_EverCash6 = ECAR6SA * (VUVenture9999_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VUCashValue_EverCash6 = 0.00;
				}
			}
			else if (aaPolicyYear >= FundTerm2025 && aaPolicyYear <= FundTermPrev2028) {
				if (VUCash_FundAllo_Percen == 100) {
					VU2023Value_EverCash6 = 0.00;
					VU2025Value_EverCash6 = 0.00;
					VU2028Value_EverCash6 = 0.00;
					VU2030Value_EverCash6 = 0.00;
					VU2035Value_EverCash6 = 0.00;
					VURetValue_EverCash6 = 0.00;
					VUDanaValue_EverCash6 = 0.00;
                    VUSmartValue_EverCash6 = 0.00;
                    VUVentureValue_EverCash6 = 0.00;
                    VUVentureGrowthValue_EverCash6 = 0.00;
                    VUVentureBlueChipValue_EverCash6 = 0.00;
                    VUVentureDanaValue_EverCash6 = 0.00;
                    VUVentureManagedValue_EverCash6 = 0.00;
                    VUVentureIncomeValue_EverCash6 = 0.00;
                    VUVenture6666Value_EverCash6 = 0.00;
                    VUVenture7777Value_EverCash6 = 0.00;
                    VUVenture8888Value_EverCash6 = 0.00;
                    VUVenture9999Value_EverCash6 = 0.00;
                    VUCashValue_EverCash6 = ECAR6SA;
				}
				else{
					VU2023Value_EverCash6 = 0.00;
					VU2025Value_EverCash6 = 0.00;
					VU2028Value_EverCash6 = ECAR6SA * (VU2028_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VU2030Value_EverCash6 = ECAR6SA * (VU2030_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VU2035Value_EverCash6 = ECAR6SA * (VU2035_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VURetValue_EverCash6 = ECAR6SA * (VURet_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VUDanaValue_EverCash6 = ECAR6SA * (VUDana_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUSmartValue_EverCash6 = ECAR6SA * (VUSmart_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VUVentureValue_EverCash6 = ECAR6SA * (VUVenture_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureGrowthValue_EverCash6 = ECAR6SA * (VUVentureGrowth_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureBlueChipValue_EverCash6 = ECAR6SA * (VUVentureBlueChip_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureDanaValue_EverCash6 = ECAR6SA * (VUVentureDana_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureManagedValue_EverCash6 = ECAR6SA * (VUVentureManaged_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureIncomeValue_EverCash6 = ECAR6SA * (VUVentureIncome_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture6666Value_EverCash6 = ECAR6SA * (VUVenture6666_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture7777Value_EverCash6 = ECAR6SA * (VUVenture7777_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture8888Value_EverCash6 = ECAR6SA * (VUVenture8888_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture9999Value_EverCash6 = ECAR6SA * (VUVenture9999_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VUCashValue_EverCash6 = 0.00;
				}
			}
			else if (aaPolicyYear >= FundTerm2028 && aaPolicyYear <= FundTermPrev2030) {
				if (VUCash_FundAllo_Percen == 100) {
					VU2023Value_EverCash6 = 0.00;
					VU2025Value_EverCash6 = 0.00;
					VU2028Value_EverCash6 = 0.00;
					VU2030Value_EverCash6 = 0.00;
					VU2035Value_EverCash6 = 0.00;
					VURetValue_EverCash6 = 0.00;
					VUDanaValue_EverCash6 = 0.00;
                    VUSmartValue_EverCash6 = 0.00;
                    VUVentureValue_EverCash6 = 0.00;
                    VUVentureGrowthValue_EverCash6 = 0.00;
                    VUVentureBlueChipValue_EverCash6 = 0.00;
                    VUVentureDanaValue_EverCash6 = 0.00;
                    VUVentureManagedValue_EverCash6 = 0.00;
                    VUVentureIncomeValue_EverCash6 = 0.00;
                    VUVenture6666Value_EverCash6 = 0.00;
                    VUVenture7777Value_EverCash6 = 0.00;
                    VUVenture8888Value_EverCash6 = 0.00;
                    VUVenture9999Value_EverCash6 = 0.00;
                    VUCashValue_EverCash6 = ECAR6SA;
				}
				else{
					VU2023Value_EverCash6 = 0.00;
					VU2025Value_EverCash6 = 0.00;
					VU2028Value_EverCash6 = 0.00;
					VU2030Value_EverCash6 = ECAR6SA * (VU2030_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VU2035Value_EverCash6 = ECAR6SA * (VU2035_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VURetValue_EverCash6 = ECAR6SA * (VURet_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VUDanaValue_EverCash6 = ECAR6SA * (VUDana_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUSmartValue_EverCash6 = ECAR6SA * (VUSmart_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VUVentureValue_EverCash6 = ECAR6SA * (VUVenture_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureGrowthValue_EverCash6 = ECAR6SA * (VUVentureGrowth_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureBlueChipValue_EverCash6 = ECAR6SA * (VUVentureBlueChip_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureDanaValue_EverCash6 = ECAR6SA * (VUVentureDana_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureManagedValue_EverCash6 = ECAR6SA * (VUVentureManaged_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureIncomeValue_EverCash6 = ECAR6SA * (VUVentureIncome_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture6666Value_EverCash6 = ECAR6SA * (VUVenture6666_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture7777Value_EverCash6 = ECAR6SA * (VUVenture7777_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture8888Value_EverCash6 = ECAR6SA * (VUVenture8888_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture9999Value_EverCash6 = ECAR6SA * (VUVenture9999_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUCashValue_EverCash6 = 0.00;
				}
			}
			else if (aaPolicyYear >= FundTerm2030 && aaPolicyYear <= FundTermPrev2035) {
				if (VUCash_FundAllo_Percen == 100) {
					VU2023Value_EverCash6 = 0.00;
					VU2025Value_EverCash6 = 0.00;
					VU2028Value_EverCash6 = 0.00;
					VU2030Value_EverCash6 = 0.00;
					VU2035Value_EverCash6 = 0.00;
					VURetValue_EverCash6 = 0.00;
					VUDanaValue_EverCash6 = 0.00;
                    VUSmartValue_EverCash6 = 0.00;
                    VUVentureValue_EverCash6 = 0.00;
                    VUVentureGrowthValue_EverCash6 = 0.00;
                    VUVentureBlueChipValue_EverCash6 = 0.00;
                    VUVentureDanaValue_EverCash6 = 0.00;
                    VUVentureManagedValue_EverCash6 = 0.00;
                    VUVentureIncomeValue_EverCash6 = 0.00;
                    VUVenture6666Value_EverCash6 = 0.00;
                    VUVenture7777Value_EverCash6 = 0.00;
                    VUVenture8888Value_EverCash6 = 0.00;
                    VUVenture9999Value_EverCash6 = 0.00;
                    VUCashValue_EverCash6 = ECAR6SA;
				}
				else{
					VU2023Value_EverCash6 = 0.00;
					VU2025Value_EverCash6 = 0.00;
					VU2028Value_EverCash6 = 0.00;
					VU2030Value_EverCash6 = 0.00;
					VU2035Value_EverCash6 = ECAR6SA * (VU2035_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VURetValue_EverCash6 = ECAR6SA * (VURet_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VUDanaValue_EverCash6 = ECAR6SA * (VUDana_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUSmartValue_EverCash6 = ECAR6SA * (VUSmart_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VUVentureValue_EverCash6 = ECAR6SA * (VUVenture_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureGrowthValue_EverCash6 = ECAR6SA * (VUVentureGrowth_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureBlueChipValue_EverCash6 = ECAR6SA * (VUVentureBlueChip_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureDanaValue_EverCash6 = ECAR6SA * (VUVentureDana_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureManagedValue_EverCash6 = ECAR6SA * (VUVentureManaged_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureIncomeValue_EverCash6 = ECAR6SA * (VUVentureIncome_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture6666Value_EverCash6 = ECAR6SA * (VUVenture6666_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture7777Value_EverCash6 = ECAR6SA * (VUVenture7777_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture8888Value_EverCash6 = ECAR6SA * (VUVenture8888_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture9999Value_EverCash6 = ECAR6SA * (VUVenture9999_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUCashValue_EverCash6 = 0.00;
				}
			}
			else if (aaPolicyYear == FundTermPrev2035) {
				if (VUCash_FundAllo_Percen == 100) {
					VU2023Value_EverCash6 = 0.00;
					VU2025Value_EverCash6 = 0.00;
					VU2028Value_EverCash6 = 0.00;
					VU2030Value_EverCash6 = 0.00;
					VU2035Value_EverCash6 = 0.00;
					VURetValue_EverCash6 = 0.00;
					VUDanaValue_EverCash6 = 0.00;
                    VUSmartValue_EverCash6 = 0.00;
                    VUVentureValue_EverCash6 = 0.00;
                    VUVentureGrowthValue_EverCash6 = 0.00;
                    VUVentureBlueChipValue_EverCash6 = 0.00;
                    VUVentureDanaValue_EverCash6 = 0.00;
                    VUVentureManagedValue_EverCash6 = 0.00;
                    VUVentureIncomeValue_EverCash6 = 0.00;
                    VUVenture6666Value_EverCash6 = 0.00;
                    VUVenture7777Value_EverCash6 = 0.00;
                    VUVenture8888Value_EverCash6 = 0.00;
                    VUVenture9999Value_EverCash6 = 0.00;
                    VUCashValue_EverCash6 = ECAR6SA;
				}
				else{
					VU2023Value_EverCash6 = 0.00;
					VU2025Value_EverCash6 = 0.00;
					VU2028Value_EverCash6 = 0.00;
					VU2030Value_EverCash6 = 0.00;
					VU2035Value_EverCash6 = 0.00;
					VURetValue_EverCash6 = ECAR6SA * (VURet_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VUDanaValue_EverCash6 = ECAR6SA * (VUDana_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUSmartValue_EverCash6 = ECAR6SA * (VUSmart_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VUVentureValue_EverCash6 = ECAR6SA * (VUVenture_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureGrowthValue_EverCash6 = ECAR6SA * (VUVentureGrowth_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureBlueChipValue_EverCash6 = ECAR6SA * (VUVentureBlueChip_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureDanaValue_EverCash6 = ECAR6SA * (VUVentureDana_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureManagedValue_EverCash6 = ECAR6SA * (VUVentureManaged_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureIncomeValue_EverCash6 = ECAR6SA * (VUVentureIncome_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture6666Value_EverCash6 = ECAR6SA * (VUVenture6666_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture7777Value_EverCash6 = ECAR6SA * (VUVenture7777_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture8888Value_EverCash6 = ECAR6SA * (VUVenture8888_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture9999Value_EverCash6 = ECAR6SA * (VUVenture9999_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUCashValue_EverCash6 = 0.00;
				}
			}
			else if (aaPolicyYear > FundTermPrev2035) {
				if (VUCash_FundAllo_Percen == 100) {
					VU2023Value_EverCash6= 0.00;
					VU2025Value_EverCash6 = 0.00;
					VU2028Value_EverCash6 = 0.00;
					VU2030Value_EverCash6 = 0.00;
					VU2035Value_EverCash6 = 0.00;
					VURetValue_EverCash6 = 0.00;
					VUDanaValue_EverCash6 = 0.00;
                    VUSmartValue_EverCash6 = 0.00;
                    VUVentureValue_EverCash6 = 0.00;
                    VUVentureGrowthValue_EverCash6 = 0.00;
                    VUVentureBlueChipValue_EverCash6 = 0.00;
                    VUVentureDanaValue_EverCash6 = 0.00;
                    VUVentureManagedValue_EverCash6 = 0.00;
                    VUVentureIncomeValue_EverCash6 = 0.00;
                    VUVenture6666Value_EverCash6 = 0.00;
                    VUVenture7777Value_EverCash6 = 0.00;
                    VUVenture8888Value_EverCash6 = 0.00;
                    VUVenture9999Value_EverCash6 = 0.00;
                    VUCashValue_EverCash6 = ECAR6SA;
				}
				else{
					VU2023Value_EverCash6 = 0.00;
					VU2025Value_EverCash6 = 0.00;
					VU2028Value_EverCash6 = 0.00;
					VU2030Value_EverCash6 = 0.00;
					VU2035Value_EverCash6 = 0.00;
					VURetValue_EverCash6 = ECAR6SA * (VURet_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VUDanaValue_EverCash6 = ECAR6SA * (VUDana_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUSmartValue_EverCash6 = ECAR6SA * (VUSmart_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VUVentureValue_EverCash6 = ECAR6SA * (VUVenture_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureGrowthValue_EverCash6 = ECAR6SA * (VUVentureGrowth_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureBlueChipValue_EverCash6 = ECAR6SA * (VUVentureBlueChip_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureDanaValue_EverCash6 = ECAR6SA * (VUVentureDana_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureManagedValue_EverCash6 = ECAR6SA * (VUVentureManaged_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureIncomeValue_EverCash6 = ECAR6SA * (VUVentureIncome_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture6666Value_EverCash6 = ECAR6SA * (VUVenture6666_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture7777Value_EverCash6 = ECAR6SA * (VUVenture7777_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture8888Value_EverCash6 = ECAR6SA * (VUVenture8888_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture9999Value_EverCash6 = ECAR6SA * (VUVenture9999_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUCashValue_EverCash6 = 0.00;
				}
			}
			else{
				if (VUCash_FundAllo_Percen == 100) {
					VU2023Value_EverCash6 = 0.00;
					VU2025Value_EverCash6 = 0.00;
					VU2028Value_EverCash6 = 0.00;
					VU2030Value_EverCash6 = 0.00;
					VU2035Value_EverCash6 = 0.00;
					VURetValue_EverCash6 = 0.00;
					VUDanaValue_EverCash6 = 0.00;
                    VUSmartValue_EverCash6 = 0.00;
                    VUVentureValue_EverCash6 = 0.00;
                    VUVentureGrowthValue_EverCash6 = 0.00;
                    VUVentureBlueChipValue_EverCash6 = 0.00;
                    VUVentureDanaValue_EverCash6 = 0.00;
                    VUVentureManagedValue_EverCash6 = 0.00;
                    VUVentureIncomeValue_EverCash6 = 0.00;
                    VUVenture6666Value_EverCash6 = 0.00;
                    VUVenture7777Value_EverCash6 = 0.00;
                    VUVenture8888Value_EverCash6 = 0.00;
                    VUVenture9999Value_EverCash6 = 0.00;
                    VUCashValue_EverCash6 = 0.00;
				}
				else{
					if (VU2023_FundAllo_Percen > 0) {
						VU2023Value_EverCash6 = ECAR6SA * (VU2023_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					}
					else{
						VU2023Value_EverCash6 = 0.00;
					}
					
					if (VU2025_FundAllo_Percen > 0) {
						VU2025Value_EverCash6 = ECAR6SA * (VU2025_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					}
					else{
						VU2025Value_EverCash6 = 0.00;
					}
					
					if (VU2028_FundAllo_Percen > 0) {
						VU2028Value_EverCash6 = ECAR6SA * (VU2028_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					}
					else{
						VU2028Value_EverCash6 = 0.00;
					}
					
					if (VU2030_FundAllo_Percen > 0) {
						VU2030Value_EverCash6 = ECAR6SA * (VU2030_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					}
					else{
						VU2030Value_EverCash6 = 0.00;
					}
					
					if (VU2035_FundAllo_Percen > 0) {
						VU2035Value_EverCash6 = ECAR6SA * (VU2035_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					}
					else{
						VU2035Value_EverCash6 = 0.00;
					}
					
					if (VURet_FundAllo_Percen > 0) {
						VURetValue_EverCash6 = ECAR6SA * (VURet_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					}
					else{
						VURetValue_EverCash6 = 0.00;
					}
					
					if (VUDana_FundAllo_Percen > 0) {
						VUDanaValue_EverCash6 = ECAR6SA * (VUDana_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					}
					else{
						VUDanaValue_EverCash6 = 0.00;
					}
                    
                    if (VUSmart_FundAllo_Percen > 0) {
						VUSmartValue_EverCash6 = ECAR6SA * (VUSmart_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					}
					else{
						VUSmartValue_EverCash6 = 0.00;
					}
					
					if (VUVenture_FundAllo_Percen > 0) {
						VUVentureValue_EverCash6 = ECAR6SA * (VUVenture_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					}
					else{
						VUVentureValue_EverCash6 = 0.00;
					}
                    
                    if (VUVentureGrowth_FundAllo_Percen > 0) {
                        VUVentureGrowthValue_EverCash6 = ECAR6SA * (VUVentureGrowth_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    }
                    else{
                        VUVentureGrowthValue_EverCash6 = 0.00;
                    }
                    
                    if (VUVentureBlueChip_FundAllo_Percen > 0) {
                        VUVentureBlueChipValue_EverCash6 = ECAR6SA * (VUVentureBlueChip_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    }
                    else{
                        VUVentureBlueChipValue_EverCash6 = 0.00;
                    }
                    
                    if (VUVentureDana_FundAllo_Percen > 0) {
                        VUVentureDanaValue_EverCash6 = ECAR6SA * (VUVentureDana_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    }
                    else{
                        VUVentureDanaValue_EverCash6 = 0.00;
                    }
                    
                    if (VUVentureManaged_FundAllo_Percen > 0) {
                        VUVentureManagedValue_EverCash6 = ECAR6SA * (VUVentureManaged_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    }
                    else{
                        VUVentureManagedValue_EverCash6 = 0.00;
                    }
                    
                    if (VUVentureIncome_FundAllo_Percen > 0) {
                        VUVentureIncomeValue_EverCash6 = ECAR6SA * (VUVentureIncome_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    }
                    else{
                        VUVentureIncomeValue_EverCash6 = 0.00;
                    }
                    
                    if (VUVenture6666_FundAllo_Percen > 0) {
                        VUVenture6666Value_EverCash6 = ECAR6SA * (VUVenture6666_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    }
                    else{
                        VUVenture6666Value_EverCash6 = 0.00;
                    }
                    
                    if (VUVenture7777_FundAllo_Percen > 0) {
                        VUVenture7777Value_EverCash6 = ECAR6SA * (VUVenture7777_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    }
                    else{
                        VUVenture7777Value_EverCash6 = 0.00;
                    }
                    
                    if (VUVenture8888_FundAllo_Percen > 0) {
                        VUVenture8888Value_EverCash6 = ECAR6SA * (VUVenture8888_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    }
                    else{
                        VUVenture8888Value_EverCash6 = 0.00;
                    }
                    
                    if (VUVenture9999_FundAllo_Percen > 0) {
                        VUVenture9999Value_EverCash6 = ECAR6SA * (VUVenture9999_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    }
                    else{
                        VUVenture9999Value_EverCash6 = 0.00;
                    }
				}
				
			}
			
		}
		else{
			VU2023Value_EverCash6 = 0.00;
			VU2025Value_EverCash6 = 0.00;
			VU2028Value_EverCash6 = 0.00;
			VU2030Value_EverCash6 = 0.00;
			VU2035Value_EverCash6 = 0.00;
			VURetValue_EverCash6 = 0.00;
			VUDanaValue_EverCash6 = 0.00;
            VUSmartValue_EverCash6 = 0.00;
            VUVentureValue_EverCash6 = 0.00;
            VUVentureGrowthValue_EverCash6 = 0.00;
            VUVentureBlueChipValue_EverCash6 = 0.00;
            VUVentureDanaValue_EverCash6 = 0.00;
            VUVentureManagedValue_EverCash6 = 0.00;
            VUVentureIncomeValue_EverCash6 = 0.00;
            VUVenture6666Value_EverCash6 = 0.00;
            VUVenture7777Value_EverCash6 = 0.00;
            VUVenture8888Value_EverCash6 = 0.00;
            VUVenture9999Value_EverCash6 = 0.00;
            VUCashValue_EverCash6 = 0.00;
		}
	}
	
	
}

-(void)ReturnMonthEverCash6 :(int)aaPolicyYear andMonth :(int)aaMonth {
	double ECAR6SA = [ECAR6SumAssured doubleValue ];
	
	if(ECAR6Exist == FALSE){
		VU2023Value_EverCash6 = 0.00;
		VU2025Value_EverCash6 = 0.00;
		VU2028Value_EverCash6 = 0.00;
		VU2030Value_EverCash6 = 0.00;
		VU2035Value_EverCash6 = 0.00;
		VURetValue_EverCash6 = 0.00;
		VUDanaValue_EverCash6 = 0.00;
        VUSmartValue_EverCash6 = 0.00;
		VUVentureValue_EverCash6 = 0.00;
        VUVentureGrowthValue_EverCash6 = 0.00;
        VUVentureBlueChipValue_EverCash6 = 0.00;
        VUVentureDanaValue_EverCash6 = 0.00;
        VUVentureManagedValue_EverCash6 = 0.00;
        VUVentureIncomeValue_EverCash6 = 0.00;
        VUVenture6666Value_EverCash6 = 0.00;
        VUVenture7777Value_EverCash6 = 0.00;
        VUVenture8888Value_EverCash6 = 0.00;
        VUVenture9999Value_EverCash6 = 0.00;
        VUCashValue_EverCash6 = 0.00;
	}
	else{
		if (aaPolicyYear >= 6 && aaPolicyYear <= [ECAR6RiderTerm intValue] && [ECAR6ReinvestGYI isEqualToString:@"Yes"] ) {
			VUCash_FundAllo_Percen = [self ReturnVUCashFac:aaPolicyYear andMonth:aaMonth ] * 100;
			VU2025_FundAllo_Percen = [self ReturnVU2025Fac:aaPolicyYear andMonth:aaMonth] * 100;
			VU2028_FundAllo_Percen = [self ReturnVU2028Fac:aaPolicyYear andMonth:aaMonth] * 100;
			VU2030_FundAllo_Percen = [self ReturnVU2030Fac:aaPolicyYear andMonth:aaMonth] * 100;
			VU2035_FundAllo_Percen = [self ReturnVU2035Fac:aaPolicyYear andMonth:aaMonth] * 100;
			VURet_FundAllo_Percen = [self ReturnVURetFac:aaPolicyYear andMonth:aaMonth] * 100;
			VUDana_FundAllo_Percen = [self ReturnVUDanaFac:aaPolicyYear andMonth:aaMonth] * 100;
            VUSmart_FundAllo_Percen = [self ReturnVUSmartFac:aaPolicyYear andMonth:aaMonth] * 100;
			VUVenture_FundAllo_Percen = [self ReturnVUVentureFac:aaPolicyYear andMonth:aaMonth] * 100;
            VUVentureGrowth_FundAllo_Percen = [self ReturnVUVentureGrowthFac:aaPolicyYear andMonth:aaMonth] * 100;
            VUVentureBlueChip_FundAllo_Percen = [self ReturnVUVentureBlueChipFac:aaPolicyYear andMonth:aaMonth] * 100;
            VUVentureDana_FundAllo_Percen = [self ReturnVUVentureDanaFac:aaPolicyYear andMonth:aaMonth] * 100;
            VUVentureManaged_FundAllo_Percen = [self ReturnVUVentureManagedFac:aaPolicyYear andMonth:aaMonth] * 100;
            VUVentureIncome_FundAllo_Percen = [self ReturnVUVentureIncomeFac:aaPolicyYear andMonth:aaMonth] * 100;
            VUVenture6666_FundAllo_Percen = [self ReturnVUVenture6666Fac:aaPolicyYear andMonth:aaMonth] * 100;
            VUVenture7777_FundAllo_Percen = [self ReturnVUVenture7777Fac:aaPolicyYear andMonth:aaMonth] * 100;
            VUVenture8888_FundAllo_Percen = [self ReturnVUVenture8888Fac:aaPolicyYear andMonth:aaMonth] * 100;
            VUVenture9999_FundAllo_Percen = [self ReturnVUVenture9999Fac:aaPolicyYear andMonth:aaMonth] * 100;
            
			/*
             if ([strBumpMode isEqualToString:@"S" ]) {
             ECAR6SA = ECAR6SA / 0.5;
             }
             else if ([strBumpMode isEqualToString:@"Q" ]){
             ECAR6SA = ECAR6SA / 0.25;
             }
             else if ([strBumpMode isEqualToString:@"M" ]){
             ECAR6SA = ECAR6SA / 0.0833333;
             }
             else{
             ECAR6SA = ECAR6SA / 1.00;
             }
             */
			if (aaPolicyYear >= FundTerm2023 && aaPolicyYear <= FundTermPrev2025) {
				if (VUCash_FundAllo_Percen == 100) {
					VU2023Value_EverCash6 = 0.00;
					VU2025Value_EverCash6 = 0.00;
					VU2028Value_EverCash6 = 0.00;
					VU2030Value_EverCash6 = 0.00;
					VU2035Value_EverCash6 = 0.00;
					VURetValue_EverCash6 = 0.00;
					VUDanaValue_EverCash6 = 0.00;
                    VUSmartValue_EverCash6 = 0.00;
                    VUVentureValue_EverCash6 = 0.00;
                    VUVentureGrowthValue_EverCash6 = 0.00;
                    VUVentureBlueChipValue_EverCash6 = 0.00;
                    VUVentureDanaValue_EverCash6 = 0.00;
                    VUVentureManagedValue_EverCash6 = 0.00;
                    VUVentureIncomeValue_EverCash6 = 0.00;
                    VUVenture6666Value_EverCash6 = 0.00;
                    VUVenture7777Value_EverCash6 = 0.00;
                    VUVenture8888Value_EverCash6 = 0.00;
                    VUVenture9999Value_EverCash6 = 0.00;
                    VUCashValue_EverCash6 = ECAR6SA;
				}
				else{
					VU2023Value_EverCash6 = 0.00;
					VU2025Value_EverCash6 = ECAR6SA * (VU2025_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VU2028Value_EverCash6 = ECAR6SA * (VU2028_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VU2030Value_EverCash6 = ECAR6SA * (VU2030_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VU2035Value_EverCash6 = ECAR6SA * (VU2035_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VURetValue_EverCash6 = ECAR6SA * (VURet_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VUDanaValue_EverCash6 = ECAR6SA * (VUDana_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUSmartValue_EverCash6 = ECAR6SA * (VUSmart_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VUVentureValue_EverCash6 = ECAR6SA * (VUVenture_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureGrowthValue_EverCash6 = ECAR6SA * (VUVentureGrowth_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureBlueChipValue_EverCash6 = ECAR6SA * (VUVentureBlueChip_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureDanaValue_EverCash6 = ECAR6SA * (VUVentureDana_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureManagedValue_EverCash6 = ECAR6SA * (VUVentureManaged_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureIncomeValue_EverCash6 = ECAR6SA * (VUVentureIncome_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture6666Value_EverCash6 = ECAR6SA * (VUVenture6666_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture7777Value_EverCash6 = ECAR6SA * (VUVenture7777_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture8888Value_EverCash6 = ECAR6SA * (VUVenture8888_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture9999Value_EverCash6 = ECAR6SA * (VUVenture9999_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VUCashValue_EverCash6 = 0.00;
				}
			}
			else if (aaPolicyYear >= FundTerm2025 && aaPolicyYear <= FundTermPrev2028) {
				if (VUCash_FundAllo_Percen == 100) {
					VU2023Value_EverCash6 = 0.00;
					VU2025Value_EverCash6 = 0.00;
					VU2028Value_EverCash6 = 0.00;
					VU2030Value_EverCash6 = 0.00;
					VU2035Value_EverCash6 = 0.00;
					VURetValue_EverCash6 = 0.00;
					VUDanaValue_EverCash6 = 0.00;
                    VUSmartValue_EverCash6 = 0.00;
                    VUVentureValue_EverCash6 = 0.00;
                    VUVentureGrowthValue_EverCash6 = 0.00;
                    VUVentureBlueChipValue_EverCash6 = 0.00;
                    VUVentureDanaValue_EverCash6 = 0.00;
                    VUVentureManagedValue_EverCash6 = 0.00;
                    VUVentureIncomeValue_EverCash6 = 0.00;
                    VUVenture6666Value_EverCash6 = 0.00;
                    VUVenture7777Value_EverCash6 = 0.00;
                    VUVenture8888Value_EverCash6 = 0.00;
                    VUVenture9999Value_EverCash6 = 0.00;
                    VUCashValue_EverCash6 = ECAR6SA;
				}
				else{
					VU2023Value_EverCash6 = 0.00;
					VU2025Value_EverCash6 = 0.00;
					VU2028Value_EverCash6 = ECAR6SA * (VU2028_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VU2030Value_EverCash6 = ECAR6SA * (VU2030_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VU2035Value_EverCash6 = ECAR6SA * (VU2035_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VURetValue_EverCash6 = ECAR6SA * (VURet_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VUDanaValue_EverCash6 = ECAR6SA * (VUDana_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUSmartValue_EverCash6 = ECAR6SA * (VUSmart_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VUVentureValue_EverCash6 = ECAR6SA * (VUVenture_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureGrowthValue_EverCash6 = ECAR6SA * (VUVentureGrowth_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureBlueChipValue_EverCash6 = ECAR6SA * (VUVentureBlueChip_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureDanaValue_EverCash6 = ECAR6SA * (VUVentureDana_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureManagedValue_EverCash6 = ECAR6SA * (VUVentureManaged_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureIncomeValue_EverCash6 = ECAR6SA * (VUVentureIncome_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture6666Value_EverCash6 = ECAR6SA * (VUVenture6666_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture7777Value_EverCash6 = ECAR6SA * (VUVenture7777_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture8888Value_EverCash6 = ECAR6SA * (VUVenture8888_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture9999Value_EverCash6 = ECAR6SA * (VUVenture9999_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    
					VUCashValue_EverCash6 = 0.00;
				}
			}
			else if (aaPolicyYear >= FundTerm2028 && aaPolicyYear <= FundTermPrev2030) {
				if (VUCash_FundAllo_Percen == 100) {
					VU2023Value_EverCash6 = 0.00;
					VU2025Value_EverCash6 = 0.00;
					VU2028Value_EverCash6 = 0.00;
					VU2030Value_EverCash6 = 0.00;
					VU2035Value_EverCash6 = 0.00;
					VURetValue_EverCash6 = 0.00;
					VUDanaValue_EverCash6 = 0.00;
                    VUSmartValue_EverCash6 = 0.00;
                    VUVentureValue_EverCash6 = 0.00;
                    VUVentureGrowthValue_EverCash6 = 0.00;
                    VUVentureBlueChipValue_EverCash6 = 0.00;
                    VUVentureDanaValue_EverCash6 = 0.00;
                    VUVentureManagedValue_EverCash6 = 0.00;
                    VUVentureIncomeValue_EverCash6 = 0.00;
                    VUVenture6666Value_EverCash6 = 0.00;
                    VUVenture7777Value_EverCash6 = 0.00;
                    VUVenture8888Value_EverCash6 = 0.00;
                    VUVenture9999Value_EverCash6 = 0.00;
                    VUCashValue_EverCash6 = ECAR6SA;
				}
				else{
					VU2023Value_EverCash6 = 0.00;
					VU2025Value_EverCash6 = 0.00;
					VU2028Value_EverCash6 = 0.00;
					VU2030Value_EverCash6 = ECAR6SA * (VU2030_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VU2035Value_EverCash6 = ECAR6SA * (VU2035_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VURetValue_EverCash6 = ECAR6SA * (VURet_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VUDanaValue_EverCash6 = ECAR6SA * (VUDana_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUSmartValue_EverCash6 = ECAR6SA * (VUSmart_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VUVentureValue_EverCash6 = ECAR6SA * (VUVenture_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureGrowthValue_EverCash6 = ECAR6SA * (VUVentureGrowth_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureBlueChipValue_EverCash6 = ECAR6SA * (VUVentureBlueChip_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureDanaValue_EverCash6 = ECAR6SA * (VUVentureDana_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureManagedValue_EverCash6 = ECAR6SA * (VUVentureManaged_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureIncomeValue_EverCash6 = ECAR6SA * (VUVentureIncome_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture6666Value_EverCash6 = ECAR6SA * (VUVenture6666_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture7777Value_EverCash6 = ECAR6SA * (VUVenture7777_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture8888Value_EverCash6 = ECAR6SA * (VUVenture8888_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture9999Value_EverCash6 = ECAR6SA * (VUVenture9999_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUCashValue_EverCash6 = 0.00;
				}
			}
			else if (aaPolicyYear >= FundTerm2030 && aaPolicyYear <= FundTermPrev2035) {
				if (VUCash_FundAllo_Percen == 100) {
					VU2023Value_EverCash6 = 0.00;
					VU2025Value_EverCash6 = 0.00;
					VU2028Value_EverCash6 = 0.00;
					VU2030Value_EverCash6 = 0.00;
					VU2035Value_EverCash6 = 0.00;
					VURetValue_EverCash6 = 0.00;
					VUDanaValue_EverCash6 = 0.00;
                    VUSmartValue_EverCash6 = 0.00;
                    VUVentureValue_EverCash6 = 0.00;
                    VUVentureGrowthValue_EverCash6 = 0.00;
                    VUVentureBlueChipValue_EverCash6 = 0.00;
                    VUVentureDanaValue_EverCash6 = 0.00;
                    VUVentureManagedValue_EverCash6 = 0.00;
                    VUVentureIncomeValue_EverCash6 = 0.00;
                    VUVenture6666Value_EverCash6 = 0.00;
                    VUVenture7777Value_EverCash6 = 0.00;
                    VUVenture8888Value_EverCash6 = 0.00;
                    VUVenture9999Value_EverCash6 = 0.00;
                    VUCashValue_EverCash6 = ECAR6SA;
				}
				else{
					VU2023Value_EverCash6 = 0.00;
					VU2025Value_EverCash6 = 0.00;
					VU2028Value_EverCash6 = 0.00;
					VU2030Value_EverCash6 = 0.00;
					VU2035Value_EverCash6 = ECAR6SA * (VU2035_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VURetValue_EverCash6 = ECAR6SA * (VURet_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VUDanaValue_EverCash6 = ECAR6SA * (VUDana_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUSmartValue_EverCash6 = ECAR6SA * (VUSmart_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VUVentureValue_EverCash6 = ECAR6SA * (VUVenture_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureGrowthValue_EverCash6 = ECAR6SA * (VUVentureGrowth_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureBlueChipValue_EverCash6 = ECAR6SA * (VUVentureBlueChip_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureDanaValue_EverCash6 = ECAR6SA * (VUVentureDana_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureManagedValue_EverCash6 = ECAR6SA * (VUVentureManaged_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureIncomeValue_EverCash6 = ECAR6SA * (VUVentureIncome_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture6666Value_EverCash6 = ECAR6SA * (VUVenture6666_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture7777Value_EverCash6 = ECAR6SA * (VUVenture7777_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture8888Value_EverCash6 = ECAR6SA * (VUVenture8888_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture9999Value_EverCash6 = ECAR6SA * (VUVenture9999_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VUCashValue_EverCash6 = 0.00;
				}
			}
			else if (aaPolicyYear == FundTerm2035) {
				if (VUCash_FundAllo_Percen == 100) {
					VU2023Value_EverCash6 = 0.00;
					VU2025Value_EverCash6 = 0.00;
					VU2028Value_EverCash6 = 0.00;
					VU2030Value_EverCash6 = 0.00;
					VU2035Value_EverCash6 = 0.00;
					VURetValue_EverCash6 = 0.00;
					VUDanaValue_EverCash6 = 0.00;
                    VUSmartValue_EverCash6 = 0.00;
                    VUVentureValue_EverCash6 = 0.00;
                    VUVentureGrowthValue_EverCash6 = 0.00;
                    VUVentureBlueChipValue_EverCash6 = 0.00;
                    VUVentureDanaValue_EverCash6 = 0.00;
                    VUVentureManagedValue_EverCash6 = 0.00;
                    VUVentureIncomeValue_EverCash6 = 0.00;
                    VUVenture6666Value_EverCash6 = 0.00;
                    VUVenture7777Value_EverCash6 = 0.00;
                    VUVenture8888Value_EverCash6 = 0.00;
                    VUVenture9999Value_EverCash6 = 0.00;
                    VUCashValue_EverCash6 = ECAR6SA;
				}
				else{
					VU2023Value_EverCash6 = 0.00;
					VU2025Value_EverCash6 = 0.00;
					VU2028Value_EverCash6 = 0.00;
					VU2030Value_EverCash6 = 0.00;
					VU2035Value_EverCash6 = 0.00;
					VURetValue_EverCash6 = ECAR6SA * (VURet_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VUDanaValue_EverCash6 = ECAR6SA * (VUDana_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUSmartValue_EverCash6 = ECAR6SA * (VUSmart_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VUVentureValue_EverCash6 = ECAR6SA * (VUVenture_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureGrowthValue_EverCash6 = ECAR6SA * (VUVentureGrowth_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureBlueChipValue_EverCash6 = ECAR6SA * (VUVentureBlueChip_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureDanaValue_EverCash6 = ECAR6SA * (VUVentureDana_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureManagedValue_EverCash6 = ECAR6SA * (VUVentureManaged_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureIncomeValue_EverCash6 = ECAR6SA * (VUVentureIncome_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture6666Value_EverCash6 = ECAR6SA * (VUVenture6666_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture7777Value_EverCash6 = ECAR6SA * (VUVenture7777_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture8888Value_EverCash6 = ECAR6SA * (VUVenture8888_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture9999Value_EverCash6 = ECAR6SA * (VUVenture9999_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VUCashValue_EverCash6 = 0.00;
				}
			}
			else if (aaPolicyYear > FundTerm2035) {
				if (VUCash_FundAllo_Percen == 100) {
					VU2023Value_EverCash6 = 0.00;
					VU2025Value_EverCash6 = 0.00;
					VU2028Value_EverCash6 = 0.00;
					VU2030Value_EverCash6 = 0.00;
					VU2035Value_EverCash6 = 0.00;
					VURetValue_EverCash6 = 0.00;
					VUDanaValue_EverCash6 = 0.00;
                    VUSmartValue_EverCash6 = 0.00;
                    VUVentureValue_EverCash6 = 0.00;
                    VUVentureGrowthValue_EverCash6 = 0.00;
                    VUVentureBlueChipValue_EverCash6 = 0.00;
                    VUVentureDanaValue_EverCash6 = 0.00;
                    VUVentureManagedValue_EverCash6 = 0.00;
                    VUVentureIncomeValue_EverCash6 = 0.00;
                    VUVenture6666Value_EverCash6 = 0.00;
                    VUVenture7777Value_EverCash6 = 0.00;
                    VUVenture8888Value_EverCash6 = 0.00;
                    VUVenture9999Value_EverCash6 = 0.00;
                    VUCashValue_EverCash6 = ECAR6SA;
				}
				else{
					VU2023Value_EverCash6 = 0.00;
					VU2025Value_EverCash6 = 0.00;
					VU2028Value_EverCash6 = 0.00;
					VU2030Value_EverCash6 = 0.00;
					VU2035Value_EverCash6 = 0.00;
					VURetValue_EverCash6 = ECAR6SA * (VURet_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VUDanaValue_EverCash6 = ECAR6SA * (VUDana_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUSmartValue_EverCash6 = ECAR6SA * (VUSmart_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VUVentureValue_EverCash6 = ECAR6SA * (VUVenture_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureGrowthValue_EverCash6 = ECAR6SA * (VUVentureGrowth_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureBlueChipValue_EverCash6 = ECAR6SA * (VUVentureBlueChip_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureDanaValue_EverCash6 = ECAR6SA * (VUVentureDana_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureManagedValue_EverCash6 = ECAR6SA * (VUVentureManaged_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureIncomeValue_EverCash6 = ECAR6SA * (VUVentureIncome_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture6666Value_EverCash6 = ECAR6SA * (VUVenture6666_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture7777Value_EverCash6 = ECAR6SA * (VUVenture7777_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture8888Value_EverCash6 = ECAR6SA * (VUVenture8888_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture9999Value_EverCash6 = ECAR6SA * (VUVenture9999_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUCashValue_EverCash6 = 0.00;
				}
			}
			else{
				if (VUCash_FundAllo_Percen == 100) {
					VU2023Value_EverCash6 = 0.00;
					VU2025Value_EverCash6 = 0.00;
					VU2028Value_EverCash6 = 0.00;
					VU2030Value_EverCash6 = 0.00;
					VU2035Value_EverCash6 = 0.00;
					VURetValue_EverCash6 = 0.00;
					VUDanaValue_EverCash6 = 0.00;
                    VUSmartValue_EverCash6 = 0.00;
                    VUVentureValue_EverCash6 = 0.00;
                    VUVentureGrowthValue_EverCash6 = 0.00;
                    VUVentureBlueChipValue_EverCash6 = 0.00;
                    VUVentureDanaValue_EverCash6 = 0.00;
                    VUVentureManagedValue_EverCash6 = 0.00;
                    VUVentureIncomeValue_EverCash6 = 0.00;
                    VUVenture6666Value_EverCash6 = 0.00;
                    VUVenture7777Value_EverCash6 = 0.00;
                    VUVenture8888Value_EverCash6 = 0.00;
                    VUVenture9999Value_EverCash6 = 0.00;
                    VUCashValue_EverCash6 = 0.00;
				}
				else{
					if (VU2023_FundAllo_Percen > 0) {
						VU2023Value_EverCash6 = ECAR6SA * (VU2023_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					}
					else{
						VU2023Value_EverCash6 = 0.00;
					}
					
					if (VU2025_FundAllo_Percen > 0) {
						VU2025Value_EverCash6 = ECAR6SA * (VU2025_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					}
					else{
						VU2025Value_EverCash6 = 0.00;
					}
					
					if (VU2028_FundAllo_Percen > 0) {
						VU2028Value_EverCash6 = ECAR6SA * (VU2028_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					}
					else{
						VU2028Value_EverCash6 = 0.00;
					}
					
					if (VU2030_FundAllo_Percen > 0) {
						VU2030Value_EverCash6 = ECAR6SA * (VU2030_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					}
					else{
						VU2030Value_EverCash6 = 0.00;
					}
					
					if (VU2035_FundAllo_Percen > 0) {
						VU2035Value_EverCash6 = ECAR6SA * (VU2035_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
						
					}
					else{
						VU2035Value_EverCash6 = 0.00;
					}
					
					if (VURet_FundAllo_Percen > 0) {
						VURetValue_EverCash6 = ECAR6SA * (VURet_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					}
					else{
						VURetValue_EverCash6 = 0.00;
					}
					
					if (VUDana_FundAllo_Percen > 0) {
						VUDanaValue_EverCash6 = ECAR6SA * (VUDana_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					}
					else{
						VUDanaValue_EverCash6 = 0.00;
					}
                    
                    if (VUSmart_FundAllo_Percen > 0) {
						VUSmartValue_EverCash6 = ECAR6SA * (VUSmart_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					}
					else{
						VUSmartValue_EverCash6 = 0.00;
					}
					
					if (VUVenture_FundAllo_Percen > 0) {
						VUVentureValue_EverCash6 = ECAR6SA * (VUVenture_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					}
					else{
						VUVentureValue_EverCash6 = 0.00;
					}
                    
                    if (VUVentureGrowth_FundAllo_Percen > 0) {
                        VUVentureGrowthValue_EverCash6 = ECAR6SA * (VUVentureGrowth_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    }
                    else{
                        VUVentureGrowthValue_EverCash6 = 0.00;
                    }
                    
                    if (VUVentureBlueChip_FundAllo_Percen > 0) {
                        VUVentureBlueChipValue_EverCash6 = ECAR6SA * (VUVentureBlueChip_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    }
                    else{
                        VUVentureBlueChipValue_EverCash6 = 0.00;
                    }
                    
                    if (VUVentureDana_FundAllo_Percen > 0) {
                        VUVentureDanaValue_EverCash6 = ECAR6SA * (VUVentureDana_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    }
                    else{
                        VUVentureDanaValue_EverCash6 = 0.00;
                    }
                    
                    if (VUVentureManaged_FundAllo_Percen > 0) {
                        VUVentureManagedValue_EverCash6 = ECAR6SA * (VUVentureManaged_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    }
                    else{
                        VUVentureManagedValue_EverCash6 = 0.00;
                    }
                    
                    if (VUVentureIncome_FundAllo_Percen > 0) {
                        VUVentureIncomeValue_EverCash6 = ECAR6SA * (VUVentureIncome_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    }
                    else{
                        VUVentureIncomeValue_EverCash6 = 0.00;
                    }
                    
                    if (VUVenture6666_FundAllo_Percen > 0) {
                        VUVenture6666Value_EverCash6 = ECAR6SA * (VUVenture6666_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    }
                    else{
                        VUVenture6666Value_EverCash6 = 0.00;
                    }
                    
                    if (VUVenture7777_FundAllo_Percen > 0) {
                        VUVenture7777Value_EverCash6 = ECAR6SA * (VUVenture7777_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    }
                    else{
                        VUVenture7777Value_EverCash6 = 0.00;
                    }
                    
                    if (VUVenture8888_FundAllo_Percen > 0) {
                        VUVenture8888Value_EverCash6 = ECAR6SA * (VUVenture8888_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    }
                    else{
                        VUVenture8888Value_EverCash6 = 0.00;
                    }
                    
                    if (VUVenture9999_FundAllo_Percen > 0) {
                        VUVenture9999Value_EverCash6 = ECAR6SA * (VUVenture9999_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    }
                    else{
                        VUVenture9999Value_EverCash6 = 0.00;
                    }
				}
				
			}
			
		}
		else{
			VU2023Value_EverCash6 = 0.00;
			VU2025Value_EverCash6 = 0.00;
			VU2028Value_EverCash6 = 0.00;
			VU2030Value_EverCash6 = 0.00;
			VU2035Value_EverCash6 = 0.00;
			VURetValue_EverCash6 = 0.00;
			VUDanaValue_EverCash6 = 0.00;
            VUSmartValue_EverCash6 = 0.00;
            VUVentureValue_EverCash6 = 0.00;
            VUVentureGrowthValue_EverCash6 = 0.00;
            VUVentureBlueChipValue_EverCash6 = 0.00;
            VUVentureDanaValue_EverCash6 = 0.00;
            VUVentureManagedValue_EverCash6 = 0.00;
            VUVentureIncomeValue_EverCash6 = 0.00;
            VUVenture6666Value_EverCash6 = 0.00;
            VUVenture7777Value_EverCash6 = 0.00;
            VUVenture8888Value_EverCash6 = 0.00;
            VUVenture9999Value_EverCash6 = 0.00;
            VUCashValue_EverCash6 = 0.00;
		}
	}
	
	
	
}

-(void)ReturnEverCash55 :(int)aaPolicyYear {
	double ECAR55SA = [ECAR55SumAssured doubleValue ];
	
	if(ECAR55Exist == FALSE){
		VU2023Value_EverCash55 = 0.00;
		VU2025Value_EverCash55 = 0.00;
		VU2028Value_EverCash55 = 0.00;
		VU2030Value_EverCash55 = 0.00;
		VU2035Value_EverCash55 = 0.00;
		VURetValue_EverCash55 = 0.00;
		VUDanaValue_EverCash55 = 0.00;
		VUCashValue_EverCash55 = 0.00;
        VUVentureGrowthValue_EverCash55 = 0.00;
        VUVentureBlueChipValue_EverCash55 = 0.00;
        VUVentureDanaValue_EverCash55 = 0.00;
        VUVentureManagedValue_EverCash55 = 0.00;
        VUVentureIncomeValue_EverCash55 = 0.00;
        VUVenture6666Value_EverCash55 = 0.00;
        VUVenture7777Value_EverCash55 = 0.00;
        VUVenture8888Value_EverCash55 = 0.00;
        VUVenture9999Value_EverCash55 = 0.00;
        
	}
	else{
		if (Age + aaPolicyYear >= 55 && aaPolicyYear <= [ECAR55RiderTerm intValue] && [ECAR55ReinvestGYI isEqualToString:@"Yes"] ) {
			VUCash_FundAllo_Percen = [self ReturnVUCashFac:aaPolicyYear] * 100;
			VU2025_FundAllo_Percen = [self ReturnVU2025Fac:aaPolicyYear] * 100;
			VU2028_FundAllo_Percen = [self ReturnVU2028Fac:aaPolicyYear] * 100;
			VU2030_FundAllo_Percen = [self ReturnVU2030Fac:aaPolicyYear] * 100;
			VU2035_FundAllo_Percen = [self ReturnVU2035Fac:aaPolicyYear] * 100;
			VURet_FundAllo_Percen = [self ReturnVURetFac:aaPolicyYear] * 100;
			VUDana_FundAllo_Percen = [self ReturnVUDanaFac:aaPolicyYear] * 100;
            VUVentureGrowth_FundAllo_Percen = [self ReturnVUVentureGrowthFac:aaPolicyYear] * 100;
            VUVentureBlueChip_FundAllo_Percen = [self ReturnVUVentureBlueChipFac:aaPolicyYear] * 100;
            VUVentureDana_FundAllo_Percen = [self ReturnVUVentureDanaFac:aaPolicyYear] * 100;
            VUVentureManaged_FundAllo_Percen = [self ReturnVUVentureManagedFac:aaPolicyYear] * 100;
            VUVentureIncome_FundAllo_Percen = [self ReturnVUVentureIncomeFac:aaPolicyYear] * 100;
            VUVenture6666_FundAllo_Percen = [self ReturnVUVenture6666Fac:aaPolicyYear] * 100;
            VUVenture7777_FundAllo_Percen = [self ReturnVUVenture7777Fac:aaPolicyYear] * 100;
            VUVenture8888_FundAllo_Percen = [self ReturnVUVenture8888Fac:aaPolicyYear] * 100;
            VUVenture9999_FundAllo_Percen = [self ReturnVUVenture9999Fac:aaPolicyYear] * 100;
            
			double PrevVUCash_FundAllo_Percen = [self ReturnVUCashFac:aaPolicyYear - 1] * 100;
			double PrevVU2025_FundAllo_Percen = [self ReturnVU2025Fac:aaPolicyYear- 1] * 100;
			double PrevVU2028_FundAllo_Percen = [self ReturnVU2028Fac:aaPolicyYear- 1] * 100;
			double PrevVU2030_FundAllo_Percen = [self ReturnVU2030Fac:aaPolicyYear- 1] * 100;
			double PrevVU2035_FundAllo_Percen = [self ReturnVU2035Fac:aaPolicyYear- 1] * 100;
			double PrevVURet_FundAllo_Percen = [self ReturnVURetFac:aaPolicyYear- 1] * 100;
			double PrevVUDana_FundAllo_Percen = [self ReturnVUDanaFac:aaPolicyYear- 1] * 100;
            double PrevVUVentureGrowth_FundAllo_Percen = [self ReturnVUVentureGrowthFac:aaPolicyYear- 1] * 100;
            double PrevVUVentureBlueChip_FundAllo_Percen = [self ReturnVUVentureBlueChipFac:aaPolicyYear- 1] * 100;
            double PrevVUVentureDana_FundAllo_Percen = [self ReturnVUVentureDanaFac:aaPolicyYear- 1] * 100;
            double PrevVUVentureManaged_FundAllo_Percen = [self ReturnVUVentureManagedFac:aaPolicyYear- 1] * 100;
            double PrevVUVentureIncome_FundAllo_Percen = [self ReturnVUVentureIncomeFac:aaPolicyYear- 1] * 100;
            double PrevVUVenture6666_FundAllo_Percen = [self ReturnVUVenture6666Fac:aaPolicyYear- 1] * 100;
            double PrevVUVenture7777_FundAllo_Percen = [self ReturnVUVenture7777Fac:aaPolicyYear- 1] * 100;
            double PrevVUVenture8888_FundAllo_Percen = [self ReturnVUVenture8888Fac:aaPolicyYear- 1] * 100;
            double PrevVUVenture9999_FundAllo_Percen = [self ReturnVUVenture9999Fac:aaPolicyYear- 1] * 100;
            
			if ([strBumpMode isEqualToString:@"S" ]) {
				ECAR55SA = ECAR55SA / 0.5;
			}
			else if ([strBumpMode isEqualToString:@"Q" ]){
				ECAR55SA = ECAR55SA / 0.25;
			}
			else if ([strBumpMode isEqualToString:@"M" ]){
				ECAR55SA = ECAR55SA / 0.0833333;
			}
			else{
				ECAR55SA = ECAR55SA / 1.00;
			}
			
			if (aaPolicyYear >= FundTerm2023 && aaPolicyYear <= FundTermPrev2025) {
				if (VUCash_FundAllo_Percen == 100) {
					VU2023Value_EverCash55 = 0.00;
					VU2025Value_EverCash55 = 0.00;
					VU2028Value_EverCash55 = 0.00;
					VU2030Value_EverCash55 = 0.00;
					VU2035Value_EverCash55 = 0.00;
					VURetValue_EverCash55 = 0.00;
					VUDanaValue_EverCash55 = 0.00;
					VUCashValue_EverCash55 = ECAR55SA;
                    VUVentureGrowthValue_EverCash55 = 0.00;
                    VUVentureBlueChipValue_EverCash55 = 0.00;
                    VUVentureDanaValue_EverCash55 = 0.00;
                    VUVentureManagedValue_EverCash55 = 0.00;
                    VUVentureIncomeValue_EverCash55 = 0.00;
                    VUVenture6666Value_EverCash55 = 0.00;
                    VUVenture7777Value_EverCash55 = 0.00;
                    VUVenture8888Value_EverCash55 = 0.00;
                    VUVenture9999Value_EverCash55 = 0.00;
                    
					if (PrevVUCash_FundAllo_Percen == 100) {
						PrevVUCashValue_EverCash55 = ECAR55SA;
					}
					else{
						PrevVUCashValue_EverCash55 = 0.00;
					}
				}
				else{
					VU2023Value_EverCash55 = 0.00;
					VU2025Value_EverCash55 = ECAR55SA * (VU2025_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VU2028Value_EverCash55 = ECAR55SA * (VU2028_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VU2030Value_EverCash55 = ECAR55SA * (VU2030_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VU2035Value_EverCash55 = ECAR55SA * (VU2035_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VURetValue_EverCash55 = ECAR55SA * (VURet_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VUDanaValue_EverCash55 = ECAR55SA * (VUDana_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VUCashValue_EverCash55 = 0.00;
					VUVentureGrowthValue_EverCash55 = ECAR55SA * (VUVentureGrowth_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureBlueChipValue_EverCash55 = ECAR55SA * (VUVentureBlueChip_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureDanaValue_EverCash55 = ECAR55SA * (VUVentureDana_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureManagedValue_EverCash55 = ECAR55SA * (VUVentureManaged_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureIncomeValue_EverCash55 = ECAR55SA * (VUVentureIncome_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture6666Value_EverCash55 = ECAR55SA * (VUVenture6666_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture7777Value_EverCash55 = ECAR55SA * (VUVenture7777_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture8888Value_EverCash55 = ECAR55SA * (VUVenture8888_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture9999Value_EverCash55 = ECAR55SA * (VUVenture9999_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    
					PrevVU2023Value_EverCash55 = ECAR55SA * (VU2023_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
					PrevVU2025Value_EverCash55 = ECAR55SA * (PrevVU2025_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
					PrevVU2028Value_EverCash55 = ECAR55SA * (PrevVU2028_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
					PrevVU2030Value_EverCash55 = ECAR55SA * (PrevVU2030_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
					PrevVU2035Value_EverCash55 = ECAR55SA * (PrevVU2035_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
					PrevVURetValue_EverCash55 = ECAR55SA * (PrevVURet_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
					PrevVUDanaValue_EverCash55 = ECAR55SA * (PrevVUDana_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
					PrevVUVentureGrowthValue_EverCash55 = ECAR55SA * (PrevVUVentureGrowth_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVentureBlueChipValue_EverCash55 = ECAR55SA * (PrevVUVentureBlueChip_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVentureDanaValue_EverCash55 = ECAR55SA * (PrevVUVentureDana_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVentureManagedValue_EverCash55 = ECAR55SA * (PrevVUVentureManaged_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVentureIncomeValue_EverCash55 = ECAR55SA * (PrevVUVentureIncome_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVenture6666Value_EverCash55 = ECAR55SA * (PrevVUVenture6666_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVenture7777Value_EverCash55 = ECAR55SA * (PrevVUVenture7777_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVenture8888Value_EverCash55 = ECAR55SA * (PrevVUVenture8888_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVenture9999Value_EverCash55 = ECAR55SA * (PrevVUVenture9999_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
				}
			}
			else if (aaPolicyYear >= FundTerm2025 && aaPolicyYear <= FundTermPrev2028) {
				if (VUCash_FundAllo_Percen == 100) {
					VU2023Value_EverCash55 = 0.00;
					VU2025Value_EverCash55 = 0.00;
					VU2028Value_EverCash55 = 0.00;
					VU2030Value_EverCash55 = 0.00;
					VU2035Value_EverCash55 = 0.00;
					VURetValue_EverCash55 = 0.00;
					VUDanaValue_EverCash55 = 0.00;
					VUCashValue_EverCash55 = ECAR55SA;
                    VUVentureGrowthValue_EverCash55 = 0.00;
                    VUVentureBlueChipValue_EverCash55 = 0.00;
                    VUVentureDanaValue_EverCash55 = 0.00;
                    VUVentureManagedValue_EverCash55 = 0.00;
                    VUVentureIncomeValue_EverCash55 = 0.00;
                    VUVenture6666Value_EverCash55 = 0.00;
                    VUVenture7777Value_EverCash55 = 0.00;
                    VUVenture8888Value_EverCash55 = 0.00;
                    VUVenture9999Value_EverCash55 = 0.00;
                    
					if (PrevVUCash_FundAllo_Percen == 100) {
						PrevVUCashValue_EverCash55 = ECAR55SA;
					}
					else{
						PrevVUCashValue_EverCash55 = 0.00;
					}
				}
				else{
					VU2023Value_EverCash55 = 0.00;
					VU2025Value_EverCash55 = 0.00;
					VU2028Value_EverCash55 = ECAR55SA * (VU2028_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VU2030Value_EverCash55 = ECAR55SA * (VU2030_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VU2035Value_EverCash55 = ECAR55SA * (VU2035_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VURetValue_EverCash55 = ECAR55SA * (VURet_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VUDanaValue_EverCash55 = ECAR55SA * (VUDana_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VUCashValue_EverCash55 = 0.00;
                    VUVentureGrowthValue_EverCash55 = ECAR55SA * (VUVentureGrowth_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureBlueChipValue_EverCash55 = ECAR55SA * (VUVentureBlueChip_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureDanaValue_EverCash55 = ECAR55SA * (VUVentureDana_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureManagedValue_EverCash55 = ECAR55SA * (VUVentureManaged_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureIncomeValue_EverCash55 = ECAR55SA * (VUVentureIncome_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture6666Value_EverCash55 = ECAR55SA * (VUVenture6666_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture7777Value_EverCash55 = ECAR55SA * (VUVenture7777_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture8888Value_EverCash55 = ECAR55SA * (VUVenture8888_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture9999Value_EverCash55 = ECAR55SA * (VUVenture9999_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    
					PrevVU2023Value_EverCash55 = 0.00;
					PrevVU2025Value_EverCash55 = ECAR55SA * (PrevVU2025_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
					PrevVU2028Value_EverCash55 = ECAR55SA * (PrevVU2028_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
					PrevVU2030Value_EverCash55 = ECAR55SA * (PrevVU2030_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
					PrevVU2035Value_EverCash55 = ECAR55SA * (PrevVU2035_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
					PrevVURetValue_EverCash55 = ECAR55SA * (PrevVURet_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
					PrevVUDanaValue_EverCash55 = ECAR55SA * (PrevVUDana_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVentureGrowthValue_EverCash55 = ECAR55SA * (PrevVUVentureGrowth_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVentureBlueChipValue_EverCash55 = ECAR55SA * (PrevVUVentureBlueChip_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVentureDanaValue_EverCash55 = ECAR55SA * (PrevVUVentureDana_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVentureManagedValue_EverCash55 = ECAR55SA * (PrevVUVentureManaged_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVentureIncomeValue_EverCash55 = ECAR55SA * (PrevVUVentureIncome_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVenture6666Value_EverCash55 = ECAR55SA * (PrevVUVenture6666_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVenture7777Value_EverCash55 = ECAR55SA * (PrevVUVenture7777_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVenture8888Value_EverCash55 = ECAR55SA * (PrevVUVenture8888_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVenture9999Value_EverCash55 = ECAR55SA * (PrevVUVenture9999_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
				}
			}
			else if (aaPolicyYear >= FundTerm2028 && aaPolicyYear <= FundTermPrev2030) {
				if (VUCash_FundAllo_Percen == 100) {
					VU2023Value_EverCash55 = 0.00;
					VU2025Value_EverCash55 = 0.00;
					VU2028Value_EverCash55 = 0.00;
					VU2030Value_EverCash55 = 0.00;
					VU2035Value_EverCash55 = 0.00;
					VURetValue_EverCash55 = 0.00;
					VUDanaValue_EverCash55 = 0.00;
					VUCashValue_EverCash55 = ECAR55SA;
                    VUVentureGrowthValue_EverCash55 = 0.00;
                    VUVentureBlueChipValue_EverCash55 = 0.00;
                    VUVentureDanaValue_EverCash55 = 0.00;
                    VUVentureManagedValue_EverCash55 = 0.00;
                    VUVentureIncomeValue_EverCash55 = 0.00;
                    VUVenture6666Value_EverCash55 = 0.00;
                    VUVenture7777Value_EverCash55 = 0.00;
                    VUVenture8888Value_EverCash55 = 0.00;
                    VUVenture9999Value_EverCash55 = 0.00;
                    
					if (PrevVUCash_FundAllo_Percen == 100) {
						PrevVUCashValue_EverCash55 = ECAR55SA;
					}
					else{
						PrevVUCashValue_EverCash55 = 0.00;
					}
				}
				else{
					VU2023Value_EverCash55 = 0.00;
					VU2025Value_EverCash55 = 0.00;
					VU2028Value_EverCash55 = 0.00;
					VU2030Value_EverCash55 = ECAR55SA * (VU2030_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VU2035Value_EverCash55 = ECAR55SA * (VU2035_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VURetValue_EverCash55 = ECAR55SA * (VURet_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VUDanaValue_EverCash55 = ECAR55SA * (VUDana_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VUCashValue_EverCash55 = 0.00;
                    VUVentureGrowthValue_EverCash55 = ECAR55SA * (VUVentureGrowth_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureBlueChipValue_EverCash55 = ECAR55SA * (VUVentureBlueChip_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureDanaValue_EverCash55 = ECAR55SA * (VUVentureDana_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureManagedValue_EverCash55 = ECAR55SA * (VUVentureManaged_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureIncomeValue_EverCash55 = ECAR55SA * (VUVentureIncome_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture6666Value_EverCash55 = ECAR55SA * (VUVenture6666_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture7777Value_EverCash55 = ECAR55SA * (VUVenture7777_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture8888Value_EverCash55 = ECAR55SA * (VUVenture8888_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture9999Value_EverCash55 = ECAR55SA * (VUVenture9999_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    
                    
					PrevVU2023Value_EverCash55 = 0.00;
					PrevVU2025Value_EverCash55 = 0.00;
					PrevVU2028Value_EverCash55 = ECAR55SA * (PrevVU2028_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
					PrevVU2030Value_EverCash55 = ECAR55SA * (PrevVU2030_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
					PrevVU2035Value_EverCash55 = ECAR55SA * (PrevVU2035_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
					PrevVURetValue_EverCash55 = ECAR55SA * (PrevVURet_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
					PrevVUDanaValue_EverCash55 = ECAR55SA * (PrevVUDana_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVentureGrowthValue_EverCash55 = ECAR55SA * (PrevVUVentureGrowth_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVentureBlueChipValue_EverCash55 = ECAR55SA * (PrevVUVentureBlueChip_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVentureDanaValue_EverCash55 = ECAR55SA * (PrevVUVentureDana_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVentureManagedValue_EverCash55 = ECAR55SA * (PrevVUVentureManaged_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVentureIncomeValue_EverCash55 = ECAR55SA * (PrevVUVentureIncome_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVenture6666Value_EverCash55 = ECAR55SA * (PrevVUVenture6666_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVenture7777Value_EverCash55 = ECAR55SA * (PrevVUVenture7777_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVenture8888Value_EverCash55 = ECAR55SA * (PrevVUVenture8888_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVenture9999Value_EverCash55 = ECAR55SA * (PrevVUVenture9999_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    
				}
			}
			else if (aaPolicyYear >= FundTerm2030 && aaPolicyYear <= FundTermPrev2035) {
				if (VUCash_FundAllo_Percen == 100) {
					VU2023Value_EverCash55 = 0.00;
					VU2025Value_EverCash55 = 0.00;
					VU2028Value_EverCash55 = 0.00;
					VU2030Value_EverCash55 = 0.00;
					VU2035Value_EverCash55 = 0.00;
					VURetValue_EverCash55 = 0.00;
					VUDanaValue_EverCash55 = 0.00;
					VUCashValue_EverCash55 = ECAR55SA;
                    VUVentureGrowthValue_EverCash55 = 0.00;
                    VUVentureBlueChipValue_EverCash55 = 0.00;
                    VUVentureDanaValue_EverCash55 = 0.00;
                    VUVentureManagedValue_EverCash55 = 0.00;
                    VUVentureIncomeValue_EverCash55 = 0.00;
                    VUVenture6666Value_EverCash55 = 0.00;
                    VUVenture7777Value_EverCash55 = 0.00;
                    VUVenture8888Value_EverCash55 = 0.00;
                    VUVenture9999Value_EverCash55 = 0.00;
                    
					if (PrevVUCash_FundAllo_Percen == 100) {
						PrevVUCashValue_EverCash55 = ECAR55SA;
					}
					else{
						PrevVUCashValue_EverCash55 = 0.00;
					}
				}
				else{
					VU2023Value_EverCash55 = 0.00;
					VU2025Value_EverCash55 = 0.00;
					VU2028Value_EverCash55 = 0.00;
					VU2030Value_EverCash55 = 0.00;
					VU2035Value_EverCash55 = ECAR55SA * (VU2035_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VURetValue_EverCash55 = ECAR55SA * (VURet_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VUDanaValue_EverCash55 = ECAR55SA * (VUDana_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VUCashValue_EverCash55 = 0.00;
                    VUVentureGrowthValue_EverCash55 = ECAR55SA * (VUVentureGrowth_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureBlueChipValue_EverCash55 = ECAR55SA * (VUVentureBlueChip_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureDanaValue_EverCash55 = ECAR55SA * (VUVentureDana_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureManagedValue_EverCash55 = ECAR55SA * (VUVentureManaged_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureIncomeValue_EverCash55 = ECAR55SA * (VUVentureIncome_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture6666Value_EverCash55 = ECAR55SA * (VUVenture6666_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture7777Value_EverCash55 = ECAR55SA * (VUVenture7777_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture8888Value_EverCash55 = ECAR55SA * (VUVenture8888_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture9999Value_EverCash55 = ECAR55SA * (VUVenture9999_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    
					PrevVU2023Value_EverCash55 = 0.00;
					PrevVU2025Value_EverCash55 = 0.00;
					PrevVU2028Value_EverCash55 = 0.00;
					PrevVU2030Value_EverCash55 = ECAR55SA * (PrevVU2030_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
					PrevVU2035Value_EverCash55 = ECAR55SA * (PrevVU2035_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
					PrevVURetValue_EverCash55 = ECAR55SA * (PrevVURet_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
					PrevVUDanaValue_EverCash55 = ECAR55SA * (PrevVUDana_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVentureGrowthValue_EverCash55 = ECAR55SA * (PrevVUVentureGrowth_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVentureBlueChipValue_EverCash55 = ECAR55SA * (PrevVUVentureBlueChip_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVentureDanaValue_EverCash55 = ECAR55SA * (PrevVUVentureDana_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVentureManagedValue_EverCash55 = ECAR55SA * (PrevVUVentureManaged_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVentureIncomeValue_EverCash55 = ECAR55SA * (PrevVUVentureIncome_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVenture6666Value_EverCash55 = ECAR55SA * (PrevVUVenture6666_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVenture7777Value_EverCash55 = ECAR55SA * (PrevVUVenture7777_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVenture8888Value_EverCash55 = ECAR55SA * (PrevVUVenture8888_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVenture9999Value_EverCash55 = ECAR55SA * (PrevVUVenture9999_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    
				}
			}
			else if (aaPolicyYear == FundTermPrev2035) {
				if (VUCash_FundAllo_Percen == 100) {
					VU2023Value_EverCash55 = 0.00;
					VU2025Value_EverCash55 = 0.00;
					VU2028Value_EverCash55 = 0.00;
					VU2030Value_EverCash55 = 0.00;
					VU2035Value_EverCash55 = 0.00;
					VURetValue_EverCash55 = 0.00;
					VUDanaValue_EverCash55 = 0.00;
					VUCashValue_EverCash55 = ECAR55SA;
                    VUVentureGrowthValue_EverCash55 = 0.00;
                    VUVentureBlueChipValue_EverCash55 = 0.00;
                    VUVentureDanaValue_EverCash55 = 0.00;
                    VUVentureManagedValue_EverCash55 = 0.00;
                    VUVentureIncomeValue_EverCash55 = 0.00;
                    VUVenture6666Value_EverCash55 = 0.00;
                    VUVenture7777Value_EverCash55 = 0.00;
                    VUVenture8888Value_EverCash55 = 0.00;
                    VUVenture9999Value_EverCash55 = 0.00;
                    
					if (PrevVUCash_FundAllo_Percen == 100) {
						PrevVUCashValue_EverCash55 = ECAR55SA;
					}
					else{
						PrevVUCashValue_EverCash55 = 0.00;
					}
				}
				else{
					VU2023Value_EverCash55 = 0.00;
					VU2025Value_EverCash55 = 0.00;
					VU2028Value_EverCash55 = 0.00;
					VU2030Value_EverCash55 = 0.00;
					VU2035Value_EverCash55 = 0.00;
					VURetValue_EverCash55 = ECAR55SA * (VURet_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VUDanaValue_EverCash55 = ECAR55SA * (VUDana_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VUCashValue_EverCash55 = 0.00;
                    VUVentureGrowthValue_EverCash55 = ECAR55SA * (VUVentureGrowth_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureBlueChipValue_EverCash55 = ECAR55SA * (VUVentureBlueChip_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureDanaValue_EverCash55 = ECAR55SA * (VUVentureDana_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureManagedValue_EverCash55 = ECAR55SA * (VUVentureManaged_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureIncomeValue_EverCash55 = ECAR55SA * (VUVentureIncome_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture6666Value_EverCash55 = ECAR55SA * (VUVenture6666_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture7777Value_EverCash55 = ECAR55SA * (VUVenture7777_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture8888Value_EverCash55 = ECAR55SA * (VUVenture8888_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture9999Value_EverCash55 = ECAR55SA * (VUVenture9999_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					
					PrevVU2023Value_EverCash55 = 0.00;
					PrevVU2025Value_EverCash55 = 0.00;
					PrevVU2028Value_EverCash55 = 0.00;
					PrevVU2030Value_EverCash55 = 0.00;
					//PrevVU2035Value_EverCash55 = ECAR55SA * (PrevVU2035_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
					PrevVU2035Value_EverCash55 = 0.00;
					PrevVURetValue_EverCash55 = ECAR55SA * (PrevVURet_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
					PrevVUDanaValue_EverCash55 = ECAR55SA * (PrevVUDana_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    
                    PrevVUVentureGrowthValue_EverCash55 = ECAR55SA * (PrevVUVentureGrowth_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVentureBlueChipValue_EverCash55 = ECAR55SA * (PrevVUVentureBlueChip_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVentureDanaValue_EverCash55 = ECAR55SA * (PrevVUVentureDana_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVentureManagedValue_EverCash55 = ECAR55SA * (PrevVUVentureManaged_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVentureIncomeValue_EverCash55 = ECAR55SA * (PrevVUVentureIncome_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVenture6666Value_EverCash55 = ECAR55SA * (PrevVUVenture6666_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVenture7777Value_EverCash55 = ECAR55SA * (PrevVUVenture7777_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVenture8888Value_EverCash55 = ECAR55SA * (PrevVUVenture8888_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVenture9999Value_EverCash55 = ECAR55SA * (PrevVUVenture9999_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
				}
			}
			else if (aaPolicyYear > FundTermPrev2035) {
				if (VUCash_FundAllo_Percen == 100) {
					VU2023Value_EverCash55 = 0.00;
					VU2025Value_EverCash55 = 0.00;
					VU2028Value_EverCash55 = 0.00;
					VU2030Value_EverCash55 = 0.00;
					VU2035Value_EverCash55 = 0.00;
					VURetValue_EverCash55 = 0.00;
					VUDanaValue_EverCash55 = 0.00;
					VUCashValue_EverCash55 = ECAR55SA;
                    VUVentureGrowthValue_EverCash55 = 0.00;
                    VUVentureBlueChipValue_EverCash55 = 0.00;
                    VUVentureDanaValue_EverCash55 = 0.00;
                    VUVentureManagedValue_EverCash55 = 0.00;
                    VUVentureIncomeValue_EverCash55 = 0.00;
                    VUVenture6666Value_EverCash55 = 0.00;
                    VUVenture7777Value_EverCash55 = 0.00;
                    VUVenture8888Value_EverCash55 = 0.00;
                    VUVenture9999Value_EverCash55 = 0.00;
                    
					if (PrevVUCash_FundAllo_Percen == 100) {
						PrevVUCashValue_EverCash55 = ECAR55SA;
					}
					else{
						PrevVUCashValue_EverCash55 = 0.00;
					}
                    
					if (aaPolicyYear > FundTerm2035) {
						PrevVU2025Value_EverCash55 = 0.00;
						PrevVU2028Value_EverCash55 = 0.00;
						PrevVU2030Value_EverCash55 = 0.00;
						PrevVU2035Value_EverCash55 = 0.00;
						PrevVURetValue_EverCash55 = 0.00;
						PrevVUDanaValue_EverCash55 = 0.00;
                        PrevVUVentureGrowthValue_EverCash55 = 0.00;
                        PrevVUVentureBlueChipValue_EverCash55 = 0.00;
                        PrevVUVentureDanaValue_EverCash55 = 0.00;
                        PrevVUVentureManagedValue_EverCash55 = 0.00;
                        PrevVUVentureIncomeValue_EverCash55 = 0.00;
                        PrevVUVenture6666Value_EverCash55 = 0.00;
                        PrevVUVenture7777Value_EverCash55 = 0.00;
                        PrevVUVenture8888Value_EverCash55 = 0.00;
                        PrevVUVenture9999Value_EverCash55 = 0.00;
					}
					
				}
				else{
					VU2023Value_EverCash55 = 0.00;
					VU2025Value_EverCash55 = 0.00;
					VU2028Value_EverCash55 = 0.00;
					VU2030Value_EverCash55 = 0.00;
					VU2035Value_EverCash55 = 0.00;
					VURetValue_EverCash55 = ECAR55SA * (VURet_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VUDanaValue_EverCash55 = ECAR55SA * (VUDana_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VUCashValue_EverCash55 = 0.00;
                    VUVentureGrowthValue_EverCash55 = ECAR55SA * (VUVentureGrowth_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureBlueChipValue_EverCash55 = ECAR55SA * (VUVentureBlueChip_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureDanaValue_EverCash55 = ECAR55SA * (VUVentureDana_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureManagedValue_EverCash55 = ECAR55SA * (VUVentureManaged_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureIncomeValue_EverCash55 = ECAR55SA * (VUVentureIncome_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture6666Value_EverCash55 = ECAR55SA * (VUVenture6666_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture7777Value_EverCash55 = ECAR55SA * (VUVenture7777_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture8888Value_EverCash55 = ECAR55SA * (VUVenture8888_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture9999Value_EverCash55 = ECAR55SA * (VUVenture9999_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    
					PrevVU2023Value_EverCash55 = 0.00;
					PrevVU2025Value_EverCash55 = 0.00;
					PrevVU2028Value_EverCash55 = 0.00;
					PrevVU2030Value_EverCash55 = 0.00;
					PrevVU2035Value_EverCash55 = ECAR55SA * (PrevVU2035_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
					PrevVURetValue_EverCash55 = ECAR55SA * (PrevVURet_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
					PrevVUDanaValue_EverCash55 = ECAR55SA * (PrevVUDana_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVentureGrowthValue_EverCash55 = ECAR55SA * (PrevVUVentureGrowth_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVentureBlueChipValue_EverCash55 = ECAR55SA * (PrevVUVentureBlueChip_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVentureDanaValue_EverCash55 = ECAR55SA * (PrevVUVentureDana_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVentureManagedValue_EverCash55 = ECAR55SA * (PrevVUVentureManaged_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVentureIncomeValue_EverCash55 = ECAR55SA * (PrevVUVentureIncome_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVenture6666Value_EverCash55 = ECAR55SA * (PrevVUVenture6666_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVenture7777Value_EverCash55 = ECAR55SA * (PrevVUVenture7777_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVenture8888Value_EverCash55 = ECAR55SA * (PrevVUVenture8888_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVenture9999Value_EverCash55 = ECAR55SA * (PrevVUVenture9999_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
				}
			}
			else{
				if (VUCash_FundAllo_Percen == 100) {
					VU2023Value_EverCash55 = 0.00;
					VU2025Value_EverCash55 = 0.00;
					VU2028Value_EverCash55 = 0.00;
					VU2030Value_EverCash55 = 0.00;
					VU2035Value_EverCash55 = 0.00;
					VURetValue_EverCash55 = 0.00;
					VUDanaValue_EverCash55 = 0.00;
					VUCashValue_EverCash55 = ECAR55SA;
                    VUVentureGrowthValue_EverCash55 = 0.00;
                    VUVentureBlueChipValue_EverCash55 = 0.00;
                    VUVentureDanaValue_EverCash55 = 0.00;
                    VUVentureManagedValue_EverCash55 = 0.00;
                    VUVentureIncomeValue_EverCash55 = 0.00;
                    VUVenture6666Value_EverCash55 = 0.00;
                    VUVenture7777Value_EverCash55 = 0.00;
                    VUVenture8888Value_EverCash55 = 0.00;
                    VUVenture9999Value_EverCash55 = 0.00;
                    
					if (PrevVUCash_FundAllo_Percen == 100) {
						PrevVUCashValue_EverCash55 = ECAR55SA;
					}
					else{
						PrevVUCashValue_EverCash55 = 0.00;
					}
				}
				else{
					
					VU2023Value_EverCash55 = ECAR55SA * (VU2023_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VU2025Value_EverCash55 = ECAR55SA * (VU2025_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VU2028Value_EverCash55 = ECAR55SA * (VU2028_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VU2030Value_EverCash55 = ECAR55SA * (VU2030_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VU2035Value_EverCash55 = ECAR55SA * (VU2035_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VURetValue_EverCash55 = ECAR55SA * (VURet_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VUDanaValue_EverCash55 = ECAR55SA * (VUDana_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VUCashValue_EverCash55 = 0.00;
                    VUVentureGrowthValue_EverCash55 = ECAR55SA * (VUVentureGrowth_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureBlueChipValue_EverCash55 = ECAR55SA * (VUVentureBlueChip_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureDanaValue_EverCash55 = ECAR55SA * (VUVentureDana_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureManagedValue_EverCash55 = ECAR55SA * (VUVentureManaged_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureIncomeValue_EverCash55 = ECAR55SA * (VUVentureIncome_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture6666Value_EverCash55 = ECAR55SA * (VUVenture6666_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture7777Value_EverCash55 = ECAR55SA * (VUVenture7777_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture8888Value_EverCash55 = ECAR55SA * (VUVenture8888_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture9999Value_EverCash55 = ECAR55SA * (VUVenture9999_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    
                    
					PrevVU2023Value_EverCash55 = ECAR55SA * (VU2023_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
					PrevVU2025Value_EverCash55 = ECAR55SA * (PrevVU2025_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
					PrevVU2028Value_EverCash55 = ECAR55SA * (PrevVU2028_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
					PrevVU2030Value_EverCash55 = ECAR55SA * (PrevVU2030_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
					PrevVU2035Value_EverCash55 = ECAR55SA * (PrevVU2035_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
					PrevVURetValue_EverCash55 = ECAR55SA * (PrevVURet_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
					PrevVUDanaValue_EverCash55 = ECAR55SA * (PrevVUDana_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVentureGrowthValue_EverCash55 = ECAR55SA * (PrevVUVentureGrowth_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVentureBlueChipValue_EverCash55 = ECAR55SA * (PrevVUVentureBlueChip_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVentureDanaValue_EverCash55 = ECAR55SA * (PrevVUVentureDana_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVentureManagedValue_EverCash55 = ECAR55SA * (PrevVUVentureManaged_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVentureIncomeValue_EverCash55 = ECAR55SA * (PrevVUVentureIncome_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVenture6666Value_EverCash55 = ECAR55SA * (PrevVUVenture6666_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVenture7777Value_EverCash55 = ECAR55SA * (PrevVUVenture7777_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVenture8888Value_EverCash55 = ECAR55SA * (PrevVUVenture8888_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVenture9999Value_EverCash55 = ECAR55SA * (PrevVUVenture9999_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
				}
				
			}
			
		}
		else{
			VU2023Value_EverCash55 = 0.00;
			VU2025Value_EverCash55 = 0.00;
			VU2028Value_EverCash55 = 0.00;
			VU2030Value_EverCash55 = 0.00;
			VU2035Value_EverCash55 = 0.00;
			VURetValue_EverCash55 = 0.00;
			VUDanaValue_EverCash55 = 0.00;
			VUCashValue_EverCash55 = 0.00;
            VUVentureGrowthValue_EverCash55 = 0.00;
            VUVentureBlueChipValue_EverCash55 = 0.00;
            VUVentureDanaValue_EverCash55 = 0.00;
            VUVentureManagedValue_EverCash55 = 0.00;
            VUVentureIncomeValue_EverCash55 = 0.00;
            VUVenture6666Value_EverCash55 = 0.00;
            VUVenture7777Value_EverCash55 = 0.00;
            VUVenture8888Value_EverCash55 = 0.00;
            VUVenture9999Value_EverCash55 = 0.00;
            
		}
	}
	
	
}

-(void)ReturnMonthEverCash55 :(int)aaPolicyYear  andMonth:(int)aaMonth {
	double ECAR55SA = [ECAR55SumAssured doubleValue ];
	
	if(ECAR55Exist == FALSE){
		VU2023Value_EverCash55 = 0.00;
		VU2025Value_EverCash55 = 0.00;
		VU2028Value_EverCash55 = 0.00;
		VU2030Value_EverCash55 = 0.00;
		VU2035Value_EverCash55 = 0.00;
		VURetValue_EverCash55 = 0.00;
		VUDanaValue_EverCash55 = 0.00;
		VUCashValue_EverCash55 = 0.00;
        VUVentureGrowthValue_EverCash55 = 0.00;
        VUVentureBlueChipValue_EverCash55 = 0.00;
        VUVentureDanaValue_EverCash55 = 0.00;
        VUVentureManagedValue_EverCash55 = 0.00;
        VUVentureIncomeValue_EverCash55 = 0.00;
        VUVenture6666Value_EverCash55 = 0.00;
        VUVenture7777Value_EverCash55 = 0.00;
        VUVenture8888Value_EverCash55 = 0.00;
        VUVenture9999Value_EverCash55 = 0.00;
        
	}
	else{
		if (Age + aaPolicyYear >= 55 && aaPolicyYear <= [ECAR55RiderTerm intValue] && [ECAR55ReinvestGYI isEqualToString:@"Yes"] ) {
			VUCash_FundAllo_Percen = [self ReturnVUCashFac:aaPolicyYear andMonth:aaMonth] * 100;
			VU2025_FundAllo_Percen = [self ReturnVU2025Fac:aaPolicyYear andMonth:aaMonth] * 100;
			VU2028_FundAllo_Percen = [self ReturnVU2028Fac:aaPolicyYear andMonth:aaMonth] * 100;
			VU2030_FundAllo_Percen = [self ReturnVU2030Fac:aaPolicyYear andMonth:aaMonth] * 100;
			VU2035_FundAllo_Percen = [self ReturnVU2035Fac:aaPolicyYear andMonth:aaMonth] * 100;
			VURet_FundAllo_Percen = [self ReturnVURetFac:aaPolicyYear andMonth:aaMonth] * 100;
			VUDana_FundAllo_Percen = [self ReturnVUDanaFac:aaPolicyYear andMonth:aaMonth] * 100;
            VUVentureGrowth_FundAllo_Percen = [self ReturnVUVentureGrowthFac:aaPolicyYear andMonth:aaMonth] * 100;
            VUVentureBlueChip_FundAllo_Percen = [self ReturnVUVentureBlueChipFac:aaPolicyYear andMonth:aaMonth] * 100;
            VUVentureDana_FundAllo_Percen = [self ReturnVUVentureDanaFac:aaPolicyYear andMonth:aaMonth] * 100;
            VUVentureManaged_FundAllo_Percen = [self ReturnVUVentureManagedFac:aaPolicyYear andMonth:aaMonth] * 100;
            VUVentureIncome_FundAllo_Percen = [self ReturnVUVentureIncomeFac:aaPolicyYear andMonth:aaMonth] * 100;
            VUVenture6666_FundAllo_Percen = [self ReturnVUVenture6666Fac:aaPolicyYear andMonth:aaMonth] * 100;
            VUVenture7777_FundAllo_Percen = [self ReturnVUVenture7777Fac:aaPolicyYear andMonth:aaMonth] * 100;
            VUVenture8888_FundAllo_Percen = [self ReturnVUVenture8888Fac:aaPolicyYear andMonth:aaMonth] * 100;
            VUVenture9999_FundAllo_Percen = [self ReturnVUVenture9999Fac:aaPolicyYear andMonth:aaMonth] * 100;
            
			if ([strBumpMode isEqualToString:@"S" ]) {
				ECAR55SA = ECAR55SA / 0.5;
			}
			else if ([strBumpMode isEqualToString:@"Q" ]){
				ECAR55SA = ECAR55SA / 0.25;
			}
			else if ([strBumpMode isEqualToString:@"M" ]){
				ECAR55SA = ECAR55SA / 0.0833333;
			}
			else{
				ECAR55SA = ECAR55SA / 1.00;
			}
			
			if (aaPolicyYear >= FundTerm2023 && aaPolicyYear <= FundTermPrev2025) {
				if (VUCash_FundAllo_Percen == 100) {
					VU2023Value_EverCash55 = 0.00;
					VU2025Value_EverCash55 = 0.00;
					VU2028Value_EverCash55 = 0.00;
					VU2030Value_EverCash55 = 0.00;
					VU2035Value_EverCash55 = 0.00;
					VURetValue_EverCash55 = 0.00;
					VUDanaValue_EverCash55 = 0.00;
					VUCashValue_EverCash55 = ECAR55SA;
                    VUVentureGrowthValue_EverCash55 = 0.00;
                    VUVentureBlueChipValue_EverCash55 = 0.00;
                    VUVentureDanaValue_EverCash55 = 0.00;
                    VUVentureManagedValue_EverCash55 = 0.00;
                    VUVentureIncomeValue_EverCash55 = 0.00;
                    VUVenture6666Value_EverCash55 = 0.00;
                    VUVenture7777Value_EverCash55 = 0.00;
                    VUVenture8888Value_EverCash55 = 0.00;
                    VUVenture9999Value_EverCash55 = 0.00;
                    
				}
				else{
					VU2023Value_EverCash55 = ECAR55SA * (VU2023_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VU2025Value_EverCash55 = ECAR55SA * (VU2025_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VU2028Value_EverCash55 = ECAR55SA * (VU2028_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VU2030Value_EverCash55 = ECAR55SA * (VU2030_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VU2035Value_EverCash55 = ECAR55SA * (VU2035_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VURetValue_EverCash55 = ECAR55SA * (VURet_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VUDanaValue_EverCash55 = ECAR55SA * (VUDana_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VUCashValue_EverCash55 = 0.00;
                    VUVentureGrowthValue_EverCash55 = ECAR55SA * (VUVentureGrowth_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureBlueChipValue_EverCash55 = ECAR55SA * (VUVentureBlueChip_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureDanaValue_EverCash55 = ECAR55SA * (VUVentureDana_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureManagedValue_EverCash55 = ECAR55SA * (VUVentureManaged_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureIncomeValue_EverCash55 = ECAR55SA * (VUVentureIncome_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture6666Value_EverCash55 = ECAR55SA * (VUVenture6666_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture7777Value_EverCash55 = ECAR55SA * (VUVenture7777_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture8888Value_EverCash55 = ECAR55SA * (VUVenture8888_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture9999Value_EverCash55 = ECAR55SA * (VUVenture9999_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
				}
			}
			else if (aaPolicyYear >= FundTerm2025 && aaPolicyYear <= FundTermPrev2028) {
				if (VUCash_FundAllo_Percen == 100) {
					VU2023Value_EverCash55 = 0.00;
					VU2025Value_EverCash55 = 0.00;
					VU2028Value_EverCash55 = 0.00;
					VU2030Value_EverCash55 = 0.00;
					VU2035Value_EverCash55 = 0.00;
					VURetValue_EverCash55 = 0.00;
					VUDanaValue_EverCash55 = 0.00;
					VUCashValue_EverCash55 = ECAR55SA;
                    VUVentureGrowthValue_EverCash55 = 0.00;
                    VUVentureBlueChipValue_EverCash55 = 0.00;
                    VUVentureDanaValue_EverCash55 = 0.00;
                    VUVentureManagedValue_EverCash55 = 0.00;
                    VUVentureIncomeValue_EverCash55 = 0.00;
                    VUVenture6666Value_EverCash55 = 0.00;
                    VUVenture7777Value_EverCash55 = 0.00;
                    VUVenture8888Value_EverCash55 = 0.00;
                    VUVenture9999Value_EverCash55 = 0.00;
                    
				}
				else{
					VU2023Value_EverCash55 = 0.00;
					VU2025Value_EverCash55 = ECAR55SA * (VU2025_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VU2028Value_EverCash55 = ECAR55SA * (VU2028_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VU2030Value_EverCash55 = ECAR55SA * (VU2030_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VU2035Value_EverCash55 = ECAR55SA * (VU2035_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VURetValue_EverCash55 = ECAR55SA * (VURet_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VUDanaValue_EverCash55 = ECAR55SA * (VUDana_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VUCashValue_EverCash55 = 0.00;
                    VUVentureGrowthValue_EverCash55 = ECAR55SA * (VUVentureGrowth_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureBlueChipValue_EverCash55 = ECAR55SA * (VUVentureBlueChip_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureDanaValue_EverCash55 = ECAR55SA * (VUVentureDana_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureManagedValue_EverCash55 = ECAR55SA * (VUVentureManaged_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureIncomeValue_EverCash55 = ECAR55SA * (VUVentureIncome_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture6666Value_EverCash55 = ECAR55SA * (VUVenture6666_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture7777Value_EverCash55 = ECAR55SA * (VUVenture7777_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture8888Value_EverCash55 = ECAR55SA * (VUVenture8888_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture9999Value_EverCash55 = ECAR55SA * (VUVenture9999_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
				}
			}
			else if (aaPolicyYear >= FundTerm2028 && aaPolicyYear <= FundTermPrev2030) {
				if (VUCash_FundAllo_Percen == 100) {
					VU2023Value_EverCash55 = 0.00;
					VU2025Value_EverCash55 = 0.00;
					VU2028Value_EverCash55 = 0.00;
					VU2030Value_EverCash55 = 0.00;
					VU2035Value_EverCash55 = 0.00;
					VURetValue_EverCash55 = 0.00;
					VUDanaValue_EverCash55 = 0.00;
					VUCashValue_EverCash55 = ECAR55SA;
                    VUVentureGrowthValue_EverCash55 = 0.00;
                    VUVentureBlueChipValue_EverCash55 = 0.00;
                    VUVentureDanaValue_EverCash55 = 0.00;
                    VUVentureManagedValue_EverCash55 = 0.00;
                    VUVentureIncomeValue_EverCash55 = 0.00;
                    VUVenture6666Value_EverCash55 = 0.00;
                    VUVenture7777Value_EverCash55 = 0.00;
                    VUVenture8888Value_EverCash55 = 0.00;
                    VUVenture9999Value_EverCash55 = 0.00;
                    
				}
				else{
					VU2023Value_EverCash55 = 0.00;
					VU2025Value_EverCash55 = 0.00;
					VU2028Value_EverCash55 = ECAR55SA * (VU2028_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VU2030Value_EverCash55 = ECAR55SA * (VU2030_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VU2035Value_EverCash55 = ECAR55SA * (VU2035_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VURetValue_EverCash55 = ECAR55SA * (VURet_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VUDanaValue_EverCash55 = ECAR55SA * (VUDana_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VUCashValue_EverCash55 = 0.00;
                    VUVentureGrowthValue_EverCash55 = ECAR55SA * (VUVentureGrowth_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureBlueChipValue_EverCash55 = ECAR55SA * (VUVentureBlueChip_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureDanaValue_EverCash55 = ECAR55SA * (VUVentureDana_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureManagedValue_EverCash55 = ECAR55SA * (VUVentureManaged_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureIncomeValue_EverCash55 = ECAR55SA * (VUVentureIncome_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture6666Value_EverCash55 = ECAR55SA * (VUVenture6666_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture7777Value_EverCash55 = ECAR55SA * (VUVenture7777_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture8888Value_EverCash55 = ECAR55SA * (VUVenture8888_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture9999Value_EverCash55 = ECAR55SA * (VUVenture9999_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
				}
			}
			else if (aaPolicyYear >= FundTerm2030 && aaPolicyYear <= FundTermPrev2035) {
				if (VUCash_FundAllo_Percen == 100) {
					VU2023Value_EverCash55 = 0.00;
					VU2025Value_EverCash55 = 0.00;
					VU2028Value_EverCash55 = 0.00;
					VU2030Value_EverCash55 = 0.00;
					VU2035Value_EverCash55 = 0.00;
					VURetValue_EverCash55 = 0.00;
					VUDanaValue_EverCash55 = 0.00;
					VUCashValue_EverCash55 = ECAR55SA;
                    VUVentureGrowthValue_EverCash55 = 0.00;
                    VUVentureBlueChipValue_EverCash55 = 0.00;
                    VUVentureDanaValue_EverCash55 = 0.00;
                    VUVentureManagedValue_EverCash55 = 0.00;
                    VUVentureIncomeValue_EverCash55 = 0.00;
                    VUVenture6666Value_EverCash55 = 0.00;
                    VUVenture7777Value_EverCash55 = 0.00;
                    VUVenture8888Value_EverCash55 = 0.00;
                    VUVenture9999Value_EverCash55 = 0.00;
                    
				}
				else{
					VU2023Value_EverCash55 = 0.00;
					VU2025Value_EverCash55 = 0.00;
					VU2028Value_EverCash55 = 0.00;
					VU2030Value_EverCash55 = ECAR55SA * (VU2030_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VU2035Value_EverCash55 = ECAR55SA * (VU2035_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VURetValue_EverCash55 = ECAR55SA * (VURet_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VUDanaValue_EverCash55 = ECAR55SA * (VUDana_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VUCashValue_EverCash55 = 0.00;
                    VUVentureGrowthValue_EverCash55 = ECAR55SA * (VUVentureGrowth_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureBlueChipValue_EverCash55 = ECAR55SA * (VUVentureBlueChip_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureDanaValue_EverCash55 = ECAR55SA * (VUVentureDana_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureManagedValue_EverCash55 = ECAR55SA * (VUVentureManaged_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureIncomeValue_EverCash55 = ECAR55SA * (VUVentureIncome_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture6666Value_EverCash55 = ECAR55SA * (VUVenture6666_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture7777Value_EverCash55 = ECAR55SA * (VUVenture7777_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture8888Value_EverCash55 = ECAR55SA * (VUVenture8888_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture9999Value_EverCash55 = ECAR55SA * (VUVenture9999_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
				}
			}
			else if (aaPolicyYear == FundTermPrev2035) {
				if (VUCash_FundAllo_Percen == 100) {
					VU2023Value_EverCash55 = 0.00;
					VU2025Value_EverCash55 = 0.00;
					VU2028Value_EverCash55 = 0.00;
					VU2030Value_EverCash55 = 0.00;
					VU2035Value_EverCash55 = 0.00;
					VURetValue_EverCash55 = 0.00;
					VUDanaValue_EverCash55 = 0.00;
					VUCashValue_EverCash55 = ECAR55SA;
                    VUVentureGrowthValue_EverCash55 = 0.00;
                    VUVentureBlueChipValue_EverCash55 = 0.00;
                    VUVentureDanaValue_EverCash55 = 0.00;
                    VUVentureManagedValue_EverCash55 = 0.00;
                    VUVentureIncomeValue_EverCash55 = 0.00;
                    VUVenture6666Value_EverCash55 = 0.00;
                    VUVenture7777Value_EverCash55 = 0.00;
                    VUVenture8888Value_EverCash55 = 0.00;
                    VUVenture9999Value_EverCash55 = 0.00;
                    
				}
				else{
					VU2023Value_EverCash55 = 0.00;
					VU2025Value_EverCash55 = 0.00;
					VU2028Value_EverCash55 = 0.00;
					VU2030Value_EverCash55 = 0.00;
					VU2035Value_EverCash55 = 0.00;
					VURetValue_EverCash55 = ECAR55SA * (VURet_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VUDanaValue_EverCash55 = ECAR55SA * (VUDana_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VUCashValue_EverCash55 = 0.00;
                    VUVentureGrowthValue_EverCash55 = ECAR55SA * (VUVentureGrowth_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureBlueChipValue_EverCash55 = ECAR55SA * (VUVentureBlueChip_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureDanaValue_EverCash55 = ECAR55SA * (VUVentureDana_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureManagedValue_EverCash55 = ECAR55SA * (VUVentureManaged_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureIncomeValue_EverCash55 = ECAR55SA * (VUVentureIncome_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture6666Value_EverCash55 = ECAR55SA * (VUVenture6666_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture7777Value_EverCash55 = ECAR55SA * (VUVenture7777_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture8888Value_EverCash55 = ECAR55SA * (VUVenture8888_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture9999Value_EverCash55 = ECAR55SA * (VUVenture9999_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
				}
			}
			else if (aaPolicyYear > FundTermPrev2035) {
				if (VUCash_FundAllo_Percen == 100) {
					VU2023Value_EverCash55 = 0.00;
					VU2025Value_EverCash55 = 0.00;
					VU2028Value_EverCash55 = 0.00;
					VU2030Value_EverCash55 = 0.00;
					VU2035Value_EverCash55 = 0.00;
					VURetValue_EverCash55 = 0.00;
					VUDanaValue_EverCash55 = 0.00;
					VUCashValue_EverCash55 = ECAR55SA;
                    VUVentureGrowthValue_EverCash55 = 0.00;
                    VUVentureBlueChipValue_EverCash55 = 0.00;
                    VUVentureDanaValue_EverCash55 = 0.00;
                    VUVentureManagedValue_EverCash55 = 0.00;
                    VUVentureIncomeValue_EverCash55 = 0.00;
                    VUVenture6666Value_EverCash55 = 0.00;
                    VUVenture7777Value_EverCash55 = 0.00;
                    VUVenture8888Value_EverCash55 = 0.00;
                    VUVenture9999Value_EverCash55 = 0.00;
                    
				}
				else{
					VU2023Value_EverCash55 = 0.00;
					VU2025Value_EverCash55 = 0.00;
					VU2028Value_EverCash55 = 0.00;
					VU2030Value_EverCash55 = 0.00;
					VU2035Value_EverCash55 = ECAR55SA * (VU2035_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VURetValue_EverCash55 = ECAR55SA * (VURet_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VUDanaValue_EverCash55 = ECAR55SA * (VUDana_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VUCashValue_EverCash55 = 0.00;
                    VUVentureGrowthValue_EverCash55 = ECAR55SA * (VUVentureGrowth_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureBlueChipValue_EverCash55 = ECAR55SA * (VUVentureBlueChip_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureDanaValue_EverCash55 = ECAR55SA * (VUVentureDana_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureManagedValue_EverCash55 = ECAR55SA * (VUVentureManaged_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureIncomeValue_EverCash55 = ECAR55SA * (VUVentureIncome_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture6666Value_EverCash55 = ECAR55SA * (VUVenture6666_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture7777Value_EverCash55 = ECAR55SA * (VUVenture7777_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture8888Value_EverCash55 = ECAR55SA * (VUVenture8888_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture9999Value_EverCash55 = ECAR55SA * (VUVenture9999_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
				}
			}
			else{
				if (VUCash_FundAllo_Percen == 100) {
					VU2023Value_EverCash55 = 0.00;
					VU2025Value_EverCash55 = 0.00;
					VU2028Value_EverCash55 = 0.00;
					VU2030Value_EverCash55 = 0.00;
					VU2035Value_EverCash55 = 0.00;
					VURetValue_EverCash55 = 0.00;
					VUDanaValue_EverCash55 = 0.00;
					VUCashValue_EverCash55 = ECAR55SA;
                    VUVentureGrowthValue_EverCash55 = 0.00;
                    VUVentureBlueChipValue_EverCash55 = 0.00;
                    VUVentureDanaValue_EverCash55 = 0.00;
                    VUVentureManagedValue_EverCash55 = 0.00;
                    VUVentureIncomeValue_EverCash55 = 0.00;
                    VUVenture6666Value_EverCash55 = 0.00;
                    VUVenture7777Value_EverCash55 = 0.00;
                    VUVenture8888Value_EverCash55 = 0.00;
                    VUVenture9999Value_EverCash55 = 0.00;
                    
					
				}
				else{
					
					VU2023Value_EverCash55 = ECAR55SA * (VU2023_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VU2025Value_EverCash55 = ECAR55SA * (VU2025_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VU2028Value_EverCash55 = ECAR55SA * (VU2028_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VU2030Value_EverCash55 = ECAR55SA * (VU2030_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VU2035Value_EverCash55 = ECAR55SA * (VU2035_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VURetValue_EverCash55 = ECAR55SA * (VURet_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VUDanaValue_EverCash55 = ECAR55SA * (VUDana_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VUCashValue_EverCash55 = 0.00;
                    VUVentureGrowthValue_EverCash55 = ECAR55SA * (VUVentureGrowth_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureBlueChipValue_EverCash55 = ECAR55SA * (VUVentureBlueChip_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureDanaValue_EverCash55 = ECAR55SA * (VUVentureDana_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureManagedValue_EverCash55 = ECAR55SA * (VUVentureManaged_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureIncomeValue_EverCash55 = ECAR55SA * (VUVentureIncome_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture6666Value_EverCash55 = ECAR55SA * (VUVenture6666_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture7777Value_EverCash55 = ECAR55SA * (VUVenture7777_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture8888Value_EverCash55 = ECAR55SA * (VUVenture8888_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture9999Value_EverCash55 = ECAR55SA * (VUVenture9999_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
				}
				
			}
			
		}
		else{
			VU2023Value_EverCash55 = 0.00;
			VU2025Value_EverCash55 = 0.00;
			VU2028Value_EverCash55 = 0.00;
			VU2030Value_EverCash55 = 0.00;
			VU2035Value_EverCash55 = 0.00;
			VURetValue_EverCash55 = 0.00;
			VUDanaValue_EverCash55 = 0.00;
			VUCashValue_EverCash55 = 0.00;
            VUVentureGrowthValue_EverCash55 = 0.00;
            VUVentureBlueChipValue_EverCash55 = 0.00;
            VUVentureDanaValue_EverCash55 = 0.00;
            VUVentureManagedValue_EverCash55 = 0.00;
            VUVentureIncomeValue_EverCash55 = 0.00;
            VUVenture6666Value_EverCash55 = 0.00;
            VUVenture7777Value_EverCash55 = 0.00;
            VUVenture8888Value_EverCash55 = 0.00;
            VUVenture9999Value_EverCash55 = 0.00;
            
		}
	}
	
	
}

-(void)ReturnEverCash60 :(int)aaPolicyYear {
	double ECAR60SA = [ECAR60SumAssured doubleValue ];
	double ECAR60SA_BumpMode = [ECAR60SumAssured doubleValue ];
    
	if(ECAR60Exist == FALSE){
		VU2023Value_EverCash60 = 0.00;
		VU2025Value_EverCash60 = 0.00;
		VU2028Value_EverCash60 = 0.00;
		VU2030Value_EverCash60 = 0.00;
		VU2035Value_EverCash60 = 0.00;
		VURetValue_EverCash60 = 0.00;
		VUDanaValue_EverCash60 = 0.00;
        VUSmartValue_EverCash60 = 0.00;
		VUVentureValue_EverCash60 = 0.00;
		VUCashValue_EverCash60 = 0.00;
        VUVentureGrowthValue_EverCash60 = 0.00;
        VUVentureBlueChipValue_EverCash60 = 0.00;
        VUVentureDanaValue_EverCash60 = 0.00;
        VUVentureManagedValue_EverCash60 = 0.00;
        VUVentureIncomeValue_EverCash60 = 0.00;
        VUVenture6666Value_EverCash60 = 0.00;
        VUVenture7777Value_EverCash60 = 0.00;
        VUVenture8888Value_EverCash60 = 0.00;
        VUVenture9999Value_EverCash60 = 0.00;
        
	}
	else{
		if (Age + aaPolicyYear >= 60 && aaPolicyYear <= [ECAR60RiderTerm intValue] && [ECAR60ReinvestGYI isEqualToString:@"Yes"] ) {
			VUCash_FundAllo_Percen = [self ReturnVUCashFac:aaPolicyYear] * 100;
			VU2025_FundAllo_Percen = [self ReturnVU2025Fac:aaPolicyYear] * 100;
			VU2028_FundAllo_Percen = [self ReturnVU2028Fac:aaPolicyYear] * 100;
			VU2030_FundAllo_Percen = [self ReturnVU2030Fac:aaPolicyYear] * 100;
			VU2035_FundAllo_Percen = [self ReturnVU2035Fac:aaPolicyYear] * 100;
			VURet_FundAllo_Percen = [self ReturnVURetFac:aaPolicyYear] * 100;
			VUDana_FundAllo_Percen = [self ReturnVUDanaFac:aaPolicyYear] * 100;
            VUSmart_FundAllo_Percen = [self ReturnVUSmartFac:aaPolicyYear] * 100;
			VUVenture_FundAllo_Percen = [self ReturnVUVentureFac:aaPolicyYear] * 100;
            VUVentureGrowth_FundAllo_Percen = [self ReturnVUVentureGrowthFac:aaPolicyYear] * 100;
            VUVentureBlueChip_FundAllo_Percen = [self ReturnVUVentureBlueChipFac:aaPolicyYear] * 100;
            VUVentureDana_FundAllo_Percen = [self ReturnVUVentureDanaFac:aaPolicyYear] * 100;
            VUVentureManaged_FundAllo_Percen = [self ReturnVUVentureManagedFac:aaPolicyYear] * 100;
            VUVentureIncome_FundAllo_Percen = [self ReturnVUVentureIncomeFac:aaPolicyYear] * 100;
            VUVenture6666_FundAllo_Percen = [self ReturnVUVenture6666Fac:aaPolicyYear] * 100;
            VUVenture7777_FundAllo_Percen = [self ReturnVUVenture7777Fac:aaPolicyYear] * 100;
            VUVenture8888_FundAllo_Percen = [self ReturnVUVenture8888Fac:aaPolicyYear] * 100;
            VUVenture9999_FundAllo_Percen = [self ReturnVUVenture9999Fac:aaPolicyYear] * 100;
            
			double PrevVUCash_FundAllo_Percen = [self ReturnVUCashFac:aaPolicyYear - 1] * 100;
			double PrevVU2025_FundAllo_Percen = [self ReturnVU2025Fac:aaPolicyYear- 1] * 100;
			double PrevVU2028_FundAllo_Percen = [self ReturnVU2028Fac:aaPolicyYear- 1] * 100;
			double PrevVU2030_FundAllo_Percen = [self ReturnVU2030Fac:aaPolicyYear- 1] * 100;
			double PrevVU2035_FundAllo_Percen = [self ReturnVU2035Fac:aaPolicyYear- 1] * 100;
			double PrevVURet_FundAllo_Percen = [self ReturnVURetFac:aaPolicyYear- 1] * 100;
			double PrevVUDana_FundAllo_Percen = [self ReturnVUDanaFac:aaPolicyYear- 1] * 100;
            double PrevVUSmart_FundAllo_Percen = [self ReturnVUSmartFac:aaPolicyYear- 1] * 100;
			double PrevVUVenture_FundAllo_Percen = [self ReturnVUVentureFac:aaPolicyYear- 1] * 100;
            double PrevVUVentureGrowth_FundAllo_Percen = [self ReturnVUVentureGrowthFac:aaPolicyYear- 1] * 100;
            double PrevVUVentureBlueChip_FundAllo_Percen = [self ReturnVUVentureBlueChipFac:aaPolicyYear- 1] * 100;
            double PrevVUVentureDana_FundAllo_Percen = [self ReturnVUVentureDanaFac:aaPolicyYear- 1] * 100;
            double PrevVUVentureManaged_FundAllo_Percen = [self ReturnVUVentureManagedFac:aaPolicyYear- 1] * 100;
            double PrevVUVentureIncome_FundAllo_Percen = [self ReturnVUVentureIncomeFac:aaPolicyYear- 1] * 100;
            double PrevVUVenture6666_FundAllo_Percen = [self ReturnVUVenture6666Fac:aaPolicyYear- 1] * 100;
            double PrevVUVenture7777_FundAllo_Percen = [self ReturnVUVenture7777Fac:aaPolicyYear- 1] * 100;
            double PrevVUVenture8888_FundAllo_Percen = [self ReturnVUVenture8888Fac:aaPolicyYear- 1] * 100;
            double PrevVUVenture9999_FundAllo_Percen = [self ReturnVUVenture9999Fac:aaPolicyYear- 1] * 100;
            
			if ([strBumpMode isEqualToString:@"S" ]) {
				ECAR60SA = ECAR60SA / 0.5;
			}
			else if ([strBumpMode isEqualToString:@"Q" ]){
				ECAR60SA = ECAR60SA / 0.25;
			}
			else if ([strBumpMode isEqualToString:@"M" ]){
				ECAR60SA = ECAR60SA / 0.0833333;
			}
			else{
				ECAR60SA = ECAR60SA / 1.00;
			}
			
			if (aaPolicyYear >= FundTerm2023 && aaPolicyYear <= FundTermPrev2025) {
				if (VUCash_FundAllo_Percen == 100) {
					VU2023Value_EverCash60 = 0.00;
					VU2025Value_EverCash60 = 0.00;
					VU2028Value_EverCash60 = 0.00;
					VU2030Value_EverCash60 = 0.00;
					VU2035Value_EverCash60 = 0.00;
					VURetValue_EverCash60 = 0.00;
					VUDanaValue_EverCash60 = 0.00;
                    VUSmartValue_EverCash60 = 0.00;
                    VUVentureValue_EverCash60 = 0.00;
					VUCashValue_EverCash60 = ECAR60SA;
                    VUVentureGrowthValue_EverCash60 = 0.00;
                    VUVentureBlueChipValue_EverCash60 = 0.00;
                    VUVentureDanaValue_EverCash60 = 0.00;
                    VUVentureManagedValue_EverCash60 = 0.00;
                    VUVentureIncomeValue_EverCash60 = 0.00;
                    VUVenture6666Value_EverCash60 = 0.00;
                    VUVenture7777Value_EverCash60 = 0.00;
                    VUVenture8888Value_EverCash60 = 0.00;
                    VUVenture9999Value_EverCash60 = 0.00;
                    
					if (PrevVUCash_FundAllo_Percen == 100) {
						PrevVUCashValue_EverCash60 = ECAR60SA;
					}
					else{
						PrevVUCashValue_EverCash60 = 0.00;
					}
				}
				else{
					VU2023Value_EverCash60 = 0.00;
					VU2025Value_EverCash60 = ECAR60SA * (VU2025_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VU2028Value_EverCash60 = ECAR60SA * (VU2028_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VU2030Value_EverCash60 = ECAR60SA * (VU2030_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VU2035Value_EverCash60 = ECAR60SA * (VU2035_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VURetValue_EverCash60 = ECAR60SA * (VURet_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VUDanaValue_EverCash60 = ECAR60SA * (VUDana_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUSmartValue_EverCash60 = ECAR60SA * (VUSmart_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VUVentureValue_EverCash60 = ECAR60SA * (VUVenture_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VUCashValue_EverCash60 = 0.00;
					VUVentureGrowthValue_EverCash60 = ECAR60SA * (VUVentureGrowth_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureBlueChipValue_EverCash60 = ECAR60SA * (VUVentureBlueChip_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureDanaValue_EverCash60 = ECAR60SA * (VUVentureDana_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureManagedValue_EverCash60 = ECAR60SA * (VUVentureManaged_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureIncomeValue_EverCash60 = ECAR60SA * (VUVentureIncome_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture6666Value_EverCash60 = ECAR60SA * (VUVenture6666_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture7777Value_EverCash60 = ECAR60SA * (VUVenture7777_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture8888Value_EverCash60 = ECAR60SA * (VUVenture8888_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture9999Value_EverCash60 = ECAR60SA * (VUVenture9999_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    
					PrevVU2023Value_EverCash60 = ECAR60SA * (VU2023_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
					PrevVU2025Value_EverCash60 = ECAR60SA * (PrevVU2025_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
					PrevVU2028Value_EverCash60 = ECAR60SA * (PrevVU2028_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
					PrevVU2030Value_EverCash60 = ECAR60SA * (PrevVU2030_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
					PrevVU2035Value_EverCash60 = ECAR60SA * (PrevVU2035_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
					PrevVURetValue_EverCash60 = ECAR60SA * (PrevVURet_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
					PrevVUDanaValue_EverCash60 = ECAR60SA * (PrevVUDana_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUSmartValue_EverCash60 = ECAR60SA * (PrevVUSmart_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
					PrevVUVentureValue_EverCash60 = ECAR60SA * (PrevVUVenture_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVentureGrowthValue_EverCash60 = ECAR60SA * (PrevVUVentureGrowth_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVentureBlueChipValue_EverCash60 = ECAR60SA * (PrevVUVentureBlueChip_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVentureDanaValue_EverCash60 = ECAR60SA * (PrevVUVentureDana_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVentureManagedValue_EverCash60 = ECAR60SA * (PrevVUVentureManaged_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVentureIncomeValue_EverCash60 = ECAR60SA * (PrevVUVentureIncome_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVenture6666Value_EverCash60 = ECAR60SA * (PrevVUVenture6666_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVenture7777Value_EverCash60 = ECAR60SA * (PrevVUVenture7777_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVenture8888Value_EverCash60 = ECAR60SA * (PrevVUVenture8888_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVenture9999Value_EverCash60 = ECAR60SA * (PrevVUVenture9999_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
					
				}
			}
			else if (aaPolicyYear >= FundTerm2025 && aaPolicyYear <= FundTermPrev2028) {
				if (VUCash_FundAllo_Percen == 100) {
					VU2023Value_EverCash60 = 0.00;
					VU2025Value_EverCash60 = 0.00;
					VU2028Value_EverCash60 = 0.00;
					VU2030Value_EverCash60 = 0.00;
					VU2035Value_EverCash60 = 0.00;
					VURetValue_EverCash60 = 0.00;
					VUDanaValue_EverCash60 = 0.00;
                    VUSmartValue_EverCash60 = 0.00;
                    VUVentureValue_EverCash60 = 0.00;
					VUCashValue_EverCash60 = ECAR60SA;
                    VUVentureGrowthValue_EverCash60 = 0.00;
                    VUVentureBlueChipValue_EverCash60 = 0.00;
                    VUVentureDanaValue_EverCash60 = 0.00;
                    VUVentureManagedValue_EverCash60 = 0.00;
                    VUVentureIncomeValue_EverCash60 = 0.00;
                    VUVenture6666Value_EverCash60 = 0.00;
                    VUVenture7777Value_EverCash60 = 0.00;
                    VUVenture8888Value_EverCash60 = 0.00;
                    VUVenture9999Value_EverCash60 = 0.00;
                    
					if (PrevVUCash_FundAllo_Percen == 100) {
						PrevVUCashValue_EverCash60 = ECAR60SA;
					}
					else{
						PrevVUCashValue_EverCash60 = 0.00;
					}
				}
				else{
					VU2023Value_EverCash60 = 0.00;
					VU2025Value_EverCash60 = 0.00;
					VU2028Value_EverCash60 = ECAR60SA * (VU2028_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VU2030Value_EverCash60 = ECAR60SA * (VU2030_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VU2035Value_EverCash60 = ECAR60SA * (VU2035_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VURetValue_EverCash60 = ECAR60SA * (VURet_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VUDanaValue_EverCash60 = ECAR60SA * (VUDana_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUSmartValue_EverCash60 = ECAR60SA * (VUSmart_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VUVentureValue_EverCash60 = ECAR60SA * (VUVenture_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VUCashValue_EverCash60 = 0.00;
                    VUVentureGrowthValue_EverCash60 = ECAR60SA * (VUVentureGrowth_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureBlueChipValue_EverCash60 = ECAR60SA * (VUVentureBlueChip_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureDanaValue_EverCash60 = ECAR60SA * (VUVentureDana_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureManagedValue_EverCash60 = ECAR60SA * (VUVentureManaged_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureIncomeValue_EverCash60 = ECAR60SA * (VUVentureIncome_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture6666Value_EverCash60 = ECAR60SA * (VUVenture6666_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture7777Value_EverCash60 = ECAR60SA * (VUVenture7777_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture8888Value_EverCash60 = ECAR60SA * (VUVenture8888_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture9999Value_EverCash60 = ECAR60SA * (VUVenture9999_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    
					PrevVU2023Value_EverCash60 = 0.00;
					PrevVU2025Value_EverCash60 = ECAR60SA * (PrevVU2025_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
					PrevVU2028Value_EverCash60 = ECAR60SA * (PrevVU2028_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
					PrevVU2030Value_EverCash60 = ECAR60SA * (PrevVU2030_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
					PrevVU2035Value_EverCash60 = ECAR60SA * (PrevVU2035_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
					PrevVURetValue_EverCash60 = ECAR60SA * (PrevVURet_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
					PrevVUDanaValue_EverCash60 = ECAR60SA * (PrevVUDana_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUSmartValue_EverCash60 = ECAR60SA * (PrevVUSmart_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
					PrevVUVentureValue_EverCash60 = ECAR60SA * (PrevVUVenture_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVentureGrowthValue_EverCash60 = ECAR60SA * (PrevVUVentureGrowth_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVentureBlueChipValue_EverCash60 = ECAR60SA * (PrevVUVentureBlueChip_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVentureDanaValue_EverCash60 = ECAR60SA * (PrevVUVentureDana_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVentureManagedValue_EverCash60 = ECAR60SA * (PrevVUVentureManaged_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVentureIncomeValue_EverCash60 = ECAR60SA * (PrevVUVentureIncome_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVenture6666Value_EverCash60 = ECAR60SA * (PrevVUVenture6666_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVenture7777Value_EverCash60 = ECAR60SA * (PrevVUVenture7777_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVenture8888Value_EverCash60 = ECAR60SA * (PrevVUVenture8888_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVenture9999Value_EverCash60 = ECAR60SA * (PrevVUVenture9999_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
				}
			}
			else if (aaPolicyYear >= FundTerm2028 && aaPolicyYear <= FundTermPrev2030) {
				if (VUCash_FundAllo_Percen == 100) {
					VU2023Value_EverCash60 = 0.00;
					VU2025Value_EverCash60 = 0.00;
					VU2028Value_EverCash60 = 0.00;
					VU2030Value_EverCash60 = 0.00;
					VU2035Value_EverCash60 = 0.00;
					VURetValue_EverCash60 = 0.00;
					VUDanaValue_EverCash60 = 0.00;
                    VUSmartValue_EverCash60 = 0.00;
                    VUVentureValue_EverCash60 = 0.00;
					VUCashValue_EverCash60 = ECAR60SA;
                    VUVentureGrowthValue_EverCash60 = 0.00;
                    VUVentureBlueChipValue_EverCash60 = 0.00;
                    VUVentureDanaValue_EverCash60 = 0.00;
                    VUVentureManagedValue_EverCash60 = 0.00;
                    VUVentureIncomeValue_EverCash60 = 0.00;
                    VUVenture6666Value_EverCash60 = 0.00;
                    VUVenture7777Value_EverCash60 = 0.00;
                    VUVenture8888Value_EverCash60 = 0.00;
                    VUVenture9999Value_EverCash60 = 0.00;
                    
					if (PrevVUCash_FundAllo_Percen == 100) {
						PrevVUCashValue_EverCash60 = ECAR60SA;
					}
					else{
						PrevVUCashValue_EverCash60 = 0.00;
					}
				}
				else{
					VU2023Value_EverCash60 = 0.00;
					VU2025Value_EverCash60 = 0.00;
					VU2028Value_EverCash60 = 0.00;
					VU2030Value_EverCash60 = ECAR60SA * (VU2030_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VU2035Value_EverCash60 = ECAR60SA * (VU2035_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VURetValue_EverCash60 = ECAR60SA * (VURet_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VUDanaValue_EverCash60 = ECAR60SA * (VUDana_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUSmartValue_EverCash60 = ECAR60SA * (VUSmart_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VUVentureValue_EverCash60 = ECAR60SA * (VUVenture_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VUCashValue_EverCash60 = 0.00;
                    VUVentureGrowthValue_EverCash60 = ECAR60SA * (VUVentureGrowth_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureBlueChipValue_EverCash60 = ECAR60SA * (VUVentureBlueChip_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureDanaValue_EverCash60 = ECAR60SA * (VUVentureDana_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureManagedValue_EverCash60 = ECAR60SA * (VUVentureManaged_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureIncomeValue_EverCash60 = ECAR60SA * (VUVentureIncome_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture6666Value_EverCash60 = ECAR60SA * (VUVenture6666_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture7777Value_EverCash60 = ECAR60SA * (VUVenture7777_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture8888Value_EverCash60 = ECAR60SA * (VUVenture8888_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture9999Value_EverCash60 = ECAR60SA * (VUVenture9999_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    
					PrevVU2023Value_EverCash60 = 0.00;
					PrevVU2025Value_EverCash60 = 0.00;
					PrevVU2028Value_EverCash60 = ECAR60SA * (PrevVU2028_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
					PrevVU2030Value_EverCash60 = ECAR60SA * (PrevVU2030_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
					PrevVU2035Value_EverCash60 = ECAR60SA * (PrevVU2035_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
					PrevVURetValue_EverCash60 = ECAR60SA * (PrevVURet_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
					PrevVUDanaValue_EverCash60 = ECAR60SA * (PrevVUDana_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUSmartValue_EverCash60 = ECAR60SA * (PrevVUSmart_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
					PrevVUVentureValue_EverCash60 = ECAR60SA * (PrevVUVenture_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVentureGrowthValue_EverCash60 = ECAR60SA * (PrevVUVentureGrowth_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVentureBlueChipValue_EverCash60 = ECAR60SA * (PrevVUVentureBlueChip_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVentureDanaValue_EverCash60 = ECAR60SA * (PrevVUVentureDana_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVentureManagedValue_EverCash60 = ECAR60SA * (PrevVUVentureManaged_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVentureIncomeValue_EverCash60 = ECAR60SA * (PrevVUVentureIncome_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVenture6666Value_EverCash60 = ECAR60SA * (PrevVUVenture6666_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVenture7777Value_EverCash60 = ECAR60SA * (PrevVUVenture7777_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVenture8888Value_EverCash60 = ECAR60SA * (PrevVUVenture8888_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVenture9999Value_EverCash60 = ECAR60SA * (PrevVUVenture9999_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
				}
			}
			else if (aaPolicyYear >= FundTerm2030 && aaPolicyYear <= FundTermPrev2035) {
				if (VUCash_FundAllo_Percen == 100) {
					VU2023Value_EverCash60 = 0.00;
					VU2025Value_EverCash60 = 0.00;
					VU2028Value_EverCash60 = 0.00;
					VU2030Value_EverCash60 = 0.00;
					VU2035Value_EverCash60 = 0.00;
					VURetValue_EverCash60 = 0.00;
					VUDanaValue_EverCash60 = 0.00;
                    VUSmartValue_EverCash60 = 0.00;
                    VUVentureValue_EverCash60 = 0.00;
					VUCashValue_EverCash60 = ECAR60SA;
                    VUVentureGrowthValue_EverCash60 = 0.00;
                    VUVentureBlueChipValue_EverCash60 = 0.00;
                    VUVentureDanaValue_EverCash60 = 0.00;
                    VUVentureManagedValue_EverCash60 = 0.00;
                    VUVentureIncomeValue_EverCash60 = 0.00;
                    VUVenture6666Value_EverCash60 = 0.00;
                    VUVenture7777Value_EverCash60 = 0.00;
                    VUVenture8888Value_EverCash60 = 0.00;
                    VUVenture9999Value_EverCash60 = 0.00;
                    
					if (PrevVUCash_FundAllo_Percen == 100) {
						PrevVUCashValue_EverCash60 = ECAR60SA;
					}
					else{
						PrevVUCashValue_EverCash60 = 0.00;
					}
				}
				else{
					VU2023Value_EverCash60 = 0.00;
					VU2025Value_EverCash60 = 0.00;
					VU2028Value_EverCash60 = 0.00;
					VU2030Value_EverCash60 = 0.00;
					VU2035Value_EverCash60 = ECAR60SA * (VU2035_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VURetValue_EverCash60 = ECAR60SA * (VURet_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VUDanaValue_EverCash60 = ECAR60SA * (VUDana_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUSmartValue_EverCash60 = ECAR60SA * (VUSmart_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VUVentureValue_EverCash60 = ECAR60SA * (VUVenture_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VUCashValue_EverCash60 = 0.00;
                    VUVentureGrowthValue_EverCash60 = ECAR60SA * (VUVentureGrowth_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureBlueChipValue_EverCash60 = ECAR60SA * (VUVentureBlueChip_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureDanaValue_EverCash60 = ECAR60SA * (VUVentureDana_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureManagedValue_EverCash60 = ECAR60SA * (VUVentureManaged_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureIncomeValue_EverCash60 = ECAR60SA * (VUVentureIncome_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture6666Value_EverCash60 = ECAR60SA * (VUVenture6666_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture7777Value_EverCash60 = ECAR60SA * (VUVenture7777_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture8888Value_EverCash60 = ECAR60SA * (VUVenture8888_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture9999Value_EverCash60 = ECAR60SA * (VUVenture9999_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    
					PrevVU2023Value_EverCash60 = 0.00;
					PrevVU2025Value_EverCash60 = 0.00;
					PrevVU2028Value_EverCash60 = 0.00;
					PrevVU2030Value_EverCash60 = ECAR60SA * (PrevVU2030_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
					PrevVU2035Value_EverCash60 = ECAR60SA * (PrevVU2035_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
					PrevVURetValue_EverCash60 = ECAR60SA * (PrevVURet_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
					PrevVUDanaValue_EverCash60 = ECAR60SA * (PrevVUDana_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUSmartValue_EverCash60 = ECAR60SA * (PrevVUSmart_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
					PrevVUVentureValue_EverCash60 = ECAR60SA * (PrevVUVenture_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVentureGrowthValue_EverCash60 = ECAR60SA * (PrevVUVentureGrowth_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVentureBlueChipValue_EverCash60 = ECAR60SA * (PrevVUVentureBlueChip_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVentureDanaValue_EverCash60 = ECAR60SA * (PrevVUVentureDana_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVentureManagedValue_EverCash60 = ECAR60SA * (PrevVUVentureManaged_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVentureIncomeValue_EverCash60 = ECAR60SA * (PrevVUVentureIncome_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVenture6666Value_EverCash60 = ECAR60SA * (PrevVUVenture6666_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVenture7777Value_EverCash60 = ECAR60SA * (PrevVUVenture7777_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVenture8888Value_EverCash60 = ECAR60SA * (PrevVUVenture8888_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVenture9999Value_EverCash60 = ECAR60SA * (PrevVUVenture9999_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    
				}
			}
			else if (aaPolicyYear == FundTermPrev2035) {
				if (VUCash_FundAllo_Percen == 100) {
					VU2023Value_EverCash60 = 0.00;
					VU2025Value_EverCash60 = 0.00;
					VU2028Value_EverCash60 = 0.00;
					VU2030Value_EverCash60 = 0.00;
					VU2035Value_EverCash60 = 0.00;
					VURetValue_EverCash60 = 0.00;
					VUDanaValue_EverCash60 = 0.00;
                    VUSmartValue_EverCash60 = 0.00;
                    VUVentureValue_EverCash60 = 0.00;
					VUCashValue_EverCash60 = ECAR60SA;
                    VUVentureGrowthValue_EverCash60 = 0.00;
                    VUVentureBlueChipValue_EverCash60 = 0.00;
                    VUVentureDanaValue_EverCash60 = 0.00;
                    VUVentureManagedValue_EverCash60 = 0.00;
                    VUVentureIncomeValue_EverCash60 = 0.00;
                    VUVenture6666Value_EverCash60 = 0.00;
                    VUVenture7777Value_EverCash60 = 0.00;
                    VUVenture8888Value_EverCash60 = 0.00;
                    VUVenture9999Value_EverCash60 = 0.00;
                    

					if (PrevVUCash_FundAllo_Percen == 100) {
						PrevVUCashValue_EverCash60 = ECAR60SA;
					}
					else{
						PrevVUCashValue_EverCash60 = 0.00;
					}
				}
				else{
					VU2023Value_EverCash60 = 0.00;
					VU2025Value_EverCash60 = 0.00;
					VU2028Value_EverCash60 = 0.00;
					VU2030Value_EverCash60 = 0.00;
					VU2035Value_EverCash60 = 0.00;
					VURetValue_EverCash60 = ECAR60SA * (VURet_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VUDanaValue_EverCash60 = ECAR60SA * (VUDana_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUSmartValue_EverCash60 = ECAR60SA * (VUSmart_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VUVentureValue_EverCash60 = ECAR60SA * (VUVenture_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VUCashValue_EverCash60 = 0.00;
                    VUVentureGrowthValue_EverCash60 = ECAR60SA * (VUVentureGrowth_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureBlueChipValue_EverCash60 = ECAR60SA * (VUVentureBlueChip_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureDanaValue_EverCash60 = ECAR60SA * (VUVentureDana_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureManagedValue_EverCash60 = ECAR60SA * (VUVentureManaged_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureIncomeValue_EverCash60 = ECAR60SA * (VUVentureIncome_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture6666Value_EverCash60 = ECAR60SA * (VUVenture6666_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture7777Value_EverCash60 = ECAR60SA * (VUVenture7777_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture8888Value_EverCash60 = ECAR60SA * (VUVenture8888_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture9999Value_EverCash60 = ECAR60SA * (VUVenture9999_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    
					
					PrevVU2023Value_EverCash60 = 0.00;
					PrevVU2025Value_EverCash60 = 0.00;
					PrevVU2028Value_EverCash60 = 0.00;
					PrevVU2030Value_EverCash60 = 0.00;
					//PrevVU2035Value_EverCash55 = ECAR55SA * (PrevVU2035_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
					PrevVU2035Value_EverCash60 = 0.00;
					PrevVURetValue_EverCash60 = ECAR60SA * (PrevVURet_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
					PrevVUDanaValue_EverCash60 = ECAR60SA * (PrevVUDana_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUSmartValue_EverCash60 = ECAR60SA * (PrevVUSmart_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
					PrevVUVentureValue_EverCash60 = ECAR60SA * (PrevVUVenture_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVentureGrowthValue_EverCash60 = ECAR60SA * (PrevVUVentureGrowth_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVentureBlueChipValue_EverCash60 = ECAR60SA * (PrevVUVentureBlueChip_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVentureDanaValue_EverCash60 = ECAR60SA * (PrevVUVentureDana_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVentureManagedValue_EverCash60 = ECAR60SA * (PrevVUVentureManaged_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVentureIncomeValue_EverCash60 = ECAR60SA * (PrevVUVentureIncome_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVenture6666Value_EverCash60 = ECAR60SA * (PrevVUVenture6666_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVenture7777Value_EverCash60 = ECAR60SA * (PrevVUVenture7777_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVenture8888Value_EverCash60 = ECAR60SA * (PrevVUVenture8888_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVenture9999Value_EverCash60 = ECAR60SA * (PrevVUVenture9999_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    
				}
			}
			else if (aaPolicyYear > FundTermPrev2035) {
				if (VUCash_FundAllo_Percen == 100) {
					VU2023Value_EverCash60 = 0.00;
					VU2025Value_EverCash60 = 0.00;
					VU2028Value_EverCash60 = 0.00;
					VU2030Value_EverCash60 = 0.00;
					VU2035Value_EverCash60 = 0.00;
					VURetValue_EverCash60 = 0.00;
					VUDanaValue_EverCash60 = 0.00;
                    VUSmartValue_EverCash60 = 0.00;
                    VUVentureValue_EverCash60 = 0.00;
					VUCashValue_EverCash60 = ECAR60SA;
                    VUVentureGrowthValue_EverCash60 = 0.00;
                    VUVentureBlueChipValue_EverCash60 = 0.00;
                    VUVentureDanaValue_EverCash60 = 0.00;
                    VUVentureManagedValue_EverCash60 = 0.00;
                    VUVentureIncomeValue_EverCash60 = 0.00;
                    VUVenture6666Value_EverCash60 = 0.00;
                    VUVenture7777Value_EverCash60 = 0.00;
                    VUVenture8888Value_EverCash60 = 0.00;
                    VUVenture9999Value_EverCash60 = 0.00;
                    
					if (PrevVUCash_FundAllo_Percen == 100) {
						PrevVUCashValue_EverCash60 = ECAR60SA;
					}
					else{
						PrevVUCashValue_EverCash60 = 0.00;
					}
					
					if (aaPolicyYear > FundTerm2035) {
						PrevVU2025Value_EverCash60 = 0.00;
						PrevVU2028Value_EverCash60 = 0.00;
						PrevVU2030Value_EverCash60 = 0.00;
						PrevVU2035Value_EverCash60 = 0.00;
						PrevVURetValue_EverCash60 = 0.00;
						PrevVUDanaValue_EverCash60 = 0.00;
                        PrevVUVentureGrowthValue_EverCash60 = 0.00;
                        PrevVUVentureBlueChipValue_EverCash60 = 0.00;
                        PrevVUVentureDanaValue_EverCash60 = 0.00;
                        PrevVUVentureManagedValue_EverCash60 = 0.00;
                        PrevVUVentureIncomeValue_EverCash60 = 0.00;
                        PrevVUVenture6666Value_EverCash60 = 0.00;
                        PrevVUVenture7777Value_EverCash60 = 0.00;
                        PrevVUVenture8888Value_EverCash60 = 0.00;
                        PrevVUVenture9999Value_EverCash60 = 0.00;
                        
					}
					
				}
				else{
					VU2023Value_EverCash60 = 0.00;
					VU2025Value_EverCash60 = 0.00;
					VU2028Value_EverCash60 = 0.00;
					VU2030Value_EverCash60 = 0.00;
					VU2035Value_EverCash60 = 0.00;
					VURetValue_EverCash60 = ECAR60SA_BumpMode * (VURet_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VUDanaValue_EverCash60 = ECAR60SA_BumpMode * (VUDana_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUSmartValue_EverCash60 = ECAR60SA_BumpMode * (VUSmart_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VUVentureValue_EverCash60 = ECAR60SA_BumpMode * (VUVenture_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VUCashValue_EverCash60 = 0.00;
                    VUVentureGrowthValue_EverCash60 = ECAR60SA * (VUVentureGrowth_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureBlueChipValue_EverCash60 = ECAR60SA * (VUVentureBlueChip_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureDanaValue_EverCash60 = ECAR60SA * (VUVentureDana_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureManagedValue_EverCash60 = ECAR60SA * (VUVentureManaged_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureIncomeValue_EverCash60 = ECAR60SA * (VUVentureIncome_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture6666Value_EverCash60 = ECAR60SA * (VUVenture6666_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture7777Value_EverCash60 = ECAR60SA * (VUVenture7777_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture8888Value_EverCash60 = ECAR60SA * (VUVenture8888_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture9999Value_EverCash60 = ECAR60SA * (VUVenture9999_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					
					PrevVU2023Value_EverCash60 = 0.00;
					PrevVU2025Value_EverCash60 = 0.00;
					PrevVU2028Value_EverCash60 = 0.00;
					PrevVU2030Value_EverCash60 = 0.00;
					PrevVU2035Value_EverCash60 = ECAR60SA_BumpMode * (PrevVU2035_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
					PrevVURetValue_EverCash60 = ECAR60SA_BumpMode * (PrevVURet_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
					PrevVUDanaValue_EverCash60 = ECAR60SA_BumpMode * (PrevVUDana_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUSmartValue_EverCash60 = ECAR60SA_BumpMode * (PrevVUSmart_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
					PrevVUVentureValue_EverCash60 = ECAR60SA_BumpMode * (PrevVUVenture_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVentureGrowthValue_EverCash60 = ECAR60SA * (PrevVUVentureGrowth_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVentureBlueChipValue_EverCash60 = ECAR60SA * (PrevVUVentureBlueChip_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVentureDanaValue_EverCash60 = ECAR60SA * (PrevVUVentureDana_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVentureManagedValue_EverCash60 = ECAR60SA * (PrevVUVentureManaged_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVentureIncomeValue_EverCash60 = ECAR60SA * (PrevVUVentureIncome_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVenture6666Value_EverCash60 = ECAR60SA * (PrevVUVenture6666_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVenture7777Value_EverCash60 = ECAR60SA * (PrevVUVenture7777_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVenture8888Value_EverCash60 = ECAR60SA * (PrevVUVenture8888_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVenture9999Value_EverCash60 = ECAR60SA * (PrevVUVenture9999_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
				}
			}
			else{
				if (VUCash_FundAllo_Percen == 100) {
					VU2023Value_EverCash60 = 0.00;
					VU2025Value_EverCash60 = 0.00;
					VU2028Value_EverCash60 = 0.00;
					VU2030Value_EverCash60 = 0.00;
					VU2035Value_EverCash60 = 0.00;
					VURetValue_EverCash60 = 0.00;
					VUDanaValue_EverCash60 = 0.00;
                    VUSmartValue_EverCash60 = 0.00;
                    VUVentureValue_EverCash60 = 0.00;
					VUCashValue_EverCash60 = ECAR60SA;
                    VUVentureGrowthValue_EverCash60 = 0.00;
                    VUVentureBlueChipValue_EverCash60 = 0.00;
                    VUVentureDanaValue_EverCash60 = 0.00;
                    VUVentureManagedValue_EverCash60 = 0.00;
                    VUVentureIncomeValue_EverCash60 = 0.00;
                    VUVenture6666Value_EverCash60 = 0.00;
                    VUVenture7777Value_EverCash60 = 0.00;
                    VUVenture8888Value_EverCash60 = 0.00;
                    VUVenture9999Value_EverCash60 = 0.00;
                    
					if (PrevVUCash_FundAllo_Percen == 100) {
						PrevVUCashValue_EverCash60 = ECAR60SA;
					}
					else{
						PrevVUCashValue_EverCash60 = 0.00;
					}
				}
				else{
					
					VU2023Value_EverCash60 = ECAR60SA * (VU2023_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VU2025Value_EverCash60 = ECAR60SA * (VU2025_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VU2028Value_EverCash60 = ECAR60SA * (VU2028_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VU2030Value_EverCash60 = ECAR60SA * (VU2030_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VU2035Value_EverCash60 = ECAR60SA * (VU2035_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VURetValue_EverCash60 = ECAR60SA * (VURet_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VUDanaValue_EverCash60 = ECAR60SA * (VUDana_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUSmartValue_EverCash60 = ECAR60SA * (VUSmart_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VUVentureValue_EverCash60 = ECAR60SA * (VUVenture_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
					VUCashValue_EverCash60 = 0.00;
                    VUVentureGrowthValue_EverCash60 = ECAR60SA * (VUVentureGrowth_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureBlueChipValue_EverCash60 = ECAR60SA * (VUVentureBlueChip_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureDanaValue_EverCash60 = ECAR60SA * (VUVentureDana_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureManagedValue_EverCash60 = ECAR60SA * (VUVentureManaged_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureIncomeValue_EverCash60 = ECAR60SA * (VUVentureIncome_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture6666Value_EverCash60 = ECAR60SA * (VUVenture6666_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture7777Value_EverCash60 = ECAR60SA * (VUVenture7777_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture8888Value_EverCash60 = ECAR60SA * (VUVenture8888_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVenture9999Value_EverCash60 = ECAR60SA * (VUVenture9999_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    
					PrevVU2023Value_EverCash60 = ECAR60SA * (VU2023_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
					PrevVU2025Value_EverCash60 = ECAR60SA * (PrevVU2025_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
					PrevVU2028Value_EverCash60 = ECAR60SA * (PrevVU2028_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
					PrevVU2030Value_EverCash60 = ECAR60SA * (PrevVU2030_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
					PrevVU2035Value_EverCash60 = ECAR60SA * (PrevVU2035_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
					PrevVURetValue_EverCash60 = ECAR60SA * (PrevVURet_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
					PrevVUDanaValue_EverCash60 = ECAR60SA * (PrevVUDana_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUSmartValue_EverCash60 = ECAR60SA * (PrevVUSmart_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
					PrevVUVentureValue_EverCash60 = ECAR60SA * (PrevVUVenture_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVentureGrowthValue_EverCash60 = ECAR60SA * (PrevVUVentureGrowth_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVentureBlueChipValue_EverCash60 = ECAR60SA * (PrevVUVentureBlueChip_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVentureDanaValue_EverCash60 = ECAR60SA * (PrevVUVentureDana_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVentureManagedValue_EverCash60 = ECAR60SA * (PrevVUVentureManaged_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVentureIncomeValue_EverCash60 = ECAR60SA * (PrevVUVentureIncome_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVenture6666Value_EverCash60 = ECAR60SA * (PrevVUVenture6666_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVenture7777Value_EverCash60 = ECAR60SA * (PrevVUVenture7777_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVenture8888Value_EverCash60 = ECAR60SA * (PrevVUVenture8888_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
                    PrevVUVenture9999Value_EverCash60 = ECAR60SA * (PrevVUVenture9999_FundAllo_Percen / (100 - PrevVUCash_FundAllo_Percen));
				}
				
			}
			
		}
		else{
			VU2023Value_EverCash60 = 0.00;
			VU2025Value_EverCash60 = 0.00;
			VU2028Value_EverCash60 = 0.00;
			VU2030Value_EverCash60 = 0.00;
			VU2035Value_EverCash60 = 0.00;
			VURetValue_EverCash60 = 0.00;
			VUDanaValue_EverCash60 = 0.00;
            VUSmartValue_EverCash60 = 0.00;
            VUVentureValue_EverCash60 = 0.00;
			VUCashValue_EverCash60 = 0.00;
            VUVentureGrowthValue_EverCash60 = 0.00;
            VUVentureBlueChipValue_EverCash60 = 0.00;
            VUVentureDanaValue_EverCash60 = 0.00;
            VUVentureManagedValue_EverCash60 = 0.00;
            VUVentureIncomeValue_EverCash60 = 0.00;
            VUVenture6666Value_EverCash60 = 0.00;
            VUVenture7777Value_EverCash60 = 0.00;
            VUVenture8888Value_EverCash60 = 0.00;
            VUVenture9999Value_EverCash60 = 0.00;
            
		}
	}
	
	
}

-(void)ReturnMonthEverCash60 :(int)aaPolicyYear  andMonth:(int)aaMonth {
    double ECAR60SA = [ECAR60SumAssured doubleValue ];
    double ECAR60SA_bumpMode = [ECAR60SumAssured doubleValue ];
    
    if(ECAR60Exist == FALSE){
        VU2023Value_EverCash60 = 0.00;
        VU2025Value_EverCash60 = 0.00;
        VU2028Value_EverCash60 = 0.00;
        VU2030Value_EverCash60 = 0.00;
        VU2035Value_EverCash60 = 0.00;
        VURetValue_EverCash60 = 0.00;
        VUVentureGrowthValue_EverCash60 = 0.00;//
        VUVentureBlueChipValue_EverCash60 = 0.00;//
        VUVentureDanaValue_EverCash60 = 0.00;//
        VUVentureManagedValue_EverCash60 = 0.00;//
        VUVentureIncomeValue_EverCash60 = 0.00;//
        VUVenture6666Value_EverCash60 = 0.00;//
        VUVenture7777Value_EverCash60 = 0.00;//
        VUVenture8888Value_EverCash60 = 0.00;//
        VUVenture9999Value_EverCash60 = 0.00;//
        VUDanaValue_EverCash60 = 0.00;
        VUSmartValue_EverCash60 = 0.00;
        VUVentureValue_EverCash60 = 0.00;
        VUCashValue_EverCash60 = 0.00;
    }
    else{
        if (Age + aaPolicyYear >= 60 && aaPolicyYear <= [ECAR60RiderTerm intValue] && [ECAR60ReinvestGYI isEqualToString:@"Yes"] ) {
            VUCash_FundAllo_Percen = [self ReturnVUCashFac:aaPolicyYear andMonth:aaMonth] * 100;
            VU2025_FundAllo_Percen = [self ReturnVU2025Fac:aaPolicyYear andMonth:aaMonth] * 100;
            VU2028_FundAllo_Percen = [self ReturnVU2028Fac:aaPolicyYear andMonth:aaMonth] * 100;
            VU2030_FundAllo_Percen = [self ReturnVU2030Fac:aaPolicyYear andMonth:aaMonth] * 100;
            VU2035_FundAllo_Percen = [self ReturnVU2035Fac:aaPolicyYear andMonth:aaMonth] * 100;
            VURet_FundAllo_Percen = [self ReturnVURetFac:aaPolicyYear andMonth:aaMonth] * 100;
            VUVentureGrowth_FundAllo_Percen = [self ReturnVUVentureGrowthFac:aaPolicyYear andMonth:aaMonth] * 100;//
            VUVentureBlueChip_FundAllo_Percen = [self ReturnVUVentureBlueChipFac:aaPolicyYear andMonth:aaMonth] * 100;//
            VUVentureDana_FundAllo_Percen = [self ReturnVUVentureDanaFac:aaPolicyYear andMonth:aaMonth] * 100;//
            VUVentureManaged_FundAllo_Percen = [self ReturnVUVentureManagedFac:aaPolicyYear andMonth:aaMonth] * 100;//
            VUVentureIncome_FundAllo_Percen = [self ReturnVUVentureIncomeFac:aaPolicyYear andMonth:aaMonth] * 100;//
            VUVenture6666_FundAllo_Percen = [self ReturnVUVenture6666Fac:aaPolicyYear andMonth:aaMonth] * 100;//
            VUVenture7777_FundAllo_Percen = [self ReturnVUVenture7777Fac:aaPolicyYear andMonth:aaMonth] * 100;//
            VUVenture8888_FundAllo_Percen = [self ReturnVUVenture8888Fac:aaPolicyYear andMonth:aaMonth] * 100;//
            VUVenture9999_FundAllo_Percen = [self ReturnVUVenture9999Fac:aaPolicyYear andMonth:aaMonth] * 100;//
            VUDana_FundAllo_Percen = [self ReturnVUDanaFac:aaPolicyYear andMonth:aaMonth] * 100;
            VUSmart_FundAllo_Percen = [self ReturnVUSmartFac:aaPolicyYear andMonth:aaMonth] * 100;
            VUVenture_FundAllo_Percen = [self ReturnVUVentureFac:aaPolicyYear andMonth:aaMonth] * 100;
            
            if ([strBumpMode isEqualToString:@"S" ]) {
                ECAR60SA = ECAR60SA / 0.5;
            }
            else if ([strBumpMode isEqualToString:@"Q" ]){
                ECAR60SA = ECAR60SA / 0.25;
            }
            else if ([strBumpMode isEqualToString:@"M" ]){
                ECAR60SA = ECAR60SA / 0.0833333;
            }
            else{
                ECAR60SA = ECAR60SA / 1.00;
            }
            
            if (aaPolicyYear >= FundTerm2023 && aaPolicyYear <= FundTermPrev2025) {
                if (VUCash_FundAllo_Percen == 100) {
                    VU2023Value_EverCash60 = 0.00;
                    VU2025Value_EverCash60 = 0.00;
                    VU2028Value_EverCash60 = 0.00;
                    VU2030Value_EverCash60 = 0.00;
                    VU2035Value_EverCash60 = 0.00;
                    VURetValue_EverCash60 = 0.00;
                    VUVentureGrowthValue_EverCash60 = 0.00;//
                    VUVentureBlueChipValue_EverCash60 = 0.00;//
                    VUVentureDanaValue_EverCash60 = 0.00;//
                    VUVentureManagedValue_EverCash60 = 0.00;//
                    VUVentureIncomeValue_EverCash60 = 0.00;//
                    VUVenture6666Value_EverCash60 = 0.00;//
                    VUVenture7777Value_EverCash60 = 0.00;//
                    VUVenture8888Value_EverCash60 = 0.00;//
                    VUVenture9999Value_EverCash60 = 0.00;//
                    VUDanaValue_EverCash60 = 0.00;
                    VUSmartValue_EverCash60 = 0.00;
                    VUVentureValue_EverCash60 = 0.00;
                    VUCashValue_EverCash60 = ECAR60SA;
                    
                }
                else{
                    VU2023Value_EverCash60 = ECAR60SA * (VU2023_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VU2025Value_EverCash60 = ECAR60SA * (VU2025_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VU2028Value_EverCash60 = ECAR60SA * (VU2028_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VU2030Value_EverCash60 = ECAR60SA * (VU2030_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VU2035Value_EverCash60 = ECAR60SA * (VU2035_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VURetValue_EverCash60 = ECAR60SA * (VURet_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureGrowthValue_EverCash60 = ECAR60SA * (VUVentureGrowth_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));//
                    VUVentureBlueChipValue_EverCash60 = ECAR60SA * (VUVentureBlueChip_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));//
                    VUVentureDanaValue_EverCash60 = ECAR60SA * (VUVentureDana_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));//
                    VUVentureManagedValue_EverCash60 = ECAR60SA * (VUVentureManaged_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));//
                    VUVentureIncomeValue_EverCash60 = ECAR60SA * (VUVentureIncome_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));//
                    VUVenture6666Value_EverCash60 = ECAR60SA * (VUVenture6666_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));//
                    VUVenture7777Value_EverCash60 = ECAR60SA * (VUVenture7777_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));//
                    VUVenture8888Value_EverCash60 = ECAR60SA * (VUVenture8888_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));//
                    VUVenture9999Value_EverCash60 = ECAR60SA * (VUVenture9999_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));//
                    VUDanaValue_EverCash60 = ECAR60SA * (VUDana_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUSmartValue_EverCash60 = ECAR60SA * (VUSmart_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureValue_EverCash60 = ECAR60SA * (VUVenture_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUCashValue_EverCash60 = 0.00;
                    
                }
            }
            else if (aaPolicyYear >= FundTerm2025 && aaPolicyYear <= FundTermPrev2028) {
                if (VUCash_FundAllo_Percen == 100) {
                    VU2023Value_EverCash60 = 0.00;
                    VU2025Value_EverCash60 = 0.00;
                    VU2028Value_EverCash60 = 0.00;
                    VU2030Value_EverCash60 = 0.00;
                    VU2035Value_EverCash60 = 0.00;
                    VURetValue_EverCash60 = 0.00;
                    VUVentureGrowthValue_EverCash60 = 0.00;//
                    VUVentureBlueChipValue_EverCash60 = 0.00;//
                    VUVentureDanaValue_EverCash60 = 0.00;//
                    VUVentureManagedValue_EverCash60 = 0.00;//
                    VUVentureIncomeValue_EverCash60 = 0.00;//
                    VUVenture6666Value_EverCash60 = 0.00;//
                    VUVenture7777Value_EverCash60 = 0.00;//
                    VUVenture8888Value_EverCash60 = 0.00;//
                    VUVenture9999Value_EverCash60 = 0.00;//
                    VUDanaValue_EverCash60 = 0.00;
                    VUSmartValue_EverCash60 = 0.00;
                    VUVentureValue_EverCash60 = 0.00;
                    VUCashValue_EverCash60 = ECAR60SA;
                    
                }
                else{
                    VU2023Value_EverCash60 = 0.00;
                    VU2025Value_EverCash60 = ECAR60SA * (VU2025_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VU2028Value_EverCash60 = ECAR60SA * (VU2028_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VU2030Value_EverCash60 = ECAR60SA * (VU2030_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VU2035Value_EverCash60 = ECAR60SA * (VU2035_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VURetValue_EverCash60 = ECAR60SA * (VURet_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureGrowthValue_EverCash60 = ECAR60SA * (VUVentureGrowth_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));//
                    VUVentureBlueChipValue_EverCash60 = ECAR60SA * (VUVentureBlueChip_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));//
                    VUVentureDanaValue_EverCash60 = ECAR60SA * (VUVentureDana_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));//
                    VUVentureManagedValue_EverCash60 = ECAR60SA * (VUVentureManaged_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));//
                    VUVentureIncomeValue_EverCash60 = ECAR60SA * (VUVentureIncome_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));//
                    VUVenture6666Value_EverCash60 = ECAR60SA * (VUVenture6666_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));//
                    VUVenture7777Value_EverCash60 = ECAR60SA * (VUVenture7777_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));//
                    VUVenture8888Value_EverCash60 = ECAR60SA * (VUVenture8888_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));//
                    VUVenture9999Value_EverCash60 = ECAR60SA * (VUVenture9999_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));//
                    VUDanaValue_EverCash60 = ECAR60SA * (VUDana_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUSmartValue_EverCash60 = ECAR60SA * (VUSmart_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureValue_EverCash60 = ECAR60SA * (VUVenture_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUCashValue_EverCash60 = 0.00;
                    
                }
            }
            else if (aaPolicyYear >= FundTerm2028 && aaPolicyYear <= FundTermPrev2030) {
                if (VUCash_FundAllo_Percen == 100) {
                    VU2023Value_EverCash60 = 0.00;
                    VU2025Value_EverCash60 = 0.00;
                    VU2028Value_EverCash60 = 0.00;
                    VU2030Value_EverCash60 = 0.00;
                    VU2035Value_EverCash60 = 0.00;
                    VURetValue_EverCash60 = 0.00;
                    VUVentureGrowthValue_EverCash60 = 0.00;//
                    VUVentureBlueChipValue_EverCash60 = 0.00;//
                    VUVentureDanaValue_EverCash60 = 0.00;//
                    VUVentureManagedValue_EverCash60 = 0.00;//
                    VUVentureIncomeValue_EverCash60 = 0.00;//
                    VUVenture6666Value_EverCash60 = 0.00;//
                    VUVenture7777Value_EverCash60 = 0.00;//
                    VUVenture8888Value_EverCash60 = 0.00;//
                    VUVenture9999Value_EverCash60 = 0.00;//
                    VUDanaValue_EverCash60 = 0.00;
                    VUSmartValue_EverCash60 = 0.00;
                    VUVentureValue_EverCash60 = 0.00;
                    VUCashValue_EverCash60 = ECAR60SA;
                    
                }
                else{
                    VU2023Value_EverCash60 = 0.00;
                    VU2025Value_EverCash60 = 0.00;
                    VU2028Value_EverCash60 = ECAR60SA * (VU2028_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VU2030Value_EverCash60 = ECAR60SA * (VU2030_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VU2035Value_EverCash60 = ECAR60SA * (VU2035_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VURetValue_EverCash60 = ECAR60SA * (VURet_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureGrowthValue_EverCash60 = ECAR60SA * (VUVentureGrowth_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));//
                    VUVentureBlueChipValue_EverCash60 = ECAR60SA * (VUVentureBlueChip_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));//
                    VUVentureDanaValue_EverCash60 = ECAR60SA * (VUVentureDana_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));//
                    VUVentureManagedValue_EverCash60 = ECAR60SA * (VUVentureManaged_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));//
                    VUVentureIncomeValue_EverCash60 = ECAR60SA * (VUVentureIncome_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));//
                    VUVenture6666Value_EverCash60 = ECAR60SA * (VUVenture6666_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));//
                    VUVenture7777Value_EverCash60 = ECAR60SA * (VUVenture7777_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));//
                    VUVenture8888Value_EverCash60 = ECAR60SA * (VUVenture8888_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));//
                    VUVenture9999Value_EverCash60 = ECAR60SA * (VUVenture9999_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));//
                    VUDanaValue_EverCash60 = ECAR60SA * (VUDana_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUSmartValue_EverCash60 = ECAR60SA * (VUSmart_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureValue_EverCash60 = ECAR60SA * (VUVenture_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUCashValue_EverCash60 = 0.00;
                    
                }
            }
            else if (aaPolicyYear >= FundTerm2030 && aaPolicyYear <= FundTermPrev2035) {
                if (VUCash_FundAllo_Percen == 100) {
                    VU2023Value_EverCash60 = 0.00;
                    VU2025Value_EverCash60 = 0.00;
                    VU2028Value_EverCash60 = 0.00;
                    VU2030Value_EverCash60 = 0.00;
                    VU2035Value_EverCash60 = 0.00;
                    VURetValue_EverCash60 = 0.00;
                    VUVentureGrowthValue_EverCash60 = 0.00;//
                    VUVentureBlueChipValue_EverCash60 = 0.00;//
                    VUVentureDanaValue_EverCash60 = 0.00;//
                    VUVentureManagedValue_EverCash60 = 0.00;//
                    VUVentureIncomeValue_EverCash60 = 0.00;//
                    VUVenture6666Value_EverCash60 = 0.00;//
                    VUVenture7777Value_EverCash60 = 0.00;//
                    VUVenture8888Value_EverCash60 = 0.00;//
                    VUVenture9999Value_EverCash60 = 0.00;//
                    VUDanaValue_EverCash60 = 0.00;
                    VUSmartValue_EverCash60 = 0.00;
                    VUVentureValue_EverCash60 = 0.00;
                    VUCashValue_EverCash60 = ECAR60SA;
                    
                }
                else{
                    VU2023Value_EverCash60 = 0.00;
                    VU2025Value_EverCash60 = 0.00;
                    VU2028Value_EverCash60 = 0.00;
                    VU2030Value_EverCash60 = ECAR60SA * (VU2030_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VU2035Value_EverCash60 = ECAR60SA * (VU2035_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VURetValue_EverCash60 = ECAR60SA * (VURet_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureGrowthValue_EverCash60 = ECAR60SA * (VUVentureGrowth_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));//
                    VUVentureBlueChipValue_EverCash60 = ECAR60SA * (VUVentureBlueChip_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));//
                    VUVentureDanaValue_EverCash60 = ECAR60SA * (VUVentureDana_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));//
                    VUVentureManagedValue_EverCash60 = ECAR60SA * (VUVentureManaged_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));//
                    VUVentureIncomeValue_EverCash60 = ECAR60SA * (VUVentureIncome_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));//
                    VUVenture6666Value_EverCash60 = ECAR60SA * (VUVenture6666_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));//
                    VUVenture7777Value_EverCash60 = ECAR60SA * (VUVenture7777_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));//
                    VUVenture8888Value_EverCash60 = ECAR60SA * (VUVenture8888_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));//
                    VUVenture9999Value_EverCash60 = ECAR60SA * (VUVenture9999_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));//
                    VUDanaValue_EverCash60 = ECAR60SA * (VUDana_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUSmartValue_EverCash60 = ECAR60SA * (VUSmart_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureValue_EverCash60 = ECAR60SA * (VUVenture_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUCashValue_EverCash60 = 0.00;
                    
                }
            }
            else if (aaPolicyYear == FundTermPrev2035) {
                if (VUCash_FundAllo_Percen == 100) {
                    VU2023Value_EverCash60 = 0.00;
                    VU2025Value_EverCash60 = 0.00;
                    VU2028Value_EverCash60 = 0.00;
                    VU2030Value_EverCash60 = 0.00;
                    VU2035Value_EverCash60 = 0.00;
                    VURetValue_EverCash60 = 0.00;
                    VUVentureGrowthValue_EverCash60 = 0.00;//
                    VUVentureBlueChipValue_EverCash60 = 0.00;//
                    VUVentureDanaValue_EverCash60 = 0.00;//
                    VUVentureManagedValue_EverCash60 = 0.00;//
                    VUVentureIncomeValue_EverCash60 = 0.00;//
                    VUVenture6666Value_EverCash60 = 0.00;//
                    VUVenture7777Value_EverCash60 = 0.00;//
                    VUVenture8888Value_EverCash60 = 0.00;//
                    VUVenture9999Value_EverCash60 = 0.00;//
                    VUDanaValue_EverCash60 = 0.00;
                    VUSmartValue_EverCash60 = 0.00;
                    VUVentureValue_EverCash60 = 0.00;
                    VUCashValue_EverCash60 = ECAR60SA;
                    
                }
                else{
                    VU2023Value_EverCash60 = 0.00;
                    VU2025Value_EverCash60 = 0.00;
                    VU2028Value_EverCash60 = 0.00;
                    VU2030Value_EverCash60 = 0.00;
                    VU2035Value_EverCash60 = 0.00;
                    VURetValue_EverCash60 = ECAR60SA * (VURet_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureGrowthValue_EverCash60 = ECAR60SA * (VUVentureGrowth_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));//
                    VUVentureBlueChipValue_EverCash60 = ECAR60SA * (VUVentureBlueChip_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));//
                    VUVentureDanaValue_EverCash60 = ECAR60SA * (VUVentureDana_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));//
                    VUVentureManagedValue_EverCash60 = ECAR60SA * (VUVentureManaged_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));//
                    VUVentureIncomeValue_EverCash60 = ECAR60SA * (VUVentureIncome_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));//
                    VUVenture6666Value_EverCash60 = ECAR60SA * (VUVenture6666_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));//
                    VUVenture7777Value_EverCash60 = ECAR60SA * (VUVenture7777_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));//
                    VUVenture8888Value_EverCash60 = ECAR60SA * (VUVenture8888_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));//
                    VUVenture9999Value_EverCash60 = ECAR60SA * (VUVenture9999_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));//
                    VUDanaValue_EverCash60 = ECAR60SA * (VUDana_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUSmartValue_EverCash60 = ECAR60SA * (VUSmart_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureValue_EverCash60 = ECAR60SA * (VUVenture_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUCashValue_EverCash60 = 0.00;
                    
                }
            }
            else if (aaPolicyYear > FundTermPrev2035) {
                if (VUCash_FundAllo_Percen == 100) {
                    VU2023Value_EverCash60 = 0.00;
                    VU2025Value_EverCash60 = 0.00;
                    VU2028Value_EverCash60 = 0.00;
                    VU2030Value_EverCash60 = 0.00;
                    VU2035Value_EverCash60 = 0.00;
                    VURetValue_EverCash60 = 0.00;
                    VUVentureGrowthValue_EverCash60 = 0.00;//
                    VUVentureBlueChipValue_EverCash60 = 0.00;//
                    VUVentureDanaValue_EverCash60 = 0.00;//
                    VUVentureManagedValue_EverCash60 = 0.00;//
                    VUVentureIncomeValue_EverCash60 = 0.00;//
                    VUVenture6666Value_EverCash60 = 0.00;//
                    VUVenture7777Value_EverCash60 = 0.00;//
                    VUVenture8888Value_EverCash60 = 0.00;//
                    VUVenture9999Value_EverCash60 = 0.00;//
                    VUDanaValue_EverCash60 = 0.00;
                    VUSmartValue_EverCash60 = 0.00;
                    VUVentureValue_EverCash60 = 0.00;
                    VUCashValue_EverCash60 = ECAR60SA;
                    
                }
                else{
                    VU2023Value_EverCash60 = 0.00;
                    VU2025Value_EverCash60 = 0.00;
                    VU2028Value_EverCash60 = 0.00;
                    VU2030Value_EverCash60 = 0.00;
                    VU2035Value_EverCash60 = ECAR60SA_bumpMode * (VU2035_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VURetValue_EverCash60 = ECAR60SA_bumpMode * (VURet_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureGrowthValue_EverCash60 = ECAR60SA_bumpMode * (VUVentureGrowth_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));//
                    VUVentureBlueChipValue_EverCash60 = ECAR60SA_bumpMode * (VUVentureBlueChip_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));//
                    VUVentureDanaValue_EverCash60 = ECAR60SA_bumpMode * (VUVentureDana_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));//
                    VUVentureManagedValue_EverCash60 = ECAR60SA_bumpMode * (VUVentureManaged_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));//
                    VUVentureIncomeValue_EverCash60 = ECAR60SA_bumpMode * (VUVentureIncome_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));//
                    VUVenture6666Value_EverCash60 = ECAR60SA_bumpMode * (VUVenture6666_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));//
                    VUVenture7777Value_EverCash60 = ECAR60SA_bumpMode * (VUVenture7777_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));//
                    VUVenture8888Value_EverCash60 = ECAR60SA_bumpMode * (VUVenture8888_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));//
                    VUVenture9999Value_EverCash60 = ECAR60SA_bumpMode * (VUVenture9999_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));//
                    VUDanaValue_EverCash60 = ECAR60SA_bumpMode * (VUDana_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUSmartValue_EverCash60 = ECAR60SA_bumpMode * (VUSmart_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureValue_EverCash60 = ECAR60SA_bumpMode * (VUVenture_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUCashValue_EverCash60 = 0.00;
                    
                }
            }
            else{
                if (VUCash_FundAllo_Percen == 100) {
                    VU2023Value_EverCash60 = 0.00;
                    VU2025Value_EverCash60 = 0.00;
                    VU2028Value_EverCash60 = 0.00;
                    VU2030Value_EverCash60 = 0.00;
                    VU2035Value_EverCash60 = 0.00;
                    VURetValue_EverCash60 = 0.00;
                    VUVentureGrowthValue_EverCash60 = 0.00;//
                    VUVentureBlueChipValue_EverCash60 = 0.00;//
                    VUVentureDanaValue_EverCash60 = 0.00;//
                    VUVentureManagedValue_EverCash60 = 0.00;//
                    VUVentureIncomeValue_EverCash60 = 0.00;//
                    VUVenture6666Value_EverCash60 = 0.00;//
                    VUVenture7777Value_EverCash60 = 0.00;//
                    VUVenture8888Value_EverCash60 = 0.00;//
                    VUVenture9999Value_EverCash60 = 0.00;//
                    VUDanaValue_EverCash60 = 0.00;
                    VUSmartValue_EverCash60 = 0.00;
                    VUVentureValue_EverCash60 = 0.00;
                    VUCashValue_EverCash60 = ECAR60SA;
                    
                    
                }
                else{
                    
                    VU2023Value_EverCash60 = ECAR60SA * (VU2023_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VU2025Value_EverCash60 = ECAR60SA * (VU2025_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VU2028Value_EverCash60 = ECAR60SA * (VU2028_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VU2030Value_EverCash60 = ECAR60SA * (VU2030_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VU2035Value_EverCash60 = ECAR60SA * (VU2035_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VURetValue_EverCash60 = ECAR60SA * (VURet_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureGrowthValue_EverCash60 = ECAR60SA * (VUVentureGrowth_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));//
                    VUVentureBlueChipValue_EverCash60 = ECAR60SA * (VUVentureBlueChip_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));//
                    VUVentureDanaValue_EverCash60 = ECAR60SA * (VUVentureDana_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));//
                    VUVentureManagedValue_EverCash60 = ECAR60SA * (VUVentureManaged_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));//
                    VUVentureIncomeValue_EverCash60 = ECAR60SA * (VUVentureIncome_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));//
                    VUVenture6666Value_EverCash60 = ECAR60SA * (VUVenture6666_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));//
                    VUVenture7777Value_EverCash60 = ECAR60SA * (VUVenture7777_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));//
                    VUVenture8888Value_EverCash60 = ECAR60SA * (VUVenture8888_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));//
                    VUVenture9999Value_EverCash60 = ECAR60SA * (VUVenture9999_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));//
                    VUDanaValue_EverCash60 = ECAR60SA * (VUDana_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUSmartValue_EverCash60 = ECAR60SA * (VUSmart_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUVentureValue_EverCash60 = ECAR60SA * (VUVenture_FundAllo_Percen / (100 - VUCash_FundAllo_Percen));
                    VUCashValue_EverCash60 = 0.00;
                    
                }
                
            }
            
        }
        else{
            VU2023Value_EverCash60 = 0.00;
            VU2025Value_EverCash60 = 0.00;
            VU2028Value_EverCash60 = 0.00;
            VU2030Value_EverCash60 = 0.00;
            VU2035Value_EverCash60 = 0.00;
            VURetValue_EverCash60 = 0.00;
            VUVentureGrowthValue_EverCash60 = 0.00;//
            VUVentureBlueChipValue_EverCash60 = 0.00;//
            VUVentureDanaValue_EverCash60 = 0.00;//
            VUVentureManagedValue_EverCash60 = 0.00;//
            VUVentureIncomeValue_EverCash60 = 0.00;//
            VUVenture6666Value_EverCash60 = 0.00;//
            VUVenture7777Value_EverCash60 = 0.00;//
            VUVenture8888Value_EverCash60 = 0.00;//
            VUVenture9999Value_EverCash60 = 0.00;//
            VUDanaValue_EverCash60 = 0.00;
            VUSmartValue_EverCash60 = 0.00;
            VUVentureValue_EverCash60 = 0.00;
            VUCashValue_EverCash60 = 0.00;
        }
    }
    
    
}




#pragma mark - Calculate Yearly Fund Value for Basic

-(double)ReturnFundValueOfTheYearValueTotalHigh: (int)aaPolicyYear{
	
	if (aaPolicyYear == YearDiff2035 || aaPolicyYear == YearDiff2030 || aaPolicyYear == YearDiff2028
		|| aaPolicyYear == YearDiff2025 || aaPolicyYear == YearDiff2023) {
		return [self ReturnFundValueOfTheYearVU2023ValueHigh:aaPolicyYear andYearOrMonth:@"M"] +
		[self ReturnFundValueOfTheYearVU2025ValueHigh:aaPolicyYear andYearOrMonth:@"M"] +
		[self ReturnFundValueOfTheYearVU2028ValueHigh:aaPolicyYear andYearOrMonth:@"M"] +
		[self ReturnFundValueOfTheYearVU2030ValueHigh:aaPolicyYear andYearOrMonth:@"M"] +
		[self ReturnFundValueOfTheYearVU2035ValueHigh:aaPolicyYear andYearOrMonth:@"M"] +
		[self ReturnFundValueOfTheYearVURetValueHigh:aaPolicyYear andYearOrMonth:@"M"] +
		[self ReturnFundValueOfTheYearVUDanaValueHigh:aaPolicyYear andYearOrMonth:@"M"] +
        [self ReturnFundValueOfTheYearVUSmartValueHigh:aaPolicyYear andYearOrMonth:@"M"] +
		[self ReturnFundValueOfTheYearVUVentureValueHigh:aaPolicyYear andYearOrMonth:@"M"] +
        [self ReturnFundValueOfTheYearVUVentureBlueChipValueHigh:aaPolicyYear andYearOrMonth:@"M"] +
        [self ReturnFundValueOfTheYearVUVentureDanaValueHigh:aaPolicyYear andYearOrMonth:@"M"]+
        [self ReturnFundValueOfTheYearVUVentureGrowthValueHigh:aaPolicyYear andYearOrMonth:@"M"] +
        [self ReturnFundValueOfTheYearVUVentureIncomeValueHigh:aaPolicyYear andYearOrMonth:@"M"] +
        [self ReturnFundValueOfTheYearVUVentureManagedValueHigh:aaPolicyYear andYearOrMonth:@"M"];
	}
	else{
		return //[self ReturnFundValueOfTheYearVU2023ValueHigh:aaPolicyYear andYearOrMonth:@"Y"]
		[self ReturnFundValueOfTheYearVU2025ValueHigh:aaPolicyYear andYearOrMonth:@"Y"] +
		[self ReturnFundValueOfTheYearVU2028ValueHigh:aaPolicyYear andYearOrMonth:@"Y"] +
		[self ReturnFundValueOfTheYearVU2030ValueHigh:aaPolicyYear andYearOrMonth:@"Y"] +
		[self ReturnFundValueOfTheYearVU2035ValueHigh:aaPolicyYear andYearOrMonth:@"Y"] +
		[self ReturnFundValueOfTheYearVURetValueHigh:aaPolicyYear andYearOrMonth:@"Y"] +
		[self ReturnFundValueOfTheYearVUDanaValueHigh:aaPolicyYear andYearOrMonth:@"Y"] +
        [self ReturnFundValueOfTheYearVUSmartValueHigh:aaPolicyYear andYearOrMonth:@"Y"] +
		[self ReturnFundValueOfTheYearVUVentureValueHigh:aaPolicyYear andYearOrMonth:@"Y"] +
        [self ReturnFundValueOfTheYearVUVentureBlueChipValueHigh:aaPolicyYear andYearOrMonth:@"Y"] +
        [self ReturnFundValueOfTheYearVUVentureDanaValueHigh:aaPolicyYear andYearOrMonth:@"Y"]+
        [self ReturnFundValueOfTheYearVUVentureGrowthValueHigh:aaPolicyYear andYearOrMonth:@"Y"] +
        [self ReturnFundValueOfTheYearVUVentureIncomeValueHigh:aaPolicyYear andYearOrMonth:@"Y"] +
        [self ReturnFundValueOfTheYearVUVentureManagedValueHigh:aaPolicyYear andYearOrMonth:@"Y"];
	}
	
	/*
	 return  0;
	 */
}



-(double)ReturnFundValueOfTheYearVU2023ValueHigh: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth {
	if (aaPolicyYear <= YearDiff2023) {
		double temp = [self ReturnVU2023ValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
		if ([aaYearOrMonth isEqualToString:@"M"]) {
			MonthFundValueOfTheYearVU2023ValueHigh_Basic = temp;
		}
		else{
			FundValueOfTheYearVU2023ValueHigh_Basic = temp;
		}
		return temp;
		//return [self ReturnVU2023ValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
	} else {
		return 0;
	}
}

-(double)ReturnFundValueOfTheYearVU2025ValueHigh: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth{
	if (aaPolicyYear <= YearDiff2025) {
		double temp = [self ReturnVU2025ValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
		if ([aaYearOrMonth isEqualToString:@"M"]) {
			MonthFundValueOfTheYearVU2025ValueHigh_Basic = temp;
		}
		else{
			FundValueOfTheYearVU2025ValueHigh_Basic = temp;
		}
		return temp;
		//return [self ReturnVU2025ValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
	} else {
		return 0;
	}
}


-(double)ReturnFundValueOfTheYearVU2028ValueHigh: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth{
	if (aaPolicyYear <= YearDiff2028) {
		double temp = [self ReturnVU2028ValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
		if ([aaYearOrMonth isEqualToString:@"M"]) {
			MonthFundValueOfTheYearVU2028ValueHigh_Basic = temp;
		}
		else{
			FundValueOfTheYearVU2028ValueHigh_Basic = temp;
		}
		return temp;
		//return [self ReturnVU2028ValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
	} else {
		return 0;
	}
}

-(double)ReturnFundValueOfTheYearVU2030ValueHigh: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth{
	if (aaPolicyYear <= YearDiff2030) {
		double temp = [self ReturnVU2030ValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];;
		if ([aaYearOrMonth isEqualToString:@"M"]) {
			MonthFundValueOfTheYearVU2030ValueHigh_Basic = temp;
		}
		else{
			FundValueOfTheYearVU2030ValueHigh_Basic = temp;
		}
		return temp;
		
	} else {
		return 0;
	}
}

-(double)ReturnFundValueOfTheYearVU2035ValueHigh: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth{
	if (aaPolicyYear <= YearDiff2035) {
		double temp = [self ReturnVU2035ValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
		if ([aaYearOrMonth isEqualToString:@"M"]) {
			MonthFundValueOfTheYearVU2035ValueHigh_Basic = temp;
		}
		else{
			FundValueOfTheYearVU2035ValueHigh_Basic = temp;
		}
		return temp;
	} else {
		return 0;
	}
}

-(double)ReturnFundValueOfTheYearVURetValueHigh: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth{
	double temp = [self ReturnVURetValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
	if ([aaYearOrMonth isEqualToString:@"M"]) {
		MonthFundValueOfTheYearVURetValueHigh_Basic = temp;
	}
	else
	{
		FundValueOfTheYearVURetValueHigh_Basic = temp;
	}
	
	
	return temp;
}

-(double)ReturnFundValueOfTheYearVUDanaValueHigh: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth{
	double temp = [self ReturnVUDanaValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
	if ([aaYearOrMonth isEqualToString:@"M"]) {
		MonthFundValueOfTheYearVUDanaValueHigh_Basic = temp;
	}
	else
	{
		FundValueOfTheYearVUDanaValueHigh_Basic = temp;
	}
	return temp;
}

-(double)ReturnFundValueOfTheYearVUSmartValueHigh: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth{
	double temp = [self ReturnVUSmartValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
	if ([aaYearOrMonth isEqualToString:@"M"]) {
		MonthFundValueOfTheYearVUSmartValueHigh_Basic = temp;
	}
	else
	{
		FundValueOfTheYearVUSmartValueHigh_Basic = temp;
	}
	
	
	return temp;
}

-(double)ReturnFundValueOfTheYearVUVentureValueHigh: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth{
	double temp = [self ReturnVUVentureValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
	if ([aaYearOrMonth isEqualToString:@"M"]) {
		MonthFundValueOfTheYearVUVentureValueHigh_Basic = temp;
	}
	else
	{
		FundValueOfTheYearVUVentureValueHigh_Basic = temp;
	}
	return temp;
}

-(double)ReturnMonthFundValueOfTheYearValueTotalHigh: (int)aaPolicyYear andMonth:(int)aaMonth{
	
	[self ReturnMonthFundValueOfTheYearVURetValueHigh:aaPolicyYear andYearOrMonth:@"M" andMonth:aaMonth];
	[self ReturnMonthFundValueOfTheYearVUDanaValueHigh:aaPolicyYear andYearOrMonth:@"M" andMonth:aaMonth];
    [self ReturnMonthFundValueOfTheYearVUSmartValueHigh:aaPolicyYear andYearOrMonth:@"M" andMonth:aaMonth];
	[self ReturnMonthFundValueOfTheYearVUVentureValueHigh:aaPolicyYear andYearOrMonth:@"M" andMonth:aaMonth];
    [self ReturnMonthFundValueOfTheYearVUVentureBlueChipValueHigh:aaPolicyYear andYearOrMonth:@"M" andMonth:aaMonth];
    [self ReturnMonthFundValueOfTheYearVUVentureDanaValueHigh:aaPolicyYear andYearOrMonth:@"M" andMonth:aaMonth];
    [self ReturnMonthFundValueOfTheYearVUVentureGrowthValueHigh:aaPolicyYear andYearOrMonth:@"M" andMonth:aaMonth];
    [self ReturnMonthFundValueOfTheYearVUVentureIncomeValueHigh:aaPolicyYear andYearOrMonth:@"M" andMonth:aaMonth];
    [self ReturnMonthFundValueOfTheYearVUVentureManagedValueHigh:aaPolicyYear andYearOrMonth:@"M" andMonth:aaMonth];
	[self ReturnMonthFundValueOfTheYearVU2023ValueHigh:aaPolicyYear andYearOrMonth:@"M" andMonth:aaMonth];
	[self ReturnMonthFundValueOfTheYearVU2025ValueHigh:aaPolicyYear andYearOrMonth:@"M" andMonth:aaMonth];
	[self ReturnMonthFundValueOfTheYearVU2028ValueHigh:aaPolicyYear andYearOrMonth:@"M" andMonth:aaMonth];
	[self ReturnMonthFundValueOfTheYearVU2030ValueHigh:aaPolicyYear andYearOrMonth:@"M" andMonth:aaMonth];
	[self ReturnMonthFundValueOfTheYearVU2035ValueHigh:aaPolicyYear andYearOrMonth:@"M" andMonth:aaMonth];

	
	
	return MonthVU2023ValueHigh + MonthVU2025ValueHigh + MonthVU2028ValueHigh + MonthVU2030ValueHigh + MonthVU2035ValueHigh + MonthVURetValueHigh + MonthVUDanaValueHigh + MonthVUSmartValueHigh + MonthVUVentureValueHigh + MonthVUVentureBlueChipValueHigh + MonthVUVentureDanaValueHigh + MonthVUVentureGrowthValueHigh + MonthVUVentureIncomeValueHigh + MonthVUVentureManagedValueHigh;
	//return  0;
	
	
}

-(double)ReturnMonthFundValueOfTheYearVU2023ValueHigh: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMonth:(int)aaMonth{
	
	if (aaPolicyYear <= YearDiff2023) {
		MonthVU2023ValueHigh = [self ReturnVU2023ValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:aaMonth];
		MonthFundValueOfTheYearVU2023ValueHigh_Basic = MonthVU2023ValueHigh;
		return MonthVU2023ValueHigh;
	} else {
		MonthVU2023ValueHigh = 0;
		return 0;
	}
}

-(double)ReturnMonthFundValueOfTheYearVU2025ValueHigh: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMonth:(int)aaMonth{
	
	if (aaPolicyYear <= YearDiff2025) {
		MonthVU2025ValueHigh = [self ReturnVU2025ValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:aaMonth];
		MonthFundValueOfTheYearVU2025ValueHigh_Basic = MonthVU2025ValueHigh;
		return MonthVU2025ValueHigh;
	} else {
		MonthVU2025ValueHigh = 0;
		return 0;
	}
}


-(double)ReturnMonthFundValueOfTheYearVU2028ValueHigh: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMonth:(int)aaMonth{
	if (aaPolicyYear <= YearDiff2028) {
		MonthVU2028ValueHigh = [self ReturnVU2028ValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:aaMonth];
		MonthFundValueOfTheYearVU2028ValueHigh_Basic = MonthVU2028ValueHigh;
		return MonthVU2028ValueHigh;
	} else {
		MonthVU2028ValueHigh = 0;
		return 0;
	}
}

-(double)ReturnMonthFundValueOfTheYearVU2030ValueHigh: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMonth:(int)aaMonth{
	
	if (aaPolicyYear <= YearDiff2030) {
		
		MonthVU2030ValueHigh = [self ReturnVU2030ValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:aaMonth];
		MonthFundValueOfTheYearVU2030ValueHigh_Basic = MonthVU2030ValueHigh;
		return MonthVU2030ValueHigh;
	} else {
		MonthVU2030ValueHigh = 0;
		return 0;
	}
    
}

-(double)ReturnMonthFundValueOfTheYearVU2035ValueHigh: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMonth:(int)aaMonth{
	if (aaPolicyYear <= YearDiff2035) {
		MonthVU2035ValueHigh = [self ReturnVU2035ValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:aaMonth];
		MonthFundValueOfTheYearVU2035ValueHigh_Basic = MonthVU2035ValueHigh;
		return MonthVU2035ValueHigh;
	} else {
		MonthVU2035ValueHigh = 0;
		return 0;
	}
}

-(double)ReturnMonthFundValueOfTheYearVURetValueHigh: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMonth:(int)aaMonth{
    
	MonthVURetValueHigh = [self ReturnVURetValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:aaMonth];
	MonthFundValueOfTheYearVURetValueHigh_Basic = MonthVURetValueHigh;
	return MonthVURetValueHigh;
}

-(double)ReturnMonthFundValueOfTheYearVUDanaValueHigh: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMonth:(int)aaMonth{
	MonthVUDanaValueHigh = [self ReturnVUDanaValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:aaMonth];
	MonthFundValueOfTheYearVUDanaValueHigh_Basic = MonthVUDanaValueHigh;
	return MonthVUDanaValueHigh;
}

-(double)ReturnMonthFundValueOfTheYearVUSmartValueHigh: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMonth:(int)aaMonth{
    
	MonthVUSmartValueHigh = [self ReturnVUSmartValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:aaMonth];
	MonthFundValueOfTheYearVUSmartValueHigh_Basic = MonthVUSmartValueHigh;
	return MonthVUSmartValueHigh;
}

-(double)ReturnMonthFundValueOfTheYearVUVentureValueHigh: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMonth:(int)aaMonth{
	MonthVUVentureValueHigh = [self ReturnVUVentureValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:aaMonth];
	MonthFundValueOfTheYearVUVentureValueHigh_Basic = MonthVUVentureValueHigh;
	return MonthVUVentureValueHigh;
}

-(double)ReturnFundValueOfTheYearValueTotalMedian: (int)aaPolicyYear{
	
	if (aaPolicyYear == YearDiff2035 || aaPolicyYear == YearDiff2030 || aaPolicyYear == YearDiff2028
		|| aaPolicyYear == YearDiff2025 || aaPolicyYear == YearDiff2023) {
		
		return [self ReturnFundValueOfTheYearVU2023ValueMedian:aaPolicyYear andYearOrMonth:@"M"] +
		[self ReturnFundValueOfTheYearVU2025ValueMedian:aaPolicyYear andYearOrMonth:@"M"] +
		[self ReturnFundValueOfTheYearVU2028ValueMedian:aaPolicyYear andYearOrMonth:@"M"] +
		[self ReturnFundValueOfTheYearVU2030ValueMedian:aaPolicyYear andYearOrMonth:@"M"] +
		[self ReturnFundValueOfTheYearVU2035ValueMedian:aaPolicyYear andYearOrMonth:@"M"] +
		[self ReturnFundValueOfTheYearVURetValueMedian:aaPolicyYear andYearOrMonth:@"M"] +
		[self ReturnFundValueOfTheYearVUDanaValueMedian:aaPolicyYear andYearOrMonth:@"M"] +
 		[self ReturnFundValueOfTheYearVUSmartValueMedian:aaPolicyYear andYearOrMonth:@"M"] +
		[self ReturnFundValueOfTheYearVUVentureValueMedian:aaPolicyYear andYearOrMonth:@"M"] +
        [self ReturnFundValueOfTheYearVUVentureBlueChipValueMedian:aaPolicyYear andYearOrMonth:@"M"] +
        [self ReturnFundValueOfTheYearVUVentureDanaValueMedian:aaPolicyYear andYearOrMonth:@"M"] +
        [self ReturnFundValueOfTheYearVUVentureGrowthValueMedian:aaPolicyYear andYearOrMonth:@"M"] +
        [self ReturnFundValueOfTheYearVUVentureIncomeValueMedian:aaPolicyYear andYearOrMonth:@"M"] +
        [self ReturnFundValueOfTheYearVUVentureManagedValueMedian:aaPolicyYear andYearOrMonth:@"M"];
	}
	else{
		return [self ReturnFundValueOfTheYearVU2023ValueMedian:aaPolicyYear andYearOrMonth:@"Y"] +
		[self ReturnFundValueOfTheYearVU2025ValueMedian:aaPolicyYear andYearOrMonth:@"Y"] +
		[self ReturnFundValueOfTheYearVU2028ValueMedian:aaPolicyYear andYearOrMonth:@"Y"] +
		[self ReturnFundValueOfTheYearVU2030ValueMedian:aaPolicyYear andYearOrMonth:@"Y"] +
		[self ReturnFundValueOfTheYearVU2035ValueMedian:aaPolicyYear andYearOrMonth:@"Y"] +
		[self ReturnFundValueOfTheYearVURetValueMedian:aaPolicyYear andYearOrMonth:@"Y"] +
		[self ReturnFundValueOfTheYearVUDanaValueMedian:aaPolicyYear andYearOrMonth:@"Y"] +
        [self ReturnFundValueOfTheYearVUSmartValueMedian:aaPolicyYear andYearOrMonth:@"Y"] +
		[self ReturnFundValueOfTheYearVUVentureValueMedian:aaPolicyYear andYearOrMonth:@"Y"] +
        [self ReturnFundValueOfTheYearVUVentureBlueChipValueMedian:aaPolicyYear andYearOrMonth:@"Y"] +
        [self ReturnFundValueOfTheYearVUVentureDanaValueMedian:aaPolicyYear andYearOrMonth:@"Y"] +
        [self ReturnFundValueOfTheYearVUVentureGrowthValueMedian:aaPolicyYear andYearOrMonth:@"Y"] +
        [self ReturnFundValueOfTheYearVUVentureIncomeValueMedian:aaPolicyYear andYearOrMonth:@"Y"] +
        [self ReturnFundValueOfTheYearVUVentureManagedValueMedian:aaPolicyYear andYearOrMonth:@"Y"];
	}
	/*
	 return  0;
	 */
}


-(double)ReturnFundValueOfTheYearVU2023ValueMedian: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth{
	if (aaPolicyYear <= YearDiff2023) {
		double temp = [self ReturnVU2023ValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
		if ([aaYearOrMonth isEqualToString:@"M"]) {
			MonthFundValueOfTheYearVU2023ValueMedian_Basic = temp;
		}
		else
		{
			FundValueOfTheYearVU2023ValueMedian_Basic = temp;
		}
		
		return temp;
		//return [self ReturnVU2023ValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
	} else {
		return 0;
	}
}

-(double)ReturnFundValueOfTheYearVU2025ValueMedian: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth{
	if (aaPolicyYear <= YearDiff2025) {
		double temp = [self ReturnVU2025ValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
		if ([aaYearOrMonth isEqualToString:@"M"]) {
			MonthFundValueOfTheYearVU2025ValueMedian_Basic = temp;
		}
		else
		{
			FundValueOfTheYearVU2025ValueMedian_Basic = temp;
		}
		
		return temp;
		//return [self ReturnVU2025ValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
	} else {
		return 0;
	}
}


-(double)ReturnFundValueOfTheYearVU2028ValueMedian: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth{
	if (aaPolicyYear <= YearDiff2028) {
		double temp = [self ReturnVU2028ValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
		if ([aaYearOrMonth isEqualToString:@"M"]) {
			MonthFundValueOfTheYearVU2028ValueMedian_Basic = temp;
		}
		else
		{
			FundValueOfTheYearVU2028ValueMedian_Basic = temp;
		}
		
		return temp;
		//return [self ReturnVU2028ValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
	} else {
		return 0;
	}
}

-(double)ReturnFundValueOfTheYearVU2030ValueMedian: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth {
	if (aaPolicyYear <= YearDiff2030) {
		double temp = [self ReturnVU2030ValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
		if ([aaYearOrMonth isEqualToString:@"M"]) {
			MonthFundValueOfTheYearVU2030ValueMedian_Basic = temp;
		}
		else
		{
			FundValueOfTheYearVU2030ValueMedian_Basic = temp;
		}
		
		return temp;
		//return [self ReturnVU2030ValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
	} else {
		return 0;
	}
}

-(double)ReturnFundValueOfTheYearVU2035ValueMedian: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth{
	if (aaPolicyYear <= YearDiff2035) {
		double temp = [self ReturnVU2035ValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
		if ([aaYearOrMonth isEqualToString:@"M"]) {
			MonthFundValueOfTheYearVU2035ValueMedian_Basic = temp;
		}
		else
		{
			FundValueOfTheYearVU2035ValueMedian_Basic = temp;
		}
		
		return temp;
		//return [self ReturnVU2035ValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
	} else {
		return 0;
	}
}

-(double)ReturnFundValueOfTheYearVURetValueMedian: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth{
	
	double temp = [self ReturnVURetValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
	if ([aaYearOrMonth isEqualToString:@"M"]) {
		MonthFundValueOfTheYearVURetValueMedian_Basic = temp;
	}
	else
	{
		FundValueOfTheYearVURetValueMedian_Basic = temp;
	}
	
	return temp;
}

-(double)ReturnFundValueOfTheYearVUDanaValueMedian: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth{
	double temp = [self ReturnVUDanaValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
	if ([aaYearOrMonth isEqualToString:@"M"]) {
		MonthFundValueOfTheYearVUDanaValueMedian_Basic = temp;
	}
	else
	{
		FundValueOfTheYearVUDanaValueMedian_Basic = temp;
	}
	
	return temp;
	
	//return [self ReturnVUDanaValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
}

-(double)ReturnFundValueOfTheYearVUSmartValueMedian: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth{
	
	double temp = [self ReturnVUSmartValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
	if ([aaYearOrMonth isEqualToString:@"M"]) {
		MonthFundValueOfTheYearVUSmartValueMedian_Basic = temp;
	}
	else
	{
		FundValueOfTheYearVUSmartValueMedian_Basic = temp;
	}
	
	return temp;
}

-(double)ReturnFundValueOfTheYearVUVentureValueMedian: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth{
	double temp = [self ReturnVUVentureValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
	if ([aaYearOrMonth isEqualToString:@"M"]) {
		MonthFundValueOfTheYearVUVentureValueMedian_Basic = temp;
	}
	else
	{
		FundValueOfTheYearVUVentureValueMedian_Basic = temp;
	}
	
	return temp;
	
	//return [self ReturnVUDanaValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
}

-(double)ReturnMonthFundValueOfTheYearValueTotalMedian: (int)aaPolicyYear andMonth:(int)aaMonth{
	
	return [self ReturnMonthFundValueOfTheYearVU2023ValueMedian:aaPolicyYear andYearOrMonth:@"M" andMont:aaMonth] +
	[self ReturnMonthFundValueOfTheYearVU2025ValueMedian:aaPolicyYear andYearOrMonth:@"M" andMont:aaMonth] +
	[self ReturnMonthFundValueOfTheYearVU2028ValueMedian:aaPolicyYear andYearOrMonth:@"M" andMont:aaMonth] +
	[self ReturnMonthFundValueOfTheYearVU2030ValueMedian:aaPolicyYear andYearOrMonth:@"M" andMont:aaMonth] +
	[self ReturnMonthFundValueOfTheYearVU2035ValueMedian:aaPolicyYear andYearOrMonth:@"M" andMont:aaMonth] +
	[self ReturnMonthFundValueOfTheYearVURetValueMedian:aaPolicyYear andYearOrMonth:@"M" andMont:aaMonth] +
	[self ReturnMonthFundValueOfTheYearVUDanaValueMedian:aaPolicyYear andYearOrMonth:@"M" andMont:aaMonth] +
    [self ReturnMonthFundValueOfTheYearVUSmartValueMedian:aaPolicyYear andYearOrMonth:@"M" andMont:aaMonth] +
	[self ReturnMonthFundValueOfTheYearVUVentureBlueChipValueMedian:aaPolicyYear andYearOrMonth:@"M" andMonth:aaMonth] +
    [self ReturnMonthFundValueOfTheYearVUVentureDanaValueMedian:aaPolicyYear andYearOrMonth:@"M" andMonth:aaMonth] +
    [self ReturnMonthFundValueOfTheYearVUVentureGrowthValueMedian:aaPolicyYear andYearOrMonth:@"M" andMonth:aaMonth] +
    [self ReturnMonthFundValueOfTheYearVUVentureIncomeValueMedian:aaPolicyYear andYearOrMonth:@"M" andMonth:aaMonth] +
    [self ReturnMonthFundValueOfTheYearVUVentureManagedValueMedian:aaPolicyYear andYearOrMonth:@"M" andMonth:aaMonth];
	
	
	
}


-(double)ReturnMonthFundValueOfTheYearVU2023ValueMedian: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMont:(int)aaMonth{
	if (aaPolicyYear <= YearDiff2023) {
		MonthVU2023ValueMedian = [self ReturnVU2023ValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:aaMonth];
		MonthFundValueOfTheYearVU2023ValueMedian_Basic = MonthVU2023ValueMedian;
		return MonthVU2023ValueMedian;
	} else {
		return 0;
	}
}

-(double)ReturnMonthFundValueOfTheYearVU2025ValueMedian: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMont:(int)aaMonth{
	if (aaPolicyYear <= YearDiff2025) {
		MonthVU2025ValueMedian = [self ReturnVU2025ValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:aaMonth];
		MonthFundValueOfTheYearVU2025ValueMedian_Basic = MonthVU2025ValueMedian;
		return 	MonthVU2025ValueMedian;
	} else {
		return 0;
	}
}


-(double)ReturnMonthFundValueOfTheYearVU2028ValueMedian: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMont:(int)aaMonth{
	if (aaPolicyYear <= YearDiff2028) {
		MonthVU2028ValueMedian = [self ReturnVU2028ValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:aaMonth];
		MonthFundValueOfTheYearVU2028ValueMedian_Basic = MonthVU2028ValueMedian;
		return 	MonthVU2028ValueMedian;
	} else {
		return 0;
	}
}

-(double)ReturnMonthFundValueOfTheYearVU2030ValueMedian: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMont:(int)aaMonth{
	if (aaPolicyYear <= YearDiff2030) {
		MonthVU2030ValueMedian = [self ReturnVU2030ValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:aaMonth];
		MonthFundValueOfTheYearVU2030ValueMedian_Basic = MonthVU2030ValueMedian;
		return 	MonthVU2030ValueMedian;
	} else {
		return 0;
	}
}

-(double)ReturnMonthFundValueOfTheYearVU2035ValueMedian: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMont:(int)aaMonth{
	if (aaPolicyYear <= YearDiff2035) {
		MonthVU2035ValueMedian = [self ReturnVU2035ValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:aaMonth];
		MonthFundValueOfTheYearVU2035ValueMedian_Basic = MonthVU2035ValueMedian;
		return 	MonthVU2035ValueMedian;
	} else {
		return 0;
	}
}

-(double)ReturnMonthFundValueOfTheYearVURetValueMedian: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMont:(int)aaMonth{
	MonthVURetValueMedian = [self ReturnVURetValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:aaMonth];
	MonthFundValueOfTheYearVURetValueMedian_Basic = MonthVURetValueMedian;
	return 	MonthVURetValueMedian;
}

-(double)ReturnMonthFundValueOfTheYearVUDanaValueMedian: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMont:(int)aaMonth{
	MonthVUDanaValueMedian = [self ReturnVUDanaValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:aaMonth];
	MonthFundValueOfTheYearVUDanaValueMedian_Basic = MonthVUDanaValueMedian;
	return 	MonthVUDanaValueMedian;
}

-(double)ReturnMonthFundValueOfTheYearVUSmartValueMedian: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMont:(int)aaMonth{
	MonthVUSmartValueMedian = [self ReturnVUSmartValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:aaMonth];
	MonthFundValueOfTheYearVUSmartValueMedian_Basic = MonthVUSmartValueMedian;
	return 	MonthVUSmartValueMedian;
}

-(double)ReturnMonthFundValueOfTheYearVUVentureValueMedian: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMont:(int)aaMonth{
	MonthVUVentureValueMedian = [self ReturnVUVentureValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:aaMonth];
	MonthFundValueOfTheYearVUVentureValueMedian_Basic = MonthVUVentureValueMedian;
	return 	MonthVUVentureValueMedian;
}

-(double)ReturnFundValueOfTheYearValueTotalLow: (int)aaPolicyYear{
	if (aaPolicyYear == YearDiff2035 || aaPolicyYear == YearDiff2030 || aaPolicyYear == YearDiff2028
		|| aaPolicyYear == YearDiff2025 || aaPolicyYear == YearDiff2023) {
		return [self ReturnFundValueOfTheYearVU2023ValueLow:aaPolicyYear andYearOrMonth:@"M"] +
		[self ReturnFundValueOfTheYearVU2025ValueLow:aaPolicyYear andYearOrMonth:@"M"] +
		[self ReturnFundValueOfTheYearVU2028ValueLow:aaPolicyYear andYearOrMonth:@"M"] +
		[self ReturnFundValueOfTheYearVU2030ValueLow:aaPolicyYear andYearOrMonth:@"M"] +
		[self ReturnFundValueOfTheYearVU2035ValueLow:aaPolicyYear andYearOrMonth:@"M"] +
		[self ReturnFundValueOfTheYearVURetValueLow:aaPolicyYear andYearOrMonth:@"M"] +
		[self ReturnFundValueOfTheYearVUDanaValueLow:aaPolicyYear andYearOrMonth:@"M"] +
        [self ReturnFundValueOfTheYearVUSmartValueLow:aaPolicyYear andYearOrMonth:@"M"] +
		[self ReturnFundValueOfTheYearVUVentureBlueChipValueLow:aaPolicyYear andYearOrMonth:@"M"] +
        [self ReturnFundValueOfTheYearVUVentureDanaValueLow:aaPolicyYear andYearOrMonth:@"M"] +
        [self ReturnFundValueOfTheYearVUVentureGrowthValueLow:aaPolicyYear andYearOrMonth:@"M"] +
        [self ReturnFundValueOfTheYearVUVentureIncomeValueLow:aaPolicyYear andYearOrMonth:@"M"] +
        [self ReturnFundValueOfTheYearVUVentureManagedValueLow:aaPolicyYear andYearOrMonth:@"M"];
        
	}
	else{
		return [self ReturnFundValueOfTheYearVU2023ValueLow:aaPolicyYear andYearOrMonth:@"Y"] +
		[self ReturnFundValueOfTheYearVU2025ValueLow:aaPolicyYear andYearOrMonth:@"Y"] +
		[self ReturnFundValueOfTheYearVU2028ValueLow:aaPolicyYear andYearOrMonth:@"Y"] +
		[self ReturnFundValueOfTheYearVU2030ValueLow:aaPolicyYear andYearOrMonth:@"Y"] +
		[self ReturnFundValueOfTheYearVU2035ValueLow:aaPolicyYear andYearOrMonth:@"Y"] +
		[self ReturnFundValueOfTheYearVURetValueLow:aaPolicyYear andYearOrMonth:@"Y"] +
		[self ReturnFundValueOfTheYearVUDanaValueLow:aaPolicyYear andYearOrMonth:@"Y"] +
        [self ReturnFundValueOfTheYearVUSmartValueLow:aaPolicyYear andYearOrMonth:@"Y"] +
		[self ReturnFundValueOfTheYearVUVentureValueLow:aaPolicyYear andYearOrMonth:@"Y"] +
        [self ReturnFundValueOfTheYearVUVentureBlueChipValueLow:aaPolicyYear andYearOrMonth:@"Y"] +
        [self ReturnFundValueOfTheYearVUVentureDanaValueLow:aaPolicyYear andYearOrMonth:@"Y"] +
        [self ReturnFundValueOfTheYearVUVentureGrowthValueLow:aaPolicyYear andYearOrMonth:@"Y"] +
        [self ReturnFundValueOfTheYearVUVentureIncomeValueLow:aaPolicyYear andYearOrMonth:@"Y"] +
        [self ReturnFundValueOfTheYearVUVentureManagedValueLow:aaPolicyYear andYearOrMonth:@"Y"];
	}
	
	
	/*
	 return  0;
	 */
}


-(double)ReturnFundValueOfTheYearVU2023ValueLow: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth{
	if (aaPolicyYear <= YearDiff2023) {
		double temp = [self ReturnVU2023ValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
		if ([aaYearOrMonth isEqualToString:@"M"]) {
			MonthFundValueOfTheYearVU2023ValueLow_Basic = temp;
		}
		else
		{
			FundValueOfTheYearVU2023ValueLow_Basic = temp;
		}
		
		return temp;
		//return [self ReturnVU2023ValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
	} else {
		return 0;
	}
}

-(double)ReturnFundValueOfTheYearVU2025ValueLow: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth{
	if (aaPolicyYear <= YearDiff2025) {
		double temp = [self ReturnVU2025ValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
		if ([aaYearOrMonth isEqualToString:@"M"]) {
			MonthFundValueOfTheYearVU2025ValueLow_Basic = temp;
		}
		else
		{
			FundValueOfTheYearVU2025ValueLow_Basic = temp;
		}
		
		return temp;
		//return [self ReturnVU2025ValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
	} else {
		return 0;
	}
}


-(double)ReturnFundValueOfTheYearVU2028ValueLow: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth{
	if (aaPolicyYear <= YearDiff2028) {
		double temp = [self ReturnVU2028ValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
		if ([aaYearOrMonth isEqualToString:@"M"]) {
			MonthFundValueOfTheYearVU2028ValueLow_Basic = temp;
		}
		else
		{
			FundValueOfTheYearVU2028ValueLow_Basic = temp;
		}
		
		return temp;
		//return [self ReturnVU2028ValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
	} else {
		return 0;
	}
}

-(double)ReturnFundValueOfTheYearVU2030ValueLow: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth{
	if (aaPolicyYear <= YearDiff2030) {
		double temp = [self ReturnVU2030ValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
		if ([aaYearOrMonth isEqualToString:@"M"]) {
			MonthFundValueOfTheYearVU2030ValueLow_Basic = temp;
		}
		else
		{
			FundValueOfTheYearVU2030ValueLow_Basic = temp;
		}
		
		return temp;
		//return [self ReturnVU2030ValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
	} else {
		return 0;
	}
}

-(double)ReturnFundValueOfTheYearVU2035ValueLow: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth{
	if (aaPolicyYear <= YearDiff2035) {
		double temp = [self ReturnVU2035ValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
		if ([aaYearOrMonth isEqualToString:@"M"]) {
			MonthFundValueOfTheYearVU2035ValueLow_Basic = temp;
		}
		else
		{
			FundValueOfTheYearVU2035ValueLow_Basic = temp;
		}
		
		return temp;
		//return [self ReturnVU2035ValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
	} else {
		return 0;
	}
}

-(double)ReturnFundValueOfTheYearVURetValueLow: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth{
	//return [self ReturnVURetValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
	double temp = [self ReturnVURetValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
	if ([aaYearOrMonth isEqualToString:@"M"]) {
		MonthFundValueOfTheYearVURetValueLow_Basic = temp;
	}
	else
	{
		FundValueOfTheYearVURetValueLow_Basic = temp;
	}
	
	return temp;
}

-(double)ReturnFundValueOfTheYearVUDanaValueLow: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth{
	double temp = [self ReturnVUDanaValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
	if ([aaYearOrMonth isEqualToString:@"M"]) {
		MonthFundValueOfTheYearVUDanaValueLow_Basic = temp;
	}
	else
	{
		FundValueOfTheYearVUDanaValueLow_Basic = temp;
	}
	
	return temp;
	//return [self ReturnVUDanaValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
}

-(double)ReturnFundValueOfTheYearVUSmartValueLow: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth{
	//return [self ReturnVURetValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
	double temp = [self ReturnVUSmartValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
	if ([aaYearOrMonth isEqualToString:@"M"]) {
		MonthFundValueOfTheYearVUSmartValueLow_Basic = temp;
	}
	else
	{
		FundValueOfTheYearVUSmartValueLow_Basic = temp;
	}
	
	return temp;
}

-(double)ReturnFundValueOfTheYearVUVentureValueLow: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth{
	double temp = [self ReturnVUVentureValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
	if ([aaYearOrMonth isEqualToString:@"M"]) {
		MonthFundValueOfTheYearVUVentureValueLow_Basic = temp;
	}
	else
	{
		FundValueOfTheYearVUVentureValueLow_Basic = temp;
	}
	
	return temp;
	//return [self ReturnVUDanaValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
}


-(double)ReturnMonthFundValueOfTheYearValueTotalLow: (int)aaPolicyYear andMonth:(int)aaMonth{
	
	return [self ReturnMonthFundValueOfTheYearVU2023ValueLow:aaPolicyYear andYearOrMonth:@"M" andMonth:aaMonth] +
	[self ReturnMonthFundValueOfTheYearVU2025ValueLow:aaPolicyYear andYearOrMonth:@"M" andMonth:aaMonth] +
	[self ReturnMonthFundValueOfTheYearVU2028ValueLow:aaPolicyYear andYearOrMonth:@"M" andMonth:aaMonth] +
	[self ReturnMonthFundValueOfTheYearVU2030ValueLow:aaPolicyYear andYearOrMonth:@"M" andMonth:aaMonth] +
	[self ReturnMonthFundValueOfTheYearVU2035ValueLow:aaPolicyYear andYearOrMonth:@"M" andMonth:aaMonth] +
	[self ReturnMonthFundValueOfTheYearVURetValueLow:aaPolicyYear andYearOrMonth:@"M" andMonth:aaMonth] +
	[self ReturnMonthFundValueOfTheYearVUDanaValueLow:aaPolicyYear andYearOrMonth:@"M" andMonth:aaMonth] +
	[self ReturnMonthFundValueOfTheYearVUVentureValueLow:aaPolicyYear andYearOrMonth:@"M" andMonth:aaMonth] +
    [self ReturnMonthFundValueOfTheYearVUSmartValueLow:aaPolicyYear andYearOrMonth:@"M" andMonth:aaMonth] +
    [self ReturnMonthFundValueOfTheYearVUVentureBlueChipValueLow:aaPolicyYear andYearOrMonth:@"M" andMonth:aaMonth] +
    [self ReturnMonthFundValueOfTheYearVUVentureDanaValueLow:aaPolicyYear andYearOrMonth:@"M" andMonth:aaMonth] +
    [self ReturnMonthFundValueOfTheYearVUVentureGrowthValueLow:aaPolicyYear andYearOrMonth:@"M" andMonth:aaMonth] +
    [self ReturnMonthFundValueOfTheYearVUVentureIncomeValueLow:aaPolicyYear andYearOrMonth:@"M" andMonth:aaMonth] +
    [self ReturnMonthFundValueOfTheYearVUVentureManagedValueLow:aaPolicyYear andYearOrMonth:@"M" andMonth:aaMonth];
	
}

-(double)ReturnMonthFundValueOfTheYearVU2023ValueLow: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMonth:(int)aaMonth{
	if (aaPolicyYear <= YearDiff2023) {
		MonthVU2023ValueLow = [self ReturnVU2023ValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:aaMonth];
		MonthFundValueOfTheYearVU2023ValueLow_Basic = MonthVU2023ValueLow;
		return MonthVU2023ValueLow;
	} else {
		return 0;
	}
}

-(double)ReturnMonthFundValueOfTheYearVU2025ValueLow: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMonth:(int)aaMonth{
	if (aaPolicyYear <= YearDiff2025) {
		MonthVU2025ValueLow = [self ReturnVU2025ValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:aaMonth];
		MonthFundValueOfTheYearVU2025ValueLow_Basic = MonthVU2025ValueLow;
		return MonthVU2025ValueLow;
	} else {
		return 0;
	}
}


-(double)ReturnMonthFundValueOfTheYearVU2028ValueLow: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMonth:(int)aaMonth{
	if (aaPolicyYear <= YearDiff2028) {
		MonthVU2028ValueLow = [self ReturnVU2028ValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:aaMonth];
		MonthFundValueOfTheYearVU2028ValueLow_Basic = MonthVU2028ValueLow;
		return MonthVU2028ValueLow;
	} else {
		return 0;
	}
}

-(double)ReturnMonthFundValueOfTheYearVU2030ValueLow: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMonth:(int)aaMonth{
	if (aaPolicyYear <= YearDiff2030) {
		MonthVU2030ValueLow = [self ReturnVU2030ValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:aaMonth];
		MonthFundValueOfTheYearVU2030ValueLow_Basic = MonthVU2030ValueLow;
		return MonthVU2030ValueLow;
	} else {
		return 0;
	}
}

-(double)ReturnMonthFundValueOfTheYearVU2035ValueLow: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMonth:(int)aaMonth{
	if (aaPolicyYear <= YearDiff2035) {
		MonthVU2035ValueLow = [self ReturnVU2035ValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:aaMonth];
		MonthFundValueOfTheYearVU2035ValueLow_Basic = MonthVU2035ValueLow;
		return MonthVU2035ValueLow;
	} else {
		return 0;
	}
}

-(double)ReturnMonthFundValueOfTheYearVURetValueLow: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMonth:(int)aaMonth{
	
	MonthVURetValueLow = [self ReturnVURetValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:aaMonth];
	MonthFundValueOfTheYearVURetValueLow_Basic = MonthVURetValueLow;
	return MonthVURetValueLow;
}

-(double)ReturnMonthFundValueOfTheYearVUDanaValueLow: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMonth:(int)aaMonth{
	MonthVUDanaValueLow = [self ReturnVUDanaValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:aaMonth];
	MonthFundValueOfTheYearVUDanaValueLow_Basic = MonthVUDanaValueLow;
	return MonthVUDanaValueLow;
}

-(double)ReturnMonthFundValueOfTheYearVUSmartValueLow: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMonth:(int)aaMonth{
	
	MonthVUSmartValueLow = [self ReturnVUSmartValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:aaMonth];
	MonthFundValueOfTheYearVUSmartValueLow_Basic = MonthVUSmartValueLow;
	return MonthVUSmartValueLow;
}

-(double)ReturnMonthFundValueOfTheYearVUVentureValueLow: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMonth:(int)aaMonth{
	MonthVUVentureValueLow = [self ReturnVUVentureValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:aaMonth];
	MonthFundValueOfTheYearVUVentureValueLow_Basic = MonthVUVentureValueLow;
	return MonthVUVentureValueLow;
}

-(double)ReturnFundValueOfTheYearVUVentureGrowthValueHigh: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth{
    double temp = [self ReturnVUVentureGrowthValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
    if ([aaYearOrMonth isEqualToString:@"M"]) {
        MonthFundValueOfTheYearVUVentureGrowthValueHigh_Basic = temp;
    }
    else
    {
        FundValueOfTheYearVUVentureGrowthValueHigh_Basic = temp;
    }
    
    
    return temp;
}

-(double)ReturnMonthFundValueOfTheYearVUVentureGrowthValueHigh: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMonth:(int)aaMonth{
    
    MonthVUVentureGrowthValueHigh = [self ReturnVUVentureGrowthValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:aaMonth];
    MonthFundValueOfTheYearVUVentureGrowthValueHigh_Basic = MonthVUVentureGrowthValueHigh;
    return MonthVUVentureGrowthValueHigh;
}

-(double)ReturnFundValueOfTheYearVUVentureGrowthValueMedian: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth{
    
    double temp = [self ReturnVUVentureGrowthValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
    if ([aaYearOrMonth isEqualToString:@"M"]) {
        MonthFundValueOfTheYearVUVentureGrowthValueMedian_Basic = temp;
    }
    else
    {
        FundValueOfTheYearVUVentureGrowthValueMedian_Basic = temp;
    }
    
    return temp;
}

-(double)ReturnMonthFundValueOfTheYearVUVentureGrowthValueMedian: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMonth:(int)aaMonth{
    MonthVUVentureGrowthValueMedian = [self ReturnVUVentureGrowthValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:aaMonth];
    MonthFundValueOfTheYearVUVentureGrowthValueMedian_Basic = MonthVUVentureGrowthValueMedian;
    return 	MonthVUVentureGrowthValueMedian;
}

-(double)ReturnFundValueOfTheYearVUVentureGrowthValueLow: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth{
    //return [self ReturnVUVentureGrowthValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
    double temp = [self ReturnVUVentureGrowthValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
    if ([aaYearOrMonth isEqualToString:@"M"]) {
        MonthFundValueOfTheYearVUVentureGrowthValueLow_Basic = temp;
    }
    else
    {
        FundValueOfTheYearVUVentureGrowthValueLow_Basic = temp;
    }
    
    return temp;
}

-(double)ReturnMonthFundValueOfTheYearVUVentureGrowthValueLow: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMonth:(int)aaMonth{
    
    MonthVUVentureGrowthValueLow = [self ReturnVUVentureGrowthValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:aaMonth];
    MonthFundValueOfTheYearVUVentureGrowthValueLow_Basic = MonthVUVentureGrowthValueLow;
    return MonthVUVentureGrowthValueLow;
}

-(double)ReturnFundValueOfTheYearVUVentureBlueChipValueHigh: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth{
    double temp = [self ReturnVUVentureBlueChipValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
    if ([aaYearOrMonth isEqualToString:@"M"]) {
        MonthFundValueOfTheYearVUVentureBlueChipValueHigh_Basic = temp;
    }
    else
    {
        FundValueOfTheYearVUVentureBlueChipValueHigh_Basic = temp;
    }
    
    
    return temp;
}

-(double)ReturnMonthFundValueOfTheYearVUVentureBlueChipValueHigh: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMonth:(int)aaMonth{
    
    MonthVUVentureBlueChipValueHigh = [self ReturnVUVentureBlueChipValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:aaMonth];
    MonthFundValueOfTheYearVUVentureBlueChipValueHigh_Basic = MonthVUVentureBlueChipValueHigh;
    return MonthVUVentureBlueChipValueHigh;
}

-(double)ReturnFundValueOfTheYearVUVentureBlueChipValueMedian: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth{
    
    double temp = [self ReturnVUVentureBlueChipValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
    if ([aaYearOrMonth isEqualToString:@"M"]) {
        MonthFundValueOfTheYearVUVentureBlueChipValueMedian_Basic = temp;
    }
    else
    {
        FundValueOfTheYearVUVentureBlueChipValueMedian_Basic = temp;
    }
    
    return temp;
}

-(double)ReturnMonthFundValueOfTheYearVUVentureBlueChipValueMedian: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMonth:(int)aaMonth{
    MonthVUVentureBlueChipValueMedian = [self ReturnVUVentureBlueChipValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:aaMonth];
    MonthFundValueOfTheYearVUVentureBlueChipValueMedian_Basic = MonthVUVentureBlueChipValueMedian;
    return 	MonthVUVentureBlueChipValueMedian;
}

-(double)ReturnFundValueOfTheYearVUVentureBlueChipValueLow: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth{
    //return [self ReturnVUVentureBlueChipValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
    double temp = [self ReturnVUVentureBlueChipValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
    if ([aaYearOrMonth isEqualToString:@"M"]) {
        MonthFundValueOfTheYearVUVentureBlueChipValueLow_Basic = temp;
    }
    else
    {
        FundValueOfTheYearVUVentureBlueChipValueLow_Basic = temp;
    }
    
    return temp;
}

-(double)ReturnMonthFundValueOfTheYearVUVentureBlueChipValueLow: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMonth:(int)aaMonth{
    
    MonthVUVentureBlueChipValueLow = [self ReturnVUVentureBlueChipValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:aaMonth];
    MonthFundValueOfTheYearVUVentureBlueChipValueLow_Basic = MonthVUVentureBlueChipValueLow;
    return MonthVUVentureBlueChipValueLow;
}

-(double)ReturnFundValueOfTheYearVUVentureDanaValueHigh: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth{
    double temp = [self ReturnVUVentureDanaValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
    if ([aaYearOrMonth isEqualToString:@"M"]) {
        MonthFundValueOfTheYearVUVentureDanaValueHigh_Basic = temp;
    }
    else
    {
        FundValueOfTheYearVUVentureDanaValueHigh_Basic = temp;
    }
    
    
    return temp;
}

-(double)ReturnMonthFundValueOfTheYearVUVentureDanaValueHigh: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMonth:(int)aaMonth{
    
    MonthVUVentureDanaValueHigh = [self ReturnVUVentureDanaValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:aaMonth];
    MonthFundValueOfTheYearVUVentureDanaValueHigh_Basic = MonthVUVentureDanaValueHigh;
    return MonthVUVentureDanaValueHigh;
}

-(double)ReturnFundValueOfTheYearVUVentureDanaValueMedian: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth{
    
    double temp = [self ReturnVUVentureDanaValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
    if ([aaYearOrMonth isEqualToString:@"M"]) {
        MonthFundValueOfTheYearVUVentureDanaValueMedian_Basic = temp;
    }
    else
    {
        FundValueOfTheYearVUVentureDanaValueMedian_Basic = temp;
    }
    
    return temp;
}

-(double)ReturnMonthFundValueOfTheYearVUVentureDanaValueMedian: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMonth:(int)aaMonth{
    MonthVUVentureDanaValueMedian = [self ReturnVUVentureDanaValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:aaMonth];
    MonthFundValueOfTheYearVUVentureDanaValueMedian_Basic = MonthVUVentureDanaValueMedian;
    return 	MonthVUVentureDanaValueMedian;
}

-(double)ReturnFundValueOfTheYearVUVentureDanaValueLow: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth{
    //return [self ReturnVUVentureDanaValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
    double temp = [self ReturnVUVentureDanaValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
    if ([aaYearOrMonth isEqualToString:@"M"]) {
        MonthFundValueOfTheYearVUVentureDanaValueLow_Basic = temp;
    }
    else
    {
        FundValueOfTheYearVUVentureDanaValueLow_Basic = temp;
    }
    
    return temp;
}

-(double)ReturnMonthFundValueOfTheYearVUVentureDanaValueLow: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMonth:(int)aaMonth{
    
    MonthVUVentureDanaValueLow = [self ReturnVUVentureDanaValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:aaMonth];
    MonthFundValueOfTheYearVUVentureDanaValueLow_Basic = MonthVUVentureDanaValueLow;
    return MonthVUVentureDanaValueLow;
}


-(double)ReturnFundValueOfTheYearVUVentureManagedValueHigh: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth{
    double temp = [self ReturnVUVentureManagedValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
    if ([aaYearOrMonth isEqualToString:@"M"]) {
        MonthFundValueOfTheYearVUVentureManagedValueHigh_Basic = temp;
    }
    else
    {
        FundValueOfTheYearVUVentureManagedValueHigh_Basic = temp;
    }
    
    
    return temp;
}

-(double)ReturnMonthFundValueOfTheYearVUVentureManagedValueHigh: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMonth:(int)aaMonth{
    
    MonthVUVentureManagedValueHigh = [self ReturnVUVentureManagedValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:aaMonth];
    MonthFundValueOfTheYearVUVentureManagedValueHigh_Basic = MonthVUVentureManagedValueHigh;
    return MonthVUVentureManagedValueHigh;
}

-(double)ReturnFundValueOfTheYearVUVentureManagedValueMedian: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth{
    
    double temp = [self ReturnVUVentureManagedValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
    if ([aaYearOrMonth isEqualToString:@"M"]) {
        MonthFundValueOfTheYearVUVentureManagedValueMedian_Basic = temp;
    }
    else
    {
        FundValueOfTheYearVUVentureManagedValueMedian_Basic = temp;
    }
    
    return temp;
}

-(double)ReturnMonthFundValueOfTheYearVUVentureManagedValueMedian: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMonth:(int)aaMonth{
    MonthVUVentureManagedValueMedian = [self ReturnVUVentureManagedValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:aaMonth];
    MonthFundValueOfTheYearVUVentureManagedValueMedian_Basic = MonthVUVentureManagedValueMedian;
    return 	MonthVUVentureManagedValueMedian;
}

-(double)ReturnFundValueOfTheYearVUVentureManagedValueLow: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth{
    //return [self ReturnVUVentureManagedValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
    double temp = [self ReturnVUVentureManagedValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
    if ([aaYearOrMonth isEqualToString:@"M"]) {
        MonthFundValueOfTheYearVUVentureManagedValueLow_Basic = temp;
    }
    else
    {
        FundValueOfTheYearVUVentureManagedValueLow_Basic = temp;
    }
    
    return temp;
}

-(double)ReturnMonthFundValueOfTheYearVUVentureManagedValueLow: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMonth:(int)aaMonth{
    
    MonthVUVentureManagedValueLow = [self ReturnVUVentureManagedValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:aaMonth];
    MonthFundValueOfTheYearVUVentureManagedValueLow_Basic = MonthVUVentureManagedValueLow;
    return MonthVUVentureManagedValueLow;
}

-(double)ReturnFundValueOfTheYearVUVentureIncomeValueHigh: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth{
    double temp = [self ReturnVUVentureIncomeValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
    if ([aaYearOrMonth isEqualToString:@"M"]) {
        MonthFundValueOfTheYearVUVentureIncomeValueHigh_Basic = temp;
    }
    else
    {
        FundValueOfTheYearVUVentureIncomeValueHigh_Basic = temp;
    }
    
    
    return temp;
}

-(double)ReturnMonthFundValueOfTheYearVUVentureIncomeValueHigh: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMonth:(int)aaMonth{
    
    MonthVUVentureIncomeValueHigh = [self ReturnVUVentureIncomeValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:aaMonth];
    MonthFundValueOfTheYearVUVentureIncomeValueHigh_Basic = MonthVUVentureIncomeValueHigh;
    return MonthVUVentureIncomeValueHigh;
}

-(double)ReturnFundValueOfTheYearVUVentureIncomeValueMedian: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth{
    
    double temp = [self ReturnVUVentureIncomeValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
    if ([aaYearOrMonth isEqualToString:@"M"]) {
        MonthFundValueOfTheYearVUVentureIncomeValueMedian_Basic = temp;
    }
    else
    {
        FundValueOfTheYearVUVentureIncomeValueMedian_Basic = temp;
    }
    
    return temp;
}

-(double)ReturnMonthFundValueOfTheYearVUVentureIncomeValueMedian: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMonth:(int)aaMonth{
    MonthVUVentureIncomeValueMedian = [self ReturnVUVentureIncomeValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:aaMonth];
    MonthFundValueOfTheYearVUVentureIncomeValueMedian_Basic = MonthVUVentureIncomeValueMedian;
    return 	MonthVUVentureIncomeValueMedian;
}

-(double)ReturnFundValueOfTheYearVUVentureIncomeValueLow: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth{
    //return [self ReturnVUVentureIncomeValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
    double temp = [self ReturnVUVentureIncomeValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
    if ([aaYearOrMonth isEqualToString:@"M"]) {
        MonthFundValueOfTheYearVUVentureIncomeValueLow_Basic = temp;
    }
    else
    {
        FundValueOfTheYearVUVentureIncomeValueLow_Basic = temp;
    }
    
    return temp;
}

-(double)ReturnMonthFundValueOfTheYearVUVentureIncomeValueLow: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMonth:(int)aaMonth{
    
    MonthVUVentureIncomeValueLow = [self ReturnVUVentureIncomeValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:aaMonth];
    MonthFundValueOfTheYearVUVentureIncomeValueLow_Basic = MonthVUVentureIncomeValueLow;
    return MonthVUVentureIncomeValueLow;
}

-(double)ReturnFundValueOfTheYearVUVenture6666ValueHigh: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth{
    double temp = [self ReturnVUVenture6666ValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
    if ([aaYearOrMonth isEqualToString:@"M"]) {
        MonthFundValueOfTheYearVUVenture6666ValueHigh_Basic = temp;
    }
    else
    {
        FundValueOfTheYearVUVenture6666ValueHigh_Basic = temp;
    }
    
    
    return temp;
}

-(double)ReturnMonthFundValueOfTheYearVUVenture6666ValueHigh: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMonth:(int)aaMonth{
    
    MonthVUVenture6666ValueHigh = [self ReturnVUVenture6666ValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:aaMonth];
    MonthFundValueOfTheYearVUVenture6666ValueHigh_Basic = MonthVUVenture6666ValueHigh;
    return MonthVUVenture6666ValueHigh;
}

-(double)ReturnFundValueOfTheYearVUVenture6666ValueMedian: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth{
    
    double temp = [self ReturnVUVenture6666ValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
    if ([aaYearOrMonth isEqualToString:@"M"]) {
        MonthFundValueOfTheYearVUVenture6666ValueMedian_Basic = temp;
    }
    else
    {
        FundValueOfTheYearVUVenture6666ValueMedian_Basic = temp;
    }
    
    return temp;
}

-(double)ReturnMonthFundValueOfTheYearVUVenture6666ValueMedian: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMonth:(int)aaMonth{
    MonthVUVenture6666ValueMedian = [self ReturnVUVenture6666ValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:aaMonth];
    MonthFundValueOfTheYearVUVenture6666ValueMedian_Basic = MonthVUVenture6666ValueMedian;
    return 	MonthVUVenture6666ValueMedian;
}

-(double)ReturnFundValueOfTheYearVUVenture6666ValueLow: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth{
    //return [self ReturnVUVenture6666ValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
    double temp = [self ReturnVUVenture6666ValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
    if ([aaYearOrMonth isEqualToString:@"M"]) {
        MonthFundValueOfTheYearVUVenture6666ValueLow_Basic = temp;
    }
    else
    {
        FundValueOfTheYearVUVenture6666ValueLow_Basic = temp;
    }
    
    return temp;
}

-(double)ReturnMonthFundValueOfTheYearVUVenture6666ValueLow: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMonth:(int)aaMonth{
    
    MonthVUVenture6666ValueLow = [self ReturnVUVenture6666ValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:aaMonth];
    MonthFundValueOfTheYearVUVenture6666ValueLow_Basic = MonthVUVenture6666ValueLow;
    return MonthVUVenture6666ValueLow;
}

-(double)ReturnFundValueOfTheYearVUVenture7777ValueHigh: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth{
    double temp = [self ReturnVUVenture7777ValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
    if ([aaYearOrMonth isEqualToString:@"M"]) {
        MonthFundValueOfTheYearVUVenture7777ValueHigh_Basic = temp;
    }
    else
    {
        FundValueOfTheYearVUVenture7777ValueHigh_Basic = temp;
    }
    
    
    return temp;
}

-(double)ReturnMonthFundValueOfTheYearVUVenture7777ValueHigh: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMonth:(int)aaMonth{
    
    MonthVUVenture7777ValueHigh = [self ReturnVUVenture7777ValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:aaMonth];
    MonthFundValueOfTheYearVUVenture7777ValueHigh_Basic = MonthVUVenture7777ValueHigh;
    return MonthVUVenture7777ValueHigh;
}

-(double)ReturnFundValueOfTheYearVUVenture7777ValueMedian: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth{
    
    double temp = [self ReturnVUVenture7777ValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
    if ([aaYearOrMonth isEqualToString:@"M"]) {
        MonthFundValueOfTheYearVUVenture7777ValueMedian_Basic = temp;
    }
    else
    {
        FundValueOfTheYearVUVenture7777ValueMedian_Basic = temp;
    }
    
    return temp;
}

-(double)ReturnMonthFundValueOfTheYearVUVenture7777ValueMedian: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMonth:(int)aaMonth{
    MonthVUVenture7777ValueMedian = [self ReturnVUVenture7777ValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:aaMonth];
    MonthFundValueOfTheYearVUVenture7777ValueMedian_Basic = MonthVUVenture7777ValueMedian;
    return 	MonthVUVenture7777ValueMedian;
}

-(double)ReturnFundValueOfTheYearVUVenture7777ValueLow: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth{
    //return [self ReturnVUVenture7777ValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
    double temp = [self ReturnVUVenture7777ValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
    if ([aaYearOrMonth isEqualToString:@"M"]) {
        MonthFundValueOfTheYearVUVenture7777ValueLow_Basic = temp;
    }
    else
    {
        FundValueOfTheYearVUVenture7777ValueLow_Basic = temp;
    }
    
    return temp;
}

-(double)ReturnMonthFundValueOfTheYearVUVenture7777ValueLow: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMonth:(int)aaMonth{
    
    MonthVUVenture7777ValueLow = [self ReturnVUVenture7777ValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:aaMonth];
    MonthFundValueOfTheYearVUVenture7777ValueLow_Basic = MonthVUVenture7777ValueLow;
    return MonthVUVenture7777ValueLow;
}

-(double)ReturnFundValueOfTheYearVUVenture8888ValueHigh: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth{
    double temp = [self ReturnVUVenture8888ValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
    if ([aaYearOrMonth isEqualToString:@"M"]) {
        MonthFundValueOfTheYearVUVenture8888ValueHigh_Basic = temp;
    }
    else
    {
        FundValueOfTheYearVUVenture8888ValueHigh_Basic = temp;
    }
    
    
    return temp;
}

-(double)ReturnMonthFundValueOfTheYearVUVenture8888ValueHigh: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMonth:(int)aaMonth{
    
    MonthVUVenture8888ValueHigh = [self ReturnVUVenture8888ValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:aaMonth];
    MonthFundValueOfTheYearVUVenture8888ValueHigh_Basic = MonthVUVenture8888ValueHigh;
    return MonthVUVenture8888ValueHigh;
}

-(double)ReturnFundValueOfTheYearVUVenture8888ValueMedian: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth{
    
    double temp = [self ReturnVUVenture8888ValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
    if ([aaYearOrMonth isEqualToString:@"M"]) {
        MonthFundValueOfTheYearVUVenture8888ValueMedian_Basic = temp;
    }
    else
    {
        FundValueOfTheYearVUVenture8888ValueMedian_Basic = temp;
    }
    
    return temp;
}

-(double)ReturnMonthFundValueOfTheYearVUVenture8888ValueMedian: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMonth:(int)aaMonth{
    MonthVUVenture8888ValueMedian = [self ReturnVUVenture8888ValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:aaMonth];
    MonthFundValueOfTheYearVUVenture8888ValueMedian_Basic = MonthVUVenture8888ValueMedian;
    return 	MonthVUVenture8888ValueMedian;
}

-(double)ReturnFundValueOfTheYearVUVenture8888ValueLow: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth{
    //return [self ReturnVUVenture8888ValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
    double temp = [self ReturnVUVenture8888ValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
    if ([aaYearOrMonth isEqualToString:@"M"]) {
        MonthFundValueOfTheYearVUVenture8888ValueLow_Basic = temp;
    }
    else
    {
        FundValueOfTheYearVUVenture8888ValueLow_Basic = temp;
    }
    
    return temp;
}

-(double)ReturnMonthFundValueOfTheYearVUVenture8888ValueLow: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMonth:(int)aaMonth{
    
    MonthVUVenture8888ValueLow = [self ReturnVUVenture8888ValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:aaMonth];
    MonthFundValueOfTheYearVUVenture8888ValueLow_Basic = MonthVUVenture8888ValueLow;
    return MonthVUVenture8888ValueLow;
}


-(double)ReturnFundValueOfTheYearVUVenture9999ValueHigh: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth{
    double temp = [self ReturnVUVenture9999ValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
    if ([aaYearOrMonth isEqualToString:@"M"]) {
        MonthFundValueOfTheYearVUVenture9999ValueHigh_Basic = temp;
    }
    else
    {
        FundValueOfTheYearVUVenture9999ValueHigh_Basic = temp;
    }
    
    
    return temp;
}

-(double)ReturnMonthFundValueOfTheYearVUVenture9999ValueHigh: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMonth:(int)aaMonth{
    
    MonthVUVenture9999ValueHigh = [self ReturnVUVenture9999ValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:aaMonth];
    MonthFundValueOfTheYearVUVenture9999ValueHigh_Basic = MonthVUVenture9999ValueHigh;
    return MonthVUVenture9999ValueHigh;
}

-(double)ReturnFundValueOfTheYearVUVenture9999ValueMedian: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth{
    
    double temp = [self ReturnVUVenture9999ValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
    if ([aaYearOrMonth isEqualToString:@"M"]) {
        MonthFundValueOfTheYearVUVenture9999ValueMedian_Basic = temp;
    }
    else
    {
        FundValueOfTheYearVUVenture9999ValueMedian_Basic = temp;
    }
    
    return temp;
}

-(double)ReturnMonthFundValueOfTheYearVUVenture9999ValueMedian: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMonth:(int)aaMonth{
    MonthVUVenture9999ValueMedian = [self ReturnVUVenture9999ValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:aaMonth];
    MonthFundValueOfTheYearVUVenture9999ValueMedian_Basic = MonthVUVenture9999ValueMedian;
    return 	MonthVUVenture9999ValueMedian;
}

-(double)ReturnFundValueOfTheYearVUVenture9999ValueLow: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth{
    //return [self ReturnVUVenture9999ValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
    double temp = [self ReturnVUVenture9999ValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
    if ([aaYearOrMonth isEqualToString:@"M"]) {
        MonthFundValueOfTheYearVUVenture9999ValueLow_Basic = temp;
    }
    else
    {
        FundValueOfTheYearVUVenture9999ValueLow_Basic = temp;
    }
    
    return temp;
}

-(double)ReturnMonthFundValueOfTheYearVUVenture9999ValueLow: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMonth:(int)aaMonth{
    
    MonthVUVenture9999ValueLow = [self ReturnVUVenture9999ValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:aaMonth];
    MonthFundValueOfTheYearVUVenture9999ValueLow_Basic = MonthVUVenture9999ValueLow;
    return MonthVUVenture9999ValueLow;
}


#pragma mark - Calculate Yearly Fund Value for Rider

-(double)ReturnRiderFundValueOfTheYearValueTotalHigh: (int)aaPolicyYear{
	
	if (aaPolicyYear == YearDiff2035 || aaPolicyYear == YearDiff2030 || aaPolicyYear == YearDiff2028
		|| aaPolicyYear == YearDiff2025 || aaPolicyYear == YearDiff2023) {
		return [self ReturnRiderFundValueOfTheYearVU2023ValueHigh:aaPolicyYear andYearOrMonth:@"M"] +
		[self ReturnRiderFundValueOfTheYearVU2025ValueHigh:aaPolicyYear andYearOrMonth:@"M"] +
		[self ReturnRiderFundValueOfTheYearVU2028ValueHigh:aaPolicyYear andYearOrMonth:@"M"] +
		[self ReturnRiderFundValueOfTheYearVU2030ValueHigh:aaPolicyYear andYearOrMonth:@"M"] +
		[self ReturnRiderFundValueOfTheYearVU2035ValueHigh:aaPolicyYear andYearOrMonth:@"M"] +
		[self ReturnRiderFundValueOfTheYearVURetValueHigh:aaPolicyYear andYearOrMonth:@"M"] +
		[self ReturnRiderFundValueOfTheYearVUDanaValueHigh:aaPolicyYear andYearOrMonth:@"M"] +
        [self ReturnRiderFundValueOfTheYearVUSmartValueHigh:aaPolicyYear andYearOrMonth:@"M"] +
		[self ReturnRiderFundValueOfTheYearVUVentureValueHigh:aaPolicyYear andYearOrMonth:@"M"] +
        [self ReturnRiderFundValueOfTheYearVUVentureBlueChipValueHigh:aaPolicyYear andYearOrMonth:@"M"] +
        [self ReturnRiderFundValueOfTheYearVUVentureDanaValueHigh:aaPolicyYear andYearOrMonth:@"M"] +
        [self ReturnRiderFundValueOfTheYearVUVentureGrowthValueHigh:aaPolicyYear andYearOrMonth:@"M"] +
        [self ReturnRiderFundValueOfTheYearVUVentureIncomeValueHigh:aaPolicyYear andYearOrMonth:@"M"] +
        [self ReturnRiderFundValueOfTheYearVUVentureManagedValueHigh:aaPolicyYear andYearOrMonth:@"M"];
	}
	else{
		return [self ReturnRiderFundValueOfTheYearVU2023ValueHigh:aaPolicyYear andYearOrMonth:@"Y"] +
		[self ReturnRiderFundValueOfTheYearVU2025ValueHigh:aaPolicyYear andYearOrMonth:@"Y"] +
		[self ReturnRiderFundValueOfTheYearVU2028ValueHigh:aaPolicyYear andYearOrMonth:@"Y"] +
		[self ReturnRiderFundValueOfTheYearVU2030ValueHigh:aaPolicyYear andYearOrMonth:@"Y"] +
		[self ReturnRiderFundValueOfTheYearVU2035ValueHigh:aaPolicyYear andYearOrMonth:@"Y"] +
		[self ReturnRiderFundValueOfTheYearVURetValueHigh:aaPolicyYear andYearOrMonth:@"Y"] +
		[self ReturnRiderFundValueOfTheYearVUDanaValueHigh:aaPolicyYear andYearOrMonth:@"Y"] +
        [self ReturnRiderFundValueOfTheYearVUSmartValueHigh:aaPolicyYear andYearOrMonth:@"Y"] +
		[self ReturnRiderFundValueOfTheYearVUVentureValueHigh:aaPolicyYear andYearOrMonth:@"Y"] +
        [self ReturnRiderFundValueOfTheYearVUVentureBlueChipValueHigh:aaPolicyYear andYearOrMonth:@"Y"] +
        [self ReturnRiderFundValueOfTheYearVUVentureDanaValueHigh:aaPolicyYear andYearOrMonth:@"Y"] +
        [self ReturnRiderFundValueOfTheYearVUVentureGrowthValueHigh:aaPolicyYear andYearOrMonth:@"Y"] +
        [self ReturnRiderFundValueOfTheYearVUVentureIncomeValueHigh:aaPolicyYear andYearOrMonth:@"Y"] +
        [self ReturnRiderFundValueOfTheYearVUVentureManagedValueHigh:aaPolicyYear andYearOrMonth:@"Y"];
	}
	
	/*
	 return  0;
	 */
}




-(double)ReturnRiderFundValueOfTheYearVU2023ValueHigh: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth {
	
	if (aaPolicyYear <= YearDiff2023) {
		double temp = [self ReturnRiderVU2023ValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
		RiderFundValueOfTheYearVU2023ValueHigh_Basic = temp;
		return temp;
	} else {
		
		return 0;
	}
}

-(double)ReturnRiderFundValueOfTheYearVU2025ValueHigh: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth{
	if (aaPolicyYear <= YearDiff2025) {
		double temp = [self ReturnRiderVU2025ValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
		RiderFundValueOfTheYearVU2025ValueHigh_Basic = temp;
		
		return temp;
	} else {
		return 0;
	}
}


-(double)ReturnRiderFundValueOfTheYearVU2028ValueHigh: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth{
	if (aaPolicyYear <= YearDiff2028) {
		double temp = [self ReturnRiderVU2028ValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
		RiderFundValueOfTheYearVU2028ValueHigh_Basic = temp;
		
		return temp;
	} else {
		return 0;
	}
}

-(double)ReturnRiderFundValueOfTheYearVU2030ValueHigh: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth{
	if (aaPolicyYear <= YearDiff2030) {
		double temp = [self ReturnRiderVU2030ValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
		RiderFundValueOfTheYearVU2030ValueHigh_Basic = temp;
		
		return temp;
	} else {
		return 0;
	}
}

-(double)ReturnRiderFundValueOfTheYearVU2035ValueHigh: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth{
	if (aaPolicyYear <= YearDiff2035) {
		double temp = [self ReturnRiderVU2035ValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
		RiderFundValueOfTheYearVU2035ValueHigh_Basic = temp;
		
		return temp;
	} else {
		return 0;
	}
}

-(double)ReturnRiderFundValueOfTheYearVURetValueHigh: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth{
	double temp = [self ReturnRiderVURetValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
	RiderFundValueOfTheYearVURetValueHigh_Basic = temp;
	
	return temp;
}

-(double)ReturnRiderFundValueOfTheYearVUDanaValueHigh: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth{
	double temp = [self ReturnRiderVUDanaValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
	RiderFundValueOfTheYearVUDanaValueHigh_Basic = temp;
	
	return temp;
}

-(double)ReturnRiderFundValueOfTheYearVUSmartValueHigh: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth{
	double temp = [self ReturnRiderVUSmartValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
	RiderFundValueOfTheYearVUSmartValueHigh_Basic = temp;
	
	return temp;
}

-(double)ReturnRiderFundValueOfTheYearVUVentureValueHigh: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth{
	double temp = [self ReturnRiderVUVentureValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
	RiderFundValueOfTheYearVUVentureValueHigh_Basic = temp;
	
	return temp;
}

-(double)ReturnRiderMonthFundValueOfTheYearValueTotalHigh: (int)aaPolicyYear andMonth:(int)aaMonth{
	
	[self ReturnRiderMonthFundValueOfTheYearVURetValueHigh:aaPolicyYear andYearOrMonth:@"M" andMonth:aaMonth];
	[self ReturnRiderMonthFundValueOfTheYearVUDanaValueHigh:aaPolicyYear andYearOrMonth:@"M" andMonth:aaMonth];
    [self ReturnRiderMonthFundValueOfTheYearVUSmartValueHigh:aaPolicyYear andYearOrMonth:@"M" andMonth:aaMonth];
	[self ReturnRiderMonthFundValueOfTheYearVUVentureValueHigh:aaPolicyYear andYearOrMonth:@"M" andMonth:aaMonth];
	[self ReturnRiderMonthFundValueOfTheYearVU2023ValueHigh:aaPolicyYear andYearOrMonth:@"M" andMonth:aaMonth];
	[self ReturnRiderMonthFundValueOfTheYearVU2025ValueHigh:aaPolicyYear andYearOrMonth:@"M" andMonth:aaMonth];
	[self ReturnRiderMonthFundValueOfTheYearVU2028ValueHigh:aaPolicyYear andYearOrMonth:@"M" andMonth:aaMonth];
	[self ReturnRiderMonthFundValueOfTheYearVU2030ValueHigh:aaPolicyYear andYearOrMonth:@"M" andMonth:aaMonth];
	[self ReturnRiderMonthFundValueOfTheYearVU2035ValueHigh:aaPolicyYear andYearOrMonth:@"M" andMonth:aaMonth];
	[self ReturnRiderMonthFundValueOfTheYearVUVentureBlueChipValueHigh:aaPolicyYear andYearOrMonth:@"M" andMonth:aaMonth];
	[self ReturnRiderMonthFundValueOfTheYearVUVentureDanaValueHigh:aaPolicyYear andYearOrMonth:@"M" andMonth:aaMonth];
	[self ReturnRiderMonthFundValueOfTheYearVUVentureGrowthValueHigh:aaPolicyYear andYearOrMonth:@"M" andMonth:aaMonth];
	[self ReturnRiderMonthFundValueOfTheYearVUVentureIncomeValueHigh:aaPolicyYear andYearOrMonth:@"M" andMonth:aaMonth];
	[self ReturnRiderMonthFundValueOfTheYearVUVentureManagedValueHigh:aaPolicyYear andYearOrMonth:@"M" andMonth:aaMonth];
	
    
	
	return RiderMonthVU2023ValueHigh + RiderMonthVU2025ValueHigh + RiderMonthVU2028ValueHigh + RiderMonthVU2030ValueHigh + RiderMonthVU2035ValueHigh + RiderMonthVURetValueHigh + RiderMonthVUDanaValueHigh + RiderMonthVUSmartValueHigh + RiderMonthVUVentureValueHigh + RiderMonthVUVentureBlueChipValueHigh + RiderMonthVUVentureDanaValueHigh + RiderMonthVUVentureGrowthValueHigh + RiderMonthVUVentureIncomeValueHigh + RiderMonthVUVentureManagedValueHigh;
	//return  0;
	
}


-(double)ReturnRiderMonthFundValueOfTheYearVU2023ValueHigh: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMonth:(int)aaMonth{
	
	if (aaPolicyYear <= YearDiff2023) {
		RiderMonthVU2023ValueHigh = [self ReturnRiderVU2023ValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:aaMonth];
		RiderMonthFundValueOfTheYearVU2023ValueHigh_Basic = RiderMonthVU2023ValueHigh;
		return RiderMonthVU2023ValueHigh;
	} else {
		return 0;
	}
}

-(double)ReturnRiderMonthFundValueOfTheYearVU2025ValueHigh: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMonth:(int)aaMonth{
	
	if (aaPolicyYear <= YearDiff2025) {
		RiderMonthVU2025ValueHigh = [self ReturnRiderVU2025ValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:aaMonth];
		RiderMonthFundValueOfTheYearVU2025ValueHigh_Basic = RiderMonthVU2025ValueHigh;
		return RiderMonthVU2025ValueHigh;
	} else {
		return 0;
	}
}


-(double)ReturnRiderMonthFundValueOfTheYearVU2028ValueHigh: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMonth:(int)aaMonth{
	if (aaPolicyYear <= YearDiff2028) {
		RiderMonthVU2028ValueHigh = [self ReturnRiderVU2028ValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:aaMonth];
		RiderMonthFundValueOfTheYearVU2028ValueHigh_Basic = RiderMonthVU2028ValueHigh;
		return RiderMonthVU2028ValueHigh;
	} else {
		return 0;
	}
}

-(double)ReturnRiderMonthFundValueOfTheYearVU2030ValueHigh: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMonth:(int)aaMonth{
	if (aaPolicyYear <= YearDiff2030) {
		RiderMonthVU2030ValueHigh = [self ReturnRiderVU2030ValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:aaMonth];
		RiderMonthFundValueOfTheYearVU2030ValueHigh_Basic = RiderMonthVU2030ValueHigh;
		return RiderMonthVU2030ValueHigh;
	} else {
		return 0;
	}
}

-(double)ReturnRiderMonthFundValueOfTheYearVU2035ValueHigh: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMonth:(int)aaMonth{
	if (aaPolicyYear <= YearDiff2035) {
		RiderMonthVU2035ValueHigh = [self ReturnRiderVU2035ValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:aaMonth];
		RiderMonthFundValueOfTheYearVU2035ValueHigh_Basic = RiderMonthVU2035ValueHigh;
		return RiderMonthVU2035ValueHigh;
	} else {
		return 0;
	}
}

-(double)ReturnRiderMonthFundValueOfTheYearVURetValueHigh: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMonth:(int)aaMonth{
	RiderMonthVURetValueHigh = [self ReturnRiderVURetValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:aaMonth];
	RiderMonthFundValueOfTheYearVURetValueHigh_Basic = RiderMonthVURetValueHigh;
	return RiderMonthVURetValueHigh;
}

-(double)ReturnRiderMonthFundValueOfTheYearVUDanaValueHigh: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMonth:(int)aaMonth{
	RiderMonthVUDanaValueHigh = [self ReturnRiderVUDanaValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:aaMonth];
	RiderMonthFundValueOfTheYearVUDanaValueHigh_Basic = RiderMonthVUDanaValueHigh;
	return RiderMonthVUDanaValueHigh;
}

-(double)ReturnRiderMonthFundValueOfTheYearVUSmartValueHigh: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMonth:(int)aaMonth{
	RiderMonthVUSmartValueHigh = [self ReturnRiderVUSmartValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:aaMonth];
	RiderMonthFundValueOfTheYearVUSmartValueHigh_Basic = RiderMonthVUSmartValueHigh;
	return RiderMonthVUSmartValueHigh;
}

-(double)ReturnRiderMonthFundValueOfTheYearVUVentureValueHigh: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMonth:(int)aaMonth{
	RiderMonthVUVentureValueHigh = [self ReturnRiderVUVentureValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:aaMonth];
	RiderMonthFundValueOfTheYearVUVentureValueHigh_Basic = RiderMonthVUVentureValueHigh;
	return RiderMonthVUVentureValueHigh;
}

-(double)ReturnRiderFundValueOfTheYearValueTotalMedian: (int)aaPolicyYear{
	
	if (aaPolicyYear == YearDiff2035 || aaPolicyYear == YearDiff2030 || aaPolicyYear == YearDiff2028
		|| aaPolicyYear == YearDiff2025 || aaPolicyYear == YearDiff2023) {
		
		return [self ReturnRiderFundValueOfTheYearVU2023ValueMedian:aaPolicyYear andYearOrMonth:@"M"] +
		[self ReturnRiderFundValueOfTheYearVU2025ValueMedian:aaPolicyYear andYearOrMonth:@"M"] +
		[self ReturnRiderFundValueOfTheYearVU2028ValueMedian:aaPolicyYear andYearOrMonth:@"M"] +
		[self ReturnRiderFundValueOfTheYearVU2030ValueMedian:aaPolicyYear andYearOrMonth:@"M"] +
		[self ReturnRiderFundValueOfTheYearVU2035ValueMedian:aaPolicyYear andYearOrMonth:@"M"] +
		[self ReturnRiderFundValueOfTheYearVURetValueMedian:aaPolicyYear andYearOrMonth:@"M"] +
		[self ReturnRiderFundValueOfTheYearVUDanaValueMedian:aaPolicyYear andYearOrMonth:@"M"] +
        [self ReturnRiderFundValueOfTheYearVUSmartValueMedian:aaPolicyYear andYearOrMonth:@"M"] +
		[self ReturnRiderFundValueOfTheYearVUVentureValueMedian:aaPolicyYear andYearOrMonth:@"M"] +
        [self ReturnRiderFundValueOfTheYearVUVentureBlueChipValueMedian:aaPolicyYear andYearOrMonth:@"M"] +
        [self ReturnRiderFundValueOfTheYearVUVentureDanaValueMedian:aaPolicyYear andYearOrMonth:@"M"] +
        [self ReturnRiderFundValueOfTheYearVUVentureGrowthValueMedian:aaPolicyYear andYearOrMonth:@"M"] +
        [self ReturnRiderFundValueOfTheYearVUVentureIncomeValueMedian:aaPolicyYear andYearOrMonth:@"M"] +
        [self ReturnRiderFundValueOfTheYearVUVentureManagedValueMedian:aaPolicyYear andYearOrMonth:@"M"];
	}
	else{
		return [self ReturnRiderFundValueOfTheYearVU2023ValueMedian:aaPolicyYear andYearOrMonth:@"Y"] +
		[self ReturnRiderFundValueOfTheYearVU2025ValueMedian:aaPolicyYear andYearOrMonth:@"Y"] +
		[self ReturnRiderFundValueOfTheYearVU2028ValueMedian:aaPolicyYear andYearOrMonth:@"Y"] +
		[self ReturnRiderFundValueOfTheYearVU2030ValueMedian:aaPolicyYear andYearOrMonth:@"Y"] +
		[self ReturnRiderFundValueOfTheYearVU2035ValueMedian:aaPolicyYear andYearOrMonth:@"Y"] +
		[self ReturnRiderFundValueOfTheYearVURetValueMedian:aaPolicyYear andYearOrMonth:@"Y"] +
		[self ReturnRiderFundValueOfTheYearVUDanaValueMedian:aaPolicyYear andYearOrMonth:@"Y"] +
        [self ReturnRiderFundValueOfTheYearVUSmartValueMedian:aaPolicyYear andYearOrMonth:@"Y"] +
		[self ReturnRiderFundValueOfTheYearVUVentureValueMedian:aaPolicyYear andYearOrMonth:@"Y"] +
        [self ReturnRiderFundValueOfTheYearVUVentureBlueChipValueMedian:aaPolicyYear andYearOrMonth:@"Y"] +
        [self ReturnRiderFundValueOfTheYearVUVentureDanaValueMedian:aaPolicyYear andYearOrMonth:@"Y"] +
        [self ReturnRiderFundValueOfTheYearVUVentureGrowthValueMedian:aaPolicyYear andYearOrMonth:@"Y"] +
        [self ReturnRiderFundValueOfTheYearVUVentureIncomeValueMedian:aaPolicyYear andYearOrMonth:@"Y"] +
        [self ReturnRiderFundValueOfTheYearVUVentureManagedValueMedian:aaPolicyYear andYearOrMonth:@"Y"];
	}
	/*
	 return  0;
	 */
}



-(double)ReturnRiderFundValueOfTheYearVU2023ValueMedian: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth{
	/*
     if (aaPolicyYear <= YearDiff2023) {
     double temp = [self ReturnRiderVU2023ValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
     RiderFundValueOfTheYearVU2023ValueMedian_Basic = temp;
     return temp;
     
     } else {
     return 0;
     }
	 */
	RiderFundValueOfTheYearVU2023ValueMedian_Basic = 0;
	return 0;
    
}

-(double)ReturnRiderFundValueOfTheYearVU2025ValueMedian: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth{
	if (aaPolicyYear <= YearDiff2025) {
		double temp = [self ReturnRiderVU2025ValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
		RiderFundValueOfTheYearVU2025ValueMedian_Basic = temp;
		return temp;
	} else {
		return 0;
	}
}


-(double)ReturnRiderFundValueOfTheYearVU2028ValueMedian: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth{
	if (aaPolicyYear <= YearDiff2028) {
		double temp = [self ReturnRiderVU2028ValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
		RiderFundValueOfTheYearVU2028ValueMedian_Basic = temp;
		return temp;
	} else {
		return 0;
	}
}

-(double)ReturnRiderFundValueOfTheYearVU2030ValueMedian: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth {
	if (aaPolicyYear <= YearDiff2030) {
		double temp = [self ReturnRiderVU2030ValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
		RiderFundValueOfTheYearVU2030ValueMedian_Basic = temp;
		return temp;
	} else {
		return 0;
	}
}

-(double)ReturnRiderFundValueOfTheYearVU2035ValueMedian: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth{
	if (aaPolicyYear <= YearDiff2035) {
		double temp = [self ReturnRiderVU2035ValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
		RiderFundValueOfTheYearVU2035ValueMedian_Basic = temp;
		return temp;
	} else {
		return 0;
	}
}

-(double)ReturnRiderFundValueOfTheYearVURetValueMedian: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth{
	//return VURetValueMedian;
	double temp = [self ReturnRiderVURetValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
	RiderFundValueOfTheYearVURetValueMedian_Basic = temp;
	return temp;
}

-(double)ReturnRiderFundValueOfTheYearVUDanaValueMedian: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth{
	double temp = [self ReturnRiderVUDanaValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
	RiderFundValueOfTheYearVUDanaValueMedian_Basic = temp;
	return temp;
}

-(double)ReturnRiderFundValueOfTheYearVUSmartValueMedian: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth{
	//return VURetValueMedian;
	double temp = [self ReturnRiderVUSmartValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
	RiderFundValueOfTheYearVUSmartValueMedian_Basic = temp;
	return temp;
}

-(double)ReturnRiderFundValueOfTheYearVUVentureValueMedian: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth{
	double temp = [self ReturnRiderVUVentureValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
	RiderFundValueOfTheYearVUVentureValueMedian_Basic = temp;
	return temp;
}

-(double)ReturnRiderMonthFundValueOfTheYearValueTotalMedian: (int)aaPolicyYear andMonth:(int)aaMonth{
	
	return
	[self ReturnRiderMonthFundValueOfTheYearVU2023ValueMedian:aaPolicyYear andYearOrMonth:@"M" andMont:aaMonth] +
	[self ReturnRiderMonthFundValueOfTheYearVU2025ValueMedian:aaPolicyYear andYearOrMonth:@"M" andMont:aaMonth] +
	[self ReturnRiderMonthFundValueOfTheYearVU2028ValueMedian:aaPolicyYear andYearOrMonth:@"M" andMont:aaMonth] +
	[self ReturnRiderMonthFundValueOfTheYearVU2030ValueMedian:aaPolicyYear andYearOrMonth:@"M" andMont:aaMonth] +
	[self ReturnRiderMonthFundValueOfTheYearVU2035ValueMedian:aaPolicyYear andYearOrMonth:@"M" andMont:aaMonth] +
	[self ReturnRiderMonthFundValueOfTheYearVURetValueMedian:aaPolicyYear andYearOrMonth:@"M" andMont:aaMonth] +
	[self ReturnRiderMonthFundValueOfTheYearVUDanaValueMedian:aaPolicyYear andYearOrMonth:@"M" andMont:aaMonth] +
    [self ReturnRiderMonthFundValueOfTheYearVUSmartValueMedian:aaPolicyYear andYearOrMonth:@"M" andMont:aaMonth] +
	[self ReturnRiderMonthFundValueOfTheYearVUVentureValueMedian:aaPolicyYear andYearOrMonth:@"M" andMont:aaMonth] +
    [self ReturnRiderMonthFundValueOfTheYearVUVentureBlueChipValueMedian:aaPolicyYear andYearOrMonth:@"M" andMont:aaMonth] +
    [self ReturnRiderMonthFundValueOfTheYearVUVentureDanaValueMedian:aaPolicyYear andYearOrMonth:@"M" andMont:aaMonth] +
    [self ReturnRiderMonthFundValueOfTheYearVUVentureGrowthValueMedian:aaPolicyYear andYearOrMonth:@"M" andMont:aaMonth] +
    [self ReturnRiderMonthFundValueOfTheYearVUVentureIncomeValueMedian:aaPolicyYear andYearOrMonth:@"M" andMont:aaMonth] +
    [self ReturnRiderMonthFundValueOfTheYearVUVentureManagedValueMedian:aaPolicyYear andYearOrMonth:@"M" andMont:aaMonth];
    
	
	
	
}


-(double)ReturnRiderMonthFundValueOfTheYearVU2023ValueMedian: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMont:(int)aaMonth{
	/*
     if (aaPolicyYear <= YearDiff2023) {
     RiderMonthVU2023ValueMedian = [self ReturnRiderVU2023ValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:aaMonth];
     RiderFundValueOfTheYearVU2023ValueMedian_Basic = RiderMonthVU2023ValueMedian;
     return RiderMonthVU2023ValueMedian;
     } else {
     return 0;
     }
	 */
	RiderMonthVU2023ValueMedian = 0;
	RiderMonthFundValueOfTheYearVU2023ValueMedian_Basic = 0;
	return 0;
}

-(double)ReturnRiderMonthFundValueOfTheYearVU2025ValueMedian: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMont:(int)aaMonth{
	if (aaPolicyYear <= YearDiff2025) {
		RiderMonthVU2025ValueMedian = [self ReturnRiderVU2025ValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:aaMonth];
		RiderMonthFundValueOfTheYearVU2025ValueMedian_Basic = RiderMonthVU2025ValueMedian;
		return 	RiderMonthVU2025ValueMedian;
	} else {
		return 0;
	}
}


-(double)ReturnRiderMonthFundValueOfTheYearVU2028ValueMedian: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMont:(int)aaMonth{
	if (aaPolicyYear <= YearDiff2028) {
		RiderMonthVU2028ValueMedian = [self ReturnRiderVU2028ValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:aaMonth];
		RiderMonthFundValueOfTheYearVU2028ValueMedian_Basic = RiderMonthVU2028ValueMedian;
		return 	RiderMonthVU2028ValueMedian;
	} else {
		return 0;
	}
}

-(double)ReturnRiderMonthFundValueOfTheYearVU2030ValueMedian: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMont:(int)aaMonth{
	if (aaPolicyYear <= YearDiff2030) {
		RiderMonthVU2030ValueMedian = [self ReturnRiderVU2030ValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:aaMonth];
		RiderMonthFundValueOfTheYearVU2030ValueMedian_Basic = RiderMonthVU2030ValueMedian;
		return 	RiderMonthVU2030ValueMedian;
	} else {
		return 0;
	}
}

-(double)ReturnRiderMonthFundValueOfTheYearVU2035ValueMedian: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMont:(int)aaMonth{
	if (aaPolicyYear <= YearDiff2035) {
		RiderMonthVU2035ValueMedian = [self ReturnRiderVU2035ValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:aaMonth];
		RiderMonthFundValueOfTheYearVU2035ValueMedian_Basic = RiderMonthVU2035ValueMedian;
		return 	RiderMonthVU2035ValueMedian;
	} else {
		return 0;
	}
}

-(double)ReturnRiderMonthFundValueOfTheYearVURetValueMedian: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMont:(int)aaMonth{
	RiderMonthVURetValueMedian = [self ReturnRiderVURetValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:aaMonth];
	RiderMonthFundValueOfTheYearVURetValueMedian_Basic = RiderMonthVURetValueMedian;
	return 	RiderMonthVURetValueMedian;
}

-(double)ReturnRiderMonthFundValueOfTheYearVUDanaValueMedian: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMont:(int)aaMonth{
	RiderMonthVUDanaValueMedian = [self ReturnRiderVUDanaValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:aaMonth];
	RiderMonthFundValueOfTheYearVUDanaValueMedian_Basic = RiderMonthVUDanaValueMedian;
	return 	RiderMonthVUDanaValueMedian;
}

-(double)ReturnRiderMonthFundValueOfTheYearVUSmartValueMedian: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMont:(int)aaMonth{
	RiderMonthVUSmartValueMedian = [self ReturnRiderVUSmartValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:aaMonth];
	RiderMonthFundValueOfTheYearVUSmartValueMedian_Basic = RiderMonthVUSmartValueMedian;
	return 	RiderMonthVUSmartValueMedian;
}

-(double)ReturnRiderMonthFundValueOfTheYearVUVentureValueMedian: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMont:(int)aaMonth{
	RiderMonthVUVentureValueMedian = [self ReturnRiderVUVentureValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:aaMonth];
	RiderMonthFundValueOfTheYearVUVentureValueMedian_Basic = RiderMonthVUVentureValueMedian;
	return 	RiderMonthVUVentureValueMedian;
}

-(double)ReturnRiderFundValueOfTheYearValueTotalLow: (int)aaPolicyYear{
	if (aaPolicyYear == YearDiff2035 || aaPolicyYear == YearDiff2030 || aaPolicyYear == YearDiff2028
		|| aaPolicyYear == YearDiff2025 || aaPolicyYear == YearDiff2023) {
		return [self ReturnRiderFundValueOfTheYearVU2023ValueLow:aaPolicyYear andYearOrMonth:@"M"] +
		[self ReturnRiderFundValueOfTheYearVU2025ValueLow:aaPolicyYear andYearOrMonth:@"M"] +
		[self ReturnRiderFundValueOfTheYearVU2028ValueLow:aaPolicyYear andYearOrMonth:@"M"] +
		[self ReturnRiderFundValueOfTheYearVU2030ValueLow:aaPolicyYear andYearOrMonth:@"M"] +
		[self ReturnRiderFundValueOfTheYearVU2035ValueLow:aaPolicyYear andYearOrMonth:@"M"] +
		[self ReturnRiderFundValueOfTheYearVURetValueLow:aaPolicyYear andYearOrMonth:@"M"] +
		[self ReturnRiderFundValueOfTheYearVUDanaValueLow:aaPolicyYear andYearOrMonth:@"M"] +
        [self ReturnRiderFundValueOfTheYearVUSmartValueLow:aaPolicyYear andYearOrMonth:@"M"] +
		[self ReturnRiderFundValueOfTheYearVUVentureValueLow:aaPolicyYear andYearOrMonth:@"M"] +
        [self ReturnRiderFundValueOfTheYearVUVentureBlueChipValueLow:aaPolicyYear andYearOrMonth:@"M"] +
        [self ReturnRiderFundValueOfTheYearVUVentureDanaValueLow:aaPolicyYear andYearOrMonth:@"M"] +
        [self ReturnRiderFundValueOfTheYearVUVentureGrowthValueLow:aaPolicyYear andYearOrMonth:@"M"] +
        [self ReturnRiderFundValueOfTheYearVUVentureIncomeValueLow:aaPolicyYear andYearOrMonth:@"M"] +
        [self ReturnRiderFundValueOfTheYearVUVentureManagedValueLow:aaPolicyYear andYearOrMonth:@"M"];
	}
	else{
		return [self ReturnRiderFundValueOfTheYearVU2023ValueLow:aaPolicyYear andYearOrMonth:@"Y"] +
		[self ReturnRiderFundValueOfTheYearVU2025ValueLow:aaPolicyYear andYearOrMonth:@"Y"] +
		[self ReturnRiderFundValueOfTheYearVU2028ValueLow:aaPolicyYear andYearOrMonth:@"Y"] +
		[self ReturnRiderFundValueOfTheYearVU2030ValueLow:aaPolicyYear andYearOrMonth:@"Y"] +
		[self ReturnRiderFundValueOfTheYearVU2035ValueLow:aaPolicyYear andYearOrMonth:@"Y"] +
		[self ReturnRiderFundValueOfTheYearVURetValueLow:aaPolicyYear andYearOrMonth:@"Y"] +
		[self ReturnRiderFundValueOfTheYearVUDanaValueLow:aaPolicyYear andYearOrMonth:@"Y"] +
        [self ReturnRiderFundValueOfTheYearVUSmartValueLow:aaPolicyYear andYearOrMonth:@"Y"] +
		[self ReturnRiderFundValueOfTheYearVUVentureValueLow:aaPolicyYear andYearOrMonth:@"Y"] +
        [self ReturnRiderFundValueOfTheYearVUVentureBlueChipValueLow:aaPolicyYear andYearOrMonth:@"Y"] +
        [self ReturnRiderFundValueOfTheYearVUVentureDanaValueLow:aaPolicyYear andYearOrMonth:@"Y"] +
        [self ReturnRiderFundValueOfTheYearVUVentureGrowthValueLow:aaPolicyYear andYearOrMonth:@"Y"] +
        [self ReturnRiderFundValueOfTheYearVUVentureIncomeValueLow:aaPolicyYear andYearOrMonth:@"Y"] +
        [self ReturnRiderFundValueOfTheYearVUVentureManagedValueLow:aaPolicyYear andYearOrMonth:@"Y"];
	}
	
	
	/*
	 return  0;
	 */
}


-(double)ReturnRiderFundValueOfTheYearVU2023ValueLow: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth{
	/*
     if (aaPolicyYear <= YearDiff2023) {
     double temp = [self ReturnRiderVU2023ValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
     RiderFundValueOfTheYearVU2023ValueLow_Basic = temp;
     return temp;
     } else {
     return 0;
     }
	 */
	RiderFundValueOfTheYearVU2023ValueLow_Basic = 0;
	return 0;
}

-(double)ReturnRiderFundValueOfTheYearVU2025ValueLow: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth{
	if (aaPolicyYear <= YearDiff2025) {
		double temp = [self ReturnRiderVU2025ValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
		RiderFundValueOfTheYearVU2025ValueLow_Basic = temp;
		return temp;
	} else {
		return 0;
	}
}


-(double)ReturnRiderFundValueOfTheYearVU2028ValueLow: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth{
	if (aaPolicyYear <= YearDiff2028) {
		double temp = [self ReturnRiderVU2028ValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
		RiderFundValueOfTheYearVU2028ValueLow_Basic = temp;
		return temp;
	} else {
		return 0;
	}
}

-(double)ReturnRiderFundValueOfTheYearVU2030ValueLow: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth{
	if (aaPolicyYear <= YearDiff2030) {
		double temp = [self ReturnRiderVU2030ValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
		RiderFundValueOfTheYearVU2030ValueLow_Basic = temp;
		return temp;
	} else {
		return 0;
	}
}

-(double)ReturnRiderFundValueOfTheYearVU2035ValueLow: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth{
	if (aaPolicyYear <= YearDiff2035) {
		double temp = [self ReturnRiderVU2035ValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
		RiderFundValueOfTheYearVU2035ValueLow_Basic = temp;
		return temp;
	} else {
		return 0;
	}
}

-(double)ReturnRiderFundValueOfTheYearVURetValueLow: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth{
	double temp = [self ReturnRiderVURetValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
	RiderFundValueOfTheYearVURetValueLow_Basic = temp;
	return temp;
}

-(double)ReturnRiderFundValueOfTheYearVUDanaValueLow: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth{
	double temp = [self ReturnRiderVUDanaValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
	RiderFundValueOfTheYearVUDanaValueLow_Basic = temp;
	return temp;
}

-(double)ReturnRiderFundValueOfTheYearVUSmartValueLow: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth{
	double temp = [self ReturnRiderVUSmartValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
	RiderFundValueOfTheYearVUSmartValueLow_Basic = temp;
	return temp;
}

-(double)ReturnRiderFundValueOfTheYearVUVentureValueLow: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth{
	double temp = [self ReturnRiderVUVentureValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
	RiderFundValueOfTheYearVUVentureValueLow_Basic = temp;
	return temp;
}

-(double)ReturnRiderMonthFundValueOfTheYearValueTotalLow: (int)aaPolicyYear andMonth:(int)aaMonth{
	
	return [self ReturnRiderMonthFundValueOfTheYearVU2023ValueLow:aaPolicyYear andYearOrMonth:@"M" andMonth:aaMonth] +
	[self ReturnRiderMonthFundValueOfTheYearVU2025ValueLow:aaPolicyYear andYearOrMonth:@"M" andMonth:aaMonth] +
	[self ReturnRiderMonthFundValueOfTheYearVU2028ValueLow:aaPolicyYear andYearOrMonth:@"M" andMonth:aaMonth] +
	[self ReturnRiderMonthFundValueOfTheYearVU2030ValueLow:aaPolicyYear andYearOrMonth:@"M" andMonth:aaMonth] +
	[self ReturnRiderMonthFundValueOfTheYearVU2035ValueLow:aaPolicyYear andYearOrMonth:@"M" andMonth:aaMonth] +
	[self ReturnRiderMonthFundValueOfTheYearVURetValueLow:aaPolicyYear andYearOrMonth:@"M" andMonth:aaMonth] +
	[self ReturnRiderMonthFundValueOfTheYearVUDanaValueLow:aaPolicyYear andYearOrMonth:@"M" andMonth:aaMonth] +
    [self ReturnRiderMonthFundValueOfTheYearVUSmartValueLow:aaPolicyYear andYearOrMonth:@"M" andMonth:aaMonth] +
	[self ReturnRiderMonthFundValueOfTheYearVUVentureValueLow:aaPolicyYear andYearOrMonth:@"M" andMonth:aaMonth] +
    [self ReturnRiderMonthFundValueOfTheYearVUVentureBlueChipValueLow:aaPolicyYear andYearOrMonth:@"M" andMonth:aaMonth] +
    [self ReturnRiderMonthFundValueOfTheYearVUVentureDanaValueLow:aaPolicyYear andYearOrMonth:@"M" andMonth:aaMonth] +
    [self ReturnRiderMonthFundValueOfTheYearVUVentureGrowthValueLow:aaPolicyYear andYearOrMonth:@"M" andMonth:aaMonth] +
    [self ReturnRiderMonthFundValueOfTheYearVUVentureIncomeValueLow:aaPolicyYear andYearOrMonth:@"M" andMonth:aaMonth] +
    [self ReturnRiderMonthFundValueOfTheYearVUVentureManagedValueLow:aaPolicyYear andYearOrMonth:@"M" andMonth:aaMonth];
	
	
}

-(double)ReturnRiderMonthFundValueOfTheYearVU2023ValueLow: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMonth:(int)aaMonth{
	/*
     if (aaPolicyYear <= YearDiff2023) {
     RiderMonthVU2023ValueLow = [self ReturnRiderVU2023ValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:aaMonth];
     RiderFundValueOfTheYearVU2023ValueLow_Basic = RiderMonthVU2023ValueLow;
     return RiderMonthVU2023ValueLow;
     } else {
     return 0;
     }
	 */
	RiderFundValueOfTheYearVU2023ValueLow_Basic = 0;
	RiderMonthVU2023ValueLow = 0;
	return 0;
}

-(double)ReturnRiderMonthFundValueOfTheYearVU2025ValueLow: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMonth:(int)aaMonth{
	if (aaPolicyYear <= YearDiff2025) {
		RiderMonthVU2025ValueLow = [self ReturnRiderVU2025ValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:aaMonth];
		RiderMonthFundValueOfTheYearVU2025ValueLow_Basic = RiderMonthVU2025ValueLow;
		return RiderMonthVU2025ValueLow;
	} else {
		return 0;
	}
}


-(double)ReturnRiderMonthFundValueOfTheYearVU2028ValueLow: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMonth:(int)aaMonth{
	if (aaPolicyYear <= YearDiff2028) {
		RiderMonthVU2028ValueLow = [self ReturnRiderVU2028ValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:aaMonth];
		RiderMonthFundValueOfTheYearVU2028ValueLow_Basic = RiderMonthVU2028ValueLow;
		return RiderMonthVU2028ValueLow;
	} else {
		return 0;
	}
}

-(double)ReturnRiderMonthFundValueOfTheYearVU2030ValueLow: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMonth:(int)aaMonth{
	if (aaPolicyYear <= YearDiff2030) {
		RiderMonthVU2030ValueLow = [self ReturnRiderVU2030ValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:aaMonth];
		RiderMonthFundValueOfTheYearVU2030ValueLow_Basic = RiderMonthVU2030ValueLow;
		return RiderMonthVU2030ValueLow;
	} else {
		return 0;
	}
}

-(double)ReturnRiderMonthFundValueOfTheYearVU2035ValueLow: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMonth:(int)aaMonth{
	if (aaPolicyYear <= YearDiff2035) {
		RiderMonthVU2035ValueLow = [self ReturnRiderVU2035ValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:aaMonth];
		RiderMonthFundValueOfTheYearVU2035ValueLow_Basic = RiderMonthVU2035ValueLow;
		return RiderMonthVU2035ValueLow;
	} else {
		return 0;
	}
}

-(double)ReturnRiderMonthFundValueOfTheYearVURetValueLow: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMonth:(int)aaMonth{
	RiderMonthVURetValueLow = [self ReturnRiderVURetValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:aaMonth];
	RiderMonthFundValueOfTheYearVURetValueLow_Basic = RiderMonthVURetValueLow;
	return RiderMonthVURetValueLow;
}

-(double)ReturnRiderMonthFundValueOfTheYearVUDanaValueLow: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMonth:(int)aaMonth{
	RiderMonthVUDanaValueLow = [self ReturnRiderVUDanaValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:aaMonth];
	RiderMonthFundValueOfTheYearVUDanaValueLow_Basic = RiderMonthVUDanaValueLow;
	return RiderMonthVUDanaValueLow;
}

-(double)ReturnRiderMonthFundValueOfTheYearVUSmartValueLow: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMonth:(int)aaMonth{
	RiderMonthVUSmartValueLow = [self ReturnRiderVUSmartValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:aaMonth];
	RiderMonthFundValueOfTheYearVUSmartValueLow_Basic = RiderMonthVUSmartValueLow;
	return RiderMonthVUSmartValueLow;
}

-(double)ReturnRiderMonthFundValueOfTheYearVUVentureValueLow: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMonth:(int)aaMonth{
	RiderMonthVUVentureValueLow = [self ReturnRiderVUVentureValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:aaMonth];
	RiderMonthFundValueOfTheYearVUVentureValueLow_Basic = RiderMonthVUVentureValueLow;
	return RiderMonthVUVentureValueLow;
}

-(double)ReturnRiderFundValueOfTheYearVUVentureGrowthValueHigh: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth{
    double temp = [self ReturnRiderVUVentureGrowthValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
    RiderFundValueOfTheYearVUVentureGrowthValueHigh_Basic = temp;
    
    return temp;
}

-(double)ReturnRiderMonthFundValueOfTheYearVUVentureGrowthValueHigh: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMonth:(int)aaMonth{
    RiderMonthVUVentureGrowthValueHigh = [self ReturnRiderVUVentureGrowthValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:aaMonth];
    RiderMonthFundValueOfTheYearVUVentureGrowthValueHigh_Basic = RiderMonthVUVentureGrowthValueHigh;
    return RiderMonthVUVentureGrowthValueHigh;
}

-(double)ReturnRiderFundValueOfTheYearVUVentureGrowthValueMedian: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth{
    //return VUVentureGrowthValueMedian;
    double temp = [self ReturnRiderVUVentureGrowthValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
    RiderFundValueOfTheYearVUVentureGrowthValueMedian_Basic = temp;
    return temp;
}

-(double)ReturnRiderMonthFundValueOfTheYearVUVentureGrowthValueMedian: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMont:(int)aaMonth{
    RiderMonthVUVentureGrowthValueMedian = [self ReturnRiderVUVentureGrowthValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:aaMonth];
    RiderMonthFundValueOfTheYearVUVentureGrowthValueMedian_Basic = RiderMonthVUVentureGrowthValueMedian;
    return 	RiderMonthVUVentureGrowthValueMedian;
}

-(double)ReturnRiderFundValueOfTheYearVUVentureGrowthValueLow: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth{
    double temp = [self ReturnRiderVUVentureGrowthValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
    RiderFundValueOfTheYearVUVentureGrowthValueLow_Basic = temp;
    return temp;
}

-(double)ReturnRiderMonthFundValueOfTheYearVUVentureGrowthValueLow: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMonth:(int)aaMonth{
    RiderMonthVUVentureGrowthValueLow = [self ReturnRiderVUVentureGrowthValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:aaMonth];
    RiderMonthFundValueOfTheYearVUVentureGrowthValueLow_Basic = RiderMonthVUVentureGrowthValueLow;
    return RiderMonthVUVentureGrowthValueLow;
}

-(double)ReturnRiderFundValueOfTheYearVUVentureBlueChipValueHigh: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth{
    double temp = [self ReturnRiderVUVentureBlueChipValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
    RiderFundValueOfTheYearVUVentureBlueChipValueHigh_Basic = temp;
    
    return temp;
}

-(double)ReturnRiderMonthFundValueOfTheYearVUVentureBlueChipValueHigh: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMonth:(int)aaMonth{
    RiderMonthVUVentureBlueChipValueHigh = [self ReturnRiderVUVentureBlueChipValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:aaMonth];
    RiderMonthFundValueOfTheYearVUVentureBlueChipValueHigh_Basic = RiderMonthVUVentureBlueChipValueHigh;
    return RiderMonthVUVentureBlueChipValueHigh;
}

-(double)ReturnRiderFundValueOfTheYearVUVentureBlueChipValueMedian: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth{
    //return VUVentureBlueChipValueMedian;
    double temp = [self ReturnRiderVUVentureBlueChipValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
    RiderFundValueOfTheYearVUVentureBlueChipValueMedian_Basic = temp;
    return temp;
}

-(double)ReturnRiderMonthFundValueOfTheYearVUVentureBlueChipValueMedian: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMont:(int)aaMonth{
    RiderMonthVUVentureBlueChipValueMedian = [self ReturnRiderVUVentureBlueChipValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:aaMonth];
    RiderMonthFundValueOfTheYearVUVentureBlueChipValueMedian_Basic = RiderMonthVUVentureBlueChipValueMedian;
    return 	RiderMonthVUVentureBlueChipValueMedian;
}

-(double)ReturnRiderFundValueOfTheYearVUVentureBlueChipValueLow: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth{
    double temp = [self ReturnRiderVUVentureBlueChipValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
    RiderFundValueOfTheYearVUVentureBlueChipValueLow_Basic = temp;
    return temp;
}

-(double)ReturnRiderMonthFundValueOfTheYearVUVentureBlueChipValueLow: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMonth:(int)aaMonth{
    RiderMonthVUVentureBlueChipValueLow = [self ReturnRiderVUVentureBlueChipValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:aaMonth];
    RiderMonthFundValueOfTheYearVUVentureBlueChipValueLow_Basic = RiderMonthVUVentureBlueChipValueLow;
    return RiderMonthVUVentureBlueChipValueLow;
}

-(double)ReturnRiderFundValueOfTheYearVUVentureDanaValueHigh: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth{
    double temp = [self ReturnRiderVUVentureDanaValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
    RiderFundValueOfTheYearVUVentureDanaValueHigh_Basic = temp;
    
    return temp;
}

-(double)ReturnRiderMonthFundValueOfTheYearVUVentureDanaValueHigh: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMonth:(int)aaMonth{
    RiderMonthVUVentureDanaValueHigh = [self ReturnRiderVUVentureDanaValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:aaMonth];
    RiderMonthFundValueOfTheYearVUVentureDanaValueHigh_Basic = RiderMonthVUVentureDanaValueHigh;
    return RiderMonthVUVentureDanaValueHigh;
}

-(double)ReturnRiderFundValueOfTheYearVUVentureDanaValueMedian: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth{
    //return VUVentureDanaValueMedian;
    double temp = [self ReturnRiderVUVentureDanaValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
    RiderFundValueOfTheYearVUVentureDanaValueMedian_Basic = temp;
    return temp;
}

-(double)ReturnRiderMonthFundValueOfTheYearVUVentureDanaValueMedian: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMont:(int)aaMonth{
    RiderMonthVUVentureDanaValueMedian = [self ReturnRiderVUVentureDanaValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:aaMonth];
    RiderMonthFundValueOfTheYearVUVentureDanaValueMedian_Basic = RiderMonthVUVentureDanaValueMedian;
    return 	RiderMonthVUVentureDanaValueMedian;
}

-(double)ReturnRiderFundValueOfTheYearVUVentureDanaValueLow: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth{
    double temp = [self ReturnRiderVUVentureDanaValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
    RiderFundValueOfTheYearVUVentureDanaValueLow_Basic = temp;
    return temp;
}

-(double)ReturnRiderMonthFundValueOfTheYearVUVentureDanaValueLow: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMonth:(int)aaMonth{
    RiderMonthVUVentureDanaValueLow = [self ReturnRiderVUVentureDanaValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:aaMonth];
    RiderMonthFundValueOfTheYearVUVentureDanaValueLow_Basic = RiderMonthVUVentureDanaValueLow;
    return RiderMonthVUVentureDanaValueLow;
}

-(double)ReturnRiderFundValueOfTheYearVUVentureManagedValueHigh: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth{
    double temp = [self ReturnRiderVUVentureManagedValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
    RiderFundValueOfTheYearVUVentureManagedValueHigh_Basic = temp;
    
    return temp;
}

-(double)ReturnRiderMonthFundValueOfTheYearVUVentureManagedValueHigh: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMonth:(int)aaMonth{
    RiderMonthVUVentureManagedValueHigh = [self ReturnRiderVUVentureManagedValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:aaMonth];
    RiderMonthFundValueOfTheYearVUVentureManagedValueHigh_Basic = RiderMonthVUVentureManagedValueHigh;
    return RiderMonthVUVentureManagedValueHigh;
}

-(double)ReturnRiderFundValueOfTheYearVUVentureManagedValueMedian: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth{
    //return VUVentureManagedValueMedian;
    double temp = [self ReturnRiderVUVentureManagedValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
    RiderFundValueOfTheYearVUVentureManagedValueMedian_Basic = temp;
    return temp;
}

-(double)ReturnRiderMonthFundValueOfTheYearVUVentureManagedValueMedian: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMont:(int)aaMonth{
    RiderMonthVUVentureManagedValueMedian = [self ReturnRiderVUVentureManagedValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:aaMonth];
    RiderMonthFundValueOfTheYearVUVentureManagedValueMedian_Basic = RiderMonthVUVentureManagedValueMedian;
    return 	RiderMonthVUVentureManagedValueMedian;
}

-(double)ReturnRiderFundValueOfTheYearVUVentureManagedValueLow: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth{
    double temp = [self ReturnRiderVUVentureManagedValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
    RiderFundValueOfTheYearVUVentureManagedValueLow_Basic = temp;
    return temp;
}

-(double)ReturnRiderMonthFundValueOfTheYearVUVentureManagedValueLow: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMonth:(int)aaMonth{
    RiderMonthVUVentureManagedValueLow = [self ReturnRiderVUVentureManagedValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:aaMonth];
    RiderMonthFundValueOfTheYearVUVentureManagedValueLow_Basic = RiderMonthVUVentureManagedValueLow;
    return RiderMonthVUVentureManagedValueLow;
}

-(double)ReturnRiderFundValueOfTheYearVUVentureIncomeValueHigh: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth{
    double temp = [self ReturnRiderVUVentureIncomeValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
    RiderFundValueOfTheYearVUVentureIncomeValueHigh_Basic = temp;
    
    return temp;
}

-(double)ReturnRiderMonthFundValueOfTheYearVUVentureIncomeValueHigh: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMonth:(int)aaMonth{
    RiderMonthVUVentureIncomeValueHigh = [self ReturnRiderVUVentureIncomeValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:aaMonth];
    RiderMonthFundValueOfTheYearVUVentureIncomeValueHigh_Basic = RiderMonthVUVentureIncomeValueHigh;
    return RiderMonthVUVentureIncomeValueHigh;
}

-(double)ReturnRiderFundValueOfTheYearVUVentureIncomeValueMedian: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth{
    //return VUVentureIncomeValueMedian;
    double temp = [self ReturnRiderVUVentureIncomeValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
    RiderFundValueOfTheYearVUVentureIncomeValueMedian_Basic = temp;
    return temp;
}

-(double)ReturnRiderMonthFundValueOfTheYearVUVentureIncomeValueMedian: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMont:(int)aaMonth{
    RiderMonthVUVentureIncomeValueMedian = [self ReturnRiderVUVentureIncomeValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:aaMonth];
    RiderMonthFundValueOfTheYearVUVentureIncomeValueMedian_Basic = RiderMonthVUVentureIncomeValueMedian;
    return 	RiderMonthVUVentureIncomeValueMedian;
}

-(double)ReturnRiderFundValueOfTheYearVUVentureIncomeValueLow: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth{
    double temp = [self ReturnRiderVUVentureIncomeValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
    RiderFundValueOfTheYearVUVentureIncomeValueLow_Basic = temp;
    return temp;
}

-(double)ReturnRiderMonthFundValueOfTheYearVUVentureIncomeValueLow: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMonth:(int)aaMonth{
    RiderMonthVUVentureIncomeValueLow = [self ReturnRiderVUVentureIncomeValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:aaMonth];
    RiderMonthFundValueOfTheYearVUVentureIncomeValueLow_Basic = RiderMonthVUVentureIncomeValueLow;
    return RiderMonthVUVentureIncomeValueLow;
}

-(double)ReturnRiderFundValueOfTheYearVUVenture6666ValueHigh: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth{
    double temp = [self ReturnRiderVUVenture6666ValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
    RiderFundValueOfTheYearVUVenture6666ValueHigh_Basic = temp;
    
    return temp;
}

-(double)ReturnRiderMonthFundValueOfTheYearVUVenture6666ValueHigh: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMonth:(int)aaMonth{
    RiderMonthVUVenture6666ValueHigh = [self ReturnRiderVUVenture6666ValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:aaMonth];
    RiderMonthFundValueOfTheYearVUVenture6666ValueHigh_Basic = RiderMonthVUVenture6666ValueHigh;
    return RiderMonthVUVenture6666ValueHigh;
}

-(double)ReturnRiderFundValueOfTheYearVUVenture6666ValueMedian: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth{
    //return VUVenture6666ValueMedian;
    double temp = [self ReturnRiderVUVenture6666ValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
    RiderFundValueOfTheYearVUVenture6666ValueMedian_Basic = temp;
    return temp;
}

-(double)ReturnRiderMonthFundValueOfTheYearVUVenture6666ValueMedian: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMont:(int)aaMonth{
    RiderMonthVUVenture6666ValueMedian = [self ReturnRiderVUVenture6666ValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:aaMonth];
    RiderMonthFundValueOfTheYearVUVenture6666ValueMedian_Basic = RiderMonthVUVenture6666ValueMedian;
    return 	RiderMonthVUVenture6666ValueMedian;
}

-(double)ReturnRiderFundValueOfTheYearVUVenture6666ValueLow: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth{
    double temp = [self ReturnRiderVUVenture6666ValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
    RiderFundValueOfTheYearVUVenture6666ValueLow_Basic = temp;
    return temp;
}

-(double)ReturnRiderMonthFundValueOfTheYearVUVenture6666ValueLow: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMonth:(int)aaMonth{
    RiderMonthVUVenture6666ValueLow = [self ReturnRiderVUVenture6666ValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:aaMonth];
    RiderMonthFundValueOfTheYearVUVenture6666ValueLow_Basic = RiderMonthVUVenture6666ValueLow;
    return RiderMonthVUVenture6666ValueLow;
}

-(double)ReturnRiderFundValueOfTheYearVUVenture7777ValueHigh: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth{
    double temp = [self ReturnRiderVUVenture7777ValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
    RiderFundValueOfTheYearVUVenture7777ValueHigh_Basic = temp;
    
    return temp;
}

-(double)ReturnRiderMonthFundValueOfTheYearVUVenture7777ValueHigh: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMonth:(int)aaMonth{
    RiderMonthVUVenture7777ValueHigh = [self ReturnRiderVUVenture7777ValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:aaMonth];
    RiderMonthFundValueOfTheYearVUVenture7777ValueHigh_Basic = RiderMonthVUVenture7777ValueHigh;
    return RiderMonthVUVenture7777ValueHigh;
}

-(double)ReturnRiderFundValueOfTheYearVUVenture7777ValueMedian: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth{
    //return VUVenture7777ValueMedian;
    double temp = [self ReturnRiderVUVenture7777ValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
    RiderFundValueOfTheYearVUVenture7777ValueMedian_Basic = temp;
    return temp;
}

-(double)ReturnRiderMonthFundValueOfTheYearVUVenture7777ValueMedian: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMont:(int)aaMonth{
    RiderMonthVUVenture7777ValueMedian = [self ReturnRiderVUVenture7777ValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:aaMonth];
    RiderMonthFundValueOfTheYearVUVenture7777ValueMedian_Basic = RiderMonthVUVenture7777ValueMedian;
    return 	RiderMonthVUVenture7777ValueMedian;
}

-(double)ReturnRiderFundValueOfTheYearVUVenture7777ValueLow: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth{
    double temp = [self ReturnRiderVUVenture7777ValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
    RiderFundValueOfTheYearVUVenture7777ValueLow_Basic = temp;
    return temp;
}

-(double)ReturnRiderMonthFundValueOfTheYearVUVenture7777ValueLow: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMonth:(int)aaMonth{
    RiderMonthVUVenture7777ValueLow = [self ReturnRiderVUVenture7777ValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:aaMonth];
    RiderMonthFundValueOfTheYearVUVenture7777ValueLow_Basic = RiderMonthVUVenture7777ValueLow;
    return RiderMonthVUVenture7777ValueLow;
}

-(double)ReturnRiderFundValueOfTheYearVUVenture8888ValueHigh: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth{
    double temp = [self ReturnRiderVUVenture8888ValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
    RiderFundValueOfTheYearVUVenture8888ValueHigh_Basic = temp;
    
    return temp;
}

-(double)ReturnRiderMonthFundValueOfTheYearVUVenture8888ValueHigh: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMonth:(int)aaMonth{
    RiderMonthVUVenture8888ValueHigh = [self ReturnRiderVUVenture8888ValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:aaMonth];
    RiderMonthFundValueOfTheYearVUVenture8888ValueHigh_Basic = RiderMonthVUVenture8888ValueHigh;
    return RiderMonthVUVenture8888ValueHigh;
}

-(double)ReturnRiderFundValueOfTheYearVUVenture8888ValueMedian: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth{
    //return VUVenture8888ValueMedian;
    double temp = [self ReturnRiderVUVenture8888ValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
    RiderFundValueOfTheYearVUVenture8888ValueMedian_Basic = temp;
    return temp;
}

-(double)ReturnRiderMonthFundValueOfTheYearVUVenture8888ValueMedian: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMont:(int)aaMonth{
    RiderMonthVUVenture8888ValueMedian = [self ReturnRiderVUVenture8888ValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:aaMonth];
    RiderMonthFundValueOfTheYearVUVenture8888ValueMedian_Basic = RiderMonthVUVenture8888ValueMedian;
    return 	RiderMonthVUVenture8888ValueMedian;
}

-(double)ReturnRiderFundValueOfTheYearVUVenture8888ValueLow: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth{
    double temp = [self ReturnRiderVUVenture8888ValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
    RiderFundValueOfTheYearVUVenture8888ValueLow_Basic = temp;
    return temp;
}

-(double)ReturnRiderMonthFundValueOfTheYearVUVenture8888ValueLow: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMonth:(int)aaMonth{
    RiderMonthVUVenture8888ValueLow = [self ReturnRiderVUVenture8888ValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:aaMonth];
    RiderMonthFundValueOfTheYearVUVenture8888ValueLow_Basic = RiderMonthVUVenture8888ValueLow;
    return RiderMonthVUVenture8888ValueLow;
}


-(double)ReturnRiderFundValueOfTheYearVUVenture9999ValueHigh: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth{
    double temp = [self ReturnRiderVUVenture9999ValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
    RiderFundValueOfTheYearVUVenture9999ValueHigh_Basic = temp;
    
    return temp;
}

-(double)ReturnRiderMonthFundValueOfTheYearVUVenture9999ValueHigh: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMonth:(int)aaMonth{
    RiderMonthVUVenture9999ValueHigh = [self ReturnRiderVUVenture9999ValueHigh:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:aaMonth];
    RiderMonthFundValueOfTheYearVUVenture9999ValueHigh_Basic = RiderMonthVUVenture9999ValueHigh;
    return RiderMonthVUVenture9999ValueHigh;
}

-(double)ReturnRiderFundValueOfTheYearVUVenture9999ValueMedian: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth{
    //return VUVenture9999ValueMedian;
    double temp = [self ReturnRiderVUVenture9999ValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
    RiderFundValueOfTheYearVUVenture9999ValueMedian_Basic = temp;
    return temp;
}

-(double)ReturnRiderMonthFundValueOfTheYearVUVenture9999ValueMedian: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMont:(int)aaMonth{
    RiderMonthVUVenture9999ValueMedian = [self ReturnRiderVUVenture9999ValueMedian:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:aaMonth];
    RiderMonthFundValueOfTheYearVUVenture9999ValueMedian_Basic = RiderMonthVUVenture9999ValueMedian;
    return 	RiderMonthVUVenture9999ValueMedian;
}

-(double)ReturnRiderFundValueOfTheYearVUVenture9999ValueLow: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth{
    double temp = [self ReturnRiderVUVenture9999ValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:0];
    RiderFundValueOfTheYearVUVenture9999ValueLow_Basic = temp;
    return temp;
}

-(double)ReturnRiderMonthFundValueOfTheYearVUVenture9999ValueLow: (int)aaPolicyYear andYearOrMonth:(NSString *)aaYearOrMonth andMonth:(int)aaMonth{
    RiderMonthVUVenture9999ValueLow = [self ReturnRiderVUVenture9999ValueLow:aaPolicyYear andYearOrMonth:aaYearOrMonth andRound:1 andMonth:aaMonth];
    RiderMonthFundValueOfTheYearVUVenture9999ValueLow_Basic = RiderMonthVUVenture9999ValueLow;
    return RiderMonthVUVenture9999ValueLow;
}


#pragma mark - RPUO Fund Balance Calculation

-(double)PaidUpOptionTable_2023_High :(double)aaValue andPolicyYear :(int)aaPolicyYear {
	double temp = 0.00;
	
	if (ECAR60Exist == TRUE) {
		
	}
	else{
		temp = aaValue * ((1 + [self ReturnVU2023InstHigh:@"A"]) * (1 + [self ReturnLoyaltyBonus:aaPolicyYear])) + VU2023Value_EverCash60;
	}
	
	return temp + VU2023Value_EverCash1 + VU2023Value_EverCash6;
}

-(double)PaidUpOptionTable_2023_Median:(double)aaValue andPolicyYear :(int)aaPolicyYear {
	double temp = 0.00;
	
	if (ECAR60Exist == TRUE) {
		
	}
	else{
		temp = aaValue * ((1 + [self ReturnVU2023InstMedian:@"A"]) * (1 + [self ReturnLoyaltyBonus:aaPolicyYear])) + VU2023Value_EverCash60;
	}
	
	return temp + VU2023Value_EverCash1 + VU2023Value_EverCash6;
}

-(double)PaidUpOptionTable_2023_Low:(double)aaValue andPolicyYear :(int)aaPolicyYear {
	double temp = 0.00;
	
	if (ECAR60Exist == TRUE) {
		
	}
	else{
		temp = aaValue * ((1 + [self ReturnVU2023InstLow:@"A"]) * (1 + [self ReturnLoyaltyBonus:aaPolicyYear])) + VU2023Value_EverCash60
		;
	}
	
	return temp + VU2023Value_EverCash1 + VU2023Value_EverCash6;
}

-(double)PaidUpOptionTable_2025_High:(double)aaValue andPolicyYear :(int)aaPolicyYear {
    
	double temp = 0.00;
	double Value1 = aaValue * (1 + [self ReturnVU2025InstHigh:@"A"]) * (1 + [self ReturnLoyaltyBonus:aaPolicyYear]/100.00);
	double Value2 = VU2025Value_EverCash60;
    
	
	
	if (aaPolicyYear == FundTerm2023) {
		NSDateFormatter* df = [[NSDateFormatter alloc] init];
		[df setDateFormat:@"dd/MM/yyyy"];
		NSDate* d = [df dateFromString:getPlanCommDate];
		NSDate* d2 = [df dateFromString:@"26/12/2023"];
		
		NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
		[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
		[formatter setMaximumFractionDigits:2];
		[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
		
		double RemainingTerm_2023 = 0.00;
		double BackTerm_2023 = 0.00;
		double Value3 = 0.00;
		RemainingTerm_2023 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
		BackTerm_2023 = 12 - [self roundUp:((RemainingTerm_2023 - round(ceil(RemainingTerm_2023)) + 1) * 12) ];
		Value3 = ReinvestAmount2023to2025_H * pow((1 + [self ReturnVU2025InstHigh:@"A"]), BackTerm_2023/12.00) ;
		temp = Value1 + Value3;
        
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear == 60) {
				temp = temp + Value2;
			}
			else if (Age + aaPolicyYear > 60){
				double GMIFactor_BackTermH2023 = (pow((1 + [self ReturnVU2025InstHigh:@"A"]), (BackTerm_2023 / 12.00)) - 1) / ( pow((1 + [self ReturnVU2025InstHigh:@"A"]), (1.00/ 12.00))   - 1);
				double GMIFactor_FrontTermH2023 = (pow((1 + [self ReturnVU2025InstHigh:@"A"]), ((12 - BackTerm_2023) / 12.00))   - 1) / (pow(1 + [self ReturnVU2025InstHigh:@"A"], (1.00/ 12.00))  - 1);
				double Value4 = Value2 * GMIFactor_BackTermH2023 + PrevVU2025Value_EverCash60 * GMIFactor_FrontTermH2023 * pow((1 + [self ReturnVU2025InstHigh:@"A"]), (BackTerm_2023 / 12.00));
				temp = temp + Value4;
			}
			else{
                
			}
		}
		
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double temp2023Inst = pow((1.00 + [self ReturnVU2025InstHigh:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVU2025Fac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * temp2023Inst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
		
	}
	else{
		if (Age + aaPolicyYear < 60) {
			temp = Value1;
		}
		else if (Age + aaPolicyYear == 60){
			temp = Value1 + Value2;
		}
		else{
			temp = Value1 + Value2 * 12 * (1 + [self ReturnVU2025InstHigh:@"M"])/(pow((1 + [self ReturnVU2025InstHigh:@"A"]), (1.00/12.00)));
		}
        
        //if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = [self ReturnVU2025Fac:aaPolicyYear] * 100;
            double tempInst = [self ReturnVU2025InstHigh:@""];
            
            temp = temp + [self PaidUpOptionTable_RTUO:FALSE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:tempInst PolYear:aaPolicyYear andMonth:0];
        //}
        
        
	}
	
    
    
	return temp + VU2025Value_EverCash1 + VU2025Value_EverCash6;
	
}

-(double)PaidUpOptionTable_2025_Median:(double)aaValue andPolicyYear :(int)aaPolicyYear {
	
	double temp = 0.00;
	double Value1 = aaValue * (1 + [self ReturnVU2025InstMedian:@"A"]) * (1 + [self ReturnLoyaltyBonus:aaPolicyYear]/100.00);
	double Value2 = VU2025Value_EverCash60;
	
	if (aaPolicyYear == FundTerm2023) {
		NSDateFormatter* df = [[NSDateFormatter alloc] init];
		[df setDateFormat:@"dd/MM/yyyy"];
		NSDate* d = [df dateFromString:getPlanCommDate];
		NSDate* d2 = [df dateFromString:@"26/12/2023"];
		
		NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
		[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
		[formatter setMaximumFractionDigits:2];
		[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
		
		double RemainingTerm_2023 = 0.00;
		double BackTerm_2023 = 0.00;
		double Value3 = 0.00;
		RemainingTerm_2023 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
		BackTerm_2023 = 12 - [self roundUp:((RemainingTerm_2023 - round(ceil(RemainingTerm_2023)) + 1) * 12) ];
		Value3 = ReinvestAmount2023to2025_M * pow((1 + [self ReturnVU2025InstMedian:@"A"]), BackTerm_2023/12.00) ;
		temp = Value1 + Value3;
		
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear == 60) {
				temp = temp + Value2;
			}
			else if (Age + aaPolicyYear > 60){
				double GMIFactor_BackTermH2023 = (pow((1 + [self ReturnVU2025InstMedian:@"A"]), (BackTerm_2023 / 12.00)) - 1) / ( pow((1 + [self ReturnVU2025InstMedian:@"A"]), (1.00/ 12.00))   - 1);
				double GMIFactor_FrontTermH2023 = (pow((1 + [self ReturnVU2025InstMedian:@"A"]), ((12 - BackTerm_2023) / 12.00))   - 1) / (pow(1 + [self ReturnVU2025InstMedian:@"A"], (1.00/ 12.00))  - 1);
				double Value4 = Value2 * GMIFactor_BackTermH2023 + PrevVU2025Value_EverCash60 * GMIFactor_FrontTermH2023 * pow((1 + [self ReturnVU2025InstMedian:@"A"]), (BackTerm_2023 / 12.00));
				temp = temp + Value4;
			}
			else{
				
			}
		}
		
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double temp2023Inst = pow((1.00 + [self ReturnVU2025InstMedian:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVU2025Fac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * temp2023Inst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
	}
	else{
		if (Age + aaPolicyYear < 60) {
			temp = Value1;
		}
		else if (Age + aaPolicyYear == 60){
			temp = Value1 + Value2;
		}
		else{
			temp = Value1 + Value2 * 12 * (1 + [self ReturnVU2025InstMedian:@"M"])/(pow((1 + [self ReturnVU2025InstMedian:@"A"]), (1.00/12.00)));
		}
        
        //if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = [self ReturnVU2025Fac:aaPolicyYear] * 100;
            double tempInst = [self ReturnVU2025InstMedian:@""];
            
            temp = temp + [self PaidUpOptionTable_RTUO:FALSE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:tempInst PolYear:aaPolicyYear andMonth:0];
        //}
	}
	
	return temp + VU2025Value_EverCash1 + VU2025Value_EverCash6;
	
}

-(double)PaidUpOptionTable_2025_Low:(double)aaValue andPolicyYear :(int)aaPolicyYear {
	
	double temp = 0.00;
	double Value1 = aaValue * (1 + [self ReturnVU2025InstLow:@"A"]) * (1 + [self ReturnLoyaltyBonus:aaPolicyYear]/100.00);
	double Value2 = VU2025Value_EverCash60;
	
	if (aaPolicyYear == FundTerm2023) {
		NSDateFormatter* df = [[NSDateFormatter alloc] init];
		[df setDateFormat:@"dd/MM/yyyy"];
		NSDate* d = [df dateFromString:getPlanCommDate];
		NSDate* d2 = [df dateFromString:@"26/12/2023"];
		
		NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
		[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
		[formatter setMaximumFractionDigits:2];
		[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
		
		double RemainingTerm_2023 = 0.00;
		double BackTerm_2023 = 0.00;
		double Value3 = 0.00;
		RemainingTerm_2023 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
		BackTerm_2023 = 12 - [self roundUp:((RemainingTerm_2023 - round(ceil(RemainingTerm_2023)) + 1) * 12) ];
		Value3 = ReinvestAmount2023to2025_L * pow((1 + [self ReturnVU2025InstLow:@"A"]), BackTerm_2023/12.00) ;
		temp = Value1 + Value3;
		
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear == 60) {
				temp = temp + Value2;
			}
			else if (Age + aaPolicyYear > 60){
				double GMIFactor_BackTermH2023 = (pow((1 + [self ReturnVU2025InstLow:@"A"]), (BackTerm_2023 / 12.00)) - 1) / ( pow((1 + [self ReturnVU2025InstLow:@"A"]), (1.00/ 12.00))   - 1);
				double GMIFactor_FrontTermH2023 = (pow((1 + [self ReturnVU2025InstLow:@"A"]), ((12 - BackTerm_2023) / 12.00))   - 1) / (pow(1 + [self ReturnVU2025InstLow:@"A"], (1.00/ 12.00))  - 1);
				double Value4 = Value2 * GMIFactor_BackTermH2023 + PrevVU2025Value_EverCash60 * GMIFactor_FrontTermH2023 * pow((1 + [self ReturnVU2025InstLow:@"A"]), (BackTerm_2023 / 12.00));
				temp = temp + Value4;
			}
			else{
				
			}
		}
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double temp2023Inst = pow((1.00 + [self ReturnVU2025InstLow:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVU2025Fac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * temp2023Inst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
		
		
	}
	else{
		if (Age + aaPolicyYear < 60) {
			temp = Value1;
		}
		else if (Age + aaPolicyYear == 60){
			temp = Value1 + Value2;
		}
		else{
			temp = Value1 + Value2 * 12 * (1 + [self ReturnVU2025InstLow:@"M"])/(pow((1 + [self ReturnVU2025InstLow:@"A"]), (1.00/12.00)));
		}
        
        //if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = [self ReturnVU2025Fac:aaPolicyYear] * 100;
            double tempInst = [self ReturnVU2025InstLow:@""];
            
            temp = temp + [self PaidUpOptionTable_RTUO:FALSE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:tempInst PolYear:aaPolicyYear andMonth:0];
        //}
	}
	
	return temp + VU2025Value_EverCash1 + VU2025Value_EverCash6;
	
}

-(double)PaidUpOptionTable_2028_High:(double)aaValue andPolicyYear :(int)aaPolicyYear {
	
	double temp = 0.00;
	double Value1 = aaValue * (1 + [self ReturnVU2028InstHigh:@"A"]) * (1 + [self ReturnLoyaltyBonus:aaPolicyYear]/100.00);
	double Value2 = VU2028Value_EverCash60;
	
	
	
	if (aaPolicyYear == FundTerm2023) {
		NSDateFormatter* df = [[NSDateFormatter alloc] init];
		[df setDateFormat:@"dd/MM/yyyy"];
		NSDate* d = [df dateFromString:getPlanCommDate];
		NSDate* d2 = [df dateFromString:@"26/12/2023"];
		
		NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
		[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
		[formatter setMaximumFractionDigits:2];
		[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
		
		double RemainingTerm_2023 = 0.00;
		double BackTerm_2023 = 0.00;
		double Value3 = 0.00;
		RemainingTerm_2023 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
		BackTerm_2023 = 12 - [self roundUp:((RemainingTerm_2023 - round(ceil(RemainingTerm_2023)) + 1) * 12) ];
		Value3 = ReinvestAmount2023to2028_H * pow((1 + [self ReturnVU2028InstHigh:@"A"]), BackTerm_2023/12.00) ;
		temp = Value1 + Value3;
		
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear == 60) {
				temp = temp + Value2;
			}
			else if (Age + aaPolicyYear > 60){
				double GMIFactor_BackTermH2023 = (pow((1 + [self ReturnVU2028InstHigh:@"A"]), (BackTerm_2023 / 12.00)) - 1) / ( pow((1 + [self ReturnVU2028InstHigh:@"A"]), (1.00/ 12.00))   - 1);
				double GMIFactor_FrontTermH2023 = (pow((1 + [self ReturnVU2028InstHigh:@"A"]), ((12 - BackTerm_2023) / 12.00))   - 1) / (pow(1 + [self ReturnVU2028InstHigh:@"A"], (1.00/ 12.00))  - 1);
				double Value4 = VU2028Value_EverCash60 * GMIFactor_BackTermH2023 + PrevVU2028Value_EverCash60 * GMIFactor_FrontTermH2023 * pow((1 + [self ReturnVU2028InstHigh:@"A"]), (BackTerm_2023 / 12.00));
				temp = temp + Value4;
			}
			else{
				
			}
		}
		
		if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVU2028InstHigh:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVU2028Fac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
	}
	else if (aaPolicyYear == FundTerm2025) {
		NSDateFormatter* df = [[NSDateFormatter alloc] init];
		[df setDateFormat:@"dd/MM/yyyy"];
		NSDate* d = [df dateFromString:getPlanCommDate];
		NSDate* d2 = [df dateFromString:@"26/12/2025"];
		
		NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
		[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
		[formatter setMaximumFractionDigits:2];
		[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
		
		double RemainingTerm_2025 = 0.00;
		double BackTerm_2025 = 0.00;
		double Value3 = 0.00;
		RemainingTerm_2025 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
		BackTerm_2025 = 12 - [self roundUp:((RemainingTerm_2025 - round(ceil(RemainingTerm_2025)) + 1) * 12) ];
		Value3 = ReinvestAmount2025to2028_H * pow((1 + [self ReturnVU2028InstHigh:@"A"]), BackTerm_2025/12.00) ;
		temp = Value1 + Value3;
		
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear == 60) {
				temp = temp + Value2;
			}
			else if (Age + aaPolicyYear > 60){
				double GMIFactor_BackTermH2025 = (pow((1 + [self ReturnVU2028InstHigh:@"A"]), (BackTerm_2025 / 12.00)) - 1) / ( pow((1 + [self ReturnVU2028InstHigh:@"A"]), (1.00/ 12.00))   - 1);
				double GMIFactor_FrontTermH2025 = (pow((1 + [self ReturnVU2028InstHigh:@"A"]), ((12 - BackTerm_2025) / 12.00))   - 1) / (pow(1 + [self ReturnVU2028InstHigh:@"A"], (1.00/ 12.00))  - 1);
				double Value4 = VU2028Value_EverCash60 * GMIFactor_BackTermH2025 + PrevVU2028Value_EverCash60 * GMIFactor_FrontTermH2025 * pow((1 + [self ReturnVU2028InstHigh:@"A"]), (BackTerm_2025 / 12.00));
				temp = temp + Value4;
			}
			else{
				
			}
		}
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVU2028InstHigh:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVU2028Fac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
	}
	else{
		if (Age + aaPolicyYear < 60) {
			temp = Value1;
		}
		else if (Age + aaPolicyYear == 60){
			temp = Value1 + Value2;
		}
		else{
			temp = Value1 + Value2 * 12 * (1 + [self ReturnVU2028InstHigh:@"M"])/(pow((1 + [self ReturnVU2028InstHigh:@"A"]), (1.00/12.00)));
		}
        
        //if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = [self ReturnVU2028Fac:aaPolicyYear] * 100;
            double tempInst = [self ReturnVU2028InstHigh:@""];
            
            temp = temp + [self PaidUpOptionTable_RTUO:FALSE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:tempInst PolYear:aaPolicyYear andMonth:0];
        //}
	}
	
	return temp + VU2028Value_EverCash1 + VU2028Value_EverCash6;
	
}

-(double)PaidUpOptionTable_2028_Median:(double)aaValue andPolicyYear :(int)aaPolicyYear {
	
	double temp = 0.00;
	double Value1 = aaValue * (1 + [self ReturnVU2028InstMedian:@"A"]) * (1 + [self ReturnLoyaltyBonus:aaPolicyYear]/100.00);
	double Value2 = VU2028Value_EverCash60;
	
	
	
	if (aaPolicyYear == FundTerm2023) {
		NSDateFormatter* df = [[NSDateFormatter alloc] init];
		[df setDateFormat:@"dd/MM/yyyy"];
		NSDate* d = [df dateFromString:getPlanCommDate];
		NSDate* d2 = [df dateFromString:@"26/12/2023"];
		
		NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
		[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
		[formatter setMaximumFractionDigits:2];
		[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
		
		double RemainingTerm_2023 = 0.00;
		double BackTerm_2023 = 0.00;
		double Value3 = 0.00;
		RemainingTerm_2023 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
		BackTerm_2023 = 12 - [self roundUp:((RemainingTerm_2023 - round(ceil(RemainingTerm_2023)) + 1) * 12) ];
		Value3 = ReinvestAmount2023to2028_M * pow((1 + [self ReturnVU2028InstMedian:@"A"]), BackTerm_2023/12.00) ;
		temp = Value1 + Value3;
		
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear == 60) {
				temp = temp + Value2;
			}
			else if (Age + aaPolicyYear > 60){
				double GMIFactor_BackTermH2023 = (pow((1 + [self ReturnVU2028InstMedian:@"A"]), (BackTerm_2023 / 12.00)) - 1) / ( pow((1 + [self ReturnVU2028InstMedian:@"A"]), (1.00/ 12.00))   - 1);
				double GMIFactor_FrontTermH2023 = (pow((1 + [self ReturnVU2028InstMedian:@"A"]), ((12 - BackTerm_2023) / 12.00))   - 1) / (pow(1 + [self ReturnVU2028InstMedian:@"A"], (1.00/ 12.00))  - 1);
				double Value4 = VU2028Value_EverCash60 * GMIFactor_BackTermH2023 + PrevVU2028Value_EverCash60 * GMIFactor_FrontTermH2023 * pow((1 + [self ReturnVU2028InstMedian:@"A"]), (BackTerm_2023 / 12.00));
				temp = temp + Value4;
			}
			else{
				
			}
		}
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVU2028InstMedian:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVU2028Fac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }

		
		
	}
	else if (aaPolicyYear == FundTerm2025) {
		NSDateFormatter* df = [[NSDateFormatter alloc] init];
		[df setDateFormat:@"dd/MM/yyyy"];
		NSDate* d = [df dateFromString:getPlanCommDate];
		NSDate* d2 = [df dateFromString:@"26/12/2025"];
		
		NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
		[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
		[formatter setMaximumFractionDigits:2];
		[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
		
		double RemainingTerm_2025 = 0.00;
		double BackTerm_2025 = 0.00;
		double Value3 = 0.00;
		RemainingTerm_2025 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
		BackTerm_2025 = 12 - [self roundUp:((RemainingTerm_2025 - round(ceil(RemainingTerm_2025)) + 1) * 12) ];
		Value3 = ReinvestAmount2025to2028_M * pow((1 + [self ReturnVU2028InstMedian:@"A"]), BackTerm_2025/12.00) ;
		temp = Value1 + Value3;
		
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear == 60) {
				temp = temp + Value2;
			}
			else if (Age + aaPolicyYear > 60){
				double GMIFactor_BackTermH2025 = (pow((1 + [self ReturnVU2028InstMedian:@"A"]), (BackTerm_2025 / 12.00)) - 1) / ( pow((1 + [self ReturnVU2028InstMedian:@"A"]), (1.00/ 12.00))   - 1);
				double GMIFactor_FrontTermH2025 = (pow((1 + [self ReturnVU2028InstMedian:@"A"]), ((12 - BackTerm_2025) / 12.00))   - 1) / (pow(1 + [self ReturnVU2028InstMedian:@"A"], (1.00/ 12.00))  - 1);
				double Value4 = VU2028Value_EverCash60 * GMIFactor_BackTermH2025 + PrevVU2028Value_EverCash60 * GMIFactor_FrontTermH2025 * pow((1 + [self ReturnVU2028InstMedian:@"A"]), (BackTerm_2025 / 12.00));
				temp = temp + Value4;
			}
			else{
				
			}
		}
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVU2028InstMedian:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVU2028Fac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
		
		
	}
	else{
		if (Age + aaPolicyYear < 60) {
			temp = Value1;
		}
		else if (Age + aaPolicyYear == 60){
			temp = Value1 + Value2;
		}
		else{
			temp = Value1 + Value2 * 12 * (1 + [self ReturnVU2028InstMedian:@"M"])/(pow((1 + [self ReturnVU2028InstMedian:@"A"]), (1.00/12.00)));
		}
        
        //if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = [self ReturnVU2028Fac:aaPolicyYear] * 100;
            double tempInst = [self ReturnVU2028InstMedian:@""];
            
            temp = temp + [self PaidUpOptionTable_RTUO:FALSE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:tempInst PolYear:aaPolicyYear andMonth:0];
        //}
	}
	
	return temp + VU2028Value_EverCash1 + VU2028Value_EverCash6;
	
}

-(double)PaidUpOptionTable_2028_Low:(double)aaValue andPolicyYear :(int)aaPolicyYear {
	
	double temp = 0.00;
	double Value1 = aaValue * (1 + [self ReturnVU2028InstLow:@"A"]) * (1 + [self ReturnLoyaltyBonus:aaPolicyYear]/100.00);
	double Value2 = VU2028Value_EverCash60;
	
	
	
	if (aaPolicyYear == FundTerm2023) {
		NSDateFormatter* df = [[NSDateFormatter alloc] init];
		[df setDateFormat:@"dd/MM/yyyy"];
		NSDate* d = [df dateFromString:getPlanCommDate];
		NSDate* d2 = [df dateFromString:@"26/12/2023"];
		
		NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
		[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
		[formatter setMaximumFractionDigits:2];
		[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
		
		double RemainingTerm_2023 = 0.00;
		double BackTerm_2023 = 0.00;
		double Value3 = 0.00;
		RemainingTerm_2023 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
		BackTerm_2023 = 12 - [self roundUp:((RemainingTerm_2023 - round(ceil(RemainingTerm_2023)) + 1) * 12) ];
		Value3 = ReinvestAmount2023to2028_L * pow((1 + [self ReturnVU2028InstLow:@"A"]), BackTerm_2023/12.00) ;
		temp = Value1 + Value3;
		
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear == 60) {
				temp = temp + Value2;
			}
			else if (Age + aaPolicyYear > 60){
				double GMIFactor_BackTermH2023 = (pow((1 + [self ReturnVU2028InstLow:@"A"]), (BackTerm_2023 / 12.00)) - 1) / ( pow((1 + [self ReturnVU2028InstLow:@"A"]), (1.00/ 12.00))   - 1);
				double GMIFactor_FrontTermH2023 = (pow((1 + [self ReturnVU2028InstLow:@"A"]), ((12 - BackTerm_2023) / 12.00))   - 1) / (pow(1 + [self ReturnVU2028InstLow:@"A"], (1.00/ 12.00))  - 1);
				double Value4 = VU2028Value_EverCash60 * GMIFactor_BackTermH2023 + PrevVU2028Value_EverCash60 * GMIFactor_FrontTermH2023 * pow((1 + [self ReturnVU2028InstLow:@"A"]), (BackTerm_2023 / 12.00));
				temp = temp + Value4;
			}
			else{
				
			}
		}
		
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVU2028InstLow:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVU2028Fac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
		
	}
	else if (aaPolicyYear == FundTerm2025) {
		NSDateFormatter* df = [[NSDateFormatter alloc] init];
		[df setDateFormat:@"dd/MM/yyyy"];
		NSDate* d = [df dateFromString:getPlanCommDate];
		NSDate* d2 = [df dateFromString:@"26/12/2025"];
		
		NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
		[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
		[formatter setMaximumFractionDigits:2];
		[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
		
		double RemainingTerm_2025 = 0.00;
		double BackTerm_2025 = 0.00;
		double Value3 = 0.00;
		RemainingTerm_2025 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
		BackTerm_2025 = 12 - [self roundUp:((RemainingTerm_2025 - round(ceil(RemainingTerm_2025)) + 1) * 12) ];
		Value3 = ReinvestAmount2025to2028_L * pow((1 + [self ReturnVU2028InstLow:@"A"]), BackTerm_2025/12.00) ;
		temp = Value1 + Value3;
		
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear == 60) {
				temp = temp + Value2;
			}
			else if (Age + aaPolicyYear > 60){
				double GMIFactor_BackTermH2025 = (pow((1 + [self ReturnVU2028InstLow:@"A"]), (BackTerm_2025 / 12.00)) - 1) / ( pow((1 + [self ReturnVU2028InstLow:@"A"]), (1.00/ 12.00))   - 1);
				double GMIFactor_FrontTermH2025 = (pow((1 + [self ReturnVU2028InstLow:@"A"]), ((12 - BackTerm_2025) / 12.00))   - 1) / (pow(1 + [self ReturnVU2028InstLow:@"A"], (1.00/ 12.00))  - 1);
				double Value4 = VU2028Value_EverCash60 * GMIFactor_BackTermH2025 + PrevVU2028Value_EverCash60 * GMIFactor_FrontTermH2025 * pow((1 + [self ReturnVU2028InstLow:@"A"]), (BackTerm_2025 / 12.00));
				temp = temp + Value4;
			}
			else{
				
			}
		}
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVU2028InstLow:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVU2028Fac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
		
		
	}
	else{
		if (Age + aaPolicyYear < 60) {
			temp = Value1;
		}
		else if (Age + aaPolicyYear == 60){
			temp = Value1 + Value2;
		}
		else{
			temp = Value1 + Value2 * 12 * (1 + [self ReturnVU2028InstLow:@"M"])/(pow((1 + [self ReturnVU2028InstLow:@"A"]), (1.00/12.00)));
		}
        
        //if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = [self ReturnVU2028Fac:aaPolicyYear] * 100;
            double tempInst = [self ReturnVU2028InstLow:@""];
            
            temp = temp + [self PaidUpOptionTable_RTUO:FALSE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:tempInst PolYear:aaPolicyYear andMonth:0];
        //}
	}
	
	return temp + VU2028Value_EverCash1 + VU2028Value_EverCash6;
	
}

-(double)PaidUpOptionTable_2030_High:(double)aaValue andPolicyYear :(int)aaPolicyYear {
	
	double temp = 0.00;
	double Value1 = aaValue * (1 + [self ReturnVU2030InstHigh:@"A"]) * (1 + [self ReturnLoyaltyBonus:aaPolicyYear]/100.00);
	double Value2 = VU2030Value_EverCash60;
	
	
	
	if (aaPolicyYear == FundTerm2023) {
		NSDateFormatter* df = [[NSDateFormatter alloc] init];
		[df setDateFormat:@"dd/MM/yyyy"];
		NSDate* d = [df dateFromString:getPlanCommDate];
		NSDate* d2 = [df dateFromString:@"26/12/2023"];
		
		NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
		[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
		[formatter setMaximumFractionDigits:2];
		[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
		
		double RemainingTerm_2023 = 0.00;
		double BackTerm_2023 = 0.00;
		double Value3 = 0.00;
		RemainingTerm_2023 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
		BackTerm_2023 = 12 - [self roundUp:((RemainingTerm_2023 - round(ceil(RemainingTerm_2023)) + 1) * 12) ];
		Value3 = ReinvestAmount2023to2030_H * pow((1 + [self ReturnVU2030InstHigh:@"A"]), BackTerm_2023/12.00) ;
		temp = Value1 + Value3;
		
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear == 60) {
				temp = temp + Value2;
			}
			else if (Age + aaPolicyYear > 60){
				double GMIFactor_BackTermH2023 = (pow((1 + [self ReturnVU2030InstHigh:@"A"]), (BackTerm_2023 / 12.00)) - 1) / ( pow((1 + [self ReturnVU2030InstHigh:@"A"]), (1.00/ 12.00))   - 1);
				double GMIFactor_FrontTermH2023 = (pow((1 + [self ReturnVU2030InstHigh:@"A"]), ((12 - BackTerm_2023) / 12.00))   - 1) / (pow(1 + [self ReturnVU2030InstHigh:@"A"], (1.00/ 12.00))  - 1);
				double Value4 = VU2030Value_EverCash60 * GMIFactor_BackTermH2023 + PrevVU2030Value_EverCash60 * GMIFactor_FrontTermH2023 * pow((1 + [self ReturnVU2030InstHigh:@"A"]), (BackTerm_2023 / 12.00));
				temp = temp + Value4;
			}
			else{
				
			}
		}
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVU2030InstHigh:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVU2030Fac:aaPolicyYear  andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
		
		
	}
	else if (aaPolicyYear == FundTerm2025) {
		NSDateFormatter* df = [[NSDateFormatter alloc] init];
		[df setDateFormat:@"dd/MM/yyyy"];
		NSDate* d = [df dateFromString:getPlanCommDate];
		NSDate* d2 = [df dateFromString:@"26/12/2025"];
		
		NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
		[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
		[formatter setMaximumFractionDigits:2];
		[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
		
		double RemainingTerm_2025 = 0.00;
		double BackTerm_2025 = 0.00;
		double Value3 = 0.00;
		RemainingTerm_2025 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
		BackTerm_2025 = 12 - [self roundUp:((RemainingTerm_2025 - round(ceil(RemainingTerm_2025)) + 1) * 12) ];
		Value3 = ReinvestAmount2025to2030_H * pow((1 + [self ReturnVU2030InstHigh:@"A"]), BackTerm_2025/12.00) ;
		temp = Value1 + Value3;
		
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear == 60) {
				temp = temp + Value2;
			}
			else if (Age + aaPolicyYear > 60){
				double GMIFactor_BackTermH2025 = (pow((1 + [self ReturnVU2030InstHigh:@"A"]), (BackTerm_2025 / 12.00)) - 1) / ( pow((1 + [self ReturnVU2030InstHigh:@"A"]), (1.00/ 12.00))   - 1);
				double GMIFactor_FrontTermH2025 = (pow((1 + [self ReturnVU2030InstHigh:@"A"]), ((12 - BackTerm_2025) / 12.00))   - 1) / (pow(1 + [self ReturnVU2030InstHigh:@"A"], (1.00/ 12.00))  - 1);
				double Value4 = VU2030Value_EverCash60 * GMIFactor_BackTermH2025 + PrevVU2030Value_EverCash60 * GMIFactor_FrontTermH2025 * pow((1 + [self ReturnVU2030InstHigh:@"A"]), (BackTerm_2025 / 12.00));
				temp = temp + Value4;
			}
			else{
				
			}
		}
		
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVU2030InstHigh:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVU2030Fac:aaPolicyYear  andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
		
	}
	else if (aaPolicyYear == FundTerm2028) {
		NSDateFormatter* df = [[NSDateFormatter alloc] init];
		[df setDateFormat:@"dd/MM/yyyy"];
		NSDate* d = [df dateFromString:getPlanCommDate];
		NSDate* d2 = [df dateFromString:@"26/12/2028"];
		
		NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
		[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
		[formatter setMaximumFractionDigits:2];
		[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
		
		double RemainingTerm_2028 = 0.00;
		double BackTerm_2028 = 0.00;
		double Value3 = 0.00;
		RemainingTerm_2028 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
		BackTerm_2028 = 12 - [self roundUp:((RemainingTerm_2028 - round(ceil(RemainingTerm_2028)) + 1) * 12) ];
		Value3 = ReinvestAmount2028to2030_H * pow((1 + [self ReturnVU2030InstHigh:@"A"]), BackTerm_2028/12.00) ;
		temp = Value1 + Value3;
		
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear == 60) {
				temp = temp + Value2;
			}
			else if (Age + aaPolicyYear > 60){
				double GMIFactor_BackTermH2028 = (pow((1 + [self ReturnVU2030InstHigh:@"A"]), (BackTerm_2028 / 12.00)) - 1) / ( pow((1 + [self ReturnVU2030InstHigh:@"A"]), (1.00/ 12.00))   - 1);
				double GMIFactor_FrontTermH2028 = (pow((1 + [self ReturnVU2030InstHigh:@"A"]), ((12 - BackTerm_2028) / 12.00))   - 1) / (pow(1 + [self ReturnVU2030InstHigh:@"A"], (1.00/ 12.00))  - 1);
				double Value4 = VU2030Value_EverCash60 * GMIFactor_BackTermH2028 + PrevVU2030Value_EverCash60 * GMIFactor_FrontTermH2028 * pow((1 + [self ReturnVU2030InstHigh:@"A"]), (BackTerm_2028 / 12.00));
				temp = temp + Value4;
			}
			else{
				
			}
		}
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVU2030InstHigh:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVU2030Fac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
		
		
	}
	else{
		if (Age + aaPolicyYear < 60) {
			temp = Value1;
		}
		else if (Age + aaPolicyYear == 60){
			temp = Value1 + Value2;
		}
		else{
			temp = Value1 + Value2 * 12 * (1 + [self ReturnVU2030InstHigh:@"M"])/(pow((1 + [self ReturnVU2030InstHigh:@"A"]), (1.00/12.00)));
		}
        
        //if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = [self ReturnVU2030Fac:aaPolicyYear] * 100;
            double tempInst = [self ReturnVU2030InstHigh:@""];
            
            temp = temp + [self PaidUpOptionTable_RTUO:FALSE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:tempInst PolYear:aaPolicyYear andMonth:0];
        //}
	}
	
	return temp + VU2030Value_EverCash1 + VU2030Value_EverCash6;
	
}

-(double)PaidUpOptionTable_2030_Median:(double)aaValue andPolicyYear :(int)aaPolicyYear {
	
	double temp = 0.00;
	double Value1 = aaValue * (1 + [self ReturnVU2030InstMedian:@"A"]) * (1 + [self ReturnLoyaltyBonus:aaPolicyYear]/100.00);
	double Value2 = VU2030Value_EverCash60;
	
	
	
	if (aaPolicyYear == FundTerm2023) {
		NSDateFormatter* df = [[NSDateFormatter alloc] init];
		[df setDateFormat:@"dd/MM/yyyy"];
		NSDate* d = [df dateFromString:getPlanCommDate];
		NSDate* d2 = [df dateFromString:@"26/12/2023"];
		
		NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
		[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
		[formatter setMaximumFractionDigits:2];
		[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
		
		double RemainingTerm_2023 = 0.00;
		double BackTerm_2023 = 0.00;
		double Value3 = 0.00;
		RemainingTerm_2023 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
		BackTerm_2023 = 12 - [self roundUp:((RemainingTerm_2023 - round(ceil(RemainingTerm_2023)) + 1) * 12) ];
		Value3 = ReinvestAmount2023to2030_M * pow((1 + [self ReturnVU2030InstMedian:@"A"]), BackTerm_2023/12.00) ;
		temp = Value1 + Value3;
		
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear == 60) {
				temp = temp + Value2;
			}
			else if (Age + aaPolicyYear > 60){
				double GMIFactor_BackTermH2023 = (pow((1 + [self ReturnVU2030InstMedian:@"A"]), (BackTerm_2023 / 12.00)) - 1) / ( pow((1 + [self ReturnVU2030InstMedian:@"A"]), (1.00/ 12.00))   - 1);
				double GMIFactor_FrontTermH2023 = (pow((1 + [self ReturnVU2030InstMedian:@"A"]), ((12 - BackTerm_2023) / 12.00))   - 1) / (pow(1 + [self ReturnVU2030InstMedian:@"A"], (1.00/ 12.00))  - 1);
				double Value4 = VU2030Value_EverCash60 * GMIFactor_BackTermH2023 + PrevVU2030Value_EverCash60 * GMIFactor_FrontTermH2023 * pow((1 + [self ReturnVU2030InstMedian:@"A"]), (BackTerm_2023 / 12.00));
				temp = temp + Value4;
			}
			else{
				
			}
		}
		
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVU2030InstMedian:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVU2030Fac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
		
	}
	else if (aaPolicyYear == FundTerm2025) {
		NSDateFormatter* df = [[NSDateFormatter alloc] init];
		[df setDateFormat:@"dd/MM/yyyy"];
		NSDate* d = [df dateFromString:getPlanCommDate];
		NSDate* d2 = [df dateFromString:@"26/12/2025"];
		
		NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
		[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
		[formatter setMaximumFractionDigits:2];
		[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
		
		double RemainingTerm_2025 = 0.00;
		double BackTerm_2025 = 0.00;
		double Value3 = 0.00;
		RemainingTerm_2025 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
		BackTerm_2025 = 12 - [self roundUp:((RemainingTerm_2025 - round(ceil(RemainingTerm_2025)) + 1) * 12) ];
		Value3 = ReinvestAmount2025to2030_M * pow((1 + [self ReturnVU2030InstMedian:@"A"]), BackTerm_2025/12.00) ;
		temp = Value1 + Value3;
		
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear == 60) {
				temp = temp + Value2;
			}
			else if (Age + aaPolicyYear > 60){
				double GMIFactor_BackTermH2025 = (pow((1 + [self ReturnVU2030InstMedian:@"A"]), (BackTerm_2025 / 12.00)) - 1) / ( pow((1 + [self ReturnVU2030InstMedian:@"A"]), (1.00/ 12.00))   - 1);
				double GMIFactor_FrontTermH2025 = (pow((1 + [self ReturnVU2030InstMedian:@"A"]), ((12 - BackTerm_2025) / 12.00))   - 1) / (pow(1 + [self ReturnVU2030InstMedian:@"A"], (1.00/ 12.00))  - 1);
				double Value4 = VU2030Value_EverCash60 * GMIFactor_BackTermH2025 + PrevVU2030Value_EverCash60 * GMIFactor_FrontTermH2025 * pow((1 + [self ReturnVU2030InstMedian:@"A"]), (BackTerm_2025 / 12.00));
				temp = temp + Value4;
			}
			else{
				
			}
		}
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVU2030InstMedian:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVU2030Fac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
	}
	else if (aaPolicyYear == FundTerm2028) {
		NSDateFormatter* df = [[NSDateFormatter alloc] init];
		[df setDateFormat:@"dd/MM/yyyy"];
		NSDate* d = [df dateFromString:getPlanCommDate];
		NSDate* d2 = [df dateFromString:@"26/12/2028"];
		
		NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
		[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
		[formatter setMaximumFractionDigits:2];
		[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
		
		double RemainingTerm_2028 = 0.00;
		double BackTerm_2028 = 0.00;
		double Value3 = 0.00;
		RemainingTerm_2028 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
		BackTerm_2028 = 12 - [self roundUp:((RemainingTerm_2028 - round(ceil(RemainingTerm_2028)) + 1) * 12) ];
		Value3 = ReinvestAmount2028to2030_M * pow((1 + [self ReturnVU2030InstMedian:@"A"]), BackTerm_2028/12.00) ;
		temp = Value1 + Value3;
		
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear == 60) {
				temp = temp + Value2;
			}
			else if (Age + aaPolicyYear > 60){
				double GMIFactor_BackTermH2028 = (pow((1 + [self ReturnVU2030InstMedian:@"A"]), (BackTerm_2028 / 12.00)) - 1) / ( pow((1 + [self ReturnVU2030InstMedian:@"A"]), (1.00/ 12.00))   - 1);
				double GMIFactor_FrontTermH2028 = (pow((1 + [self ReturnVU2030InstMedian:@"A"]), ((12 - BackTerm_2028) / 12.00))   - 1) / (pow(1 + [self ReturnVU2030InstMedian:@"A"], (1.00/ 12.00))  - 1);
				double Value4 = VU2030Value_EverCash60 * GMIFactor_BackTermH2028 + PrevVU2030Value_EverCash60 * GMIFactor_FrontTermH2028 * pow((1 + [self ReturnVU2030InstMedian:@"A"]), (BackTerm_2028 / 12.00));
				temp = temp + Value4;
			}
			else{
				
			}
		}
		
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVU2030InstMedian:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVU2030Fac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
		
	}
	else{
		if (Age + aaPolicyYear < 60) {
			temp = Value1;
		}
		else if (Age + aaPolicyYear == 60){
			temp = Value1 + Value2;
		}
		else{
			temp = Value1 + Value2 * 12 * (1 + [self ReturnVU2030InstMedian:@"M"])/(pow((1 + [self ReturnVU2030InstMedian:@"A"]), (1.00/12.00)));
		}
        
        //if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = [self ReturnVU2030Fac:aaPolicyYear] * 100;
            double tempInst = [self ReturnVU2030InstMedian:@""];
            
            temp = temp + [self PaidUpOptionTable_RTUO:FALSE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:tempInst PolYear:aaPolicyYear andMonth:0];
        //}
	}
	
	return temp + VU2030Value_EverCash1 + VU2030Value_EverCash6;
	
}

-(double)PaidUpOptionTable_2030_Low:(double)aaValue andPolicyYear :(int)aaPolicyYear {
	
	double temp = 0.00;
	double Value1 = aaValue * (1 + [self ReturnVU2030InstLow:@"A"]) * (1 + [self ReturnLoyaltyBonus:aaPolicyYear]/100.00);
	double Value2 = VU2030Value_EverCash60;
	
	
	
	if (aaPolicyYear == FundTerm2023) {
		NSDateFormatter* df = [[NSDateFormatter alloc] init];
		[df setDateFormat:@"dd/MM/yyyy"];
		NSDate* d = [df dateFromString:getPlanCommDate];
		NSDate* d2 = [df dateFromString:@"26/12/2023"];
		
		NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
		[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
		[formatter setMaximumFractionDigits:2];
		[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
		
		double RemainingTerm_2023 = 0.00;
		double BackTerm_2023 = 0.00;
		double Value3 = 0.00;
		RemainingTerm_2023 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
		BackTerm_2023 = 12 - [self roundUp:((RemainingTerm_2023 - round(ceil(RemainingTerm_2023)) + 1) * 12) ];
		Value3 = ReinvestAmount2023to2030_L * pow((1 + [self ReturnVU2030InstLow:@"A"]), BackTerm_2023/12.00) ;
		temp = Value1 + Value3;
		
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear == 60) {
				temp = temp + Value2;
			}
			else if (Age + aaPolicyYear > 60){
				double GMIFactor_BackTermH2023 = (pow((1 + [self ReturnVU2030InstLow:@"A"]), (BackTerm_2023 / 12.00)) - 1) / ( pow((1 + [self ReturnVU2030InstLow:@"A"]), (1.00/ 12.00))   - 1);
				double GMIFactor_FrontTermH2023 = (pow((1 + [self ReturnVU2030InstLow:@"A"]), ((12 - BackTerm_2023) / 12.00))   - 1) / (pow(1 + [self ReturnVU2030InstLow:@"A"], (1.00/ 12.00))  - 1);
				double Value4 = VU2030Value_EverCash60 * GMIFactor_BackTermH2023 + PrevVU2030Value_EverCash60 * GMIFactor_FrontTermH2023 * pow((1 + [self ReturnVU2030InstLow:@"A"]), (BackTerm_2023 / 12.00));
				temp = temp + Value4;
			}
			else{
				
			}
		}
		
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVU2030InstLow:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVU2030Fac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
		
	}
	else if (aaPolicyYear == FundTerm2025) {
		NSDateFormatter* df = [[NSDateFormatter alloc] init];
		[df setDateFormat:@"dd/MM/yyyy"];
		NSDate* d = [df dateFromString:getPlanCommDate];
		NSDate* d2 = [df dateFromString:@"26/12/2025"];
		
		NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
		[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
		[formatter setMaximumFractionDigits:2];
		[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
		
		double RemainingTerm_2025 = 0.00;
		double BackTerm_2025 = 0.00;
		double Value3 = 0.00;
		RemainingTerm_2025 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
		BackTerm_2025 = 12 - [self roundUp:((RemainingTerm_2025 - round(ceil(RemainingTerm_2025)) + 1) * 12) ];
		Value3 = ReinvestAmount2025to2030_L * pow((1 + [self ReturnVU2030InstLow:@"A"]), BackTerm_2025/12.00) ;
		temp = Value1 + Value3;
		
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear == 60) {
				temp = temp + Value2;
			}
			else if (Age + aaPolicyYear > 60){
				double GMIFactor_BackTermH2025 = (pow((1 + [self ReturnVU2030InstLow:@"A"]), (BackTerm_2025 / 12.00)) - 1) / ( pow((1 + [self ReturnVU2030InstLow:@"A"]), (1.00/ 12.00))   - 1);
				double GMIFactor_FrontTermH2025 = (pow((1 + [self ReturnVU2030InstLow:@"A"]), ((12 - BackTerm_2025) / 12.00))   - 1) / (pow(1 + [self ReturnVU2030InstLow:@"A"], (1.00/ 12.00))  - 1);
				double Value4 = VU2030Value_EverCash60 * GMIFactor_BackTermH2025 + PrevVU2030Value_EverCash60 * GMIFactor_FrontTermH2025 * pow((1 + [self ReturnVU2030InstLow:@"A"]), (BackTerm_2025 / 12.00));
				temp = temp + Value4;
			}
			else{
				
			}
		}
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVU2030InstLow:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVU2030Fac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
		
		
	}
	else if (aaPolicyYear == FundTerm2028) {
		NSDateFormatter* df = [[NSDateFormatter alloc] init];
		[df setDateFormat:@"dd/MM/yyyy"];
		NSDate* d = [df dateFromString:getPlanCommDate];
		NSDate* d2 = [df dateFromString:@"26/12/2028"];
		
		NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
		[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
		[formatter setMaximumFractionDigits:2];
		[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
		
		double RemainingTerm_2028 = 0.00;
		double BackTerm_2028 = 0.00;
		double Value3 = 0.00;
		RemainingTerm_2028 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
		BackTerm_2028 = 12 - [self roundUp:((RemainingTerm_2028 - round(ceil(RemainingTerm_2028)) + 1) * 12) ];
		Value3 = ReinvestAmount2028to2030_L * pow((1 + [self ReturnVU2030InstLow:@"A"]), BackTerm_2028/12.00) ;
		temp = Value1 + Value3;
		
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear == 60) {
				temp = temp + Value2;
			}
			else if (Age + aaPolicyYear > 60){
				double GMIFactor_BackTermH2028 = (pow((1 + [self ReturnVU2030InstLow:@"A"]), (BackTerm_2028 / 12.00)) - 1) / ( pow((1 + [self ReturnVU2030InstLow:@"A"]), (1.00/ 12.00))   - 1);
				double GMIFactor_FrontTermH2028 = (pow((1 + [self ReturnVU2030InstLow:@"A"]), ((12 - BackTerm_2028) / 12.00))   - 1) / (pow(1 + [self ReturnVU2030InstLow:@"A"], (1.00/ 12.00))  - 1);
				double Value4 = VU2030Value_EverCash60 * GMIFactor_BackTermH2028 + PrevVU2030Value_EverCash60 * GMIFactor_FrontTermH2028 * pow((1 + [self ReturnVU2030InstLow:@"A"]), (BackTerm_2028 / 12.00));
				temp = temp + Value4;
			}
			else{
				
			}
		}
		
		if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVU2030InstLow:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVU2030Fac:aaPolicyYear  andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
	}
	else{
		if (Age + aaPolicyYear < 60) {
			temp = Value1;
		}
		else if (Age + aaPolicyYear == 60){
			temp = Value1 + Value2;
		}
		else{
			temp = Value1 + Value2 * 12 * (1 + [self ReturnVU2030InstLow:@"M"])/(pow((1 + [self ReturnVU2030InstLow:@"A"]), (1.00/12.00)));
		}
        
        //if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = [self ReturnVU2030Fac:aaPolicyYear] * 100;
            double tempInst = [self ReturnVU2030InstLow:@""];
            
            temp = temp + [self PaidUpOptionTable_RTUO:FALSE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:tempInst PolYear:aaPolicyYear andMonth:0];
        //}
	}
	
	return temp + VU2030Value_EverCash1 + VU2030Value_EverCash6;
	
}

-(double)PaidUpOptionTable_2035_High:(double)aaValue andPolicyYear :(int)aaPolicyYear {
	
	double temp = 0.00;
	double Value1 = aaValue * (1 + [self ReturnVU2035InstHigh:@"A"]) * (1 + [self ReturnLoyaltyBonus:aaPolicyYear]/100.00);
	double Value2 = VU2035Value_EverCash60;
	
	
	
	if (aaPolicyYear == FundTerm2023) {
		NSDateFormatter* df = [[NSDateFormatter alloc] init];
		[df setDateFormat:@"dd/MM/yyyy"];
		NSDate* d = [df dateFromString:getPlanCommDate];
		NSDate* d2 = [df dateFromString:@"26/12/2023"];
		
		NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
		[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
		[formatter setMaximumFractionDigits:2];
		[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
		
		double RemainingTerm_2023 = 0.00;
		double BackTerm_2023 = 0.00;
		double Value3 = 0.00;
		RemainingTerm_2023 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
		BackTerm_2023 = 12 - [self roundUp:((RemainingTerm_2023 - round(ceil(RemainingTerm_2023)) + 1) * 12) ];
		Value3 = ReinvestAmount2023to2035_H * pow((1 + [self ReturnVU2035InstHigh:@"A"]), BackTerm_2023/12.00) ;
		temp = Value1 + Value3;
		
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear == 60) {
				temp = temp + Value2;
			}
			else if (Age + aaPolicyYear > 60){
				double GMIFactor_BackTermH2023 = (pow((1 + [self ReturnVU2035InstHigh:@"A"]), (BackTerm_2023 / 12.00)) - 1) / ( pow((1 + [self ReturnVU2035InstHigh:@"A"]), (1.00/ 12.00))   - 1);
				double GMIFactor_FrontTermH2023 = (pow((1 + [self ReturnVU2035InstHigh:@"A"]), ((12 - BackTerm_2023) / 12.00))   - 1) / (pow(1 + [self ReturnVU2035InstHigh:@"A"], (1.00/ 12.00))  - 1);
				double Value4 = VU2035Value_EverCash60 * GMIFactor_BackTermH2023 + PrevVU2035Value_EverCash60 * GMIFactor_FrontTermH2023 * pow((1 + [self ReturnVU2035InstHigh:@"A"]), (BackTerm_2023 / 12.00));
				temp = temp + Value4;
			}
			else{
				
			}
		}
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVU2035InstHigh:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVU2035Fac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
		
		
	}
	else if (aaPolicyYear == FundTerm2025) {
		NSDateFormatter* df = [[NSDateFormatter alloc] init];
		[df setDateFormat:@"dd/MM/yyyy"];
		NSDate* d = [df dateFromString:getPlanCommDate];
		NSDate* d2 = [df dateFromString:@"26/12/2025"];
		
		NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
		[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
		[formatter setMaximumFractionDigits:2];
		[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
		
		double RemainingTerm_2025 = 0.00;
		double BackTerm_2025 = 0.00;
		double Value3 = 0.00;
		RemainingTerm_2025 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
		BackTerm_2025 = 12 - [self roundUp:((RemainingTerm_2025 - round(ceil(RemainingTerm_2025)) + 1) * 12) ];
		Value3 = ReinvestAmount2025to2035_H * pow((1 + [self ReturnVU2035InstHigh:@"A"]), BackTerm_2025/12.00) ;
		temp = Value1 + Value3;
		
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear == 60) {
				temp = temp + Value2;
			}
			else if (Age + aaPolicyYear > 60){
				double GMIFactor_BackTermH2025 = (pow((1 + [self ReturnVU2035InstHigh:@"A"]), (BackTerm_2025 / 12.00)) - 1) / ( pow((1 + [self ReturnVU2035InstHigh:@"A"]), (1.00/ 12.00))   - 1);
				double GMIFactor_FrontTermH2025 = (pow((1 + [self ReturnVU2035InstHigh:@"A"]), ((12 - BackTerm_2025) / 12.00))   - 1) / (pow(1 + [self ReturnVU2035InstHigh:@"A"], (1.00/ 12.00))  - 1);
				double Value4 = VU2035Value_EverCash60 * GMIFactor_BackTermH2025 + PrevVU2035Value_EverCash60 * GMIFactor_FrontTermH2025 * pow((1 + [self ReturnVU2035InstHigh:@"A"]), (BackTerm_2025 / 12.00));
				temp = temp + Value4;
			}
			else{
				
			}
		}
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVU2035InstHigh:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVU2035Fac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
	}
	else if (aaPolicyYear == FundTerm2028) {
		NSDateFormatter* df = [[NSDateFormatter alloc] init];
		[df setDateFormat:@"dd/MM/yyyy"];
		NSDate* d = [df dateFromString:getPlanCommDate];
		NSDate* d2 = [df dateFromString:@"26/12/2028"];
		
		NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
		[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
		[formatter setMaximumFractionDigits:2];
		[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
		
		double RemainingTerm_2028 = 0.00;
		double BackTerm_2028 = 0.00;
		double Value3 = 0.00;
		RemainingTerm_2028 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
		BackTerm_2028 = 12 - [self roundUp:((RemainingTerm_2028 - round(ceil(RemainingTerm_2028)) + 1) * 12) ];
		Value3 = ReinvestAmount2028to2035_H * pow((1 + [self ReturnVU2035InstHigh:@"A"]), BackTerm_2028/12.00) ;
		temp = Value1 + Value3;
		
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear == 60) {
				temp = temp + Value2;
			}
			else if (Age + aaPolicyYear > 60){
				double GMIFactor_BackTermH2028 = (pow((1 + [self ReturnVU2035InstHigh:@"A"]), (BackTerm_2028 / 12.00)) - 1) / ( pow((1 + [self ReturnVU2035InstHigh:@"A"]), (1.00/ 12.00))   - 1);
				double GMIFactor_FrontTermH2028 = (pow((1 + [self ReturnVU2035InstHigh:@"A"]), ((12 - BackTerm_2028) / 12.00))   - 1) / (pow(1 + [self ReturnVU2035InstHigh:@"A"], (1.00/ 12.00))  - 1);
				double Value4 = VU2035Value_EverCash60 * GMIFactor_BackTermH2028 + PrevVU2035Value_EverCash60 * GMIFactor_FrontTermH2028 * pow((1 + [self ReturnVU2035InstHigh:@"A"]), (BackTerm_2028 / 12.00));
				temp = temp + Value4;
			}
			else{
				
			}
		}
		
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVU2035InstHigh:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVU2035Fac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
		
	}
	else if (aaPolicyYear == FundTerm2030) {
		NSDateFormatter* df = [[NSDateFormatter alloc] init];
		[df setDateFormat:@"dd/MM/yyyy"];
		NSDate* d = [df dateFromString:getPlanCommDate];
		NSDate* d2 = [df dateFromString:@"26/12/2030"];
		
		NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
		[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
		[formatter setMaximumFractionDigits:2];
		[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
		
		double RemainingTerm_2030 = 0.00;
		double BackTerm_2030 = 0.00;
		double Value3 = 0.00;
		RemainingTerm_2030 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
		BackTerm_2030 = 12 - [self roundUp:((RemainingTerm_2030 - round(ceil(RemainingTerm_2030)) + 1) * 12) ];
		Value3 = ReinvestAmount2030to2035_H * pow((1 + [self ReturnVU2035InstHigh:@"A"]), BackTerm_2030/12.00) ;
		temp = Value1 + Value3;
		
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear == 60) {
				temp = temp + Value2;
			}
			else if (Age + aaPolicyYear > 60){
				double GMIFactor_BackTermH2030 = (pow((1 + [self ReturnVU2035InstHigh:@"A"]), (BackTerm_2030 / 12.00)) - 1) / ( pow((1 + [self ReturnVU2035InstHigh:@"A"]), (1.00/ 12.00))   - 1);
				double GMIFactor_FrontTermH2030 = (pow((1 + [self ReturnVU2035InstHigh:@"A"]), ((12 - BackTerm_2030) / 12.00))   - 1) / (pow(1 + [self ReturnVU2035InstHigh:@"A"], (1.00/ 12.00))  - 1);
				double Value4 = VU2035Value_EverCash60 * GMIFactor_BackTermH2030 + PrevVU2035Value_EverCash60 * GMIFactor_FrontTermH2030 * pow((1 + [self ReturnVU2035InstHigh:@"A"]), (BackTerm_2030 / 12.00));
				temp = temp + Value4;
			}
			else{
				
			}
		}
		
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVU2035InstHigh:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVU2035Fac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
		
	}
	else{
		if (Age + aaPolicyYear < 60) {
			temp = Value1;
		}
		else if (Age + aaPolicyYear == 60){
			temp = Value1 + Value2;
		}
		else{
			temp = Value1 + Value2 * 12 * (1 + [self ReturnVU2035InstHigh:@"M"])/(pow((1 + [self ReturnVU2035InstHigh:@"A"]), (1.00/12.00)));
		}
        
        //if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = [self ReturnVU2035Fac:aaPolicyYear] * 100;
            double tempInst = [self ReturnVU2035InstHigh:@""];
            
            temp = temp + [self PaidUpOptionTable_RTUO:FALSE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:tempInst PolYear:aaPolicyYear andMonth:0];
        //}
	}
	
	return temp + VU2035Value_EverCash1 + VU2035Value_EverCash6;
	
}

-(double)PaidUpOptionTable_2035_Median:(double)aaValue andPolicyYear :(int)aaPolicyYear {
	
	double temp = 0.00;
	double Value1 = aaValue * (1 + [self ReturnVU2035InstMedian:@"A"]) * (1 + [self ReturnLoyaltyBonus:aaPolicyYear]/100.00);
	double Value2 = VU2035Value_EverCash60;
	
	
	
	if (aaPolicyYear == FundTerm2023) {
		NSDateFormatter* df = [[NSDateFormatter alloc] init];
		[df setDateFormat:@"dd/MM/yyyy"];
		NSDate* d = [df dateFromString:getPlanCommDate];
		NSDate* d2 = [df dateFromString:@"26/12/2023"];
		
		NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
		[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
		[formatter setMaximumFractionDigits:2];
		[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
		
		double RemainingTerm_2023 = 0.00;
		double BackTerm_2023 = 0.00;
		double Value3 = 0.00;
		RemainingTerm_2023 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
		BackTerm_2023 = 12 - [self roundUp:((RemainingTerm_2023 - round(ceil(RemainingTerm_2023)) + 1) * 12) ];
		Value3 = ReinvestAmount2023to2035_M * pow((1 + [self ReturnVU2035InstMedian:@"A"]), BackTerm_2023/12.00) ;
		temp = Value1 + Value3;
		
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear == 60) {
				temp = temp + Value2;
			}
			else if (Age + aaPolicyYear > 60){
				double GMIFactor_BackTermH2023 = (pow((1 + [self ReturnVU2035InstMedian:@"A"]), (BackTerm_2023 / 12.00)) - 1) / ( pow((1 + [self ReturnVU2035InstMedian:@"A"]), (1.00/ 12.00))   - 1);
				double GMIFactor_FrontTermH2023 = (pow((1 + [self ReturnVU2035InstMedian:@"A"]), ((12 - BackTerm_2023) / 12.00))   - 1) / (pow(1 + [self ReturnVU2035InstMedian:@"A"], (1.00/ 12.00))  - 1);
				double Value4 = VU2035Value_EverCash60 * GMIFactor_BackTermH2023 + PrevVU2035Value_EverCash60 * GMIFactor_FrontTermH2023 * pow((1 + [self ReturnVU2035InstMedian:@"A"]), (BackTerm_2023 / 12.00));
				temp = temp + Value4;
			}
			else{
				
			}
		}
		
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVU2035InstMedian:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVU2035Fac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
		
	}
	else if (aaPolicyYear == FundTerm2025) {
		NSDateFormatter* df = [[NSDateFormatter alloc] init];
		[df setDateFormat:@"dd/MM/yyyy"];
		NSDate* d = [df dateFromString:getPlanCommDate];
		NSDate* d2 = [df dateFromString:@"26/12/2025"];
		
		NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
		[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
		[formatter setMaximumFractionDigits:2];
		[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
		
		double RemainingTerm_2025 = 0.00;
		double BackTerm_2025 = 0.00;
		double Value3 = 0.00;
		RemainingTerm_2025 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
		BackTerm_2025 = 12 - [self roundUp:((RemainingTerm_2025 - round(ceil(RemainingTerm_2025)) + 1) * 12) ];
		Value3 = ReinvestAmount2025to2035_M * pow((1 + [self ReturnVU2035InstMedian:@"A"]), BackTerm_2025/12.00) ;
		temp = Value1 + Value3;
		
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear == 60) {
				temp = temp + Value2;
			}
			else if (Age + aaPolicyYear > 60){
				double GMIFactor_BackTermH2025 = (pow((1 + [self ReturnVU2035InstMedian:@"A"]), (BackTerm_2025 / 12.00)) - 1) / ( pow((1 + [self ReturnVU2035InstMedian:@"A"]), (1.00/ 12.00))   - 1);
				double GMIFactor_FrontTermH2025 = (pow((1 + [self ReturnVU2035InstMedian:@"A"]), ((12 - BackTerm_2025) / 12.00))   - 1) / (pow(1 + [self ReturnVU2035InstMedian:@"A"], (1.00/ 12.00))  - 1);
				double Value4 = VU2035Value_EverCash60 * GMIFactor_BackTermH2025 + PrevVU2035Value_EverCash60 * GMIFactor_FrontTermH2025 * pow((1 + [self ReturnVU2035InstMedian:@"A"]), (BackTerm_2025 / 12.00));
				temp = temp + Value4;
			}
			else{
				
			}
		}
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVU2035InstMedian:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVU2035Fac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
		
		
	}
	else if (aaPolicyYear == FundTerm2028) {
		NSDateFormatter* df = [[NSDateFormatter alloc] init];
		[df setDateFormat:@"dd/MM/yyyy"];
		NSDate* d = [df dateFromString:getPlanCommDate];
		NSDate* d2 = [df dateFromString:@"26/12/2028"];
		
		NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
		[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
		[formatter setMaximumFractionDigits:2];
		[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
		
		double RemainingTerm_2028 = 0.00;
		double BackTerm_2028 = 0.00;
		double Value3 = 0.00;
		RemainingTerm_2028 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
		BackTerm_2028 = 12 - [self roundUp:((RemainingTerm_2028 - round(ceil(RemainingTerm_2028)) + 1) * 12) ];
		Value3 = ReinvestAmount2028to2035_M * pow((1 + [self ReturnVU2035InstMedian:@"A"]), BackTerm_2028/12.00) ;
		temp = Value1 + Value3;
		
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear == 60) {
				temp = temp + Value2;
			}
			else if (Age + aaPolicyYear > 60){
				double GMIFactor_BackTermH2028 = (pow((1 + [self ReturnVU2035InstMedian:@"A"]), (BackTerm_2028 / 12.00)) - 1) / ( pow((1 + [self ReturnVU2035InstMedian:@"A"]), (1.00/ 12.00))   - 1);
				double GMIFactor_FrontTermH2028 = (pow((1 + [self ReturnVU2035InstMedian:@"A"]), ((12 - BackTerm_2028) / 12.00))   - 1) / (pow(1 + [self ReturnVU2035InstMedian:@"A"], (1.00/ 12.00))  - 1);
				double Value4 = VU2035Value_EverCash60 * GMIFactor_BackTermH2028 + PrevVU2035Value_EverCash60 * GMIFactor_FrontTermH2028 * pow((1 + [self ReturnVU2035InstMedian:@"A"]), (BackTerm_2028 / 12.00));
				temp = temp + Value4;
			}
			else{
				
			}
		}
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVU2035InstMedian:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVU2035Fac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
		
		
	}
	else if (aaPolicyYear == FundTerm2030) {
		NSDateFormatter* df = [[NSDateFormatter alloc] init];
		[df setDateFormat:@"dd/MM/yyyy"];
		NSDate* d = [df dateFromString:getPlanCommDate];
		NSDate* d2 = [df dateFromString:@"26/12/2030"];
		
		NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
		[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
		[formatter setMaximumFractionDigits:2];
		[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
		
		double RemainingTerm_2030 = 0.00;
		double BackTerm_2030 = 0.00;
		double Value3 = 0.00;
		RemainingTerm_2030 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
		BackTerm_2030 = 12 - [self roundUp:((RemainingTerm_2030 - round(ceil(RemainingTerm_2030)) + 1) * 12) ];
		Value3 = ReinvestAmount2030to2035_M * pow((1 + [self ReturnVU2035InstMedian:@"A"]), BackTerm_2030/12.00) ;
		temp = Value1 + Value3;
		
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear == 60) {
				temp = temp + Value2;
			}
			else if (Age + aaPolicyYear > 60){
				double GMIFactor_BackTermH2030 = (pow((1 + [self ReturnVU2035InstMedian:@"A"]), (BackTerm_2030 / 12.00)) - 1) / ( pow((1 + [self ReturnVU2035InstMedian:@"A"]), (1.00/ 12.00))   - 1);
				double GMIFactor_FrontTermH2030 = (pow((1 + [self ReturnVU2035InstMedian:@"A"]), ((12 - BackTerm_2030) / 12.00))   - 1) / (pow(1 + [self ReturnVU2035InstMedian:@"A"], (1.00/ 12.00))  - 1);
				double Value4 = VU2035Value_EverCash60 * GMIFactor_BackTermH2030 + PrevVU2035Value_EverCash60 * GMIFactor_FrontTermH2030 * pow((1 + [self ReturnVU2035InstMedian:@"A"]), (BackTerm_2030 / 12.00));
				temp = temp + Value4;
			}
			else{
				
			}
		}
		
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVU2035InstMedian:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVU2035Fac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
		
	}
	else{
		if (Age + aaPolicyYear < 60) {
			temp = Value1;
		}
		else if (Age + aaPolicyYear == 60){
			temp = Value1 + Value2;
		}
		else{
			temp = Value1 + Value2 * 12 * (1 + [self ReturnVU2035InstMedian:@"M"])/(pow((1 + [self ReturnVU2035InstMedian:@"A"]), (1.00/12.00)));
		}
        
        //if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = [self ReturnVU2035Fac:aaPolicyYear] * 100;
            double tempInst = [self ReturnVU2035InstMedian:@""];
            
            temp = temp + [self PaidUpOptionTable_RTUO:FALSE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:tempInst PolYear:aaPolicyYear andMonth:0];
        //}
	}
	
	return temp + VU2035Value_EverCash1 + VU2035Value_EverCash6;
	
}

-(double)PaidUpOptionTable_2035_Low:(double)aaValue andPolicyYear :(int)aaPolicyYear {
	
	double temp = 0.00;
	double Value1 = aaValue * (1 + [self ReturnVU2035InstLow:@"A"]) * (1 + [self ReturnLoyaltyBonus:aaPolicyYear]/100.00);
	double Value2 = VU2035Value_EverCash60;
	
	
	
	if (aaPolicyYear == FundTerm2023) {
		NSDateFormatter* df = [[NSDateFormatter alloc] init];
		[df setDateFormat:@"dd/MM/yyyy"];
		NSDate* d = [df dateFromString:getPlanCommDate];
		NSDate* d2 = [df dateFromString:@"26/12/2023"];
		
		NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
		[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
		[formatter setMaximumFractionDigits:2];
		[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
		
		double RemainingTerm_2023 = 0.00;
		double BackTerm_2023 = 0.00;
		double Value3 = 0.00;
		RemainingTerm_2023 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
		BackTerm_2023 = 12 - [self roundUp:((RemainingTerm_2023 - round(ceil(RemainingTerm_2023)) + 1) * 12) ];
		Value3 = ReinvestAmount2023to2035_L * pow((1 + [self ReturnVU2035InstLow:@"A"]), BackTerm_2023/12.00) ;
		temp = Value1 + Value3;
		
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear == 60) {
				temp = temp + Value2;
			}
			else if (Age + aaPolicyYear > 60){
				double GMIFactor_BackTermH2023 = (pow((1 + [self ReturnVU2035InstLow:@"A"]), (BackTerm_2023 / 12.00)) - 1) / ( pow((1 + [self ReturnVU2035InstLow:@"A"]), (1.00/ 12.00))   - 1);
				double GMIFactor_FrontTermH2023 = (pow((1 + [self ReturnVU2035InstLow:@"A"]), ((12 - BackTerm_2023) / 12.00))   - 1) / (pow(1 + [self ReturnVU2035InstLow:@"A"], (1.00/ 12.00))  - 1);
				double Value4 = VU2035Value_EverCash60 * GMIFactor_BackTermH2023 + PrevVU2035Value_EverCash60 * GMIFactor_FrontTermH2023 * pow((1 + [self ReturnVU2035InstLow:@"A"]), (BackTerm_2023 / 12.00));
				temp = temp + Value4;
			}
			else{
				
			}
		}
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVU2035InstLow:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVU2035Fac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }

		
		
	}
	else if (aaPolicyYear == FundTerm2025) {
		NSDateFormatter* df = [[NSDateFormatter alloc] init];
		[df setDateFormat:@"dd/MM/yyyy"];
		NSDate* d = [df dateFromString:getPlanCommDate];
		NSDate* d2 = [df dateFromString:@"26/12/2025"];
		
		NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
		[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
		[formatter setMaximumFractionDigits:2];
		[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
		
		double RemainingTerm_2025 = 0.00;
		double BackTerm_2025 = 0.00;
		double Value3 = 0.00;
		RemainingTerm_2025 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
		BackTerm_2025 = 12 - [self roundUp:((RemainingTerm_2025 - round(ceil(RemainingTerm_2025)) + 1) * 12) ];
		Value3 = ReinvestAmount2025to2035_L * pow((1 + [self ReturnVU2035InstLow:@"A"]), BackTerm_2025/12.00) ;
		temp = Value1 + Value3;
		
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear == 60) {
				temp = temp + Value2;
			}
			else if (Age + aaPolicyYear > 60){
				double GMIFactor_BackTermH2025 = (pow((1 + [self ReturnVU2035InstLow:@"A"]), (BackTerm_2025 / 12.00)) - 1) / ( pow((1 + [self ReturnVU2035InstLow:@"A"]), (1.00/ 12.00))   - 1);
				double GMIFactor_FrontTermH2025 = (pow((1 + [self ReturnVU2035InstLow:@"A"]), ((12 - BackTerm_2025) / 12.00))   - 1) / (pow(1 + [self ReturnVU2035InstLow:@"A"], (1.00/ 12.00))  - 1);
				double Value4 = VU2035Value_EverCash60 * GMIFactor_BackTermH2025 + PrevVU2035Value_EverCash60 * GMIFactor_FrontTermH2025 * pow((1 + [self ReturnVU2035InstLow:@"A"]), (BackTerm_2025 / 12.00));
				temp = temp + Value4;
			}
			else{
				
			}
		}
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVU2035InstLow:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVU2035Fac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
		
		
	}
	else if (aaPolicyYear == FundTerm2028) {
		NSDateFormatter* df = [[NSDateFormatter alloc] init];
		[df setDateFormat:@"dd/MM/yyyy"];
		NSDate* d = [df dateFromString:getPlanCommDate];
		NSDate* d2 = [df dateFromString:@"26/12/2028"];
		
		NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
		[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
		[formatter setMaximumFractionDigits:2];
		[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
		
		double RemainingTerm_2028 = 0.00;
		double BackTerm_2028 = 0.00;
		double Value3 = 0.00;
		RemainingTerm_2028 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
		BackTerm_2028 = 12 - [self roundUp:((RemainingTerm_2028 - round(ceil(RemainingTerm_2028)) + 1) * 12) ];
		Value3 = ReinvestAmount2028to2035_L * pow((1 + [self ReturnVU2035InstLow:@"A"]), BackTerm_2028/12.00) ;
		temp = Value1 + Value3;
		
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear == 60) {
				temp = temp + Value2;
			}
			else if (Age + aaPolicyYear > 60){
				double GMIFactor_BackTermH2028 = (pow((1 + [self ReturnVU2035InstLow:@"A"]), (BackTerm_2028 / 12.00)) - 1) / ( pow((1 + [self ReturnVU2035InstLow:@"A"]), (1.00/ 12.00))   - 1);
				double GMIFactor_FrontTermH2028 = (pow((1 + [self ReturnVU2035InstLow:@"A"]), ((12 - BackTerm_2028) / 12.00))   - 1) / (pow(1 + [self ReturnVU2035InstLow:@"A"], (1.00/ 12.00))  - 1);
				double Value4 = VU2035Value_EverCash60 * GMIFactor_BackTermH2028 + PrevVU2035Value_EverCash60 * GMIFactor_FrontTermH2028 * pow((1 + [self ReturnVU2035InstLow:@"A"]), (BackTerm_2028 / 12.00));
				temp = temp + Value4;
			}
			else{
				
			}
		}
		
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVU2035InstLow:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVU2035Fac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
		
		
	}
	else if (aaPolicyYear == FundTerm2030) {
		NSDateFormatter* df = [[NSDateFormatter alloc] init];
		[df setDateFormat:@"dd/MM/yyyy"];
		NSDate* d = [df dateFromString:getPlanCommDate];
		NSDate* d2 = [df dateFromString:@"26/12/2030"];
		
		NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
		[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
		[formatter setMaximumFractionDigits:2];
		[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
		
		double RemainingTerm_2030 = 0.00;
		double BackTerm_2030 = 0.00;
		double Value3 = 0.00;
		RemainingTerm_2030 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
		BackTerm_2030 = 12 - [self roundUp:((RemainingTerm_2030 - round(ceil(RemainingTerm_2030)) + 1) * 12) ];
		Value3 = ReinvestAmount2030to2035_L * pow((1 + [self ReturnVU2035InstLow:@"A"]), BackTerm_2030/12.00) ;
		temp = Value1 + Value3;
		
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear == 60) {
				temp = temp + Value2;
			}
			else if (Age + aaPolicyYear > 60){
				double GMIFactor_BackTermH2030 = (pow((1 + [self ReturnVU2035InstLow:@"A"]), (BackTerm_2030 / 12.00)) - 1) / ( pow((1 + [self ReturnVU2035InstLow:@"A"]), (1.00/ 12.00))   - 1);
				double GMIFactor_FrontTermH2030 = (pow((1 + [self ReturnVU2035InstLow:@"A"]), ((12 - BackTerm_2030) / 12.00))   - 1) / (pow(1 + [self ReturnVU2035InstLow:@"A"], (1.00/ 12.00))  - 1);
				double Value4 = VU2035Value_EverCash60 * GMIFactor_BackTermH2030 + PrevVU2035Value_EverCash60 * GMIFactor_FrontTermH2030 * pow((1 + [self ReturnVU2035InstLow:@"A"]), (BackTerm_2030 / 12.00));
				temp = temp + Value4;
			}
			else{
				
			}
		}
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVU2035InstLow:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVU2035Fac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
		
		
	}
	else{
		if (Age + aaPolicyYear < 60) {
			temp = Value1;
		}
		else if (Age + aaPolicyYear == 60){
			temp = Value1 + Value2;
		}
		else{
			temp = Value1 + Value2 * 12 * (1 + [self ReturnVU2035InstLow:@"M"])/(pow((1 + [self ReturnVU2035InstLow:@"A"]), (1.00/12.00)));
		}
        
        //if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = [self ReturnVU2035Fac:aaPolicyYear] * 100;
            double tempInst = [self ReturnVU2035InstLow:@""];
            
            temp = temp + [self PaidUpOptionTable_RTUO:FALSE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:tempInst PolYear:aaPolicyYear andMonth:0];
        //}
	}
	
	return temp + VU2035Value_EverCash1 + VU2035Value_EverCash6;
	
}

-(double)PaidUpOptionTable_Ret_High:(double)aaValue andPolicyYear :(int)aaPolicyYear {
	
	double RemainingTerm_2023 = 0.00;
	double RemainingTerm_2025 = 0.00;
	double RemainingTerm_2028 = 0.00;
	double RemainingTerm_2030 = 0.00;
	double RemainingTerm_2035 = 0.00;
	double BackTerm_2023 = 0.00;
	double BackTerm_2025 = 0.00;
	double BackTerm_2028 = 0.00;
	double BackTerm_2030 = 0.00;
	double BackTerm_2035 = 0.00;
	double GMIFactor_BackTermH2023 = 0.00;
	double GMIFactor_BackTermH2025 = 0.00;
	double GMIFactor_BackTermH2028 = 0.00;
	double GMIFactor_BackTermH2030 = 0.00;
	double GMIFactor_BackTermH2035 = 0.00;
	
	double GMIFactor_FrontTermH2023 = 0.00;
	double GMIFactor_FrontTermH2025 = 0.00;
	double GMIFactor_FrontTermH2028 = 0.00;
	double GMIFactor_FrontTermH2030 = 0.00;
	double GMIFactor_FrontTermH2035 = 0.00;
	
    
	double temp = 0.00;
	double Value1 = aaValue * (1 + [self ReturnVURetInstHigh:aaPolicyYear andMOP:@"A"]) * (1 + [self ReturnLoyaltyBonus:aaPolicyYear]/100.00);
	double Value2 = VURetValue_EverCash60;
	double Value3 = 0.00;
	double Value4 = 0.00;
	
	if (aaPolicyYear == FundTerm2023) {
		NSDateFormatter* df = [[NSDateFormatter alloc] init];
		[df setDateFormat:@"dd/MM/yyyy"];
		NSDate* d = [df dateFromString:getPlanCommDate];
		NSDate* d2 = [df dateFromString:@"26/12/2023"];
		
		NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
		[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
		[formatter setMaximumFractionDigits:2];
		[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
		
		
		RemainingTerm_2023 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
		BackTerm_2023 = 12 - [self roundUp:((RemainingTerm_2023 - round(ceil(RemainingTerm_2023)) + 1) * 12) ];
		Value3 = ReinvestAmount2023toRet_H * pow((1 + [self ReturnVURetInstHigh:aaPolicyYear andMOP:@"A"]), BackTerm_2023/12.00) ;
		temp = Value1 + Value3;
		
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear == 60) {
				temp = temp + Value2;
			}
			else if (Age + aaPolicyYear > 60){
				GMIFactor_BackTermH2023 = (pow((1 + [self ReturnVURetInstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2023 / 12.00)) - 1) / ( pow((1 + [self ReturnVURetInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2023 = (pow((1 + [self ReturnVURetInstHigh:aaPolicyYear andMOP:@"A"]), ((12 - BackTerm_2023) / 12.00))   - 1) / (pow(1 + [self ReturnVURetInstHigh:aaPolicyYear andMOP:@"A"], (1.00/ 12.00))  - 1);
				Value4 = VURetValue_EverCash60 * GMIFactor_BackTermH2023 + PrevVURetValue_EverCash60 * GMIFactor_FrontTermH2023 * pow((1 + [self ReturnVURetInstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2023 / 12.00));
				temp = temp + Value4;
			}
			else{
				
			}
		}
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVURetInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVURetFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
		
		
	}
	else if (aaPolicyYear == FundTerm2025) {
		NSDateFormatter* df = [[NSDateFormatter alloc] init];
		[df setDateFormat:@"dd/MM/yyyy"];
		NSDate* d = [df dateFromString:getPlanCommDate];
		NSDate* d2 = [df dateFromString:@"26/12/2025"];
		
		NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
		[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
		[formatter setMaximumFractionDigits:2];
		[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
		
		RemainingTerm_2025 = 0.00;
		BackTerm_2025 = 0.00;
		Value3 = 0.00;
		RemainingTerm_2025 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
		BackTerm_2025 = 12 - [self roundUp:((RemainingTerm_2025 - round(ceil(RemainingTerm_2025)) + 1) * 12) ];
		Value3 = ReinvestAmount2025toRet_H * pow((1 + [self ReturnVURetInstHigh:aaPolicyYear andMOP:@"A"]), BackTerm_2025/12.00) ;
		temp = Value1 + Value3;
		
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear == 60) {
				temp = temp + Value2;
			}
			else if (Age + aaPolicyYear > 60){
				GMIFactor_BackTermH2025 = (pow((1 + [self ReturnVURetInstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2025 / 12.00)) - 1) / ( pow((1 + [self ReturnVURetInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/ 12.00))   - 1);
				GMIFactor_FrontTermH2025 = (pow((1 + [self ReturnVURetInstHigh:aaPolicyYear andMOP:@"A"]), ((12 - BackTerm_2025) / 12.00))   - 1) / (pow(1 + [self ReturnVURetInstHigh:aaPolicyYear andMOP:@"A"], (1.00/ 12.00))  - 1);
				Value4 = VURetValue_EverCash60 * GMIFactor_BackTermH2025 + PrevVURetValue_EverCash60 * GMIFactor_FrontTermH2025 * pow((1 + [self ReturnVURetInstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2025 / 12.00));
				temp = temp + Value4;
			}
			else{
				
			}
		}
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVURetInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVURetFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
		
		
	}
	else if (aaPolicyYear == FundTerm2028) {
		NSDateFormatter* df = [[NSDateFormatter alloc] init];
		[df setDateFormat:@"dd/MM/yyyy"];
		NSDate* d = [df dateFromString:getPlanCommDate];
		NSDate* d2 = [df dateFromString:@"26/12/2028"];
		
		NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
		[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
		[formatter setMaximumFractionDigits:2];
		[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
		
		RemainingTerm_2028 = 0.00;
		BackTerm_2028 = 0.00;
		Value3 = 0.00;
		RemainingTerm_2028 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
		BackTerm_2028 = 12 - [self roundUp:((RemainingTerm_2028 - round(ceil(RemainingTerm_2028)) + 1) * 12) ];
		Value3 = ReinvestAmount2028toRet_H * pow((1 + [self ReturnVURetInstHigh:aaPolicyYear andMOP:@"A"]), BackTerm_2028/12.00) ;
		temp = Value1 + Value3;
		
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear == 60) {
				temp = temp + Value2;
			}
			else if (Age + aaPolicyYear > 60){
				GMIFactor_BackTermH2028 = (pow((1 + [self ReturnVURetInstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2028 / 12.00)) - 1) / ( pow((1 + [self ReturnVURetInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/ 12.00))   - 1);
				GMIFactor_FrontTermH2028 = (pow((1 + [self ReturnVURetInstHigh:aaPolicyYear andMOP:@"A"]), ((12 - BackTerm_2028) / 12.00))   - 1) / (pow(1 + [self ReturnVURetInstHigh:aaPolicyYear andMOP:@"A"], (1.00/ 12.00))  - 1);
				Value4 = VURetValue_EverCash60 * GMIFactor_BackTermH2028 + PrevVURetValue_EverCash60 * GMIFactor_FrontTermH2028 * pow((1 + [self ReturnVURetInstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2028 / 12.00));
				temp = temp + Value4;
			}
			else{
				
			}
		}
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVURetInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVURetFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
		
		
	}
	else if (aaPolicyYear == FundTerm2030) {
		NSDateFormatter* df = [[NSDateFormatter alloc] init];
		[df setDateFormat:@"dd/MM/yyyy"];
		NSDate* d = [df dateFromString:getPlanCommDate];
		NSDate* d2 = [df dateFromString:@"26/12/2030"];
		
		NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
		[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
		[formatter setMaximumFractionDigits:2];
		[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
		
		RemainingTerm_2030 = 0.00;
		BackTerm_2030 = 0.00;
		Value3 = 0.00;
		RemainingTerm_2030 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
		BackTerm_2030 = 12 - [self roundUp:((RemainingTerm_2030 - round(ceil(RemainingTerm_2030)) + 1) * 12) ];
		Value3 = ReinvestAmount2030toRet_H * pow((1 + [self ReturnVURetInstHigh:aaPolicyYear andMOP:@"A"]), BackTerm_2030/12.00) ;
		temp = Value1 + Value3;
		
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear == 60) {
				temp = temp + Value2;
			}
			else if (Age + aaPolicyYear > 60){
				GMIFactor_BackTermH2030 = (pow((1 + [self ReturnVURetInstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2030 / 12.00)) - 1) / ( pow((1 + [self ReturnVURetInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/ 12.00))   - 1);
				GMIFactor_FrontTermH2030 = (pow((1 + [self ReturnVURetInstHigh:aaPolicyYear andMOP:@"A"]), ((12 - BackTerm_2030) / 12.00))   - 1) / (pow(1 + [self ReturnVURetInstHigh:aaPolicyYear andMOP:@"A"], (1.00/ 12.00))  - 1);
				Value4 = VURetValue_EverCash60 * GMIFactor_BackTermH2030 + PrevVURetValue_EverCash60 * GMIFactor_FrontTermH2030 * pow((1 + [self ReturnVURetInstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2030 / 12.00));
				temp = temp + Value4;
			}
			else{
				
			}
		}
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVURetInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVURetFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
		
		
	}
	else if (aaPolicyYear == FundTerm2035) {
		NSDateFormatter* df = [[NSDateFormatter alloc] init];
		[df setDateFormat:@"dd/MM/yyyy"];
		NSDate* d = [df dateFromString:getPlanCommDate];
		NSDate* d2 = [df dateFromString:@"26/12/2035"];
		
		NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
		[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
		[formatter setMaximumFractionDigits:2];
		[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
		
		RemainingTerm_2035 = 0.00;
		BackTerm_2035 = 0.00;
		Value3 = 0.00;
		RemainingTerm_2035 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
		BackTerm_2035 = 12 - [self roundUp:((RemainingTerm_2035 - round(ceil(RemainingTerm_2035)) + 1) * 12) ];
		Value3 = ReinvestAmount2035toRet_H * pow((1 + [self ReturnVURetInstHigh:aaPolicyYear andMOP:@"A"]), BackTerm_2035/12.00) ;
		temp = Value1 + Value3;
		
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear == 60) {
				temp = temp + Value2;
			}
			else if (Age + aaPolicyYear > 60){
				GMIFactor_BackTermH2035 = (pow((1 + [self ReturnVURetInstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2035 / 12.00)) - 1) / ( pow((1 + [self ReturnVURetInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/ 12.00))   - 1);
				GMIFactor_FrontTermH2035 = (pow((1 + [self ReturnVURetInstHigh:aaPolicyYear andMOP:@"A"]), ((12 - BackTerm_2035) / 12.00))   - 1) / (pow(1 + [self ReturnVURetInstHigh:aaPolicyYear andMOP:@"A"], (1.00/ 12.00))  - 1);
				Value4 = VURetValue_EverCash60 * GMIFactor_BackTermH2035 + PrevVURetValue_EverCash60 * GMIFactor_FrontTermH2035 * pow((1 + [self ReturnVURetInstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2035 / 12.00));
				temp = temp + Value4;
			}
			else{
				
			}
		}
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVURetInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVURetFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i ]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
		
		
	}
	else{
		if (Age + aaPolicyYear < 60) {
			temp = Value1;
		}
		else if (Age + aaPolicyYear == 60){
			temp = Value1 + Value2;
		}
		else{
			temp = Value1 + Value2 * 12 * (1 + [self ReturnVURetInstHigh:aaPolicyYear andMOP:@"M"])/(pow((1 + [self ReturnVURetInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00)));
		}
        
        //if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = [self ReturnVURetFac:aaPolicyYear] * 100;
            double tempInst = [self ReturnVURetInstHigh:aaPolicyYear andMOP:@""];
            
            temp = temp + [self PaidUpOptionTable_RTUO:FALSE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:tempInst PolYear:aaPolicyYear andMonth:0];
        //}
	}
	
	return temp + VURetValue_EverCash1 + VURetValue_EverCash6;
	
}

-(double)PaidUpOptionTable_Ret_Median:(double)aaValue andPolicyYear :(int)aaPolicyYear {
	
	double RemainingTerm_2023 = 0.00;
	double RemainingTerm_2025 = 0.00;
	double RemainingTerm_2028 = 0.00;
	double RemainingTerm_2030 = 0.00;
	double RemainingTerm_2035 = 0.00;
	double BackTerm_2023 = 0.00;
	double BackTerm_2025 = 0.00;
	double BackTerm_2028 = 0.00;
	double BackTerm_2030 = 0.00;
	double BackTerm_2035 = 0.00;
	double GMIFactor_BackTermH2023 = 0.00;
	double GMIFactor_BackTermH2025 = 0.00;
	double GMIFactor_BackTermH2028 = 0.00;
	double GMIFactor_BackTermH2030 = 0.00;
	double GMIFactor_BackTermH2035 = 0.00;
	
	double GMIFactor_FrontTermH2023 = 0.00;
	double GMIFactor_FrontTermH2025 = 0.00;
	double GMIFactor_FrontTermH2028 = 0.00;
	double GMIFactor_FrontTermH2030 = 0.00;
	double GMIFactor_FrontTermH2035 = 0.00;
	
	
	double temp = 0.00;
	double Value1 = aaValue * (1 + [self ReturnVURetInstMedian:@"A"]) * (1 + [self ReturnLoyaltyBonus:aaPolicyYear]/100.00);
	double Value2 = VURetValue_EverCash60;
	double Value3 = 0.00;
	double Value4 = 0.00;
	
	if (aaPolicyYear == FundTerm2023) {
		NSDateFormatter* df = [[NSDateFormatter alloc] init];
		[df setDateFormat:@"dd/MM/yyyy"];
		NSDate* d = [df dateFromString:getPlanCommDate];
		NSDate* d2 = [df dateFromString:@"26/12/2023"];
		
		NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
		[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
		[formatter setMaximumFractionDigits:2];
		[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
		
		
		RemainingTerm_2023 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
		BackTerm_2023 = 12 - [self roundUp:((RemainingTerm_2023 - round(ceil(RemainingTerm_2023)) + 1) * 12) ];
		Value3 = ReinvestAmount2023toRet_M * pow((1 + [self ReturnVURetInstMedian:@"A"]), BackTerm_2023/12.00) ;
		temp = Value1 + Value3;
		
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear == 60) {
				temp = temp + Value2;
			}
			else if (Age + aaPolicyYear > 60){
				GMIFactor_BackTermH2023 = (pow((1 + [self ReturnVURetInstMedian:@"A"]), (BackTerm_2023 / 12.00)) - 1) / ( pow((1 + [self ReturnVURetInstMedian:@"A"]), (1.00/ 12.00))   - 1);
				GMIFactor_FrontTermH2023 = (pow((1 + [self ReturnVURetInstMedian:@"A"]), ((12 - BackTerm_2023) / 12.00))   - 1) / (pow(1 + [self ReturnVURetInstMedian:@"A"], (1.00/ 12.00))  - 1);
				Value4 = VURetValue_EverCash60 * GMIFactor_BackTermH2023 + PrevVURetValue_EverCash60 * GMIFactor_FrontTermH2023 * pow((1 + [self ReturnVURetInstMedian:@"A"]), (BackTerm_2023 / 12.00));
				temp = temp + Value4;
			}
			else{
				
			}
		}
		
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVURetInstMedian:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVURetFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }

		
	}
	else if (aaPolicyYear == FundTerm2025) {
		NSDateFormatter* df = [[NSDateFormatter alloc] init];
		[df setDateFormat:@"dd/MM/yyyy"];
		NSDate* d = [df dateFromString:getPlanCommDate];
		NSDate* d2 = [df dateFromString:@"26/12/2025"];
		
		NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
		[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
		[formatter setMaximumFractionDigits:2];
		[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
		
		RemainingTerm_2025 = 0.00;
		BackTerm_2025 = 0.00;
		Value3 = 0.00;
		RemainingTerm_2025 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
		BackTerm_2025 = 12 - [self roundUp:((RemainingTerm_2025 - round(ceil(RemainingTerm_2025)) + 1) * 12) ];
		Value3 = ReinvestAmount2025toRet_M * pow((1 + [self ReturnVURetInstMedian:@"A"]), BackTerm_2025/12.00) ;
		temp = Value1 + Value3;
		
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear == 60) {
				temp = temp + Value2;
			}
			else if (Age + aaPolicyYear > 60){
				GMIFactor_BackTermH2025 = (pow((1 + [self ReturnVURetInstMedian:@"A"]), (BackTerm_2025 / 12.00)) - 1) / ( pow((1 + [self ReturnVURetInstMedian:@"A"]), (1.00/ 12.00))   - 1);
				GMIFactor_FrontTermH2025 = (pow((1 + [self ReturnVURetInstMedian:@"A"]), ((12 - BackTerm_2025) / 12.00))   - 1) / (pow(1 + [self ReturnVURetInstMedian:@"A"], (1.00/ 12.00))  - 1);
				Value4 = VURetValue_EverCash60 * GMIFactor_BackTermH2025 + PrevVURetValue_EverCash60 * GMIFactor_FrontTermH2025 * pow((1 + [self ReturnVURetInstMedian:@"A"]), (BackTerm_2025 / 12.00));
				temp = temp + Value4;
			}
			else{
				
			}
		}
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVURetInstMedian:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVURetFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
		
		
	}
	else if (aaPolicyYear == FundTerm2028) {
		NSDateFormatter* df = [[NSDateFormatter alloc] init];
		[df setDateFormat:@"dd/MM/yyyy"];
		NSDate* d = [df dateFromString:getPlanCommDate];
		NSDate* d2 = [df dateFromString:@"26/12/2028"];
		
		NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
		[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
		[formatter setMaximumFractionDigits:2];
		[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
		
		RemainingTerm_2028 = 0.00;
		BackTerm_2028 = 0.00;
		Value3 = 0.00;
		RemainingTerm_2028 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
		BackTerm_2028 = 12 - [self roundUp:((RemainingTerm_2028 - round(ceil(RemainingTerm_2028)) + 1) * 12) ];
		Value3 = ReinvestAmount2028toRet_M * pow((1 + [self ReturnVURetInstMedian:@"A"]), BackTerm_2028/12.00) ;
		temp = Value1 + Value3;
		
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear == 60) {
				temp = temp + Value2;
			}
			else if (Age + aaPolicyYear > 60){
				GMIFactor_BackTermH2028 = (pow((1 + [self ReturnVURetInstMedian:@"A"]), (BackTerm_2028 / 12.00)) - 1) / ( pow((1 + [self ReturnVURetInstMedian:@"A"]), (1.00/ 12.00))   - 1);
				GMIFactor_FrontTermH2028 = (pow((1 + [self ReturnVURetInstMedian:@"A"]), ((12 - BackTerm_2028) / 12.00))   - 1) / (pow(1 + [self ReturnVURetInstMedian:@"A"], (1.00/ 12.00))  - 1);
				Value4 = VURetValue_EverCash60 * GMIFactor_BackTermH2028 + PrevVURetValue_EverCash60 * GMIFactor_FrontTermH2028 * pow((1 + [self ReturnVURetInstMedian:@"A"]), (BackTerm_2028 / 12.00));
				temp = temp + Value4;
			}
			else{
				
			}
		}
		
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVURetInstMedian:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVURetFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
		
        
		
	}
	else if (aaPolicyYear == FundTerm2030) {
		NSDateFormatter* df = [[NSDateFormatter alloc] init];
		[df setDateFormat:@"dd/MM/yyyy"];
		NSDate* d = [df dateFromString:getPlanCommDate];
		NSDate* d2 = [df dateFromString:@"26/12/2030"];
		
		NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
		[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
		[formatter setMaximumFractionDigits:2];
		[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
		
		RemainingTerm_2030 = 0.00;
		BackTerm_2030 = 0.00;
		Value3 = 0.00;
		RemainingTerm_2030 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
		BackTerm_2030 = 12 - [self roundUp:((RemainingTerm_2030 - round(ceil(RemainingTerm_2030)) + 1) * 12) ];
		Value3 = ReinvestAmount2030toRet_M * pow((1 + [self ReturnVURetInstMedian:@"A"]), BackTerm_2030/12.00) ;
		temp = Value1 + Value3;
		
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear == 60) {
				temp = temp + Value2;
			}
			else if (Age + aaPolicyYear > 60){
				GMIFactor_BackTermH2030 = (pow((1 + [self ReturnVURetInstMedian:@"A"]), (BackTerm_2030 / 12.00)) - 1) / ( pow((1 + [self ReturnVURetInstMedian:@"A"]), (1.00/ 12.00))   - 1);
				GMIFactor_FrontTermH2030 = (pow((1 + [self ReturnVURetInstMedian:@"A"]), ((12 - BackTerm_2030) / 12.00))   - 1) / (pow(1 + [self ReturnVURetInstMedian:@"A"], (1.00/ 12.00))  - 1);
				Value4 = VURetValue_EverCash60 * GMIFactor_BackTermH2030 + PrevVURetValue_EverCash60 * GMIFactor_FrontTermH2030 * pow((1 + [self ReturnVURetInstMedian:@"A"]), (BackTerm_2030 / 12.00));
				temp = temp + Value4;
			}
			else{
				
			}
		}
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVURetInstMedian:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVURetFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
		
		
	}
	else if (aaPolicyYear == FundTerm2035) {
		NSDateFormatter* df = [[NSDateFormatter alloc] init];
		[df setDateFormat:@"dd/MM/yyyy"];
		NSDate* d = [df dateFromString:getPlanCommDate];
		NSDate* d2 = [df dateFromString:@"26/12/2035"];
		
		NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
		[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
		[formatter setMaximumFractionDigits:2];
		[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
		
		RemainingTerm_2035 = 0.00;
		BackTerm_2035 = 0.00;
		Value3 = 0.00;
		RemainingTerm_2035 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
		BackTerm_2035 = 12 - [self roundUp:((RemainingTerm_2035 - round(ceil(RemainingTerm_2035)) + 1) * 12) ];
		Value3 = ReinvestAmount2035toRet_M * pow((1 + [self ReturnVURetInstMedian:@"A"]), BackTerm_2035/12.00) ;
		temp = Value1 + Value3;
		
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear == 60) {
				temp = temp + Value2;
			}
			else if (Age + aaPolicyYear > 60){
				GMIFactor_BackTermH2035 = (pow((1 + [self ReturnVURetInstMedian:@"A"]), (BackTerm_2035 / 12.00)) - 1) / ( pow((1 + [self ReturnVURetInstMedian:@"A"]), (1.00/ 12.00))   - 1);
				GMIFactor_FrontTermH2035 = (pow((1 + [self ReturnVURetInstMedian:@"A"]), ((12 - BackTerm_2035) / 12.00))   - 1) / (pow(1 + [self ReturnVURetInstMedian:@"A"], (1.00/ 12.00))  - 1);
				Value4 = VURetValue_EverCash60 * GMIFactor_BackTermH2035 + PrevVURetValue_EverCash60 * GMIFactor_FrontTermH2035 * pow((1 + [self ReturnVURetInstMedian:@"A"]), (BackTerm_2035 / 12.00));
				temp = temp + Value4;
			}
			else{
				
			}
		}
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVURetInstMedian:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVURetFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
		
	}
	else{
		if (Age + aaPolicyYear < 60) {
			temp = Value1;
		}
		else if (Age + aaPolicyYear == 60){
			temp = Value1 + Value2;
		}
		else{
			temp = Value1 + Value2 * 12 * (1 + [self ReturnVURetInstMedian:@"M"])/(pow((1 + [self ReturnVURetInstMedian:@"A"]), (1.00/12.00)));
		}
        
        //if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = [self ReturnVURetFac:aaPolicyYear] * 100;
            double tempInst = [self ReturnVURetInstMedian:@""];
            
            temp = temp + [self PaidUpOptionTable_RTUO:FALSE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:tempInst PolYear:aaPolicyYear andMonth:0];
        //}
	}
    
	return temp + VURetValue_EverCash1 + VURetValue_EverCash6;
	
}

-(double)PaidUpOptionTable_Ret_Low:(double)aaValue andPolicyYear :(int)aaPolicyYear {
	
	double RemainingTerm_2023 = 0.00;
	double RemainingTerm_2025 = 0.00;
	double RemainingTerm_2028 = 0.00;
	double RemainingTerm_2030 = 0.00;
	double RemainingTerm_2035 = 0.00;
	double BackTerm_2023 = 0.00;
	double BackTerm_2025 = 0.00;
	double BackTerm_2028 = 0.00;
	double BackTerm_2030 = 0.00;
	double BackTerm_2035 = 0.00;
	double GMIFactor_BackTermH2023 = 0.00;
	double GMIFactor_BackTermH2025 = 0.00;
	double GMIFactor_BackTermH2028 = 0.00;
	double GMIFactor_BackTermH2030 = 0.00;
	double GMIFactor_BackTermH2035 = 0.00;
	
	double GMIFactor_FrontTermH2023 = 0.00;
	double GMIFactor_FrontTermH2025 = 0.00;
	double GMIFactor_FrontTermH2028 = 0.00;
	double GMIFactor_FrontTermH2030 = 0.00;
	double GMIFactor_FrontTermH2035 = 0.00;
	
	
	double temp = 0.00;
	double Value1 = aaValue * (1 + [self ReturnVURetInstLow:@"A"]) * (1 + [self ReturnLoyaltyBonus:aaPolicyYear]/100.00);
	double Value2 = VURetValue_EverCash60;
	double Value3 = 0.00;
	double Value4 = 0.00;
	
	if (aaPolicyYear == FundTerm2023) {
		NSDateFormatter* df = [[NSDateFormatter alloc] init];
		[df setDateFormat:@"dd/MM/yyyy"];
		NSDate* d = [df dateFromString:getPlanCommDate];
		NSDate* d2 = [df dateFromString:@"26/12/2023"];
		
		NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
		[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
		[formatter setMaximumFractionDigits:2];
		[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
		
		
		RemainingTerm_2023 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
		BackTerm_2023 = 12 - [self roundUp:((RemainingTerm_2023 - round(ceil(RemainingTerm_2023)) + 1) * 12) ];
		Value3 = ReinvestAmount2023toRet_L * pow((1 + [self ReturnVURetInstLow:@"A"]), BackTerm_2023/12.00) ;
		temp = Value1 + Value3;
		
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear == 60) {
				temp = temp + Value2;
			}
			else if (Age + aaPolicyYear > 60){
				GMIFactor_BackTermH2023 = (pow((1 + [self ReturnVURetInstLow:@"A"]), (BackTerm_2023 / 12.00)) - 1) / ( pow((1 + [self ReturnVURetInstLow:@"A"]), (1.00/ 12.00))   - 1);
				GMIFactor_FrontTermH2023 = (pow((1 + [self ReturnVURetInstLow:@"A"]), ((12 - BackTerm_2023) / 12.00))   - 1) / (pow(1 + [self ReturnVURetInstLow:@"A"], (1.00/ 12.00))  - 1);
				Value4 = VURetValue_EverCash60 * GMIFactor_BackTermH2023 + PrevVURetValue_EverCash60 * GMIFactor_FrontTermH2023 * pow((1 + [self ReturnVURetInstLow:@"A"]), (BackTerm_2023 / 12.00));
				temp = temp + Value4;
			}
			else{
				
			}
		}
		
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVURetInstLow:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVURetFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
		
	}
	else if (aaPolicyYear == FundTerm2025) {
		NSDateFormatter* df = [[NSDateFormatter alloc] init];
		[df setDateFormat:@"dd/MM/yyyy"];
		NSDate* d = [df dateFromString:getPlanCommDate];
		NSDate* d2 = [df dateFromString:@"26/12/2025"];
		
		NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
		[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
		[formatter setMaximumFractionDigits:2];
		[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
		
		RemainingTerm_2025 = 0.00;
		BackTerm_2025 = 0.00;
		Value3 = 0.00;
		RemainingTerm_2025 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
		BackTerm_2025 = 12 - [self roundUp:((RemainingTerm_2025 - round(ceil(RemainingTerm_2025)) + 1) * 12) ];
		Value3 = ReinvestAmount2025toRet_L * pow((1 + [self ReturnVURetInstLow:@"A"]), BackTerm_2025/12.00) ;
		temp = Value1 + Value3;
		
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear == 60) {
				temp = temp + Value2;
			}
			else if (Age + aaPolicyYear > 60){
				GMIFactor_BackTermH2025 = (pow((1 + [self ReturnVURetInstLow:@"A"]), (BackTerm_2025 / 12.00)) - 1) / ( pow((1 + [self ReturnVURetInstLow:@"A"]), (1.00/ 12.00))   - 1);
				GMIFactor_FrontTermH2025 = (pow((1 + [self ReturnVURetInstLow:@"A"]), ((12 - BackTerm_2025) / 12.00))   - 1) / (pow(1 + [self ReturnVURetInstLow:@"A"], (1.00/ 12.00))  - 1);
				Value4 = VURetValue_EverCash60 * GMIFactor_BackTermH2025 + PrevVURetValue_EverCash60 * GMIFactor_FrontTermH2025 * pow((1 + [self ReturnVURetInstLow:@"A"]), (BackTerm_2025 / 12.00));
				temp = temp + Value4;
			}
			else{
				
			}
		}
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVURetInstLow:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVURetFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
		
		
	}
	else if (aaPolicyYear == FundTerm2028) {
		NSDateFormatter* df = [[NSDateFormatter alloc] init];
		[df setDateFormat:@"dd/MM/yyyy"];
		NSDate* d = [df dateFromString:getPlanCommDate];
		NSDate* d2 = [df dateFromString:@"26/12/2028"];
		
		NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
		[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
		[formatter setMaximumFractionDigits:2];
		[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
		
		RemainingTerm_2028 = 0.00;
		BackTerm_2028 = 0.00;
		Value3 = 0.00;
		RemainingTerm_2028 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
		BackTerm_2028 = 12 - [self roundUp:((RemainingTerm_2028 - round(ceil(RemainingTerm_2028)) + 1) * 12) ];
		Value3 = ReinvestAmount2028toRet_L * pow((1 + [self ReturnVURetInstLow:@"A"]), BackTerm_2028/12.00) ;
		temp = Value1 + Value3;
		
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear == 60) {
				temp = temp + Value2;
			}
			else if (Age + aaPolicyYear > 60){
				GMIFactor_BackTermH2028 = (pow((1 + [self ReturnVURetInstLow:@"A"]), (BackTerm_2028 / 12.00)) - 1) / ( pow((1 + [self ReturnVURetInstLow:@"A"]), (1.00/ 12.00))   - 1);
				GMIFactor_FrontTermH2028 = (pow((1 + [self ReturnVURetInstLow:@"A"]), ((12 - BackTerm_2028) / 12.00))   - 1) / (pow(1 + [self ReturnVURetInstLow:@"A"], (1.00/ 12.00))  - 1);
				Value4 = VURetValue_EverCash60 * GMIFactor_BackTermH2028 + PrevVURetValue_EverCash60 * GMIFactor_FrontTermH2028 * pow((1 + [self ReturnVURetInstLow:@"A"]), (BackTerm_2028 / 12.00));
				temp = temp + Value4;
			}
			else{
				
			}
		}
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVURetInstLow:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVURetFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
		
		
	}
	else if (aaPolicyYear == FundTerm2030) {
		NSDateFormatter* df = [[NSDateFormatter alloc] init];
		[df setDateFormat:@"dd/MM/yyyy"];
		NSDate* d = [df dateFromString:getPlanCommDate];
		NSDate* d2 = [df dateFromString:@"26/12/2030"];
		
		NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
		[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
		[formatter setMaximumFractionDigits:2];
		[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
		
		RemainingTerm_2030 = 0.00;
		BackTerm_2030 = 0.00;
		Value3 = 0.00;
		RemainingTerm_2030 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
		BackTerm_2030 = 12 - [self roundUp:((RemainingTerm_2030 - round(ceil(RemainingTerm_2030)) + 1) * 12) ];
		Value3 = ReinvestAmount2030toRet_L * pow((1 + [self ReturnVURetInstLow:@"A"]), BackTerm_2030/12.00) ;
		temp = Value1 + Value3;
		
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear == 60) {
				temp = temp + Value2;
			}
			else if (Age + aaPolicyYear > 60){
				GMIFactor_BackTermH2030 = (pow((1 + [self ReturnVURetInstLow:@"A"]), (BackTerm_2030 / 12.00)) - 1) / ( pow((1 + [self ReturnVURetInstLow:@"A"]), (1.00/ 12.00))   - 1);
				GMIFactor_FrontTermH2030 = (pow((1 + [self ReturnVURetInstLow:@"A"]), ((12 - BackTerm_2030) / 12.00))   - 1) / (pow(1 + [self ReturnVURetInstLow:@"A"], (1.00/ 12.00))  - 1);
				Value4 = VURetValue_EverCash60 * GMIFactor_BackTermH2030 + PrevVURetValue_EverCash60 * GMIFactor_FrontTermH2030 * pow((1 + [self ReturnVURetInstLow:@"A"]), (BackTerm_2030 / 12.00));
				temp = temp + Value4;
			}
			else{
				
			}
		}
		
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVURetInstLow:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVURetFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
		
	}
	else if (aaPolicyYear == FundTerm2035) {
		NSDateFormatter* df = [[NSDateFormatter alloc] init];
		[df setDateFormat:@"dd/MM/yyyy"];
		NSDate* d = [df dateFromString:getPlanCommDate];
		NSDate* d2 = [df dateFromString:@"26/12/2035"];
		
		NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
		[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
		[formatter setMaximumFractionDigits:2];
		[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
		
		RemainingTerm_2035 = 0.00;
		BackTerm_2035 = 0.00;
		Value3 = 0.00;
		RemainingTerm_2035 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
		BackTerm_2035 = 12 - [self roundUp:((RemainingTerm_2035 - round(ceil(RemainingTerm_2035)) + 1) * 12) ];
		Value3 = ReinvestAmount2035toRet_L * pow((1 + [self ReturnVURetInstLow:@"A"]), BackTerm_2035/12.00) ;
		temp = Value1 + Value3;
		
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear == 60) {
				temp = temp + Value2;
			}
			else if (Age + aaPolicyYear > 60){
				GMIFactor_BackTermH2035 = (pow((1 + [self ReturnVURetInstLow:@"A"]), (BackTerm_2035 / 12.00)) - 1) / ( pow((1 + [self ReturnVURetInstLow:@"A"]), (1.00/ 12.00))   - 1);
				GMIFactor_FrontTermH2035 = (pow((1 + [self ReturnVURetInstLow:@"A"]), ((12 - BackTerm_2035) / 12.00))   - 1) / (pow(1 + [self ReturnVURetInstLow:@"A"], (1.00/ 12.00))  - 1);
				Value4 = VURetValue_EverCash60 * GMIFactor_BackTermH2035 + PrevVURetValue_EverCash60 * GMIFactor_FrontTermH2035 * pow((1 + [self ReturnVURetInstLow:@"A"]), (BackTerm_2035 / 12.00));
				temp = temp + Value4;
			}
			else{
				
			}
		}
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVURetInstLow:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVURetFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
		
	}
	else{
		if (Age + aaPolicyYear < 60) {
			temp = Value1;
		}
		else if (Age + aaPolicyYear == 60){
			temp = Value1 + Value2;
		}
		else{
			temp = Value1 + Value2 * 12 * (1 + [self ReturnVURetInstLow:@"M"])/(pow((1 + [self ReturnVURetInstLow:@"A"]), (1.00/12.00)));
		}
        
        //if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = [self ReturnVURetFac:aaPolicyYear] * 100;
            double tempInst = [self ReturnVURetInstLow:@""];
            
            temp = temp + [self PaidUpOptionTable_RTUO:FALSE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:tempInst PolYear:aaPolicyYear andMonth:0];
        //}
	}
	
	return temp + VURetValue_EverCash1 + VURetValue_EverCash6;
	
}

-(double)PaidUpOptionTable_Dana_High:(double)aaValue andPolicyYear :(int)aaPolicyYear {
	
	double RemainingTerm_2023 = 0.00;
	double RemainingTerm_2025 = 0.00;
	double RemainingTerm_2028 = 0.00;
	double RemainingTerm_2030 = 0.00;
	double RemainingTerm_2035 = 0.00;
	double BackTerm_2023 = 0.00;
	double BackTerm_2025 = 0.00;
	double BackTerm_2028 = 0.00;
	double BackTerm_2030 = 0.00;
	double BackTerm_2035 = 0.00;
	double GMIFactor_BackTermH2023 = 0.00;
	double GMIFactor_BackTermH2025 = 0.00;
	double GMIFactor_BackTermH2028 = 0.00;
	double GMIFactor_BackTermH2030 = 0.00;
	double GMIFactor_BackTermH2035 = 0.00;
	
	double GMIFactor_FrontTermH2023 = 0.00;
	double GMIFactor_FrontTermH2025 = 0.00;
	double GMIFactor_FrontTermH2028 = 0.00;
	double GMIFactor_FrontTermH2030 = 0.00;
	double GMIFactor_FrontTermH2035 = 0.00;
	
	
	double temp = 0.00;
	double Value1 = aaValue * (1 + [self ReturnVUDanaInstHigh:aaPolicyYear andMOP:@"A"]) * (1 + [self ReturnLoyaltyBonus:aaPolicyYear]/100.00);
	double Value2 = VURetValue_EverCash60;
	double Value3 = 0.00;
	double Value4 = 0.00;
	
	if (aaPolicyYear == FundTerm2023) {
		NSDateFormatter* df = [[NSDateFormatter alloc] init];
		[df setDateFormat:@"dd/MM/yyyy"];
		NSDate* d = [df dateFromString:getPlanCommDate];
		NSDate* d2 = [df dateFromString:@"26/12/2023"];
		
		NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
		[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
		[formatter setMaximumFractionDigits:2];
		[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
		
		
		RemainingTerm_2023 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
		BackTerm_2023 = 12 - [self roundUp:((RemainingTerm_2023 - round(ceil(RemainingTerm_2023)) + 1) * 12) ];
		Value3 = ReinvestAmount2023toDana_H * pow((1 + [self ReturnVUDanaInstHigh:aaPolicyYear andMOP:@"A"]), BackTerm_2023/12.00) ;
		temp = Value1 + Value3;
		
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear == 60) {
				temp = temp + Value2;
			}
			else if (Age + aaPolicyYear > 60){
				GMIFactor_BackTermH2023 = (pow((1 + [self ReturnVUDanaInstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2023 / 12.00)) - 1) / ( pow((1 + [self ReturnVUDanaInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/ 12.00))   - 1);
				GMIFactor_FrontTermH2023 = (pow((1 + [self ReturnVUDanaInstHigh:aaPolicyYear andMOP:@"A"]), ((12 - BackTerm_2023) / 12.00))   - 1) / (pow(1 + [self ReturnVUDanaInstHigh:aaPolicyYear andMOP:@"A"], (1.00/ 12.00))  - 1);
				Value4 = VUDanaValue_EverCash60 * GMIFactor_BackTermH2023 + PrevVUDanaValue_EverCash60 * GMIFactor_FrontTermH2023 * pow((1 + [self ReturnVUDanaInstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2023 / 12.00));
				temp = temp + Value4;
			}
			else{
				
			}
		}
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUDanaInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUDanaFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
		
		
	}
	else if (aaPolicyYear == FundTerm2025) {
		NSDateFormatter* df = [[NSDateFormatter alloc] init];
		[df setDateFormat:@"dd/MM/yyyy"];
		NSDate* d = [df dateFromString:getPlanCommDate];
		NSDate* d2 = [df dateFromString:@"26/12/2025"];
		
		NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
		[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
		[formatter setMaximumFractionDigits:2];
		[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
		
		RemainingTerm_2025 = 0.00;
		BackTerm_2025 = 0.00;
		Value3 = 0.00;
		RemainingTerm_2025 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
		BackTerm_2025 = 12 - [self roundUp:((RemainingTerm_2025 - round(ceil(RemainingTerm_2025)) + 1) * 12) ];
		Value3 = ReinvestAmount2025toDana_H * pow((1 + [self ReturnVUDanaInstHigh:aaPolicyYear andMOP:@"A"]), BackTerm_2025/12.00) ;
		temp = Value1 + Value3;
		
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear == 60) {
				temp = temp + Value2;
			}
			else if (Age + aaPolicyYear > 60){
				GMIFactor_BackTermH2025 = (pow((1 + [self ReturnVUDanaInstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2025 / 12.00)) - 1) / ( pow((1 + [self ReturnVUDanaInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/ 12.00))   - 1);
				GMIFactor_FrontTermH2025 = (pow((1 + [self ReturnVUDanaInstHigh:aaPolicyYear andMOP:@"A"]), ((12 - BackTerm_2025) / 12.00))   - 1) / (pow(1 + [self ReturnVUDanaInstHigh:aaPolicyYear andMOP:@"A"], (1.00/ 12.00))  - 1);
				Value4 = VUDanaValue_EverCash60 * GMIFactor_BackTermH2025 + PrevVUDanaValue_EverCash60 * GMIFactor_FrontTermH2025 * pow((1 + [self ReturnVUDanaInstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2025 / 12.00));
				temp = temp + Value4;
			}
			else{
				
			}
		}
		
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUDanaInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUDanaFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
		
	}
	else if (aaPolicyYear == FundTerm2028) {
		NSDateFormatter* df = [[NSDateFormatter alloc] init];
		[df setDateFormat:@"dd/MM/yyyy"];
		NSDate* d = [df dateFromString:getPlanCommDate];
		NSDate* d2 = [df dateFromString:@"26/12/2028"];
		
		NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
		[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
		[formatter setMaximumFractionDigits:2];
		[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
		
		RemainingTerm_2028 = 0.00;
		BackTerm_2028 = 0.00;
		Value3 = 0.00;
		RemainingTerm_2028 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
		BackTerm_2028 = 12 - [self roundUp:((RemainingTerm_2028 - round(ceil(RemainingTerm_2028)) + 1) * 12) ];
		Value3 = ReinvestAmount2028toDana_H * pow((1 + [self ReturnVUDanaInstHigh:aaPolicyYear andMOP:@"A"]), BackTerm_2028/12.00) ;
		temp = Value1 + Value3;
		
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear == 60) {
				temp = temp + Value2;
			}
			else if (Age + aaPolicyYear > 60){
				GMIFactor_BackTermH2028 = (pow((1 + [self ReturnVUDanaInstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2028 / 12.00)) - 1) / ( pow((1 + [self ReturnVUDanaInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/ 12.00))   - 1);
				GMIFactor_FrontTermH2028 = (pow((1 + [self ReturnVUDanaInstHigh:aaPolicyYear andMOP:@"A"]), ((12 - BackTerm_2028) / 12.00))   - 1) / (pow(1 + [self ReturnVUDanaInstHigh:aaPolicyYear andMOP:@"A"], (1.00/ 12.00))  - 1);
				Value4 = VUDanaValue_EverCash60 * GMIFactor_BackTermH2028 + PrevVUDanaValue_EverCash60 * GMIFactor_FrontTermH2028 * pow((1 + [self ReturnVUDanaInstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2028 / 12.00));
				temp = temp + Value4;
			}
			else{
				
			}
		}
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUDanaInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUDanaFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
		
		
	}
	else if (aaPolicyYear == FundTerm2030) {
		NSDateFormatter* df = [[NSDateFormatter alloc] init];
		[df setDateFormat:@"dd/MM/yyyy"];
		NSDate* d = [df dateFromString:getPlanCommDate];
		NSDate* d2 = [df dateFromString:@"26/12/2030"];
		
		NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
		[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
		[formatter setMaximumFractionDigits:2];
		[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
		
		RemainingTerm_2030 = 0.00;
		BackTerm_2030 = 0.00;
		Value3 = 0.00;
		RemainingTerm_2030 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
		BackTerm_2030 = 12 - [self roundUp:((RemainingTerm_2030 - round(ceil(RemainingTerm_2030)) + 1) * 12) ];
		Value3 = ReinvestAmount2030toDana_H * pow((1 + [self ReturnVUDanaInstHigh:aaPolicyYear andMOP:@"A"]), BackTerm_2030/12.00) ;
		temp = Value1 + Value3;
		
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear == 60) {
				temp = temp + Value2;
			}
			else if (Age + aaPolicyYear > 60){
				GMIFactor_BackTermH2030 = (pow((1 + [self ReturnVUDanaInstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2030 / 12.00)) - 1) / ( pow((1 + [self ReturnVUDanaInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/ 12.00))   - 1);
				GMIFactor_FrontTermH2030 = (pow((1 + [self ReturnVUDanaInstHigh:aaPolicyYear andMOP:@"A"]), ((12 - BackTerm_2030) / 12.00))   - 1) / (pow(1 + [self ReturnVUDanaInstHigh:aaPolicyYear andMOP:@"A"], (1.00/ 12.00))  - 1);
				Value4 = VUDanaValue_EverCash60 * GMIFactor_BackTermH2030 + PrevVUDanaValue_EverCash60 * GMIFactor_FrontTermH2030 * pow((1 + [self ReturnVUDanaInstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2030 / 12.00));
				temp = temp + Value4;
			}
			else{
				
			}
		}
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUDanaInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUDanaFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
		
		
		
	}
	else if (aaPolicyYear == FundTerm2035) {
		NSDateFormatter* df = [[NSDateFormatter alloc] init];
		[df setDateFormat:@"dd/MM/yyyy"];
		NSDate* d = [df dateFromString:getPlanCommDate];
		NSDate* d2 = [df dateFromString:@"26/12/2035"];
		
		NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
		[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
		[formatter setMaximumFractionDigits:2];
		[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
		
		RemainingTerm_2035 = 0.00;
		BackTerm_2035 = 0.00;
		Value3 = 0.00;
		RemainingTerm_2035 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
		BackTerm_2035 = 12 - [self roundUp:((RemainingTerm_2035 - round(ceil(RemainingTerm_2035)) + 1) * 12) ];
		Value3 = ReinvestAmount2035toDana_H * pow((1 + [self ReturnVUDanaInstHigh:aaPolicyYear andMOP:@"A"]), BackTerm_2035/12.00) ;
		temp = Value1 + Value3;
		
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear == 60) {
				temp = temp + Value2;
			}
			else if (Age + aaPolicyYear > 60){
				GMIFactor_BackTermH2035 = (pow((1 + [self ReturnVUDanaInstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2035 / 12.00)) - 1) / ( pow((1 + [self ReturnVUDanaInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/ 12.00))   - 1);
				GMIFactor_FrontTermH2035 = (pow((1 + [self ReturnVUDanaInstHigh:aaPolicyYear andMOP:@"A"]), ((12 - BackTerm_2035) / 12.00))   - 1) / (pow(1 + [self ReturnVUDanaInstHigh:aaPolicyYear andMOP:@"A"], (1.00/ 12.00))  - 1);
				Value4 = VUDanaValue_EverCash60 * GMIFactor_BackTermH2035 + PrevVUDanaValue_EverCash60 * GMIFactor_FrontTermH2035 * pow((1 + [self ReturnVUDanaInstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2035 / 12.00));
				temp = temp + Value4;
			}
			else{
				
			}
		}
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUDanaInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUDanaFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
		
		
		
	}
	else{
		if (Age + aaPolicyYear < 60) {
			temp = Value1;
		}
		else if (Age + aaPolicyYear == 60){
			temp = Value1 + Value2;
		}
		else{
			temp = Value1 + Value2 * 12 * (1 + [self ReturnVUDanaInstHigh:aaPolicyYear andMOP:@"M"])/(pow((1 + [self ReturnVUDanaInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00)));
		}
        
        //if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = [self ReturnVUDanaFac:aaPolicyYear] * 100;
            double tempInst = [self ReturnVUDanaInstHigh:aaPolicyYear andMOP:@""];
            
            temp = temp + [self PaidUpOptionTable_RTUO:FALSE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:tempInst PolYear:aaPolicyYear andMonth:0];
        //}
	}
	
	return temp + VUDanaValue_EverCash1 + VUDanaValue_EverCash6;
	
}

-(double)PaidUpOptionTable_Dana_Median:(double)aaValue andPolicyYear :(int)aaPolicyYear {
	
	double RemainingTerm_2023 = 0.00;
	double RemainingTerm_2025 = 0.00;
	double RemainingTerm_2028 = 0.00;
	double RemainingTerm_2030 = 0.00;
	double RemainingTerm_2035 = 0.00;
	double BackTerm_2023 = 0.00;
	double BackTerm_2025 = 0.00;
	double BackTerm_2028 = 0.00;
	double BackTerm_2030 = 0.00;
	double BackTerm_2035 = 0.00;
	double GMIFactor_BackTermH2023 = 0.00;
	double GMIFactor_BackTermH2025 = 0.00;
	double GMIFactor_BackTermH2028 = 0.00;
	double GMIFactor_BackTermH2030 = 0.00;
	double GMIFactor_BackTermH2035 = 0.00;
	
	double GMIFactor_FrontTermH2023 = 0.00;
	double GMIFactor_FrontTermH2025 = 0.00;
	double GMIFactor_FrontTermH2028 = 0.00;
	double GMIFactor_FrontTermH2030 = 0.00;
	double GMIFactor_FrontTermH2035 = 0.00;
	
	
	double temp = 0.00;
	double Value1 = aaValue * (1 + [self ReturnVUDanaInstMedian:@"A"]) * (1 + [self ReturnLoyaltyBonus:aaPolicyYear]/100.00);
	double Value2 = VUDanaValue_EverCash60;
	double Value3 = 0.00;
	double Value4 = 0.00;
	
	if (aaPolicyYear == FundTerm2023) {
		NSDateFormatter* df = [[NSDateFormatter alloc] init];
		[df setDateFormat:@"dd/MM/yyyy"];
		NSDate* d = [df dateFromString:getPlanCommDate];
		NSDate* d2 = [df dateFromString:@"26/12/2023"];
		
		NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
		[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
		[formatter setMaximumFractionDigits:2];
		[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
		
		
		RemainingTerm_2023 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
		BackTerm_2023 = 12 - [self roundUp:((RemainingTerm_2023 - round(ceil(RemainingTerm_2023)) + 1) * 12) ];
		Value3 = ReinvestAmount2023toDana_M * pow((1 + [self ReturnVUDanaInstMedian:@"A"]), BackTerm_2023/12.00) ;
		temp = Value1 + Value3;
		
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear == 60) {
				temp = temp + Value2;
			}
			else if (Age + aaPolicyYear > 60){
				GMIFactor_BackTermH2023 = (pow((1 + [self ReturnVUDanaInstMedian:@"A"]), (BackTerm_2023 / 12.00)) - 1) / ( pow((1 + [self ReturnVUDanaInstMedian:@"A"]), (1.00/ 12.00))   - 1);
				GMIFactor_FrontTermH2023 = (pow((1 + [self ReturnVUDanaInstMedian:@"A"]), ((12 - BackTerm_2023) / 12.00))   - 1) / (pow(1 + [self ReturnVUDanaInstMedian:@"A"], (1.00/ 12.00))  - 1);
				Value4 = VUDanaValue_EverCash60 * GMIFactor_BackTermH2023 + PrevVUDanaValue_EverCash60 * GMIFactor_FrontTermH2023 * pow((1 + [self ReturnVUDanaInstMedian:@"A"]), (BackTerm_2023 / 12.00));
				temp = temp + Value4;
			}
			else{
				
			}
		}
		
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUDanaInstMedian:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUDanaFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
		
	}
	else if (aaPolicyYear == FundTerm2025) {
		NSDateFormatter* df = [[NSDateFormatter alloc] init];
		[df setDateFormat:@"dd/MM/yyyy"];
		NSDate* d = [df dateFromString:getPlanCommDate];
		NSDate* d2 = [df dateFromString:@"26/12/2025"];
		
		NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
		[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
		[formatter setMaximumFractionDigits:2];
		[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
		
		RemainingTerm_2025 = 0.00;
		BackTerm_2025 = 0.00;
		Value3 = 0.00;
		RemainingTerm_2025 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
		BackTerm_2025 = 12 - [self roundUp:((RemainingTerm_2025 - round(ceil(RemainingTerm_2025)) + 1) * 12) ];
		Value3 = ReinvestAmount2025toDana_M * pow((1 + [self ReturnVUDanaInstMedian:@"A"]), BackTerm_2025/12.00) ;
		temp = Value1 + Value3;
		
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear == 60) {
				temp = temp + Value2;
			}
			else if (Age + aaPolicyYear > 60){
				GMIFactor_BackTermH2025 = (pow((1 + [self ReturnVUDanaInstMedian:@"A"]), (BackTerm_2025 / 12.00)) - 1) / ( pow((1 + [self ReturnVUDanaInstMedian:@"A"]), (1.00/ 12.00))   - 1);
				GMIFactor_FrontTermH2025 = (pow((1 + [self ReturnVUDanaInstMedian:@"A"]), ((12 - BackTerm_2025) / 12.00))   - 1) / (pow(1 + [self ReturnVUDanaInstMedian:@"A"], (1.00/ 12.00))  - 1);
				Value4 = VUDanaValue_EverCash60 * GMIFactor_BackTermH2025 + PrevVUDanaValue_EverCash60 * GMIFactor_FrontTermH2025 * pow((1 + [self ReturnVUDanaInstMedian:@"A"]), (BackTerm_2025 / 12.00));
				temp = temp + Value4;
			}
			else{
				
			}
		}
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUDanaInstMedian:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUDanaFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
		
		
		
	}
	else if (aaPolicyYear == FundTerm2028) {
		NSDateFormatter* df = [[NSDateFormatter alloc] init];
		[df setDateFormat:@"dd/MM/yyyy"];
		NSDate* d = [df dateFromString:getPlanCommDate];
		NSDate* d2 = [df dateFromString:@"26/12/2028"];
		
		NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
		[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
		[formatter setMaximumFractionDigits:2];
		[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
		
		RemainingTerm_2028 = 0.00;
		BackTerm_2028 = 0.00;
		Value3 = 0.00;
		RemainingTerm_2028 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
		BackTerm_2028 = 12 - [self roundUp:((RemainingTerm_2028 - round(ceil(RemainingTerm_2028)) + 1) * 12) ];
		Value3 = ReinvestAmount2028toDana_M * pow((1 + [self ReturnVUDanaInstMedian:@"A"]), BackTerm_2028/12.00) ;
		temp = Value1 + Value3;
		
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear == 60) {
				temp = temp + Value2;
			}
			else if (Age + aaPolicyYear > 60){
				GMIFactor_BackTermH2028 = (pow((1 + [self ReturnVUDanaInstMedian:@"A"]), (BackTerm_2028 / 12.00)) - 1) / ( pow((1 + [self ReturnVUDanaInstMedian:@"A"]), (1.00/ 12.00))   - 1);
				GMIFactor_FrontTermH2028 = (pow((1 + [self ReturnVUDanaInstMedian:@"A"]), ((12 - BackTerm_2028) / 12.00))   - 1) / (pow(1 + [self ReturnVUDanaInstMedian:@"A"], (1.00/ 12.00))  - 1);
				Value4 = VUDanaValue_EverCash60 * GMIFactor_BackTermH2028 + PrevVUDanaValue_EverCash60 * GMIFactor_FrontTermH2028 * pow((1 + [self ReturnVUDanaInstMedian:@"A"]), (BackTerm_2028 / 12.00));
				temp = temp + Value4;
			}
			else{
				
			}
		}
		
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUDanaInstMedian:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUDanaFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
		
	}
	else if (aaPolicyYear == FundTerm2030) {
		NSDateFormatter* df = [[NSDateFormatter alloc] init];
		[df setDateFormat:@"dd/MM/yyyy"];
		NSDate* d = [df dateFromString:getPlanCommDate];
		NSDate* d2 = [df dateFromString:@"26/12/2030"];
		
		NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
		[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
		[formatter setMaximumFractionDigits:2];
		[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
		
		RemainingTerm_2030 = 0.00;
		BackTerm_2030 = 0.00;
		Value3 = 0.00;
		RemainingTerm_2030 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
		BackTerm_2030 = 12 - [self roundUp:((RemainingTerm_2030 - round(ceil(RemainingTerm_2030)) + 1) * 12) ];
		Value3 = ReinvestAmount2030toDana_M * pow((1 + [self ReturnVUDanaInstMedian:@"A"]), BackTerm_2030/12.00) ;
		temp = Value1 + Value3;
		
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear == 60) {
				temp = temp + Value2;
			}
			else if (Age + aaPolicyYear > 60){
				GMIFactor_BackTermH2030 = (pow((1 + [self ReturnVUDanaInstMedian:@"A"]), (BackTerm_2030 / 12.00)) - 1) / ( pow((1 + [self ReturnVUDanaInstMedian:@"A"]), (1.00/ 12.00))   - 1);
				GMIFactor_FrontTermH2030 = (pow((1 + [self ReturnVUDanaInstMedian:@"A"]), ((12 - BackTerm_2030) / 12.00))   - 1) / (pow(1 + [self ReturnVUDanaInstMedian:@"A"], (1.00/ 12.00))  - 1);
				Value4 = VUDanaValue_EverCash60 * GMIFactor_BackTermH2030 + PrevVUDanaValue_EverCash60 * GMIFactor_FrontTermH2030 * pow((1 + [self ReturnVUDanaInstMedian:@"A"]), (BackTerm_2030 / 12.00));
				temp = temp + Value4;
			}
			else{
				
			}
		}
		
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUDanaInstMedian:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUDanaFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
	}
	else if (aaPolicyYear == FundTerm2035) {
		NSDateFormatter* df = [[NSDateFormatter alloc] init];
		[df setDateFormat:@"dd/MM/yyyy"];
		NSDate* d = [df dateFromString:getPlanCommDate];
		NSDate* d2 = [df dateFromString:@"26/12/2035"];
		
		NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
		[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
		[formatter setMaximumFractionDigits:2];
		[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
		
		RemainingTerm_2035 = 0.00;
		BackTerm_2035 = 0.00;
		Value3 = 0.00;
		RemainingTerm_2035 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
		BackTerm_2035 = 12 - [self roundUp:((RemainingTerm_2035 - round(ceil(RemainingTerm_2035)) + 1) * 12) ];
		Value3 = ReinvestAmount2035toDana_M * pow((1 + [self ReturnVUDanaInstMedian:@"A"]), BackTerm_2035/12.00) ;
		temp = Value1 + Value3;
		
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear == 60) {
				temp = temp + Value2;
			}
			else if (Age + aaPolicyYear > 60){
				GMIFactor_BackTermH2035 = (pow((1 + [self ReturnVUDanaInstMedian:@"A"]), (BackTerm_2035 / 12.00)) - 1) / ( pow((1 + [self ReturnVUDanaInstMedian:@"A"]), (1.00/ 12.00))   - 1);
				GMIFactor_FrontTermH2035 = (pow((1 + [self ReturnVUDanaInstMedian:@"A"]), ((12 - BackTerm_2035) / 12.00))   - 1) / (pow(1 + [self ReturnVUDanaInstMedian:@"A"], (1.00/ 12.00))  - 1);
				Value4 = VUDanaValue_EverCash60 * GMIFactor_BackTermH2035 + PrevVUDanaValue_EverCash60 * GMIFactor_FrontTermH2035 * pow((1 + [self ReturnVUDanaInstMedian:@"A"]), (BackTerm_2035 / 12.00));
				temp = temp + Value4;
			}
			else{
				
			}
		}
		
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUDanaInstMedian:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUDanaFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
	}
	else{
		if (Age + aaPolicyYear < 60) {
			temp = Value1;
		}
		else if (Age + aaPolicyYear == 60){
			temp = Value1 + Value2;
		}
		else{
			temp = Value1 + Value2 * 12 * (1 + [self ReturnVUDanaInstMedian:@"M"])/(pow((1 + [self ReturnVUDanaInstMedian:@"A"]), (1.00/12.00)));
		}
        
        //if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = [self ReturnVUDanaFac:aaPolicyYear] * 100;
            double tempInst = [self ReturnVUDanaInstMedian:@""];
            
            temp = temp + [self PaidUpOptionTable_RTUO:FALSE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:tempInst PolYear:aaPolicyYear andMonth:0];
        //}
	}
	
	return temp + VUDanaValue_EverCash1 + VUDanaValue_EverCash6;
	
}

-(double)PaidUpOptionTable_Dana_Low:(double)aaValue andPolicyYear :(int)aaPolicyYear {
	
	double RemainingTerm_2023 = 0.00;
	double RemainingTerm_2025 = 0.00;
	double RemainingTerm_2028 = 0.00;
	double RemainingTerm_2030 = 0.00;
	double RemainingTerm_2035 = 0.00;
	double BackTerm_2023 = 0.00;
	double BackTerm_2025 = 0.00;
	double BackTerm_2028 = 0.00;
	double BackTerm_2030 = 0.00;
	double BackTerm_2035 = 0.00;
	double GMIFactor_BackTermH2023 = 0.00;
	double GMIFactor_BackTermH2025 = 0.00;
	double GMIFactor_BackTermH2028 = 0.00;
	double GMIFactor_BackTermH2030 = 0.00;
	double GMIFactor_BackTermH2035 = 0.00;
	
	double GMIFactor_FrontTermH2023 = 0.00;
	double GMIFactor_FrontTermH2025 = 0.00;
	double GMIFactor_FrontTermH2028 = 0.00;
	double GMIFactor_FrontTermH2030 = 0.00;
	double GMIFactor_FrontTermH2035 = 0.00;
	
	
	double temp = 0.00;
	double Value1 = aaValue * (1 + [self ReturnVUDanaInstLow:@"A"]) * (1 + [self ReturnLoyaltyBonus:aaPolicyYear]/100.00);
	double Value2 = VUDanaValue_EverCash60;
	double Value3 = 0.00;
	double Value4 = 0.00;
	
	if (aaPolicyYear == FundTerm2023) {
		NSDateFormatter* df = [[NSDateFormatter alloc] init];
		[df setDateFormat:@"dd/MM/yyyy"];
		NSDate* d = [df dateFromString:getPlanCommDate];
		NSDate* d2 = [df dateFromString:@"26/12/2023"];
		
		NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
		[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
		[formatter setMaximumFractionDigits:2];
		[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
		
		
		RemainingTerm_2023 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
		BackTerm_2023 = 12 - [self roundUp:((RemainingTerm_2023 - round(ceil(RemainingTerm_2023)) + 1) * 12) ];
		Value3 = ReinvestAmount2023toDana_L * pow((1 + [self ReturnVUDanaInstLow:@"A"]), BackTerm_2023/12.00) ;
		temp = Value1 + Value3;
		
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear == 60) {
				temp = temp + Value2;
			}
			else if (Age + aaPolicyYear > 60){
				GMIFactor_BackTermH2023 = (pow((1 + [self ReturnVUDanaInstLow:@"A"]), (BackTerm_2023 / 12.00)) - 1) / ( pow((1 + [self ReturnVUDanaInstLow:@"A"]), (1.00/ 12.00))   - 1);
				GMIFactor_FrontTermH2023 = (pow((1 + [self ReturnVUDanaInstLow:@"A"]), ((12 - BackTerm_2023) / 12.00))   - 1) / (pow(1 + [self ReturnVUDanaInstLow:@"A"], (1.00/ 12.00))  - 1);
				Value4 = VUDanaValue_EverCash60 * GMIFactor_BackTermH2023 + PrevVUDanaValue_EverCash60 * GMIFactor_FrontTermH2023 * pow((1 + [self ReturnVUDanaInstLow:@"A"]), (BackTerm_2023 / 12.00));
				temp = temp + Value4;
			}
			else{
				
			}
		}
		
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUDanaInstLow:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUDanaFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
		
	}
	else if (aaPolicyYear == FundTerm2025) {
		NSDateFormatter* df = [[NSDateFormatter alloc] init];
		[df setDateFormat:@"dd/MM/yyyy"];
		NSDate* d = [df dateFromString:getPlanCommDate];
		NSDate* d2 = [df dateFromString:@"26/12/2025"];
		
		NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
		[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
		[formatter setMaximumFractionDigits:2];
		[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
		
		RemainingTerm_2025 = 0.00;
		BackTerm_2025 = 0.00;
		Value3 = 0.00;
		RemainingTerm_2025 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
		BackTerm_2025 = 12 - [self roundUp:((RemainingTerm_2025 - round(ceil(RemainingTerm_2025)) + 1) * 12) ];
		Value3 = ReinvestAmount2025toDana_L * pow((1 + [self ReturnVUDanaInstLow:@"A"]), BackTerm_2025/12.00) ;
		temp = Value1 + Value3;
		
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear == 60) {
				temp = temp + Value2;
			}
			else if (Age + aaPolicyYear > 60){
				GMIFactor_BackTermH2025 = (pow((1 + [self ReturnVUDanaInstLow:@"A"]), (BackTerm_2025 / 12.00)) - 1) / ( pow((1 + [self ReturnVUDanaInstLow:@"A"]), (1.00/ 12.00))   - 1);
				GMIFactor_FrontTermH2025 = (pow((1 + [self ReturnVUDanaInstLow:@"A"]), ((12 - BackTerm_2025) / 12.00))   - 1) / (pow(1 + [self ReturnVUDanaInstLow:@"A"], (1.00/ 12.00))  - 1);
				Value4 = VUDanaValue_EverCash60 * GMIFactor_BackTermH2025 + PrevVUDanaValue_EverCash60 * GMIFactor_FrontTermH2025 * pow((1 + [self ReturnVUDanaInstLow:@"A"]), (BackTerm_2025 / 12.00));
				temp = temp + Value4;
			}
			else{
				
			}
		}
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUDanaInstLow:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUDanaFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
		
		
	}
	else if (aaPolicyYear == FundTerm2028) {
		NSDateFormatter* df = [[NSDateFormatter alloc] init];
		[df setDateFormat:@"dd/MM/yyyy"];
		NSDate* d = [df dateFromString:getPlanCommDate];
		NSDate* d2 = [df dateFromString:@"26/12/2028"];
		
		NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
		[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
		[formatter setMaximumFractionDigits:2];
		[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
		
		RemainingTerm_2028 = 0.00;
		BackTerm_2028 = 0.00;
		Value3 = 0.00;
		RemainingTerm_2028 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
		BackTerm_2028 = 12 - [self roundUp:((RemainingTerm_2028 - round(ceil(RemainingTerm_2028)) + 1) * 12) ];
		Value3 = ReinvestAmount2028toDana_L * pow((1 + [self ReturnVUDanaInstLow:@"A"]), BackTerm_2028/12.00) ;
		temp = Value1 + Value3;
		
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear == 60) {
				temp = temp + Value2;
			}
			else if (Age + aaPolicyYear > 60){
				GMIFactor_BackTermH2028 = (pow((1 + [self ReturnVUDanaInstLow:@"A"]), (BackTerm_2028 / 12.00)) - 1) / ( pow((1 + [self ReturnVUDanaInstLow:@"A"]), (1.00/ 12.00))   - 1);
				GMIFactor_FrontTermH2028 = (pow((1 + [self ReturnVUDanaInstLow:@"A"]), ((12 - BackTerm_2028) / 12.00))   - 1) / (pow(1 + [self ReturnVUDanaInstLow:@"A"], (1.00/ 12.00))  - 1);
				Value4 = VUDanaValue_EverCash60 * GMIFactor_BackTermH2028 + PrevVUDanaValue_EverCash60 * GMIFactor_FrontTermH2028 * pow((1 + [self ReturnVUDanaInstLow:@"A"]), (BackTerm_2028 / 12.00));
				temp = temp + Value4;
			}
			else{
				
			}
		}
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUDanaInstLow:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUDanaFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
		
		
	}
	else if (aaPolicyYear == FundTerm2030) {
		NSDateFormatter* df = [[NSDateFormatter alloc] init];
		[df setDateFormat:@"dd/MM/yyyy"];
		NSDate* d = [df dateFromString:getPlanCommDate];
		NSDate* d2 = [df dateFromString:@"26/12/2030"];
		
		NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
		[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
		[formatter setMaximumFractionDigits:2];
		[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
		
		RemainingTerm_2030 = 0.00;
		BackTerm_2030 = 0.00;
		Value3 = 0.00;
		RemainingTerm_2030 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
		BackTerm_2030 = 12 - [self roundUp:((RemainingTerm_2030 - round(ceil(RemainingTerm_2030)) + 1) * 12) ];
		Value3 = ReinvestAmount2030toDana_L * pow((1 + [self ReturnVUDanaInstLow:@"A"]), BackTerm_2030/12.00) ;
		temp = Value1 + Value3;
		
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear == 60) {
				temp = temp + Value2;
			}
			else if (Age + aaPolicyYear > 60){
				GMIFactor_BackTermH2030 = (pow((1 + [self ReturnVUDanaInstLow:@"A"]), (BackTerm_2030 / 12.00)) - 1) / ( pow((1 + [self ReturnVUDanaInstLow:@"A"]), (1.00/ 12.00))   - 1);
				GMIFactor_FrontTermH2030 = (pow((1 + [self ReturnVUDanaInstLow:@"A"]), ((12 - BackTerm_2030) / 12.00))   - 1) / (pow(1 + [self ReturnVUDanaInstLow:@"A"], (1.00/ 12.00))  - 1);
				Value4 = VUDanaValue_EverCash60 * GMIFactor_BackTermH2030 + PrevVUDanaValue_EverCash60 * GMIFactor_FrontTermH2030 * pow((1 + [self ReturnVUDanaInstLow:@"A"]), (BackTerm_2030 / 12.00));
				temp = temp + Value4;
			}
			else{
				
			}
		}
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUDanaInstLow:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUDanaFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
		
		
	}
	else if (aaPolicyYear == FundTerm2035) {
		NSDateFormatter* df = [[NSDateFormatter alloc] init];
		[df setDateFormat:@"dd/MM/yyyy"];
		NSDate* d = [df dateFromString:getPlanCommDate];
		NSDate* d2 = [df dateFromString:@"26/12/2035"];
		
		NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
		[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
		[formatter setMaximumFractionDigits:2];
		[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
		
		RemainingTerm_2035 = 0.00;
		BackTerm_2035 = 0.00;
		Value3 = 0.00;
		RemainingTerm_2035 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
		BackTerm_2035 = 12 - [self roundUp:((RemainingTerm_2035 - round(ceil(RemainingTerm_2035)) + 1) * 12) ];
		Value3 = ReinvestAmount2035toDana_L * pow((1 + [self ReturnVUDanaInstLow:@"A"]), BackTerm_2035/12.00) ;
		temp = Value1 + Value3;
		
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear == 60) {
				temp = temp + Value2;
			}
			else if (Age + aaPolicyYear > 60){
				GMIFactor_BackTermH2035 = (pow((1 + [self ReturnVUDanaInstLow:@"A"]), (BackTerm_2035 / 12.00)) - 1) / ( pow((1 + [self ReturnVUDanaInstLow:@"A"]), (1.00/ 12.00))   - 1);
				GMIFactor_FrontTermH2035 = (pow((1 + [self ReturnVUDanaInstLow:@"A"]), ((12 - BackTerm_2035) / 12.00))   - 1) / (pow(1 + [self ReturnVUDanaInstLow:@"A"], (1.00/ 12.00))  - 1);
				Value4 = VUDanaValue_EverCash60 * GMIFactor_BackTermH2035 + PrevVUDanaValue_EverCash60 * GMIFactor_FrontTermH2035 * pow((1 + [self ReturnVUDanaInstLow:@"A"]), (BackTerm_2035 / 12.00));
				temp = temp + Value4;
			}
			else{
				
			}
		}
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUDanaInstLow:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUDanaFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i ]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
		
		
	}
	else{
		if (Age + aaPolicyYear < 60) {
			temp = Value1;
		}
		else if (Age + aaPolicyYear == 60){
			temp = Value1 + Value2;
		}
		else{
			temp = Value1 + Value2 * 12 * (1 + [self ReturnVUDanaInstLow:@"M"])/(pow((1 + [self ReturnVUDanaInstLow:@"A"]), (1.00/12.00)));
		}
        
        //if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = [self ReturnVUDanaFac:aaPolicyYear] * 100;
            double tempInst = [self ReturnVUDanaInstLow:@""];
            
            temp = temp + [self PaidUpOptionTable_RTUO:FALSE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:tempInst PolYear:aaPolicyYear andMonth:0];
        //}
	}
	
	return temp + VUDanaValue_EverCash1 + VUDanaValue_EverCash6;
	
}

-(double)PaidUpOptionTable_Smart_High:(double)aaValue andPolicyYear :(int)aaPolicyYear {
	
	double RemainingTerm_2023 = 0.00;
	double RemainingTerm_2025 = 0.00;
	double RemainingTerm_2028 = 0.00;
	double RemainingTerm_2030 = 0.00;
	double RemainingTerm_2035 = 0.00;
	double BackTerm_2023 = 0.00;
	double BackTerm_2025 = 0.00;
	double BackTerm_2028 = 0.00;
	double BackTerm_2030 = 0.00;
	double BackTerm_2035 = 0.00;
	double GMIFactor_BackTermH2023 = 0.00;
	double GMIFactor_BackTermH2025 = 0.00;
	double GMIFactor_BackTermH2028 = 0.00;
	double GMIFactor_BackTermH2030 = 0.00;
	double GMIFactor_BackTermH2035 = 0.00;
	
	double GMIFactor_FrontTermH2023 = 0.00;
	double GMIFactor_FrontTermH2025 = 0.00;
	double GMIFactor_FrontTermH2028 = 0.00;
	double GMIFactor_FrontTermH2030 = 0.00;
	double GMIFactor_FrontTermH2035 = 0.00;
	
    
	double temp = 0.00;
	double Value1 = aaValue * (1 + [self ReturnVUSmartInstHigh:aaPolicyYear andMOP:@"A"]) * (1 + [self ReturnLoyaltyBonus:aaPolicyYear]/100.00);
	double Value2 = VUSmartValue_EverCash60;
	double Value3 = 0.00;
	double Value4 = 0.00;
	
	if (aaPolicyYear == FundTerm2023) {
		NSDateFormatter* df = [[NSDateFormatter alloc] init];
		[df setDateFormat:@"dd/MM/yyyy"];
		NSDate* d = [df dateFromString:getPlanCommDate];
		NSDate* d2 = [df dateFromString:@"26/12/2023"];
		
		NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
		[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
		[formatter setMaximumFractionDigits:2];
		[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
		
		
		RemainingTerm_2023 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
		BackTerm_2023 = 12 - [self roundUp:((RemainingTerm_2023 - round(ceil(RemainingTerm_2023)) + 1) * 12) ];
		Value3 = 0 * pow((1 + [self ReturnVUSmartInstHigh:aaPolicyYear andMOP:@"A"]), BackTerm_2023/12.00) ;
		temp = Value1 + Value3;
		
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear == 60) {
				temp = temp + Value2;
			}
			else if (Age + aaPolicyYear > 60){
				GMIFactor_BackTermH2023 = (pow((1 + [self ReturnVUSmartInstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2023 / 12.00)) - 1) / ( pow((1 + [self ReturnVUSmartInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2023 = (pow((1 + [self ReturnVUSmartInstHigh:aaPolicyYear andMOP:@"A"]), ((12 - BackTerm_2023) / 12.00))   - 1) / (pow(1 + [self ReturnVUSmartInstHigh:aaPolicyYear andMOP:@"A"], (1.00/ 12.00))  - 1);
				Value4 = VUSmartValue_EverCash60 * GMIFactor_BackTermH2023 + PrevVUSmartValue_EverCash60 * GMIFactor_FrontTermH2023 * pow((1 + [self ReturnVUSmartInstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2023 / 12.00));
				temp = temp + Value4;
			}
			else{
				
			}
		}
		
		if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUSmartInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUSmartFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
	}
	else if (aaPolicyYear == FundTerm2025) {
		NSDateFormatter* df = [[NSDateFormatter alloc] init];
		[df setDateFormat:@"dd/MM/yyyy"];
		NSDate* d = [df dateFromString:getPlanCommDate];
		NSDate* d2 = [df dateFromString:@"26/12/2025"];
		
		NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
		[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
		[formatter setMaximumFractionDigits:2];
		[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
		
		RemainingTerm_2025 = 0.00;
		BackTerm_2025 = 0.00;
		Value3 = 0.00;
		RemainingTerm_2025 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
		BackTerm_2025 = 12 - [self roundUp:((RemainingTerm_2025 - round(ceil(RemainingTerm_2025)) + 1) * 12) ];
		Value3 = ReinvestAmount2025toSmart_H * pow((1 + [self ReturnVUSmartInstHigh:aaPolicyYear andMOP:@"A"]), BackTerm_2025/12.00) ;
		temp = Value1 + Value3;
		
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear == 60) {
				temp = temp + Value2;
			}
			else if (Age + aaPolicyYear > 60){
				GMIFactor_BackTermH2025 = (pow((1 + [self ReturnVUSmartInstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2025 / 12.00)) - 1) / ( pow((1 + [self ReturnVUSmartInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/ 12.00))   - 1);
				GMIFactor_FrontTermH2025 = (pow((1 + [self ReturnVUSmartInstHigh:aaPolicyYear andMOP:@"A"]), ((12 - BackTerm_2025) / 12.00))   - 1) / (pow(1 + [self ReturnVUSmartInstHigh:aaPolicyYear andMOP:@"A"], (1.00/ 12.00))  - 1);
				Value4 = VUSmartValue_EverCash60 * GMIFactor_BackTermH2025 + PrevVUSmartValue_EverCash60 * GMIFactor_FrontTermH2025 * pow((1 + [self ReturnVUSmartInstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2025 / 12.00));
				temp = temp + Value4;
			}
			else{
				
			}
		}
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUSmartInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUSmartFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
		
		
	}
	else if (aaPolicyYear == FundTerm2028) {
		NSDateFormatter* df = [[NSDateFormatter alloc] init];
		[df setDateFormat:@"dd/MM/yyyy"];
		NSDate* d = [df dateFromString:getPlanCommDate];
		NSDate* d2 = [df dateFromString:@"26/12/2028"];
		
		NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
		[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
		[formatter setMaximumFractionDigits:2];
		[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
		
		RemainingTerm_2028 = 0.00;
		BackTerm_2028 = 0.00;
		Value3 = 0.00;
		RemainingTerm_2028 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
		BackTerm_2028 = 12 - [self roundUp:((RemainingTerm_2028 - round(ceil(RemainingTerm_2028)) + 1) * 12) ];
		Value3 = ReinvestAmount2028toSmart_H * pow((1 + [self ReturnVUSmartInstHigh:aaPolicyYear andMOP:@"A"]), BackTerm_2028/12.00) ;
		temp = Value1 + Value3;
		
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear == 60) {
				temp = temp + Value2;
			}
			else if (Age + aaPolicyYear > 60){
				GMIFactor_BackTermH2028 = (pow((1 + [self ReturnVUSmartInstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2028 / 12.00)) - 1) / ( pow((1 + [self ReturnVUSmartInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/ 12.00))   - 1);
				GMIFactor_FrontTermH2028 = (pow((1 + [self ReturnVUSmartInstHigh:aaPolicyYear andMOP:@"A"]), ((12 - BackTerm_2028) / 12.00))   - 1) / (pow(1 + [self ReturnVUSmartInstHigh:aaPolicyYear andMOP:@"A"], (1.00/ 12.00))  - 1);
				Value4 = VUSmartValue_EverCash60 * GMIFactor_BackTermH2028 + PrevVUSmartValue_EverCash60 * GMIFactor_FrontTermH2028 * pow((1 + [self ReturnVUSmartInstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2028 / 12.00));
				temp = temp + Value4;
			}
			else{
				
			}
		}
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUSmartInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUSmartFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
		
		
	}
	else if (aaPolicyYear == FundTerm2030) {
		NSDateFormatter* df = [[NSDateFormatter alloc] init];
		[df setDateFormat:@"dd/MM/yyyy"];
		NSDate* d = [df dateFromString:getPlanCommDate];
		NSDate* d2 = [df dateFromString:@"26/12/2030"];
		
		NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
		[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
		[formatter setMaximumFractionDigits:2];
		[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
		
		RemainingTerm_2030 = 0.00;
		BackTerm_2030 = 0.00;
		Value3 = 0.00;
		RemainingTerm_2030 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
		BackTerm_2030 = 12 - [self roundUp:((RemainingTerm_2030 - round(ceil(RemainingTerm_2030)) + 1) * 12) ];
		Value3 = ReinvestAmount2030toSmart_H * pow((1 + [self ReturnVUSmartInstHigh:aaPolicyYear andMOP:@"A"]), BackTerm_2030/12.00) ;
		temp = Value1 + Value3;
		
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear == 60) {
				temp = temp + Value2;
			}
			else if (Age + aaPolicyYear > 60){
				GMIFactor_BackTermH2030 = (pow((1 + [self ReturnVUSmartInstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2030 / 12.00)) - 1) / ( pow((1 + [self ReturnVUSmartInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/ 12.00))   - 1);
				GMIFactor_FrontTermH2030 = (pow((1 + [self ReturnVUSmartInstHigh:aaPolicyYear andMOP:@"A"]), ((12 - BackTerm_2030) / 12.00))   - 1) / (pow(1 + [self ReturnVUSmartInstHigh:aaPolicyYear andMOP:@"A"], (1.00/ 12.00))  - 1);
				Value4 = VUSmartValue_EverCash60 * GMIFactor_BackTermH2030 + PrevVUSmartValue_EverCash60 * GMIFactor_FrontTermH2030 * pow((1 + [self ReturnVUSmartInstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2030 / 12.00));
				temp = temp + Value4;
			}
			else{
				
			}
		}
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUSmartInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUSmartFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
		
		
	}
	else if (aaPolicyYear == FundTerm2035) {
		NSDateFormatter* df = [[NSDateFormatter alloc] init];
		[df setDateFormat:@"dd/MM/yyyy"];
		NSDate* d = [df dateFromString:getPlanCommDate];
		NSDate* d2 = [df dateFromString:@"26/12/2035"];
		
		NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
		[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
		[formatter setMaximumFractionDigits:2];
		[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
		
		RemainingTerm_2035 = 0.00;
		BackTerm_2035 = 0.00;
		Value3 = 0.00;
		RemainingTerm_2035 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
		BackTerm_2035 = 12 - [self roundUp:((RemainingTerm_2035 - round(ceil(RemainingTerm_2035)) + 1) * 12) ];
		Value3 = ReinvestAmount2035toSmart_H * pow((1 + [self ReturnVUSmartInstHigh:aaPolicyYear andMOP:@"A"]), BackTerm_2035/12.00) ;
		temp = Value1 + Value3;
		
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear == 60) {
				temp = temp + Value2;
			}
			else if (Age + aaPolicyYear > 60){
				GMIFactor_BackTermH2035 = (pow((1 + [self ReturnVUSmartInstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2035 / 12.00)) - 1) / ( pow((1 + [self ReturnVUSmartInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/ 12.00))   - 1);
				GMIFactor_FrontTermH2035 = (pow((1 + [self ReturnVUSmartInstHigh:aaPolicyYear andMOP:@"A"]), ((12 - BackTerm_2035) / 12.00))   - 1) / (pow(1 + [self ReturnVUSmartInstHigh:aaPolicyYear andMOP:@"A"], (1.00/ 12.00))  - 1);
				Value4 = VUSmartValue_EverCash60 * GMIFactor_BackTermH2035 + PrevVUSmartValue_EverCash60 * GMIFactor_FrontTermH2035 * pow((1 + [self ReturnVUSmartInstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2035 / 12.00));
				temp = temp + Value4;
			}
			else{
				
			}
		}
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUSmartInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUSmartFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
		
		
	}
	else{
		if (Age + aaPolicyYear < 60) {
			temp = Value1;
		}
		else if (Age + aaPolicyYear == 60){
			temp = Value1 + Value2;
		}
		else{
			temp = Value1 + Value2 * 12 * (1 + [self ReturnVUSmartInstHigh:aaPolicyYear andMOP:@"M"])/(pow((1 + [self ReturnVUSmartInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00)));
		}
        
        //if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = [self ReturnVUSmartFac:aaPolicyYear] * 100;
            double tempInst = [self ReturnVUSmartInstHigh:aaPolicyYear andMOP:@""];
            
            temp = temp + [self PaidUpOptionTable_RTUO:FALSE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:tempInst PolYear:aaPolicyYear andMonth:0];
        //}
	}
	
	return temp + VUSmartValue_EverCash1 + VUSmartValue_EverCash6;
	
}

-(double)PaidUpOptionTable_Smart_Median:(double)aaValue andPolicyYear :(int)aaPolicyYear {
	
	double RemainingTerm_2023 = 0.00;
	double RemainingTerm_2025 = 0.00;
	double RemainingTerm_2028 = 0.00;
	double RemainingTerm_2030 = 0.00;
	double RemainingTerm_2035 = 0.00;
	double BackTerm_2023 = 0.00;
	double BackTerm_2025 = 0.00;
	double BackTerm_2028 = 0.00;
	double BackTerm_2030 = 0.00;
	double BackTerm_2035 = 0.00;
	double GMIFactor_BackTermH2023 = 0.00;
	double GMIFactor_BackTermH2025 = 0.00;
	double GMIFactor_BackTermH2028 = 0.00;
	double GMIFactor_BackTermH2030 = 0.00;
	double GMIFactor_BackTermH2035 = 0.00;
	
	double GMIFactor_FrontTermH2023 = 0.00;
	double GMIFactor_FrontTermH2025 = 0.00;
	double GMIFactor_FrontTermH2028 = 0.00;
	double GMIFactor_FrontTermH2030 = 0.00;
	double GMIFactor_FrontTermH2035 = 0.00;
	
	
	double temp = 0.00;
	double Value1 = aaValue * (1 + [self ReturnVUSmartInstMedian:@"A"]) * (1 + [self ReturnLoyaltyBonus:aaPolicyYear]/100.00);
	double Value2 = VUSmartValue_EverCash60;
	double Value3 = 0.00;
	double Value4 = 0.00;
	
	if (aaPolicyYear == FundTerm2023) {
		NSDateFormatter* df = [[NSDateFormatter alloc] init];
		[df setDateFormat:@"dd/MM/yyyy"];
		NSDate* d = [df dateFromString:getPlanCommDate];
		NSDate* d2 = [df dateFromString:@"26/12/2023"];
		
		NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
		[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
		[formatter setMaximumFractionDigits:2];
		[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
		
		
		RemainingTerm_2023 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
		BackTerm_2023 = 12 - [self roundUp:((RemainingTerm_2023 - round(ceil(RemainingTerm_2023)) + 1) * 12) ];
		Value3 = 0 * pow((1 + [self ReturnVUSmartInstMedian:@"A"]), BackTerm_2023/12.00) ;
		temp = Value1 + Value3;
		
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear == 60) {
				temp = temp + Value2;
			}
			else if (Age + aaPolicyYear > 60){
				GMIFactor_BackTermH2023 = (pow((1 + [self ReturnVUSmartInstMedian:@"A"]), (BackTerm_2023 / 12.00)) - 1) / ( pow((1 + [self ReturnVUSmartInstMedian:@"A"]), (1.00/ 12.00))   - 1);
				GMIFactor_FrontTermH2023 = (pow((1 + [self ReturnVUSmartInstMedian:@"A"]), ((12 - BackTerm_2023) / 12.00))   - 1) / (pow(1 + [self ReturnVUSmartInstMedian:@"A"], (1.00/ 12.00))  - 1);
				Value4 = VUSmartValue_EverCash60 * GMIFactor_BackTermH2023 + PrevVUSmartValue_EverCash60 * GMIFactor_FrontTermH2023 * pow((1 + [self ReturnVUSmartInstMedian:@"A"]), (BackTerm_2023 / 12.00));
				temp = temp + Value4;
			}
			else{
				
			}
		}
		
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUSmartInstMedian:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUSmartFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
		
	}
	else if (aaPolicyYear == FundTerm2025) {
		NSDateFormatter* df = [[NSDateFormatter alloc] init];
		[df setDateFormat:@"dd/MM/yyyy"];
		NSDate* d = [df dateFromString:getPlanCommDate];
		NSDate* d2 = [df dateFromString:@"26/12/2025"];
		
		NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
		[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
		[formatter setMaximumFractionDigits:2];
		[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
		
		RemainingTerm_2025 = 0.00;
		BackTerm_2025 = 0.00;
		Value3 = 0.00;
		RemainingTerm_2025 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
		BackTerm_2025 = 12 - [self roundUp:((RemainingTerm_2025 - round(ceil(RemainingTerm_2025)) + 1) * 12) ];
		Value3 = ReinvestAmount2025toSmart_M * pow((1 + [self ReturnVUSmartInstMedian:@"A"]), BackTerm_2025/12.00) ;
		temp = Value1 + Value3;
		
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear == 60) {
				temp = temp + Value2;
			}
			else if (Age + aaPolicyYear > 60){
				GMIFactor_BackTermH2025 = (pow((1 + [self ReturnVUSmartInstMedian:@"A"]), (BackTerm_2025 / 12.00)) - 1) / ( pow((1 + [self ReturnVUSmartInstMedian:@"A"]), (1.00/ 12.00))   - 1);
				GMIFactor_FrontTermH2025 = (pow((1 + [self ReturnVUSmartInstMedian:@"A"]), ((12 - BackTerm_2025) / 12.00))   - 1) / (pow(1 + [self ReturnVUSmartInstMedian:@"A"], (1.00/ 12.00))  - 1);
				Value4 = VUSmartValue_EverCash60 * GMIFactor_BackTermH2025 + PrevVUSmartValue_EverCash60 * GMIFactor_FrontTermH2025 * pow((1 + [self ReturnVUSmartInstMedian:@"A"]), (BackTerm_2025 / 12.00));
				temp = temp + Value4;
			}
			else{
				
			}
		}
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUSmartInstMedian:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUSmartFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
		
		
	}
	else if (aaPolicyYear == FundTerm2028) {
		NSDateFormatter* df = [[NSDateFormatter alloc] init];
		[df setDateFormat:@"dd/MM/yyyy"];
		NSDate* d = [df dateFromString:getPlanCommDate];
		NSDate* d2 = [df dateFromString:@"26/12/2028"];
		
		NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
		[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
		[formatter setMaximumFractionDigits:2];
		[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
		
		RemainingTerm_2028 = 0.00;
		BackTerm_2028 = 0.00;
		Value3 = 0.00;
		RemainingTerm_2028 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
		BackTerm_2028 = 12 - [self roundUp:((RemainingTerm_2028 - round(ceil(RemainingTerm_2028)) + 1) * 12) ];
		Value3 = ReinvestAmount2028toSmart_M * pow((1 + [self ReturnVUSmartInstMedian:@"A"]), BackTerm_2028/12.00) ;
		temp = Value1 + Value3;
		
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear == 60) {
				temp = temp + Value2;
			}
			else if (Age + aaPolicyYear > 60){
				GMIFactor_BackTermH2028 = (pow((1 + [self ReturnVUSmartInstMedian:@"A"]), (BackTerm_2028 / 12.00)) - 1) / ( pow((1 + [self ReturnVUSmartInstMedian:@"A"]), (1.00/ 12.00))   - 1);
				GMIFactor_FrontTermH2028 = (pow((1 + [self ReturnVUSmartInstMedian:@"A"]), ((12 - BackTerm_2028) / 12.00))   - 1) / (pow(1 + [self ReturnVUSmartInstMedian:@"A"], (1.00/ 12.00))  - 1);
				Value4 = VUSmartValue_EverCash60 * GMIFactor_BackTermH2028 + PrevVUSmartValue_EverCash60 * GMIFactor_FrontTermH2028 * pow((1 + [self ReturnVUSmartInstMedian:@"A"]), (BackTerm_2028 / 12.00));
				temp = temp + Value4;
			}
			else{
				
			}
		}
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUSmartInstMedian:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUSmartFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
		
		
	}
	else if (aaPolicyYear == FundTerm2030) {
		NSDateFormatter* df = [[NSDateFormatter alloc] init];
		[df setDateFormat:@"dd/MM/yyyy"];
		NSDate* d = [df dateFromString:getPlanCommDate];
		NSDate* d2 = [df dateFromString:@"26/12/2030"];
		
		NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
		[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
		[formatter setMaximumFractionDigits:2];
		[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
		
		RemainingTerm_2030 = 0.00;
		BackTerm_2030 = 0.00;
		Value3 = 0.00;
		RemainingTerm_2030 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
		BackTerm_2030 = 12 - [self roundUp:((RemainingTerm_2030 - round(ceil(RemainingTerm_2030)) + 1) * 12) ];
		Value3 = ReinvestAmount2030toSmart_M * pow((1 + [self ReturnVUSmartInstMedian:@"A"]), BackTerm_2030/12.00) ;
		temp = Value1 + Value3;
		
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear == 60) {
				temp = temp + Value2;
			}
			else if (Age + aaPolicyYear > 60){
				GMIFactor_BackTermH2030 = (pow((1 + [self ReturnVUSmartInstMedian:@"A"]), (BackTerm_2030 / 12.00)) - 1) / ( pow((1 + [self ReturnVUSmartInstMedian:@"A"]), (1.00/ 12.00))   - 1);
				GMIFactor_FrontTermH2030 = (pow((1 + [self ReturnVUSmartInstMedian:@"A"]), ((12 - BackTerm_2030) / 12.00))   - 1) / (pow(1 + [self ReturnVUSmartInstMedian:@"A"], (1.00/ 12.00))  - 1);
				Value4 = VUSmartValue_EverCash60 * GMIFactor_BackTermH2030 + PrevVUSmartValue_EverCash60 * GMIFactor_FrontTermH2030 * pow((1 + [self ReturnVUSmartInstMedian:@"A"]), (BackTerm_2030 / 12.00));
				temp = temp + Value4;
			}
			else{
				
			}
		}
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUSmartInstMedian:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUSmartFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
		
		
	}
	else if (aaPolicyYear == FundTerm2035) {
		NSDateFormatter* df = [[NSDateFormatter alloc] init];
		[df setDateFormat:@"dd/MM/yyyy"];
		NSDate* d = [df dateFromString:getPlanCommDate];
		NSDate* d2 = [df dateFromString:@"26/12/2035"];
		
		NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
		[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
		[formatter setMaximumFractionDigits:2];
		[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
		
		RemainingTerm_2035 = 0.00;
		BackTerm_2035 = 0.00;
		Value3 = 0.00;
		RemainingTerm_2035 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
		BackTerm_2035 = 12 - [self roundUp:((RemainingTerm_2035 - round(ceil(RemainingTerm_2035)) + 1) * 12) ];
		Value3 = ReinvestAmount2035toSmart_M * pow((1 + [self ReturnVUSmartInstMedian:@"A"]), BackTerm_2035/12.00) ;
		temp = Value1 + Value3;
		
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear == 60) {
				temp = temp + Value2;
			}
			else if (Age + aaPolicyYear > 60){
				GMIFactor_BackTermH2035 = (pow((1 + [self ReturnVUSmartInstMedian:@"A"]), (BackTerm_2035 / 12.00)) - 1) / ( pow((1 + [self ReturnVUSmartInstMedian:@"A"]), (1.00/ 12.00))   - 1);
				GMIFactor_FrontTermH2035 = (pow((1 + [self ReturnVUSmartInstMedian:@"A"]), ((12 - BackTerm_2035) / 12.00))   - 1) / (pow(1 + [self ReturnVUSmartInstMedian:@"A"], (1.00/ 12.00))  - 1);
				Value4 = VUSmartValue_EverCash60 * GMIFactor_BackTermH2035 + PrevVUSmartValue_EverCash60 * GMIFactor_FrontTermH2035 * pow((1 + [self ReturnVUSmartInstMedian:@"A"]), (BackTerm_2035 / 12.00));
				temp = temp + Value4;
			}
			else{
				
			}
		}
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUSmartInstMedian:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUSmartFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
		
		
	}
	else{
		if (Age + aaPolicyYear < 60) {
			temp = Value1;
		}
		else if (Age + aaPolicyYear == 60){
			temp = Value1 + Value2;
		}
		else{
			temp = Value1 + Value2 * 12 * (1 + [self ReturnVUSmartInstMedian:@"M"])/(pow((1 + [self ReturnVUSmartInstMedian:@"A"]), (1.00/12.00)));
		}
        
        //if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = [self ReturnVUSmartFac:aaPolicyYear] * 100;
            double tempInst = [self ReturnVUSmartInstMedian:@""];
            
            temp = temp + [self PaidUpOptionTable_RTUO:FALSE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:tempInst PolYear:aaPolicyYear andMonth:0];
        //}
	}
    
	return temp + VUSmartValue_EverCash1 + VUSmartValue_EverCash6;
	
}

-(double)PaidUpOptionTable_Smart_Low:(double)aaValue andPolicyYear :(int)aaPolicyYear {
	
	double RemainingTerm_2023 = 0.00;
	double RemainingTerm_2025 = 0.00;
	double RemainingTerm_2028 = 0.00;
	double RemainingTerm_2030 = 0.00;
	double RemainingTerm_2035 = 0.00;
	double BackTerm_2023 = 0.00;
	double BackTerm_2025 = 0.00;
	double BackTerm_2028 = 0.00;
	double BackTerm_2030 = 0.00;
	double BackTerm_2035 = 0.00;
	double GMIFactor_BackTermH2023 = 0.00;
	double GMIFactor_BackTermH2025 = 0.00;
	double GMIFactor_BackTermH2028 = 0.00;
	double GMIFactor_BackTermH2030 = 0.00;
	double GMIFactor_BackTermH2035 = 0.00;
	
	double GMIFactor_FrontTermH2023 = 0.00;
	double GMIFactor_FrontTermH2025 = 0.00;
	double GMIFactor_FrontTermH2028 = 0.00;
	double GMIFactor_FrontTermH2030 = 0.00;
	double GMIFactor_FrontTermH2035 = 0.00;
	
	
	double temp = 0.00;
	double Value1 = aaValue * (1 + [self ReturnVUSmartInstLow:@"A"]) * (1 + [self ReturnLoyaltyBonus:aaPolicyYear]/100.00);
	double Value2 = VUSmartValue_EverCash60;
	double Value3 = 0.00;
	double Value4 = 0.00;
	
	if (aaPolicyYear == FundTerm2023) {
		NSDateFormatter* df = [[NSDateFormatter alloc] init];
		[df setDateFormat:@"dd/MM/yyyy"];
		NSDate* d = [df dateFromString:getPlanCommDate];
		NSDate* d2 = [df dateFromString:@"26/12/2023"];
		
		NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
		[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
		[formatter setMaximumFractionDigits:2];
		[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
		
		
		RemainingTerm_2023 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
		BackTerm_2023 = 12 - [self roundUp:((RemainingTerm_2023 - round(ceil(RemainingTerm_2023)) + 1) * 12) ];
		Value3 = 0 * pow((1 + [self ReturnVUSmartInstLow:@"A"]), BackTerm_2023/12.00) ;
		temp = Value1 + Value3;
		
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear == 60) {
				temp = temp + Value2;
			}
			else if (Age + aaPolicyYear > 60){
				GMIFactor_BackTermH2023 = (pow((1 + [self ReturnVUSmartInstLow:@"A"]), (BackTerm_2023 / 12.00)) - 1) / ( pow((1 + [self ReturnVUSmartInstLow:@"A"]), (1.00/ 12.00))   - 1);
				GMIFactor_FrontTermH2023 = (pow((1 + [self ReturnVUSmartInstLow:@"A"]), ((12 - BackTerm_2023) / 12.00))   - 1) / (pow(1 + [self ReturnVUSmartInstLow:@"A"], (1.00/ 12.00))  - 1);
				Value4 = VUSmartValue_EverCash60 * GMIFactor_BackTermH2023 + PrevVUSmartValue_EverCash60 * GMIFactor_FrontTermH2023 * pow((1 + [self ReturnVUSmartInstLow:@"A"]), (BackTerm_2023 / 12.00));
				temp = temp + Value4;
			}
			else{
				
			}
		}
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUSmartInstLow:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUSmartFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
		
		
	}
	else if (aaPolicyYear == FundTerm2025) {
		NSDateFormatter* df = [[NSDateFormatter alloc] init];
		[df setDateFormat:@"dd/MM/yyyy"];
		NSDate* d = [df dateFromString:getPlanCommDate];
		NSDate* d2 = [df dateFromString:@"26/12/2025"];
		
		NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
		[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
		[formatter setMaximumFractionDigits:2];
		[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
		
		RemainingTerm_2025 = 0.00;
		BackTerm_2025 = 0.00;
		Value3 = 0.00;
		RemainingTerm_2025 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
		BackTerm_2025 = 12 - [self roundUp:((RemainingTerm_2025 - round(ceil(RemainingTerm_2025)) + 1) * 12) ];
		Value3 = ReinvestAmount2025toSmart_L * pow((1 + [self ReturnVUSmartInstLow:@"A"]), BackTerm_2025/12.00) ;
		temp = Value1 + Value3;
		
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear == 60) {
				temp = temp + Value2;
			}
			else if (Age + aaPolicyYear > 60){
				GMIFactor_BackTermH2025 = (pow((1 + [self ReturnVUSmartInstLow:@"A"]), (BackTerm_2025 / 12.00)) - 1) / ( pow((1 + [self ReturnVUSmartInstLow:@"A"]), (1.00/ 12.00))   - 1);
				GMIFactor_FrontTermH2025 = (pow((1 + [self ReturnVUSmartInstLow:@"A"]), ((12 - BackTerm_2025) / 12.00))   - 1) / (pow(1 + [self ReturnVUSmartInstLow:@"A"], (1.00/ 12.00))  - 1);
				Value4 = VUSmartValue_EverCash60 * GMIFactor_BackTermH2025 + PrevVUSmartValue_EverCash60 * GMIFactor_FrontTermH2025 * pow((1 + [self ReturnVUSmartInstLow:@"A"]), (BackTerm_2025 / 12.00));
				temp = temp + Value4;
			}
			else{
				
			}
		}
		
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUSmartInstLow:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUSmartFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
		
	}
	else if (aaPolicyYear == FundTerm2028) {
		NSDateFormatter* df = [[NSDateFormatter alloc] init];
		[df setDateFormat:@"dd/MM/yyyy"];
		NSDate* d = [df dateFromString:getPlanCommDate];
		NSDate* d2 = [df dateFromString:@"26/12/2028"];
		
		NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
		[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
		[formatter setMaximumFractionDigits:2];
		[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
		
		RemainingTerm_2028 = 0.00;
		BackTerm_2028 = 0.00;
		Value3 = 0.00;
		RemainingTerm_2028 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
		BackTerm_2028 = 12 - [self roundUp:((RemainingTerm_2028 - round(ceil(RemainingTerm_2028)) + 1) * 12) ];
		Value3 = ReinvestAmount2028toSmart_L * pow((1 + [self ReturnVUSmartInstLow:@"A"]), BackTerm_2028/12.00) ;
		temp = Value1 + Value3;
		
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear == 60) {
				temp = temp + Value2;
			}
			else if (Age + aaPolicyYear > 60){
				GMIFactor_BackTermH2028 = (pow((1 + [self ReturnVUSmartInstLow:@"A"]), (BackTerm_2028 / 12.00)) - 1) / ( pow((1 + [self ReturnVUSmartInstLow:@"A"]), (1.00/ 12.00))   - 1);
				GMIFactor_FrontTermH2028 = (pow((1 + [self ReturnVUSmartInstLow:@"A"]), ((12 - BackTerm_2028) / 12.00))   - 1) / (pow(1 + [self ReturnVUSmartInstLow:@"A"], (1.00/ 12.00))  - 1);
				Value4 = VUSmartValue_EverCash60 * GMIFactor_BackTermH2028 + PrevVUSmartValue_EverCash60 * GMIFactor_FrontTermH2028 * pow((1 + [self ReturnVUSmartInstLow:@"A"]), (BackTerm_2028 / 12.00));
				temp = temp + Value4;
			}
			else{
				
			}
		}
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUSmartInstLow:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUSmartFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
		
		
	}
	else if (aaPolicyYear == FundTerm2030) {
		NSDateFormatter* df = [[NSDateFormatter alloc] init];
		[df setDateFormat:@"dd/MM/yyyy"];
		NSDate* d = [df dateFromString:getPlanCommDate];
		NSDate* d2 = [df dateFromString:@"26/12/2030"];
		
		NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
		[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
		[formatter setMaximumFractionDigits:2];
		[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
		
		RemainingTerm_2030 = 0.00;
		BackTerm_2030 = 0.00;
		Value3 = 0.00;
		RemainingTerm_2030 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
		BackTerm_2030 = 12 - [self roundUp:((RemainingTerm_2030 - round(ceil(RemainingTerm_2030)) + 1) * 12) ];
		Value3 = ReinvestAmount2030toSmart_L * pow((1 + [self ReturnVUSmartInstLow:@"A"]), BackTerm_2030/12.00) ;
		temp = Value1 + Value3;
		
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear == 60) {
				temp = temp + Value2;
			}
			else if (Age + aaPolicyYear > 60){
				GMIFactor_BackTermH2030 = (pow((1 + [self ReturnVUSmartInstLow:@"A"]), (BackTerm_2030 / 12.00)) - 1) / ( pow((1 + [self ReturnVUSmartInstLow:@"A"]), (1.00/ 12.00))   - 1);
				GMIFactor_FrontTermH2030 = (pow((1 + [self ReturnVUSmartInstLow:@"A"]), ((12 - BackTerm_2030) / 12.00))   - 1) / (pow(1 + [self ReturnVUSmartInstLow:@"A"], (1.00/ 12.00))  - 1);
				Value4 = VUSmartValue_EverCash60 * GMIFactor_BackTermH2030 + PrevVUSmartValue_EverCash60 * GMIFactor_FrontTermH2030 * pow((1 + [self ReturnVUSmartInstLow:@"A"]), (BackTerm_2030 / 12.00));
				temp = temp + Value4;
			}
			else{
				
			}
		}
		
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUSmartInstLow:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUSmartFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
		
	}
	else if (aaPolicyYear == FundTerm2035) {
		NSDateFormatter* df = [[NSDateFormatter alloc] init];
		[df setDateFormat:@"dd/MM/yyyy"];
		NSDate* d = [df dateFromString:getPlanCommDate];
		NSDate* d2 = [df dateFromString:@"26/12/2035"];
		
		NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
		[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
		[formatter setMaximumFractionDigits:2];
		[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
		
		RemainingTerm_2035 = 0.00;
		BackTerm_2035 = 0.00;
		Value3 = 0.00;
		RemainingTerm_2035 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
		BackTerm_2035 = 12 - [self roundUp:((RemainingTerm_2035 - round(ceil(RemainingTerm_2035)) + 1) * 12) ];
		Value3 = ReinvestAmount2035toSmart_L * pow((1 + [self ReturnVUSmartInstLow:@"A"]), BackTerm_2035/12.00) ;
		temp = Value1 + Value3;
		
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear == 60) {
				temp = temp + Value2;
			}
			else if (Age + aaPolicyYear > 60){
				GMIFactor_BackTermH2035 = (pow((1 + [self ReturnVUSmartInstLow:@"A"]), (BackTerm_2035 / 12.00)) - 1) / ( pow((1 + [self ReturnVUSmartInstLow:@"A"]), (1.00/ 12.00))   - 1);
				GMIFactor_FrontTermH2035 = (pow((1 + [self ReturnVUSmartInstLow:@"A"]), ((12 - BackTerm_2035) / 12.00))   - 1) / (pow(1 + [self ReturnVUSmartInstLow:@"A"], (1.00/ 12.00))  - 1);
				Value4 = VUSmartValue_EverCash60 * GMIFactor_BackTermH2035 + PrevVUSmartValue_EverCash60 * GMIFactor_FrontTermH2035 * pow((1 + [self ReturnVUSmartInstLow:@"A"]), (BackTerm_2035 / 12.00));
				temp = temp + Value4;
			}
			else{
				
			}
		}
		
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUSmartInstLow:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUSmartFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
		
	}
	else{
		if (Age + aaPolicyYear < 60) {
			temp = Value1;
		}
		else if (Age + aaPolicyYear == 60){
			temp = Value1 + Value2;
		}
		else{
			temp = Value1 + Value2 * 12 * (1 + [self ReturnVUSmartInstLow:@"M"])/(pow((1 + [self ReturnVUSmartInstLow:@"A"]), (1.00/12.00)));
		}
        
        //if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = [self ReturnVUSmartFac:aaPolicyYear] * 100;
            double tempInst = [self ReturnVUSmartInstLow:@""];
            
            temp = temp + [self PaidUpOptionTable_RTUO:FALSE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:tempInst PolYear:aaPolicyYear andMonth:0];
        //}
        
	}
	
	return temp + VUSmartValue_EverCash1 + VUSmartValue_EverCash6;
	
}

-(double)PaidUpOptionTable_Venture_High:(double)aaValue andPolicyYear :(int)aaPolicyYear {
	
	double RemainingTerm_2023 = 0.00;
	double RemainingTerm_2025 = 0.00;
	double RemainingTerm_2028 = 0.00;
	double RemainingTerm_2030 = 0.00;
	double RemainingTerm_2035 = 0.00;
	double BackTerm_2023 = 0.00;
	double BackTerm_2025 = 0.00;
	double BackTerm_2028 = 0.00;
	double BackTerm_2030 = 0.00;
	double BackTerm_2035 = 0.00;
	double GMIFactor_BackTermH2023 = 0.00;
	double GMIFactor_BackTermH2025 = 0.00;
	double GMIFactor_BackTermH2028 = 0.00;
	double GMIFactor_BackTermH2030 = 0.00;
	double GMIFactor_BackTermH2035 = 0.00;
	
	double GMIFactor_FrontTermH2023 = 0.00;
	double GMIFactor_FrontTermH2025 = 0.00;
	double GMIFactor_FrontTermH2028 = 0.00;
	double GMIFactor_FrontTermH2030 = 0.00;
	double GMIFactor_FrontTermH2035 = 0.00;
	
	
	double temp = 0.00;
	double Value1 = aaValue * (1 + [self ReturnVUVentureInstHigh:aaPolicyYear andMOP:@"A"]) * (1 + [self ReturnLoyaltyBonus:aaPolicyYear]/100.00);
	double Value2 = VUVentureValue_EverCash60;
	double Value3 = 0.00;
	double Value4 = 0.00;
	
	if (aaPolicyYear == FundTerm2023) {
		NSDateFormatter* df = [[NSDateFormatter alloc] init];
		[df setDateFormat:@"dd/MM/yyyy"];
		NSDate* d = [df dateFromString:getPlanCommDate];
		NSDate* d2 = [df dateFromString:@"26/12/2023"];
		
		NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
		[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
		[formatter setMaximumFractionDigits:2];
		[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
		
		
		RemainingTerm_2023 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
		BackTerm_2023 = 12 - [self roundUp:((RemainingTerm_2023 - round(ceil(RemainingTerm_2023)) + 1) * 12) ];
		Value3 = 0 * pow((1 + [self ReturnVUVentureInstHigh:aaPolicyYear andMOP:@"A"]), BackTerm_2023/12.00) ;
		temp = Value1 + Value3;
		
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear == 60) {
				temp = temp + Value2;
			}
			else if (Age + aaPolicyYear > 60){
				GMIFactor_BackTermH2023 = (pow((1 + [self ReturnVUVentureInstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2023 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVentureInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/ 12.00))   - 1);
				GMIFactor_FrontTermH2023 = (pow((1 + [self ReturnVUVentureInstHigh:aaPolicyYear andMOP:@"A"]), ((12 - BackTerm_2023) / 12.00))   - 1) / (pow(1 + [self ReturnVUVentureInstHigh:aaPolicyYear andMOP:@"A"], (1.00/ 12.00))  - 1);
				Value4 = VUVentureValue_EverCash60 * GMIFactor_BackTermH2023 + PrevVUVentureValue_EverCash60 * GMIFactor_FrontTermH2023 * pow((1 + [self ReturnVUVentureInstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2023 / 12.00));
				temp = temp + Value4;
			}
			else{
				
			}
		}
		
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVentureInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVentureFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
		
	}
	else if (aaPolicyYear == FundTerm2025) {
		NSDateFormatter* df = [[NSDateFormatter alloc] init];
		[df setDateFormat:@"dd/MM/yyyy"];
		NSDate* d = [df dateFromString:getPlanCommDate];
		NSDate* d2 = [df dateFromString:@"26/12/2025"];
		
		NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
		[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
		[formatter setMaximumFractionDigits:2];
		[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
		
		RemainingTerm_2025 = 0.00;
		BackTerm_2025 = 0.00;
		Value3 = 0.00;
		RemainingTerm_2025 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
		BackTerm_2025 = 12 - [self roundUp:((RemainingTerm_2025 - round(ceil(RemainingTerm_2025)) + 1) * 12) ];
		Value3 = ReinvestAmount2025toVenture_H * pow((1 + [self ReturnVUVentureInstHigh:aaPolicyYear andMOP:@"A"]), BackTerm_2025/12.00) ;
		temp = Value1 + Value3;
		
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear == 60) {
				temp = temp + Value2;
			}
			else if (Age + aaPolicyYear > 60){
				GMIFactor_BackTermH2025 = (pow((1 + [self ReturnVUVentureInstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2025 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVentureInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/ 12.00))   - 1);
				GMIFactor_FrontTermH2025 = (pow((1 + [self ReturnVUVentureInstHigh:aaPolicyYear andMOP:@"A"]), ((12 - BackTerm_2025) / 12.00))   - 1) / (pow(1 + [self ReturnVUVentureInstHigh:aaPolicyYear andMOP:@"A"], (1.00/ 12.00))  - 1);
				Value4 = VUVentureValue_EverCash60 * GMIFactor_BackTermH2025 + PrevVUVentureValue_EverCash60 * GMIFactor_FrontTermH2025 * pow((1 + [self ReturnVUVentureInstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2025 / 12.00));
				temp = temp + Value4;
			}
			else{
				
			}
		}
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVentureInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVentureFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
		
		
	}
	else if (aaPolicyYear == FundTerm2028) {
		NSDateFormatter* df = [[NSDateFormatter alloc] init];
		[df setDateFormat:@"dd/MM/yyyy"];
		NSDate* d = [df dateFromString:getPlanCommDate];
		NSDate* d2 = [df dateFromString:@"26/12/2028"];
		
		NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
		[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
		[formatter setMaximumFractionDigits:2];
		[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
		
		RemainingTerm_2028 = 0.00;
		BackTerm_2028 = 0.00;
		Value3 = 0.00;
		RemainingTerm_2028 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
		BackTerm_2028 = 12 - [self roundUp:((RemainingTerm_2028 - round(ceil(RemainingTerm_2028)) + 1) * 12) ];
		Value3 = ReinvestAmount2028toVenture_H * pow((1 + [self ReturnVUVentureInstHigh:aaPolicyYear andMOP:@"A"]), BackTerm_2028/12.00) ;
		temp = Value1 + Value3;
		
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear == 60) {
				temp = temp + Value2;
			}
			else if (Age + aaPolicyYear > 60){
				GMIFactor_BackTermH2028 = (pow((1 + [self ReturnVUVentureInstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2028 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVentureInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/ 12.00))   - 1);
				GMIFactor_FrontTermH2028 = (pow((1 + [self ReturnVUVentureInstHigh:aaPolicyYear andMOP:@"A"]), ((12 - BackTerm_2028) / 12.00))   - 1) / (pow(1 + [self ReturnVUVentureInstHigh:aaPolicyYear andMOP:@"A"], (1.00/ 12.00))  - 1);
				Value4 = VUVentureValue_EverCash60 * GMIFactor_BackTermH2028 + PrevVUVentureValue_EverCash60 * GMIFactor_FrontTermH2028 * pow((1 + [self ReturnVUVentureInstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2028 / 12.00));
				temp = temp + Value4;
			}
			else{
				
			}
		}
		
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVentureInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVentureFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
	}
	else if (aaPolicyYear == FundTerm2030) {
		NSDateFormatter* df = [[NSDateFormatter alloc] init];
		[df setDateFormat:@"dd/MM/yyyy"];
		NSDate* d = [df dateFromString:getPlanCommDate];
		NSDate* d2 = [df dateFromString:@"26/12/2030"];
		
		NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
		[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
		[formatter setMaximumFractionDigits:2];
		[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
		
		RemainingTerm_2030 = 0.00;
		BackTerm_2030 = 0.00;
		Value3 = 0.00;
		RemainingTerm_2030 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
		BackTerm_2030 = 12 - [self roundUp:((RemainingTerm_2030 - round(ceil(RemainingTerm_2030)) + 1) * 12) ];
		Value3 = ReinvestAmount2030toVenture_H * pow((1 + [self ReturnVUVentureInstHigh:aaPolicyYear andMOP:@"A"]), BackTerm_2030/12.00) ;
		temp = Value1 + Value3;
		
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear == 60) {
				temp = temp + Value2;
			}
			else if (Age + aaPolicyYear > 60){
				GMIFactor_BackTermH2030 = (pow((1 + [self ReturnVUVentureInstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2030 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVentureInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/ 12.00))   - 1);
				GMIFactor_FrontTermH2030 = (pow((1 + [self ReturnVUVentureInstHigh:aaPolicyYear andMOP:@"A"]), ((12 - BackTerm_2030) / 12.00))   - 1) / (pow(1 + [self ReturnVUVentureInstHigh:aaPolicyYear andMOP:@"A"], (1.00/ 12.00))  - 1);
				Value4 = VUVentureValue_EverCash60 * GMIFactor_BackTermH2030 + PrevVUVentureValue_EverCash60 * GMIFactor_FrontTermH2030 * pow((1 + [self ReturnVUVentureInstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2030 / 12.00));
				temp = temp + Value4;
			}
			else{
				
			}
		}
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVentureInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVentureFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
		
		
	}
	else if (aaPolicyYear == FundTerm2035) {
		NSDateFormatter* df = [[NSDateFormatter alloc] init];
		[df setDateFormat:@"dd/MM/yyyy"];
		NSDate* d = [df dateFromString:getPlanCommDate];
		NSDate* d2 = [df dateFromString:@"26/12/2035"];
		
		NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
		[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
		[formatter setMaximumFractionDigits:2];
		[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
		
		RemainingTerm_2035 = 0.00;
		BackTerm_2035 = 0.00;
		Value3 = 0.00;
		RemainingTerm_2035 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
		BackTerm_2035 = 12 - [self roundUp:((RemainingTerm_2035 - round(ceil(RemainingTerm_2035)) + 1) * 12) ];
		Value3 = ReinvestAmount2035toVenture_H * pow((1 + [self ReturnVUVentureInstHigh:aaPolicyYear andMOP:@"A"]), BackTerm_2035/12.00) ;
		temp = Value1 + Value3;
		
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear == 60) {
				temp = temp + Value2;
			}
			else if (Age + aaPolicyYear > 60){
				GMIFactor_BackTermH2035 = (pow((1 + [self ReturnVUVentureInstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2035 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVentureInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/ 12.00))   - 1);
				GMIFactor_FrontTermH2035 = (pow((1 + [self ReturnVUVentureInstHigh:aaPolicyYear andMOP:@"A"]), ((12 - BackTerm_2035) / 12.00))   - 1) / (pow(1 + [self ReturnVUVentureInstHigh:aaPolicyYear andMOP:@"A"], (1.00/ 12.00))  - 1);
				Value4 = VUVentureValue_EverCash60 * GMIFactor_BackTermH2035 + PrevVUVentureValue_EverCash60 * GMIFactor_FrontTermH2035 * pow((1 + [self ReturnVUVentureInstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2035 / 12.00));
				temp = temp + Value4;
			}
			else{
				
			}
		}
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVentureInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVentureFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
		
		
	}
	else{
		if (Age + aaPolicyYear < 60) {
			temp = Value1;
		}
		else if (Age + aaPolicyYear == 60){
			temp = Value1 + Value2;
		}
		else{
			temp = Value1 + Value2 * 12 * (1 + [self ReturnVUVentureInstHigh:aaPolicyYear andMOP:@"M"])/(pow((1 + [self ReturnVUVentureInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00)));
		}
        
        //if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = [self ReturnVUVentureFac:aaPolicyYear] * 100;
            double tempInst = [self ReturnVUVentureInstHigh:aaPolicyYear andMOP:@""];
            
            temp = temp + [self PaidUpOptionTable_RTUO:FALSE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:tempInst PolYear:aaPolicyYear andMonth:0];
        //}
	}
    
	
	return temp + VUVentureValue_EverCash1 + VUVentureValue_EverCash6;
	
}

-(double)PaidUpOptionTable_Venture_Median:(double)aaValue andPolicyYear :(int)aaPolicyYear {
	
	double RemainingTerm_2023 = 0.00;
	double RemainingTerm_2025 = 0.00;
	double RemainingTerm_2028 = 0.00;
	double RemainingTerm_2030 = 0.00;
	double RemainingTerm_2035 = 0.00;
	double BackTerm_2023 = 0.00;
	double BackTerm_2025 = 0.00;
	double BackTerm_2028 = 0.00;
	double BackTerm_2030 = 0.00;
	double BackTerm_2035 = 0.00;
	double GMIFactor_BackTermH2023 = 0.00;
	double GMIFactor_BackTermH2025 = 0.00;
	double GMIFactor_BackTermH2028 = 0.00;
	double GMIFactor_BackTermH2030 = 0.00;
	double GMIFactor_BackTermH2035 = 0.00;
	
	double GMIFactor_FrontTermH2023 = 0.00;
	double GMIFactor_FrontTermH2025 = 0.00;
	double GMIFactor_FrontTermH2028 = 0.00;
	double GMIFactor_FrontTermH2030 = 0.00;
	double GMIFactor_FrontTermH2035 = 0.00;
	
	
	double temp = 0.00;
	double Value1 = aaValue * (1 + [self ReturnVUVentureInstMedian:@"A"]) * (1 + [self ReturnLoyaltyBonus:aaPolicyYear]/100.00);
	double Value2 = VUVentureValue_EverCash60;
	double Value3 = 0.00;
	double Value4 = 0.00;
	
	if (aaPolicyYear == FundTerm2023) {
		NSDateFormatter* df = [[NSDateFormatter alloc] init];
		[df setDateFormat:@"dd/MM/yyyy"];
		NSDate* d = [df dateFromString:getPlanCommDate];
		NSDate* d2 = [df dateFromString:@"26/12/2023"];
		
		NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
		[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
		[formatter setMaximumFractionDigits:2];
		[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
		
		
		RemainingTerm_2023 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
		BackTerm_2023 = 12 - [self roundUp:((RemainingTerm_2023 - round(ceil(RemainingTerm_2023)) + 1) * 12) ];
		Value3 = 0 * pow((1 + [self ReturnVUVentureInstMedian:@"A"]), BackTerm_2023/12.00) ;
		temp = Value1 + Value3;
		
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear == 60) {
				temp = temp + Value2;
			}
			else if (Age + aaPolicyYear > 60){
				GMIFactor_BackTermH2023 = (pow((1 + [self ReturnVUVentureInstMedian:@"A"]), (BackTerm_2023 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVentureInstMedian:@"A"]), (1.00/ 12.00))   - 1);
				GMIFactor_FrontTermH2023 = (pow((1 + [self ReturnVUVentureInstMedian:@"A"]), ((12 - BackTerm_2023) / 12.00))   - 1) / (pow(1 + [self ReturnVUVentureInstMedian:@"A"], (1.00/ 12.00))  - 1);
				Value4 = VUVentureValue_EverCash60 * GMIFactor_BackTermH2023 + PrevVUVentureValue_EverCash60 * GMIFactor_FrontTermH2023 * pow((1 + [self ReturnVUVentureInstMedian:@"A"]), (BackTerm_2023 / 12.00));
				temp = temp + Value4;
			}
			else{
				
			}
		}
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVentureInstMedian:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVentureFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
		
		
	}
	else if (aaPolicyYear == FundTerm2025) {
		NSDateFormatter* df = [[NSDateFormatter alloc] init];
		[df setDateFormat:@"dd/MM/yyyy"];
		NSDate* d = [df dateFromString:getPlanCommDate];
		NSDate* d2 = [df dateFromString:@"26/12/2025"];
		
		NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
		[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
		[formatter setMaximumFractionDigits:2];
		[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
		
		RemainingTerm_2025 = 0.00;
		BackTerm_2025 = 0.00;
		Value3 = 0.00;
		RemainingTerm_2025 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
		BackTerm_2025 = 12 - [self roundUp:((RemainingTerm_2025 - round(ceil(RemainingTerm_2025)) + 1) * 12) ];
		Value3 = ReinvestAmount2025toVenture_M * pow((1 + [self ReturnVUVentureInstMedian:@"A"]), BackTerm_2025/12.00) ;
		temp = Value1 + Value3;
		
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear == 60) {
				temp = temp + Value2;
			}
			else if (Age + aaPolicyYear > 60){
				GMIFactor_BackTermH2025 = (pow((1 + [self ReturnVUVentureInstMedian:@"A"]), (BackTerm_2025 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVentureInstMedian:@"A"]), (1.00/ 12.00))   - 1);
				GMIFactor_FrontTermH2025 = (pow((1 + [self ReturnVUVentureInstMedian:@"A"]), ((12 - BackTerm_2025) / 12.00))   - 1) / (pow(1 + [self ReturnVUVentureInstMedian:@"A"], (1.00/ 12.00))  - 1);
				Value4 = VUVentureValue_EverCash60 * GMIFactor_BackTermH2025 + PrevVUVentureValue_EverCash60 * GMIFactor_FrontTermH2025 * pow((1 + [self ReturnVUVentureInstMedian:@"A"]), (BackTerm_2025 / 12.00));
				temp = temp + Value4;
			}
			else{
				
			}
		}
		
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVentureInstMedian:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVentureFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
		
	}
	else if (aaPolicyYear == FundTerm2028) {
		NSDateFormatter* df = [[NSDateFormatter alloc] init];
		[df setDateFormat:@"dd/MM/yyyy"];
		NSDate* d = [df dateFromString:getPlanCommDate];
		NSDate* d2 = [df dateFromString:@"26/12/2028"];
		
		NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
		[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
		[formatter setMaximumFractionDigits:2];
		[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
		
		RemainingTerm_2028 = 0.00;
		BackTerm_2028 = 0.00;
		Value3 = 0.00;
		RemainingTerm_2028 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
		BackTerm_2028 = 12 - [self roundUp:((RemainingTerm_2028 - round(ceil(RemainingTerm_2028)) + 1) * 12) ];
		Value3 = ReinvestAmount2028toVenture_M * pow((1 + [self ReturnVUVentureInstMedian:@"A"]), BackTerm_2028/12.00) ;
		temp = Value1 + Value3;
		
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear == 60) {
				temp = temp + Value2;
			}
			else if (Age + aaPolicyYear > 60){
				GMIFactor_BackTermH2028 = (pow((1 + [self ReturnVUVentureInstMedian:@"A"]), (BackTerm_2028 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVentureInstMedian:@"A"]), (1.00/ 12.00))   - 1);
				GMIFactor_FrontTermH2028 = (pow((1 + [self ReturnVUVentureInstMedian:@"A"]), ((12 - BackTerm_2028) / 12.00))   - 1) / (pow(1 + [self ReturnVUVentureInstMedian:@"A"], (1.00/ 12.00))  - 1);
				Value4 = VUVentureValue_EverCash60 * GMIFactor_BackTermH2028 + PrevVUVentureValue_EverCash60 * GMIFactor_FrontTermH2028 * pow((1 + [self ReturnVUVentureInstMedian:@"A"]), (BackTerm_2028 / 12.00));
				temp = temp + Value4;
			}
			else{
				
			}
		}
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVentureInstMedian:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVentureFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
		
		
	}
	else if (aaPolicyYear == FundTerm2030) {
		NSDateFormatter* df = [[NSDateFormatter alloc] init];
		[df setDateFormat:@"dd/MM/yyyy"];
		NSDate* d = [df dateFromString:getPlanCommDate];
		NSDate* d2 = [df dateFromString:@"26/12/2030"];
		
		NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
		[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
		[formatter setMaximumFractionDigits:2];
		[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
		
		RemainingTerm_2030 = 0.00;
		BackTerm_2030 = 0.00;
		Value3 = 0.00;
		RemainingTerm_2030 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
		BackTerm_2030 = 12 - [self roundUp:((RemainingTerm_2030 - round(ceil(RemainingTerm_2030)) + 1) * 12) ];
		Value3 = ReinvestAmount2030toVenture_M * pow((1 + [self ReturnVUVentureInstMedian:@"A"]), BackTerm_2030/12.00) ;
		temp = Value1 + Value3;
		
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear == 60) {
				temp = temp + Value2;
			}
			else if (Age + aaPolicyYear > 60){
				GMIFactor_BackTermH2030 = (pow((1 + [self ReturnVUVentureInstMedian:@"A"]), (BackTerm_2030 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVentureInstMedian:@"A"]), (1.00/ 12.00))   - 1);
				GMIFactor_FrontTermH2030 = (pow((1 + [self ReturnVUVentureInstMedian:@"A"]), ((12 - BackTerm_2030) / 12.00))   - 1) / (pow(1 + [self ReturnVUVentureInstMedian:@"A"], (1.00/ 12.00))  - 1);
				Value4 = VUVentureValue_EverCash60 * GMIFactor_BackTermH2030 + PrevVUVentureValue_EverCash60 * GMIFactor_FrontTermH2030 * pow((1 + [self ReturnVUVentureInstMedian:@"A"]), (BackTerm_2030 / 12.00));
				temp = temp + Value4;
			}
			else{
				
			}
		}
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVentureInstMedian:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVentureFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
		
		
	}
	else if (aaPolicyYear == FundTerm2035) {
		NSDateFormatter* df = [[NSDateFormatter alloc] init];
		[df setDateFormat:@"dd/MM/yyyy"];
		NSDate* d = [df dateFromString:getPlanCommDate];
		NSDate* d2 = [df dateFromString:@"26/12/2035"];
		
		NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
		[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
		[formatter setMaximumFractionDigits:2];
		[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
		
		RemainingTerm_2035 = 0.00;
		BackTerm_2035 = 0.00;
		Value3 = 0.00;
		RemainingTerm_2035 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
		BackTerm_2035 = 12 - [self roundUp:((RemainingTerm_2035 - round(ceil(RemainingTerm_2035)) + 1) * 12) ];
		Value3 = ReinvestAmount2035toVenture_M * pow((1 + [self ReturnVUVentureInstMedian:@"A"]), BackTerm_2035/12.00) ;
		temp = Value1 + Value3;
		
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear == 60) {
				temp = temp + Value2;
			}
			else if (Age + aaPolicyYear > 60){
				GMIFactor_BackTermH2035 = (pow((1 + [self ReturnVUVentureInstMedian:@"A"]), (BackTerm_2035 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVentureInstMedian:@"A"]), (1.00/ 12.00))   - 1);
				GMIFactor_FrontTermH2035 = (pow((1 + [self ReturnVUVentureInstMedian:@"A"]), ((12 - BackTerm_2035) / 12.00))   - 1) / (pow(1 + [self ReturnVUVentureInstMedian:@"A"], (1.00/ 12.00))  - 1);
				Value4 = VUVentureValue_EverCash60 * GMIFactor_BackTermH2035 + PrevVUVentureValue_EverCash60 * GMIFactor_FrontTermH2035 * pow((1 + [self ReturnVUVentureInstMedian:@"A"]), (BackTerm_2035 / 12.00));
				temp = temp + Value4;
			}
			else{
				
			}
		}
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVentureInstMedian:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVentureFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
		
		
	}
	else{
		if (Age + aaPolicyYear < 60) {
			temp = Value1;
		}
		else if (Age + aaPolicyYear == 60){
			temp = Value1 + Value2;
		}
		else{
			temp = Value1 + Value2 * 12 * (1 + [self ReturnVUVentureInstMedian:@"M"])/(pow((1 + [self ReturnVUVentureInstMedian:@"A"]), (1.00/12.00)));
		}
        
        //if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = [self ReturnVUVentureFac:aaPolicyYear] * 100;
            double tempInst = [self ReturnVUVentureInstMedian:@""];
            
            temp = temp + [self PaidUpOptionTable_RTUO:FALSE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:tempInst PolYear:aaPolicyYear andMonth:0];
        //}
	}
	
	return temp + VUVentureValue_EverCash1 + VUVentureValue_EverCash6;
	
}

-(double)PaidUpOptionTable_Venture_Low:(double)aaValue andPolicyYear :(int)aaPolicyYear {
	
	double RemainingTerm_2023 = 0.00;
	double RemainingTerm_2025 = 0.00;
	double RemainingTerm_2028 = 0.00;
	double RemainingTerm_2030 = 0.00;
	double RemainingTerm_2035 = 0.00;
	double BackTerm_2023 = 0.00;
	double BackTerm_2025 = 0.00;
	double BackTerm_2028 = 0.00;
	double BackTerm_2030 = 0.00;
	double BackTerm_2035 = 0.00;
	double GMIFactor_BackTermH2023 = 0.00;
	double GMIFactor_BackTermH2025 = 0.00;
	double GMIFactor_BackTermH2028 = 0.00;
	double GMIFactor_BackTermH2030 = 0.00;
	double GMIFactor_BackTermH2035 = 0.00;
	
	double GMIFactor_FrontTermH2023 = 0.00;
	double GMIFactor_FrontTermH2025 = 0.00;
	double GMIFactor_FrontTermH2028 = 0.00;
	double GMIFactor_FrontTermH2030 = 0.00;
	double GMIFactor_FrontTermH2035 = 0.00;
	
	
	double temp = 0.00;
	double Value1 = aaValue * (1 + [self ReturnVUVentureInstLow:@"A"]) * (1 + [self ReturnLoyaltyBonus:aaPolicyYear]/100.00);
	double Value2 = VUVentureValue_EverCash60;
	double Value3 = 0.00;
	double Value4 = 0.00;
	
	if (aaPolicyYear == FundTerm2023) {
		NSDateFormatter* df = [[NSDateFormatter alloc] init];
		[df setDateFormat:@"dd/MM/yyyy"];
		NSDate* d = [df dateFromString:getPlanCommDate];
		NSDate* d2 = [df dateFromString:@"26/12/2023"];
		
		NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
		[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
		[formatter setMaximumFractionDigits:2];
		[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
		
		
		RemainingTerm_2023 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
		BackTerm_2023 = 12 - [self roundUp:((RemainingTerm_2023 - round(ceil(RemainingTerm_2023)) + 1) * 12) ];
		Value3 = 0 * pow((1 + [self ReturnVUVentureInstLow:@"A"]), BackTerm_2023/12.00) ;
		temp = Value1 + Value3;
		
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear == 60) {
				temp = temp + Value2;
			}
			else if (Age + aaPolicyYear > 60){
				GMIFactor_BackTermH2023 = (pow((1 + [self ReturnVUVentureInstLow:@"A"]), (BackTerm_2023 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVentureInstLow:@"A"]), (1.00/ 12.00))   - 1);
				GMIFactor_FrontTermH2023 = (pow((1 + [self ReturnVUVentureInstLow:@"A"]), ((12 - BackTerm_2023) / 12.00))   - 1) / (pow(1 + [self ReturnVUVentureInstLow:@"A"], (1.00/ 12.00))  - 1);
				Value4 = VUVentureValue_EverCash60 * GMIFactor_BackTermH2023 + PrevVUVentureValue_EverCash60 * GMIFactor_FrontTermH2023 * pow((1 + [self ReturnVUVentureInstLow:@"A"]), (BackTerm_2023 / 12.00));
				temp = temp + Value4;
			}
			else{
				
			}
		}
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVentureInstLow:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVentureFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i ]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
		
		
	}
	else if (aaPolicyYear == FundTerm2025) {
		NSDateFormatter* df = [[NSDateFormatter alloc] init];
		[df setDateFormat:@"dd/MM/yyyy"];
		NSDate* d = [df dateFromString:getPlanCommDate];
		NSDate* d2 = [df dateFromString:@"26/12/2025"];
		
		NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
		[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
		[formatter setMaximumFractionDigits:2];
		[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
		
		RemainingTerm_2025 = 0.00;
		BackTerm_2025 = 0.00;
		Value3 = 0.00;
		RemainingTerm_2025 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
		BackTerm_2025 = 12 - [self roundUp:((RemainingTerm_2025 - round(ceil(RemainingTerm_2025)) + 1) * 12) ];
		Value3 = ReinvestAmount2025toVenture_L * pow((1 + [self ReturnVUVentureInstLow:@"A"]), BackTerm_2025/12.00) ;
		temp = Value1 + Value3;
		
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear == 60) {
				temp = temp + Value2;
			}
			else if (Age + aaPolicyYear > 60){
				GMIFactor_BackTermH2025 = (pow((1 + [self ReturnVUVentureInstLow:@"A"]), (BackTerm_2025 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVentureInstLow:@"A"]), (1.00/ 12.00))   - 1);
				GMIFactor_FrontTermH2025 = (pow((1 + [self ReturnVUVentureInstLow:@"A"]), ((12 - BackTerm_2025) / 12.00))   - 1) / (pow(1 + [self ReturnVUVentureInstLow:@"A"], (1.00/ 12.00))  - 1);
				Value4 = VUVentureValue_EverCash60 * GMIFactor_BackTermH2025 + PrevVUVentureValue_EverCash60 * GMIFactor_FrontTermH2025 * pow((1 + [self ReturnVUVentureInstLow:@"A"]), (BackTerm_2025 / 12.00));
				temp = temp + Value4;
			}
			else{
				
			}
		}
		
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVentureInstLow:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVentureFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i ]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
		
	}
	else if (aaPolicyYear == FundTerm2028) {
		NSDateFormatter* df = [[NSDateFormatter alloc] init];
		[df setDateFormat:@"dd/MM/yyyy"];
		NSDate* d = [df dateFromString:getPlanCommDate];
		NSDate* d2 = [df dateFromString:@"26/12/2028"];
		
		NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
		[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
		[formatter setMaximumFractionDigits:2];
		[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
		
		RemainingTerm_2028 = 0.00;
		BackTerm_2028 = 0.00;
		Value3 = 0.00;
		RemainingTerm_2028 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
		BackTerm_2028 = 12 - [self roundUp:((RemainingTerm_2028 - round(ceil(RemainingTerm_2028)) + 1) * 12) ];
		Value3 = ReinvestAmount2028toVenture_L * pow((1 + [self ReturnVUVentureInstLow:@"A"]), BackTerm_2028/12.00) ;
		temp = Value1 + Value3;
		
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear == 60) {
				temp = temp + Value2;
			}
			else if (Age + aaPolicyYear > 60){
				GMIFactor_BackTermH2028 = (pow((1 + [self ReturnVUVentureInstLow:@"A"]), (BackTerm_2028 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVentureInstLow:@"A"]), (1.00/ 12.00))   - 1);
				GMIFactor_FrontTermH2028 = (pow((1 + [self ReturnVUVentureInstLow:@"A"]), ((12 - BackTerm_2028) / 12.00))   - 1) / (pow(1 + [self ReturnVUVentureInstLow:@"A"], (1.00/ 12.00))  - 1);
				Value4 = VUVentureValue_EverCash60 * GMIFactor_BackTermH2028 + PrevVUVentureValue_EverCash60 * GMIFactor_FrontTermH2028 * pow((1 + [self ReturnVUVentureInstLow:@"A"]), (BackTerm_2028 / 12.00));
				temp = temp + Value4;
			}
			else{
				
			}
		}
		
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVentureInstLow:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVentureFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
		
	}
	else if (aaPolicyYear == FundTerm2030) {
		NSDateFormatter* df = [[NSDateFormatter alloc] init];
		[df setDateFormat:@"dd/MM/yyyy"];
		NSDate* d = [df dateFromString:getPlanCommDate];
		NSDate* d2 = [df dateFromString:@"26/12/2030"];
		
		NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
		[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
		[formatter setMaximumFractionDigits:2];
		[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
		
		RemainingTerm_2030 = 0.00;
		BackTerm_2030 = 0.00;
		Value3 = 0.00;
		RemainingTerm_2030 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
		BackTerm_2030 = 12 - [self roundUp:((RemainingTerm_2030 - round(ceil(RemainingTerm_2030)) + 1) * 12) ];
		Value3 = ReinvestAmount2030toVenture_L * pow((1 + [self ReturnVUVentureInstLow:@"A"]), BackTerm_2030/12.00) ;
		temp = Value1 + Value3;
		
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear == 60) {
				temp = temp + Value2;
			}
			else if (Age + aaPolicyYear > 60){
				GMIFactor_BackTermH2030 = (pow((1 + [self ReturnVUVentureInstLow:@"A"]), (BackTerm_2030 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVentureInstLow:@"A"]), (1.00/ 12.00))   - 1);
				GMIFactor_FrontTermH2030 = (pow((1 + [self ReturnVUVentureInstLow:@"A"]), ((12 - BackTerm_2030) / 12.00))   - 1) / (pow(1 + [self ReturnVUVentureInstLow:@"A"], (1.00/ 12.00))  - 1);
				Value4 = VUVentureValue_EverCash60 * GMIFactor_BackTermH2030 + PrevVUVentureValue_EverCash60 * GMIFactor_FrontTermH2030 * pow((1 + [self ReturnVUVentureInstLow:@"A"]), (BackTerm_2030 / 12.00));
				temp = temp + Value4;
			}
			else{
				
			}
		}
		
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVentureInstLow:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVentureFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
		
	}
	else if (aaPolicyYear == FundTerm2035) {
		NSDateFormatter* df = [[NSDateFormatter alloc] init];
		[df setDateFormat:@"dd/MM/yyyy"];
		NSDate* d = [df dateFromString:getPlanCommDate];
		NSDate* d2 = [df dateFromString:@"26/12/2035"];
		
		NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
		[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
		[formatter setMaximumFractionDigits:2];
		[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
		
		RemainingTerm_2035 = 0.00;
		BackTerm_2035 = 0.00;
		Value3 = 0.00;
		RemainingTerm_2035 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
		BackTerm_2035 = 12 - [self roundUp:((RemainingTerm_2035 - round(ceil(RemainingTerm_2035)) + 1) * 12) ];
		Value3 = ReinvestAmount2035toVenture_L * pow((1 + [self ReturnVUVentureInstLow:@"A"]), BackTerm_2035/12.00) ;
		temp = Value1 + Value3;
		
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear == 60) {
				temp = temp + Value2;
			}
			else if (Age + aaPolicyYear > 60){
				GMIFactor_BackTermH2035 = (pow((1 + [self ReturnVUVentureInstLow:@"A"]), (BackTerm_2035 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVentureInstLow:@"A"]), (1.00/ 12.00))   - 1);
				GMIFactor_FrontTermH2035 = (pow((1 + [self ReturnVUVentureInstLow:@"A"]), ((12 - BackTerm_2035) / 12.00))   - 1) / (pow(1 + [self ReturnVUVentureInstLow:@"A"], (1.00/ 12.00))  - 1);
				Value4 = VUVentureValue_EverCash60 * GMIFactor_BackTermH2035 + PrevVUVentureValue_EverCash60 * GMIFactor_FrontTermH2035 * pow((1 + [self ReturnVUVentureInstLow:@"A"]), (BackTerm_2035 / 12.00));
				temp = temp + Value4;
			}
			else{
				
			}
		}
		
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVentureInstLow:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVentureFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
		
	}
	else{
		if (Age + aaPolicyYear < 60) {
			temp = Value1;
		}
		else if (Age + aaPolicyYear == 60){
			temp = Value1 + Value2;
		}
		else{
			temp = Value1 + Value2 * 12 * (1 + [self ReturnVUVentureInstLow:@"M"])/(pow((1 + [self ReturnVUVentureInstLow:@"A"]), (1.00/12.00)));
		}
        
        //if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = [self ReturnVUVentureFac:aaPolicyYear] * 100;
            double tempInst = [self ReturnVUVentureInstLow:@""];
            
            temp = temp + [self PaidUpOptionTable_RTUO:FALSE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:tempInst PolYear:aaPolicyYear andMonth:0];
        //}
	}
	
	return temp + VUVentureValue_EverCash1 + VUVentureValue_EverCash6;
	
}



-(double)PaidUpOptionTable_Cash_High:(double)aaValue andPolicyYear :(int)aaPolicyYear {
	
	double RemainingTerm_2023 = 0.00;
	double RemainingTerm_2025 = 0.00;
	double RemainingTerm_2028 = 0.00;
	double RemainingTerm_2030 = 0.00;
	double RemainingTerm_2035 = 0.00;
	double BackTerm_2023 = 0.00;
	double BackTerm_2025 = 0.00;
	double BackTerm_2028 = 0.00;
	double BackTerm_2030 = 0.00;
	double BackTerm_2035 = 0.00;
	double GMIFactor_BackTermH2023 = 0.00;
	double GMIFactor_BackTermH2025 = 0.00;
	double GMIFactor_BackTermH2028 = 0.00;
	double GMIFactor_BackTermH2030 = 0.00;
	double GMIFactor_BackTermH2035 = 0.00;
	
	double GMIFactor_FrontTermH2023 = 0.00;
	double GMIFactor_FrontTermH2025 = 0.00;
	double GMIFactor_FrontTermH2028 = 0.00;
	double GMIFactor_FrontTermH2030 = 0.00;
	double GMIFactor_FrontTermH2035 = 0.00;
	
	
	double temp = 0.00;
	double Value1 = aaValue * (1 + [self ReturnVUCashInstHigh:@"A"]) * (1 + [self ReturnLoyaltyBonus:aaPolicyYear]/100.00);
	double Value2 = VUCashValue_EverCash60;
	double Value3 = 0.00;
	double Value4 = 0.00;
	
	if (aaPolicyYear == FundTerm2023) {
		NSDateFormatter* df = [[NSDateFormatter alloc] init];
		[df setDateFormat:@"dd/MM/yyyy"];
		NSDate* d = [df dateFromString:getPlanCommDate];
		NSDate* d2 = [df dateFromString:@"26/12/2023"];
		
		NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
		[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
		[formatter setMaximumFractionDigits:2];
		[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
		
		
		RemainingTerm_2023 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
		BackTerm_2023 = 12 - [self roundUp:((RemainingTerm_2023 - round(ceil(RemainingTerm_2023)) + 1) * 12) ];
		Value3 = ReinvestAmount2023toCash_H * pow((1 + [self ReturnVUCashInstHigh:@"A"]), BackTerm_2023/12.00) ;
		temp = Value1 + Value3;
		
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear == 60) {
				temp = temp + Value2;
			}
			else if (Age + aaPolicyYear > 60){
				GMIFactor_BackTermH2023 = (pow((1 + [self ReturnVUCashInstHigh:@"A"]), (BackTerm_2023 / 12.00)) - 1) / ( pow((1 + [self ReturnVUCashInstHigh:@"A"]), (1.00/ 12.00))   - 1);
				GMIFactor_FrontTermH2023 = (pow((1 + [self ReturnVUCashInstHigh:@"A"]), ((12 - BackTerm_2023) / 12.00))   - 1) / (pow(1 + [self ReturnVUCashInstHigh:@"A"], (1.00/ 12.00))  - 1);
				Value4 = VUCashValue_EverCash60 * GMIFactor_BackTermH2023 + PrevVUCashValue_EverCash60 * GMIFactor_FrontTermH2023 * pow((1 + [self ReturnVUCashInstHigh:@"A"]), (BackTerm_2023 / 12.00));
				temp = temp + Value4;
			}
			else{
				
			}
		}
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUCashInstHigh:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUCashFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
		
		
	}
	else if (aaPolicyYear == FundTerm2025) {
		NSDateFormatter* df = [[NSDateFormatter alloc] init];
		[df setDateFormat:@"dd/MM/yyyy"];
		NSDate* d = [df dateFromString:getPlanCommDate];
		NSDate* d2 = [df dateFromString:@"26/12/2025"];
		
		NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
		[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
		[formatter setMaximumFractionDigits:2];
		[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
		
		RemainingTerm_2025 = 0.00;
		BackTerm_2025 = 0.00;
		Value3 = 0.00;
		RemainingTerm_2025 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
		BackTerm_2025 = 12 - ceil((RemainingTerm_2025 - round(ceil(RemainingTerm_2025)) + 1) * 12);
		Value3 = ReinvestAmount2025toCash_H * pow((1 + [self ReturnVUCashInstHigh:@"A"]), BackTerm_2025/12.00) ;
		temp = Value1 + Value3;
		
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear == 60) {
				temp = temp + Value2;
			}
			else if (Age + aaPolicyYear > 60){
				GMIFactor_BackTermH2025 = (pow((1 + [self ReturnVUCashInstHigh:@"A"]), (BackTerm_2025 / 12.00)) - 1) / ( pow((1 + [self ReturnVUCashInstHigh:@"A"]), (1.00/ 12.00))   - 1);
				GMIFactor_FrontTermH2025 = (pow((1 + [self ReturnVUCashInstHigh:@"A"]), ((12 - BackTerm_2025) / 12.00))   - 1) / (pow(1 + [self ReturnVUCashInstHigh:@"A"], (1.00/ 12.00))  - 1);
				Value4 = VUCashValue_EverCash60 * GMIFactor_BackTermH2025 + PrevVUCashValue_EverCash60 * GMIFactor_FrontTermH2025 * pow((1 + [self ReturnVUCashInstHigh:@"A"]), (BackTerm_2025 / 12.00));
				temp = temp + Value4;
			}
			else{
				
			}
		}
		
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUCashInstHigh:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUCashFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
		
	}
	else if (aaPolicyYear == FundTerm2028) {
		NSDateFormatter* df = [[NSDateFormatter alloc] init];
		[df setDateFormat:@"dd/MM/yyyy"];
		NSDate* d = [df dateFromString:getPlanCommDate];
		NSDate* d2 = [df dateFromString:@"26/12/2028"];
		
		NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
		[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
		[formatter setMaximumFractionDigits:2];
		[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
		
		RemainingTerm_2028 = 0.00;
		BackTerm_2028 = 0.00;
		Value3 = 0.00;
		RemainingTerm_2028 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
		BackTerm_2028 = 12 - [self roundUp:((RemainingTerm_2028 - round(ceil(RemainingTerm_2028)) + 1) * 12) ];
		Value3 = ReinvestAmount2028toCash_H * pow((1 + [self ReturnVUCashInstHigh:@"A"]), BackTerm_2028/12.00) ;
		temp = Value1 + Value3;
		
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear == 60) {
				temp = temp + Value2;
			}
			else if (Age + aaPolicyYear > 60){
				GMIFactor_BackTermH2028 = (pow((1 + [self ReturnVUCashInstHigh:@"A"]), (BackTerm_2028 / 12.00)) - 1) / ( pow((1 + [self ReturnVUCashInstHigh:@"A"]), (1.00/ 12.00))   - 1);
				GMIFactor_FrontTermH2028 = (pow((1 + [self ReturnVUCashInstHigh:@"A"]), ((12 - BackTerm_2028) / 12.00))   - 1) / (pow(1 + [self ReturnVUCashInstHigh:@"A"], (1.00/ 12.00))  - 1);
				Value4 = VUCashValue_EverCash60 * GMIFactor_BackTermH2028 + PrevVUCashValue_EverCash60 * GMIFactor_FrontTermH2028 * pow((1 + [self ReturnVUCashInstHigh:@"A"]), (BackTerm_2028 / 12.00));
				temp = temp + Value4;
			}
			else{
				
			}
		}
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUCashInstHigh:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUCashFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
		
		
	}
	else if (aaPolicyYear == FundTerm2030) {
		NSDateFormatter* df = [[NSDateFormatter alloc] init];
		[df setDateFormat:@"dd/MM/yyyy"];
		NSDate* d = [df dateFromString:getPlanCommDate];
		NSDate* d2 = [df dateFromString:@"26/12/2030"];
		
		NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
		[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
		[formatter setMaximumFractionDigits:2];
		[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
		
		RemainingTerm_2030 = 0.00;
		BackTerm_2030 = 0.00;
		Value3 = 0.00;
		RemainingTerm_2030 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
		BackTerm_2030 = 12 - [self roundUp:((RemainingTerm_2030 - round(ceil(RemainingTerm_2030)) + 1) * 12) ];
		Value3 = ReinvestAmount2030toCash_H * pow((1 + [self ReturnVUCashInstHigh:@"A"]), BackTerm_2030/12.00) ;
		temp = Value1 + Value3;
		
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear == 60) {
				temp = temp + Value2;
			}
			else if (Age + aaPolicyYear > 60){
				GMIFactor_BackTermH2030 = (pow((1 + [self ReturnVUCashInstHigh:@"A"]), (BackTerm_2030 / 12.00)) - 1) / ( pow((1 + [self ReturnVUCashInstHigh:@"A"]), (1.00/ 12.00))   - 1);
				GMIFactor_FrontTermH2030 = (pow((1 + [self ReturnVUCashInstHigh:@"A"]), ((12 - BackTerm_2030) / 12.00))   - 1) / (pow(1 + [self ReturnVUCashInstHigh:@"A"], (1.00/ 12.00))  - 1);
				Value4 = VUCashValue_EverCash60 * GMIFactor_BackTermH2030 + PrevVUCashValue_EverCash60 * GMIFactor_FrontTermH2030 * pow((1 + [self ReturnVUCashInstHigh:@"A"]), (BackTerm_2030 / 12.00));
				temp = temp + Value4;
			}
			else{
				
			}
		}
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUCashInstHigh:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUCashFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
		
		
	}
	else if (aaPolicyYear == FundTerm2035) {
		NSDateFormatter* df = [[NSDateFormatter alloc] init];
		[df setDateFormat:@"dd/MM/yyyy"];
		NSDate* d = [df dateFromString:getPlanCommDate];
		NSDate* d2 = [df dateFromString:@"26/12/2035"];
		
		NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
		[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
		[formatter setMaximumFractionDigits:2];
		[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
		
		RemainingTerm_2035 = 0.00;
		BackTerm_2035 = 0.00;
		Value3 = 0.00;
		RemainingTerm_2035 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
		BackTerm_2035 = 12 - [self roundUp:((RemainingTerm_2035 - round(ceil(RemainingTerm_2035)) + 1) * 12) ];
		Value3 = ReinvestAmount2035toCash_H * pow((1 + [self ReturnVUCashInstHigh:@"A"]), BackTerm_2035/12.00) ;
		temp = Value1 + Value3;
		
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear == 60) {
				temp = temp + Value2;
			}
			else if (Age + aaPolicyYear > 60){
				GMIFactor_BackTermH2035 = (pow((1 + [self ReturnVUCashInstHigh:@"A"]), (BackTerm_2035 / 12.00)) - 1) / ( pow((1 + [self ReturnVUCashInstHigh:@"A"]), (1.00/ 12.00))   - 1);
				GMIFactor_FrontTermH2035 = (pow((1 + [self ReturnVUCashInstHigh:@"A"]), ((12 - BackTerm_2035) / 12.00))   - 1) / (pow(1 + [self ReturnVUCashInstHigh:@"A"], (1.00/ 12.00))  - 1);
				Value4 = VUCashValue_EverCash60 * GMIFactor_BackTermH2035 + PrevVUCashValue_EverCash60 * GMIFactor_FrontTermH2035 * pow((1 + [self ReturnVUCashInstHigh:@"A"]), (BackTerm_2035 / 12.00));
				temp = temp + Value4;
			}
			else{
				
			}
		}
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUCashInstHigh:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUCashFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
		
		
	}
	else{
		if (Age + aaPolicyYear < 60) {
			temp = Value1;
		}
		else if (Age + aaPolicyYear == 60){
			temp = Value1 + Value2;
		}
		else{
			temp = Value1 + Value2 * 12 * (1 + [self ReturnVUCashInstHigh:@"M"])/(pow((1 + [self ReturnVUCashInstHigh:@"A"]), (1.00/12.00)));
		}
        
        //if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = [self ReturnVUCashFac:aaPolicyYear] * 100;
            double tempInst = [self ReturnVUCashInstHigh:@""];
            
            temp = temp + [self PaidUpOptionTable_RTUO:FALSE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:tempInst PolYear:aaPolicyYear andMonth:0];
        //}
	}
	
	return temp + VUCashValue_EverCash1 + VUCashValue_EverCash6;
	
}

-(double)PaidUpOptionTable_Cash_Median:(double)aaValue andPolicyYear :(int)aaPolicyYear {
	
	double RemainingTerm_2023 = 0.00;
	double RemainingTerm_2025 = 0.00;
	double RemainingTerm_2028 = 0.00;
	double RemainingTerm_2030 = 0.00;
	double RemainingTerm_2035 = 0.00;
	double BackTerm_2023 = 0.00;
	double BackTerm_2025 = 0.00;
	double BackTerm_2028 = 0.00;
	double BackTerm_2030 = 0.00;
	double BackTerm_2035 = 0.00;
	double GMIFactor_BackTermH2023 = 0.00;
	double GMIFactor_BackTermH2025 = 0.00;
	double GMIFactor_BackTermH2028 = 0.00;
	double GMIFactor_BackTermH2030 = 0.00;
	double GMIFactor_BackTermH2035 = 0.00;
	
	double GMIFactor_FrontTermH2023 = 0.00;
	double GMIFactor_FrontTermH2025 = 0.00;
	double GMIFactor_FrontTermH2028 = 0.00;
	double GMIFactor_FrontTermH2030 = 0.00;
	double GMIFactor_FrontTermH2035 = 0.00;
	
	
	double temp = 0.00;
	double Value1 = aaValue * (1 + [self ReturnVUCashInstMedian:@"A"]) * (1 + [self ReturnLoyaltyBonus:aaPolicyYear]/100.00);
	double Value2 = VUCashValue_EverCash60;
	double Value3 = 0.00;
	double Value4 = 0.00;
	
	if (aaPolicyYear == FundTerm2023) {
		NSDateFormatter* df = [[NSDateFormatter alloc] init];
		[df setDateFormat:@"dd/MM/yyyy"];
		NSDate* d = [df dateFromString:getPlanCommDate];
		NSDate* d2 = [df dateFromString:@"26/12/2023"];
		
		NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
		[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
		[formatter setMaximumFractionDigits:2];
		[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
		
		
		RemainingTerm_2023 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
		BackTerm_2023 = 12 - [self roundUp:((RemainingTerm_2023 - round(ceil(RemainingTerm_2023)) + 1) * 12) ];
		Value3 = ReinvestAmount2023toCash_M * pow((1 + [self ReturnVUCashInstMedian:@"A"]), BackTerm_2023/12.00) ;
		temp = Value1 + Value3;
		
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear == 60) {
				temp = temp + Value2;
			}
			else if (Age + aaPolicyYear > 60){
				GMIFactor_BackTermH2023 = (pow((1 + [self ReturnVUCashInstMedian:@"A"]), (BackTerm_2023 / 12.00)) - 1) / ( pow((1 + [self ReturnVUCashInstMedian:@"A"]), (1.00/ 12.00))   - 1);
				GMIFactor_FrontTermH2023 = (pow((1 + [self ReturnVUCashInstMedian:@"A"]), ((12 - BackTerm_2023) / 12.00))   - 1) / (pow(1 + [self ReturnVUCashInstMedian:@"A"], (1.00/ 12.00))  - 1);
				Value4 = VUCashValue_EverCash60 * GMIFactor_BackTermH2023 + PrevVUCashValue_EverCash60 * GMIFactor_FrontTermH2023 * pow((1 + [self ReturnVUCashInstMedian:@"A"]), (BackTerm_2023 / 12.00));
				temp = temp + Value4;
			}
			else{
				
			}
		}
		
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUCashInstMedian:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUCashFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
		
	}
	else if (aaPolicyYear == FundTerm2025) {
		NSDateFormatter* df = [[NSDateFormatter alloc] init];
		[df setDateFormat:@"dd/MM/yyyy"];
		NSDate* d = [df dateFromString:getPlanCommDate];
		NSDate* d2 = [df dateFromString:@"26/12/2025"];
		
		NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
		[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
		[formatter setMaximumFractionDigits:2];
		[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
		
		RemainingTerm_2025 = 0.00;
		BackTerm_2025 = 0.00;
		Value3 = 0.00;
		RemainingTerm_2025 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
		BackTerm_2025 = 12 - [self roundUp:((RemainingTerm_2025 - round(ceil(RemainingTerm_2025)) + 1) * 12) ];
		Value3 = ReinvestAmount2025toCash_M * pow((1 + [self ReturnVUCashInstMedian:@"A"]), BackTerm_2025/12.00) ;
		temp = Value1 + Value3;
		
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear == 60) {
				temp = temp + Value2;
			}
			else if (Age + aaPolicyYear > 60){
				GMIFactor_BackTermH2025 = (pow((1 + [self ReturnVUCashInstMedian:@"A"]), (BackTerm_2025 / 12.00)) - 1) / ( pow((1 + [self ReturnVUCashInstMedian:@"A"]), (1.00/ 12.00))   - 1);
				GMIFactor_FrontTermH2025 = (pow((1 + [self ReturnVUCashInstMedian:@"A"]), ((12 - BackTerm_2025) / 12.00))   - 1) / (pow(1 + [self ReturnVUCashInstMedian:@"A"], (1.00/ 12.00))  - 1);
				Value4 = VUCashValue_EverCash60 * GMIFactor_BackTermH2025 + PrevVUCashValue_EverCash60 * GMIFactor_FrontTermH2025 * pow((1 + [self ReturnVUCashInstMedian:@"A"]), (BackTerm_2025 / 12.00));
				temp = temp + Value4;
			}
			else{
				
			}
		}
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUCashInstMedian:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUCashFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
		
		
	}
	else if (aaPolicyYear == FundTerm2028) {
		NSDateFormatter* df = [[NSDateFormatter alloc] init];
		[df setDateFormat:@"dd/MM/yyyy"];
		NSDate* d = [df dateFromString:getPlanCommDate];
		NSDate* d2 = [df dateFromString:@"26/12/2028"];
		
		NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
		[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
		[formatter setMaximumFractionDigits:2];
		[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
		
		RemainingTerm_2028 = 0.00;
		BackTerm_2028 = 0.00;
		Value3 = 0.00;
		RemainingTerm_2028 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
		BackTerm_2028 = 12 - [self roundUp:((RemainingTerm_2028 - round(ceil(RemainingTerm_2028)) + 1) * 12) ];
		Value3 = ReinvestAmount2028toCash_M * pow((1 + [self ReturnVUCashInstMedian:@"A"]), BackTerm_2028/12.00) ;
		temp = Value1 + Value3;
		
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear == 60) {
				temp = temp + Value2;
			}
			else if (Age + aaPolicyYear > 60){
				GMIFactor_BackTermH2028 = (pow((1 + [self ReturnVUCashInstMedian:@"A"]), (BackTerm_2028 / 12.00)) - 1) / ( pow((1 + [self ReturnVUCashInstMedian:@"A"]), (1.00/ 12.00))   - 1);
				GMIFactor_FrontTermH2028 = (pow((1 + [self ReturnVUCashInstMedian:@"A"]), ((12 - BackTerm_2028) / 12.00))   - 1) / (pow(1 + [self ReturnVUCashInstMedian:@"A"], (1.00/ 12.00))  - 1);
				Value4 = VUCashValue_EverCash60 * GMIFactor_BackTermH2028 + PrevVUCashValue_EverCash60 * GMIFactor_FrontTermH2028 * pow((1 + [self ReturnVUCashInstMedian:@"A"]), (BackTerm_2028 / 12.00));
				temp = temp + Value4;
			}
			else{
				
			}
		}
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUCashInstMedian:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUCashFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
		
		
	}
	else if (aaPolicyYear == FundTerm2030) {
		NSDateFormatter* df = [[NSDateFormatter alloc] init];
		[df setDateFormat:@"dd/MM/yyyy"];
		NSDate* d = [df dateFromString:getPlanCommDate];
		NSDate* d2 = [df dateFromString:@"26/12/2030"];
		
		NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
		[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
		[formatter setMaximumFractionDigits:2];
		[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
		
		RemainingTerm_2030 = 0.00;
		BackTerm_2030 = 0.00;
		Value3 = 0.00;
		RemainingTerm_2030 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
		BackTerm_2030 = 12 - [self roundUp:((RemainingTerm_2030 - round(ceil(RemainingTerm_2030)) + 1) * 12) ];
		Value3 = ReinvestAmount2030toCash_M * pow((1 + [self ReturnVUCashInstMedian:@"A"]), BackTerm_2030/12.00) ;
		temp = Value1 + Value3;
		
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear == 60) {
				temp = temp + Value2;
			}
			else if (Age + aaPolicyYear > 60){
				GMIFactor_BackTermH2030 = (pow((1 + [self ReturnVUCashInstMedian:@"A"]), (BackTerm_2030 / 12.00)) - 1) / ( pow((1 + [self ReturnVUCashInstMedian:@"A"]), (1.00/ 12.00))   - 1);
				GMIFactor_FrontTermH2030 = (pow((1 + [self ReturnVUCashInstMedian:@"A"]), ((12 - BackTerm_2030) / 12.00))   - 1) / (pow(1 + [self ReturnVUCashInstMedian:@"A"], (1.00/ 12.00))  - 1);
				Value4 = VUCashValue_EverCash60 * GMIFactor_BackTermH2030 + PrevVUCashValue_EverCash60 * GMIFactor_FrontTermH2030 * pow((1 + [self ReturnVUCashInstMedian:@"A"]), (BackTerm_2030 / 12.00));
				temp = temp + Value4;
			}
			else{
				
			}
		}
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUCashInstMedian:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUCashFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
		
		
	}
	else if (aaPolicyYear == FundTerm2035) {
		NSDateFormatter* df = [[NSDateFormatter alloc] init];
		[df setDateFormat:@"dd/MM/yyyy"];
		NSDate* d = [df dateFromString:getPlanCommDate];
		NSDate* d2 = [df dateFromString:@"26/12/2035"];
		
		NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
		[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
		[formatter setMaximumFractionDigits:2];
		[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
		
		RemainingTerm_2035 = 0.00;
		BackTerm_2035 = 0.00;
		Value3 = 0.00;
		RemainingTerm_2035 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
		BackTerm_2035 = 12 - [self roundUp:((RemainingTerm_2035 - round(ceil(RemainingTerm_2035)) + 1) * 12) ];
		Value3 = ReinvestAmount2035toCash_M * pow((1 + [self ReturnVUCashInstMedian:@"A"]), BackTerm_2035/12.00) ;
		temp = Value1 + Value3;
		
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear == 60) {
				temp = temp + Value2;
			}
			else if (Age + aaPolicyYear > 60){
				GMIFactor_BackTermH2035 = (pow((1 + [self ReturnVUCashInstMedian:@"A"]), (BackTerm_2035 / 12.00)) - 1) / ( pow((1 + [self ReturnVUCashInstMedian:@"A"]), (1.00/ 12.00))   - 1);
				GMIFactor_FrontTermH2035 = (pow((1 + [self ReturnVUCashInstMedian:@"A"]), ((12 - BackTerm_2035) / 12.00))   - 1) / (pow(1 + [self ReturnVUCashInstMedian:@"A"], (1.00/ 12.00))  - 1);
				Value4 = VUCashValue_EverCash60 * GMIFactor_BackTermH2035 + PrevVUCashValue_EverCash60 * GMIFactor_FrontTermH2035 * pow((1 + [self ReturnVUCashInstMedian:@"A"]), (BackTerm_2035 / 12.00));
				temp = temp + Value4;
			}
			else{
				
			}
		}
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUCashInstMedian:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUCashFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
		
		
	}
	else{
		if (Age + aaPolicyYear < 60) {
			temp = Value1;
		}
		else if (Age + aaPolicyYear == 60){
			temp = Value1 + Value2;
		}
		else{
			temp = Value1 + Value2 * 12 * (1 + [self ReturnVUCashInstMedian:@"M"])/(pow((1 + [self ReturnVUCashInstMedian:@"A"]), (1.00/12.00)));
		}
        
        //if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = [self ReturnVUCashFac:aaPolicyYear] * 100;
            double tempInst = [self ReturnVUCashInstMedian:@""];
            
            temp = temp + [self PaidUpOptionTable_RTUO:FALSE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:tempInst PolYear:aaPolicyYear andMonth:0];
        //}
	}
	
	return temp + VUCashValue_EverCash1 + VUCashValue_EverCash6;
	
}

-(double)PaidUpOptionTable_Cash_Low:(double)aaValue andPolicyYear :(int)aaPolicyYear {
	
	double RemainingTerm_2023 = 0.00;
	double RemainingTerm_2025 = 0.00;
	double RemainingTerm_2028 = 0.00;
	double RemainingTerm_2030 = 0.00;
	double RemainingTerm_2035 = 0.00;
	double BackTerm_2023 = 0.00;
	double BackTerm_2025 = 0.00;
	double BackTerm_2028 = 0.00;
	double BackTerm_2030 = 0.00;
	double BackTerm_2035 = 0.00;
	double GMIFactor_BackTermH2023 = 0.00;
	double GMIFactor_BackTermH2025 = 0.00;
	double GMIFactor_BackTermH2028 = 0.00;
	double GMIFactor_BackTermH2030 = 0.00;
	double GMIFactor_BackTermH2035 = 0.00;
	
	double GMIFactor_FrontTermH2023 = 0.00;
	double GMIFactor_FrontTermH2025 = 0.00;
	double GMIFactor_FrontTermH2028 = 0.00;
	double GMIFactor_FrontTermH2030 = 0.00;
	double GMIFactor_FrontTermH2035 = 0.00;
	
	
	double temp = 0.00;
	double Value1 = aaValue * (1 + [self ReturnVUCashInstLow:@"A"]) * (1 + [self ReturnLoyaltyBonus:aaPolicyYear]/100.00);
	double Value2 = VUCashValue_EverCash60;
	double Value3 = 0.00;
	double Value4 = 0.00;
	
	if (aaPolicyYear == FundTerm2023) {
		NSDateFormatter* df = [[NSDateFormatter alloc] init];
		[df setDateFormat:@"dd/MM/yyyy"];
		NSDate* d = [df dateFromString:getPlanCommDate];
		NSDate* d2 = [df dateFromString:@"26/12/2023"];
		
		NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
		[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
		[formatter setMaximumFractionDigits:2];
		[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
		
		
		RemainingTerm_2023 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
		BackTerm_2023 = 12 - [self roundUp:((RemainingTerm_2023 - round(ceil(RemainingTerm_2023)) + 1) * 12) ];
		Value3 = ReinvestAmount2023toCash_L * pow((1 + [self ReturnVUCashInstLow:@"A"]), BackTerm_2023/12.00) ;
		temp = Value1 + Value3;
		
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear == 60) {
				temp = temp + Value2;
			}
			else if (Age + aaPolicyYear > 60){
				GMIFactor_BackTermH2023 = (pow((1 + [self ReturnVUCashInstLow:@"A"]), (BackTerm_2023 / 12.00)) - 1) / ( pow((1 + [self ReturnVUCashInstLow:@"A"]), (1.00/ 12.00))   - 1);
				GMIFactor_FrontTermH2023 = (pow((1 + [self ReturnVUCashInstLow:@"A"]), ((12 - BackTerm_2023) / 12.00))   - 1) / (pow(1 + [self ReturnVUCashInstLow:@"A"], (1.00/ 12.00))  - 1);
				Value4 = VUCashValue_EverCash60 * GMIFactor_BackTermH2023 + PrevVUCashValue_EverCash60 * GMIFactor_FrontTermH2023 * pow((1 + [self ReturnVUCashInstLow:@"A"]), (BackTerm_2023 / 12.00));
				temp = temp + Value4;
			}
			else{
				
			}
		}
		
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUCashInstLow:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUCashFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
		
	}
	else if (aaPolicyYear == FundTerm2025) {
		NSDateFormatter* df = [[NSDateFormatter alloc] init];
		[df setDateFormat:@"dd/MM/yyyy"];
		NSDate* d = [df dateFromString:getPlanCommDate];
		NSDate* d2 = [df dateFromString:@"26/12/2025"];
		
		NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
		[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
		[formatter setMaximumFractionDigits:2];
		[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
		
		RemainingTerm_2025 = 0.00;
		BackTerm_2025 = 0.00;
		Value3 = 0.00;
		RemainingTerm_2025 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
		BackTerm_2025 = 12 - [self roundUp:((RemainingTerm_2025 - round(ceil(RemainingTerm_2025)) + 1) * 12) ];
		Value3 = ReinvestAmount2025toCash_L * pow((1 + [self ReturnVUCashInstLow:@"A"]), BackTerm_2025/12.00) ;
		temp = Value1 + Value3;
		
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear == 60) {
				temp = temp + Value2;
			}
			else if (Age + aaPolicyYear > 60){
				GMIFactor_BackTermH2025 = (pow((1 + [self ReturnVUCashInstLow:@"A"]), (BackTerm_2025 / 12.00)) - 1) / ( pow((1 + [self ReturnVUCashInstLow:@"A"]), (1.00/ 12.00))   - 1);
				GMIFactor_FrontTermH2025 = (pow((1 + [self ReturnVUCashInstLow:@"A"]), ((12 - BackTerm_2025) / 12.00))   - 1) / (pow(1 + [self ReturnVUCashInstLow:@"A"], (1.00/ 12.00))  - 1);
				Value4 = VUCashValue_EverCash60 * GMIFactor_BackTermH2025 + PrevVUCashValue_EverCash60 * GMIFactor_FrontTermH2025 * pow((1 + [self ReturnVUCashInstLow:@"A"]), (BackTerm_2025 / 12.00));
				temp = temp + Value4;
			}
			else{
				
			}
		}
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUCashInstLow:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUCashFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
		
		
	}
	else if (aaPolicyYear == FundTerm2028) {
		NSDateFormatter* df = [[NSDateFormatter alloc] init];
		[df setDateFormat:@"dd/MM/yyyy"];
		NSDate* d = [df dateFromString:getPlanCommDate];
		NSDate* d2 = [df dateFromString:@"26/12/2028"];
		
		NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
		[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
		[formatter setMaximumFractionDigits:2];
		[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
		
		RemainingTerm_2028 = 0.00;
		BackTerm_2028 = 0.00;
		Value3 = 0.00;
		RemainingTerm_2028 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
		BackTerm_2028 = 12 - [self roundUp:((RemainingTerm_2028 - round(ceil(RemainingTerm_2028)) + 1) * 12) ];
		Value3 = ReinvestAmount2028toCash_L * pow((1 + [self ReturnVUCashInstLow:@"A"]), BackTerm_2028/12.00) ;
		temp = Value1 + Value3;
		
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear == 60) {
				temp = temp + Value2;
			}
			else if (Age + aaPolicyYear > 60){
				GMIFactor_BackTermH2028 = (pow((1 + [self ReturnVUCashInstLow:@"A"]), (BackTerm_2028 / 12.00)) - 1) / ( pow((1 + [self ReturnVUCashInstLow:@"A"]), (1.00/ 12.00))   - 1);
				GMIFactor_FrontTermH2028 = (pow((1 + [self ReturnVUCashInstLow:@"A"]), ((12 - BackTerm_2028) / 12.00))   - 1) / (pow(1 + [self ReturnVUCashInstLow:@"A"], (1.00/ 12.00))  - 1);
				Value4 = VUCashValue_EverCash60 * GMIFactor_BackTermH2028 + PrevVUCashValue_EverCash60 * GMIFactor_FrontTermH2028 * pow((1 + [self ReturnVUCashInstLow:@"A"]), (BackTerm_2028 / 12.00));
				temp = temp + Value4;
			}
			else{
				
			}
		}
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUCashInstLow:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUCashFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
		
		
	}
	else if (aaPolicyYear == FundTerm2030) {
		NSDateFormatter* df = [[NSDateFormatter alloc] init];
		[df setDateFormat:@"dd/MM/yyyy"];
		NSDate* d = [df dateFromString:getPlanCommDate];
		NSDate* d2 = [df dateFromString:@"26/12/2030"];
		
		NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
		[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
		[formatter setMaximumFractionDigits:2];
		[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
		
		RemainingTerm_2030 = 0.00;
		BackTerm_2030 = 0.00;
		Value3 = 0.00;
		RemainingTerm_2030 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
		BackTerm_2030 = 12 - [self roundUp:((RemainingTerm_2030 - round(ceil(RemainingTerm_2030)) + 1) * 12) ];
		Value3 = ReinvestAmount2030toCash_L * pow((1 + [self ReturnVUCashInstLow:@"A"]), BackTerm_2030/12.00) ;
		temp = Value1 + Value3;
		
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear == 60) {
				temp = temp + Value2;
			}
			else if (Age + aaPolicyYear > 60){
				GMIFactor_BackTermH2030 = (pow((1 + [self ReturnVUCashInstLow:@"A"]), (BackTerm_2030 / 12.00)) - 1) / ( pow((1 + [self ReturnVUCashInstLow:@"A"]), (1.00/ 12.00))   - 1);
				GMIFactor_FrontTermH2030 = (pow((1 + [self ReturnVUCashInstLow:@"A"]), ((12 - BackTerm_2030) / 12.00))   - 1) / (pow(1 + [self ReturnVUCashInstLow:@"A"], (1.00/ 12.00))  - 1);
				Value4 = VUCashValue_EverCash60 * GMIFactor_BackTermH2030 + PrevVUCashValue_EverCash60 * GMIFactor_FrontTermH2030 * pow((1 + [self ReturnVUCashInstLow:@"A"]), (BackTerm_2030 / 12.00));
				temp = temp + Value4;
			}
			else{
				
			}
		}
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUCashInstLow:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUCashFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
		
		
	}
	else if (aaPolicyYear == FundTerm2035) {
		NSDateFormatter* df = [[NSDateFormatter alloc] init];
		[df setDateFormat:@"dd/MM/yyyy"];
		NSDate* d = [df dateFromString:getPlanCommDate];
		NSDate* d2 = [df dateFromString:@"26/12/2035"];
		
		NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
		[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
		[formatter setMaximumFractionDigits:2];
		[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
		
		RemainingTerm_2035 = 0.00;
		BackTerm_2035 = 0.00;
		Value3 = 0.00;
		RemainingTerm_2035 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
		BackTerm_2035 = 12 - [self roundUp:((RemainingTerm_2035 - round(ceil(RemainingTerm_2035)) + 1) * 12) ];
		Value3 = ReinvestAmount2035toCash_L * pow((1 + [self ReturnVUCashInstLow:@"A"]), BackTerm_2035/12.00) ;
		temp = Value1 + Value3;
		
		if (ECAR60Exist == TRUE) {
			if (Age + aaPolicyYear == 60) {
				temp = temp + Value2;
			}
			else if (Age + aaPolicyYear > 60){
				GMIFactor_BackTermH2035 = (pow((1 + [self ReturnVUCashInstLow:@"A"]), (BackTerm_2035 / 12.00)) - 1) / ( pow((1 + [self ReturnVUCashInstLow:@"A"]), (1.00/ 12.00))   - 1);
				GMIFactor_FrontTermH2035 = (pow((1 + [self ReturnVUCashInstLow:@"A"]), ((12 - BackTerm_2035) / 12.00))   - 1) / (pow(1 + [self ReturnVUCashInstLow:@"A"], (1.00/ 12.00))  - 1);
				Value4 = VUCashValue_EverCash60 * GMIFactor_BackTermH2035 + PrevVUCashValue_EverCash60 * GMIFactor_FrontTermH2035 * pow((1 + [self ReturnVUCashInstLow:@"A"]), (BackTerm_2035 / 12.00));
				temp = temp + Value4;
			}
			else{
				
			}
		}
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUCashInstLow:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUCashFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
		
		
	}
	else{
		if (Age + aaPolicyYear < 60) {
			temp = Value1;
		}
		else if (Age + aaPolicyYear == 60){
			temp = Value1 + Value2;
		}
		else{
			temp = Value1 + Value2 * 12 * (1 + [self ReturnVUCashInstLow:@"M"])/(pow((1 + [self ReturnVUCashInstLow:@"A"]), (1.00/12.00)));
		}
        
        //if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = [self ReturnVUCashFac:aaPolicyYear] * 100;
            double tempInst = [self ReturnVUCashInstLow:@""];
            
            temp = temp + [self PaidUpOptionTable_RTUO:FALSE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:tempInst PolYear:aaPolicyYear andMonth:0];
        //}
	}
	
	return temp + VUCashValue_EverCash1 + VUCashValue_EverCash6;
	
}

-(double)PaidUpOptionTable_2023_L_Balance :(double)aaPrevPaidUpOptionTable_2023_Low andPolicyYear :(int)aaPolicyYear {
	NSDateFormatter* df = [[NSDateFormatter alloc] init];
	[df setDateFormat:@"dd/MM/yyyy"];
	NSDate* d = [df dateFromString:getPlanCommDate];
	NSDate* d2 = [df dateFromString:@"26/12/2023"];
	
	NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
	[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
	[formatter setMaximumFractionDigits:2];
	[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
	
	double RemainingTerm_2023 = 0.00;
	double FrontTerm_2023 = 0.00;
	double GMIFactor_FrontTermH2023 = 0.00;
	
	RemainingTerm_2023 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
	FrontTerm_2023 = ceil((RemainingTerm_2023 - round(ceil(RemainingTerm_2023)) + 1) * 12);
	double tempValue = aaPrevPaidUpOptionTable_2023_Low * pow((1 + [self ReturnVU2023InstLow:@"A"]), FrontTerm_2023/12.00) * (1 + [self ReturnLoyaltyBonus:aaPolicyYear]/100.00);
	
	if (ECAR60Exist == TRUE) {
		GMIFactor_FrontTermH2023 = (pow((1 + [self ReturnVU2023InstLow:@"A"]),(FrontTerm_2023/12.00) ) - 1)/(pow((1 + [self ReturnVU2023InstLow:@"A"]), 1.00/12.00) - 1);
		if (Age + aaPolicyYear > 60) {
			return tempValue + PrevPaidUpOptionTable_2023_Low + GMIFactor_FrontTermH2023;
		}
		
		
		
	}


        double EGFundAllo_Percen = 0.00;
        double tempInst = pow((1.00 + [self ReturnVU2023InstLow:@"A"]), (1.00/12.00));
        double PaidUpRTUO = 0.00;
    
        for (int i = 1; i <= FrontTerm_2023; i ++) {
            EGFundAllo_Percen = [self ReturnVU2023Fac] * 100;
            PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
        }
    
        tempValue = tempValue + PaidUpRTUO;
        return tempValue;

}



-(double)PaidUpOptionTable_2025_L_Balance :(double)aaPrevPaidUpOptionTable_2025_Low andPolicyYear :(int)aaPolicyYear {
	NSDateFormatter* df = [[NSDateFormatter alloc] init];
	[df setDateFormat:@"dd/MM/yyyy"];
	NSDate* d = [df dateFromString:getPlanCommDate];
	NSDate* d2 = [df dateFromString:@"26/12/2025"];
	
	NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
	[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
	[formatter setMaximumFractionDigits:2];
	[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
	
	double RemainingTerm_2025 = 0.00;
	double FrontTerm_2025 = 0.00;
	double GMIFactor_FrontTermH2025 = 0.00;
	
	RemainingTerm_2025 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
	FrontTerm_2025 = ceil((RemainingTerm_2025 - round(ceil(RemainingTerm_2025)) + 1) * 12);
	double tempValue = aaPrevPaidUpOptionTable_2025_Low * pow((1 + [self ReturnVU2025InstLow:@"A"]), FrontTerm_2025/12.00) * (1 + [self ReturnLoyaltyBonus:aaPolicyYear]/100.00);
	
	if (ECAR60Exist == TRUE) {
		GMIFactor_FrontTermH2025 = (pow((1 + [self ReturnVU2025InstLow:@"A"]),(FrontTerm_2025/12.00) ) - 1)/(pow((1 + [self ReturnVU2025InstLow:@"A"]), 1.00/12.00) - 1);
		if (Age + aaPolicyYear > 60) {
            tempValue = tempValue + PrevPaidUpOptionTable_2025_Low + GMIFactor_FrontTermH2025;
		}
        
	}
    
    
        double EGFundAllo_Percen = 0.00;
        double tempInst = pow((1.00 + [self ReturnVU2025InstLow:@"A"]), (1.00/12.00));
        double PaidUpRTUO = 0.00;
        
        for (int i = 1; i <= FrontTerm_2025; i ++) {
            EGFundAllo_Percen = [self ReturnVU2025Fac:aaPolicyYear andMonth:i ]* 100;
            PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
        }
        
        tempValue = tempValue + PaidUpRTUO;
        return tempValue;
    
    
}

-(double)PaidUpOptionTable_2028_L_Balance :(double)aaPrevPaidUpOptionTable_2028_Low andPolicyYear :(int)aaPolicyYear {
	NSDateFormatter* df = [[NSDateFormatter alloc] init];
	[df setDateFormat:@"dd/MM/yyyy"];
	NSDate* d = [df dateFromString:getPlanCommDate];
	NSDate* d2 = [df dateFromString:@"26/12/2028"];
	
	NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
	[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
	[formatter setMaximumFractionDigits:2];
	[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
	
	double RemainingTerm_2028 = 0.00;
	double FrontTerm_2028 = 0.00;
	double GMIFactor_FrontTermH2028 = 0.00;
	
	RemainingTerm_2028 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
	FrontTerm_2028 = ceil((RemainingTerm_2028 - round(ceil(RemainingTerm_2028)) + 1) * 12);
	double tempValue= aaPrevPaidUpOptionTable_2028_Low * pow((1 + [self ReturnVU2028InstLow:@"A"]), FrontTerm_2028/12.00) * (1 + [self ReturnLoyaltyBonus:aaPolicyYear]/100.00);
	
	if (ECAR60Exist == TRUE) {
		GMIFactor_FrontTermH2028 = (pow((1 + [self ReturnVU2028InstLow:@"A"]),(FrontTerm_2028/12.00) ) - 1)/(pow((1 + [self ReturnVU2028InstLow:@"A"]), 1.00/12.00) - 1);
		if (Age + aaPolicyYear > 60) {
            tempValue = tempValue + PrevPaidUpOptionTable_2028_Low + GMIFactor_FrontTermH2028;
		}
        
	}
    
    
    
        double EGFundAllo_Percen = 0.00;
        double tempInst = pow((1.00 + [self ReturnVU2028InstLow:@"A"]), (1.00/12.00));
        double PaidUpRTUO = 0.00;
        
        for (int i = 1; i <= FrontTerm_2028; i ++) {
            EGFundAllo_Percen = [self ReturnVU2028Fac:aaPolicyYear andMonth:i ]* 100;
            PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
        }
        
        tempValue = tempValue + PaidUpRTUO;
        return tempValue;
    
    
}

-(double)PaidUpOptionTable_2030_L_Balance :(double)aaPrevPaidUpOptionTable_2030_Low andPolicyYear :(int)aaPolicyYear {
	NSDateFormatter* df = [[NSDateFormatter alloc] init];
	[df setDateFormat:@"dd/MM/yyyy"];
	NSDate* d = [df dateFromString:getPlanCommDate];
	NSDate* d2 = [df dateFromString:@"26/12/2030"];
	
	NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
	[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
	[formatter setMaximumFractionDigits:2];
	[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
	
	double RemainingTerm_2030 = 0.00;
	double FrontTerm_2030 = 0.00;
	double GMIFactor_FrontTermH2030 = 0.00;
	
	RemainingTerm_2030 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
	FrontTerm_2030 = ceil((RemainingTerm_2030 - round(ceil(RemainingTerm_2030)) + 1) * 12);
	double tempValue = aaPrevPaidUpOptionTable_2030_Low * pow((1 + [self ReturnVU2030InstLow:@"A"]), FrontTerm_2030/12.00) * (1 + [self ReturnLoyaltyBonus:aaPolicyYear]/100.00);
	
	if (ECAR60Exist == TRUE) {
		GMIFactor_FrontTermH2030 = (pow((1 + [self ReturnVU2030InstLow:@"A"]),(FrontTerm_2030/12.00) ) - 1)/(pow((1 + [self ReturnVU2030InstLow:@"A"]), 1.00/12.00) - 1);
		if (Age + aaPolicyYear > 60) {
			tempValue = tempValue + PrevPaidUpOptionTable_2030_Low + GMIFactor_FrontTermH2030;
		}
        
	}
    
    
    
        double EGFundAllo_Percen = 0.00;
        double tempInst = pow((1.00 + [self ReturnVU2030InstLow:@"A"]), (1.00/12.00));
        double PaidUpRTUO = 0.00;
        
        for (int i = 1; i <= FrontTerm_2030; i ++) {
            EGFundAllo_Percen = [self ReturnVU2030Fac:aaPolicyYear andMonth:i ]* 100;
            PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
        }
        
        tempValue = tempValue + PaidUpRTUO;
        return tempValue;
    
    
}

-(double)PaidUpOptionTable_2035_L_Balance :(double)aaPrevPaidUpOptionTable_2035_Low andPolicyYear :(int)aaPolicyYear {
	NSDateFormatter* df = [[NSDateFormatter alloc] init];
	[df setDateFormat:@"dd/MM/yyyy"];
	NSDate* d = [df dateFromString:getPlanCommDate];
	NSDate* d2 = [df dateFromString:@"26/12/2035"];
	
	NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
	[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
	[formatter setMaximumFractionDigits:2];
	[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
	
	double RemainingTerm_2035 = 0.00;
	double FrontTerm_2035 = 0.00;
	double GMIFactor_FrontTermH2035 = 0.00;
	
	RemainingTerm_2035 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
	FrontTerm_2035 = [self roundUp:((RemainingTerm_2035 - round(ceil(RemainingTerm_2035)) + 1) * 12) ];
	double tempValue = aaPrevPaidUpOptionTable_2035_Low * pow((1 + [self ReturnVU2035InstLow:@"A"]), FrontTerm_2035/12.00) * (1 + [self ReturnLoyaltyBonus:aaPolicyYear]/100.00);
	
	if (ECAR60Exist == TRUE) {
		GMIFactor_FrontTermH2035 = (pow((1 + [self ReturnVU2035InstLow:@"A"]),(FrontTerm_2035/12.00) ) - 1)/(pow((1 + [self ReturnVU2035InstLow:@"A"]), 1.00/12.00) - 1);
		if (Age + aaPolicyYear > 60) {
            tempValue = tempValue + PrevPaidUpOptionTable_2035_Low + GMIFactor_FrontTermH2035;
		}
	}
    
    
        double EGFundAllo_Percen = 0.00;
        double temp2035Inst = pow((1.00 + [self ReturnVU2035InstLow:@"A"]), (1.00/12.00));
        double PaidUpRTUO = 0.00;
        
        for (int i = 1; i <= FrontTerm_2035; i ++) {
            EGFundAllo_Percen = [self ReturnVU2035Fac:aaPolicyYear andMonth:i ]* 100;
            PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * temp2035Inst ;
        }
        
        tempValue = tempValue + PaidUpRTUO;
        return tempValue;
   
}

-(double)PaidUpOptionTable_2023_M_Balance :(double)aaPrevPaidUpOptionTable_2023_Median andPolicyYear :(int)aaPolicyYear {
	NSDateFormatter* df = [[NSDateFormatter alloc] init];
	[df setDateFormat:@"dd/MM/yyyy"];
	NSDate* d = [df dateFromString:getPlanCommDate];
	NSDate* d2 = [df dateFromString:@"26/12/2023"];
	
	NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
	[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
	[formatter setMaximumFractionDigits:2];
	[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
	
	double RemainingTerm_2023 = 0.00;
	double FrontTerm_2023 = 0.00;
	double GMIFactor_FrontTermH2023 = 0.00;
	
	RemainingTerm_2023 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
	FrontTerm_2023 = ceil((RemainingTerm_2023 - round(ceil(RemainingTerm_2023)) + 1) * 12);
	double tempValue = aaPrevPaidUpOptionTable_2023_Median * pow((1 + [self ReturnVU2023InstMedian:@"A"]), FrontTerm_2023/12.00) * (1 + [self ReturnLoyaltyBonus:aaPolicyYear]/100.00);
	
	if (ECAR60Exist == TRUE) {
		GMIFactor_FrontTermH2023 = (pow((1 + [self ReturnVU2023InstMedian:@"A"]),(FrontTerm_2023/12.00) ) - 1)/(pow((1 + [self ReturnVU2023InstMedian:@"A"]), 1.00/12.00) - 1);
		if (Age + aaPolicyYear > 60) {
			return tempValue + PrevPaidUpOptionTable_2023_Median + GMIFactor_FrontTermH2023;
		}
	}
    
    double EGFundAllo_Percen = 0.00;
    double tempInst = pow((1.00 + [self ReturnVU2023InstMedian:@"A"]), (1.00/12.00));
    double PaidUpRTUO = 0.00;
    
    for (int i = 1; i <= FrontTerm_2023; i ++) {
        EGFundAllo_Percen = [self ReturnVU2023Fac] * 100;
        PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
    }
    
    tempValue = tempValue + PaidUpRTUO;
    return tempValue;
}

-(double)PaidUpOptionTable_2025_M_Balance :(double)aaPrevPaidUpOptionTable_2025_Median andPolicyYear :(int)aaPolicyYear {
	NSDateFormatter* df = [[NSDateFormatter alloc] init];
	[df setDateFormat:@"dd/MM/yyyy"];
	NSDate* d = [df dateFromString:getPlanCommDate];
	NSDate* d2 = [df dateFromString:@"26/12/2025"];
	
	NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
	[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
	[formatter setMaximumFractionDigits:2];
	[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
	
	double RemainingTerm_2025 = 0.00;
	double FrontTerm_2025 = 0.00;
	double GMIFactor_FrontTermH2025 = 0.00;
	
	RemainingTerm_2025 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
	FrontTerm_2025 = ceil((RemainingTerm_2025 - round(ceil(RemainingTerm_2025)) + 1) * 12);
	double tempValue = aaPrevPaidUpOptionTable_2025_Median * pow((1 + [self ReturnVU2025InstMedian:@"A"]), FrontTerm_2025/12.00) * (1 + [self ReturnLoyaltyBonus:aaPolicyYear]/100.00);
	
	if (ECAR60Exist == TRUE) {
		GMIFactor_FrontTermH2025 = (pow((1 + [self ReturnVU2025InstMedian:@"A"]),(FrontTerm_2025/12.00) ) - 1)/(pow((1 + [self ReturnVU2025InstMedian:@"A"]), 1.00/12.00) - 1);
		if (Age + aaPolicyYear > 60) {
			return tempValue + PrevPaidUpOptionTable_2025_Median + GMIFactor_FrontTermH2025;
		}
        
	}
    
    
        double EGFundAllo_Percen = 0.00;
        double tempInst = pow((1.00 + [self ReturnVU2025InstMedian:@"A"]), (1.00/12.00));
        double PaidUpRTUO = 0.00;
        
        for (int i = 1; i <= FrontTerm_2025; i ++) {
            EGFundAllo_Percen = [self ReturnVU2025Fac:aaPolicyYear andMonth:i ]* 100;
            PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
        }
        
        tempValue = tempValue + PaidUpRTUO;
        return tempValue;
   
    
}

-(double)PaidUpOptionTable_2028_M_Balance :(double)aaPrevPaidUpOptionTable_2028_Median andPolicyYear :(int)aaPolicyYear {
	NSDateFormatter* df = [[NSDateFormatter alloc] init];
	[df setDateFormat:@"dd/MM/yyyy"];
	NSDate* d = [df dateFromString:getPlanCommDate];
	NSDate* d2 = [df dateFromString:@"26/12/2028"];
	
	NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
	[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
	[formatter setMaximumFractionDigits:2];
	[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
	
	double RemainingTerm_2028 = 0.00;
	double FrontTerm_2028 = 0.00;
	double GMIFactor_FrontTermH2028 = 0.00;
	
	RemainingTerm_2028 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
	FrontTerm_2028 = ceil((RemainingTerm_2028 - round(ceil(RemainingTerm_2028)) + 1) * 12);
	double tempValue = aaPrevPaidUpOptionTable_2028_Median * pow((1 + [self ReturnVU2028InstMedian:@"A"]), FrontTerm_2028/12.00) * (1 + [self ReturnLoyaltyBonus:aaPolicyYear]/100.00);
	
	if (ECAR60Exist == TRUE) {
		GMIFactor_FrontTermH2028 = (pow((1 + [self ReturnVU2028InstMedian:@"A"]),(FrontTerm_2028/12.00) ) - 1)/(pow((1 + [self ReturnVU2028InstMedian:@"A"]), 1.00/12.00) - 1);
		if (Age + aaPolicyYear > 60) {
			tempValue = tempValue + PrevPaidUpOptionTable_2028_Median + GMIFactor_FrontTermH2028;
		}
		
	}
    
    
   
        double EGFundAllo_Percen = 0.00;
        double tempInst = pow((1.00 + [self ReturnVU2028InstMedian:@"A"]), (1.00/12.00));
        double PaidUpRTUO = 0.00;
        
        for (int i = 1; i <= FrontTerm_2028; i ++) {
            EGFundAllo_Percen = [self ReturnVU2028Fac:aaPolicyYear andMonth:i ]* 100;
            PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
        }
        
        tempValue = tempValue + PaidUpRTUO;
        return tempValue;
    
    
}

-(double)PaidUpOptionTable_2030_M_Balance :(double)aaPrevPaidUpOptionTable_2030_Median andPolicyYear :(int)aaPolicyYear {
	NSDateFormatter* df = [[NSDateFormatter alloc] init];
	[df setDateFormat:@"dd/MM/yyyy"];
	NSDate* d = [df dateFromString:getPlanCommDate];
	NSDate* d2 = [df dateFromString:@"26/12/2030"];
	
	NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
	[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
	[formatter setMaximumFractionDigits:2];
	[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
	
	double RemainingTerm_2030 = 0.00;
	double FrontTerm_2030 = 0.00;
	double GMIFactor_FrontTermH2030 = 0.00;
	
	RemainingTerm_2030 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
	FrontTerm_2030 = ceil((RemainingTerm_2030 - round(ceil(RemainingTerm_2030)) + 1) * 12);
	double tempValue = aaPrevPaidUpOptionTable_2030_Median * pow((1 + [self ReturnVU2030InstMedian:@"A"]), FrontTerm_2030/12.00) * (1 + [self ReturnLoyaltyBonus:aaPolicyYear]/100.00);
	
	if (ECAR60Exist == TRUE) {
		GMIFactor_FrontTermH2030 = (pow((1 + [self ReturnVU2030InstMedian:@"A"]),(FrontTerm_2030/12.00) ) - 1)/(pow((1 + [self ReturnVU2030InstMedian:@"A"]), 1.00/12.00) - 1);
		if (Age + aaPolicyYear > 60) {
			tempValue = tempValue + PrevPaidUpOptionTable_2030_Median + GMIFactor_FrontTermH2030;
		}
	}
    
    
    
        double EGFundAllo_Percen = 0.00;
        double tempInst = pow((1.00 + [self ReturnVU2030InstMedian:@"A"]), (1.00/12.00));
        double PaidUpRTUO = 0.00;
        
        for (int i = 1; i <= FrontTerm_2030; i ++) {
            EGFundAllo_Percen = [self ReturnVU2030Fac:aaPolicyYear andMonth:i ]* 100;
            PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
        }
        
        tempValue = tempValue + PaidUpRTUO;
        return tempValue;
   
}

-(double)PaidUpOptionTable_2035_M_Balance :(double)aaPrevPaidUpOptionTable_2035_Median andPolicyYear :(int)aaPolicyYear {
	NSDateFormatter* df = [[NSDateFormatter alloc] init];
	[df setDateFormat:@"dd/MM/yyyy"];
	NSDate* d = [df dateFromString:getPlanCommDate];
	NSDate* d2 = [df dateFromString:@"26/12/2035"];
	
	NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
	[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
	[formatter setMaximumFractionDigits:2];
	[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
	
	double RemainingTerm_2035 = 0.00;
	double FrontTerm_2035 = 0.00;
	double GMIFactor_FrontTermH2035 = 0.00;
	
	RemainingTerm_2035 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
	FrontTerm_2035 = [self roundUp:((RemainingTerm_2035 - round(ceil(RemainingTerm_2035)) + 1) * 12) ];
	double tempValue = aaPrevPaidUpOptionTable_2035_Median * pow((1 + [self ReturnVU2035InstMedian:@"A"]), FrontTerm_2035/12.00) * (1 + [self ReturnLoyaltyBonus:aaPolicyYear]/100.00);
	
	if (ECAR60Exist == TRUE) {
		GMIFactor_FrontTermH2035 = (pow((1 + [self ReturnVU2035InstMedian:@"A"]),(FrontTerm_2035/12.00) ) - 1)/(pow((1 + [self ReturnVU2035InstMedian:@"A"]), 1.00/12.00) - 1);
		if (Age + aaPolicyYear > 60) {
            tempValue = tempValue + PrevPaidUpOptionTable_2035_Median + GMIFactor_FrontTermH2035;
		}
        
	}
    
    
    
        double EGFundAllo_Percen = 0.00;
        double temp2035Inst = pow((1.00 + [self ReturnVU2035InstMedian:@"A"]), (1.00/12.00));
        double PaidUpRTUO = 0.00;
        
        for (int i = 1; i <= FrontTerm_2035; i ++) {
            EGFundAllo_Percen = [self ReturnVU2035Fac:aaPolicyYear andMonth:i ]* 100;
            PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * temp2035Inst ;
        }
        
        tempValue = tempValue + PaidUpRTUO;
        return tempValue;
    
}

-(double)PaidUpOptionTable_2023_H_Balance :(double)aaPrevPaidUpOptionTable_2023_High andPolicyYear :(int)aaPolicyYear {
	NSDateFormatter* df = [[NSDateFormatter alloc] init];
	[df setDateFormat:@"dd/MM/yyyy"];
	NSDate* d = [df dateFromString:getPlanCommDate];
	NSDate* d2 = [df dateFromString:@"26/12/2023"];
	
	NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
	[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
	[formatter setMaximumFractionDigits:2];
	[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
	
	double RemainingTerm_2023 = 0.00;
	double FrontTerm_2023 = 0.00;
	double GMIFactor_FrontTermH2023 = 0.00;
	
	RemainingTerm_2023 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
	FrontTerm_2023 = ceil((RemainingTerm_2023 - round(ceil(RemainingTerm_2023)) + 1) * 12);
	double tempValue = aaPrevPaidUpOptionTable_2023_High * pow((1 + [self ReturnVU2023InstHigh:@"A"]), FrontTerm_2023/12.00) * (1 + [self ReturnLoyaltyBonus:aaPolicyYear]/100.00);
	
	if (ECAR60Exist == TRUE) {
		GMIFactor_FrontTermH2023 = (pow((1 + [self ReturnVU2023InstHigh:@"A"]),(FrontTerm_2023/12.00) ) - 1)/(pow((1 + [self ReturnVU2023InstHigh:@"A"]), 1.00/12.00) - 1);
		if (Age + aaPolicyYear > 60) {
			return tempValue + PrevPaidUpOptionTable_2023_High + GMIFactor_FrontTermH2023;
		}
	}
    
    double EGFundAllo_Percen = 0.00;
    double tempInst = pow((1.00 + [self ReturnVU2023InstHigh:@"A"]), (1.00/12.00));
    double PaidUpRTUO = 0.00;
    
    for (int i = 1; i <= FrontTerm_2023; i ++) {
        EGFundAllo_Percen = [self ReturnVU2023Fac] * 100;
        PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
    }
    
    tempValue = tempValue + PaidUpRTUO;
    return tempValue;
}

-(double)PaidUpOptionTable_2025_H_Balance :(double)aaPrevPaidUpOptionTable_2025_High andPolicyYear :(int)aaPolicyYear {
	NSDateFormatter* df = [[NSDateFormatter alloc] init];
	[df setDateFormat:@"dd/MM/yyyy"];
	NSDate* d = [df dateFromString:getPlanCommDate];
	NSDate* d2 = [df dateFromString:@"26/12/2025"];
	
	NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
	[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
	[formatter setMaximumFractionDigits:2];
	[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
	
	double RemainingTerm_2025 = 0.00;
	double FrontTerm_2025 = 0.00;
	double GMIFactor_FrontTermH2025 = 0.00;
	
	RemainingTerm_2025 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
	FrontTerm_2025 = ceil((RemainingTerm_2025 - round(ceil(RemainingTerm_2025)) + 1) * 12);
	double tempValue = aaPrevPaidUpOptionTable_2025_High * pow((1 + [self ReturnVU2025InstHigh:@"A"]), FrontTerm_2025/12.00) * (1 + [self ReturnLoyaltyBonus:aaPolicyYear]/100.00);
	
	if (ECAR60Exist == TRUE) {
		GMIFactor_FrontTermH2025 = (pow((1 + [self ReturnVU2025InstHigh:@"A"]),(FrontTerm_2025/12.00) ) - 1)/(pow((1 + [self ReturnVU2025InstHigh:@"A"]), 1.00/12.00) - 1);
		if (Age + aaPolicyYear > 60) {
            tempValue = tempValue + PrevPaidUpOptionTable_2025_High + GMIFactor_FrontTermH2025;
		}
        
	}
    
    
        double EGFundAllo_Percen = 0.00;
        double tempInst = pow((1.00 + [self ReturnVU2025InstHigh:@"A"]), (1.00/12.00));
        double PaidUpRTUO = 0.00;
        
        for (int i = 1; i <= FrontTerm_2025; i ++) {
            EGFundAllo_Percen = [self ReturnVU2025Fac:aaPolicyYear andMonth:i ]* 100;
            PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
        }
        
        tempValue = tempValue + PaidUpRTUO;
        return tempValue;
    
    
}

-(double)PaidUpOptionTable_2028_H_Balance :(double)aaPrevPaidUpOptionTable_2028_High andPolicyYear :(int)aaPolicyYear {
	NSDateFormatter* df = [[NSDateFormatter alloc] init];
	[df setDateFormat:@"dd/MM/yyyy"];
	NSDate* d = [df dateFromString:getPlanCommDate];
	NSDate* d2 = [df dateFromString:@"26/12/2028"];
	
	NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
	[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
	[formatter setMaximumFractionDigits:2];
	[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
	
	double RemainingTerm_2028 = 0.00;
	double FrontTerm_2028 = 0.00;
	double GMIFactor_FrontTermH2028 = 0.00;
	
	RemainingTerm_2028 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
	FrontTerm_2028 = ceil((RemainingTerm_2028 - round(ceil(RemainingTerm_2028)) + 1) * 12);
	double tempValue = aaPrevPaidUpOptionTable_2028_High * pow((1 + [self ReturnVU2028InstHigh:@"A"]), FrontTerm_2028/12.00) * (1 + [self ReturnLoyaltyBonus:aaPolicyYear]/100.00);
	
	if (ECAR60Exist == TRUE) {
		GMIFactor_FrontTermH2028 = (pow((1 + [self ReturnVU2028InstHigh:@"A"]),(FrontTerm_2028/12.00) ) - 1)/(pow((1 + [self ReturnVU2028InstHigh:@"A"]), 1.00/12.00) - 1);
		if (Age + aaPolicyYear > 60) {
			tempValue = tempValue + PrevPaidUpOptionTable_2028_High + GMIFactor_FrontTermH2028;
		}
        
	}
    
    
   
        double EGFundAllo_Percen = 0.00;
        double tempInst = pow((1.00 + [self ReturnVU2028InstHigh:@"A"]), (1.00/12.00));
        double PaidUpRTUO = 0.00;
        
        for (int i = 1; i <= FrontTerm_2028; i ++) {
            EGFundAllo_Percen = [self ReturnVU2028Fac:aaPolicyYear andMonth:i ]* 100;
            PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
        }
        
        tempValue = tempValue + PaidUpRTUO;
        return tempValue;
    
}

-(double)PaidUpOptionTable_2030_H_Balance :(double)aaPrevPaidUpOptionTable_2030_High andPolicyYear :(int)aaPolicyYear {
	NSDateFormatter* df = [[NSDateFormatter alloc] init];
	[df setDateFormat:@"dd/MM/yyyy"];
	NSDate* d = [df dateFromString:getPlanCommDate];
	NSDate* d2 = [df dateFromString:@"26/12/2030"];
	
	NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
	[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
	[formatter setMaximumFractionDigits:2];
	[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
	
	double RemainingTerm_2030 = 0.00;
	double FrontTerm_2030 = 0.00;
	double GMIFactor_FrontTermH2030 = 0.00;
	
	RemainingTerm_2030 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
	FrontTerm_2030 = ceil((RemainingTerm_2030 - round(ceil(RemainingTerm_2030)) + 1) * 12);
	double tempValue = aaPrevPaidUpOptionTable_2030_High * pow((1 + [self ReturnVU2030InstHigh:@"A"]), FrontTerm_2030/12.00) * (1 + [self ReturnLoyaltyBonus:aaPolicyYear]/100.00);
	
	if (ECAR60Exist == TRUE) {
		GMIFactor_FrontTermH2030 = (pow((1 + [self ReturnVU2030InstHigh:@"A"]),(FrontTerm_2030/12.00) ) - 1)/(pow((1 + [self ReturnVU2030InstHigh:@"A"]), 1.00/12.00) - 1);
		if (Age + aaPolicyYear > 60) {
			tempValue =  tempValue + PrevPaidUpOptionTable_2030_High + GMIFactor_FrontTermH2030;
		}
        
	}
    
    
   
        double EGFundAllo_Percen = 0.00;
        double tempInst = pow((1.00 + [self ReturnVU2030InstHigh:@"A"]), (1.00/12.00));
        double PaidUpRTUO = 0.00;
        
        for (int i = 1; i <= FrontTerm_2030; i ++) {
            EGFundAllo_Percen = [self ReturnVU2030Fac:aaPolicyYear andMonth:i ]* 100;
            PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
        }
        
        tempValue = tempValue + PaidUpRTUO;
        return tempValue;
   
}

-(double)PaidUpOptionTable_VentureGrowth_High:(double)aaValue andPolicyYear :(int)aaPolicyYear{
    
    double RemainingTerm_2023 = 0.00;
    double RemainingTerm_2025 = 0.00;
    double RemainingTerm_2028 = 0.00;
    double RemainingTerm_2030 = 0.00;
    double RemainingTerm_2035 = 0.00;
    double BackTerm_2023 = 0.00;
    double BackTerm_2025 = 0.00;
    double BackTerm_2028 = 0.00;
    double BackTerm_2030 = 0.00;
    double BackTerm_2035 = 0.00;
    double GMIFactor_BackTermH2023 = 0.00;
    double GMIFactor_BackTermH2025 = 0.00;
    double GMIFactor_BackTermH2028 = 0.00;
    double GMIFactor_BackTermH2030 = 0.00;
    double GMIFactor_BackTermH2035 = 0.00;
    
    double GMIFactor_FrontTermH2023 = 0.00;
    double GMIFactor_FrontTermH2025 = 0.00;
    double GMIFactor_FrontTermH2028 = 0.00;
    double GMIFactor_FrontTermH2030 = 0.00;
    double GMIFactor_FrontTermH2035 = 0.00;
    
    
    double temp = 0.00;
    double Value1 = aaValue * (1 + [self ReturnVUVentureGrowthInstHigh:aaPolicyYear andMOP:@"A"]) * (1 + [self ReturnLoyaltyBonus:aaPolicyYear]/100.00);
    double Value2 = VUVentureGrowthValue_EverCash60;
    double Value3 = 0.00;
    double Value4 = 0.00;
    
    if (aaPolicyYear == FundTerm2023) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2023"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        
        RemainingTerm_2023 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2023 = 12 - [self roundUp:((RemainingTerm_2023 - round(ceil(RemainingTerm_2023)) + 1) * 12) ];
        Value3 = ReinvestAmount2023toVentureGrowth_H * pow((1 + [self ReturnVUVentureGrowthInstHigh:aaPolicyYear andMOP:@"A"]), BackTerm_2023/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2023 = (pow((1 + [self ReturnVUVentureGrowthInstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2023 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVentureGrowthInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2023 = (pow((1 + [self ReturnVUVentureGrowthInstHigh:aaPolicyYear andMOP:@"A"]), ((12 - BackTerm_2023) / 12.00))   - 1) / (pow(1 + [self ReturnVUVentureGrowthInstHigh:aaPolicyYear andMOP:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVentureGrowthValue_EverCash60 * GMIFactor_BackTermH2023 + PrevVUVentureGrowthValue_EverCash60 * GMIFactor_FrontTermH2023 * pow((1 + [self ReturnVUVentureGrowthInstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2023 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVentureGrowthInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVentureGrowthFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
        
    }
    else if (aaPolicyYear == FundTerm2025) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2025"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        RemainingTerm_2025 = 0.00;
        BackTerm_2025 = 0.00;
        Value3 = 0.00;
        RemainingTerm_2025 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2025 = 12 - [self roundUp:((RemainingTerm_2025 - round(ceil(RemainingTerm_2025)) + 1) * 12) ];
        Value3 = ReinvestAmount2025toVentureGrowth_H * pow((1 + [self ReturnVUVentureGrowthInstHigh:aaPolicyYear andMOP:@"A"]), BackTerm_2025/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2025 = (pow((1 + [self ReturnVUVentureGrowthInstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2025 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVentureGrowthInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2025 = (pow((1 + [self ReturnVUVentureGrowthInstHigh:aaPolicyYear andMOP:@"A"]), ((12 - BackTerm_2025) / 12.00))   - 1) / (pow(1 + [self ReturnVUVentureGrowthInstHigh:aaPolicyYear andMOP:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVentureGrowthValue_EverCash60 * GMIFactor_BackTermH2025 + PrevVUVentureGrowthValue_EverCash60 * GMIFactor_FrontTermH2025 * pow((1 + [self ReturnVUVentureGrowthInstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2025 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVentureGrowthInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVentureGrowthFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
        
    }
    else if (aaPolicyYear == FundTerm2028) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2028"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        RemainingTerm_2028 = 0.00;
        BackTerm_2028 = 0.00;
        Value3 = 0.00;
        RemainingTerm_2028 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2028 = 12 - [self roundUp:((RemainingTerm_2028 - round(ceil(RemainingTerm_2028)) + 1) * 12) ];
        Value3 = ReinvestAmount2028toVentureGrowth_H * pow((1 + [self ReturnVUVentureGrowthInstHigh:aaPolicyYear andMOP:@"A"]), BackTerm_2028/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2028 = (pow((1 + [self ReturnVUVentureGrowthInstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2028 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVentureGrowthInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2028 = (pow((1 + [self ReturnVUVentureGrowthInstHigh:aaPolicyYear andMOP:@"A"]), ((12 - BackTerm_2028) / 12.00))   - 1) / (pow(1 + [self ReturnVUVentureGrowthInstHigh:aaPolicyYear andMOP:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVentureGrowthValue_EverCash60 * GMIFactor_BackTermH2028 + PrevVUVentureGrowthValue_EverCash60 * GMIFactor_FrontTermH2028 * pow((1 + [self ReturnVUVentureGrowthInstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2028 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVentureGrowthInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVentureGrowthFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
        
    }
    else if (aaPolicyYear == FundTerm2030) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2030"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        RemainingTerm_2030 = 0.00;
        BackTerm_2030 = 0.00;
        Value3 = 0.00;
        RemainingTerm_2030 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2030 = 12 - [self roundUp:((RemainingTerm_2030 - round(ceil(RemainingTerm_2030)) + 1) * 12) ];
        Value3 = ReinvestAmount2030toVentureGrowth_H * pow((1 + [self ReturnVUVentureGrowthInstHigh:aaPolicyYear andMOP:@"A"]), BackTerm_2030/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2030 = (pow((1 + [self ReturnVUVentureGrowthInstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2030 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVentureGrowthInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2030 = (pow((1 + [self ReturnVUVentureGrowthInstHigh:aaPolicyYear andMOP:@"A"]), ((12 - BackTerm_2030) / 12.00))   - 1) / (pow(1 + [self ReturnVUVentureGrowthInstHigh:aaPolicyYear andMOP:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVentureGrowthValue_EverCash60 * GMIFactor_BackTermH2030 + PrevVUVentureGrowthValue_EverCash60 * GMIFactor_FrontTermH2030 * pow((1 + [self ReturnVUVentureGrowthInstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2030 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVentureGrowthInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVentureGrowthFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
        
    }
    else if (aaPolicyYear == FundTerm2035) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2035"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        RemainingTerm_2035 = 0.00;
        BackTerm_2035 = 0.00;
        Value3 = 0.00;
        RemainingTerm_2035 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2035 = 12 - [self roundUp:((RemainingTerm_2035 - round(ceil(RemainingTerm_2035)) + 1) * 12) ];
        Value3 = ReinvestAmount2035toVentureGrowth_H * pow((1 + [self ReturnVUVentureGrowthInstHigh:aaPolicyYear andMOP:@"A"]), BackTerm_2035/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2035 = (pow((1 + [self ReturnVUVentureGrowthInstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2035 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVentureGrowthInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2035 = (pow((1 + [self ReturnVUVentureGrowthInstHigh:aaPolicyYear andMOP:@"A"]), ((12 - BackTerm_2035) / 12.00))   - 1) / (pow(1 + [self ReturnVUVentureGrowthInstHigh:aaPolicyYear andMOP:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVentureGrowthValue_EverCash60 * GMIFactor_BackTermH2035 + PrevVUVentureGrowthValue_EverCash60 * GMIFactor_FrontTermH2035 * pow((1 + [self ReturnVUVentureGrowthInstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2035 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVentureGrowthInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVentureGrowthFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i ]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
        
    }
    else{
        if (Age + aaPolicyYear < 60) {
            temp = Value1;
        }
        else if (Age + aaPolicyYear == 60){
            temp = Value1 + Value2;
        }
        else{
            temp = Value1 + Value2 * 12 * (1 + [self ReturnVUVentureGrowthInstHigh:aaPolicyYear andMOP:@"M"])/(pow((1 + [self ReturnVUVentureGrowthInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00)));
        }
        
        //if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
        double EGFundAllo_Percen = [self ReturnVUVentureGrowthFac:aaPolicyYear] * 100;
        double tempInst = [self ReturnVUVentureGrowthInstHigh:aaPolicyYear andMOP:@""];
        
        temp = temp + [self PaidUpOptionTable_RTUO:FALSE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:tempInst PolYear:aaPolicyYear andMonth:0];
        //}
    }
    
    return temp + VUVentureGrowthValue_EverCash1 + VUVentureGrowthValue_EverCash6;
    
}

-(double)PaidUpOptionTable_VentureGrowth_Median:(double)aaValue andPolicyYear :(int)aaPolicyYear {
    
    double RemainingTerm_2023 = 0.00;
    double RemainingTerm_2025 = 0.00;
    double RemainingTerm_2028 = 0.00;
    double RemainingTerm_2030 = 0.00;
    double RemainingTerm_2035 = 0.00;
    double BackTerm_2023 = 0.00;
    double BackTerm_2025 = 0.00;
    double BackTerm_2028 = 0.00;
    double BackTerm_2030 = 0.00;
    double BackTerm_2035 = 0.00;
    double GMIFactor_BackTermH2023 = 0.00;
    double GMIFactor_BackTermH2025 = 0.00;
    double GMIFactor_BackTermH2028 = 0.00;
    double GMIFactor_BackTermH2030 = 0.00;
    double GMIFactor_BackTermH2035 = 0.00;
    
    double GMIFactor_FrontTermH2023 = 0.00;
    double GMIFactor_FrontTermH2025 = 0.00;
    double GMIFactor_FrontTermH2028 = 0.00;
    double GMIFactor_FrontTermH2030 = 0.00;
    double GMIFactor_FrontTermH2035 = 0.00;
    
    
    double temp = 0.00;
    double Value1 = aaValue * (1 + [self ReturnVUVentureGrowthInstMedian:@"A"]) * (1 + [self ReturnLoyaltyBonus:aaPolicyYear]/100.00);
    double Value2 = VUVentureGrowthValue_EverCash60;
    double Value3 = 0.00;
    double Value4 = 0.00;
    
    if (aaPolicyYear == FundTerm2023) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2023"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        
        RemainingTerm_2023 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2023 = 12 - [self roundUp:((RemainingTerm_2023 - round(ceil(RemainingTerm_2023)) + 1) * 12) ];
        Value3 = ReinvestAmount2023toVentureGrowth_M * pow((1 + [self ReturnVUVentureGrowthInstMedian:@"A"]), BackTerm_2023/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2023 = (pow((1 + [self ReturnVUVentureGrowthInstMedian:@"A"]), (BackTerm_2023 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVentureGrowthInstMedian:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2023 = (pow((1 + [self ReturnVUVentureGrowthInstMedian:@"A"]), ((12 - BackTerm_2023) / 12.00))   - 1) / (pow(1 + [self ReturnVUVentureGrowthInstMedian:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVentureGrowthValue_EverCash60 * GMIFactor_BackTermH2023 + PrevVUVentureGrowthValue_EverCash60 * GMIFactor_FrontTermH2023 * pow((1 + [self ReturnVUVentureGrowthInstMedian:@"A"]), (BackTerm_2023 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVentureGrowthInstMedian:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVentureGrowthFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
        
    }
    else if (aaPolicyYear == FundTerm2025) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2025"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        RemainingTerm_2025 = 0.00;
        BackTerm_2025 = 0.00;
        Value3 = 0.00;
        RemainingTerm_2025 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2025 = 12 - [self roundUp:((RemainingTerm_2025 - round(ceil(RemainingTerm_2025)) + 1) * 12) ];
        Value3 = ReinvestAmount2025toVentureGrowth_M * pow((1 + [self ReturnVUVentureGrowthInstMedian:@"A"]), BackTerm_2025/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2025 = (pow((1 + [self ReturnVUVentureGrowthInstMedian:@"A"]), (BackTerm_2025 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVentureGrowthInstMedian:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2025 = (pow((1 + [self ReturnVUVentureGrowthInstMedian:@"A"]), ((12 - BackTerm_2025) / 12.00))   - 1) / (pow(1 + [self ReturnVUVentureGrowthInstMedian:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVentureGrowthValue_EverCash60 * GMIFactor_BackTermH2025 + PrevVUVentureGrowthValue_EverCash60 * GMIFactor_FrontTermH2025 * pow((1 + [self ReturnVUVentureGrowthInstMedian:@"A"]), (BackTerm_2025 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVentureGrowthInstMedian:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVentureGrowthFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
        
    }
    else if (aaPolicyYear == FundTerm2028) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2028"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        RemainingTerm_2028 = 0.00;
        BackTerm_2028 = 0.00;
        Value3 = 0.00;
        RemainingTerm_2028 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2028 = 12 - [self roundUp:((RemainingTerm_2028 - round(ceil(RemainingTerm_2028)) + 1) * 12) ];
        Value3 = ReinvestAmount2028toVentureGrowth_M * pow((1 + [self ReturnVUVentureGrowthInstMedian:@"A"]), BackTerm_2028/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2028 = (pow((1 + [self ReturnVUVentureGrowthInstMedian:@"A"]), (BackTerm_2028 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVentureGrowthInstMedian:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2028 = (pow((1 + [self ReturnVUVentureGrowthInstMedian:@"A"]), ((12 - BackTerm_2028) / 12.00))   - 1) / (pow(1 + [self ReturnVUVentureGrowthInstMedian:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVentureGrowthValue_EverCash60 * GMIFactor_BackTermH2028 + PrevVUVentureGrowthValue_EverCash60 * GMIFactor_FrontTermH2028 * pow((1 + [self ReturnVUVentureGrowthInstMedian:@"A"]), (BackTerm_2028 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVentureGrowthInstMedian:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVentureGrowthFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
        
        
    }
    else if (aaPolicyYear == FundTerm2030) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2030"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        RemainingTerm_2030 = 0.00;
        BackTerm_2030 = 0.00;
        Value3 = 0.00;
        RemainingTerm_2030 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2030 = 12 - [self roundUp:((RemainingTerm_2030 - round(ceil(RemainingTerm_2030)) + 1) * 12) ];
        Value3 = ReinvestAmount2030toVentureGrowth_M * pow((1 + [self ReturnVUVentureGrowthInstMedian:@"A"]), BackTerm_2030/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2030 = (pow((1 + [self ReturnVUVentureGrowthInstMedian:@"A"]), (BackTerm_2030 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVentureGrowthInstMedian:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2030 = (pow((1 + [self ReturnVUVentureGrowthInstMedian:@"A"]), ((12 - BackTerm_2030) / 12.00))   - 1) / (pow(1 + [self ReturnVUVentureGrowthInstMedian:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVentureGrowthValue_EverCash60 * GMIFactor_BackTermH2030 + PrevVUVentureGrowthValue_EverCash60 * GMIFactor_FrontTermH2030 * pow((1 + [self ReturnVUVentureGrowthInstMedian:@"A"]), (BackTerm_2030 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVentureGrowthInstMedian:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVentureGrowthFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
        
    }
    else if (aaPolicyYear == FundTerm2035) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2035"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        RemainingTerm_2035 = 0.00;
        BackTerm_2035 = 0.00;
        Value3 = 0.00;
        RemainingTerm_2035 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2035 = 12 - [self roundUp:((RemainingTerm_2035 - round(ceil(RemainingTerm_2035)) + 1) * 12) ];
        Value3 = ReinvestAmount2035toVentureGrowth_M * pow((1 + [self ReturnVUVentureGrowthInstMedian:@"A"]), BackTerm_2035/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2035 = (pow((1 + [self ReturnVUVentureGrowthInstMedian:@"A"]), (BackTerm_2035 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVentureGrowthInstMedian:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2035 = (pow((1 + [self ReturnVUVentureGrowthInstMedian:@"A"]), ((12 - BackTerm_2035) / 12.00))   - 1) / (pow(1 + [self ReturnVUVentureGrowthInstMedian:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVentureGrowthValue_EverCash60 * GMIFactor_BackTermH2035 + PrevVUVentureGrowthValue_EverCash60 * GMIFactor_FrontTermH2035 * pow((1 + [self ReturnVUVentureGrowthInstMedian:@"A"]), (BackTerm_2035 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVentureGrowthInstMedian:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVentureGrowthFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
    }
    else{
        if (Age + aaPolicyYear < 60) {
            temp = Value1;
        }
        else if (Age + aaPolicyYear == 60){
            temp = Value1 + Value2;
        }
        else{
            temp = Value1 + Value2 * 12 * (1 + [self ReturnVUVentureGrowthInstMedian:@"M"])/(pow((1 + [self ReturnVUVentureGrowthInstMedian:@"A"]), (1.00/12.00)));
        }
        
        //if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
        double EGFundAllo_Percen = [self ReturnVUVentureGrowthFac:aaPolicyYear] * 100;
        double tempInst = [self ReturnVUVentureGrowthInstMedian:@""];
        
        temp = temp + [self PaidUpOptionTable_RTUO:FALSE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:tempInst PolYear:aaPolicyYear andMonth:0];
        //}
    }
    
    return temp + VUVentureGrowthValue_EverCash1 + VUVentureGrowthValue_EverCash6;
    
}

-(double)PaidUpOptionTable_VentureGrowth_Low:(double)aaValue andPolicyYear :(int)aaPolicyYear {
    
    double RemainingTerm_2023 = 0.00;
    double RemainingTerm_2025 = 0.00;
    double RemainingTerm_2028 = 0.00;
    double RemainingTerm_2030 = 0.00;
    double RemainingTerm_2035 = 0.00;
    double BackTerm_2023 = 0.00;
    double BackTerm_2025 = 0.00;
    double BackTerm_2028 = 0.00;
    double BackTerm_2030 = 0.00;
    double BackTerm_2035 = 0.00;
    double GMIFactor_BackTermH2023 = 0.00;
    double GMIFactor_BackTermH2025 = 0.00;
    double GMIFactor_BackTermH2028 = 0.00;
    double GMIFactor_BackTermH2030 = 0.00;
    double GMIFactor_BackTermH2035 = 0.00;
    
    double GMIFactor_FrontTermH2023 = 0.00;
    double GMIFactor_FrontTermH2025 = 0.00;
    double GMIFactor_FrontTermH2028 = 0.00;
    double GMIFactor_FrontTermH2030 = 0.00;
    double GMIFactor_FrontTermH2035 = 0.00;
    
    
    double temp = 0.00;
    double Value1 = aaValue * (1 + [self ReturnVUVentureGrowthInstLow:@"A"]) * (1 + [self ReturnLoyaltyBonus:aaPolicyYear]/100.00);
    double Value2 = VUVentureGrowthValue_EverCash60;
    double Value3 = 0.00;
    double Value4 = 0.00;
    
    if (aaPolicyYear == FundTerm2023) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2023"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        
        RemainingTerm_2023 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2023 = 12 - [self roundUp:((RemainingTerm_2023 - round(ceil(RemainingTerm_2023)) + 1) * 12) ];
        Value3 = ReinvestAmount2023toVentureGrowth_L * pow((1 + [self ReturnVUVentureGrowthInstLow:@"A"]), BackTerm_2023/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2023 = (pow((1 + [self ReturnVUVentureGrowthInstLow:@"A"]), (BackTerm_2023 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVentureGrowthInstLow:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2023 = (pow((1 + [self ReturnVUVentureGrowthInstLow:@"A"]), ((12 - BackTerm_2023) / 12.00))   - 1) / (pow(1 + [self ReturnVUVentureGrowthInstLow:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVentureGrowthValue_EverCash60 * GMIFactor_BackTermH2023 + PrevVUVentureGrowthValue_EverCash60 * GMIFactor_FrontTermH2023 * pow((1 + [self ReturnVUVentureGrowthInstLow:@"A"]), (BackTerm_2023 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVentureGrowthInstLow:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVentureGrowthFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
    }
    else if (aaPolicyYear == FundTerm2025) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2025"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        RemainingTerm_2025 = 0.00;
        BackTerm_2025 = 0.00;
        Value3 = 0.00;
        RemainingTerm_2025 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2025 = 12 - [self roundUp:((RemainingTerm_2025 - round(ceil(RemainingTerm_2025)) + 1) * 12) ];
        Value3 = ReinvestAmount2025toVentureGrowth_L * pow((1 + [self ReturnVUVentureGrowthInstLow:@"A"]), BackTerm_2025/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2025 = (pow((1 + [self ReturnVUVentureGrowthInstLow:@"A"]), (BackTerm_2025 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVentureGrowthInstLow:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2025 = (pow((1 + [self ReturnVUVentureGrowthInstLow:@"A"]), ((12 - BackTerm_2025) / 12.00))   - 1) / (pow(1 + [self ReturnVUVentureGrowthInstLow:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVentureGrowthValue_EverCash60 * GMIFactor_BackTermH2025 + PrevVUVentureGrowthValue_EverCash60 * GMIFactor_FrontTermH2025 * pow((1 + [self ReturnVUVentureGrowthInstLow:@"A"]), (BackTerm_2025 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVentureGrowthInstLow:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVentureGrowthFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
        
    }
    else if (aaPolicyYear == FundTerm2028) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2028"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        RemainingTerm_2028 = 0.00;
        BackTerm_2028 = 0.00;
        Value3 = 0.00;
        RemainingTerm_2028 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2028 = 12 - [self roundUp:((RemainingTerm_2028 - round(ceil(RemainingTerm_2028)) + 1) * 12) ];
        Value3 = ReinvestAmount2028toVentureGrowth_L * pow((1 + [self ReturnVUVentureGrowthInstLow:@"A"]), BackTerm_2028/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2028 = (pow((1 + [self ReturnVUVentureGrowthInstLow:@"A"]), (BackTerm_2028 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVentureGrowthInstLow:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2028 = (pow((1 + [self ReturnVUVentureGrowthInstLow:@"A"]), ((12 - BackTerm_2028) / 12.00))   - 1) / (pow(1 + [self ReturnVUVentureGrowthInstLow:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVentureGrowthValue_EverCash60 * GMIFactor_BackTermH2028 + PrevVUVentureGrowthValue_EverCash60 * GMIFactor_FrontTermH2028 * pow((1 + [self ReturnVUVentureGrowthInstLow:@"A"]), (BackTerm_2028 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVentureGrowthInstLow:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVentureGrowthFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
        
    }
    else if (aaPolicyYear == FundTerm2030) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2030"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        RemainingTerm_2030 = 0.00;
        BackTerm_2030 = 0.00;
        Value3 = 0.00;
        RemainingTerm_2030 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2030 = 12 - [self roundUp:((RemainingTerm_2030 - round(ceil(RemainingTerm_2030)) + 1) * 12) ];
        Value3 = ReinvestAmount2030toVentureGrowth_L * pow((1 + [self ReturnVUVentureGrowthInstLow:@"A"]), BackTerm_2030/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2030 = (pow((1 + [self ReturnVUVentureGrowthInstLow:@"A"]), (BackTerm_2030 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVentureGrowthInstLow:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2030 = (pow((1 + [self ReturnVUVentureGrowthInstLow:@"A"]), ((12 - BackTerm_2030) / 12.00))   - 1) / (pow(1 + [self ReturnVUVentureGrowthInstLow:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVentureGrowthValue_EverCash60 * GMIFactor_BackTermH2030 + PrevVUVentureGrowthValue_EverCash60 * GMIFactor_FrontTermH2030 * pow((1 + [self ReturnVUVentureGrowthInstLow:@"A"]), (BackTerm_2030 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVentureGrowthInstLow:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVentureGrowthFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
    }
    else if (aaPolicyYear == FundTerm2035) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2035"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        RemainingTerm_2035 = 0.00;
        BackTerm_2035 = 0.00;
        Value3 = 0.00;
        RemainingTerm_2035 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2035 = 12 - [self roundUp:((RemainingTerm_2035 - round(ceil(RemainingTerm_2035)) + 1) * 12) ];
        Value3 = ReinvestAmount2035toVentureGrowth_L * pow((1 + [self ReturnVUVentureGrowthInstLow:@"A"]), BackTerm_2035/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2035 = (pow((1 + [self ReturnVUVentureGrowthInstLow:@"A"]), (BackTerm_2035 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVentureGrowthInstLow:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2035 = (pow((1 + [self ReturnVUVentureGrowthInstLow:@"A"]), ((12 - BackTerm_2035) / 12.00))   - 1) / (pow(1 + [self ReturnVUVentureGrowthInstLow:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVentureGrowthValue_EverCash60 * GMIFactor_BackTermH2035 + PrevVUVentureGrowthValue_EverCash60 * GMIFactor_FrontTermH2035 * pow((1 + [self ReturnVUVentureGrowthInstLow:@"A"]), (BackTerm_2035 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVentureGrowthInstLow:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVentureGrowthFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
    }
    else{
        if (Age + aaPolicyYear < 60) {
            temp = Value1;
        }
        else if (Age + aaPolicyYear == 60){
            temp = Value1 + Value2;
        }
        else{
            temp = Value1 + Value2 * 12 * (1 + [self ReturnVUVentureGrowthInstLow:@"M"])/(pow((1 + [self ReturnVUVentureGrowthInstLow:@"A"]), (1.00/12.00)));
        }
        
        //if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
        double EGFundAllo_Percen = [self ReturnVUVentureGrowthFac:aaPolicyYear] * 100;
        double tempInst = [self ReturnVUVentureGrowthInstLow:@""];
        
        temp = temp + [self PaidUpOptionTable_RTUO:FALSE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:tempInst PolYear:aaPolicyYear andMonth:0];
        //}
    }
    
    return temp + VUVentureGrowthValue_EverCash1 + VUVentureGrowthValue_EverCash6;
    
}

-(double)PaidUpOptionTable_VentureBlueChip_High:(double)aaValue andPolicyYear :(int)aaPolicyYear{
    
    double RemainingTerm_2023 = 0.00;
    double RemainingTerm_2025 = 0.00;
    double RemainingTerm_2028 = 0.00;
    double RemainingTerm_2030 = 0.00;
    double RemainingTerm_2035 = 0.00;
    double BackTerm_2023 = 0.00;
    double BackTerm_2025 = 0.00;
    double BackTerm_2028 = 0.00;
    double BackTerm_2030 = 0.00;
    double BackTerm_2035 = 0.00;
    double GMIFactor_BackTermH2023 = 0.00;
    double GMIFactor_BackTermH2025 = 0.00;
    double GMIFactor_BackTermH2028 = 0.00;
    double GMIFactor_BackTermH2030 = 0.00;
    double GMIFactor_BackTermH2035 = 0.00;
    
    double GMIFactor_FrontTermH2023 = 0.00;
    double GMIFactor_FrontTermH2025 = 0.00;
    double GMIFactor_FrontTermH2028 = 0.00;
    double GMIFactor_FrontTermH2030 = 0.00;
    double GMIFactor_FrontTermH2035 = 0.00;
    
    
    double temp = 0.00;
    double Value1 = aaValue * (1 + [self ReturnVUVentureBlueChipInstHigh:aaPolicyYear andMOP:@"A"]) * (1 + [self ReturnLoyaltyBonus:aaPolicyYear]/100.00);
    double Value2 = VUVentureBlueChipValue_EverCash60;
    double Value3 = 0.00;
    double Value4 = 0.00;
    
    if (aaPolicyYear == FundTerm2023) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2023"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        
        RemainingTerm_2023 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2023 = 12 - [self roundUp:((RemainingTerm_2023 - round(ceil(RemainingTerm_2023)) + 1) * 12) ];
        Value3 = ReinvestAmount2023toVentureBlueChip_H * pow((1 + [self ReturnVUVentureBlueChipInstHigh:aaPolicyYear andMOP:@"A"]), BackTerm_2023/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2023 = (pow((1 + [self ReturnVUVentureBlueChipInstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2023 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVentureBlueChipInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2023 = (pow((1 + [self ReturnVUVentureBlueChipInstHigh:aaPolicyYear andMOP:@"A"]), ((12 - BackTerm_2023) / 12.00))   - 1) / (pow(1 + [self ReturnVUVentureBlueChipInstHigh:aaPolicyYear andMOP:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVentureBlueChipValue_EverCash60 * GMIFactor_BackTermH2023 + PrevVUVentureBlueChipValue_EverCash60 * GMIFactor_FrontTermH2023 * pow((1 + [self ReturnVUVentureBlueChipInstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2023 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVentureBlueChipInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVentureBlueChipFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
        
    }
    else if (aaPolicyYear == FundTerm2025) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2025"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        RemainingTerm_2025 = 0.00;
        BackTerm_2025 = 0.00;
        Value3 = 0.00;
        RemainingTerm_2025 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2025 = 12 - [self roundUp:((RemainingTerm_2025 - round(ceil(RemainingTerm_2025)) + 1) * 12) ];
        Value3 = ReinvestAmount2025toVentureBlueChip_H * pow((1 + [self ReturnVUVentureBlueChipInstHigh:aaPolicyYear andMOP:@"A"]), BackTerm_2025/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2025 = (pow((1 + [self ReturnVUVentureBlueChipInstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2025 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVentureBlueChipInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2025 = (pow((1 + [self ReturnVUVentureBlueChipInstHigh:aaPolicyYear andMOP:@"A"]), ((12 - BackTerm_2025) / 12.00))   - 1) / (pow(1 + [self ReturnVUVentureBlueChipInstHigh:aaPolicyYear andMOP:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVentureBlueChipValue_EverCash60 * GMIFactor_BackTermH2025 + PrevVUVentureBlueChipValue_EverCash60 * GMIFactor_FrontTermH2025 * pow((1 + [self ReturnVUVentureBlueChipInstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2025 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVentureBlueChipInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVentureBlueChipFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
        
    }
    else if (aaPolicyYear == FundTerm2028) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2028"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        RemainingTerm_2028 = 0.00;
        BackTerm_2028 = 0.00;
        Value3 = 0.00;
        RemainingTerm_2028 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2028 = 12 - [self roundUp:((RemainingTerm_2028 - round(ceil(RemainingTerm_2028)) + 1) * 12) ];
        Value3 = ReinvestAmount2028toVentureBlueChip_H * pow((1 + [self ReturnVUVentureBlueChipInstHigh:aaPolicyYear andMOP:@"A"]), BackTerm_2028/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2028 = (pow((1 + [self ReturnVUVentureBlueChipInstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2028 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVentureBlueChipInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2028 = (pow((1 + [self ReturnVUVentureBlueChipInstHigh:aaPolicyYear andMOP:@"A"]), ((12 - BackTerm_2028) / 12.00))   - 1) / (pow(1 + [self ReturnVUVentureBlueChipInstHigh:aaPolicyYear andMOP:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVentureBlueChipValue_EverCash60 * GMIFactor_BackTermH2028 + PrevVUVentureBlueChipValue_EverCash60 * GMIFactor_FrontTermH2028 * pow((1 + [self ReturnVUVentureBlueChipInstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2028 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVentureBlueChipInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVentureBlueChipFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
        
    }
    else if (aaPolicyYear == FundTerm2030) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2030"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        RemainingTerm_2030 = 0.00;
        BackTerm_2030 = 0.00;
        Value3 = 0.00;
        RemainingTerm_2030 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2030 = 12 - [self roundUp:((RemainingTerm_2030 - round(ceil(RemainingTerm_2030)) + 1) * 12) ];
        Value3 = ReinvestAmount2030toVentureBlueChip_H * pow((1 + [self ReturnVUVentureBlueChipInstHigh:aaPolicyYear andMOP:@"A"]), BackTerm_2030/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2030 = (pow((1 + [self ReturnVUVentureBlueChipInstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2030 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVentureBlueChipInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2030 = (pow((1 + [self ReturnVUVentureBlueChipInstHigh:aaPolicyYear andMOP:@"A"]), ((12 - BackTerm_2030) / 12.00))   - 1) / (pow(1 + [self ReturnVUVentureBlueChipInstHigh:aaPolicyYear andMOP:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVentureBlueChipValue_EverCash60 * GMIFactor_BackTermH2030 + PrevVUVentureBlueChipValue_EverCash60 * GMIFactor_FrontTermH2030 * pow((1 + [self ReturnVUVentureBlueChipInstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2030 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVentureBlueChipInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVentureBlueChipFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
        
    }
    else if (aaPolicyYear == FundTerm2035) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2035"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        RemainingTerm_2035 = 0.00;
        BackTerm_2035 = 0.00;
        Value3 = 0.00;
        RemainingTerm_2035 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2035 = 12 - [self roundUp:((RemainingTerm_2035 - round(ceil(RemainingTerm_2035)) + 1) * 12) ];
        Value3 = ReinvestAmount2035toVentureBlueChip_H * pow((1 + [self ReturnVUVentureBlueChipInstHigh:aaPolicyYear andMOP:@"A"]), BackTerm_2035/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2035 = (pow((1 + [self ReturnVUVentureBlueChipInstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2035 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVentureBlueChipInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2035 = (pow((1 + [self ReturnVUVentureBlueChipInstHigh:aaPolicyYear andMOP:@"A"]), ((12 - BackTerm_2035) / 12.00))   - 1) / (pow(1 + [self ReturnVUVentureBlueChipInstHigh:aaPolicyYear andMOP:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVentureBlueChipValue_EverCash60 * GMIFactor_BackTermH2035 + PrevVUVentureBlueChipValue_EverCash60 * GMIFactor_FrontTermH2035 * pow((1 + [self ReturnVUVentureBlueChipInstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2035 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVentureBlueChipInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVentureBlueChipFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i ]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
        
    }
    else{
        if (Age + aaPolicyYear < 60) {
            temp = Value1;
        }
        else if (Age + aaPolicyYear == 60){
            temp = Value1 + Value2;
        }
        else{
            temp = Value1 + Value2 * 12 * (1 + [self ReturnVUVentureBlueChipInstHigh:aaPolicyYear andMOP:@"M"])/(pow((1 + [self ReturnVUVentureBlueChipInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00)));
        }
        
        //if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
        double EGFundAllo_Percen = [self ReturnVUVentureBlueChipFac:aaPolicyYear] * 100;
        double tempInst = [self ReturnVUVentureBlueChipInstHigh:aaPolicyYear andMOP:@""];
        
        temp = temp + [self PaidUpOptionTable_RTUO:FALSE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:tempInst PolYear:aaPolicyYear andMonth:0];
        //}
    }
    
    return temp + VUVentureBlueChipValue_EverCash1 + VUVentureBlueChipValue_EverCash6;
    
}

-(double)PaidUpOptionTable_VentureBlueChip_Median:(double)aaValue andPolicyYear :(int)aaPolicyYear {
    
    double RemainingTerm_2023 = 0.00;
    double RemainingTerm_2025 = 0.00;
    double RemainingTerm_2028 = 0.00;
    double RemainingTerm_2030 = 0.00;
    double RemainingTerm_2035 = 0.00;
    double BackTerm_2023 = 0.00;
    double BackTerm_2025 = 0.00;
    double BackTerm_2028 = 0.00;
    double BackTerm_2030 = 0.00;
    double BackTerm_2035 = 0.00;
    double GMIFactor_BackTermH2023 = 0.00;
    double GMIFactor_BackTermH2025 = 0.00;
    double GMIFactor_BackTermH2028 = 0.00;
    double GMIFactor_BackTermH2030 = 0.00;
    double GMIFactor_BackTermH2035 = 0.00;
    
    double GMIFactor_FrontTermH2023 = 0.00;
    double GMIFactor_FrontTermH2025 = 0.00;
    double GMIFactor_FrontTermH2028 = 0.00;
    double GMIFactor_FrontTermH2030 = 0.00;
    double GMIFactor_FrontTermH2035 = 0.00;
    
    
    double temp = 0.00;
    double Value1 = aaValue * (1 + [self ReturnVUVentureBlueChipInstMedian:@"A"]) * (1 + [self ReturnLoyaltyBonus:aaPolicyYear]/100.00);
    double Value2 = VUVentureBlueChipValue_EverCash60;
    double Value3 = 0.00;
    double Value4 = 0.00;
    
    if (aaPolicyYear == FundTerm2023) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2023"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        
        RemainingTerm_2023 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2023 = 12 - [self roundUp:((RemainingTerm_2023 - round(ceil(RemainingTerm_2023)) + 1) * 12) ];
        Value3 = ReinvestAmount2023toVentureBlueChip_M * pow((1 + [self ReturnVUVentureBlueChipInstMedian:@"A"]), BackTerm_2023/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2023 = (pow((1 + [self ReturnVUVentureBlueChipInstMedian:@"A"]), (BackTerm_2023 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVentureBlueChipInstMedian:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2023 = (pow((1 + [self ReturnVUVentureBlueChipInstMedian:@"A"]), ((12 - BackTerm_2023) / 12.00))   - 1) / (pow(1 + [self ReturnVUVentureBlueChipInstMedian:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVentureBlueChipValue_EverCash60 * GMIFactor_BackTermH2023 + PrevVUVentureBlueChipValue_EverCash60 * GMIFactor_FrontTermH2023 * pow((1 + [self ReturnVUVentureBlueChipInstMedian:@"A"]), (BackTerm_2023 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVentureBlueChipInstMedian:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVentureBlueChipFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
        
    }
    else if (aaPolicyYear == FundTerm2025) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2025"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        RemainingTerm_2025 = 0.00;
        BackTerm_2025 = 0.00;
        Value3 = 0.00;
        RemainingTerm_2025 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2025 = 12 - [self roundUp:((RemainingTerm_2025 - round(ceil(RemainingTerm_2025)) + 1) * 12) ];
        Value3 = ReinvestAmount2025toVentureBlueChip_M * pow((1 + [self ReturnVUVentureBlueChipInstMedian:@"A"]), BackTerm_2025/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2025 = (pow((1 + [self ReturnVUVentureBlueChipInstMedian:@"A"]), (BackTerm_2025 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVentureBlueChipInstMedian:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2025 = (pow((1 + [self ReturnVUVentureBlueChipInstMedian:@"A"]), ((12 - BackTerm_2025) / 12.00))   - 1) / (pow(1 + [self ReturnVUVentureBlueChipInstMedian:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVentureBlueChipValue_EverCash60 * GMIFactor_BackTermH2025 + PrevVUVentureBlueChipValue_EverCash60 * GMIFactor_FrontTermH2025 * pow((1 + [self ReturnVUVentureBlueChipInstMedian:@"A"]), (BackTerm_2025 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVentureBlueChipInstMedian:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVentureBlueChipFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
        
    }
    else if (aaPolicyYear == FundTerm2028) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2028"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        RemainingTerm_2028 = 0.00;
        BackTerm_2028 = 0.00;
        Value3 = 0.00;
        RemainingTerm_2028 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2028 = 12 - [self roundUp:((RemainingTerm_2028 - round(ceil(RemainingTerm_2028)) + 1) * 12) ];
        Value3 = ReinvestAmount2028toVentureBlueChip_M * pow((1 + [self ReturnVUVentureBlueChipInstMedian:@"A"]), BackTerm_2028/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2028 = (pow((1 + [self ReturnVUVentureBlueChipInstMedian:@"A"]), (BackTerm_2028 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVentureBlueChipInstMedian:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2028 = (pow((1 + [self ReturnVUVentureBlueChipInstMedian:@"A"]), ((12 - BackTerm_2028) / 12.00))   - 1) / (pow(1 + [self ReturnVUVentureBlueChipInstMedian:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVentureBlueChipValue_EverCash60 * GMIFactor_BackTermH2028 + PrevVUVentureBlueChipValue_EverCash60 * GMIFactor_FrontTermH2028 * pow((1 + [self ReturnVUVentureBlueChipInstMedian:@"A"]), (BackTerm_2028 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVentureBlueChipInstMedian:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVentureBlueChipFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
        
        
    }
    else if (aaPolicyYear == FundTerm2030) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2030"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        RemainingTerm_2030 = 0.00;
        BackTerm_2030 = 0.00;
        Value3 = 0.00;
        RemainingTerm_2030 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2030 = 12 - [self roundUp:((RemainingTerm_2030 - round(ceil(RemainingTerm_2030)) + 1) * 12) ];
        Value3 = ReinvestAmount2030toVentureBlueChip_M * pow((1 + [self ReturnVUVentureBlueChipInstMedian:@"A"]), BackTerm_2030/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2030 = (pow((1 + [self ReturnVUVentureBlueChipInstMedian:@"A"]), (BackTerm_2030 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVentureBlueChipInstMedian:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2030 = (pow((1 + [self ReturnVUVentureBlueChipInstMedian:@"A"]), ((12 - BackTerm_2030) / 12.00))   - 1) / (pow(1 + [self ReturnVUVentureBlueChipInstMedian:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVentureBlueChipValue_EverCash60 * GMIFactor_BackTermH2030 + PrevVUVentureBlueChipValue_EverCash60 * GMIFactor_FrontTermH2030 * pow((1 + [self ReturnVUVentureBlueChipInstMedian:@"A"]), (BackTerm_2030 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVentureBlueChipInstMedian:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVentureBlueChipFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
        
    }
    else if (aaPolicyYear == FundTerm2035) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2035"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        RemainingTerm_2035 = 0.00;
        BackTerm_2035 = 0.00;
        Value3 = 0.00;
        RemainingTerm_2035 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2035 = 12 - [self roundUp:((RemainingTerm_2035 - round(ceil(RemainingTerm_2035)) + 1) * 12) ];
        Value3 = ReinvestAmount2035toVentureBlueChip_M * pow((1 + [self ReturnVUVentureBlueChipInstMedian:@"A"]), BackTerm_2035/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2035 = (pow((1 + [self ReturnVUVentureBlueChipInstMedian:@"A"]), (BackTerm_2035 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVentureBlueChipInstMedian:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2035 = (pow((1 + [self ReturnVUVentureBlueChipInstMedian:@"A"]), ((12 - BackTerm_2035) / 12.00))   - 1) / (pow(1 + [self ReturnVUVentureBlueChipInstMedian:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVentureBlueChipValue_EverCash60 * GMIFactor_BackTermH2035 + PrevVUVentureBlueChipValue_EverCash60 * GMIFactor_FrontTermH2035 * pow((1 + [self ReturnVUVentureBlueChipInstMedian:@"A"]), (BackTerm_2035 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVentureBlueChipInstMedian:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVentureBlueChipFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
    }
    else{
        if (Age + aaPolicyYear < 60) {
            temp = Value1;
        }
        else if (Age + aaPolicyYear == 60){
            temp = Value1 + Value2;
        }
        else{
            temp = Value1 + Value2 * 12 * (1 + [self ReturnVUVentureBlueChipInstMedian:@"M"])/(pow((1 + [self ReturnVUVentureBlueChipInstMedian:@"A"]), (1.00/12.00)));
        }
        
        //if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
        double EGFundAllo_Percen = [self ReturnVUVentureBlueChipFac:aaPolicyYear] * 100;
        double tempInst = [self ReturnVUVentureBlueChipInstMedian:@""];
        
        temp = temp + [self PaidUpOptionTable_RTUO:FALSE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:tempInst PolYear:aaPolicyYear andMonth:0];
        //}
    }
    
    return temp + VUVentureBlueChipValue_EverCash1 + VUVentureBlueChipValue_EverCash6;
    
}

-(double)PaidUpOptionTable_VentureBlueChip_Low:(double)aaValue andPolicyYear :(int)aaPolicyYear {
    
    double RemainingTerm_2023 = 0.00;
    double RemainingTerm_2025 = 0.00;
    double RemainingTerm_2028 = 0.00;
    double RemainingTerm_2030 = 0.00;
    double RemainingTerm_2035 = 0.00;
    double BackTerm_2023 = 0.00;
    double BackTerm_2025 = 0.00;
    double BackTerm_2028 = 0.00;
    double BackTerm_2030 = 0.00;
    double BackTerm_2035 = 0.00;
    double GMIFactor_BackTermH2023 = 0.00;
    double GMIFactor_BackTermH2025 = 0.00;
    double GMIFactor_BackTermH2028 = 0.00;
    double GMIFactor_BackTermH2030 = 0.00;
    double GMIFactor_BackTermH2035 = 0.00;
    
    double GMIFactor_FrontTermH2023 = 0.00;
    double GMIFactor_FrontTermH2025 = 0.00;
    double GMIFactor_FrontTermH2028 = 0.00;
    double GMIFactor_FrontTermH2030 = 0.00;
    double GMIFactor_FrontTermH2035 = 0.00;
    
    
    double temp = 0.00;
    double Value1 = aaValue * (1 + [self ReturnVUVentureBlueChipInstLow:@"A"]) * (1 + [self ReturnLoyaltyBonus:aaPolicyYear]/100.00);
    double Value2 = VUVentureBlueChipValue_EverCash60;
    double Value3 = 0.00;
    double Value4 = 0.00;
    
    if (aaPolicyYear == FundTerm2023) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2023"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        
        RemainingTerm_2023 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2023 = 12 - [self roundUp:((RemainingTerm_2023 - round(ceil(RemainingTerm_2023)) + 1) * 12) ];
        Value3 = ReinvestAmount2023toVentureBlueChip_L * pow((1 + [self ReturnVUVentureBlueChipInstLow:@"A"]), BackTerm_2023/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2023 = (pow((1 + [self ReturnVUVentureBlueChipInstLow:@"A"]), (BackTerm_2023 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVentureBlueChipInstLow:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2023 = (pow((1 + [self ReturnVUVentureBlueChipInstLow:@"A"]), ((12 - BackTerm_2023) / 12.00))   - 1) / (pow(1 + [self ReturnVUVentureBlueChipInstLow:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVentureBlueChipValue_EverCash60 * GMIFactor_BackTermH2023 + PrevVUVentureBlueChipValue_EverCash60 * GMIFactor_FrontTermH2023 * pow((1 + [self ReturnVUVentureBlueChipInstLow:@"A"]), (BackTerm_2023 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVentureBlueChipInstLow:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVentureBlueChipFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
    }
    else if (aaPolicyYear == FundTerm2025) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2025"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        RemainingTerm_2025 = 0.00;
        BackTerm_2025 = 0.00;
        Value3 = 0.00;
        RemainingTerm_2025 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2025 = 12 - [self roundUp:((RemainingTerm_2025 - round(ceil(RemainingTerm_2025)) + 1) * 12) ];
        Value3 = ReinvestAmount2025toVentureBlueChip_L * pow((1 + [self ReturnVUVentureBlueChipInstLow:@"A"]), BackTerm_2025/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2025 = (pow((1 + [self ReturnVUVentureBlueChipInstLow:@"A"]), (BackTerm_2025 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVentureBlueChipInstLow:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2025 = (pow((1 + [self ReturnVUVentureBlueChipInstLow:@"A"]), ((12 - BackTerm_2025) / 12.00))   - 1) / (pow(1 + [self ReturnVUVentureBlueChipInstLow:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVentureBlueChipValue_EverCash60 * GMIFactor_BackTermH2025 + PrevVUVentureBlueChipValue_EverCash60 * GMIFactor_FrontTermH2025 * pow((1 + [self ReturnVUVentureBlueChipInstLow:@"A"]), (BackTerm_2025 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVentureBlueChipInstLow:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVentureBlueChipFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
        
    }
    else if (aaPolicyYear == FundTerm2028) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2028"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        RemainingTerm_2028 = 0.00;
        BackTerm_2028 = 0.00;
        Value3 = 0.00;
        RemainingTerm_2028 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2028 = 12 - [self roundUp:((RemainingTerm_2028 - round(ceil(RemainingTerm_2028)) + 1) * 12) ];
        Value3 = ReinvestAmount2028toVentureBlueChip_L * pow((1 + [self ReturnVUVentureBlueChipInstLow:@"A"]), BackTerm_2028/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2028 = (pow((1 + [self ReturnVUVentureBlueChipInstLow:@"A"]), (BackTerm_2028 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVentureBlueChipInstLow:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2028 = (pow((1 + [self ReturnVUVentureBlueChipInstLow:@"A"]), ((12 - BackTerm_2028) / 12.00))   - 1) / (pow(1 + [self ReturnVUVentureBlueChipInstLow:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVentureBlueChipValue_EverCash60 * GMIFactor_BackTermH2028 + PrevVUVentureBlueChipValue_EverCash60 * GMIFactor_FrontTermH2028 * pow((1 + [self ReturnVUVentureBlueChipInstLow:@"A"]), (BackTerm_2028 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVentureBlueChipInstLow:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVentureBlueChipFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
        
    }
    else if (aaPolicyYear == FundTerm2030) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2030"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        RemainingTerm_2030 = 0.00;
        BackTerm_2030 = 0.00;
        Value3 = 0.00;
        RemainingTerm_2030 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2030 = 12 - [self roundUp:((RemainingTerm_2030 - round(ceil(RemainingTerm_2030)) + 1) * 12) ];
        Value3 = ReinvestAmount2030toVentureBlueChip_L * pow((1 + [self ReturnVUVentureBlueChipInstLow:@"A"]), BackTerm_2030/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2030 = (pow((1 + [self ReturnVUVentureBlueChipInstLow:@"A"]), (BackTerm_2030 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVentureBlueChipInstLow:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2030 = (pow((1 + [self ReturnVUVentureBlueChipInstLow:@"A"]), ((12 - BackTerm_2030) / 12.00))   - 1) / (pow(1 + [self ReturnVUVentureBlueChipInstLow:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVentureBlueChipValue_EverCash60 * GMIFactor_BackTermH2030 + PrevVUVentureBlueChipValue_EverCash60 * GMIFactor_FrontTermH2030 * pow((1 + [self ReturnVUVentureBlueChipInstLow:@"A"]), (BackTerm_2030 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVentureBlueChipInstLow:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVentureBlueChipFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
    }
    else if (aaPolicyYear == FundTerm2035) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2035"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        RemainingTerm_2035 = 0.00;
        BackTerm_2035 = 0.00;
        Value3 = 0.00;
        RemainingTerm_2035 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2035 = 12 - [self roundUp:((RemainingTerm_2035 - round(ceil(RemainingTerm_2035)) + 1) * 12) ];
        Value3 = ReinvestAmount2035toVentureBlueChip_L * pow((1 + [self ReturnVUVentureBlueChipInstLow:@"A"]), BackTerm_2035/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2035 = (pow((1 + [self ReturnVUVentureBlueChipInstLow:@"A"]), (BackTerm_2035 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVentureBlueChipInstLow:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2035 = (pow((1 + [self ReturnVUVentureBlueChipInstLow:@"A"]), ((12 - BackTerm_2035) / 12.00))   - 1) / (pow(1 + [self ReturnVUVentureBlueChipInstLow:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVentureBlueChipValue_EverCash60 * GMIFactor_BackTermH2035 + PrevVUVentureBlueChipValue_EverCash60 * GMIFactor_FrontTermH2035 * pow((1 + [self ReturnVUVentureBlueChipInstLow:@"A"]), (BackTerm_2035 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVentureBlueChipInstLow:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVentureBlueChipFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
    }
    else{
        if (Age + aaPolicyYear < 60) {
            temp = Value1;
        }
        else if (Age + aaPolicyYear == 60){
            temp = Value1 + Value2;
        }
        else{
            temp = Value1 + Value2 * 12 * (1 + [self ReturnVUVentureBlueChipInstLow:@"M"])/(pow((1 + [self ReturnVUVentureBlueChipInstLow:@"A"]), (1.00/12.00)));
        }
        
        //if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
        double EGFundAllo_Percen = [self ReturnVUVentureBlueChipFac:aaPolicyYear] * 100;
        double tempInst = [self ReturnVUVentureBlueChipInstLow:@""];
        
        temp = temp + [self PaidUpOptionTable_RTUO:FALSE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:tempInst PolYear:aaPolicyYear andMonth:0];
        //}
    }
    
    return temp + VUVentureBlueChipValue_EverCash1 + VUVentureBlueChipValue_EverCash6;
    
}


-(double)PaidUpOptionTable_VentureDana_High:(double)aaValue andPolicyYear :(int)aaPolicyYear{
    
    double RemainingTerm_2023 = 0.00;
    double RemainingTerm_2025 = 0.00;
    double RemainingTerm_2028 = 0.00;
    double RemainingTerm_2030 = 0.00;
    double RemainingTerm_2035 = 0.00;
    double BackTerm_2023 = 0.00;
    double BackTerm_2025 = 0.00;
    double BackTerm_2028 = 0.00;
    double BackTerm_2030 = 0.00;
    double BackTerm_2035 = 0.00;
    double GMIFactor_BackTermH2023 = 0.00;
    double GMIFactor_BackTermH2025 = 0.00;
    double GMIFactor_BackTermH2028 = 0.00;
    double GMIFactor_BackTermH2030 = 0.00;
    double GMIFactor_BackTermH2035 = 0.00;
    
    double GMIFactor_FrontTermH2023 = 0.00;
    double GMIFactor_FrontTermH2025 = 0.00;
    double GMIFactor_FrontTermH2028 = 0.00;
    double GMIFactor_FrontTermH2030 = 0.00;
    double GMIFactor_FrontTermH2035 = 0.00;
    
    
    double temp = 0.00;
    double Value1 = aaValue * (1 + [self ReturnVUVentureDanaInstHigh:aaPolicyYear andMOP:@"A"]) * (1 + [self ReturnLoyaltyBonus:aaPolicyYear]/100.00);
    double Value2 = VUVentureDanaValue_EverCash60;
    double Value3 = 0.00;
    double Value4 = 0.00;
    
    if (aaPolicyYear == FundTerm2023) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2023"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        
        RemainingTerm_2023 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2023 = 12 - [self roundUp:((RemainingTerm_2023 - round(ceil(RemainingTerm_2023)) + 1) * 12) ];
        Value3 = ReinvestAmount2023toVentureDana_H * pow((1 + [self ReturnVUVentureDanaInstHigh:aaPolicyYear andMOP:@"A"]), BackTerm_2023/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2023 = (pow((1 + [self ReturnVUVentureDanaInstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2023 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVentureDanaInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2023 = (pow((1 + [self ReturnVUVentureDanaInstHigh:aaPolicyYear andMOP:@"A"]), ((12 - BackTerm_2023) / 12.00))   - 1) / (pow(1 + [self ReturnVUVentureDanaInstHigh:aaPolicyYear andMOP:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVentureDanaValue_EverCash60 * GMIFactor_BackTermH2023 + PrevVUVentureDanaValue_EverCash60 * GMIFactor_FrontTermH2023 * pow((1 + [self ReturnVUVentureDanaInstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2023 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVentureDanaInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVentureDanaFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
        
    }
    else if (aaPolicyYear == FundTerm2025) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2025"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        RemainingTerm_2025 = 0.00;
        BackTerm_2025 = 0.00;
        Value3 = 0.00;
        RemainingTerm_2025 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2025 = 12 - [self roundUp:((RemainingTerm_2025 - round(ceil(RemainingTerm_2025)) + 1) * 12) ];
        Value3 = ReinvestAmount2025toVentureDana_H * pow((1 + [self ReturnVUVentureDanaInstHigh:aaPolicyYear andMOP:@"A"]), BackTerm_2025/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2025 = (pow((1 + [self ReturnVUVentureDanaInstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2025 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVentureDanaInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2025 = (pow((1 + [self ReturnVUVentureDanaInstHigh:aaPolicyYear andMOP:@"A"]), ((12 - BackTerm_2025) / 12.00))   - 1) / (pow(1 + [self ReturnVUVentureDanaInstHigh:aaPolicyYear andMOP:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVentureDanaValue_EverCash60 * GMIFactor_BackTermH2025 + PrevVUVentureDanaValue_EverCash60 * GMIFactor_FrontTermH2025 * pow((1 + [self ReturnVUVentureDanaInstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2025 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVentureDanaInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVentureDanaFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
        
    }
    else if (aaPolicyYear == FundTerm2028) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2028"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        RemainingTerm_2028 = 0.00;
        BackTerm_2028 = 0.00;
        Value3 = 0.00;
        RemainingTerm_2028 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2028 = 12 - [self roundUp:((RemainingTerm_2028 - round(ceil(RemainingTerm_2028)) + 1) * 12) ];
        Value3 = ReinvestAmount2028toVentureDana_H * pow((1 + [self ReturnVUVentureDanaInstHigh:aaPolicyYear andMOP:@"A"]), BackTerm_2028/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2028 = (pow((1 + [self ReturnVUVentureDanaInstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2028 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVentureDanaInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2028 = (pow((1 + [self ReturnVUVentureDanaInstHigh:aaPolicyYear andMOP:@"A"]), ((12 - BackTerm_2028) / 12.00))   - 1) / (pow(1 + [self ReturnVUVentureDanaInstHigh:aaPolicyYear andMOP:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVentureDanaValue_EverCash60 * GMIFactor_BackTermH2028 + PrevVUVentureDanaValue_EverCash60 * GMIFactor_FrontTermH2028 * pow((1 + [self ReturnVUVentureDanaInstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2028 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVentureDanaInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVentureDanaFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
        
    }
    else if (aaPolicyYear == FundTerm2030) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2030"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        RemainingTerm_2030 = 0.00;
        BackTerm_2030 = 0.00;
        Value3 = 0.00;
        RemainingTerm_2030 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2030 = 12 - [self roundUp:((RemainingTerm_2030 - round(ceil(RemainingTerm_2030)) + 1) * 12) ];
        Value3 = ReinvestAmount2030toVentureDana_H * pow((1 + [self ReturnVUVentureDanaInstHigh:aaPolicyYear andMOP:@"A"]), BackTerm_2030/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2030 = (pow((1 + [self ReturnVUVentureDanaInstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2030 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVentureDanaInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2030 = (pow((1 + [self ReturnVUVentureDanaInstHigh:aaPolicyYear andMOP:@"A"]), ((12 - BackTerm_2030) / 12.00))   - 1) / (pow(1 + [self ReturnVUVentureDanaInstHigh:aaPolicyYear andMOP:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVentureDanaValue_EverCash60 * GMIFactor_BackTermH2030 + PrevVUVentureDanaValue_EverCash60 * GMIFactor_FrontTermH2030 * pow((1 + [self ReturnVUVentureDanaInstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2030 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVentureDanaInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVentureDanaFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
        
    }
    else if (aaPolicyYear == FundTerm2035) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2035"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        RemainingTerm_2035 = 0.00;
        BackTerm_2035 = 0.00;
        Value3 = 0.00;
        RemainingTerm_2035 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2035 = 12 - [self roundUp:((RemainingTerm_2035 - round(ceil(RemainingTerm_2035)) + 1) * 12) ];
        Value3 = ReinvestAmount2035toVentureDana_H * pow((1 + [self ReturnVUVentureDanaInstHigh:aaPolicyYear andMOP:@"A"]), BackTerm_2035/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2035 = (pow((1 + [self ReturnVUVentureDanaInstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2035 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVentureDanaInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2035 = (pow((1 + [self ReturnVUVentureDanaInstHigh:aaPolicyYear andMOP:@"A"]), ((12 - BackTerm_2035) / 12.00))   - 1) / (pow(1 + [self ReturnVUVentureDanaInstHigh:aaPolicyYear andMOP:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVentureDanaValue_EverCash60 * GMIFactor_BackTermH2035 + PrevVUVentureDanaValue_EverCash60 * GMIFactor_FrontTermH2035 * pow((1 + [self ReturnVUVentureDanaInstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2035 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVentureDanaInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVentureDanaFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i ]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
        
    }
    else{
        if (Age + aaPolicyYear < 60) {
            temp = Value1;
        }
        else if (Age + aaPolicyYear == 60){
            temp = Value1 + Value2;
        }
        else{
            temp = Value1 + Value2 * 12 * (1 + [self ReturnVUVentureDanaInstHigh:aaPolicyYear andMOP:@"M"])/(pow((1 + [self ReturnVUVentureDanaInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00)));
        }
        
        //if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
        double EGFundAllo_Percen = [self ReturnVUVentureDanaFac:aaPolicyYear] * 100;
        double tempInst = [self ReturnVUVentureDanaInstHigh:aaPolicyYear andMOP:@""];
        
        temp = temp + [self PaidUpOptionTable_RTUO:FALSE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:tempInst PolYear:aaPolicyYear andMonth:0];
        //}
    }
    
    return temp + VUVentureDanaValue_EverCash1 + VUVentureDanaValue_EverCash6;
    
}

-(double)PaidUpOptionTable_VentureDana_Median:(double)aaValue andPolicyYear :(int)aaPolicyYear {
    
    double RemainingTerm_2023 = 0.00;
    double RemainingTerm_2025 = 0.00;
    double RemainingTerm_2028 = 0.00;
    double RemainingTerm_2030 = 0.00;
    double RemainingTerm_2035 = 0.00;
    double BackTerm_2023 = 0.00;
    double BackTerm_2025 = 0.00;
    double BackTerm_2028 = 0.00;
    double BackTerm_2030 = 0.00;
    double BackTerm_2035 = 0.00;
    double GMIFactor_BackTermH2023 = 0.00;
    double GMIFactor_BackTermH2025 = 0.00;
    double GMIFactor_BackTermH2028 = 0.00;
    double GMIFactor_BackTermH2030 = 0.00;
    double GMIFactor_BackTermH2035 = 0.00;
    
    double GMIFactor_FrontTermH2023 = 0.00;
    double GMIFactor_FrontTermH2025 = 0.00;
    double GMIFactor_FrontTermH2028 = 0.00;
    double GMIFactor_FrontTermH2030 = 0.00;
    double GMIFactor_FrontTermH2035 = 0.00;
    
    
    double temp = 0.00;
    double Value1 = aaValue * (1 + [self ReturnVUVentureDanaInstMedian:@"A"]) * (1 + [self ReturnLoyaltyBonus:aaPolicyYear]/100.00);
    double Value2 = VUVentureDanaValue_EverCash60;
    double Value3 = 0.00;
    double Value4 = 0.00;
    
    if (aaPolicyYear == FundTerm2023) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2023"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        
        RemainingTerm_2023 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2023 = 12 - [self roundUp:((RemainingTerm_2023 - round(ceil(RemainingTerm_2023)) + 1) * 12) ];
        Value3 = ReinvestAmount2023toVentureDana_M * pow((1 + [self ReturnVUVentureDanaInstMedian:@"A"]), BackTerm_2023/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2023 = (pow((1 + [self ReturnVUVentureDanaInstMedian:@"A"]), (BackTerm_2023 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVentureDanaInstMedian:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2023 = (pow((1 + [self ReturnVUVentureDanaInstMedian:@"A"]), ((12 - BackTerm_2023) / 12.00))   - 1) / (pow(1 + [self ReturnVUVentureDanaInstMedian:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVentureDanaValue_EverCash60 * GMIFactor_BackTermH2023 + PrevVUVentureDanaValue_EverCash60 * GMIFactor_FrontTermH2023 * pow((1 + [self ReturnVUVentureDanaInstMedian:@"A"]), (BackTerm_2023 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVentureDanaInstMedian:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVentureDanaFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
        
    }
    else if (aaPolicyYear == FundTerm2025) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2025"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        RemainingTerm_2025 = 0.00;
        BackTerm_2025 = 0.00;
        Value3 = 0.00;
        RemainingTerm_2025 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2025 = 12 - [self roundUp:((RemainingTerm_2025 - round(ceil(RemainingTerm_2025)) + 1) * 12) ];
        Value3 = ReinvestAmount2025toVentureDana_M * pow((1 + [self ReturnVUVentureDanaInstMedian:@"A"]), BackTerm_2025/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2025 = (pow((1 + [self ReturnVUVentureDanaInstMedian:@"A"]), (BackTerm_2025 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVentureDanaInstMedian:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2025 = (pow((1 + [self ReturnVUVentureDanaInstMedian:@"A"]), ((12 - BackTerm_2025) / 12.00))   - 1) / (pow(1 + [self ReturnVUVentureDanaInstMedian:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVentureDanaValue_EverCash60 * GMIFactor_BackTermH2025 + PrevVUVentureDanaValue_EverCash60 * GMIFactor_FrontTermH2025 * pow((1 + [self ReturnVUVentureDanaInstMedian:@"A"]), (BackTerm_2025 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVentureDanaInstMedian:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVentureDanaFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
        
    }
    else if (aaPolicyYear == FundTerm2028) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2028"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        RemainingTerm_2028 = 0.00;
        BackTerm_2028 = 0.00;
        Value3 = 0.00;
        RemainingTerm_2028 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2028 = 12 - [self roundUp:((RemainingTerm_2028 - round(ceil(RemainingTerm_2028)) + 1) * 12) ];
        Value3 = ReinvestAmount2028toVentureDana_M * pow((1 + [self ReturnVUVentureDanaInstMedian:@"A"]), BackTerm_2028/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2028 = (pow((1 + [self ReturnVUVentureDanaInstMedian:@"A"]), (BackTerm_2028 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVentureDanaInstMedian:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2028 = (pow((1 + [self ReturnVUVentureDanaInstMedian:@"A"]), ((12 - BackTerm_2028) / 12.00))   - 1) / (pow(1 + [self ReturnVUVentureDanaInstMedian:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVentureDanaValue_EverCash60 * GMIFactor_BackTermH2028 + PrevVUVentureDanaValue_EverCash60 * GMIFactor_FrontTermH2028 * pow((1 + [self ReturnVUVentureDanaInstMedian:@"A"]), (BackTerm_2028 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVentureDanaInstMedian:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVentureDanaFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
        
        
    }
    else if (aaPolicyYear == FundTerm2030) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2030"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        RemainingTerm_2030 = 0.00;
        BackTerm_2030 = 0.00;
        Value3 = 0.00;
        RemainingTerm_2030 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2030 = 12 - [self roundUp:((RemainingTerm_2030 - round(ceil(RemainingTerm_2030)) + 1) * 12) ];
        Value3 = ReinvestAmount2030toVentureDana_M * pow((1 + [self ReturnVUVentureDanaInstMedian:@"A"]), BackTerm_2030/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2030 = (pow((1 + [self ReturnVUVentureDanaInstMedian:@"A"]), (BackTerm_2030 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVentureDanaInstMedian:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2030 = (pow((1 + [self ReturnVUVentureDanaInstMedian:@"A"]), ((12 - BackTerm_2030) / 12.00))   - 1) / (pow(1 + [self ReturnVUVentureDanaInstMedian:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVentureDanaValue_EverCash60 * GMIFactor_BackTermH2030 + PrevVUVentureDanaValue_EverCash60 * GMIFactor_FrontTermH2030 * pow((1 + [self ReturnVUVentureDanaInstMedian:@"A"]), (BackTerm_2030 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVentureDanaInstMedian:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVentureDanaFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
        
    }
    else if (aaPolicyYear == FundTerm2035) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2035"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        RemainingTerm_2035 = 0.00;
        BackTerm_2035 = 0.00;
        Value3 = 0.00;
        RemainingTerm_2035 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2035 = 12 - [self roundUp:((RemainingTerm_2035 - round(ceil(RemainingTerm_2035)) + 1) * 12) ];
        Value3 = ReinvestAmount2035toVentureDana_M * pow((1 + [self ReturnVUVentureDanaInstMedian:@"A"]), BackTerm_2035/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2035 = (pow((1 + [self ReturnVUVentureDanaInstMedian:@"A"]), (BackTerm_2035 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVentureDanaInstMedian:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2035 = (pow((1 + [self ReturnVUVentureDanaInstMedian:@"A"]), ((12 - BackTerm_2035) / 12.00))   - 1) / (pow(1 + [self ReturnVUVentureDanaInstMedian:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVentureDanaValue_EverCash60 * GMIFactor_BackTermH2035 + PrevVUVentureDanaValue_EverCash60 * GMIFactor_FrontTermH2035 * pow((1 + [self ReturnVUVentureDanaInstMedian:@"A"]), (BackTerm_2035 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVentureDanaInstMedian:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVentureDanaFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
    }
    else{
        if (Age + aaPolicyYear < 60) {
            temp = Value1;
        }
        else if (Age + aaPolicyYear == 60){
            temp = Value1 + Value2;
        }
        else{
            temp = Value1 + Value2 * 12 * (1 + [self ReturnVUVentureDanaInstMedian:@"M"])/(pow((1 + [self ReturnVUVentureDanaInstMedian:@"A"]), (1.00/12.00)));
        }
        
        //if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
        double EGFundAllo_Percen = [self ReturnVUVentureDanaFac:aaPolicyYear] * 100;
        double tempInst = [self ReturnVUVentureDanaInstMedian:@""];
        
        temp = temp + [self PaidUpOptionTable_RTUO:FALSE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:tempInst PolYear:aaPolicyYear andMonth:0];
        //}
    }
    
    return temp + VUVentureDanaValue_EverCash1 + VUVentureDanaValue_EverCash6;
    
}

-(double)PaidUpOptionTable_VentureDana_Low:(double)aaValue andPolicyYear :(int)aaPolicyYear {
    
    double RemainingTerm_2023 = 0.00;
    double RemainingTerm_2025 = 0.00;
    double RemainingTerm_2028 = 0.00;
    double RemainingTerm_2030 = 0.00;
    double RemainingTerm_2035 = 0.00;
    double BackTerm_2023 = 0.00;
    double BackTerm_2025 = 0.00;
    double BackTerm_2028 = 0.00;
    double BackTerm_2030 = 0.00;
    double BackTerm_2035 = 0.00;
    double GMIFactor_BackTermH2023 = 0.00;
    double GMIFactor_BackTermH2025 = 0.00;
    double GMIFactor_BackTermH2028 = 0.00;
    double GMIFactor_BackTermH2030 = 0.00;
    double GMIFactor_BackTermH2035 = 0.00;
    
    double GMIFactor_FrontTermH2023 = 0.00;
    double GMIFactor_FrontTermH2025 = 0.00;
    double GMIFactor_FrontTermH2028 = 0.00;
    double GMIFactor_FrontTermH2030 = 0.00;
    double GMIFactor_FrontTermH2035 = 0.00;
    
    
    double temp = 0.00;
    double Value1 = aaValue * (1 + [self ReturnVUVentureDanaInstLow:@"A"]) * (1 + [self ReturnLoyaltyBonus:aaPolicyYear]/100.00);
    double Value2 = VUVentureDanaValue_EverCash60;
    double Value3 = 0.00;
    double Value4 = 0.00;
    
    if (aaPolicyYear == FundTerm2023) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2023"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        
        RemainingTerm_2023 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2023 = 12 - [self roundUp:((RemainingTerm_2023 - round(ceil(RemainingTerm_2023)) + 1) * 12) ];
        Value3 = ReinvestAmount2023toVentureDana_L * pow((1 + [self ReturnVUVentureDanaInstLow:@"A"]), BackTerm_2023/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2023 = (pow((1 + [self ReturnVUVentureDanaInstLow:@"A"]), (BackTerm_2023 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVentureDanaInstLow:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2023 = (pow((1 + [self ReturnVUVentureDanaInstLow:@"A"]), ((12 - BackTerm_2023) / 12.00))   - 1) / (pow(1 + [self ReturnVUVentureDanaInstLow:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVentureDanaValue_EverCash60 * GMIFactor_BackTermH2023 + PrevVUVentureDanaValue_EverCash60 * GMIFactor_FrontTermH2023 * pow((1 + [self ReturnVUVentureDanaInstLow:@"A"]), (BackTerm_2023 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVentureDanaInstLow:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVentureDanaFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
    }
    else if (aaPolicyYear == FundTerm2025) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2025"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        RemainingTerm_2025 = 0.00;
        BackTerm_2025 = 0.00;
        Value3 = 0.00;
        RemainingTerm_2025 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2025 = 12 - [self roundUp:((RemainingTerm_2025 - round(ceil(RemainingTerm_2025)) + 1) * 12) ];
        Value3 = ReinvestAmount2025toVentureDana_L * pow((1 + [self ReturnVUVentureDanaInstLow:@"A"]), BackTerm_2025/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2025 = (pow((1 + [self ReturnVUVentureDanaInstLow:@"A"]), (BackTerm_2025 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVentureDanaInstLow:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2025 = (pow((1 + [self ReturnVUVentureDanaInstLow:@"A"]), ((12 - BackTerm_2025) / 12.00))   - 1) / (pow(1 + [self ReturnVUVentureDanaInstLow:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVentureDanaValue_EverCash60 * GMIFactor_BackTermH2025 + PrevVUVentureDanaValue_EverCash60 * GMIFactor_FrontTermH2025 * pow((1 + [self ReturnVUVentureDanaInstLow:@"A"]), (BackTerm_2025 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVentureDanaInstLow:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVentureDanaFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
        
    }
    else if (aaPolicyYear == FundTerm2028) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2028"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        RemainingTerm_2028 = 0.00;
        BackTerm_2028 = 0.00;
        Value3 = 0.00;
        RemainingTerm_2028 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2028 = 12 - [self roundUp:((RemainingTerm_2028 - round(ceil(RemainingTerm_2028)) + 1) * 12) ];
        Value3 = ReinvestAmount2028toVentureDana_L * pow((1 + [self ReturnVUVentureDanaInstLow:@"A"]), BackTerm_2028/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2028 = (pow((1 + [self ReturnVUVentureDanaInstLow:@"A"]), (BackTerm_2028 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVentureDanaInstLow:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2028 = (pow((1 + [self ReturnVUVentureDanaInstLow:@"A"]), ((12 - BackTerm_2028) / 12.00))   - 1) / (pow(1 + [self ReturnVUVentureDanaInstLow:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVentureDanaValue_EverCash60 * GMIFactor_BackTermH2028 + PrevVUVentureDanaValue_EverCash60 * GMIFactor_FrontTermH2028 * pow((1 + [self ReturnVUVentureDanaInstLow:@"A"]), (BackTerm_2028 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVentureDanaInstLow:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVentureDanaFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
        
    }
    else if (aaPolicyYear == FundTerm2030) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2030"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        RemainingTerm_2030 = 0.00;
        BackTerm_2030 = 0.00;
        Value3 = 0.00;
        RemainingTerm_2030 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2030 = 12 - [self roundUp:((RemainingTerm_2030 - round(ceil(RemainingTerm_2030)) + 1) * 12) ];
        Value3 = ReinvestAmount2030toVentureDana_L * pow((1 + [self ReturnVUVentureDanaInstLow:@"A"]), BackTerm_2030/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2030 = (pow((1 + [self ReturnVUVentureDanaInstLow:@"A"]), (BackTerm_2030 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVentureDanaInstLow:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2030 = (pow((1 + [self ReturnVUVentureDanaInstLow:@"A"]), ((12 - BackTerm_2030) / 12.00))   - 1) / (pow(1 + [self ReturnVUVentureDanaInstLow:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVentureDanaValue_EverCash60 * GMIFactor_BackTermH2030 + PrevVUVentureDanaValue_EverCash60 * GMIFactor_FrontTermH2030 * pow((1 + [self ReturnVUVentureDanaInstLow:@"A"]), (BackTerm_2030 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVentureDanaInstLow:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVentureDanaFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
    }
    else if (aaPolicyYear == FundTerm2035) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2035"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        RemainingTerm_2035 = 0.00;
        BackTerm_2035 = 0.00;
        Value3 = 0.00;
        RemainingTerm_2035 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2035 = 12 - [self roundUp:((RemainingTerm_2035 - round(ceil(RemainingTerm_2035)) + 1) * 12) ];
        Value3 = ReinvestAmount2035toVentureDana_L * pow((1 + [self ReturnVUVentureDanaInstLow:@"A"]), BackTerm_2035/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2035 = (pow((1 + [self ReturnVUVentureDanaInstLow:@"A"]), (BackTerm_2035 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVentureDanaInstLow:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2035 = (pow((1 + [self ReturnVUVentureDanaInstLow:@"A"]), ((12 - BackTerm_2035) / 12.00))   - 1) / (pow(1 + [self ReturnVUVentureDanaInstLow:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVentureDanaValue_EverCash60 * GMIFactor_BackTermH2035 + PrevVUVentureDanaValue_EverCash60 * GMIFactor_FrontTermH2035 * pow((1 + [self ReturnVUVentureDanaInstLow:@"A"]), (BackTerm_2035 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVentureDanaInstLow:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVentureDanaFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
    }
    else{
        if (Age + aaPolicyYear < 60) {
            temp = Value1;
        }
        else if (Age + aaPolicyYear == 60){
            temp = Value1 + Value2;
        }
        else{
            temp = Value1 + Value2 * 12 * (1 + [self ReturnVUVentureDanaInstLow:@"M"])/(pow((1 + [self ReturnVUVentureDanaInstLow:@"A"]), (1.00/12.00)));
        }
        
        //if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
        double EGFundAllo_Percen = [self ReturnVUVentureDanaFac:aaPolicyYear] * 100;
        double tempInst = [self ReturnVUVentureDanaInstLow:@""];
        
        temp = temp + [self PaidUpOptionTable_RTUO:FALSE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:tempInst PolYear:aaPolicyYear andMonth:0];
        //}
    }
    
    return temp + VUVentureDanaValue_EverCash1 + VUVentureDanaValue_EverCash6;
    
}

-(double)PaidUpOptionTable_VentureManaged_High:(double)aaValue andPolicyYear :(int)aaPolicyYear{
    
    double RemainingTerm_2023 = 0.00;
    double RemainingTerm_2025 = 0.00;
    double RemainingTerm_2028 = 0.00;
    double RemainingTerm_2030 = 0.00;
    double RemainingTerm_2035 = 0.00;
    double BackTerm_2023 = 0.00;
    double BackTerm_2025 = 0.00;
    double BackTerm_2028 = 0.00;
    double BackTerm_2030 = 0.00;
    double BackTerm_2035 = 0.00;
    double GMIFactor_BackTermH2023 = 0.00;
    double GMIFactor_BackTermH2025 = 0.00;
    double GMIFactor_BackTermH2028 = 0.00;
    double GMIFactor_BackTermH2030 = 0.00;
    double GMIFactor_BackTermH2035 = 0.00;
    
    double GMIFactor_FrontTermH2023 = 0.00;
    double GMIFactor_FrontTermH2025 = 0.00;
    double GMIFactor_FrontTermH2028 = 0.00;
    double GMIFactor_FrontTermH2030 = 0.00;
    double GMIFactor_FrontTermH2035 = 0.00;
    
    
    double temp = 0.00;
    double Value1 = aaValue * (1 + [self ReturnVUVentureManagedInstHigh:aaPolicyYear andMOP:@"A"]) * (1 + [self ReturnLoyaltyBonus:aaPolicyYear]/100.00);
    double Value2 = VUVentureManagedValue_EverCash60;
    double Value3 = 0.00;
    double Value4 = 0.00;
    
    if (aaPolicyYear == FundTerm2023) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2023"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        
        RemainingTerm_2023 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2023 = 12 - [self roundUp:((RemainingTerm_2023 - round(ceil(RemainingTerm_2023)) + 1) * 12) ];
        Value3 = ReinvestAmount2023toVentureManaged_H * pow((1 + [self ReturnVUVentureManagedInstHigh:aaPolicyYear andMOP:@"A"]), BackTerm_2023/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2023 = (pow((1 + [self ReturnVUVentureManagedInstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2023 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVentureManagedInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2023 = (pow((1 + [self ReturnVUVentureManagedInstHigh:aaPolicyYear andMOP:@"A"]), ((12 - BackTerm_2023) / 12.00))   - 1) / (pow(1 + [self ReturnVUVentureManagedInstHigh:aaPolicyYear andMOP:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVentureManagedValue_EverCash60 * GMIFactor_BackTermH2023 + PrevVUVentureManagedValue_EverCash60 * GMIFactor_FrontTermH2023 * pow((1 + [self ReturnVUVentureManagedInstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2023 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVentureManagedInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVentureManagedFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
        
    }
    else if (aaPolicyYear == FundTerm2025) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2025"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        RemainingTerm_2025 = 0.00;
        BackTerm_2025 = 0.00;
        Value3 = 0.00;
        RemainingTerm_2025 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2025 = 12 - [self roundUp:((RemainingTerm_2025 - round(ceil(RemainingTerm_2025)) + 1) * 12) ];
        Value3 = ReinvestAmount2025toVentureManaged_H * pow((1 + [self ReturnVUVentureManagedInstHigh:aaPolicyYear andMOP:@"A"]), BackTerm_2025/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2025 = (pow((1 + [self ReturnVUVentureManagedInstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2025 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVentureManagedInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2025 = (pow((1 + [self ReturnVUVentureManagedInstHigh:aaPolicyYear andMOP:@"A"]), ((12 - BackTerm_2025) / 12.00))   - 1) / (pow(1 + [self ReturnVUVentureManagedInstHigh:aaPolicyYear andMOP:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVentureManagedValue_EverCash60 * GMIFactor_BackTermH2025 + PrevVUVentureManagedValue_EverCash60 * GMIFactor_FrontTermH2025 * pow((1 + [self ReturnVUVentureManagedInstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2025 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVentureManagedInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVentureManagedFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
        
    }
    else if (aaPolicyYear == FundTerm2028) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2028"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        RemainingTerm_2028 = 0.00;
        BackTerm_2028 = 0.00;
        Value3 = 0.00;
        RemainingTerm_2028 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2028 = 12 - [self roundUp:((RemainingTerm_2028 - round(ceil(RemainingTerm_2028)) + 1) * 12) ];
        Value3 = ReinvestAmount2028toVentureManaged_H * pow((1 + [self ReturnVUVentureManagedInstHigh:aaPolicyYear andMOP:@"A"]), BackTerm_2028/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2028 = (pow((1 + [self ReturnVUVentureManagedInstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2028 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVentureManagedInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2028 = (pow((1 + [self ReturnVUVentureManagedInstHigh:aaPolicyYear andMOP:@"A"]), ((12 - BackTerm_2028) / 12.00))   - 1) / (pow(1 + [self ReturnVUVentureManagedInstHigh:aaPolicyYear andMOP:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVentureManagedValue_EverCash60 * GMIFactor_BackTermH2028 + PrevVUVentureManagedValue_EverCash60 * GMIFactor_FrontTermH2028 * pow((1 + [self ReturnVUVentureManagedInstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2028 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVentureManagedInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVentureManagedFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
        
    }
    else if (aaPolicyYear == FundTerm2030) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2030"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        RemainingTerm_2030 = 0.00;
        BackTerm_2030 = 0.00;
        Value3 = 0.00;
        RemainingTerm_2030 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2030 = 12 - [self roundUp:((RemainingTerm_2030 - round(ceil(RemainingTerm_2030)) + 1) * 12) ];
        Value3 = ReinvestAmount2030toVentureManaged_H * pow((1 + [self ReturnVUVentureManagedInstHigh:aaPolicyYear andMOP:@"A"]), BackTerm_2030/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2030 = (pow((1 + [self ReturnVUVentureManagedInstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2030 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVentureManagedInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2030 = (pow((1 + [self ReturnVUVentureManagedInstHigh:aaPolicyYear andMOP:@"A"]), ((12 - BackTerm_2030) / 12.00))   - 1) / (pow(1 + [self ReturnVUVentureManagedInstHigh:aaPolicyYear andMOP:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVentureManagedValue_EverCash60 * GMIFactor_BackTermH2030 + PrevVUVentureManagedValue_EverCash60 * GMIFactor_FrontTermH2030 * pow((1 + [self ReturnVUVentureManagedInstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2030 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVentureManagedInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVentureManagedFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
        
    }
    else if (aaPolicyYear == FundTerm2035) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2035"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        RemainingTerm_2035 = 0.00;
        BackTerm_2035 = 0.00;
        Value3 = 0.00;
        RemainingTerm_2035 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2035 = 12 - [self roundUp:((RemainingTerm_2035 - round(ceil(RemainingTerm_2035)) + 1) * 12) ];
        Value3 = ReinvestAmount2035toVentureManaged_H * pow((1 + [self ReturnVUVentureManagedInstHigh:aaPolicyYear andMOP:@"A"]), BackTerm_2035/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2035 = (pow((1 + [self ReturnVUVentureManagedInstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2035 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVentureManagedInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2035 = (pow((1 + [self ReturnVUVentureManagedInstHigh:aaPolicyYear andMOP:@"A"]), ((12 - BackTerm_2035) / 12.00))   - 1) / (pow(1 + [self ReturnVUVentureManagedInstHigh:aaPolicyYear andMOP:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVentureManagedValue_EverCash60 * GMIFactor_BackTermH2035 + PrevVUVentureManagedValue_EverCash60 * GMIFactor_FrontTermH2035 * pow((1 + [self ReturnVUVentureManagedInstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2035 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVentureManagedInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVentureManagedFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i ]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
        
    }
    else{
        if (Age + aaPolicyYear < 60) {
            temp = Value1;
        }
        else if (Age + aaPolicyYear == 60){
            temp = Value1 + Value2;
        }
        else{
            temp = Value1 + Value2 * 12 * (1 + [self ReturnVUVentureManagedInstHigh:aaPolicyYear andMOP:@"M"])/(pow((1 + [self ReturnVUVentureManagedInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00)));
        }
        
        //if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
        double EGFundAllo_Percen = [self ReturnVUVentureManagedFac:aaPolicyYear] * 100;
        double tempInst = [self ReturnVUVentureManagedInstHigh:aaPolicyYear andMOP:@""];
        
        temp = temp + [self PaidUpOptionTable_RTUO:FALSE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:tempInst PolYear:aaPolicyYear andMonth:0];
        //}
    }
    
    return temp + VUVentureManagedValue_EverCash1 + VUVentureManagedValue_EverCash6;
    
}

-(double)PaidUpOptionTable_VentureManaged_Median:(double)aaValue andPolicyYear :(int)aaPolicyYear {
    
    double RemainingTerm_2023 = 0.00;
    double RemainingTerm_2025 = 0.00;
    double RemainingTerm_2028 = 0.00;
    double RemainingTerm_2030 = 0.00;
    double RemainingTerm_2035 = 0.00;
    double BackTerm_2023 = 0.00;
    double BackTerm_2025 = 0.00;
    double BackTerm_2028 = 0.00;
    double BackTerm_2030 = 0.00;
    double BackTerm_2035 = 0.00;
    double GMIFactor_BackTermH2023 = 0.00;
    double GMIFactor_BackTermH2025 = 0.00;
    double GMIFactor_BackTermH2028 = 0.00;
    double GMIFactor_BackTermH2030 = 0.00;
    double GMIFactor_BackTermH2035 = 0.00;
    
    double GMIFactor_FrontTermH2023 = 0.00;
    double GMIFactor_FrontTermH2025 = 0.00;
    double GMIFactor_FrontTermH2028 = 0.00;
    double GMIFactor_FrontTermH2030 = 0.00;
    double GMIFactor_FrontTermH2035 = 0.00;
    
    
    double temp = 0.00;
    double Value1 = aaValue * (1 + [self ReturnVUVentureManagedInstMedian:@"A"]) * (1 + [self ReturnLoyaltyBonus:aaPolicyYear]/100.00);
    double Value2 = VUVentureManagedValue_EverCash60;
    double Value3 = 0.00;
    double Value4 = 0.00;
    
    if (aaPolicyYear == FundTerm2023) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2023"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        
        RemainingTerm_2023 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2023 = 12 - [self roundUp:((RemainingTerm_2023 - round(ceil(RemainingTerm_2023)) + 1) * 12) ];
        Value3 = ReinvestAmount2023toVentureManaged_M * pow((1 + [self ReturnVUVentureManagedInstMedian:@"A"]), BackTerm_2023/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2023 = (pow((1 + [self ReturnVUVentureManagedInstMedian:@"A"]), (BackTerm_2023 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVentureManagedInstMedian:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2023 = (pow((1 + [self ReturnVUVentureManagedInstMedian:@"A"]), ((12 - BackTerm_2023) / 12.00))   - 1) / (pow(1 + [self ReturnVUVentureManagedInstMedian:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVentureManagedValue_EverCash60 * GMIFactor_BackTermH2023 + PrevVUVentureManagedValue_EverCash60 * GMIFactor_FrontTermH2023 * pow((1 + [self ReturnVUVentureManagedInstMedian:@"A"]), (BackTerm_2023 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVentureManagedInstMedian:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVentureManagedFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
        
    }
    else if (aaPolicyYear == FundTerm2025) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2025"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        RemainingTerm_2025 = 0.00;
        BackTerm_2025 = 0.00;
        Value3 = 0.00;
        RemainingTerm_2025 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2025 = 12 - [self roundUp:((RemainingTerm_2025 - round(ceil(RemainingTerm_2025)) + 1) * 12) ];
        Value3 = ReinvestAmount2025toVentureManaged_M * pow((1 + [self ReturnVUVentureManagedInstMedian:@"A"]), BackTerm_2025/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2025 = (pow((1 + [self ReturnVUVentureManagedInstMedian:@"A"]), (BackTerm_2025 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVentureManagedInstMedian:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2025 = (pow((1 + [self ReturnVUVentureManagedInstMedian:@"A"]), ((12 - BackTerm_2025) / 12.00))   - 1) / (pow(1 + [self ReturnVUVentureManagedInstMedian:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVentureManagedValue_EverCash60 * GMIFactor_BackTermH2025 + PrevVUVentureManagedValue_EverCash60 * GMIFactor_FrontTermH2025 * pow((1 + [self ReturnVUVentureManagedInstMedian:@"A"]), (BackTerm_2025 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVentureManagedInstMedian:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVentureManagedFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
        
    }
    else if (aaPolicyYear == FundTerm2028) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2028"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        RemainingTerm_2028 = 0.00;
        BackTerm_2028 = 0.00;
        Value3 = 0.00;
        RemainingTerm_2028 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2028 = 12 - [self roundUp:((RemainingTerm_2028 - round(ceil(RemainingTerm_2028)) + 1) * 12) ];
        Value3 = ReinvestAmount2028toVentureManaged_M * pow((1 + [self ReturnVUVentureManagedInstMedian:@"A"]), BackTerm_2028/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2028 = (pow((1 + [self ReturnVUVentureManagedInstMedian:@"A"]), (BackTerm_2028 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVentureManagedInstMedian:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2028 = (pow((1 + [self ReturnVUVentureManagedInstMedian:@"A"]), ((12 - BackTerm_2028) / 12.00))   - 1) / (pow(1 + [self ReturnVUVentureManagedInstMedian:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVentureManagedValue_EverCash60 * GMIFactor_BackTermH2028 + PrevVUVentureManagedValue_EverCash60 * GMIFactor_FrontTermH2028 * pow((1 + [self ReturnVUVentureManagedInstMedian:@"A"]), (BackTerm_2028 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVentureManagedInstMedian:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVentureManagedFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
        
        
    }
    else if (aaPolicyYear == FundTerm2030) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2030"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        RemainingTerm_2030 = 0.00;
        BackTerm_2030 = 0.00;
        Value3 = 0.00;
        RemainingTerm_2030 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2030 = 12 - [self roundUp:((RemainingTerm_2030 - round(ceil(RemainingTerm_2030)) + 1) * 12) ];
        Value3 = ReinvestAmount2030toVentureManaged_M * pow((1 + [self ReturnVUVentureManagedInstMedian:@"A"]), BackTerm_2030/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2030 = (pow((1 + [self ReturnVUVentureManagedInstMedian:@"A"]), (BackTerm_2030 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVentureManagedInstMedian:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2030 = (pow((1 + [self ReturnVUVentureManagedInstMedian:@"A"]), ((12 - BackTerm_2030) / 12.00))   - 1) / (pow(1 + [self ReturnVUVentureManagedInstMedian:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVentureManagedValue_EverCash60 * GMIFactor_BackTermH2030 + PrevVUVentureManagedValue_EverCash60 * GMIFactor_FrontTermH2030 * pow((1 + [self ReturnVUVentureManagedInstMedian:@"A"]), (BackTerm_2030 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVentureManagedInstMedian:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVentureManagedFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
        
    }
    else if (aaPolicyYear == FundTerm2035) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2035"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        RemainingTerm_2035 = 0.00;
        BackTerm_2035 = 0.00;
        Value3 = 0.00;
        RemainingTerm_2035 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2035 = 12 - [self roundUp:((RemainingTerm_2035 - round(ceil(RemainingTerm_2035)) + 1) * 12) ];
        Value3 = ReinvestAmount2035toVentureManaged_M * pow((1 + [self ReturnVUVentureManagedInstMedian:@"A"]), BackTerm_2035/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2035 = (pow((1 + [self ReturnVUVentureManagedInstMedian:@"A"]), (BackTerm_2035 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVentureManagedInstMedian:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2035 = (pow((1 + [self ReturnVUVentureManagedInstMedian:@"A"]), ((12 - BackTerm_2035) / 12.00))   - 1) / (pow(1 + [self ReturnVUVentureManagedInstMedian:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVentureManagedValue_EverCash60 * GMIFactor_BackTermH2035 + PrevVUVentureManagedValue_EverCash60 * GMIFactor_FrontTermH2035 * pow((1 + [self ReturnVUVentureManagedInstMedian:@"A"]), (BackTerm_2035 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVentureManagedInstMedian:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVentureManagedFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
    }
    else{
        if (Age + aaPolicyYear < 60) {
            temp = Value1;
        }
        else if (Age + aaPolicyYear == 60){
            temp = Value1 + Value2;
        }
        else{
            temp = Value1 + Value2 * 12 * (1 + [self ReturnVUVentureManagedInstMedian:@"M"])/(pow((1 + [self ReturnVUVentureManagedInstMedian:@"A"]), (1.00/12.00)));
        }
        
        //if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
        double EGFundAllo_Percen = [self ReturnVUVentureManagedFac:aaPolicyYear] * 100;
        double tempInst = [self ReturnVUVentureManagedInstMedian:@""];
        
        temp = temp + [self PaidUpOptionTable_RTUO:FALSE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:tempInst PolYear:aaPolicyYear andMonth:0];
        //}
    }
    
    return temp + VUVentureManagedValue_EverCash1 + VUVentureManagedValue_EverCash6;
    
}

-(double)PaidUpOptionTable_VentureManaged_Low:(double)aaValue andPolicyYear :(int)aaPolicyYear {
    
    double RemainingTerm_2023 = 0.00;
    double RemainingTerm_2025 = 0.00;
    double RemainingTerm_2028 = 0.00;
    double RemainingTerm_2030 = 0.00;
    double RemainingTerm_2035 = 0.00;
    double BackTerm_2023 = 0.00;
    double BackTerm_2025 = 0.00;
    double BackTerm_2028 = 0.00;
    double BackTerm_2030 = 0.00;
    double BackTerm_2035 = 0.00;
    double GMIFactor_BackTermH2023 = 0.00;
    double GMIFactor_BackTermH2025 = 0.00;
    double GMIFactor_BackTermH2028 = 0.00;
    double GMIFactor_BackTermH2030 = 0.00;
    double GMIFactor_BackTermH2035 = 0.00;
    
    double GMIFactor_FrontTermH2023 = 0.00;
    double GMIFactor_FrontTermH2025 = 0.00;
    double GMIFactor_FrontTermH2028 = 0.00;
    double GMIFactor_FrontTermH2030 = 0.00;
    double GMIFactor_FrontTermH2035 = 0.00;
    
    
    double temp = 0.00;
    double Value1 = aaValue * (1 + [self ReturnVUVentureManagedInstLow:@"A"]) * (1 + [self ReturnLoyaltyBonus:aaPolicyYear]/100.00);
    double Value2 = VUVentureManagedValue_EverCash60;
    double Value3 = 0.00;
    double Value4 = 0.00;
    
    if (aaPolicyYear == FundTerm2023) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2023"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        
        RemainingTerm_2023 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2023 = 12 - [self roundUp:((RemainingTerm_2023 - round(ceil(RemainingTerm_2023)) + 1) * 12) ];
        Value3 = ReinvestAmount2023toVentureManaged_L * pow((1 + [self ReturnVUVentureManagedInstLow:@"A"]), BackTerm_2023/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2023 = (pow((1 + [self ReturnVUVentureManagedInstLow:@"A"]), (BackTerm_2023 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVentureManagedInstLow:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2023 = (pow((1 + [self ReturnVUVentureManagedInstLow:@"A"]), ((12 - BackTerm_2023) / 12.00))   - 1) / (pow(1 + [self ReturnVUVentureManagedInstLow:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVentureManagedValue_EverCash60 * GMIFactor_BackTermH2023 + PrevVUVentureManagedValue_EverCash60 * GMIFactor_FrontTermH2023 * pow((1 + [self ReturnVUVentureManagedInstLow:@"A"]), (BackTerm_2023 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVentureManagedInstLow:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVentureManagedFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
    }
    else if (aaPolicyYear == FundTerm2025) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2025"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        RemainingTerm_2025 = 0.00;
        BackTerm_2025 = 0.00;
        Value3 = 0.00;
        RemainingTerm_2025 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2025 = 12 - [self roundUp:((RemainingTerm_2025 - round(ceil(RemainingTerm_2025)) + 1) * 12) ];
        Value3 = ReinvestAmount2025toVentureManaged_L * pow((1 + [self ReturnVUVentureManagedInstLow:@"A"]), BackTerm_2025/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2025 = (pow((1 + [self ReturnVUVentureManagedInstLow:@"A"]), (BackTerm_2025 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVentureManagedInstLow:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2025 = (pow((1 + [self ReturnVUVentureManagedInstLow:@"A"]), ((12 - BackTerm_2025) / 12.00))   - 1) / (pow(1 + [self ReturnVUVentureManagedInstLow:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVentureManagedValue_EverCash60 * GMIFactor_BackTermH2025 + PrevVUVentureManagedValue_EverCash60 * GMIFactor_FrontTermH2025 * pow((1 + [self ReturnVUVentureManagedInstLow:@"A"]), (BackTerm_2025 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVentureManagedInstLow:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVentureManagedFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
        
    }
    else if (aaPolicyYear == FundTerm2028) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2028"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        RemainingTerm_2028 = 0.00;
        BackTerm_2028 = 0.00;
        Value3 = 0.00;
        RemainingTerm_2028 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2028 = 12 - [self roundUp:((RemainingTerm_2028 - round(ceil(RemainingTerm_2028)) + 1) * 12) ];
        Value3 = ReinvestAmount2028toVentureManaged_L * pow((1 + [self ReturnVUVentureManagedInstLow:@"A"]), BackTerm_2028/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2028 = (pow((1 + [self ReturnVUVentureManagedInstLow:@"A"]), (BackTerm_2028 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVentureManagedInstLow:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2028 = (pow((1 + [self ReturnVUVentureManagedInstLow:@"A"]), ((12 - BackTerm_2028) / 12.00))   - 1) / (pow(1 + [self ReturnVUVentureManagedInstLow:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVentureManagedValue_EverCash60 * GMIFactor_BackTermH2028 + PrevVUVentureManagedValue_EverCash60 * GMIFactor_FrontTermH2028 * pow((1 + [self ReturnVUVentureManagedInstLow:@"A"]), (BackTerm_2028 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVentureManagedInstLow:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVentureManagedFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
        
    }
    else if (aaPolicyYear == FundTerm2030) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2030"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        RemainingTerm_2030 = 0.00;
        BackTerm_2030 = 0.00;
        Value3 = 0.00;
        RemainingTerm_2030 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2030 = 12 - [self roundUp:((RemainingTerm_2030 - round(ceil(RemainingTerm_2030)) + 1) * 12) ];
        Value3 = ReinvestAmount2030toVentureManaged_L * pow((1 + [self ReturnVUVentureManagedInstLow:@"A"]), BackTerm_2030/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2030 = (pow((1 + [self ReturnVUVentureManagedInstLow:@"A"]), (BackTerm_2030 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVentureManagedInstLow:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2030 = (pow((1 + [self ReturnVUVentureManagedInstLow:@"A"]), ((12 - BackTerm_2030) / 12.00))   - 1) / (pow(1 + [self ReturnVUVentureManagedInstLow:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVentureManagedValue_EverCash60 * GMIFactor_BackTermH2030 + PrevVUVentureManagedValue_EverCash60 * GMIFactor_FrontTermH2030 * pow((1 + [self ReturnVUVentureManagedInstLow:@"A"]), (BackTerm_2030 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVentureManagedInstLow:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVentureManagedFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
    }
    else if (aaPolicyYear == FundTerm2035) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2035"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        RemainingTerm_2035 = 0.00;
        BackTerm_2035 = 0.00;
        Value3 = 0.00;
        RemainingTerm_2035 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2035 = 12 - [self roundUp:((RemainingTerm_2035 - round(ceil(RemainingTerm_2035)) + 1) * 12) ];
        Value3 = ReinvestAmount2035toVentureManaged_L * pow((1 + [self ReturnVUVentureManagedInstLow:@"A"]), BackTerm_2035/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2035 = (pow((1 + [self ReturnVUVentureManagedInstLow:@"A"]), (BackTerm_2035 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVentureManagedInstLow:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2035 = (pow((1 + [self ReturnVUVentureManagedInstLow:@"A"]), ((12 - BackTerm_2035) / 12.00))   - 1) / (pow(1 + [self ReturnVUVentureManagedInstLow:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVentureManagedValue_EverCash60 * GMIFactor_BackTermH2035 + PrevVUVentureManagedValue_EverCash60 * GMIFactor_FrontTermH2035 * pow((1 + [self ReturnVUVentureManagedInstLow:@"A"]), (BackTerm_2035 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVentureManagedInstLow:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVentureManagedFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
    }
    else{
        if (Age + aaPolicyYear < 60) {
            temp = Value1;
        }
        else if (Age + aaPolicyYear == 60){
            temp = Value1 + Value2;
        }
        else{
            temp = Value1 + Value2 * 12 * (1 + [self ReturnVUVentureManagedInstLow:@"M"])/(pow((1 + [self ReturnVUVentureManagedInstLow:@"A"]), (1.00/12.00)));
        }
        
        //if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
        double EGFundAllo_Percen = [self ReturnVUVentureManagedFac:aaPolicyYear] * 100;
        double tempInst = [self ReturnVUVentureManagedInstLow:@""];
        
        temp = temp + [self PaidUpOptionTable_RTUO:FALSE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:tempInst PolYear:aaPolicyYear andMonth:0];
        //}
    }
    
    return temp + VUVentureManagedValue_EverCash1 + VUVentureManagedValue_EverCash6;
    
}


-(double)PaidUpOptionTable_VentureIncome_High:(double)aaValue andPolicyYear :(int)aaPolicyYear{
    
    double RemainingTerm_2023 = 0.00;
    double RemainingTerm_2025 = 0.00;
    double RemainingTerm_2028 = 0.00;
    double RemainingTerm_2030 = 0.00;
    double RemainingTerm_2035 = 0.00;
    double BackTerm_2023 = 0.00;
    double BackTerm_2025 = 0.00;
    double BackTerm_2028 = 0.00;
    double BackTerm_2030 = 0.00;
    double BackTerm_2035 = 0.00;
    double GMIFactor_BackTermH2023 = 0.00;
    double GMIFactor_BackTermH2025 = 0.00;
    double GMIFactor_BackTermH2028 = 0.00;
    double GMIFactor_BackTermH2030 = 0.00;
    double GMIFactor_BackTermH2035 = 0.00;
    
    double GMIFactor_FrontTermH2023 = 0.00;
    double GMIFactor_FrontTermH2025 = 0.00;
    double GMIFactor_FrontTermH2028 = 0.00;
    double GMIFactor_FrontTermH2030 = 0.00;
    double GMIFactor_FrontTermH2035 = 0.00;
    
    
    double temp = 0.00;
    double Value1 = aaValue * (1 + [self ReturnVUVentureIncomeInstHigh:aaPolicyYear andMOP:@"A"]) * (1 + [self ReturnLoyaltyBonus:aaPolicyYear]/100.00);
    double Value2 = VUVentureIncomeValue_EverCash60;
    double Value3 = 0.00;
    double Value4 = 0.00;
    
    if (aaPolicyYear == FundTerm2023) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2023"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        
        RemainingTerm_2023 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2023 = 12 - [self roundUp:((RemainingTerm_2023 - round(ceil(RemainingTerm_2023)) + 1) * 12) ];
        Value3 = ReinvestAmount2023toVentureIncome_H * pow((1 + [self ReturnVUVentureIncomeInstHigh:aaPolicyYear andMOP:@"A"]), BackTerm_2023/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2023 = (pow((1 + [self ReturnVUVentureIncomeInstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2023 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVentureIncomeInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2023 = (pow((1 + [self ReturnVUVentureIncomeInstHigh:aaPolicyYear andMOP:@"A"]), ((12 - BackTerm_2023) / 12.00))   - 1) / (pow(1 + [self ReturnVUVentureIncomeInstHigh:aaPolicyYear andMOP:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVentureIncomeValue_EverCash60 * GMIFactor_BackTermH2023 + PrevVUVentureIncomeValue_EverCash60 * GMIFactor_FrontTermH2023 * pow((1 + [self ReturnVUVentureIncomeInstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2023 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVentureIncomeInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVentureIncomeFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
        
    }
    else if (aaPolicyYear == FundTerm2025) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2025"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        RemainingTerm_2025 = 0.00;
        BackTerm_2025 = 0.00;
        Value3 = 0.00;
        RemainingTerm_2025 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2025 = 12 - [self roundUp:((RemainingTerm_2025 - round(ceil(RemainingTerm_2025)) + 1) * 12) ];
        Value3 = ReinvestAmount2025toVentureIncome_H * pow((1 + [self ReturnVUVentureIncomeInstHigh:aaPolicyYear andMOP:@"A"]), BackTerm_2025/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2025 = (pow((1 + [self ReturnVUVentureIncomeInstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2025 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVentureIncomeInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2025 = (pow((1 + [self ReturnVUVentureIncomeInstHigh:aaPolicyYear andMOP:@"A"]), ((12 - BackTerm_2025) / 12.00))   - 1) / (pow(1 + [self ReturnVUVentureIncomeInstHigh:aaPolicyYear andMOP:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVentureIncomeValue_EverCash60 * GMIFactor_BackTermH2025 + PrevVUVentureIncomeValue_EverCash60 * GMIFactor_FrontTermH2025 * pow((1 + [self ReturnVUVentureIncomeInstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2025 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVentureIncomeInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVentureIncomeFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
        
    }
    else if (aaPolicyYear == FundTerm2028) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2028"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        RemainingTerm_2028 = 0.00;
        BackTerm_2028 = 0.00;
        Value3 = 0.00;
        RemainingTerm_2028 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2028 = 12 - [self roundUp:((RemainingTerm_2028 - round(ceil(RemainingTerm_2028)) + 1) * 12) ];
        Value3 = ReinvestAmount2028toVentureIncome_H * pow((1 + [self ReturnVUVentureIncomeInstHigh:aaPolicyYear andMOP:@"A"]), BackTerm_2028/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2028 = (pow((1 + [self ReturnVUVentureIncomeInstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2028 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVentureIncomeInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2028 = (pow((1 + [self ReturnVUVentureIncomeInstHigh:aaPolicyYear andMOP:@"A"]), ((12 - BackTerm_2028) / 12.00))   - 1) / (pow(1 + [self ReturnVUVentureIncomeInstHigh:aaPolicyYear andMOP:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVentureIncomeValue_EverCash60 * GMIFactor_BackTermH2028 + PrevVUVentureIncomeValue_EverCash60 * GMIFactor_FrontTermH2028 * pow((1 + [self ReturnVUVentureIncomeInstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2028 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVentureIncomeInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVentureIncomeFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
        
    }
    else if (aaPolicyYear == FundTerm2030) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2030"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        RemainingTerm_2030 = 0.00;
        BackTerm_2030 = 0.00;
        Value3 = 0.00;
        RemainingTerm_2030 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2030 = 12 - [self roundUp:((RemainingTerm_2030 - round(ceil(RemainingTerm_2030)) + 1) * 12) ];
        Value3 = ReinvestAmount2030toVentureIncome_H * pow((1 + [self ReturnVUVentureIncomeInstHigh:aaPolicyYear andMOP:@"A"]), BackTerm_2030/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2030 = (pow((1 + [self ReturnVUVentureIncomeInstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2030 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVentureIncomeInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2030 = (pow((1 + [self ReturnVUVentureIncomeInstHigh:aaPolicyYear andMOP:@"A"]), ((12 - BackTerm_2030) / 12.00))   - 1) / (pow(1 + [self ReturnVUVentureIncomeInstHigh:aaPolicyYear andMOP:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVentureIncomeValue_EverCash60 * GMIFactor_BackTermH2030 + PrevVUVentureIncomeValue_EverCash60 * GMIFactor_FrontTermH2030 * pow((1 + [self ReturnVUVentureIncomeInstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2030 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVentureIncomeInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVentureIncomeFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
        
    }
    else if (aaPolicyYear == FundTerm2035) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2035"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        RemainingTerm_2035 = 0.00;
        BackTerm_2035 = 0.00;
        Value3 = 0.00;
        RemainingTerm_2035 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2035 = 12 - [self roundUp:((RemainingTerm_2035 - round(ceil(RemainingTerm_2035)) + 1) * 12) ];
        Value3 = ReinvestAmount2035toVentureIncome_H * pow((1 + [self ReturnVUVentureIncomeInstHigh:aaPolicyYear andMOP:@"A"]), BackTerm_2035/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2035 = (pow((1 + [self ReturnVUVentureIncomeInstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2035 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVentureIncomeInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2035 = (pow((1 + [self ReturnVUVentureIncomeInstHigh:aaPolicyYear andMOP:@"A"]), ((12 - BackTerm_2035) / 12.00))   - 1) / (pow(1 + [self ReturnVUVentureIncomeInstHigh:aaPolicyYear andMOP:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVentureIncomeValue_EverCash60 * GMIFactor_BackTermH2035 + PrevVUVentureIncomeValue_EverCash60 * GMIFactor_FrontTermH2035 * pow((1 + [self ReturnVUVentureIncomeInstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2035 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVentureIncomeInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVentureIncomeFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i ]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
        
    }
    else{
        if (Age + aaPolicyYear < 60) {
            temp = Value1;
        }
        else if (Age + aaPolicyYear == 60){
            temp = Value1 + Value2;
        }
        else{
            temp = Value1 + Value2 * 12 * (1 + [self ReturnVUVentureIncomeInstHigh:aaPolicyYear andMOP:@"M"])/(pow((1 + [self ReturnVUVentureIncomeInstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00)));
        }
        
        //if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
        double EGFundAllo_Percen = [self ReturnVUVentureIncomeFac:aaPolicyYear] * 100;
        double tempInst = [self ReturnVUVentureIncomeInstHigh:aaPolicyYear andMOP:@""];
        
        temp = temp + [self PaidUpOptionTable_RTUO:FALSE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:tempInst PolYear:aaPolicyYear andMonth:0];
        //}
    }
    
    return temp + VUVentureIncomeValue_EverCash1 + VUVentureIncomeValue_EverCash6;
    
}

-(double)PaidUpOptionTable_VentureIncome_Median:(double)aaValue andPolicyYear :(int)aaPolicyYear {
    
    double RemainingTerm_2023 = 0.00;
    double RemainingTerm_2025 = 0.00;
    double RemainingTerm_2028 = 0.00;
    double RemainingTerm_2030 = 0.00;
    double RemainingTerm_2035 = 0.00;
    double BackTerm_2023 = 0.00;
    double BackTerm_2025 = 0.00;
    double BackTerm_2028 = 0.00;
    double BackTerm_2030 = 0.00;
    double BackTerm_2035 = 0.00;
    double GMIFactor_BackTermH2023 = 0.00;
    double GMIFactor_BackTermH2025 = 0.00;
    double GMIFactor_BackTermH2028 = 0.00;
    double GMIFactor_BackTermH2030 = 0.00;
    double GMIFactor_BackTermH2035 = 0.00;
    
    double GMIFactor_FrontTermH2023 = 0.00;
    double GMIFactor_FrontTermH2025 = 0.00;
    double GMIFactor_FrontTermH2028 = 0.00;
    double GMIFactor_FrontTermH2030 = 0.00;
    double GMIFactor_FrontTermH2035 = 0.00;
    
    
    double temp = 0.00;
    double Value1 = aaValue * (1 + [self ReturnVUVentureIncomeInstMedian:@"A"]) * (1 + [self ReturnLoyaltyBonus:aaPolicyYear]/100.00);
    double Value2 = VUVentureIncomeValue_EverCash60;
    double Value3 = 0.00;
    double Value4 = 0.00;
    
    if (aaPolicyYear == FundTerm2023) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2023"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        
        RemainingTerm_2023 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2023 = 12 - [self roundUp:((RemainingTerm_2023 - round(ceil(RemainingTerm_2023)) + 1) * 12) ];
        Value3 = ReinvestAmount2023toVentureIncome_M * pow((1 + [self ReturnVUVentureIncomeInstMedian:@"A"]), BackTerm_2023/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2023 = (pow((1 + [self ReturnVUVentureIncomeInstMedian:@"A"]), (BackTerm_2023 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVentureIncomeInstMedian:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2023 = (pow((1 + [self ReturnVUVentureIncomeInstMedian:@"A"]), ((12 - BackTerm_2023) / 12.00))   - 1) / (pow(1 + [self ReturnVUVentureIncomeInstMedian:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVentureIncomeValue_EverCash60 * GMIFactor_BackTermH2023 + PrevVUVentureIncomeValue_EverCash60 * GMIFactor_FrontTermH2023 * pow((1 + [self ReturnVUVentureIncomeInstMedian:@"A"]), (BackTerm_2023 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVentureIncomeInstMedian:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVentureIncomeFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
        
    }
    else if (aaPolicyYear == FundTerm2025) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2025"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        RemainingTerm_2025 = 0.00;
        BackTerm_2025 = 0.00;
        Value3 = 0.00;
        RemainingTerm_2025 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2025 = 12 - [self roundUp:((RemainingTerm_2025 - round(ceil(RemainingTerm_2025)) + 1) * 12) ];
        Value3 = ReinvestAmount2025toVentureIncome_M * pow((1 + [self ReturnVUVentureIncomeInstMedian:@"A"]), BackTerm_2025/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2025 = (pow((1 + [self ReturnVUVentureIncomeInstMedian:@"A"]), (BackTerm_2025 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVentureIncomeInstMedian:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2025 = (pow((1 + [self ReturnVUVentureIncomeInstMedian:@"A"]), ((12 - BackTerm_2025) / 12.00))   - 1) / (pow(1 + [self ReturnVUVentureIncomeInstMedian:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVentureIncomeValue_EverCash60 * GMIFactor_BackTermH2025 + PrevVUVentureIncomeValue_EverCash60 * GMIFactor_FrontTermH2025 * pow((1 + [self ReturnVUVentureIncomeInstMedian:@"A"]), (BackTerm_2025 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVentureIncomeInstMedian:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVentureIncomeFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
        
    }
    else if (aaPolicyYear == FundTerm2028) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2028"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        RemainingTerm_2028 = 0.00;
        BackTerm_2028 = 0.00;
        Value3 = 0.00;
        RemainingTerm_2028 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2028 = 12 - [self roundUp:((RemainingTerm_2028 - round(ceil(RemainingTerm_2028)) + 1) * 12) ];
        Value3 = ReinvestAmount2028toVentureIncome_M * pow((1 + [self ReturnVUVentureIncomeInstMedian:@"A"]), BackTerm_2028/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2028 = (pow((1 + [self ReturnVUVentureIncomeInstMedian:@"A"]), (BackTerm_2028 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVentureIncomeInstMedian:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2028 = (pow((1 + [self ReturnVUVentureIncomeInstMedian:@"A"]), ((12 - BackTerm_2028) / 12.00))   - 1) / (pow(1 + [self ReturnVUVentureIncomeInstMedian:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVentureIncomeValue_EverCash60 * GMIFactor_BackTermH2028 + PrevVUVentureIncomeValue_EverCash60 * GMIFactor_FrontTermH2028 * pow((1 + [self ReturnVUVentureIncomeInstMedian:@"A"]), (BackTerm_2028 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVentureIncomeInstMedian:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVentureIncomeFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
        
        
    }
    else if (aaPolicyYear == FundTerm2030) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2030"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        RemainingTerm_2030 = 0.00;
        BackTerm_2030 = 0.00;
        Value3 = 0.00;
        RemainingTerm_2030 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2030 = 12 - [self roundUp:((RemainingTerm_2030 - round(ceil(RemainingTerm_2030)) + 1) * 12) ];
        Value3 = ReinvestAmount2030toVentureIncome_M * pow((1 + [self ReturnVUVentureIncomeInstMedian:@"A"]), BackTerm_2030/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2030 = (pow((1 + [self ReturnVUVentureIncomeInstMedian:@"A"]), (BackTerm_2030 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVentureIncomeInstMedian:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2030 = (pow((1 + [self ReturnVUVentureIncomeInstMedian:@"A"]), ((12 - BackTerm_2030) / 12.00))   - 1) / (pow(1 + [self ReturnVUVentureIncomeInstMedian:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVentureIncomeValue_EverCash60 * GMIFactor_BackTermH2030 + PrevVUVentureIncomeValue_EverCash60 * GMIFactor_FrontTermH2030 * pow((1 + [self ReturnVUVentureIncomeInstMedian:@"A"]), (BackTerm_2030 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVentureIncomeInstMedian:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVentureIncomeFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
        
    }
    else if (aaPolicyYear == FundTerm2035) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2035"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        RemainingTerm_2035 = 0.00;
        BackTerm_2035 = 0.00;
        Value3 = 0.00;
        RemainingTerm_2035 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2035 = 12 - [self roundUp:((RemainingTerm_2035 - round(ceil(RemainingTerm_2035)) + 1) * 12) ];
        Value3 = ReinvestAmount2035toVentureIncome_M * pow((1 + [self ReturnVUVentureIncomeInstMedian:@"A"]), BackTerm_2035/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2035 = (pow((1 + [self ReturnVUVentureIncomeInstMedian:@"A"]), (BackTerm_2035 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVentureIncomeInstMedian:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2035 = (pow((1 + [self ReturnVUVentureIncomeInstMedian:@"A"]), ((12 - BackTerm_2035) / 12.00))   - 1) / (pow(1 + [self ReturnVUVentureIncomeInstMedian:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVentureIncomeValue_EverCash60 * GMIFactor_BackTermH2035 + PrevVUVentureIncomeValue_EverCash60 * GMIFactor_FrontTermH2035 * pow((1 + [self ReturnVUVentureIncomeInstMedian:@"A"]), (BackTerm_2035 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVentureIncomeInstMedian:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVentureIncomeFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
    }
    else{
        if (Age + aaPolicyYear < 60) {
            temp = Value1;
        }
        else if (Age + aaPolicyYear == 60){
            temp = Value1 + Value2;
        }
        else{
            temp = Value1 + Value2 * 12 * (1 + [self ReturnVUVentureIncomeInstMedian:@"M"])/(pow((1 + [self ReturnVUVentureIncomeInstMedian:@"A"]), (1.00/12.00)));
        }
        
        //if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
        double EGFundAllo_Percen = [self ReturnVUVentureIncomeFac:aaPolicyYear] * 100;
        double tempInst = [self ReturnVUVentureIncomeInstMedian:@""];
        
        temp = temp + [self PaidUpOptionTable_RTUO:FALSE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:tempInst PolYear:aaPolicyYear andMonth:0];
        //}
    }
    
    return temp + VUVentureIncomeValue_EverCash1 + VUVentureIncomeValue_EverCash6;
    
}

-(double)PaidUpOptionTable_VentureIncome_Low:(double)aaValue andPolicyYear :(int)aaPolicyYear {
    
    double RemainingTerm_2023 = 0.00;
    double RemainingTerm_2025 = 0.00;
    double RemainingTerm_2028 = 0.00;
    double RemainingTerm_2030 = 0.00;
    double RemainingTerm_2035 = 0.00;
    double BackTerm_2023 = 0.00;
    double BackTerm_2025 = 0.00;
    double BackTerm_2028 = 0.00;
    double BackTerm_2030 = 0.00;
    double BackTerm_2035 = 0.00;
    double GMIFactor_BackTermH2023 = 0.00;
    double GMIFactor_BackTermH2025 = 0.00;
    double GMIFactor_BackTermH2028 = 0.00;
    double GMIFactor_BackTermH2030 = 0.00;
    double GMIFactor_BackTermH2035 = 0.00;
    
    double GMIFactor_FrontTermH2023 = 0.00;
    double GMIFactor_FrontTermH2025 = 0.00;
    double GMIFactor_FrontTermH2028 = 0.00;
    double GMIFactor_FrontTermH2030 = 0.00;
    double GMIFactor_FrontTermH2035 = 0.00;
    
    
    double temp = 0.00;
    double Value1 = aaValue * (1 + [self ReturnVUVentureIncomeInstLow:@"A"]) * (1 + [self ReturnLoyaltyBonus:aaPolicyYear]/100.00);
    double Value2 = VUVentureIncomeValue_EverCash60;
    double Value3 = 0.00;
    double Value4 = 0.00;
    
    if (aaPolicyYear == FundTerm2023) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2023"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        
        RemainingTerm_2023 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2023 = 12 - [self roundUp:((RemainingTerm_2023 - round(ceil(RemainingTerm_2023)) + 1) * 12) ];
        Value3 = ReinvestAmount2023toVentureIncome_L * pow((1 + [self ReturnVUVentureIncomeInstLow:@"A"]), BackTerm_2023/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2023 = (pow((1 + [self ReturnVUVentureIncomeInstLow:@"A"]), (BackTerm_2023 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVentureIncomeInstLow:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2023 = (pow((1 + [self ReturnVUVentureIncomeInstLow:@"A"]), ((12 - BackTerm_2023) / 12.00))   - 1) / (pow(1 + [self ReturnVUVentureIncomeInstLow:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVentureIncomeValue_EverCash60 * GMIFactor_BackTermH2023 + PrevVUVentureIncomeValue_EverCash60 * GMIFactor_FrontTermH2023 * pow((1 + [self ReturnVUVentureIncomeInstLow:@"A"]), (BackTerm_2023 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVentureIncomeInstLow:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVentureIncomeFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
    }
    else if (aaPolicyYear == FundTerm2025) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2025"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        RemainingTerm_2025 = 0.00;
        BackTerm_2025 = 0.00;
        Value3 = 0.00;
        RemainingTerm_2025 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2025 = 12 - [self roundUp:((RemainingTerm_2025 - round(ceil(RemainingTerm_2025)) + 1) * 12) ];
        Value3 = ReinvestAmount2025toVentureIncome_L * pow((1 + [self ReturnVUVentureIncomeInstLow:@"A"]), BackTerm_2025/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2025 = (pow((1 + [self ReturnVUVentureIncomeInstLow:@"A"]), (BackTerm_2025 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVentureIncomeInstLow:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2025 = (pow((1 + [self ReturnVUVentureIncomeInstLow:@"A"]), ((12 - BackTerm_2025) / 12.00))   - 1) / (pow(1 + [self ReturnVUVentureIncomeInstLow:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVentureIncomeValue_EverCash60 * GMIFactor_BackTermH2025 + PrevVUVentureIncomeValue_EverCash60 * GMIFactor_FrontTermH2025 * pow((1 + [self ReturnVUVentureIncomeInstLow:@"A"]), (BackTerm_2025 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVentureIncomeInstLow:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVentureIncomeFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
        
    }
    else if (aaPolicyYear == FundTerm2028) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2028"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        RemainingTerm_2028 = 0.00;
        BackTerm_2028 = 0.00;
        Value3 = 0.00;
        RemainingTerm_2028 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2028 = 12 - [self roundUp:((RemainingTerm_2028 - round(ceil(RemainingTerm_2028)) + 1) * 12) ];
        Value3 = ReinvestAmount2028toVentureIncome_L * pow((1 + [self ReturnVUVentureIncomeInstLow:@"A"]), BackTerm_2028/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2028 = (pow((1 + [self ReturnVUVentureIncomeInstLow:@"A"]), (BackTerm_2028 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVentureIncomeInstLow:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2028 = (pow((1 + [self ReturnVUVentureIncomeInstLow:@"A"]), ((12 - BackTerm_2028) / 12.00))   - 1) / (pow(1 + [self ReturnVUVentureIncomeInstLow:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVentureIncomeValue_EverCash60 * GMIFactor_BackTermH2028 + PrevVUVentureIncomeValue_EverCash60 * GMIFactor_FrontTermH2028 * pow((1 + [self ReturnVUVentureIncomeInstLow:@"A"]), (BackTerm_2028 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVentureIncomeInstLow:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVentureIncomeFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
        
    }
    else if (aaPolicyYear == FundTerm2030) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2030"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        RemainingTerm_2030 = 0.00;
        BackTerm_2030 = 0.00;
        Value3 = 0.00;
        RemainingTerm_2030 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2030 = 12 - [self roundUp:((RemainingTerm_2030 - round(ceil(RemainingTerm_2030)) + 1) * 12) ];
        Value3 = ReinvestAmount2030toVentureIncome_L * pow((1 + [self ReturnVUVentureIncomeInstLow:@"A"]), BackTerm_2030/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2030 = (pow((1 + [self ReturnVUVentureIncomeInstLow:@"A"]), (BackTerm_2030 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVentureIncomeInstLow:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2030 = (pow((1 + [self ReturnVUVentureIncomeInstLow:@"A"]), ((12 - BackTerm_2030) / 12.00))   - 1) / (pow(1 + [self ReturnVUVentureIncomeInstLow:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVentureIncomeValue_EverCash60 * GMIFactor_BackTermH2030 + PrevVUVentureIncomeValue_EverCash60 * GMIFactor_FrontTermH2030 * pow((1 + [self ReturnVUVentureIncomeInstLow:@"A"]), (BackTerm_2030 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVentureIncomeInstLow:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVentureIncomeFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
    }
    else if (aaPolicyYear == FundTerm2035) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2035"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        RemainingTerm_2035 = 0.00;
        BackTerm_2035 = 0.00;
        Value3 = 0.00;
        RemainingTerm_2035 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2035 = 12 - [self roundUp:((RemainingTerm_2035 - round(ceil(RemainingTerm_2035)) + 1) * 12) ];
        Value3 = ReinvestAmount2035toVentureIncome_L * pow((1 + [self ReturnVUVentureIncomeInstLow:@"A"]), BackTerm_2035/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2035 = (pow((1 + [self ReturnVUVentureIncomeInstLow:@"A"]), (BackTerm_2035 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVentureIncomeInstLow:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2035 = (pow((1 + [self ReturnVUVentureIncomeInstLow:@"A"]), ((12 - BackTerm_2035) / 12.00))   - 1) / (pow(1 + [self ReturnVUVentureIncomeInstLow:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVentureIncomeValue_EverCash60 * GMIFactor_BackTermH2035 + PrevVUVentureIncomeValue_EverCash60 * GMIFactor_FrontTermH2035 * pow((1 + [self ReturnVUVentureIncomeInstLow:@"A"]), (BackTerm_2035 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVentureIncomeInstLow:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVentureIncomeFac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
    }
    else{
        if (Age + aaPolicyYear < 60) {
            temp = Value1;
        }
        else if (Age + aaPolicyYear == 60){
            temp = Value1 + Value2;
        }
        else{
            temp = Value1 + Value2 * 12 * (1 + [self ReturnVUVentureIncomeInstLow:@"M"])/(pow((1 + [self ReturnVUVentureIncomeInstLow:@"A"]), (1.00/12.00)));
        }
        
        //if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
        double EGFundAllo_Percen = [self ReturnVUVentureIncomeFac:aaPolicyYear] * 100;
        double tempInst = [self ReturnVUVentureIncomeInstLow:@""];
        
        temp = temp + [self PaidUpOptionTable_RTUO:FALSE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:tempInst PolYear:aaPolicyYear andMonth:0];
        //}
    }
    
    return temp + VUVentureIncomeValue_EverCash1 + VUVentureIncomeValue_EverCash6;
    
}


-(double)PaidUpOptionTable_Venture6666_High:(double)aaValue andPolicyYear :(int)aaPolicyYear{
    
    double RemainingTerm_2023 = 0.00;
    double RemainingTerm_2025 = 0.00;
    double RemainingTerm_2028 = 0.00;
    double RemainingTerm_2030 = 0.00;
    double RemainingTerm_2035 = 0.00;
    double BackTerm_2023 = 0.00;
    double BackTerm_2025 = 0.00;
    double BackTerm_2028 = 0.00;
    double BackTerm_2030 = 0.00;
    double BackTerm_2035 = 0.00;
    double GMIFactor_BackTermH2023 = 0.00;
    double GMIFactor_BackTermH2025 = 0.00;
    double GMIFactor_BackTermH2028 = 0.00;
    double GMIFactor_BackTermH2030 = 0.00;
    double GMIFactor_BackTermH2035 = 0.00;
    
    double GMIFactor_FrontTermH2023 = 0.00;
    double GMIFactor_FrontTermH2025 = 0.00;
    double GMIFactor_FrontTermH2028 = 0.00;
    double GMIFactor_FrontTermH2030 = 0.00;
    double GMIFactor_FrontTermH2035 = 0.00;
    
    
    double temp = 0.00;
    double Value1 = aaValue * (1 + [self ReturnVUVenture6666InstHigh:aaPolicyYear andMOP:@"A"]) * (1 + [self ReturnLoyaltyBonus:aaPolicyYear]/100.00);
    double Value2 = VUVenture6666Value_EverCash60;
    double Value3 = 0.00;
    double Value4 = 0.00;
    
    if (aaPolicyYear == FundTerm2023) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2023"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        
        RemainingTerm_2023 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2023 = 12 - [self roundUp:((RemainingTerm_2023 - round(ceil(RemainingTerm_2023)) + 1) * 12) ];
        Value3 = ReinvestAmount2023toVenture6666_H * pow((1 + [self ReturnVUVenture6666InstHigh:aaPolicyYear andMOP:@"A"]), BackTerm_2023/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2023 = (pow((1 + [self ReturnVUVenture6666InstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2023 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVenture6666InstHigh:aaPolicyYear andMOP:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2023 = (pow((1 + [self ReturnVUVenture6666InstHigh:aaPolicyYear andMOP:@"A"]), ((12 - BackTerm_2023) / 12.00))   - 1) / (pow(1 + [self ReturnVUVenture6666InstHigh:aaPolicyYear andMOP:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVenture6666Value_EverCash60 * GMIFactor_BackTermH2023 + PrevVUVenture6666Value_EverCash60 * GMIFactor_FrontTermH2023 * pow((1 + [self ReturnVUVenture6666InstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2023 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVenture6666InstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVenture6666Fac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
        
    }
    else if (aaPolicyYear == FundTerm2025) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2025"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        RemainingTerm_2025 = 0.00;
        BackTerm_2025 = 0.00;
        Value3 = 0.00;
        RemainingTerm_2025 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2025 = 12 - [self roundUp:((RemainingTerm_2025 - round(ceil(RemainingTerm_2025)) + 1) * 12) ];
        Value3 = ReinvestAmount2025toVenture6666_H * pow((1 + [self ReturnVUVenture6666InstHigh:aaPolicyYear andMOP:@"A"]), BackTerm_2025/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2025 = (pow((1 + [self ReturnVUVenture6666InstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2025 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVenture6666InstHigh:aaPolicyYear andMOP:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2025 = (pow((1 + [self ReturnVUVenture6666InstHigh:aaPolicyYear andMOP:@"A"]), ((12 - BackTerm_2025) / 12.00))   - 1) / (pow(1 + [self ReturnVUVenture6666InstHigh:aaPolicyYear andMOP:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVenture6666Value_EverCash60 * GMIFactor_BackTermH2025 + PrevVUVenture6666Value_EverCash60 * GMIFactor_FrontTermH2025 * pow((1 + [self ReturnVUVenture6666InstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2025 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVenture6666InstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVenture6666Fac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
        
    }
    else if (aaPolicyYear == FundTerm2028) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2028"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        RemainingTerm_2028 = 0.00;
        BackTerm_2028 = 0.00;
        Value3 = 0.00;
        RemainingTerm_2028 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2028 = 12 - [self roundUp:((RemainingTerm_2028 - round(ceil(RemainingTerm_2028)) + 1) * 12) ];
        Value3 = ReinvestAmount2028toVenture6666_H * pow((1 + [self ReturnVUVenture6666InstHigh:aaPolicyYear andMOP:@"A"]), BackTerm_2028/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2028 = (pow((1 + [self ReturnVUVenture6666InstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2028 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVenture6666InstHigh:aaPolicyYear andMOP:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2028 = (pow((1 + [self ReturnVUVenture6666InstHigh:aaPolicyYear andMOP:@"A"]), ((12 - BackTerm_2028) / 12.00))   - 1) / (pow(1 + [self ReturnVUVenture6666InstHigh:aaPolicyYear andMOP:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVenture6666Value_EverCash60 * GMIFactor_BackTermH2028 + PrevVUVenture6666Value_EverCash60 * GMIFactor_FrontTermH2028 * pow((1 + [self ReturnVUVenture6666InstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2028 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVenture6666InstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVenture6666Fac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
        
    }
    else if (aaPolicyYear == FundTerm2030) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2030"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        RemainingTerm_2030 = 0.00;
        BackTerm_2030 = 0.00;
        Value3 = 0.00;
        RemainingTerm_2030 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2030 = 12 - [self roundUp:((RemainingTerm_2030 - round(ceil(RemainingTerm_2030)) + 1) * 12) ];
        Value3 = ReinvestAmount2030toVenture6666_H * pow((1 + [self ReturnVUVenture6666InstHigh:aaPolicyYear andMOP:@"A"]), BackTerm_2030/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2030 = (pow((1 + [self ReturnVUVenture6666InstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2030 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVenture6666InstHigh:aaPolicyYear andMOP:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2030 = (pow((1 + [self ReturnVUVenture6666InstHigh:aaPolicyYear andMOP:@"A"]), ((12 - BackTerm_2030) / 12.00))   - 1) / (pow(1 + [self ReturnVUVenture6666InstHigh:aaPolicyYear andMOP:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVenture6666Value_EverCash60 * GMIFactor_BackTermH2030 + PrevVUVenture6666Value_EverCash60 * GMIFactor_FrontTermH2030 * pow((1 + [self ReturnVUVenture6666InstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2030 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVenture6666InstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVenture6666Fac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
        
    }
    else if (aaPolicyYear == FundTerm2035) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2035"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        RemainingTerm_2035 = 0.00;
        BackTerm_2035 = 0.00;
        Value3 = 0.00;
        RemainingTerm_2035 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2035 = 12 - [self roundUp:((RemainingTerm_2035 - round(ceil(RemainingTerm_2035)) + 1) * 12) ];
        Value3 = ReinvestAmount2035toVenture6666_H * pow((1 + [self ReturnVUVenture6666InstHigh:aaPolicyYear andMOP:@"A"]), BackTerm_2035/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2035 = (pow((1 + [self ReturnVUVenture6666InstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2035 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVenture6666InstHigh:aaPolicyYear andMOP:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2035 = (pow((1 + [self ReturnVUVenture6666InstHigh:aaPolicyYear andMOP:@"A"]), ((12 - BackTerm_2035) / 12.00))   - 1) / (pow(1 + [self ReturnVUVenture6666InstHigh:aaPolicyYear andMOP:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVenture6666Value_EverCash60 * GMIFactor_BackTermH2035 + PrevVUVenture6666Value_EverCash60 * GMIFactor_FrontTermH2035 * pow((1 + [self ReturnVUVenture6666InstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2035 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVenture6666InstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVenture6666Fac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i ]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
        
    }
    else{
        if (Age + aaPolicyYear < 60) {
            temp = Value1;
        }
        else if (Age + aaPolicyYear == 60){
            temp = Value1 + Value2;
        }
        else{
            temp = Value1 + Value2 * 12 * (1 + [self ReturnVUVenture6666InstHigh:aaPolicyYear andMOP:@"M"])/(pow((1 + [self ReturnVUVenture6666InstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00)));
        }
        
        //if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
        double EGFundAllo_Percen = [self ReturnVUVenture6666Fac:aaPolicyYear] * 100;
        double tempInst = [self ReturnVUVenture6666InstHigh:aaPolicyYear andMOP:@""];
        
        temp = temp + [self PaidUpOptionTable_RTUO:FALSE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:tempInst PolYear:aaPolicyYear andMonth:0];
        //}
    }
    
    return temp + VUVenture6666Value_EverCash1 + VUVenture6666Value_EverCash6;
    
}

-(double)PaidUpOptionTable_Venture6666_Median:(double)aaValue andPolicyYear :(int)aaPolicyYear {
    
    double RemainingTerm_2023 = 0.00;
    double RemainingTerm_2025 = 0.00;
    double RemainingTerm_2028 = 0.00;
    double RemainingTerm_2030 = 0.00;
    double RemainingTerm_2035 = 0.00;
    double BackTerm_2023 = 0.00;
    double BackTerm_2025 = 0.00;
    double BackTerm_2028 = 0.00;
    double BackTerm_2030 = 0.00;
    double BackTerm_2035 = 0.00;
    double GMIFactor_BackTermH2023 = 0.00;
    double GMIFactor_BackTermH2025 = 0.00;
    double GMIFactor_BackTermH2028 = 0.00;
    double GMIFactor_BackTermH2030 = 0.00;
    double GMIFactor_BackTermH2035 = 0.00;
    
    double GMIFactor_FrontTermH2023 = 0.00;
    double GMIFactor_FrontTermH2025 = 0.00;
    double GMIFactor_FrontTermH2028 = 0.00;
    double GMIFactor_FrontTermH2030 = 0.00;
    double GMIFactor_FrontTermH2035 = 0.00;
    
    
    double temp = 0.00;
    double Value1 = aaValue * (1 + [self ReturnVUVenture6666InstMedian:@"A"]) * (1 + [self ReturnLoyaltyBonus:aaPolicyYear]/100.00);
    double Value2 = VUVenture6666Value_EverCash60;
    double Value3 = 0.00;
    double Value4 = 0.00;
    
    if (aaPolicyYear == FundTerm2023) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2023"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        
        RemainingTerm_2023 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2023 = 12 - [self roundUp:((RemainingTerm_2023 - round(ceil(RemainingTerm_2023)) + 1) * 12) ];
        Value3 = ReinvestAmount2023toVenture6666_M * pow((1 + [self ReturnVUVenture6666InstMedian:@"A"]), BackTerm_2023/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2023 = (pow((1 + [self ReturnVUVenture6666InstMedian:@"A"]), (BackTerm_2023 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVenture6666InstMedian:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2023 = (pow((1 + [self ReturnVUVenture6666InstMedian:@"A"]), ((12 - BackTerm_2023) / 12.00))   - 1) / (pow(1 + [self ReturnVUVenture6666InstMedian:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVenture6666Value_EverCash60 * GMIFactor_BackTermH2023 + PrevVUVenture6666Value_EverCash60 * GMIFactor_FrontTermH2023 * pow((1 + [self ReturnVUVenture6666InstMedian:@"A"]), (BackTerm_2023 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVenture6666InstMedian:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVenture6666Fac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
        
    }
    else if (aaPolicyYear == FundTerm2025) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2025"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        RemainingTerm_2025 = 0.00;
        BackTerm_2025 = 0.00;
        Value3 = 0.00;
        RemainingTerm_2025 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2025 = 12 - [self roundUp:((RemainingTerm_2025 - round(ceil(RemainingTerm_2025)) + 1) * 12) ];
        Value3 = ReinvestAmount2025toVenture6666_M * pow((1 + [self ReturnVUVenture6666InstMedian:@"A"]), BackTerm_2025/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2025 = (pow((1 + [self ReturnVUVenture6666InstMedian:@"A"]), (BackTerm_2025 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVenture6666InstMedian:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2025 = (pow((1 + [self ReturnVUVenture6666InstMedian:@"A"]), ((12 - BackTerm_2025) / 12.00))   - 1) / (pow(1 + [self ReturnVUVenture6666InstMedian:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVenture6666Value_EverCash60 * GMIFactor_BackTermH2025 + PrevVUVenture6666Value_EverCash60 * GMIFactor_FrontTermH2025 * pow((1 + [self ReturnVUVenture6666InstMedian:@"A"]), (BackTerm_2025 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVenture6666InstMedian:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVenture6666Fac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
        
    }
    else if (aaPolicyYear == FundTerm2028) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2028"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        RemainingTerm_2028 = 0.00;
        BackTerm_2028 = 0.00;
        Value3 = 0.00;
        RemainingTerm_2028 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2028 = 12 - [self roundUp:((RemainingTerm_2028 - round(ceil(RemainingTerm_2028)) + 1) * 12) ];
        Value3 = ReinvestAmount2028toVenture6666_M * pow((1 + [self ReturnVUVenture6666InstMedian:@"A"]), BackTerm_2028/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2028 = (pow((1 + [self ReturnVUVenture6666InstMedian:@"A"]), (BackTerm_2028 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVenture6666InstMedian:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2028 = (pow((1 + [self ReturnVUVenture6666InstMedian:@"A"]), ((12 - BackTerm_2028) / 12.00))   - 1) / (pow(1 + [self ReturnVUVenture6666InstMedian:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVenture6666Value_EverCash60 * GMIFactor_BackTermH2028 + PrevVUVenture6666Value_EverCash60 * GMIFactor_FrontTermH2028 * pow((1 + [self ReturnVUVenture6666InstMedian:@"A"]), (BackTerm_2028 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVenture6666InstMedian:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVenture6666Fac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
        
        
    }
    else if (aaPolicyYear == FundTerm2030) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2030"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        RemainingTerm_2030 = 0.00;
        BackTerm_2030 = 0.00;
        Value3 = 0.00;
        RemainingTerm_2030 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2030 = 12 - [self roundUp:((RemainingTerm_2030 - round(ceil(RemainingTerm_2030)) + 1) * 12) ];
        Value3 = ReinvestAmount2030toVenture6666_M * pow((1 + [self ReturnVUVenture6666InstMedian:@"A"]), BackTerm_2030/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2030 = (pow((1 + [self ReturnVUVenture6666InstMedian:@"A"]), (BackTerm_2030 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVenture6666InstMedian:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2030 = (pow((1 + [self ReturnVUVenture6666InstMedian:@"A"]), ((12 - BackTerm_2030) / 12.00))   - 1) / (pow(1 + [self ReturnVUVenture6666InstMedian:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVenture6666Value_EverCash60 * GMIFactor_BackTermH2030 + PrevVUVenture6666Value_EverCash60 * GMIFactor_FrontTermH2030 * pow((1 + [self ReturnVUVenture6666InstMedian:@"A"]), (BackTerm_2030 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVenture6666InstMedian:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVenture6666Fac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
        
    }
    else if (aaPolicyYear == FundTerm2035) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2035"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        RemainingTerm_2035 = 0.00;
        BackTerm_2035 = 0.00;
        Value3 = 0.00;
        RemainingTerm_2035 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2035 = 12 - [self roundUp:((RemainingTerm_2035 - round(ceil(RemainingTerm_2035)) + 1) * 12) ];
        Value3 = ReinvestAmount2035toVenture6666_M * pow((1 + [self ReturnVUVenture6666InstMedian:@"A"]), BackTerm_2035/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2035 = (pow((1 + [self ReturnVUVenture6666InstMedian:@"A"]), (BackTerm_2035 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVenture6666InstMedian:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2035 = (pow((1 + [self ReturnVUVenture6666InstMedian:@"A"]), ((12 - BackTerm_2035) / 12.00))   - 1) / (pow(1 + [self ReturnVUVenture6666InstMedian:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVenture6666Value_EverCash60 * GMIFactor_BackTermH2035 + PrevVUVenture6666Value_EverCash60 * GMIFactor_FrontTermH2035 * pow((1 + [self ReturnVUVenture6666InstMedian:@"A"]), (BackTerm_2035 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVenture6666InstMedian:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVenture6666Fac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
    }
    else{
        if (Age + aaPolicyYear < 60) {
            temp = Value1;
        }
        else if (Age + aaPolicyYear == 60){
            temp = Value1 + Value2;
        }
        else{
            temp = Value1 + Value2 * 12 * (1 + [self ReturnVUVenture6666InstMedian:@"M"])/(pow((1 + [self ReturnVUVenture6666InstMedian:@"A"]), (1.00/12.00)));
        }
        
        //if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
        double EGFundAllo_Percen = [self ReturnVUVenture6666Fac:aaPolicyYear] * 100;
        double tempInst = [self ReturnVUVenture6666InstMedian:@""];
        
        temp = temp + [self PaidUpOptionTable_RTUO:FALSE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:tempInst PolYear:aaPolicyYear andMonth:0];
        //}
    }
    
    return temp + VUVenture6666Value_EverCash1 + VUVenture6666Value_EverCash6;
    
}

-(double)PaidUpOptionTable_Venture6666_Low:(double)aaValue andPolicyYear :(int)aaPolicyYear {
    
    double RemainingTerm_2023 = 0.00;
    double RemainingTerm_2025 = 0.00;
    double RemainingTerm_2028 = 0.00;
    double RemainingTerm_2030 = 0.00;
    double RemainingTerm_2035 = 0.00;
    double BackTerm_2023 = 0.00;
    double BackTerm_2025 = 0.00;
    double BackTerm_2028 = 0.00;
    double BackTerm_2030 = 0.00;
    double BackTerm_2035 = 0.00;
    double GMIFactor_BackTermH2023 = 0.00;
    double GMIFactor_BackTermH2025 = 0.00;
    double GMIFactor_BackTermH2028 = 0.00;
    double GMIFactor_BackTermH2030 = 0.00;
    double GMIFactor_BackTermH2035 = 0.00;
    
    double GMIFactor_FrontTermH2023 = 0.00;
    double GMIFactor_FrontTermH2025 = 0.00;
    double GMIFactor_FrontTermH2028 = 0.00;
    double GMIFactor_FrontTermH2030 = 0.00;
    double GMIFactor_FrontTermH2035 = 0.00;
    
    
    double temp = 0.00;
    double Value1 = aaValue * (1 + [self ReturnVUVenture6666InstLow:@"A"]) * (1 + [self ReturnLoyaltyBonus:aaPolicyYear]/100.00);
    double Value2 = VUVenture6666Value_EverCash60;
    double Value3 = 0.00;
    double Value4 = 0.00;
    
    if (aaPolicyYear == FundTerm2023) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2023"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        
        RemainingTerm_2023 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2023 = 12 - [self roundUp:((RemainingTerm_2023 - round(ceil(RemainingTerm_2023)) + 1) * 12) ];
        Value3 = ReinvestAmount2023toVenture6666_L * pow((1 + [self ReturnVUVenture6666InstLow:@"A"]), BackTerm_2023/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2023 = (pow((1 + [self ReturnVUVenture6666InstLow:@"A"]), (BackTerm_2023 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVenture6666InstLow:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2023 = (pow((1 + [self ReturnVUVenture6666InstLow:@"A"]), ((12 - BackTerm_2023) / 12.00))   - 1) / (pow(1 + [self ReturnVUVenture6666InstLow:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVenture6666Value_EverCash60 * GMIFactor_BackTermH2023 + PrevVUVenture6666Value_EverCash60 * GMIFactor_FrontTermH2023 * pow((1 + [self ReturnVUVenture6666InstLow:@"A"]), (BackTerm_2023 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVenture6666InstLow:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVenture6666Fac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
    }
    else if (aaPolicyYear == FundTerm2025) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2025"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        RemainingTerm_2025 = 0.00;
        BackTerm_2025 = 0.00;
        Value3 = 0.00;
        RemainingTerm_2025 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2025 = 12 - [self roundUp:((RemainingTerm_2025 - round(ceil(RemainingTerm_2025)) + 1) * 12) ];
        Value3 = ReinvestAmount2025toVenture6666_L * pow((1 + [self ReturnVUVenture6666InstLow:@"A"]), BackTerm_2025/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2025 = (pow((1 + [self ReturnVUVenture6666InstLow:@"A"]), (BackTerm_2025 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVenture6666InstLow:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2025 = (pow((1 + [self ReturnVUVenture6666InstLow:@"A"]), ((12 - BackTerm_2025) / 12.00))   - 1) / (pow(1 + [self ReturnVUVenture6666InstLow:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVenture6666Value_EverCash60 * GMIFactor_BackTermH2025 + PrevVUVenture6666Value_EverCash60 * GMIFactor_FrontTermH2025 * pow((1 + [self ReturnVUVenture6666InstLow:@"A"]), (BackTerm_2025 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVenture6666InstLow:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVenture6666Fac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
        
    }
    else if (aaPolicyYear == FundTerm2028) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2028"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        RemainingTerm_2028 = 0.00;
        BackTerm_2028 = 0.00;
        Value3 = 0.00;
        RemainingTerm_2028 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2028 = 12 - [self roundUp:((RemainingTerm_2028 - round(ceil(RemainingTerm_2028)) + 1) * 12) ];
        Value3 = ReinvestAmount2028toVenture6666_L * pow((1 + [self ReturnVUVenture6666InstLow:@"A"]), BackTerm_2028/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2028 = (pow((1 + [self ReturnVUVenture6666InstLow:@"A"]), (BackTerm_2028 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVenture6666InstLow:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2028 = (pow((1 + [self ReturnVUVenture6666InstLow:@"A"]), ((12 - BackTerm_2028) / 12.00))   - 1) / (pow(1 + [self ReturnVUVenture6666InstLow:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVenture6666Value_EverCash60 * GMIFactor_BackTermH2028 + PrevVUVenture6666Value_EverCash60 * GMIFactor_FrontTermH2028 * pow((1 + [self ReturnVUVenture6666InstLow:@"A"]), (BackTerm_2028 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVenture6666InstLow:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVenture6666Fac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
        
    }
    else if (aaPolicyYear == FundTerm2030) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2030"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        RemainingTerm_2030 = 0.00;
        BackTerm_2030 = 0.00;
        Value3 = 0.00;
        RemainingTerm_2030 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2030 = 12 - [self roundUp:((RemainingTerm_2030 - round(ceil(RemainingTerm_2030)) + 1) * 12) ];
        Value3 = ReinvestAmount2030toVenture6666_L * pow((1 + [self ReturnVUVenture6666InstLow:@"A"]), BackTerm_2030/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2030 = (pow((1 + [self ReturnVUVenture6666InstLow:@"A"]), (BackTerm_2030 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVenture6666InstLow:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2030 = (pow((1 + [self ReturnVUVenture6666InstLow:@"A"]), ((12 - BackTerm_2030) / 12.00))   - 1) / (pow(1 + [self ReturnVUVenture6666InstLow:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVenture6666Value_EverCash60 * GMIFactor_BackTermH2030 + PrevVUVenture6666Value_EverCash60 * GMIFactor_FrontTermH2030 * pow((1 + [self ReturnVUVenture6666InstLow:@"A"]), (BackTerm_2030 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVenture6666InstLow:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVenture6666Fac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
    }
    else if (aaPolicyYear == FundTerm2035) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2035"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        RemainingTerm_2035 = 0.00;
        BackTerm_2035 = 0.00;
        Value3 = 0.00;
        RemainingTerm_2035 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2035 = 12 - [self roundUp:((RemainingTerm_2035 - round(ceil(RemainingTerm_2035)) + 1) * 12) ];
        Value3 = ReinvestAmount2035toVenture6666_L * pow((1 + [self ReturnVUVenture6666InstLow:@"A"]), BackTerm_2035/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2035 = (pow((1 + [self ReturnVUVenture6666InstLow:@"A"]), (BackTerm_2035 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVenture6666InstLow:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2035 = (pow((1 + [self ReturnVUVenture6666InstLow:@"A"]), ((12 - BackTerm_2035) / 12.00))   - 1) / (pow(1 + [self ReturnVUVenture6666InstLow:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVenture6666Value_EverCash60 * GMIFactor_BackTermH2035 + PrevVUVenture6666Value_EverCash60 * GMIFactor_FrontTermH2035 * pow((1 + [self ReturnVUVenture6666InstLow:@"A"]), (BackTerm_2035 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVenture6666InstLow:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVenture6666Fac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
    }
    else{
        if (Age + aaPolicyYear < 60) {
            temp = Value1;
        }
        else if (Age + aaPolicyYear == 60){
            temp = Value1 + Value2;
        }
        else{
            temp = Value1 + Value2 * 12 * (1 + [self ReturnVUVenture6666InstLow:@"M"])/(pow((1 + [self ReturnVUVenture6666InstLow:@"A"]), (1.00/12.00)));
        }
        
        //if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
        double EGFundAllo_Percen = [self ReturnVUVenture6666Fac:aaPolicyYear] * 100;
        double tempInst = [self ReturnVUVenture6666InstLow:@""];
        
        temp = temp + [self PaidUpOptionTable_RTUO:FALSE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:tempInst PolYear:aaPolicyYear andMonth:0];
        //}
    }
    
    return temp + VUVenture6666Value_EverCash1 + VUVenture6666Value_EverCash6;
    
}

-(double)PaidUpOptionTable_Venture7777_High:(double)aaValue andPolicyYear :(int)aaPolicyYear{
    
    double RemainingTerm_2023 = 0.00;
    double RemainingTerm_2025 = 0.00;
    double RemainingTerm_2028 = 0.00;
    double RemainingTerm_2030 = 0.00;
    double RemainingTerm_2035 = 0.00;
    double BackTerm_2023 = 0.00;
    double BackTerm_2025 = 0.00;
    double BackTerm_2028 = 0.00;
    double BackTerm_2030 = 0.00;
    double BackTerm_2035 = 0.00;
    double GMIFactor_BackTermH2023 = 0.00;
    double GMIFactor_BackTermH2025 = 0.00;
    double GMIFactor_BackTermH2028 = 0.00;
    double GMIFactor_BackTermH2030 = 0.00;
    double GMIFactor_BackTermH2035 = 0.00;
    
    double GMIFactor_FrontTermH2023 = 0.00;
    double GMIFactor_FrontTermH2025 = 0.00;
    double GMIFactor_FrontTermH2028 = 0.00;
    double GMIFactor_FrontTermH2030 = 0.00;
    double GMIFactor_FrontTermH2035 = 0.00;
    
    
    double temp = 0.00;
    double Value1 = aaValue * (1 + [self ReturnVUVenture7777InstHigh:aaPolicyYear andMOP:@"A"]) * (1 + [self ReturnLoyaltyBonus:aaPolicyYear]/100.00);
    double Value2 = VUVenture7777Value_EverCash60;
    double Value3 = 0.00;
    double Value4 = 0.00;
    
    if (aaPolicyYear == FundTerm2023) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2023"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        
        RemainingTerm_2023 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2023 = 12 - [self roundUp:((RemainingTerm_2023 - round(ceil(RemainingTerm_2023)) + 1) * 12) ];
        Value3 = ReinvestAmount2023toVenture7777_H * pow((1 + [self ReturnVUVenture7777InstHigh:aaPolicyYear andMOP:@"A"]), BackTerm_2023/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2023 = (pow((1 + [self ReturnVUVenture7777InstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2023 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVenture7777InstHigh:aaPolicyYear andMOP:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2023 = (pow((1 + [self ReturnVUVenture7777InstHigh:aaPolicyYear andMOP:@"A"]), ((12 - BackTerm_2023) / 12.00))   - 1) / (pow(1 + [self ReturnVUVenture7777InstHigh:aaPolicyYear andMOP:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVenture7777Value_EverCash60 * GMIFactor_BackTermH2023 + PrevVUVenture7777Value_EverCash60 * GMIFactor_FrontTermH2023 * pow((1 + [self ReturnVUVenture7777InstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2023 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVenture7777InstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVenture7777Fac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
        
    }
    else if (aaPolicyYear == FundTerm2025) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2025"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        RemainingTerm_2025 = 0.00;
        BackTerm_2025 = 0.00;
        Value3 = 0.00;
        RemainingTerm_2025 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2025 = 12 - [self roundUp:((RemainingTerm_2025 - round(ceil(RemainingTerm_2025)) + 1) * 12) ];
        Value3 = ReinvestAmount2025toVenture7777_H * pow((1 + [self ReturnVUVenture7777InstHigh:aaPolicyYear andMOP:@"A"]), BackTerm_2025/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2025 = (pow((1 + [self ReturnVUVenture7777InstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2025 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVenture7777InstHigh:aaPolicyYear andMOP:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2025 = (pow((1 + [self ReturnVUVenture7777InstHigh:aaPolicyYear andMOP:@"A"]), ((12 - BackTerm_2025) / 12.00))   - 1) / (pow(1 + [self ReturnVUVenture7777InstHigh:aaPolicyYear andMOP:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVenture7777Value_EverCash60 * GMIFactor_BackTermH2025 + PrevVUVenture7777Value_EverCash60 * GMIFactor_FrontTermH2025 * pow((1 + [self ReturnVUVenture7777InstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2025 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVenture7777InstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVenture7777Fac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
        
    }
    else if (aaPolicyYear == FundTerm2028) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2028"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        RemainingTerm_2028 = 0.00;
        BackTerm_2028 = 0.00;
        Value3 = 0.00;
        RemainingTerm_2028 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2028 = 12 - [self roundUp:((RemainingTerm_2028 - round(ceil(RemainingTerm_2028)) + 1) * 12) ];
        Value3 = ReinvestAmount2028toVenture7777_H * pow((1 + [self ReturnVUVenture7777InstHigh:aaPolicyYear andMOP:@"A"]), BackTerm_2028/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2028 = (pow((1 + [self ReturnVUVenture7777InstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2028 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVenture7777InstHigh:aaPolicyYear andMOP:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2028 = (pow((1 + [self ReturnVUVenture7777InstHigh:aaPolicyYear andMOP:@"A"]), ((12 - BackTerm_2028) / 12.00))   - 1) / (pow(1 + [self ReturnVUVenture7777InstHigh:aaPolicyYear andMOP:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVenture7777Value_EverCash60 * GMIFactor_BackTermH2028 + PrevVUVenture7777Value_EverCash60 * GMIFactor_FrontTermH2028 * pow((1 + [self ReturnVUVenture7777InstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2028 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVenture7777InstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVenture7777Fac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
        
    }
    else if (aaPolicyYear == FundTerm2030) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2030"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        RemainingTerm_2030 = 0.00;
        BackTerm_2030 = 0.00;
        Value3 = 0.00;
        RemainingTerm_2030 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2030 = 12 - [self roundUp:((RemainingTerm_2030 - round(ceil(RemainingTerm_2030)) + 1) * 12) ];
        Value3 = ReinvestAmount2030toVenture7777_H * pow((1 + [self ReturnVUVenture7777InstHigh:aaPolicyYear andMOP:@"A"]), BackTerm_2030/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2030 = (pow((1 + [self ReturnVUVenture7777InstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2030 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVenture7777InstHigh:aaPolicyYear andMOP:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2030 = (pow((1 + [self ReturnVUVenture7777InstHigh:aaPolicyYear andMOP:@"A"]), ((12 - BackTerm_2030) / 12.00))   - 1) / (pow(1 + [self ReturnVUVenture7777InstHigh:aaPolicyYear andMOP:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVenture7777Value_EverCash60 * GMIFactor_BackTermH2030 + PrevVUVenture7777Value_EverCash60 * GMIFactor_FrontTermH2030 * pow((1 + [self ReturnVUVenture7777InstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2030 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVenture7777InstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVenture7777Fac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
        
    }
    else if (aaPolicyYear == FundTerm2035) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2035"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        RemainingTerm_2035 = 0.00;
        BackTerm_2035 = 0.00;
        Value3 = 0.00;
        RemainingTerm_2035 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2035 = 12 - [self roundUp:((RemainingTerm_2035 - round(ceil(RemainingTerm_2035)) + 1) * 12) ];
        Value3 = ReinvestAmount2035toVenture7777_H * pow((1 + [self ReturnVUVenture7777InstHigh:aaPolicyYear andMOP:@"A"]), BackTerm_2035/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2035 = (pow((1 + [self ReturnVUVenture7777InstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2035 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVenture7777InstHigh:aaPolicyYear andMOP:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2035 = (pow((1 + [self ReturnVUVenture7777InstHigh:aaPolicyYear andMOP:@"A"]), ((12 - BackTerm_2035) / 12.00))   - 1) / (pow(1 + [self ReturnVUVenture7777InstHigh:aaPolicyYear andMOP:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVenture7777Value_EverCash60 * GMIFactor_BackTermH2035 + PrevVUVenture7777Value_EverCash60 * GMIFactor_FrontTermH2035 * pow((1 + [self ReturnVUVenture7777InstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2035 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVenture7777InstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVenture7777Fac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i ]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
        
    }
    else{
        if (Age + aaPolicyYear < 60) {
            temp = Value1;
        }
        else if (Age + aaPolicyYear == 60){
            temp = Value1 + Value2;
        }
        else{
            temp = Value1 + Value2 * 12 * (1 + [self ReturnVUVenture7777InstHigh:aaPolicyYear andMOP:@"M"])/(pow((1 + [self ReturnVUVenture7777InstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00)));
        }
        
        //if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
        double EGFundAllo_Percen = [self ReturnVUVenture7777Fac:aaPolicyYear] * 100;
        double tempInst = [self ReturnVUVenture7777InstHigh:aaPolicyYear andMOP:@""];
        
        temp = temp + [self PaidUpOptionTable_RTUO:FALSE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:tempInst PolYear:aaPolicyYear andMonth:0];
        //}
    }
    
    return temp + VUVenture7777Value_EverCash1 + VUVenture7777Value_EverCash6;
    
}

-(double)PaidUpOptionTable_Venture7777_Median:(double)aaValue andPolicyYear :(int)aaPolicyYear {
    
    double RemainingTerm_2023 = 0.00;
    double RemainingTerm_2025 = 0.00;
    double RemainingTerm_2028 = 0.00;
    double RemainingTerm_2030 = 0.00;
    double RemainingTerm_2035 = 0.00;
    double BackTerm_2023 = 0.00;
    double BackTerm_2025 = 0.00;
    double BackTerm_2028 = 0.00;
    double BackTerm_2030 = 0.00;
    double BackTerm_2035 = 0.00;
    double GMIFactor_BackTermH2023 = 0.00;
    double GMIFactor_BackTermH2025 = 0.00;
    double GMIFactor_BackTermH2028 = 0.00;
    double GMIFactor_BackTermH2030 = 0.00;
    double GMIFactor_BackTermH2035 = 0.00;
    
    double GMIFactor_FrontTermH2023 = 0.00;
    double GMIFactor_FrontTermH2025 = 0.00;
    double GMIFactor_FrontTermH2028 = 0.00;
    double GMIFactor_FrontTermH2030 = 0.00;
    double GMIFactor_FrontTermH2035 = 0.00;
    
    
    double temp = 0.00;
    double Value1 = aaValue * (1 + [self ReturnVUVenture7777InstMedian:@"A"]) * (1 + [self ReturnLoyaltyBonus:aaPolicyYear]/100.00);
    double Value2 = VUVenture7777Value_EverCash60;
    double Value3 = 0.00;
    double Value4 = 0.00;
    
    if (aaPolicyYear == FundTerm2023) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2023"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        
        RemainingTerm_2023 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2023 = 12 - [self roundUp:((RemainingTerm_2023 - round(ceil(RemainingTerm_2023)) + 1) * 12) ];
        Value3 = ReinvestAmount2023toVenture7777_M * pow((1 + [self ReturnVUVenture7777InstMedian:@"A"]), BackTerm_2023/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2023 = (pow((1 + [self ReturnVUVenture7777InstMedian:@"A"]), (BackTerm_2023 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVenture7777InstMedian:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2023 = (pow((1 + [self ReturnVUVenture7777InstMedian:@"A"]), ((12 - BackTerm_2023) / 12.00))   - 1) / (pow(1 + [self ReturnVUVenture7777InstMedian:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVenture7777Value_EverCash60 * GMIFactor_BackTermH2023 + PrevVUVenture7777Value_EverCash60 * GMIFactor_FrontTermH2023 * pow((1 + [self ReturnVUVenture7777InstMedian:@"A"]), (BackTerm_2023 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVenture7777InstMedian:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVenture7777Fac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
        
    }
    else if (aaPolicyYear == FundTerm2025) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2025"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        RemainingTerm_2025 = 0.00;
        BackTerm_2025 = 0.00;
        Value3 = 0.00;
        RemainingTerm_2025 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2025 = 12 - [self roundUp:((RemainingTerm_2025 - round(ceil(RemainingTerm_2025)) + 1) * 12) ];
        Value3 = ReinvestAmount2025toVenture7777_M * pow((1 + [self ReturnVUVenture7777InstMedian:@"A"]), BackTerm_2025/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2025 = (pow((1 + [self ReturnVUVenture7777InstMedian:@"A"]), (BackTerm_2025 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVenture7777InstMedian:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2025 = (pow((1 + [self ReturnVUVenture7777InstMedian:@"A"]), ((12 - BackTerm_2025) / 12.00))   - 1) / (pow(1 + [self ReturnVUVenture7777InstMedian:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVenture7777Value_EverCash60 * GMIFactor_BackTermH2025 + PrevVUVenture7777Value_EverCash60 * GMIFactor_FrontTermH2025 * pow((1 + [self ReturnVUVenture7777InstMedian:@"A"]), (BackTerm_2025 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVenture7777InstMedian:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVenture7777Fac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
        
    }
    else if (aaPolicyYear == FundTerm2028) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2028"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        RemainingTerm_2028 = 0.00;
        BackTerm_2028 = 0.00;
        Value3 = 0.00;
        RemainingTerm_2028 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2028 = 12 - [self roundUp:((RemainingTerm_2028 - round(ceil(RemainingTerm_2028)) + 1) * 12) ];
        Value3 = ReinvestAmount2028toVenture7777_M * pow((1 + [self ReturnVUVenture7777InstMedian:@"A"]), BackTerm_2028/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2028 = (pow((1 + [self ReturnVUVenture7777InstMedian:@"A"]), (BackTerm_2028 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVenture7777InstMedian:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2028 = (pow((1 + [self ReturnVUVenture7777InstMedian:@"A"]), ((12 - BackTerm_2028) / 12.00))   - 1) / (pow(1 + [self ReturnVUVenture7777InstMedian:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVenture7777Value_EverCash60 * GMIFactor_BackTermH2028 + PrevVUVenture7777Value_EverCash60 * GMIFactor_FrontTermH2028 * pow((1 + [self ReturnVUVenture7777InstMedian:@"A"]), (BackTerm_2028 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVenture7777InstMedian:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVenture7777Fac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
        
        
    }
    else if (aaPolicyYear == FundTerm2030) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2030"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        RemainingTerm_2030 = 0.00;
        BackTerm_2030 = 0.00;
        Value3 = 0.00;
        RemainingTerm_2030 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2030 = 12 - [self roundUp:((RemainingTerm_2030 - round(ceil(RemainingTerm_2030)) + 1) * 12) ];
        Value3 = ReinvestAmount2030toVenture7777_M * pow((1 + [self ReturnVUVenture7777InstMedian:@"A"]), BackTerm_2030/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2030 = (pow((1 + [self ReturnVUVenture7777InstMedian:@"A"]), (BackTerm_2030 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVenture7777InstMedian:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2030 = (pow((1 + [self ReturnVUVenture7777InstMedian:@"A"]), ((12 - BackTerm_2030) / 12.00))   - 1) / (pow(1 + [self ReturnVUVenture7777InstMedian:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVenture7777Value_EverCash60 * GMIFactor_BackTermH2030 + PrevVUVenture7777Value_EverCash60 * GMIFactor_FrontTermH2030 * pow((1 + [self ReturnVUVenture7777InstMedian:@"A"]), (BackTerm_2030 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVenture7777InstMedian:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVenture7777Fac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
        
    }
    else if (aaPolicyYear == FundTerm2035) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2035"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        RemainingTerm_2035 = 0.00;
        BackTerm_2035 = 0.00;
        Value3 = 0.00;
        RemainingTerm_2035 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2035 = 12 - [self roundUp:((RemainingTerm_2035 - round(ceil(RemainingTerm_2035)) + 1) * 12) ];
        Value3 = ReinvestAmount2035toVenture7777_M * pow((1 + [self ReturnVUVenture7777InstMedian:@"A"]), BackTerm_2035/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2035 = (pow((1 + [self ReturnVUVenture7777InstMedian:@"A"]), (BackTerm_2035 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVenture7777InstMedian:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2035 = (pow((1 + [self ReturnVUVenture7777InstMedian:@"A"]), ((12 - BackTerm_2035) / 12.00))   - 1) / (pow(1 + [self ReturnVUVenture7777InstMedian:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVenture7777Value_EverCash60 * GMIFactor_BackTermH2035 + PrevVUVenture7777Value_EverCash60 * GMIFactor_FrontTermH2035 * pow((1 + [self ReturnVUVenture7777InstMedian:@"A"]), (BackTerm_2035 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVenture7777InstMedian:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVenture7777Fac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
    }
    else{
        if (Age + aaPolicyYear < 60) {
            temp = Value1;
        }
        else if (Age + aaPolicyYear == 60){
            temp = Value1 + Value2;
        }
        else{
            temp = Value1 + Value2 * 12 * (1 + [self ReturnVUVenture7777InstMedian:@"M"])/(pow((1 + [self ReturnVUVenture7777InstMedian:@"A"]), (1.00/12.00)));
        }
        
        //if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
        double EGFundAllo_Percen = [self ReturnVUVenture7777Fac:aaPolicyYear] * 100;
        double tempInst = [self ReturnVUVenture7777InstMedian:@""];
        
        temp = temp + [self PaidUpOptionTable_RTUO:FALSE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:tempInst PolYear:aaPolicyYear andMonth:0];
        //}
    }
    
    return temp + VUVenture7777Value_EverCash1 + VUVenture7777Value_EverCash6;
    
}

-(double)PaidUpOptionTable_Venture7777_Low:(double)aaValue andPolicyYear :(int)aaPolicyYear {
    
    double RemainingTerm_2023 = 0.00;
    double RemainingTerm_2025 = 0.00;
    double RemainingTerm_2028 = 0.00;
    double RemainingTerm_2030 = 0.00;
    double RemainingTerm_2035 = 0.00;
    double BackTerm_2023 = 0.00;
    double BackTerm_2025 = 0.00;
    double BackTerm_2028 = 0.00;
    double BackTerm_2030 = 0.00;
    double BackTerm_2035 = 0.00;
    double GMIFactor_BackTermH2023 = 0.00;
    double GMIFactor_BackTermH2025 = 0.00;
    double GMIFactor_BackTermH2028 = 0.00;
    double GMIFactor_BackTermH2030 = 0.00;
    double GMIFactor_BackTermH2035 = 0.00;
    
    double GMIFactor_FrontTermH2023 = 0.00;
    double GMIFactor_FrontTermH2025 = 0.00;
    double GMIFactor_FrontTermH2028 = 0.00;
    double GMIFactor_FrontTermH2030 = 0.00;
    double GMIFactor_FrontTermH2035 = 0.00;
    
    
    double temp = 0.00;
    double Value1 = aaValue * (1 + [self ReturnVUVenture7777InstLow:@"A"]) * (1 + [self ReturnLoyaltyBonus:aaPolicyYear]/100.00);
    double Value2 = VUVenture7777Value_EverCash60;
    double Value3 = 0.00;
    double Value4 = 0.00;
    
    if (aaPolicyYear == FundTerm2023) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2023"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        
        RemainingTerm_2023 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2023 = 12 - [self roundUp:((RemainingTerm_2023 - round(ceil(RemainingTerm_2023)) + 1) * 12) ];
        Value3 = ReinvestAmount2023toVenture7777_L * pow((1 + [self ReturnVUVenture7777InstLow:@"A"]), BackTerm_2023/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2023 = (pow((1 + [self ReturnVUVenture7777InstLow:@"A"]), (BackTerm_2023 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVenture7777InstLow:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2023 = (pow((1 + [self ReturnVUVenture7777InstLow:@"A"]), ((12 - BackTerm_2023) / 12.00))   - 1) / (pow(1 + [self ReturnVUVenture7777InstLow:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVenture7777Value_EverCash60 * GMIFactor_BackTermH2023 + PrevVUVenture7777Value_EverCash60 * GMIFactor_FrontTermH2023 * pow((1 + [self ReturnVUVenture7777InstLow:@"A"]), (BackTerm_2023 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVenture7777InstLow:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVenture7777Fac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
    }
    else if (aaPolicyYear == FundTerm2025) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2025"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        RemainingTerm_2025 = 0.00;
        BackTerm_2025 = 0.00;
        Value3 = 0.00;
        RemainingTerm_2025 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2025 = 12 - [self roundUp:((RemainingTerm_2025 - round(ceil(RemainingTerm_2025)) + 1) * 12) ];
        Value3 = ReinvestAmount2025toVenture7777_L * pow((1 + [self ReturnVUVenture7777InstLow:@"A"]), BackTerm_2025/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2025 = (pow((1 + [self ReturnVUVenture7777InstLow:@"A"]), (BackTerm_2025 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVenture7777InstLow:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2025 = (pow((1 + [self ReturnVUVenture7777InstLow:@"A"]), ((12 - BackTerm_2025) / 12.00))   - 1) / (pow(1 + [self ReturnVUVenture7777InstLow:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVenture7777Value_EverCash60 * GMIFactor_BackTermH2025 + PrevVUVenture7777Value_EverCash60 * GMIFactor_FrontTermH2025 * pow((1 + [self ReturnVUVenture7777InstLow:@"A"]), (BackTerm_2025 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVenture7777InstLow:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVenture7777Fac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
        
    }
    else if (aaPolicyYear == FundTerm2028) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2028"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        RemainingTerm_2028 = 0.00;
        BackTerm_2028 = 0.00;
        Value3 = 0.00;
        RemainingTerm_2028 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2028 = 12 - [self roundUp:((RemainingTerm_2028 - round(ceil(RemainingTerm_2028)) + 1) * 12) ];
        Value3 = ReinvestAmount2028toVenture7777_L * pow((1 + [self ReturnVUVenture7777InstLow:@"A"]), BackTerm_2028/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2028 = (pow((1 + [self ReturnVUVenture7777InstLow:@"A"]), (BackTerm_2028 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVenture7777InstLow:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2028 = (pow((1 + [self ReturnVUVenture7777InstLow:@"A"]), ((12 - BackTerm_2028) / 12.00))   - 1) / (pow(1 + [self ReturnVUVenture7777InstLow:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVenture7777Value_EverCash60 * GMIFactor_BackTermH2028 + PrevVUVenture7777Value_EverCash60 * GMIFactor_FrontTermH2028 * pow((1 + [self ReturnVUVenture7777InstLow:@"A"]), (BackTerm_2028 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVenture7777InstLow:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVenture7777Fac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
        
    }
    else if (aaPolicyYear == FundTerm2030) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2030"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        RemainingTerm_2030 = 0.00;
        BackTerm_2030 = 0.00;
        Value3 = 0.00;
        RemainingTerm_2030 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2030 = 12 - [self roundUp:((RemainingTerm_2030 - round(ceil(RemainingTerm_2030)) + 1) * 12) ];
        Value3 = ReinvestAmount2030toVenture7777_L * pow((1 + [self ReturnVUVenture7777InstLow:@"A"]), BackTerm_2030/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2030 = (pow((1 + [self ReturnVUVenture7777InstLow:@"A"]), (BackTerm_2030 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVenture7777InstLow:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2030 = (pow((1 + [self ReturnVUVenture7777InstLow:@"A"]), ((12 - BackTerm_2030) / 12.00))   - 1) / (pow(1 + [self ReturnVUVenture7777InstLow:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVenture7777Value_EverCash60 * GMIFactor_BackTermH2030 + PrevVUVenture7777Value_EverCash60 * GMIFactor_FrontTermH2030 * pow((1 + [self ReturnVUVenture7777InstLow:@"A"]), (BackTerm_2030 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVenture7777InstLow:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVenture7777Fac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
    }
    else if (aaPolicyYear == FundTerm2035) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2035"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        RemainingTerm_2035 = 0.00;
        BackTerm_2035 = 0.00;
        Value3 = 0.00;
        RemainingTerm_2035 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2035 = 12 - [self roundUp:((RemainingTerm_2035 - round(ceil(RemainingTerm_2035)) + 1) * 12) ];
        Value3 = ReinvestAmount2035toVenture7777_L * pow((1 + [self ReturnVUVenture7777InstLow:@"A"]), BackTerm_2035/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2035 = (pow((1 + [self ReturnVUVenture7777InstLow:@"A"]), (BackTerm_2035 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVenture7777InstLow:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2035 = (pow((1 + [self ReturnVUVenture7777InstLow:@"A"]), ((12 - BackTerm_2035) / 12.00))   - 1) / (pow(1 + [self ReturnVUVenture7777InstLow:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVenture7777Value_EverCash60 * GMIFactor_BackTermH2035 + PrevVUVenture7777Value_EverCash60 * GMIFactor_FrontTermH2035 * pow((1 + [self ReturnVUVenture7777InstLow:@"A"]), (BackTerm_2035 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVenture7777InstLow:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVenture7777Fac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
    }
    else{
        if (Age + aaPolicyYear < 60) {
            temp = Value1;
        }
        else if (Age + aaPolicyYear == 60){
            temp = Value1 + Value2;
        }
        else{
            temp = Value1 + Value2 * 12 * (1 + [self ReturnVUVenture7777InstLow:@"M"])/(pow((1 + [self ReturnVUVenture7777InstLow:@"A"]), (1.00/12.00)));
        }
        
        //if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
        double EGFundAllo_Percen = [self ReturnVUVenture7777Fac:aaPolicyYear] * 100;
        double tempInst = [self ReturnVUVenture7777InstLow:@""];
        
        temp = temp + [self PaidUpOptionTable_RTUO:FALSE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:tempInst PolYear:aaPolicyYear andMonth:0];
        //}
    }
    
    return temp + VUVenture7777Value_EverCash1 + VUVenture7777Value_EverCash6;
    
}

-(double)PaidUpOptionTable_Venture8888_High:(double)aaValue andPolicyYear :(int)aaPolicyYear{
    
    double RemainingTerm_2023 = 0.00;
    double RemainingTerm_2025 = 0.00;
    double RemainingTerm_2028 = 0.00;
    double RemainingTerm_2030 = 0.00;
    double RemainingTerm_2035 = 0.00;
    double BackTerm_2023 = 0.00;
    double BackTerm_2025 = 0.00;
    double BackTerm_2028 = 0.00;
    double BackTerm_2030 = 0.00;
    double BackTerm_2035 = 0.00;
    double GMIFactor_BackTermH2023 = 0.00;
    double GMIFactor_BackTermH2025 = 0.00;
    double GMIFactor_BackTermH2028 = 0.00;
    double GMIFactor_BackTermH2030 = 0.00;
    double GMIFactor_BackTermH2035 = 0.00;
    
    double GMIFactor_FrontTermH2023 = 0.00;
    double GMIFactor_FrontTermH2025 = 0.00;
    double GMIFactor_FrontTermH2028 = 0.00;
    double GMIFactor_FrontTermH2030 = 0.00;
    double GMIFactor_FrontTermH2035 = 0.00;
    
    
    double temp = 0.00;
    double Value1 = aaValue * (1 + [self ReturnVUVenture8888InstHigh:aaPolicyYear andMOP:@"A"]) * (1 + [self ReturnLoyaltyBonus:aaPolicyYear]/100.00);
    double Value2 = VUVenture8888Value_EverCash60;
    double Value3 = 0.00;
    double Value4 = 0.00;
    
    if (aaPolicyYear == FundTerm2023) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2023"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        
        RemainingTerm_2023 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2023 = 12 - [self roundUp:((RemainingTerm_2023 - round(ceil(RemainingTerm_2023)) + 1) * 12) ];
        Value3 = ReinvestAmount2023toVenture8888_H * pow((1 + [self ReturnVUVenture8888InstHigh:aaPolicyYear andMOP:@"A"]), BackTerm_2023/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2023 = (pow((1 + [self ReturnVUVenture8888InstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2023 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVenture8888InstHigh:aaPolicyYear andMOP:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2023 = (pow((1 + [self ReturnVUVenture8888InstHigh:aaPolicyYear andMOP:@"A"]), ((12 - BackTerm_2023) / 12.00))   - 1) / (pow(1 + [self ReturnVUVenture8888InstHigh:aaPolicyYear andMOP:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVenture8888Value_EverCash60 * GMIFactor_BackTermH2023 + PrevVUVenture8888Value_EverCash60 * GMIFactor_FrontTermH2023 * pow((1 + [self ReturnVUVenture8888InstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2023 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVenture8888InstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVenture8888Fac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
        
    }
    else if (aaPolicyYear == FundTerm2025) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2025"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        RemainingTerm_2025 = 0.00;
        BackTerm_2025 = 0.00;
        Value3 = 0.00;
        RemainingTerm_2025 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2025 = 12 - [self roundUp:((RemainingTerm_2025 - round(ceil(RemainingTerm_2025)) + 1) * 12) ];
        Value3 = ReinvestAmount2025toVenture8888_H * pow((1 + [self ReturnVUVenture8888InstHigh:aaPolicyYear andMOP:@"A"]), BackTerm_2025/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2025 = (pow((1 + [self ReturnVUVenture8888InstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2025 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVenture8888InstHigh:aaPolicyYear andMOP:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2025 = (pow((1 + [self ReturnVUVenture8888InstHigh:aaPolicyYear andMOP:@"A"]), ((12 - BackTerm_2025) / 12.00))   - 1) / (pow(1 + [self ReturnVUVenture8888InstHigh:aaPolicyYear andMOP:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVenture8888Value_EverCash60 * GMIFactor_BackTermH2025 + PrevVUVenture8888Value_EverCash60 * GMIFactor_FrontTermH2025 * pow((1 + [self ReturnVUVenture8888InstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2025 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVenture8888InstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVenture8888Fac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
        
    }
    else if (aaPolicyYear == FundTerm2028) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2028"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        RemainingTerm_2028 = 0.00;
        BackTerm_2028 = 0.00;
        Value3 = 0.00;
        RemainingTerm_2028 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2028 = 12 - [self roundUp:((RemainingTerm_2028 - round(ceil(RemainingTerm_2028)) + 1) * 12) ];
        Value3 = ReinvestAmount2028toVenture8888_H * pow((1 + [self ReturnVUVenture8888InstHigh:aaPolicyYear andMOP:@"A"]), BackTerm_2028/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2028 = (pow((1 + [self ReturnVUVenture8888InstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2028 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVenture8888InstHigh:aaPolicyYear andMOP:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2028 = (pow((1 + [self ReturnVUVenture8888InstHigh:aaPolicyYear andMOP:@"A"]), ((12 - BackTerm_2028) / 12.00))   - 1) / (pow(1 + [self ReturnVUVenture8888InstHigh:aaPolicyYear andMOP:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVenture8888Value_EverCash60 * GMIFactor_BackTermH2028 + PrevVUVenture8888Value_EverCash60 * GMIFactor_FrontTermH2028 * pow((1 + [self ReturnVUVenture8888InstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2028 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVenture8888InstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVenture8888Fac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
        
    }
    else if (aaPolicyYear == FundTerm2030) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2030"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        RemainingTerm_2030 = 0.00;
        BackTerm_2030 = 0.00;
        Value3 = 0.00;
        RemainingTerm_2030 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2030 = 12 - [self roundUp:((RemainingTerm_2030 - round(ceil(RemainingTerm_2030)) + 1) * 12) ];
        Value3 = ReinvestAmount2030toVenture8888_H * pow((1 + [self ReturnVUVenture8888InstHigh:aaPolicyYear andMOP:@"A"]), BackTerm_2030/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2030 = (pow((1 + [self ReturnVUVenture8888InstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2030 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVenture8888InstHigh:aaPolicyYear andMOP:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2030 = (pow((1 + [self ReturnVUVenture8888InstHigh:aaPolicyYear andMOP:@"A"]), ((12 - BackTerm_2030) / 12.00))   - 1) / (pow(1 + [self ReturnVUVenture8888InstHigh:aaPolicyYear andMOP:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVenture8888Value_EverCash60 * GMIFactor_BackTermH2030 + PrevVUVenture8888Value_EverCash60 * GMIFactor_FrontTermH2030 * pow((1 + [self ReturnVUVenture8888InstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2030 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVenture8888InstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVenture8888Fac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
        
    }
    else if (aaPolicyYear == FundTerm2035) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2035"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        RemainingTerm_2035 = 0.00;
        BackTerm_2035 = 0.00;
        Value3 = 0.00;
        RemainingTerm_2035 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2035 = 12 - [self roundUp:((RemainingTerm_2035 - round(ceil(RemainingTerm_2035)) + 1) * 12) ];
        Value3 = ReinvestAmount2035toVenture8888_H * pow((1 + [self ReturnVUVenture8888InstHigh:aaPolicyYear andMOP:@"A"]), BackTerm_2035/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2035 = (pow((1 + [self ReturnVUVenture8888InstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2035 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVenture8888InstHigh:aaPolicyYear andMOP:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2035 = (pow((1 + [self ReturnVUVenture8888InstHigh:aaPolicyYear andMOP:@"A"]), ((12 - BackTerm_2035) / 12.00))   - 1) / (pow(1 + [self ReturnVUVenture8888InstHigh:aaPolicyYear andMOP:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVenture8888Value_EverCash60 * GMIFactor_BackTermH2035 + PrevVUVenture8888Value_EverCash60 * GMIFactor_FrontTermH2035 * pow((1 + [self ReturnVUVenture8888InstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2035 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVenture8888InstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVenture8888Fac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i ]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
        
    }
    else{
        if (Age + aaPolicyYear < 60) {
            temp = Value1;
        }
        else if (Age + aaPolicyYear == 60){
            temp = Value1 + Value2;
        }
        else{
            temp = Value1 + Value2 * 12 * (1 + [self ReturnVUVenture8888InstHigh:aaPolicyYear andMOP:@"M"])/(pow((1 + [self ReturnVUVenture8888InstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00)));
        }
        
        //if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
        double EGFundAllo_Percen = [self ReturnVUVenture8888Fac:aaPolicyYear] * 100;
        double tempInst = [self ReturnVUVenture8888InstHigh:aaPolicyYear andMOP:@""];
        
        temp = temp + [self PaidUpOptionTable_RTUO:FALSE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:tempInst PolYear:aaPolicyYear andMonth:0];
        //}
    }
    
    return temp + VUVenture8888Value_EverCash1 + VUVenture8888Value_EverCash6;
    
}

-(double)PaidUpOptionTable_Venture8888_Median:(double)aaValue andPolicyYear :(int)aaPolicyYear {
    
    double RemainingTerm_2023 = 0.00;
    double RemainingTerm_2025 = 0.00;
    double RemainingTerm_2028 = 0.00;
    double RemainingTerm_2030 = 0.00;
    double RemainingTerm_2035 = 0.00;
    double BackTerm_2023 = 0.00;
    double BackTerm_2025 = 0.00;
    double BackTerm_2028 = 0.00;
    double BackTerm_2030 = 0.00;
    double BackTerm_2035 = 0.00;
    double GMIFactor_BackTermH2023 = 0.00;
    double GMIFactor_BackTermH2025 = 0.00;
    double GMIFactor_BackTermH2028 = 0.00;
    double GMIFactor_BackTermH2030 = 0.00;
    double GMIFactor_BackTermH2035 = 0.00;
    
    double GMIFactor_FrontTermH2023 = 0.00;
    double GMIFactor_FrontTermH2025 = 0.00;
    double GMIFactor_FrontTermH2028 = 0.00;
    double GMIFactor_FrontTermH2030 = 0.00;
    double GMIFactor_FrontTermH2035 = 0.00;
    
    
    double temp = 0.00;
    double Value1 = aaValue * (1 + [self ReturnVUVenture8888InstMedian:@"A"]) * (1 + [self ReturnLoyaltyBonus:aaPolicyYear]/100.00);
    double Value2 = VUVenture8888Value_EverCash60;
    double Value3 = 0.00;
    double Value4 = 0.00;
    
    if (aaPolicyYear == FundTerm2023) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2023"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        
        RemainingTerm_2023 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2023 = 12 - [self roundUp:((RemainingTerm_2023 - round(ceil(RemainingTerm_2023)) + 1) * 12) ];
        Value3 = ReinvestAmount2023toVenture8888_M * pow((1 + [self ReturnVUVenture8888InstMedian:@"A"]), BackTerm_2023/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2023 = (pow((1 + [self ReturnVUVenture8888InstMedian:@"A"]), (BackTerm_2023 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVenture8888InstMedian:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2023 = (pow((1 + [self ReturnVUVenture8888InstMedian:@"A"]), ((12 - BackTerm_2023) / 12.00))   - 1) / (pow(1 + [self ReturnVUVenture8888InstMedian:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVenture8888Value_EverCash60 * GMIFactor_BackTermH2023 + PrevVUVenture8888Value_EverCash60 * GMIFactor_FrontTermH2023 * pow((1 + [self ReturnVUVenture8888InstMedian:@"A"]), (BackTerm_2023 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVenture8888InstMedian:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVenture8888Fac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
        
    }
    else if (aaPolicyYear == FundTerm2025) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2025"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        RemainingTerm_2025 = 0.00;
        BackTerm_2025 = 0.00;
        Value3 = 0.00;
        RemainingTerm_2025 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2025 = 12 - [self roundUp:((RemainingTerm_2025 - round(ceil(RemainingTerm_2025)) + 1) * 12) ];
        Value3 = ReinvestAmount2025toVenture8888_M * pow((1 + [self ReturnVUVenture8888InstMedian:@"A"]), BackTerm_2025/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2025 = (pow((1 + [self ReturnVUVenture8888InstMedian:@"A"]), (BackTerm_2025 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVenture8888InstMedian:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2025 = (pow((1 + [self ReturnVUVenture8888InstMedian:@"A"]), ((12 - BackTerm_2025) / 12.00))   - 1) / (pow(1 + [self ReturnVUVenture8888InstMedian:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVenture8888Value_EverCash60 * GMIFactor_BackTermH2025 + PrevVUVenture8888Value_EverCash60 * GMIFactor_FrontTermH2025 * pow((1 + [self ReturnVUVenture8888InstMedian:@"A"]), (BackTerm_2025 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVenture8888InstMedian:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVenture8888Fac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
        
    }
    else if (aaPolicyYear == FundTerm2028) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2028"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        RemainingTerm_2028 = 0.00;
        BackTerm_2028 = 0.00;
        Value3 = 0.00;
        RemainingTerm_2028 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2028 = 12 - [self roundUp:((RemainingTerm_2028 - round(ceil(RemainingTerm_2028)) + 1) * 12) ];
        Value3 = ReinvestAmount2028toVenture8888_M * pow((1 + [self ReturnVUVenture8888InstMedian:@"A"]), BackTerm_2028/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2028 = (pow((1 + [self ReturnVUVenture8888InstMedian:@"A"]), (BackTerm_2028 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVenture8888InstMedian:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2028 = (pow((1 + [self ReturnVUVenture8888InstMedian:@"A"]), ((12 - BackTerm_2028) / 12.00))   - 1) / (pow(1 + [self ReturnVUVenture8888InstMedian:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVenture8888Value_EverCash60 * GMIFactor_BackTermH2028 + PrevVUVenture8888Value_EverCash60 * GMIFactor_FrontTermH2028 * pow((1 + [self ReturnVUVenture8888InstMedian:@"A"]), (BackTerm_2028 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVenture8888InstMedian:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVenture8888Fac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
        
        
    }
    else if (aaPolicyYear == FundTerm2030) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2030"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        RemainingTerm_2030 = 0.00;
        BackTerm_2030 = 0.00;
        Value3 = 0.00;
        RemainingTerm_2030 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2030 = 12 - [self roundUp:((RemainingTerm_2030 - round(ceil(RemainingTerm_2030)) + 1) * 12) ];
        Value3 = ReinvestAmount2030toVenture8888_M * pow((1 + [self ReturnVUVenture8888InstMedian:@"A"]), BackTerm_2030/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2030 = (pow((1 + [self ReturnVUVenture8888InstMedian:@"A"]), (BackTerm_2030 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVenture8888InstMedian:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2030 = (pow((1 + [self ReturnVUVenture8888InstMedian:@"A"]), ((12 - BackTerm_2030) / 12.00))   - 1) / (pow(1 + [self ReturnVUVenture8888InstMedian:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVenture8888Value_EverCash60 * GMIFactor_BackTermH2030 + PrevVUVenture8888Value_EverCash60 * GMIFactor_FrontTermH2030 * pow((1 + [self ReturnVUVenture8888InstMedian:@"A"]), (BackTerm_2030 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVenture8888InstMedian:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVenture8888Fac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
        
    }
    else if (aaPolicyYear == FundTerm2035) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2035"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        RemainingTerm_2035 = 0.00;
        BackTerm_2035 = 0.00;
        Value3 = 0.00;
        RemainingTerm_2035 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2035 = 12 - [self roundUp:((RemainingTerm_2035 - round(ceil(RemainingTerm_2035)) + 1) * 12) ];
        Value3 = ReinvestAmount2035toVenture8888_M * pow((1 + [self ReturnVUVenture8888InstMedian:@"A"]), BackTerm_2035/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2035 = (pow((1 + [self ReturnVUVenture8888InstMedian:@"A"]), (BackTerm_2035 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVenture8888InstMedian:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2035 = (pow((1 + [self ReturnVUVenture8888InstMedian:@"A"]), ((12 - BackTerm_2035) / 12.00))   - 1) / (pow(1 + [self ReturnVUVenture8888InstMedian:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVenture8888Value_EverCash60 * GMIFactor_BackTermH2035 + PrevVUVenture8888Value_EverCash60 * GMIFactor_FrontTermH2035 * pow((1 + [self ReturnVUVenture8888InstMedian:@"A"]), (BackTerm_2035 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVenture8888InstMedian:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVenture8888Fac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
    }
    else{
        if (Age + aaPolicyYear < 60) {
            temp = Value1;
        }
        else if (Age + aaPolicyYear == 60){
            temp = Value1 + Value2;
        }
        else{
            temp = Value1 + Value2 * 12 * (1 + [self ReturnVUVenture8888InstMedian:@"M"])/(pow((1 + [self ReturnVUVenture8888InstMedian:@"A"]), (1.00/12.00)));
        }
        
        //if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
        double EGFundAllo_Percen = [self ReturnVUVenture8888Fac:aaPolicyYear] * 100;
        double tempInst = [self ReturnVUVenture8888InstMedian:@""];
        
        temp = temp + [self PaidUpOptionTable_RTUO:FALSE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:tempInst PolYear:aaPolicyYear andMonth:0];
        //}
    }
    
    return temp + VUVenture8888Value_EverCash1 + VUVenture8888Value_EverCash6;
    
}

-(double)PaidUpOptionTable_Venture8888_Low:(double)aaValue andPolicyYear :(int)aaPolicyYear {
    
    double RemainingTerm_2023 = 0.00;
    double RemainingTerm_2025 = 0.00;
    double RemainingTerm_2028 = 0.00;
    double RemainingTerm_2030 = 0.00;
    double RemainingTerm_2035 = 0.00;
    double BackTerm_2023 = 0.00;
    double BackTerm_2025 = 0.00;
    double BackTerm_2028 = 0.00;
    double BackTerm_2030 = 0.00;
    double BackTerm_2035 = 0.00;
    double GMIFactor_BackTermH2023 = 0.00;
    double GMIFactor_BackTermH2025 = 0.00;
    double GMIFactor_BackTermH2028 = 0.00;
    double GMIFactor_BackTermH2030 = 0.00;
    double GMIFactor_BackTermH2035 = 0.00;
    
    double GMIFactor_FrontTermH2023 = 0.00;
    double GMIFactor_FrontTermH2025 = 0.00;
    double GMIFactor_FrontTermH2028 = 0.00;
    double GMIFactor_FrontTermH2030 = 0.00;
    double GMIFactor_FrontTermH2035 = 0.00;
    
    
    double temp = 0.00;
    double Value1 = aaValue * (1 + [self ReturnVUVenture8888InstLow:@"A"]) * (1 + [self ReturnLoyaltyBonus:aaPolicyYear]/100.00);
    double Value2 = VUVenture8888Value_EverCash60;
    double Value3 = 0.00;
    double Value4 = 0.00;
    
    if (aaPolicyYear == FundTerm2023) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2023"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        
        RemainingTerm_2023 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2023 = 12 - [self roundUp:((RemainingTerm_2023 - round(ceil(RemainingTerm_2023)) + 1) * 12) ];
        Value3 = ReinvestAmount2023toVenture8888_L * pow((1 + [self ReturnVUVenture8888InstLow:@"A"]), BackTerm_2023/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2023 = (pow((1 + [self ReturnVUVenture8888InstLow:@"A"]), (BackTerm_2023 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVenture8888InstLow:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2023 = (pow((1 + [self ReturnVUVenture8888InstLow:@"A"]), ((12 - BackTerm_2023) / 12.00))   - 1) / (pow(1 + [self ReturnVUVenture8888InstLow:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVenture8888Value_EverCash60 * GMIFactor_BackTermH2023 + PrevVUVenture8888Value_EverCash60 * GMIFactor_FrontTermH2023 * pow((1 + [self ReturnVUVenture8888InstLow:@"A"]), (BackTerm_2023 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVenture8888InstLow:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVenture8888Fac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
    }
    else if (aaPolicyYear == FundTerm2025) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2025"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        RemainingTerm_2025 = 0.00;
        BackTerm_2025 = 0.00;
        Value3 = 0.00;
        RemainingTerm_2025 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2025 = 12 - [self roundUp:((RemainingTerm_2025 - round(ceil(RemainingTerm_2025)) + 1) * 12) ];
        Value3 = ReinvestAmount2025toVenture8888_L * pow((1 + [self ReturnVUVenture8888InstLow:@"A"]), BackTerm_2025/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2025 = (pow((1 + [self ReturnVUVenture8888InstLow:@"A"]), (BackTerm_2025 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVenture8888InstLow:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2025 = (pow((1 + [self ReturnVUVenture8888InstLow:@"A"]), ((12 - BackTerm_2025) / 12.00))   - 1) / (pow(1 + [self ReturnVUVenture8888InstLow:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVenture8888Value_EverCash60 * GMIFactor_BackTermH2025 + PrevVUVenture8888Value_EverCash60 * GMIFactor_FrontTermH2025 * pow((1 + [self ReturnVUVenture8888InstLow:@"A"]), (BackTerm_2025 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVenture8888InstLow:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVenture8888Fac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
        
    }
    else if (aaPolicyYear == FundTerm2028) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2028"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        RemainingTerm_2028 = 0.00;
        BackTerm_2028 = 0.00;
        Value3 = 0.00;
        RemainingTerm_2028 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2028 = 12 - [self roundUp:((RemainingTerm_2028 - round(ceil(RemainingTerm_2028)) + 1) * 12) ];
        Value3 = ReinvestAmount2028toVenture8888_L * pow((1 + [self ReturnVUVenture8888InstLow:@"A"]), BackTerm_2028/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2028 = (pow((1 + [self ReturnVUVenture8888InstLow:@"A"]), (BackTerm_2028 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVenture8888InstLow:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2028 = (pow((1 + [self ReturnVUVenture8888InstLow:@"A"]), ((12 - BackTerm_2028) / 12.00))   - 1) / (pow(1 + [self ReturnVUVenture8888InstLow:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVenture8888Value_EverCash60 * GMIFactor_BackTermH2028 + PrevVUVenture8888Value_EverCash60 * GMIFactor_FrontTermH2028 * pow((1 + [self ReturnVUVenture8888InstLow:@"A"]), (BackTerm_2028 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVenture8888InstLow:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVenture8888Fac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
        
    }
    else if (aaPolicyYear == FundTerm2030) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2030"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        RemainingTerm_2030 = 0.00;
        BackTerm_2030 = 0.00;
        Value3 = 0.00;
        RemainingTerm_2030 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2030 = 12 - [self roundUp:((RemainingTerm_2030 - round(ceil(RemainingTerm_2030)) + 1) * 12) ];
        Value3 = ReinvestAmount2030toVenture8888_L * pow((1 + [self ReturnVUVenture8888InstLow:@"A"]), BackTerm_2030/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2030 = (pow((1 + [self ReturnVUVenture8888InstLow:@"A"]), (BackTerm_2030 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVenture8888InstLow:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2030 = (pow((1 + [self ReturnVUVenture8888InstLow:@"A"]), ((12 - BackTerm_2030) / 12.00))   - 1) / (pow(1 + [self ReturnVUVenture8888InstLow:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVenture8888Value_EverCash60 * GMIFactor_BackTermH2030 + PrevVUVenture8888Value_EverCash60 * GMIFactor_FrontTermH2030 * pow((1 + [self ReturnVUVenture8888InstLow:@"A"]), (BackTerm_2030 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVenture8888InstLow:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVenture8888Fac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
    }
    else if (aaPolicyYear == FundTerm2035) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2035"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        RemainingTerm_2035 = 0.00;
        BackTerm_2035 = 0.00;
        Value3 = 0.00;
        RemainingTerm_2035 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2035 = 12 - [self roundUp:((RemainingTerm_2035 - round(ceil(RemainingTerm_2035)) + 1) * 12) ];
        Value3 = ReinvestAmount2035toVenture8888_L * pow((1 + [self ReturnVUVenture8888InstLow:@"A"]), BackTerm_2035/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2035 = (pow((1 + [self ReturnVUVenture8888InstLow:@"A"]), (BackTerm_2035 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVenture8888InstLow:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2035 = (pow((1 + [self ReturnVUVenture8888InstLow:@"A"]), ((12 - BackTerm_2035) / 12.00))   - 1) / (pow(1 + [self ReturnVUVenture8888InstLow:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVenture8888Value_EverCash60 * GMIFactor_BackTermH2035 + PrevVUVenture8888Value_EverCash60 * GMIFactor_FrontTermH2035 * pow((1 + [self ReturnVUVenture8888InstLow:@"A"]), (BackTerm_2035 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVenture8888InstLow:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVenture8888Fac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
    }
    else{
        if (Age + aaPolicyYear < 60) {
            temp = Value1;
        }
        else if (Age + aaPolicyYear == 60){
            temp = Value1 + Value2;
        }
        else{
            temp = Value1 + Value2 * 12 * (1 + [self ReturnVUVenture8888InstLow:@"M"])/(pow((1 + [self ReturnVUVenture8888InstLow:@"A"]), (1.00/12.00)));
        }
        
        //if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
        double EGFundAllo_Percen = [self ReturnVUVenture8888Fac:aaPolicyYear] * 100;
        double tempInst = [self ReturnVUVenture8888InstLow:@""];
        
        temp = temp + [self PaidUpOptionTable_RTUO:FALSE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:tempInst PolYear:aaPolicyYear andMonth:0];
        //}
    }
    
    return temp + VUVenture8888Value_EverCash1 + VUVenture8888Value_EverCash6;
    
}

-(double)PaidUpOptionTable_Venture9999_High:(double)aaValue andPolicyYear :(int)aaPolicyYear{
    
    double RemainingTerm_2023 = 0.00;
    double RemainingTerm_2025 = 0.00;
    double RemainingTerm_2028 = 0.00;
    double RemainingTerm_2030 = 0.00;
    double RemainingTerm_2035 = 0.00;
    double BackTerm_2023 = 0.00;
    double BackTerm_2025 = 0.00;
    double BackTerm_2028 = 0.00;
    double BackTerm_2030 = 0.00;
    double BackTerm_2035 = 0.00;
    double GMIFactor_BackTermH2023 = 0.00;
    double GMIFactor_BackTermH2025 = 0.00;
    double GMIFactor_BackTermH2028 = 0.00;
    double GMIFactor_BackTermH2030 = 0.00;
    double GMIFactor_BackTermH2035 = 0.00;
    
    double GMIFactor_FrontTermH2023 = 0.00;
    double GMIFactor_FrontTermH2025 = 0.00;
    double GMIFactor_FrontTermH2028 = 0.00;
    double GMIFactor_FrontTermH2030 = 0.00;
    double GMIFactor_FrontTermH2035 = 0.00;
    
    
    double temp = 0.00;
    double Value1 = aaValue * (1 + [self ReturnVUVenture9999InstHigh:aaPolicyYear andMOP:@"A"]) * (1 + [self ReturnLoyaltyBonus:aaPolicyYear]/100.00);
    double Value2 = VUVenture9999Value_EverCash60;
    double Value3 = 0.00;
    double Value4 = 0.00;
    
    if (aaPolicyYear == FundTerm2023) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2023"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        
        RemainingTerm_2023 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2023 = 12 - [self roundUp:((RemainingTerm_2023 - round(ceil(RemainingTerm_2023)) + 1) * 12) ];
        Value3 = ReinvestAmount2023toVenture9999_H * pow((1 + [self ReturnVUVenture9999InstHigh:aaPolicyYear andMOP:@"A"]), BackTerm_2023/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2023 = (pow((1 + [self ReturnVUVenture9999InstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2023 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVenture9999InstHigh:aaPolicyYear andMOP:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2023 = (pow((1 + [self ReturnVUVenture9999InstHigh:aaPolicyYear andMOP:@"A"]), ((12 - BackTerm_2023) / 12.00))   - 1) / (pow(1 + [self ReturnVUVenture9999InstHigh:aaPolicyYear andMOP:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVenture9999Value_EverCash60 * GMIFactor_BackTermH2023 + PrevVUVenture9999Value_EverCash60 * GMIFactor_FrontTermH2023 * pow((1 + [self ReturnVUVenture9999InstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2023 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVenture9999InstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVenture9999Fac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
        
    }
    else if (aaPolicyYear == FundTerm2025) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2025"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        RemainingTerm_2025 = 0.00;
        BackTerm_2025 = 0.00;
        Value3 = 0.00;
        RemainingTerm_2025 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2025 = 12 - [self roundUp:((RemainingTerm_2025 - round(ceil(RemainingTerm_2025)) + 1) * 12) ];
        Value3 = ReinvestAmount2025toVenture9999_H * pow((1 + [self ReturnVUVenture9999InstHigh:aaPolicyYear andMOP:@"A"]), BackTerm_2025/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2025 = (pow((1 + [self ReturnVUVenture9999InstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2025 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVenture9999InstHigh:aaPolicyYear andMOP:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2025 = (pow((1 + [self ReturnVUVenture9999InstHigh:aaPolicyYear andMOP:@"A"]), ((12 - BackTerm_2025) / 12.00))   - 1) / (pow(1 + [self ReturnVUVenture9999InstHigh:aaPolicyYear andMOP:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVenture9999Value_EverCash60 * GMIFactor_BackTermH2025 + PrevVUVenture9999Value_EverCash60 * GMIFactor_FrontTermH2025 * pow((1 + [self ReturnVUVenture9999InstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2025 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVenture9999InstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVenture9999Fac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
        
    }
    else if (aaPolicyYear == FundTerm2028) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2028"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        RemainingTerm_2028 = 0.00;
        BackTerm_2028 = 0.00;
        Value3 = 0.00;
        RemainingTerm_2028 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2028 = 12 - [self roundUp:((RemainingTerm_2028 - round(ceil(RemainingTerm_2028)) + 1) * 12) ];
        Value3 = ReinvestAmount2028toVenture9999_H * pow((1 + [self ReturnVUVenture9999InstHigh:aaPolicyYear andMOP:@"A"]), BackTerm_2028/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2028 = (pow((1 + [self ReturnVUVenture9999InstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2028 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVenture9999InstHigh:aaPolicyYear andMOP:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2028 = (pow((1 + [self ReturnVUVenture9999InstHigh:aaPolicyYear andMOP:@"A"]), ((12 - BackTerm_2028) / 12.00))   - 1) / (pow(1 + [self ReturnVUVenture9999InstHigh:aaPolicyYear andMOP:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVenture9999Value_EverCash60 * GMIFactor_BackTermH2028 + PrevVUVenture9999Value_EverCash60 * GMIFactor_FrontTermH2028 * pow((1 + [self ReturnVUVenture9999InstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2028 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVenture9999InstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVenture9999Fac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
        
    }
    else if (aaPolicyYear == FundTerm2030) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2030"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        RemainingTerm_2030 = 0.00;
        BackTerm_2030 = 0.00;
        Value3 = 0.00;
        RemainingTerm_2030 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2030 = 12 - [self roundUp:((RemainingTerm_2030 - round(ceil(RemainingTerm_2030)) + 1) * 12) ];
        Value3 = ReinvestAmount2030toVenture9999_H * pow((1 + [self ReturnVUVenture9999InstHigh:aaPolicyYear andMOP:@"A"]), BackTerm_2030/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2030 = (pow((1 + [self ReturnVUVenture9999InstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2030 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVenture9999InstHigh:aaPolicyYear andMOP:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2030 = (pow((1 + [self ReturnVUVenture9999InstHigh:aaPolicyYear andMOP:@"A"]), ((12 - BackTerm_2030) / 12.00))   - 1) / (pow(1 + [self ReturnVUVenture9999InstHigh:aaPolicyYear andMOP:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVenture9999Value_EverCash60 * GMIFactor_BackTermH2030 + PrevVUVenture9999Value_EverCash60 * GMIFactor_FrontTermH2030 * pow((1 + [self ReturnVUVenture9999InstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2030 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVenture9999InstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVenture9999Fac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
        
    }
    else if (aaPolicyYear == FundTerm2035) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2035"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        RemainingTerm_2035 = 0.00;
        BackTerm_2035 = 0.00;
        Value3 = 0.00;
        RemainingTerm_2035 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2035 = 12 - [self roundUp:((RemainingTerm_2035 - round(ceil(RemainingTerm_2035)) + 1) * 12) ];
        Value3 = ReinvestAmount2035toVenture9999_H * pow((1 + [self ReturnVUVenture9999InstHigh:aaPolicyYear andMOP:@"A"]), BackTerm_2035/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2035 = (pow((1 + [self ReturnVUVenture9999InstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2035 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVenture9999InstHigh:aaPolicyYear andMOP:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2035 = (pow((1 + [self ReturnVUVenture9999InstHigh:aaPolicyYear andMOP:@"A"]), ((12 - BackTerm_2035) / 12.00))   - 1) / (pow(1 + [self ReturnVUVenture9999InstHigh:aaPolicyYear andMOP:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVenture9999Value_EverCash60 * GMIFactor_BackTermH2035 + PrevVUVenture9999Value_EverCash60 * GMIFactor_FrontTermH2035 * pow((1 + [self ReturnVUVenture9999InstHigh:aaPolicyYear andMOP:@"A"]), (BackTerm_2035 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVenture9999InstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVenture9999Fac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i ]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
        
    }
    else{
        if (Age + aaPolicyYear < 60) {
            temp = Value1;
        }
        else if (Age + aaPolicyYear == 60){
            temp = Value1 + Value2;
        }
        else{
            temp = Value1 + Value2 * 12 * (1 + [self ReturnVUVenture9999InstHigh:aaPolicyYear andMOP:@"M"])/(pow((1 + [self ReturnVUVenture9999InstHigh:aaPolicyYear andMOP:@"A"]), (1.00/12.00)));
        }
        
        //if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
        double EGFundAllo_Percen = [self ReturnVUVenture9999Fac:aaPolicyYear] * 100;
        double tempInst = [self ReturnVUVenture9999InstHigh:aaPolicyYear andMOP:@""];
        
        temp = temp + [self PaidUpOptionTable_RTUO:FALSE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:tempInst PolYear:aaPolicyYear andMonth:0];
        //}
    }
    
    return temp + VUVenture9999Value_EverCash1 + VUVenture9999Value_EverCash6;
    
}

-(double)PaidUpOptionTable_Venture9999_Median:(double)aaValue andPolicyYear :(int)aaPolicyYear {
    
    double RemainingTerm_2023 = 0.00;
    double RemainingTerm_2025 = 0.00;
    double RemainingTerm_2028 = 0.00;
    double RemainingTerm_2030 = 0.00;
    double RemainingTerm_2035 = 0.00;
    double BackTerm_2023 = 0.00;
    double BackTerm_2025 = 0.00;
    double BackTerm_2028 = 0.00;
    double BackTerm_2030 = 0.00;
    double BackTerm_2035 = 0.00;
    double GMIFactor_BackTermH2023 = 0.00;
    double GMIFactor_BackTermH2025 = 0.00;
    double GMIFactor_BackTermH2028 = 0.00;
    double GMIFactor_BackTermH2030 = 0.00;
    double GMIFactor_BackTermH2035 = 0.00;
    
    double GMIFactor_FrontTermH2023 = 0.00;
    double GMIFactor_FrontTermH2025 = 0.00;
    double GMIFactor_FrontTermH2028 = 0.00;
    double GMIFactor_FrontTermH2030 = 0.00;
    double GMIFactor_FrontTermH2035 = 0.00;
    
    
    double temp = 0.00;
    double Value1 = aaValue * (1 + [self ReturnVUVenture9999InstMedian:@"A"]) * (1 + [self ReturnLoyaltyBonus:aaPolicyYear]/100.00);
    double Value2 = VUVenture9999Value_EverCash60;
    double Value3 = 0.00;
    double Value4 = 0.00;
    
    if (aaPolicyYear == FundTerm2023) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2023"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        
        RemainingTerm_2023 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2023 = 12 - [self roundUp:((RemainingTerm_2023 - round(ceil(RemainingTerm_2023)) + 1) * 12) ];
        Value3 = ReinvestAmount2023toVenture9999_M * pow((1 + [self ReturnVUVenture9999InstMedian:@"A"]), BackTerm_2023/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2023 = (pow((1 + [self ReturnVUVenture9999InstMedian:@"A"]), (BackTerm_2023 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVenture9999InstMedian:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2023 = (pow((1 + [self ReturnVUVenture9999InstMedian:@"A"]), ((12 - BackTerm_2023) / 12.00))   - 1) / (pow(1 + [self ReturnVUVenture9999InstMedian:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVenture9999Value_EverCash60 * GMIFactor_BackTermH2023 + PrevVUVenture9999Value_EverCash60 * GMIFactor_FrontTermH2023 * pow((1 + [self ReturnVUVenture9999InstMedian:@"A"]), (BackTerm_2023 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVenture9999InstMedian:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVenture9999Fac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
        
    }
    else if (aaPolicyYear == FundTerm2025) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2025"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        RemainingTerm_2025 = 0.00;
        BackTerm_2025 = 0.00;
        Value3 = 0.00;
        RemainingTerm_2025 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2025 = 12 - [self roundUp:((RemainingTerm_2025 - round(ceil(RemainingTerm_2025)) + 1) * 12) ];
        Value3 = ReinvestAmount2025toVenture9999_M * pow((1 + [self ReturnVUVenture9999InstMedian:@"A"]), BackTerm_2025/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2025 = (pow((1 + [self ReturnVUVenture9999InstMedian:@"A"]), (BackTerm_2025 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVenture9999InstMedian:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2025 = (pow((1 + [self ReturnVUVenture9999InstMedian:@"A"]), ((12 - BackTerm_2025) / 12.00))   - 1) / (pow(1 + [self ReturnVUVenture9999InstMedian:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVenture9999Value_EverCash60 * GMIFactor_BackTermH2025 + PrevVUVenture9999Value_EverCash60 * GMIFactor_FrontTermH2025 * pow((1 + [self ReturnVUVenture9999InstMedian:@"A"]), (BackTerm_2025 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVenture9999InstMedian:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVenture9999Fac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
        
    }
    else if (aaPolicyYear == FundTerm2028) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2028"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        RemainingTerm_2028 = 0.00;
        BackTerm_2028 = 0.00;
        Value3 = 0.00;
        RemainingTerm_2028 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2028 = 12 - [self roundUp:((RemainingTerm_2028 - round(ceil(RemainingTerm_2028)) + 1) * 12) ];
        Value3 = ReinvestAmount2028toVenture9999_M * pow((1 + [self ReturnVUVenture9999InstMedian:@"A"]), BackTerm_2028/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2028 = (pow((1 + [self ReturnVUVenture9999InstMedian:@"A"]), (BackTerm_2028 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVenture9999InstMedian:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2028 = (pow((1 + [self ReturnVUVenture9999InstMedian:@"A"]), ((12 - BackTerm_2028) / 12.00))   - 1) / (pow(1 + [self ReturnVUVenture9999InstMedian:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVenture9999Value_EverCash60 * GMIFactor_BackTermH2028 + PrevVUVenture9999Value_EverCash60 * GMIFactor_FrontTermH2028 * pow((1 + [self ReturnVUVenture9999InstMedian:@"A"]), (BackTerm_2028 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVenture9999InstMedian:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVenture9999Fac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
        
        
    }
    else if (aaPolicyYear == FundTerm2030) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2030"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        RemainingTerm_2030 = 0.00;
        BackTerm_2030 = 0.00;
        Value3 = 0.00;
        RemainingTerm_2030 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2030 = 12 - [self roundUp:((RemainingTerm_2030 - round(ceil(RemainingTerm_2030)) + 1) * 12) ];
        Value3 = ReinvestAmount2030toVenture9999_M * pow((1 + [self ReturnVUVenture9999InstMedian:@"A"]), BackTerm_2030/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2030 = (pow((1 + [self ReturnVUVenture9999InstMedian:@"A"]), (BackTerm_2030 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVenture9999InstMedian:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2030 = (pow((1 + [self ReturnVUVenture9999InstMedian:@"A"]), ((12 - BackTerm_2030) / 12.00))   - 1) / (pow(1 + [self ReturnVUVenture9999InstMedian:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVenture9999Value_EverCash60 * GMIFactor_BackTermH2030 + PrevVUVenture9999Value_EverCash60 * GMIFactor_FrontTermH2030 * pow((1 + [self ReturnVUVenture9999InstMedian:@"A"]), (BackTerm_2030 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVenture9999InstMedian:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVenture9999Fac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
        
    }
    else if (aaPolicyYear == FundTerm2035) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2035"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        RemainingTerm_2035 = 0.00;
        BackTerm_2035 = 0.00;
        Value3 = 0.00;
        RemainingTerm_2035 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2035 = 12 - [self roundUp:((RemainingTerm_2035 - round(ceil(RemainingTerm_2035)) + 1) * 12) ];
        Value3 = ReinvestAmount2035toVenture9999_M * pow((1 + [self ReturnVUVenture9999InstMedian:@"A"]), BackTerm_2035/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2035 = (pow((1 + [self ReturnVUVenture9999InstMedian:@"A"]), (BackTerm_2035 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVenture9999InstMedian:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2035 = (pow((1 + [self ReturnVUVenture9999InstMedian:@"A"]), ((12 - BackTerm_2035) / 12.00))   - 1) / (pow(1 + [self ReturnVUVenture9999InstMedian:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVenture9999Value_EverCash60 * GMIFactor_BackTermH2035 + PrevVUVenture9999Value_EverCash60 * GMIFactor_FrontTermH2035 * pow((1 + [self ReturnVUVenture9999InstMedian:@"A"]), (BackTerm_2035 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVenture9999InstMedian:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVenture9999Fac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
    }
    else{
        if (Age + aaPolicyYear < 60) {
            temp = Value1;
        }
        else if (Age + aaPolicyYear == 60){
            temp = Value1 + Value2;
        }
        else{
            temp = Value1 + Value2 * 12 * (1 + [self ReturnVUVenture9999InstMedian:@"M"])/(pow((1 + [self ReturnVUVenture9999InstMedian:@"A"]), (1.00/12.00)));
        }
        
        //if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
        double EGFundAllo_Percen = [self ReturnVUVenture9999Fac:aaPolicyYear] * 100;
        double tempInst = [self ReturnVUVenture9999InstMedian:@""];
        
        temp = temp + [self PaidUpOptionTable_RTUO:FALSE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:tempInst PolYear:aaPolicyYear andMonth:0];
        //}
    }
    
    return temp + VUVenture9999Value_EverCash1 + VUVenture9999Value_EverCash6;
    
}

-(double)PaidUpOptionTable_Venture9999_Low:(double)aaValue andPolicyYear :(int)aaPolicyYear {
    
    double RemainingTerm_2023 = 0.00;
    double RemainingTerm_2025 = 0.00;
    double RemainingTerm_2028 = 0.00;
    double RemainingTerm_2030 = 0.00;
    double RemainingTerm_2035 = 0.00;
    double BackTerm_2023 = 0.00;
    double BackTerm_2025 = 0.00;
    double BackTerm_2028 = 0.00;
    double BackTerm_2030 = 0.00;
    double BackTerm_2035 = 0.00;
    double GMIFactor_BackTermH2023 = 0.00;
    double GMIFactor_BackTermH2025 = 0.00;
    double GMIFactor_BackTermH2028 = 0.00;
    double GMIFactor_BackTermH2030 = 0.00;
    double GMIFactor_BackTermH2035 = 0.00;
    
    double GMIFactor_FrontTermH2023 = 0.00;
    double GMIFactor_FrontTermH2025 = 0.00;
    double GMIFactor_FrontTermH2028 = 0.00;
    double GMIFactor_FrontTermH2030 = 0.00;
    double GMIFactor_FrontTermH2035 = 0.00;
    
    
    double temp = 0.00;
    double Value1 = aaValue * (1 + [self ReturnVUVenture9999InstLow:@"A"]) * (1 + [self ReturnLoyaltyBonus:aaPolicyYear]/100.00);
    double Value2 = VUVenture9999Value_EverCash60;
    double Value3 = 0.00;
    double Value4 = 0.00;
    
    if (aaPolicyYear == FundTerm2023) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2023"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        
        RemainingTerm_2023 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2023 = 12 - [self roundUp:((RemainingTerm_2023 - round(ceil(RemainingTerm_2023)) + 1) * 12) ];
        Value3 = ReinvestAmount2023toVenture9999_L * pow((1 + [self ReturnVUVenture9999InstLow:@"A"]), BackTerm_2023/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2023 = (pow((1 + [self ReturnVUVenture9999InstLow:@"A"]), (BackTerm_2023 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVenture9999InstLow:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2023 = (pow((1 + [self ReturnVUVenture9999InstLow:@"A"]), ((12 - BackTerm_2023) / 12.00))   - 1) / (pow(1 + [self ReturnVUVenture9999InstLow:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVenture9999Value_EverCash60 * GMIFactor_BackTermH2023 + PrevVUVenture9999Value_EverCash60 * GMIFactor_FrontTermH2023 * pow((1 + [self ReturnVUVenture9999InstLow:@"A"]), (BackTerm_2023 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVenture9999InstLow:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVenture9999Fac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
    }
    else if (aaPolicyYear == FundTerm2025) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2025"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        RemainingTerm_2025 = 0.00;
        BackTerm_2025 = 0.00;
        Value3 = 0.00;
        RemainingTerm_2025 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2025 = 12 - [self roundUp:((RemainingTerm_2025 - round(ceil(RemainingTerm_2025)) + 1) * 12) ];
        Value3 = ReinvestAmount2025toVenture9999_L * pow((1 + [self ReturnVUVenture9999InstLow:@"A"]), BackTerm_2025/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2025 = (pow((1 + [self ReturnVUVenture9999InstLow:@"A"]), (BackTerm_2025 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVenture9999InstLow:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2025 = (pow((1 + [self ReturnVUVenture9999InstLow:@"A"]), ((12 - BackTerm_2025) / 12.00))   - 1) / (pow(1 + [self ReturnVUVenture9999InstLow:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVenture9999Value_EverCash60 * GMIFactor_BackTermH2025 + PrevVUVenture9999Value_EverCash60 * GMIFactor_FrontTermH2025 * pow((1 + [self ReturnVUVenture9999InstLow:@"A"]), (BackTerm_2025 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVenture9999InstLow:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVenture9999Fac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
        
    }
    else if (aaPolicyYear == FundTerm2028) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2028"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        RemainingTerm_2028 = 0.00;
        BackTerm_2028 = 0.00;
        Value3 = 0.00;
        RemainingTerm_2028 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2028 = 12 - [self roundUp:((RemainingTerm_2028 - round(ceil(RemainingTerm_2028)) + 1) * 12) ];
        Value3 = ReinvestAmount2028toVenture9999_L * pow((1 + [self ReturnVUVenture9999InstLow:@"A"]), BackTerm_2028/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2028 = (pow((1 + [self ReturnVUVenture9999InstLow:@"A"]), (BackTerm_2028 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVenture9999InstLow:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2028 = (pow((1 + [self ReturnVUVenture9999InstLow:@"A"]), ((12 - BackTerm_2028) / 12.00))   - 1) / (pow(1 + [self ReturnVUVenture9999InstLow:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVenture9999Value_EverCash60 * GMIFactor_BackTermH2028 + PrevVUVenture9999Value_EverCash60 * GMIFactor_FrontTermH2028 * pow((1 + [self ReturnVUVenture9999InstLow:@"A"]), (BackTerm_2028 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVenture9999InstLow:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVenture9999Fac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
        
    }
    else if (aaPolicyYear == FundTerm2030) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2030"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        RemainingTerm_2030 = 0.00;
        BackTerm_2030 = 0.00;
        Value3 = 0.00;
        RemainingTerm_2030 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2030 = 12 - [self roundUp:((RemainingTerm_2030 - round(ceil(RemainingTerm_2030)) + 1) * 12) ];
        Value3 = ReinvestAmount2030toVenture9999_L * pow((1 + [self ReturnVUVenture9999InstLow:@"A"]), BackTerm_2030/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2030 = (pow((1 + [self ReturnVUVenture9999InstLow:@"A"]), (BackTerm_2030 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVenture9999InstLow:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2030 = (pow((1 + [self ReturnVUVenture9999InstLow:@"A"]), ((12 - BackTerm_2030) / 12.00))   - 1) / (pow(1 + [self ReturnVUVenture9999InstLow:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVenture9999Value_EverCash60 * GMIFactor_BackTermH2030 + PrevVUVenture9999Value_EverCash60 * GMIFactor_FrontTermH2030 * pow((1 + [self ReturnVUVenture9999InstLow:@"A"]), (BackTerm_2030 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVenture9999InstLow:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVenture9999Fac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
    }
    else if (aaPolicyYear == FundTerm2035) {
        NSDateFormatter* df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"dd/MM/yyyy"];
        NSDate* d = [df dateFromString:getPlanCommDate];
        NSDate* d2 = [df dateFromString:@"26/12/2035"];
        
        NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
        [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
        [formatter setMaximumFractionDigits:2];
        [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
        
        RemainingTerm_2035 = 0.00;
        BackTerm_2035 = 0.00;
        Value3 = 0.00;
        RemainingTerm_2035 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
        BackTerm_2035 = 12 - [self roundUp:((RemainingTerm_2035 - round(ceil(RemainingTerm_2035)) + 1) * 12) ];
        Value3 = ReinvestAmount2035toVenture9999_L * pow((1 + [self ReturnVUVenture9999InstLow:@"A"]), BackTerm_2035/12.00) ;
        temp = Value1 + Value3;
        
        if (ECAR60Exist == TRUE) {
            if (Age + aaPolicyYear == 60) {
                temp = temp + Value2;
            }
            else if (Age + aaPolicyYear > 60){
                GMIFactor_BackTermH2035 = (pow((1 + [self ReturnVUVenture9999InstLow:@"A"]), (BackTerm_2035 / 12.00)) - 1) / ( pow((1 + [self ReturnVUVenture9999InstLow:@"A"]), (1.00/ 12.00))   - 1);
                GMIFactor_FrontTermH2035 = (pow((1 + [self ReturnVUVenture9999InstLow:@"A"]), ((12 - BackTerm_2035) / 12.00))   - 1) / (pow(1 + [self ReturnVUVenture9999InstLow:@"A"], (1.00/ 12.00))  - 1);
                Value4 = VUVenture9999Value_EverCash60 * GMIFactor_BackTermH2035 + PrevVUVenture9999Value_EverCash60 * GMIFactor_FrontTermH2035 * pow((1 + [self ReturnVUVenture9999InstLow:@"A"]), (BackTerm_2035 / 12.00));
                temp = temp + Value4;
            }
            else{
                
            }
        }
        
        if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
            double EGFundAllo_Percen = 0.00;
            double tempInst = pow((1.00 + [self ReturnVUVenture9999InstLow:@"A"]), (1.00/12.00));
            double PaidUpRTUO = 0.00;
            
            for (int i = 1; i <= 12; i ++) {
                EGFundAllo_Percen = [self ReturnVUVenture9999Fac:aaPolicyYear andMonth:i] * 100;
                PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * tempInst ;
            }
            
            temp = temp + PaidUpRTUO;
        }
        
    }
    else{
        if (Age + aaPolicyYear < 60) {
            temp = Value1;
        }
        else if (Age + aaPolicyYear == 60){
            temp = Value1 + Value2;
        }
        else{
            temp = Value1 + Value2 * 12 * (1 + [self ReturnVUVenture9999InstLow:@"M"])/(pow((1 + [self ReturnVUVenture9999InstLow:@"A"]), (1.00/12.00)));
        }
        
        //if ([strGrayRTUPAmount intValue ] > 0 || [self ReturnExcessPrem:aaPolicyYear] > 0 ) {
        double EGFundAllo_Percen = [self ReturnVUVenture9999Fac:aaPolicyYear] * 100;
        double tempInst = [self ReturnVUVenture9999InstLow:@""];
        
        temp = temp + [self PaidUpOptionTable_RTUO:FALSE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:tempInst PolYear:aaPolicyYear andMonth:0];
        //}
    }
    
    return temp + VUVenture9999Value_EverCash1 + VUVenture9999Value_EverCash6;
    
}



-(double)PaidUpOptionTable_2035_H_Balance :(double)aaPrevPaidUpOptionTable_2035_High andPolicyYear :(int)aaPolicyYear {
	NSDateFormatter* df = [[NSDateFormatter alloc] init];
	[df setDateFormat:@"dd/MM/yyyy"];
	NSDate* d = [df dateFromString:getPlanCommDate];
	NSDate* d2 = [df dateFromString:@"26/12/2035"];
	
	NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
	[formatter setNumberStyle:NSNumberFormatterDecimalStyle];
	[formatter setMaximumFractionDigits:2];
	[formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
    
	double RemainingTerm_2035 = 0.00;
	double FrontTerm_2035 = 0.00;
	double GMIFactor_FrontTermH2035 = 0.00;
    
	RemainingTerm_2035 = [[formatter stringFromNumber:[NSNumber numberWithDouble:[self daysBetweenDate:d andDate:d2]/365.25]] doubleValue];
	FrontTerm_2035 = ceil((RemainingTerm_2035 -  round(ceil(RemainingTerm_2035)) + 1) * 12);
	double tempValue = aaPrevPaidUpOptionTable_2035_High * pow((1 + [self ReturnVU2035InstHigh:@"A"]), (FrontTerm_2035/12.00)) * (1 + [self ReturnLoyaltyBonus:aaPolicyYear]/100.00);
	
	if (ECAR60Exist == TRUE) {
		GMIFactor_FrontTermH2035 = (pow((1 + [self ReturnVU2035InstHigh:@"A"]),(FrontTerm_2035/12.00) ) - 1)/(pow((1 + [self ReturnVU2035InstHigh:@"A"]), 1.00/12.00) - 1);
		
		if (Age + aaPolicyYear > 60) {
            tempValue = tempValue + PrevPaidUpOptionTable_2035_High + GMIFactor_FrontTermH2035;
		}
	}
    
        double EGFundAllo_Percen = 0.00;
        double temp2035Inst = pow((1.00 + [self ReturnVU2035InstHigh:@"A"]), (1.00/12.00));
        double PaidUpRTUO = 0.00;
        
        for (int i = 1; i <= FrontTerm_2035; i ++) {
            EGFundAllo_Percen = [self ReturnVU2035Fac:aaPolicyYear andMonth:i ]* 100;
            PaidUpRTUO = (PaidUpRTUO + [self PaidUpOptionTable_RTUO:TRUE EG_FundAllo_Percen:EGFundAllo_Percen EGInst_BullFlatBear:0.00 PolYear:aaPolicyYear andMonth:i]) * temp2035Inst ;
        }
        
        tempValue = tempValue + PaidUpRTUO;
        return tempValue;
    
}

-(double)PaidUpOptionTable_RTUO :(bool)FundMaturity EG_FundAllo_Percen :(double) aaEG_FundAllo_Percen  EGInst_BullFlatBear : (double)aaEGInst_BullFlatBear PolYear : (int)aaPolYear andMonth : (int)aaMonth{
    if (FundMaturity == TRUE ){
        return [self ReturnExcessPrem:aaPolYear] * RegularAllo * [self ReturnPremiumFactor:aaMonth] * (aaEG_FundAllo_Percen / 100.00);
        //return ([self ReturnRegTopUpPrem]) * RegularAllo * [self ReturnPremiumFactor:aaPolYear] * (aaEG_FundAllo_Percen / 100.00);
    }
    else{
        return  [self ReturnExcessPrem:aaPolYear] * RegularAllo * (aaEG_FundAllo_Percen / 100.00) * (1 + aaEGInst_BullFlatBear);
        //return ([self ReturnRegTopUpPrem]) * RegularAllo * (aaEG_FundAllo_Percen / 100.00) * (1 + aaEGInst_BullFlatBear);
    }
    
}


#pragma mark - Others
-(int)EverCash1_CashPaymentFactor :(int)aaPolicyYear andMonth:(int) aaMonth{
	if (ECAR1Exist == TRUE && aaPolicyYear <= [ECAR1RiderTerm intValue] && aaMonth == 12  ) {
		return 1;
	}
	else
	{
		return 0;
	}
}

-(int)EverCash6_CashPaymentFactor :(int)aaPolicyYear andMonth:(int) aaMonth{
	if (ECAR6Exist == TRUE && aaPolicyYear <= [ECAR6RiderTerm intValue] && aaMonth == 12  ) {
		return 1;
	}
	else
	{
		return 0;
	}
}

-(double)ReturnRegWithdrawal :(int)aaPolicyYear{
	if (aaPolicyYear >= RegWithdrawalStartYear) {
		if (aaPolicyYear <= RegWithdrawalEndYear) {
			if ((aaPolicyYear - RegWithdrawalStartYear) % RegWithdrawalIntYear == 0) {
				return RegWithdrawalAmount;
			}
			else{
				return 0;
			}
		}
		else{
			return 0;
		}
	}
	else{
		return 0;
	}
}

-(double)ReturnRegWithdrawalFactor :(int)aaMonth{
	if (aaMonth == 12) {
		return 1.00;
	}
	else{
		return 0;
	}
}

-(double)ReturnRegTopUpPrem{
	/*
	 if (![strGrayRTUPAmount isEqualToString:@""]) {
	 return [strGrayRTUPAmount doubleValue ];
	 }
	 else{
	 return 0;
	 }
	 */
	return [strGrayRTUPAmount doubleValue ];
}

-(double)ReturnRiderRegTopUpPrem :(int) aaPolicyYear{
	if ([strRRTUOPrem isEqualToString:@""]) {
		return 0.00;
	}
	else{
		if (aaPolicyYear > [strRRTUOFrom intValue ] && aaPolicyYear < ([strRRTUOFrom intValue] + [strRRTUOFor intValue])) {
			return [strRRTUOPrem doubleValue];
		}
		else{
			return 0.00;
		}
	}
	
}


-(double)ReturnVU2023Fac{
	return (double)VU2023Factor/100.00;
}

-(double)ReturnVU2025Fac :(int)aaPolicyYear {
	double factor1 = (double)VU2025Factor;
	double factor2 = factor1 + (VU2023Factor * ([self FactorGroup:2] == 0 ?  0 : (factor1/[self FactorGroup:2])));
	double factor3 = 0.00;
	
	if (aaPolicyYear >= FundTerm2023 && aaPolicyYear <= FundTermPrev2025) {
		return factor2/100.00;
	}
	else if (aaPolicyYear > FundTermPrev2025){
		return factor3/100.00;
	}
	else{
		return (double)VU2025Factor/100.00;
	}
}

-(double)ReturnVU2025Fac :(int)aaPolicyYear andMonth:(int)aaMonth {
	double factor1 = (double)VU2025Factor;
	double factor2 = factor1 + (VU2023Factor * ([self FactorGroup:2] == 0 ?  0 : (factor1/[self FactorGroup:2])));
	double factor3 = 0.00;
	
	if (aaPolicyYear >= FundTerm2023 && aaPolicyYear <= FundTermPrev2025 && aaMonth > MonthDiff2023) {
		return factor2/100.00;
	}
	else if (aaPolicyYear == FundTerm2025 && aaMonth <= MonthDiff2025){
		return factor2/100.00;
	}
	else if (aaPolicyYear > FundTerm2025 && aaMonth > MonthDiff2025){
		return factor3/100.00;
	}
	else{
		return (double)VU2025Factor/100.00;
	}
}

-(double)ReturnVU2028Fac :(int)aaPolicyYear {
	double factor1 = (double)VU2028Factor;
	double factor2 = factor1 + (VU2023Factor * ([self FactorGroup:2] == 0 ?  0 : (factor1/[self FactorGroup:2])));
	double factor3 = factor2 + (VU2025Factor * ([self FactorGroup:3] == 0 ?  0 : (factor2/[self FactorGroup:3])));
	double factor4 = 0.00;
	
	if (aaPolicyYear >= FundTerm2023 && aaPolicyYear <= FundTermPrev2025) {
		return factor2/100.00;
	}
	else if (aaPolicyYear >= FundTerm2025 && aaPolicyYear <= FundTermPrev2028) {
		return factor3/100.00;
	}
	else if (aaPolicyYear > FundTermPrev2028){
		return factor4/100.00;
	}
	else{
		return (double)VU2028Factor/100.00;
	}
}

-(double)ReturnVU2028Fac :(int)aaPolicyYear andMonth:(int)aaMonth {
	double factor1 = (double)VU2028Factor;
	double factor2 = factor1 + (VU2023Factor * ([self FactorGroup:2] == 0 ?  0 : (factor1/[self FactorGroup:2])));
	double factor3 = factor2 + (VU2025Factor * ([self FactorGroup:3] == 0 ?  0 : (factor2/[self FactorGroup:3])));;
	double factor4 = 0.00;
	
	if (aaPolicyYear >= FundTerm2023 && aaPolicyYear <= FundTermPrev2025 && aaMonth > MonthDiff2023) {
		return factor2/100.00;
	}
	else if (aaPolicyYear == FundTerm2025 && aaMonth <= MonthDiff2025) {
		return factor2/100.00;
	}
	else if (aaPolicyYear >= FundTerm2025 && aaPolicyYear <= FundTermPrev2028 && aaMonth > MonthDiff2025) {
		return factor3/100.00;
	}
	else if (aaPolicyYear == FundTerm2028 && aaMonth <= MonthDiff2028) {
		return factor3/100.00;
	}
	else if (aaPolicyYear > FundTerm2028 && aaMonth > MonthDiff2028){
		return factor4/100.00;
	}
	else{
		return (double)VU2028Factor/100.00;
	}
}

-(double)ReturnVU2030Fac :(int)aaPolicyYear {
	double factor1 = (double)VU2030Factor;
	double factor2 = factor1 + (VU2023Factor * ([self FactorGroup:2] == 0 ?  0 : (factor1/[self FactorGroup:2])));
	double factor3 = factor2 + (VU2025Factor * ([self FactorGroup:3] == 0 ?  0 : (factor2/[self FactorGroup:3])));;
	double factor4 = factor3 + (VU2028Factor * ([self FactorGroup:4] == 0 ?  0 :(factor3/[self FactorGroup:4])));;
	double factor5 = 0.00;
	
	if (aaPolicyYear >= FundTerm2023 && aaPolicyYear <= FundTermPrev2025) {
		return factor2/100.00;
	}
	else if (aaPolicyYear >= FundTerm2025 && aaPolicyYear <= FundTermPrev2028) {
		return factor3/100.00;
	}
	else if (aaPolicyYear >= FundTerm2028 && aaPolicyYear <= FundTermPrev2030) {
		return factor4/100.00;
	}
	else if (aaPolicyYear > FundTermPrev2030){
		return factor5/100.00;
	}
	else{
		return (double)VU2030Factor/100.00;
	}
}

-(double)ReturnVU2030Fac :(int)aaPolicyYear andMonth:(int)aaMonth {
	double factor1 = (double)VU2030Factor;
	double factor2 = factor1 + (VU2023Factor * ([self FactorGroup:2] == 0 ?  0 : (factor1/[self FactorGroup:2])));
	double factor3 = factor2 + (VU2025Factor * ([self FactorGroup:3] == 0 ?  0 : (factor2/[self FactorGroup:3])));;
	double factor4 = factor3 + (VU2028Factor * ([self FactorGroup:4] == 0 ?  0 : (factor3/[self FactorGroup:4])));;
	double factor5 = 0.00;
	
	if (aaPolicyYear >= FundTerm2023 && aaPolicyYear <= FundTermPrev2025 && aaMonth > MonthDiff2023) {
		return factor2/100.00;
	}
	else if (aaPolicyYear == FundTerm2025 && aaMonth <= MonthDiff2025) {
		return factor2/100.00;
	}
	else if (aaPolicyYear >= FundTerm2025 && aaPolicyYear <= FundTermPrev2028 && aaMonth > MonthDiff2025) {
		return factor3/100.00;
	}
	else if (aaPolicyYear == FundTerm2028 && aaMonth <= MonthDiff2028) {
		return factor3/100.00;
	}
	else if (aaPolicyYear >= FundTerm2028 && aaPolicyYear <= FundTermPrev2030 && aaMonth > MonthDiff2028) {
		return factor4/100.00;
	}
	else if (aaPolicyYear == FundTerm2030 && aaMonth <= MonthDiff2030) {
		return factor4/100.00;
	}
	else if (aaPolicyYear > FundTerm2030 && aaMonth > MonthDiff2030) {
		return factor5/100.00;
	}
	else{
		return (double)VU2030Factor/100.00;
	}
}

-(double)ReturnVU2035Fac :(int)aaPolicyYear {
	double factor1 = (double)VU2035Factor;
	double t1 = [self FactorGroup:2],t2 = [self FactorGroup:3],t3 = [self FactorGroup:4],t4 = [self FactorGroup:5];
	double factor2 = factor1 + (VU2023Factor * (t1 == 0 ?  0 : (factor1/t1)));
	double factor3 = factor2 + (VU2025Factor * (t2 == 0 ?  0 : (factor2/t2)));
	double factor4 = factor3 + (VU2028Factor * (t3 == 0 ?  0 : (factor3/t3)));
	double factor5 = factor4 + (VU2030Factor * (t4 == 0 ?  0 : (factor4/t4)));
	double factor6 = 0.00;
	
	if (aaPolicyYear >= FundTerm2023 && aaPolicyYear <= FundTermPrev2025) {
		return factor2/100.00;
	}
	else if (aaPolicyYear >= FundTerm2025 && aaPolicyYear <= FundTermPrev2028) {
		return factor3/100.00;
	}
	else if (aaPolicyYear >= FundTerm2028 && aaPolicyYear <= FundTermPrev2030) {
		return factor4/100.00;
	}
	else if (aaPolicyYear >= FundTerm2030 && aaPolicyYear <= FundTermPrev2035) {
		return factor5/100.00;
	}
	else if (aaPolicyYear > FundTermPrev2035){
		return factor6/100.00;
	}
	else{
		return (double)VU2035Factor/100.00;
	}
}

-(double)ReturnVU2035Fac :(int)aaPolicyYear andMonth:(int)aaMonth   {
	double factor1 = (double)VU2035Factor;
	double factor2 = factor1 + (VU2023Factor * ([self FactorGroup:2] == 0 ?  0 : (factor1/[self FactorGroup:2]) ) );
	double factor3 = factor2 + (VU2025Factor * ([self FactorGroup:3] == 0 ?  0 : (factor2/[self FactorGroup:3])));
	double factor4 = factor3 + (VU2028Factor * ([self FactorGroup:4] == 0 ?  0 : (factor3/[self FactorGroup:4])));
	double factor5 = factor4 + (VU2030Factor * ([self FactorGroup:5] == 0 ?  0 : (factor4/[self FactorGroup:5])));
	double factor6 = 0.00;
	
	if(aaPolicyYear >= FundTerm2023 && aaPolicyYear <= FundTermPrev2025 && aaMonth > MonthDiff2023 ){
		return factor2/100.00;
	}
	else if(aaPolicyYear == FundTerm2025 && aaMonth <= MonthDiff2025){
		return factor2/100.00;
	}
	else if(aaPolicyYear >= FundTerm2025 && aaPolicyYear <= FundTermPrev2028 && aaMonth > MonthDiff2025 ){
		return factor3/100.00;
	}
	else if(aaPolicyYear == FundTerm2028 && aaMonth <= MonthDiff2028){
		return factor3/100.00;
	}
	else if(aaPolicyYear >= FundTerm2028 && aaPolicyYear <= FundTermPrev2030 && aaMonth > MonthDiff2028 ){
		return factor4/100.00;
	}
	else if(aaPolicyYear == FundTerm2030 && aaMonth <= MonthDiff2030){
		return factor4/100.00;
	}
	else if(aaPolicyYear >= FundTerm2030 && aaPolicyYear <= FundTermPrev2035 && aaMonth > MonthDiff2030 ){
		return factor5/100.00;
	}
	else if(aaPolicyYear > FundTermPrev2035 && aaMonth <= MonthDiff2035){
		return factor5/100.00;
	}
	else if(aaPolicyYear > FundTermPrev2035 && aaMonth > MonthDiff2035){
		return factor6/100.00;
	}
	else{
		return (double)VU2035Factor/100.00;
	}
	
	
}


-(double)ReturnVUCashFac :(int)aaPolicyYear {
	double factor2 = 0.00 ;
	double factor3 = 0.00;
	double factor4 = 0.00;
	double factor5 = 0.00;
	double factor6 = 0.00;
	
	if(VUCashOptFactor > 0 && [self FactorGroup:2] == 0){
		factor2 = (double)VUCashOptFactor;
	}
	else{
		factor2 = (double)VUCashFactor;
	}
	
	if(VUCashOptFactor > 0 && [self FactorGroup:3] == 0){
		factor3 = (double)VUCashOptFactor;
	}
	else{
		factor3 = (double)VUCashFactor;
	}
	
	if(VUCashOptFactor > 0 && [self FactorGroup:4] == 0){
		factor4 = (double)VUCashOptFactor;
	}
	else{
		factor4 = (double)VUCashFactor;
	}
	
	if(VUCashOptFactor > 0 && [self FactorGroup:5] == 0){
		factor5 = (double)VUCashOptFactor;
	}
	else{
		factor5 = (double)VUCashFactor;
	}
	
	if(VUCashOptFactor > 0 && [self FactorGroup:6] == 0){
		factor6 = (double)VUCashOptFactor;
	}
	else{
		factor6 = (double)VUCashFactor;
	}
	
	
	if(aaPolicyYear >= FundTerm2023 && aaPolicyYear <= FundTermPrev2025){
		return factor2/100.00;
	}
	else if(aaPolicyYear >= FundTerm2025 && aaPolicyYear <= FundTermPrev2028){
		return factor3/100.00;
	}
	else if(aaPolicyYear >= FundTerm2028 && aaPolicyYear <= FundTermPrev2030){
		return factor4/100.00;
	}
	else if(aaPolicyYear >= FundTerm2030 && aaPolicyYear <= FundTermPrev2035){
		return factor5/100.00;
	}
	else if(aaPolicyYear > FundTermPrev2035){
		return factor6/100.00;
	}
	else{
		return (double)VUCashFactor/100.00;
	}
	
}

-(double)ReturnVUCashFac :(int)aaPolicyYear andMonth:(int)aaMonth  {
	double factor2 = 0.00;
	double factor3 = 0.00;
	double factor4 = 0.00;
	double factor5 = 0.00;
	double factor6 = 0.00;
	
	if(VUCashOptFactor > 0 && [self FactorGroup:2] == 0){
		factor2 = (double)VUCashOptFactor;
	}
	else{
		factor2 = (double)VUCashFactor;
	}
	
	if(VUCashOptFactor > 0 && [self FactorGroup:3] == 0){
		factor3 = (double)VUCashOptFactor;
	}
	else{
		factor3 = (double)VUCashFactor;
	}
	
	if(VUCashOptFactor > 0 && [self FactorGroup:4] == 0){
		factor4 = (double)VUCashOptFactor;
	}
	else{
		factor4 = (double)VUCashFactor;
	}
	
	if(VUCashOptFactor > 0 && [self FactorGroup:5] == 0){
		factor5 = (double)VUCashOptFactor;
	}
	else{
		factor5 = (double)VUCashFactor;
	}
	
	if(VUCashOptFactor > 0 && [self FactorGroup:6] == 0){
		factor6 = (double)VUCashOptFactor;
	}
	else{
		factor6 = (double)VUCashFactor;
	}
	
	if(aaPolicyYear >= FundTerm2023 && aaPolicyYear <= FundTermPrev2025 && aaMonth > MonthDiff2023 ){
		return factor2/100.00;
	}
	else if(aaPolicyYear == FundTerm2025 && aaMonth <= MonthDiff2023){
		return factor2/100.00;
	}
	else if(aaPolicyYear >= FundTerm2025 && aaPolicyYear <= FundTermPrev2028 && aaMonth > MonthDiff2025 ){
		return factor3/100.00;
	}
	else if(aaPolicyYear == FundTerm2028 && aaMonth <= MonthDiff2028){
		return factor3/100.00;
	}
	else if(aaPolicyYear >= FundTerm2028 && aaPolicyYear <= FundTermPrev2030 && aaMonth > MonthDiff2028 ){
		return factor4/100.00;
	}
	else if(aaPolicyYear == FundTerm2030 && aaMonth <= MonthDiff2030){
		return factor4/100.00;
	}
	else if(aaPolicyYear >= FundTerm2030 && aaPolicyYear <= FundTermPrev2035 && aaMonth > MonthDiff2030 ){
		return factor5/100.00;
	}
	else if(aaPolicyYear > FundTermPrev2035 && aaMonth <= MonthDiff2035){
		return factor5/100.00;
	}
	else if(aaPolicyYear > FundTermPrev2035 && aaMonth > MonthDiff2035){
		return factor6/100.00;
	}
	else{
		return (double)VUCashFactor/100.00;
	}
	
}

-(double)ReturnVURetFac :(int)aaPolicyYear {
	double factor1 = 0.00;
	double factor2 = 0.00;
	double factor3 = 0.00;
	double factor4 = 0.00;
	double factor5 = 0.00;
	double factor6 = 0.00;
	
	if (VURetFactor > 0) {
		factor1 =(double)VURetFactor;
		factor2 = factor1 + (double)VU2023Factor * (double)(factor1/[self FactorGroup:2]);
		factor3 = factor2 + (double)VU2025Factor * (double)(factor2/[self FactorGroup:3]);
		factor4 = factor3 + (double)VU2028Factor * (double)(factor3/[self FactorGroup:4]);
		factor5 = factor4 + (double)VU2030Factor * (double)(factor4/[self FactorGroup:5]);
		factor6 = factor5 + (double)VU2035Factor * (double)(factor5/[self FactorGroup:6]);
	}
	else if (VURetOptFactor > 0){
		if ([self FactorGroup:2] == 0) {
			factor2 = (double)VURetOptFactor;
		}
		else{
			factor2 = 0.00;
		}
		
		if ([self FactorGroup:3] == 0) {
			factor3 = (double)VURetOptFactor;
		}
		else{
			factor3 = 0.00;
		}
		
		if ([self FactorGroup:4] == 0) {
			factor4 = (double)VURetOptFactor;
		}
		else{
			factor4 = 0.00;
		}
		
		if ([self FactorGroup:5] == 0) {
			factor5 = (double)VURetOptFactor;
		}
		else{
			factor5 = 0.00;
		}
		
		if ([self FactorGroup:6] == 0) {
			factor6 = (double)VURetOptFactor;
		}
		else{
			factor6 = 0.00;
		}
	}
	
	if (aaPolicyYear >= FundTerm2023 && aaPolicyYear <= FundTermPrev2025) {
		return factor2/100.00;
	}
	else if (aaPolicyYear >= FundTerm2025 && aaPolicyYear <= FundTermPrev2028) {
		return factor3/100.00;
	}
	else if (aaPolicyYear >= FundTerm2028 && aaPolicyYear <= FundTermPrev2030) {
		return factor4/100.00;
	}
	else if (aaPolicyYear >= FundTerm2030 && aaPolicyYear <= FundTermPrev2035) {
		return factor5/100.00;
	}
	else if (aaPolicyYear > FundTermPrev2035) {
		return factor6/100.00;
	}
	else{
		return (double)VURetFactor/100.00;
	}
}

-(double)ReturnVURetFac :(int)aaPolicyYear andMonth:(int) aaMonth {
	double factor1 = 0.00;
	double factor2 = 0.00;
	double factor3 = 0.00;
	double factor4 = 0.00;
	double factor5 = 0.00;
	double factor6 = 0.00;
	
	if (VURetFactor > 0) {
		factor1 =(double)VURetFactor;
		factor2 = factor1 + (double)VU2023Factor * (factor1/[self FactorGroup:2]);
		factor3 = factor2 + (double)VU2025Factor * (factor2/[self FactorGroup:3]);
		factor4 = factor3 + (double)VU2028Factor * (factor3/[self FactorGroup:4]);
		factor5 = factor4 + (double)VU2030Factor * (factor4/[self FactorGroup:5]);
		factor6 = factor5 + (double)VU2035Factor * (factor5/[self FactorGroup:6]);
	}
	else if (VURetOptFactor > 0){
		if ([self FactorGroup:2] == 0) {
			factor2 = (double)VURetOptFactor;
		}
		else{
			factor2 = 0.00;
		}
		
		if ([self FactorGroup:3] == 0) {
			factor3 = (double)VURetOptFactor;
		}
		else{
			factor3 = 0.00;
		}
		
		if ([self FactorGroup:4] == 0) {
			factor4 = (double)VURetOptFactor;
		}
		else{
			factor4 = 0.00;
		}
		
		if ([self FactorGroup:5] == 0) {
			factor5 = (double)VURetOptFactor;
		}
		else{
			factor5 = 0.00;
		}
		
		if ([self FactorGroup:6] == 0) {
			factor6 = (double)VURetOptFactor;
		}
		else{
			factor6 = 0.00;
		}
	}
	
	if(aaPolicyYear >= FundTerm2023 && aaPolicyYear <= FundTermPrev2025 && aaMonth > MonthDiff2023 ){
		return factor2/100.00;
	}
	else if(aaPolicyYear == FundTerm2025 && aaMonth <= MonthDiff2023){
		return factor2/100.00;
	}
	else if(aaPolicyYear >= FundTerm2025 && aaPolicyYear <= FundTermPrev2028 && aaMonth > MonthDiff2025 ){
		return factor3/100.00;
	}
	else if(aaPolicyYear == FundTerm2028 && aaMonth <= MonthDiff2028){
		return factor3/100.00;
	}
	else if(aaPolicyYear >= FundTerm2028 && aaPolicyYear <= FundTermPrev2030 && aaMonth > MonthDiff2028 ){
		return factor4/100.00;
	}
	else if(aaPolicyYear == FundTerm2030 && aaMonth <= MonthDiff2030){
		return factor4/100.00;
	}
	else if(aaPolicyYear >= FundTerm2030 && aaPolicyYear <= FundTermPrev2035 && aaMonth > MonthDiff2030 ){
		return factor5/100.00;
	}
	else if(aaPolicyYear > FundTermPrev2035 && aaMonth <= MonthDiff2035){
		return factor5/100.00;
	}
	else if(aaPolicyYear > FundTermPrev2035 && aaMonth > MonthDiff2035){
		return factor6/100.00;
	}
	else{
		return (double)VURetFactor/100.00;
	}
}

-(double)ReturnVUDanaFac :(int)aaPolicyYear {
	double factor1 = 0.00;
	double factor2 = 0.00;
	double factor3 = 0.00;
	double factor4 = 0.00;
	double factor5 = 0.00;
	double factor6 = 0.00;
	
	if (VUDanaFactor > 0) {
		factor1 =(double)VUDanaFactor;
		factor2 = factor1 + (double)VU2023Factor * (factor1/[self FactorGroup:2]);
		factor3 = factor2 + (double)VU2025Factor * (factor2/[self FactorGroup:3]);
		factor4 = factor3 + (double)VU2028Factor * (factor3/[self FactorGroup:4]);
		factor5 = factor4 + (double)VU2030Factor * (factor4/[self FactorGroup:5]);
		factor6 = factor5 + (double)VU2035Factor * (factor5/[self FactorGroup:6]);
	}
	else if (VUDanaOptFactor > 0){
		if ([self FactorGroup:2] == 0) {
			factor2 = (double)VUDanaOptFactor;
		}
		else{
			factor2 = 0.00;
		}
		
		if ([self FactorGroup:3] == 0) {
			factor3 = (double)VUDanaOptFactor;
		}
		else{
			factor3 = 0.00;
		}
		
		if ([self FactorGroup:4] == 0) {
			factor4 = (double)VUDanaOptFactor;
		}
		else{
			factor4 = 0.00;
		}
		
		if ([self FactorGroup:5] == 0) {
			factor5 = (double)VUDanaOptFactor;
		}
		else{
			factor5 = 0.00;
		}
		
		if ([self FactorGroup:6] == 0) {
			factor6 = (double)VUDanaOptFactor;
		}
		else{
			factor6 = 0.00;
		}
	}
	
	if (aaPolicyYear >= FundTerm2023 && aaPolicyYear <= FundTermPrev2025) {
		return factor2/100.00;
	}
	else if (aaPolicyYear >= FundTerm2025 && aaPolicyYear <= FundTermPrev2028) {
		return factor3/100.00;
	}
	else if (aaPolicyYear >= FundTerm2028 && aaPolicyYear <= FundTermPrev2030) {
		return factor4/100.00;
	}
	else if (aaPolicyYear >= FundTerm2030 && aaPolicyYear <= FundTermPrev2035) {
		return factor5/100.00;
	}
	else if (aaPolicyYear > FundTermPrev2035) {
        
		double temp = factor6/100.00;
		return temp;
	}
	else{
		return (double)VUDanaFactor/100.00;
	}
}

-(double)ReturnVUDanaFac :(int)aaPolicyYear andMonth:(int) aaMonth {
	double factor1;
	double factor2;
	double factor3;
	double factor4;
	double factor5;
	double factor6;
	
	if (VUDanaFactor > 0) {
		factor1 =(double)VUDanaFactor;
		factor2 = factor1 + (double)VU2023Factor * (double)(factor1/[self FactorGroup:2]);
		factor3 = factor2 + (double)VU2025Factor * (double)(factor2/[self FactorGroup:3]);
		factor4 = factor3 + (double)VU2028Factor * (double)(factor3/[self FactorGroup:4]);
		factor5 = factor4 + (double)VU2030Factor * (double)(factor4/[self FactorGroup:5]);
		factor6 = factor5 + (double)VU2035Factor * (double)(factor5/[self FactorGroup:6]);
	}
	else if (VUDanaOptFactor > 0){
		if ([self FactorGroup:2] == 0) {
			factor2 = (double)VUDanaOptFactor;
		}
		else{
			factor2 = 0.00;
		}
		
		if ([self FactorGroup:3] == 0) {
			factor3 = (double)VUDanaOptFactor;
		}
		else{
			factor3 = 0.00;
		}
		
		if ([self FactorGroup:4] == 0) {
			factor4 = (double)VUDanaOptFactor;
		}
		else{
			factor4 = 0.00;
		}
		
		if ([self FactorGroup:5] == 0) {
			factor5 = (double)VUDanaOptFactor;
		}
		else{
			factor5 = 0.00;
		}
		
		if ([self FactorGroup:6] == 0) {
			factor6 = (double)VUDanaOptFactor;
		}
		else{
			factor6 = 0.00;
		}
	}
	else{
		return 0.00;
	}
	
	if(aaPolicyYear >= FundTerm2023 && aaPolicyYear <= FundTermPrev2025 && aaMonth > MonthDiff2023 ){
		return factor2/100.00;
	}
	else if(aaPolicyYear == FundTerm2025 && aaMonth <= MonthDiff2023){
		return factor2/100.00;
	}
	else if(aaPolicyYear >= FundTerm2025 && aaPolicyYear <= FundTermPrev2028 && aaMonth > MonthDiff2025 ){
		return factor3/100.00;
	}
	else if(aaPolicyYear == FundTerm2028 && aaMonth <= MonthDiff2028){
		return factor3/100.00;
	}
	else if(aaPolicyYear >= FundTerm2028 && aaPolicyYear <= FundTermPrev2030 && aaMonth > MonthDiff2028 ){
		return factor4/100.00;
	}
	else if(aaPolicyYear == FundTerm2030 && aaMonth <= MonthDiff2030){
		return factor4/100.00;
	}
	else if(aaPolicyYear >= FundTerm2030 && aaPolicyYear <= FundTermPrev2035 && aaMonth > MonthDiff2030 ){
		return factor5/100.00;
	}
	else if(aaPolicyYear > FundTermPrev2035 && aaMonth <= MonthDiff2035){
		return factor5/100.00;
	}
	else if(aaPolicyYear > FundTermPrev2035 && aaMonth > MonthDiff2035){
		return factor6/100.00;
	}
	else{
		return (double)VUDanaFactor/100.00;
	}
}

-(double)ReturnVUSmartFac :(int)aaPolicyYear {
	double factor1 = 0.00;
	double factor2 = 0.00;
	double factor3 = 0.00;
	double factor4 = 0.00;
	double factor5 = 0.00;
	double factor6 = 0.00;
	
	if (VUSmartFactor > 0) {
		factor1 =(double)VUSmartFactor;
		factor2 = factor1 + (double)VU2023Factor * (factor1/[self FactorGroup:2]);
		factor3 = factor2 + (double)VU2025Factor * (factor2/[self FactorGroup:3]);
		factor4 = factor3 + (double)VU2028Factor * (factor3/[self FactorGroup:4]);
		factor5 = factor4 + (double)VU2030Factor * (factor4/[self FactorGroup:5]);
		factor6 = factor5 + (double)VU2035Factor * (factor5/[self FactorGroup:6]);
	}
	else if (VUSmartOptFactor > 0){
		if ([self FactorGroup:2] == 0) {
			factor2 = (double)VUSmartOptFactor;
		}
		else{
			factor2 = 0.00;
		}
		
		if ([self FactorGroup:3] == 0) {
			factor3 = (double)VUSmartOptFactor;
		}
		else{
			factor3 = 0.00;
		}
		
		if ([self FactorGroup:4] == 0) {
			factor4 = (double)VUSmartOptFactor;
		}
		else{
			factor4 = 0.00;
		}
		
		if ([self FactorGroup:5] == 0) {
			factor5 = (double)VUSmartOptFactor;
		}
		else{
			factor5 = 0.00;
		}
		
		if ([self FactorGroup:6] == 0) {
			factor6 = (double)VUSmartOptFactor;
		}
		else{
			factor6 = 0.00;
		}
	}
	
	if (aaPolicyYear >= FundTerm2023 && aaPolicyYear <= FundTermPrev2025) {
		return factor2/100.00;
	}
	else if (aaPolicyYear >= FundTerm2025 && aaPolicyYear <= FundTermPrev2028) {
		return factor3/100.00;
	}
	else if (aaPolicyYear >= FundTerm2028 && aaPolicyYear <= FundTermPrev2030) {
		return factor4/100.00;
	}
	else if (aaPolicyYear >= FundTerm2030 && aaPolicyYear <= FundTermPrev2035) {
		return factor5/100.00;
	}
	else if (aaPolicyYear > FundTermPrev2035) {
        
		double temp = factor6/100.00;
		return temp;
	}
	else{
		return (double)VUSmartFactor/100.00;
	}
}

-(double)ReturnVUSmartFac :(int)aaPolicyYear andMonth:(int) aaMonth {
	double factor1;
	double factor2;
	double factor3;
	double factor4;
	double factor5;
	double factor6;
	
	if (VUSmartFactor > 0) {
		factor1 =(double)VUSmartFactor;
		factor2 = factor1 + (double)VU2023Factor * (double)(factor1/[self FactorGroup:2]);
		factor3 = factor2 + (double)VU2025Factor * (double)(factor2/[self FactorGroup:3]);
		factor4 = factor3 + (double)VU2028Factor * (double)(factor3/[self FactorGroup:4]);
		factor5 = factor4 + (double)VU2030Factor * (double)(factor4/[self FactorGroup:5]);
		factor6 = factor5 + (double)VU2035Factor * (double)(factor5/[self FactorGroup:6]);
	}
	else if (VUSmartOptFactor > 0){
		if ([self FactorGroup:2] == 0) {
			factor2 = (double)VUSmartOptFactor;
		}
		else{
			factor2 = 0.00;
		}
		
		if ([self FactorGroup:3] == 0) {
			factor3 = (double)VUSmartOptFactor;
		}
		else{
			factor3 = 0.00;
		}
		
		if ([self FactorGroup:4] == 0) {
			factor4 = (double)VUSmartOptFactor;
		}
		else{
			factor4 = 0.00;
		}
		
		if ([self FactorGroup:5] == 0) {
			factor5 = (double)VUSmartOptFactor;
		}
		else{
			factor5 = 0.00;
		}
		
		if ([self FactorGroup:6] == 0) {
			factor6 = (double)VUSmartOptFactor;
		}
		else{
			factor6 = 0.00;
		}
	}
	else{
		return 0.00;
	}
	
	if(aaPolicyYear >= FundTerm2023 && aaPolicyYear <= FundTermPrev2025 && aaMonth > MonthDiff2023 ){
		return factor2/100.00;
	}
	else if(aaPolicyYear == FundTerm2025 && aaMonth <= MonthDiff2023){
		return factor2/100.00;
	}
	else if(aaPolicyYear >= FundTerm2025 && aaPolicyYear <= FundTermPrev2028 && aaMonth > MonthDiff2025 ){
		return factor3/100.00;
	}
	else if(aaPolicyYear == FundTerm2028 && aaMonth <= MonthDiff2028){
		return factor3/100.00;
	}
	else if(aaPolicyYear >= FundTerm2028 && aaPolicyYear <= FundTermPrev2030 && aaMonth > MonthDiff2028 ){
		return factor4/100.00;
	}
	else if(aaPolicyYear == FundTerm2030 && aaMonth <= MonthDiff2030){
		return factor4/100.00;
	}
	else if(aaPolicyYear >= FundTerm2030 && aaPolicyYear <= FundTermPrev2035 && aaMonth > MonthDiff2030 ){
		return factor5/100.00;
	}
	else if(aaPolicyYear > FundTermPrev2035 && aaMonth <= MonthDiff2035){
		return factor5/100.00;
	}
	else if(aaPolicyYear > FundTermPrev2035 && aaMonth > MonthDiff2035){
		return factor6/100.00;
	}
	else{
		return (double)VUSmartFactor/100.00;
	}
}

-(double)ReturnVUVentureFac :(int)aaPolicyYear {
	double factor1 = 0.00;
	double factor2 = 0.00;
	double factor3 = 0.00;
	double factor4 = 0.00;
	double factor5 = 0.00;
	double factor6 = 0.00;
	
	if (VUVentureFactor > 0) {
		factor1 =(double)VUVentureFactor;
		factor2 = factor1 + (double)VU2023Factor * (factor1/[self FactorGroup:2]);
		factor3 = factor2 + (double)VU2025Factor * (factor2/[self FactorGroup:3]);
		factor4 = factor3 + (double)VU2028Factor * (factor3/[self FactorGroup:4]);
		factor5 = factor4 + (double)VU2030Factor * (factor4/[self FactorGroup:5]);
		factor6 = factor5 + (double)VU2035Factor * (factor5/[self FactorGroup:6]);
	}
	else if (VUVentureOptFactor > 0){
		if ([self FactorGroup:2] == 0) {
			factor2 = (double)VUVentureOptFactor;
		}
		else{
			factor2 = 0.00;
		}
		
		if ([self FactorGroup:3] == 0) {
			factor3 = (double)VUVentureOptFactor;
		}
		else{
			factor3 = 0.00;
		}
		
		if ([self FactorGroup:4] == 0) {
			factor4 = (double)VUVentureOptFactor;
		}
		else{
			factor4 = 0.00;
		}
		
		if ([self FactorGroup:5] == 0) {
			factor5 = (double)VUVentureOptFactor;
		}
		else{
			factor5 = 0.00;
		}
		
		if ([self FactorGroup:6] == 0) {
			factor6 = (double)VUVentureOptFactor;
		}
		else{
			factor6 = 0.00;
		}
	}
	
	if (aaPolicyYear >= FundTerm2023 && aaPolicyYear <= FundTermPrev2025) {
		return factor2/100.00;
	}
	else if (aaPolicyYear >= FundTerm2025 && aaPolicyYear <= FundTermPrev2028) {
		return factor3/100.00;
	}
	else if (aaPolicyYear >= FundTerm2028 && aaPolicyYear <= FundTermPrev2030) {
		return factor4/100.00;
	}
	else if (aaPolicyYear >= FundTerm2030 && aaPolicyYear <= FundTermPrev2035) {
		return factor5/100.00;
	}
	else if (aaPolicyYear > FundTermPrev2035) {
        
		double temp = factor6/100.00;
		return temp;
	}
	else{
		return (double)VUVentureFactor/100.00;
	}
}

-(double)ReturnVUVentureFac :(int)aaPolicyYear andMonth:(int) aaMonth {
	double factor1;
	double factor2;
	double factor3;
	double factor4;
	double factor5;
	double factor6;
	
	if (VUVentureFactor > 0) {
		factor1 =(double)VUVentureFactor;
		factor2 = factor1 + (double)VU2023Factor * (double)(factor1/[self FactorGroup:2]);
		factor3 = factor2 + (double)VU2025Factor * (double)(factor2/[self FactorGroup:3]);
		factor4 = factor3 + (double)VU2028Factor * (double)(factor3/[self FactorGroup:4]);
		factor5 = factor4 + (double)VU2030Factor * (double)(factor4/[self FactorGroup:5]);
		factor6 = factor5 + (double)VU2035Factor * (double)(factor5/[self FactorGroup:6]);
	}
	else if (VUVentureOptFactor > 0){
		if ([self FactorGroup:2] == 0) {
			factor2 = (double)VUVentureOptFactor;
		}
		else{
			factor2 = 0.00;
		}
		
		if ([self FactorGroup:3] == 0) {
			factor3 = (double)VUVentureOptFactor;
		}
		else{
			factor3 = 0.00;
		}
		
		if ([self FactorGroup:4] == 0) {
			factor4 = (double)VUVentureOptFactor;
		}
		else{
			factor4 = 0.00;
		}
		
		if ([self FactorGroup:5] == 0) {
			factor5 = (double)VUVentureOptFactor;
		}
		else{
			factor5 = 0.00;
		}
		
		if ([self FactorGroup:6] == 0) {
			factor6 = (double)VUVentureOptFactor;
		}
		else{
			factor6 = 0.00;
		}
	}
	else{
		return 0.00;
	}
	
	if(aaPolicyYear >= FundTerm2023 && aaPolicyYear <= FundTermPrev2025 && aaMonth > MonthDiff2023 ){
		return factor2/100.00;
	}
	else if(aaPolicyYear == FundTerm2025 && aaMonth <= MonthDiff2023){
		return factor2/100.00;
	}
	else if(aaPolicyYear >= FundTerm2025 && aaPolicyYear <= FundTermPrev2028 && aaMonth > MonthDiff2025 ){
		return factor3/100.00;
	}
	else if(aaPolicyYear == FundTerm2028 && aaMonth <= MonthDiff2028){
		return factor3/100.00;
	}
	else if(aaPolicyYear >= FundTerm2028 && aaPolicyYear <= FundTermPrev2030 && aaMonth > MonthDiff2028 ){
		return factor4/100.00;
	}
	else if(aaPolicyYear == FundTerm2030 && aaMonth <= MonthDiff2030){
		return factor4/100.00;
	}
	else if(aaPolicyYear >= FundTerm2030 && aaPolicyYear <= FundTermPrev2035 && aaMonth > MonthDiff2030 ){
		return factor5/100.00;
	}
	else if(aaPolicyYear > FundTermPrev2035 && aaMonth <= MonthDiff2035){
		return factor5/100.00;
	}
	else if(aaPolicyYear > FundTermPrev2035 && aaMonth > MonthDiff2035){
		return factor6/100.00;
	}
	else{
		return (double)VUVentureFactor/100.00;
	}
}


-(double)FactorGroup : (uint)aaGroup{
	if (aaGroup == 1) {
		return VU2023Factor + VU2025Factor + VU2028Factor + VU2030Factor + VU2035Factor + VURetFactor + VUDanaFactor + VUSmartFactor + VUVentureFactor + VUVentureGrowthFactor + VUVentureBlueChipFactor + VUVentureDanaFactor + VUVentureManagedFactor + VUVentureIncomeFactor;
	}
	else if (aaGroup == 2) {
		return VU2025Factor + VU2028Factor + VU2030Factor + VU2035Factor + VURetFactor + VUDanaFactor + VUSmartFactor + VUVentureFactor + VUVentureGrowthFactor + VUVentureBlueChipFactor + VUVentureDanaFactor + VUVentureManagedFactor + VUVentureIncomeFactor;
	}
	else if (aaGroup == 3) {
		return VU2028Factor + VU2030Factor + VU2035Factor + VURetFactor + VUDanaFactor + VUSmartFactor + VUVentureFactor + VUVentureGrowthFactor + VUVentureBlueChipFactor + VUVentureDanaFactor + VUVentureManagedFactor + VUVentureIncomeFactor;
	}
	else if (aaGroup == 4) {
		return VU2030Factor + VU2035Factor + VURetFactor + VUDanaFactor + VUSmartFactor + VUVentureFactor + VUVentureGrowthFactor + VUVentureBlueChipFactor + VUVentureDanaFactor + VUVentureManagedFactor + VUVentureIncomeFactor;
	}
	else if (aaGroup == 5) {
		return VU2035Factor + VURetFactor + VUDanaFactor + VUSmartFactor + VUVentureFactor + VUVentureGrowthFactor + VUVentureBlueChipFactor + VUVentureDanaFactor + VUVentureManagedFactor + VUVentureIncomeFactor;
	}
	else {
		return VURetFactor + VUDanaFactor + VUSmartFactor + VUVentureFactor + VUVentureGrowthFactor + VUVentureBlueChipFactor + VUVentureDanaFactor + VUVentureManagedFactor + VUVentureIncomeFactor;
	}
}

-(double)ReturnTotalBasicMortHigh: (int)aaPolicyYear{
	double tempBasicMort = ([self ReturnBasicMort:(Age + aaPolicyYear -1)]/1000.00);
	double tempTotalBasicMortHigh = 0.00;
    
	if ([getHL doubleValue] > 0) {
		if (aaPolicyYear <= [getHLTerm intValue]) {
			tempTotalBasicMortHigh = [strBasicSA doubleValue ] * (tempBasicMort * (1 + [getHLPct doubleValue ]/100.00) +
																  [getHL doubleValue]/1000.00 + [getOccLoading doubleValue ]/1000.00)/12.00;
		}
		else{
			tempTotalBasicMortHigh = [strBasicSA doubleValue ] * (tempBasicMort * (1 + [getHLPct doubleValue ]/100.00) +
																  0/1000.00 + [getOccLoading doubleValue ]/1000.00)/12.00;
		}
	}
	else if ([getHLPct doubleValue] > 0) {
		if (aaPolicyYear <= [getHLPctTerm intValue]) {
			tempTotalBasicMortHigh = [strBasicSA doubleValue ] * (tempBasicMort * (1 + [getHLPct doubleValue ]/100.00) +
																  [getHL doubleValue]/1000.00 + [getOccLoading doubleValue ]/1000.00)/12.00;
		}
		else{
			tempTotalBasicMortHigh = [strBasicSA doubleValue ] * (tempBasicMort * (1 + 0/100.00) +
                                                                  [getHL doubleValue]/1000.00 + [getOccLoading doubleValue ]/1000.00)/12.00;
		}
	}
	else{
		tempTotalBasicMortHigh = [strBasicSA doubleValue ] * (tempBasicMort * (1 + [getHLPct doubleValue ]/100.00) +
                                                              [getHL doubleValue]/1000.00 + [getOccLoading doubleValue ]/1000.00)/12.00;
	}
	
	/*
     double tempTotalBasicMortHigh = [strBasicSA doubleValue ] * (tempBasicMort * (1 + [getHLPct doubleValue ]/100.00) +
     [getHL doubleValue]/1000.00 + [getOccLoading doubleValue ]/1000.00)/12.00;
	 */
	return tempTotalBasicMortHigh;
    
	
	
}

-(double)ReturnTotalBasicMortMedian: (int)aaPolicyYear{
	double tempBasicMort = ([self ReturnBasicMort:(Age + aaPolicyYear -1)]/1000.00);
	double tempTotalBasicMortMedian = 0.00;
    
	if ([getHL doubleValue] > 0) {
		if (aaPolicyYear <= [getHLTerm intValue]) {
			tempTotalBasicMortMedian = [strBasicSA doubleValue ] * (tempBasicMort * (1 + [getHLPct doubleValue ]/100.00) +
																	[getHL doubleValue]/1000.00 + [getOccLoading doubleValue ]/1000.00)/12.00;
		}
		else{
			tempTotalBasicMortMedian = [strBasicSA doubleValue ] * (tempBasicMort * (1 + [getHLPct doubleValue ]/100.00) +
																	0/1000.00 + [getOccLoading doubleValue ]/1000.00)/12.00;
		}
	}
	else if ([getHLPct doubleValue] > 0) {
		if (aaPolicyYear <= [getHLPctTerm intValue]) {
			tempTotalBasicMortMedian = [strBasicSA doubleValue ] * (tempBasicMort * (1 + [getHLPct doubleValue ]/100.00) +
																	[getHL doubleValue]/1000.00 + [getOccLoading doubleValue ]/1000.00)/12.00;
		}
		else{
			tempTotalBasicMortMedian = [strBasicSA doubleValue ] * (tempBasicMort * (1 + 0/100.00) +
                                                                    [getHL doubleValue]/1000.00 + [getOccLoading doubleValue ]/1000.00)/12.00;
		}
	}
	else{
		tempTotalBasicMortMedian = [strBasicSA doubleValue ] * (tempBasicMort * (1 + [getHLPct doubleValue ]/100.00) +
																[getHL doubleValue]/1000.00 + [getOccLoading doubleValue ]/1000.00)/12.00;
	}
	
	
	return tempTotalBasicMortMedian;
	/*
     return [strBasicSA doubleValue ] * (([self ReturnBasicMort:Age + aaPolicyYear -1]/1000.00) * (1 + [getHLPct doubleValue ]/100.00) +
     [getHL doubleValue]/1000.00 + [getOccLoading doubleValue ]/1000.00)/12.00;
	 */
}

-(double)ReturnTotalBasicMortLow: (int)aaPolicyYear{
    double tempBasicMort = ([self ReturnBasicMort:(Age + aaPolicyYear -1)]/1000.00);
	double tempTotalBasicMortLow = 0.00;
    
	if ([getHL intValue] > 0) {
		if (aaPolicyYear <= [getHLTerm intValue]) {
            tempTotalBasicMortLow = [strBasicSA doubleValue ] * ( tempBasicMort * (1 + [getHLPct doubleValue ]/100.00) +
												[getHL doubleValue]/1000.00 + [getOccLoading doubleValue ]/1000.00)/12.00;
		}
		else{
            tempTotalBasicMortLow = [strBasicSA doubleValue ] * (tempBasicMort * (1 + [getHLPct doubleValue ]/100.00) +
												0/1000.00 + [getOccLoading doubleValue ]/1000.00)/12.00;
		}
	}
	else{
		if ([getHLPct intValue] > 0) {
			if (aaPolicyYear <= [getHLPctTerm intValue]) {
                tempTotalBasicMortLow = [strBasicSA doubleValue ] * (tempBasicMort * (1 + [getHLPct doubleValue ]/100.00) +
													[getHL doubleValue]/1000.00 + [getOccLoading doubleValue ]/1000.00)/12.00;
			}
			else{
                tempTotalBasicMortLow = [strBasicSA doubleValue ] * (tempBasicMort * (1 + 0.00/100.00) +
													[getHL doubleValue]/1000.00 + [getOccLoading doubleValue ]/1000.00)/12.00;
			}
		}
		else{
            tempTotalBasicMortLow = [strBasicSA doubleValue ] * (tempBasicMort * (1 + [getHLPct doubleValue ]/100.00) +
												[getHL doubleValue]/1000.00 + [getOccLoading doubleValue ]/1000.00)/12.00;
            
		}
	}
    
    
    return tempTotalBasicMortLow;
	/*
     return [strBasicSA doubleValue ] * (([self ReturnBasicMort:Age + aaPolicyYear -1]/1000.00) * (1 + [getHLPct doubleValue ]/100.00) +
     [getHL doubleValue]/1000.00 + [getOccLoading doubleValue ]/1000.00)/12.00;
	 */
	
	
}

-(double)ReturnTotalRiderMort: (int)aaPolicyYear{
	double tempTotal = 0.00;
	sqlite3_stmt *statement;
	NSString *QuerySQL;
	NSMutableArray *UnitizeRiderAlloc = [[NSMutableArray alloc] init ];
	NSMutableArray *UnitizeRiderMort = [[NSMutableArray alloc] init ];
	NSMutableArray *UnitizeRiderCOIDiscount = [[NSMutableArray alloc] init ];
	/*
     if (sqlite3_open([databasePath UTF8String], &contactDB) == SQLITE_OK){
     QuerySQL = [NSString stringWithFormat: @"Select ridercode, SumAssured, ifnull(Hloading, '0') as Hloading, ifnull(HLoadingPct, '0') as HLoadingPct, "
     "RiderTerm, planOption, Deductible from ul_rider_details Where  "
     "  sino = '%@' AND ridercode in ('CIRD', 'DCA', 'ACIR', 'HMM', 'MG_IV', "
     "'WI', 'MR', 'TPDMLA', 'PA', 'DHI')", SINo];
     
     //NSLog(@"%@", QuerySQL);
     if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
     while (sqlite3_step(statement) == SQLITE_ROW) {
     [UnitizeRiderCode addObject:[[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 0)]];
     [UnitizeRiderSA addObject:[[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 1)]];
     [UnitizeRiderHL addObject:[[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 2)]];
     [UnitizeRiderHLPct addObject:[[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 3)]];
     [UnitizeRiderTerm addObject:[[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 4)]];
     [UnitizeRiderPlanChoice addObject:[[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 5)]];
     [UnitizeRiderDeductible addObject:[[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 6)]];
     //NSLog(@"10- 1 ok");
     }
     sqlite3_finalize(statement);
     }
     
     sqlite3_close(contactDB);
     }
     */
	if (sqlite3_open([UL_RatesDatabasePath UTF8String], &contactDB) == SQLITE_OK){
        
		for (int i = 0; i < UnitizeRiderCode.count; i++) {
			if ([[UnitizeRiderCode objectAtIndex:i] isEqualToString:@"ACIR"]) {
				QuerySQL = [NSString stringWithFormat: @"select Rate from ES_Sys_Rider_Mort where plancode = '%@' AND sex = '%@' AND fromage='%d' AND smoker = '%@' ",
							[UnitizeRiderCode objectAtIndex:i] ,getSexLA, Age + aaPolicyYear - 1, getSmokerLA];
			}
			else if ([[UnitizeRiderCode objectAtIndex:i] isEqualToString:@"CIRD"]){
				QuerySQL = [NSString stringWithFormat: @"select Rate from ES_Sys_Rider_Mort where plancode = '%@' AND sex = '%@' AND fromage='%d' AND PolYear = '%d' AND Term = '%@' ",
							[UnitizeRiderCode objectAtIndex:i], getSexLA, Age , aaPolicyYear, [UnitizeRiderTerm objectAtIndex:i] ];
			}
			else if ([[UnitizeRiderCode objectAtIndex:i] isEqualToString:@"WI"] ||
					 [[UnitizeRiderCode objectAtIndex:i] isEqualToString:@"PA"] ||
					 [[UnitizeRiderCode objectAtIndex:i] isEqualToString:@"MR"] ||
					 [[UnitizeRiderCode objectAtIndex:i] isEqualToString:@"TPDMLA"] ||
					 [[UnitizeRiderCode objectAtIndex:i] isEqualToString:@"DHI"] ||
					 [[UnitizeRiderCode objectAtIndex:i] isEqualToString:@"DCA"]){
				
				QuerySQL = [NSString stringWithFormat: @"select Rate from ES_Sys_Rider_Mort where plancode = '%@' AND sex = '%@' AND fromage='%d' AND  OccClass= '%d' ",
							[UnitizeRiderCode objectAtIndex:i], [getSexLA substringToIndex:1], Age + aaPolicyYear - 1, getOccpClass ];
			}
			else if ([[UnitizeRiderCode objectAtIndex:i] isEqualToString:@"HMM"]){
				NSString *ccc;
				if ([[UnitizeRiderPlanChoice objectAtIndex:i] isEqualToString:@"HMM_150"]) {
					ccc = @"MM150";
				}
				else if ([[UnitizeRiderPlanChoice objectAtIndex:i] isEqualToString:@"HMM_200"]) {
					ccc = @"MM200";
				}
				else if ([[UnitizeRiderPlanChoice objectAtIndex:i] isEqualToString:@"HMM_300"]) {
					ccc = @"MM300";
				}
				else if ([[UnitizeRiderPlanChoice objectAtIndex:i] isEqualToString:@"HMM_400"]) {
					ccc = @"MM400";
				}
				
				QuerySQL = [NSString stringWithFormat: @"select Rate from ES_Sys_Rider_Mort where plancode = '%@' AND sex = '%@' AND fromage='%d' AND  OccClass= '%d' "
							"AND Type = '%@' AND Deductible = '%@'",
							[UnitizeRiderCode objectAtIndex:i], getSexLA, Age + aaPolicyYear - 1, getOccpClass, ccc, [UnitizeRiderDeductible objectAtIndex:i] ];
			}
			else if ([[UnitizeRiderCode objectAtIndex:i] isEqualToString:@"MG_IV"]){
				NSString *ccc;
				if ([[UnitizeRiderPlanChoice objectAtIndex:i] isEqualToString:@"MGIVP_150"]) {
					ccc = @"MGIV_150";
				}
				else if ([[UnitizeRiderPlanChoice objectAtIndex:i] isEqualToString:@"MGIVP_200"]) {
					ccc = @"MGIV_200";
				}
				else if ([[UnitizeRiderPlanChoice objectAtIndex:i] isEqualToString:@"MGIVP_300"]) {
					ccc = @"MGIV_300";
				}
				else if ([[UnitizeRiderPlanChoice objectAtIndex:i] isEqualToString:@"MGIVP_400"]) {
					ccc = @"MGIV_400";
				}
				
				
				QuerySQL = [NSString stringWithFormat: @"select Rate from ES_Sys_Rider_Mort where plancode = '%@' AND sex = '%@' AND fromage='%d' AND  OccClass= '%d' "
							"AND Type = '%@'",
							[UnitizeRiderCode objectAtIndex:i], getSexLA, Age + aaPolicyYear - 1, getOccpClass, ccc];
			}
            else if ([[UnitizeRiderCode objectAtIndex:i] isEqualToString:@"TPDYLA"]){
				QuerySQL = [NSString stringWithFormat: @"select Rate from ES_TPDYLA_Mort where sex = '%@' AND age='%d' AND  Smoker = '%@'",  getSexLA, Age + aaPolicyYear - 1, getSmokerLA];
			}
            else if ([[UnitizeRiderCode objectAtIndex:i] isEqualToString:@"CCR"]) {
				QuerySQL = [NSString stringWithFormat: @"select COI from ES_CCR_COI where gender = '%@' AND age='%d' AND smoker = '%@' ",
							 getSexLA, Age + aaPolicyYear - 1, getSmokerLA];
			}
            else if ([[UnitizeRiderCode objectAtIndex:i] isEqualToString:@"TCCR"]) {
				QuerySQL = [NSString stringWithFormat: @"select COI from ES_TCCR_COI where gender = '%@' AND age='%d' AND smoker = '%@' ",
                            getSexLA, Age + aaPolicyYear - 1, getSmokerLA];
			}
            else if ([[UnitizeRiderCode objectAtIndex:i] isEqualToString:@"JCCR"]) {
				QuerySQL = [NSString stringWithFormat: @"select COI from ES_JCCR_COI where gender = '%@' AND age='%d' AND smoker = '%@' ",
                            getSexLA, Age + aaPolicyYear - 1, getSmokerLA];
			}
            else if ([[UnitizeRiderCode objectAtIndex:i] isEqualToString:@"MDSR1"] || [[UnitizeRiderCode objectAtIndex:i] isEqualToString:@"MDSR2"]) {
                if([[UnitizeRiderPreDeductible objectAtIndex:i] length] == 0){
                    QuerySQL = [NSString stringWithFormat: @"select COI from ES_MDSR_COI where sex = '%@' AND age='%d' AND PreRetDed IS NULL AND PostRetDed = '%@' AND plan = '%@' AND OccupationClass = '%d'  ",
                                getSexLA, Age + aaPolicyYear - 1, [UnitizeRiderPostDeductible objectAtIndex:i], [UnitizeRiderPlanChoice objectAtIndex:i], getOccpClass ];
                }
                else if([[UnitizeRiderPostDeductible objectAtIndex:i] length] == 0){
                    QuerySQL = [NSString stringWithFormat: @"select COI from ES_MDSR_COI where sex = '%@' AND age='%d' AND PreRetDed = '%@' AND PostRetDed IS NULL AND plan = '%@' AND OccupationClass = '%d'  ",
                                getSexLA, Age + aaPolicyYear - 1, [UnitizeRiderPreDeductible objectAtIndex:i], [UnitizeRiderPlanChoice objectAtIndex:i], getOccpClass ];
                }
                else{
                    QuerySQL = [NSString stringWithFormat: @"select COI from ES_MDSR_COI where sex = '%@' AND age='%d' AND PreRetDed = '%@' AND PostRetDed = '%@' AND plan = '%@' AND OccupationClass = '%d'  ",
                                getSexLA, Age + aaPolicyYear - 1, [UnitizeRiderPreDeductible objectAtIndex:i], [UnitizeRiderPostDeductible objectAtIndex:i], [UnitizeRiderPlanChoice objectAtIndex:i], getOccpClass ];
                }

			}
            else if ([[UnitizeRiderCode objectAtIndex:i] isEqualToString:@"MDSR1-ALW"] || [[UnitizeRiderCode objectAtIndex:i] isEqualToString:@"MDSR2-ALW"]){
                     
				QuerySQL = [NSString stringWithFormat: @"select COI from ES_MDSR_ALW_COI where sex = '%@' AND age='%d' AND plan = '%@' AND OccupationClass = '%d'  ",
                            getSexLA, Age + aaPolicyYear - 1,  [UnitizeRiderPlanChoice objectAtIndex:i], getOccpClass ];
			}
            else if ([[UnitizeRiderCode objectAtIndex:i] isEqualToString:@"MDSR1-OT"] || [[UnitizeRiderCode objectAtIndex:i] isEqualToString:@"MDSR2-OT"]){
            
                QuerySQL = [NSString stringWithFormat: @"select COI from ES_MDSR_OT_COI where sex = '%@' AND age='%d' AND OccupationClass = '%d'  ",
                        getSexLA, Age + aaPolicyYear - 1, getOccpClass ];
            }
            else if ([[UnitizeRiderCode objectAtIndex:i] isEqualToString:@"LDYR"]) {
				QuerySQL = [NSString stringWithFormat: @"select COI from ES_LDYR_COI where age='%d'   ", Age + aaPolicyYear - 1];
			}
            else if ([[UnitizeRiderCode objectAtIndex:i] isEqualToString:@"LDYR-PCB"]) {
				QuerySQL = [NSString stringWithFormat: @"select COI from ES_LDYR_PCB_COI where age='%d'   ", Age + aaPolicyYear - 1];
			}
            else if ([[UnitizeRiderCode objectAtIndex:i] isEqualToString:@"LDYR-BBB"]) {
				QuerySQL = [NSString stringWithFormat: @"select COI from ES_LDYR_BBB_COI where age='%d'   ", Age ];
			}
            else if ([[UnitizeRiderCode objectAtIndex:i] isEqualToString:@"MSR"]) {
				QuerySQL = [NSString stringWithFormat: @"select COI from ES_MSR_COI where age='%d'   ", Age + aaPolicyYear - 1];
            }
            else if ([[UnitizeRiderCode objectAtIndex:i] isEqualToString:@"HCIR"]) {
				QuerySQL = [NSString stringWithFormat: @"select COI from ES_HCIR_COI where age='%d'   ", Age + aaPolicyYear - 1];
            }

			
			
			//NSLog(@"%@", QuerySQL);
			if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
				if (sqlite3_step(statement) == SQLITE_ROW) {
					[UnitizeRiderMort addObject:[[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 0)]];
                    //NSLog(@"10- 2 ok");
				}
				else{
					[UnitizeRiderMort addObject:@"0.00"];
				}
				sqlite3_finalize(statement);
			}
			else{
				[UnitizeRiderMort addObject:@"0.00"];
			}
			
			QuerySQL = [NSString stringWithFormat: @"select Rate from ES_Sys_Rider_Allocation where Term = '%@' AND PolYear = '%d'",
						[UnitizeRiderTerm objectAtIndex:i], aaPolicyYear];
            
            //NSLog(@"%@", QuerySQL);
			if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
				if (sqlite3_step(statement) == SQLITE_ROW) {
					[UnitizeRiderAlloc addObject:[[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 0)]];
					
				}
				else{
					[UnitizeRiderAlloc addObject:@"0.00"];
				}
				sqlite3_finalize(statement);
			}
			else{
				[UnitizeRiderAlloc addObject:@"0.00"];
			}

            
            
            if ([[UnitizeRiderCode objectAtIndex:i] isEqualToString:@"CCR" ] || [[UnitizeRiderCode objectAtIndex:i] isEqualToString:@"TCCR" ] ||[[UnitizeRiderCode objectAtIndex:i] isEqualToString:@"MSR" ]) {
                QuerySQL = [NSString stringWithFormat: @"select discount from ES_%@_COI_Discount where age = '%d' AND PolicyYear = '%d'" ,[UnitizeRiderCode objectAtIndex:i],  Age + aaPolicyYear, aaPolicyYear];
                
            }
            else if ([[UnitizeRiderCode objectAtIndex:i] isEqualToString:@"LDYR" ]  ) {
                
                QuerySQL = [NSString stringWithFormat: @"select COIdiscount from ES_%@_COI_Discount where age = '%d' AND PolicyYearFrom = '%d'" ,
                            [UnitizeRiderCode objectAtIndex:i], Age, aaPolicyYear];
                
            }
            else if ([[UnitizeRiderCode objectAtIndex:i] isEqualToString:@"JCCR" ] ) {
                QuerySQL = [NSString stringWithFormat: @"select discount from ES_%@_COI_Discount where age = '%d' AND PolicyYear = '%d'" ,[UnitizeRiderCode objectAtIndex:i],  Age, aaPolicyYear];
                
            }
            else if ([[UnitizeRiderCode objectAtIndex:i] isEqualToString:@"HCIR" ] ) {
                QuerySQL = [NSString stringWithFormat: @"select discount from ES_HCIR_COI_Discount where age = '%d' AND PolicyYear = '%d'" , Age, aaPolicyYear];
                
            }
            else if ([[UnitizeRiderCode objectAtIndex:i] isEqualToString:@"MDSR1" ] || [[UnitizeRiderCode objectAtIndex:i] isEqualToString:@"MDSR2" ] ||
                     [[UnitizeRiderCode objectAtIndex:i] isEqualToString:@"MDSR1-ALW" ] || [[UnitizeRiderCode objectAtIndex:i] isEqualToString:@"MDSR2-ALW" ] ||
                     [[UnitizeRiderCode objectAtIndex:i] isEqualToString:@"MDSR1-OT" ] || [[UnitizeRiderCode objectAtIndex:i] isEqualToString:@"MDSR2-OT" ]) {
                QuerySQL = [NSString stringWithFormat: @"select discount from ES_MDSR_COI_Discount where age = '%d' AND PolicyYear = '%d'" ,  Age, aaPolicyYear];
                
            }
            else  {
                QuerySQL = @"";
                
            }
            
            if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
                if (sqlite3_step(statement) == SQLITE_ROW) {
                    [UnitizeRiderCOIDiscount addObject:[[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(statement, 0)]];
                    
                }
                else{
                    [UnitizeRiderCOIDiscount addObject:@"0.00"];
                }
                sqlite3_finalize(statement);
            }
            else{
                [UnitizeRiderCOIDiscount addObject:@"0.00"];
            }
            
            
			
		}
		sqlite3_close(contactDB);
        
	}
    
	for (int i = 0; i < [UnitizeRiderCode count]; i++) {
        
		NSString *RidercodeFromArray = [UnitizeRiderCode objectAtIndex:i];
		double SAFromArray = [[UnitizeRiderSA objectAtIndex:i] doubleValue ];
		double HLFromArray = [[UnitizeRiderHL objectAtIndex:i] doubleValue ];
		double  HLPctFromArray = [[UnitizeRiderHLPct objectAtIndex:i] doubleValue ];
        double HLTermFromArray = [[UnitizeRiderHLTerm objectAtIndex:i] doubleValue ];
		double  HLPctTermFromArray = [[UnitizeRiderHLPctTerm objectAtIndex:i] doubleValue ];
		double  RiderMortFromArray = [[UnitizeRiderMort objectAtIndex:i] doubleValue ];
		double RiderAllocFromArray = [[UnitizeRiderAlloc objectAtIndex:i]doubleValue ]/100.00;
		double tempOccloading = 0.00;
        double RiderTermFromArray = [[UnitizeRiderTerm objectAtIndex:i] intValue ];
        int RiderUnitsFromArray = [[UnitizeRiderUnits objectAtIndex:i] intValue ];
        
        if (aaPolicyYear > HLTermFromArray ) {
            HLFromArray = 0.00;
        }
        
        if (aaPolicyYear > HLPctTermFromArray) {
            HLPctFromArray = 0.00;
        }
		
		if ([self ISRiderOccLoading:RidercodeFromArray] == FALSE ) {
			tempOccloading = 0.00;
		}
		else{
			tempOccloading = [getOccLoading doubleValue];
		}
		

        
		//NSLog(@"%d, %@, %f, %f, %f, %f, %f", aaPolicyYear,  RidercodeFromArray, SAFromArray, HLFromArray, HLPctFromArray, RiderMortFromArray, RiderAllocFromArray);
		if ([RidercodeFromArray isEqualToString:@"CIRD"] || [RidercodeFromArray isEqualToString:@"ACIR" ] || [RidercodeFromArray isEqualToString:@"TPDYLA" ] ) {
			//tempTotal = tempTotal +  (SAFromArray * (RiderMortFromArray/1000.00) * (1.00 + HLPctFromArray/100.00) + HLFromArray + SAFromArray * [getOccLoading doubleValue]/1000.00)/12.00 * RiderAllocFromArray;
			tempTotal = tempTotal +  (SAFromArray * (RiderMortFromArray/1000.00) * (1.00 + HLPctFromArray/100.00)  + SAFromArray * (tempOccloading + HLFromArray)/1000.00)/12.00 * RiderAllocFromArray;
            
			if ([RidercodeFromArray isEqualToString:@"CIRD"]) {
				CIRDExist = TRUE;
			}
            
		}
        else if ([RidercodeFromArray isEqualToString:@"HCIR" ]) {
         
            if (RiderAllocFromArray > 0) {
                tempTotal = tempTotal + ((RiderMortFromArray * (RiderUnitsFromArray/ 2.00)) * (1 + HLPctFromArray / 100.00)) / 12.00 * (1.00 - [[UnitizeRiderCOIDiscount objectAtIndex:i] doubleValue]);
            }
            
		}
        else if ( [RidercodeFromArray isEqualToString:@"CCR" ] || [RidercodeFromArray isEqualToString:@"TCCR" ] || [RidercodeFromArray isEqualToString:@"MSR" ] ) {
			//tempTotal = tempTotal +  (SAFromArray * (RiderMortFromArray/1000.00) * (1.00 + HLPctFromArray/100.00) + HLFromArray + SAFromArray * [getOccLoading doubleValue]/1000.00)/12.00 * RiderAllocFromArray;
            if (aaPolicyYear > RiderTermFromArray) {
                tempTotal = tempTotal + 0.00;
            }
            else
            {
                if (aaPolicyYear > 15) {
                    tempTotal = tempTotal +  (SAFromArray * (RiderMortFromArray/1000.00) * (1.00 + HLPctFromArray/100.00)  + SAFromArray * (tempOccloading + HLFromArray)/1000.00)/12.00 * (1.00 - [[UnitizeRiderCOIDiscount objectAtIndex:i] doubleValue ]);
                    
                    //first level at 6
                    tempTotal = tempTotal +  ((SAFromArray * 0.25) * (RiderMortFromArray/1000.00) * (1.00 + HLPctFromArray/100.00)  + (SAFromArray * 0.25) * (tempOccloading + HLFromArray)/1000.00)/12.00 *
                    (1.00 - [self RiderDiscountRate:RidercodeFromArray andDiscountYear:(aaPolicyYear - (6 - 1)) andALB:Age + aaPolicyYear - 1]);
                    
                    //second level at 16
                    tempTotal = tempTotal +  ((SAFromArray * 0.5) * (RiderMortFromArray/1000.00) * (1.00 + HLPctFromArray/100.00)  + (SAFromArray * 0.5) * (tempOccloading + HLFromArray)/1000.00)/12.00 *
                    (1.00 - [self RiderDiscountRate:RidercodeFromArray andDiscountYear:(aaPolicyYear - (16 - 1)) andALB:Age + aaPolicyYear - 1]);
                }
                else if (aaPolicyYear > 5) {
                    tempTotal = tempTotal +  (SAFromArray * (RiderMortFromArray/1000.00) * (1.00 + HLPctFromArray/100.00)  + SAFromArray * (tempOccloading + HLFromArray)/1000.00)/12.00 * (1.00 - [[UnitizeRiderCOIDiscount objectAtIndex:i] doubleValue ]);
                    
                    tempTotal = tempTotal +  ((SAFromArray * 0.25) * (RiderMortFromArray/1000.00) * (1.00 + HLPctFromArray/100.00)  + (SAFromArray * 0.25) * (tempOccloading + HLFromArray)/1000.00)/12.00 *
                    (1.00 - [self RiderDiscountRate:RidercodeFromArray andDiscountYear:(aaPolicyYear - (6 - 1)) andALB:Age + aaPolicyYear - 1]);
                    
                }
                else
                {
                    tempTotal = tempTotal +  (SAFromArray * (RiderMortFromArray/1000.00) * (1.00 + HLPctFromArray/100.00)  + SAFromArray * (tempOccloading + HLFromArray)/1000.00)/12.00 * (1.00 - [[UnitizeRiderCOIDiscount objectAtIndex:i] doubleValue ]);
                }
            }
            
            
		}
        else if ([RidercodeFromArray isEqualToString:@"MDSR1" ] || [RidercodeFromArray isEqualToString:@"MDSR2" ] || [RidercodeFromArray isEqualToString:@"MDSR1-ALW" ] ||
                 [RidercodeFromArray isEqualToString:@"MDSR2-ALW" ] || [RidercodeFromArray isEqualToString:@"MDSR1-OT" ] || [RidercodeFromArray isEqualToString:@"MDSR2-OT" ]) {
/*
            tempTotal = tempTotal +  (RiderMortFromArray * (1 + HLPctFromArray/100.00) + SAFromArray * (tempOccloading + HLFromArray)/1000.00)/12.00 * 
                        (1.00 - [[UnitizeRiderCOIDiscount objectAtIndex:i] doubleValue ]);
  */
            tempTotal = tempTotal +  (RiderMortFromArray * (1 + HLPctFromArray/100.00) )/12.00 * (1.00 - [[UnitizeRiderCOIDiscount objectAtIndex:i] doubleValue ]);
            
		}
        else if ([RidercodeFromArray isEqualToString:@"LDYR" ]) {
			//tempTotal = tempTotal +  (SAFromArray * (RiderMortFromArray/1000.00) * (1.00 + HLPctFromArray/100.00) + HLFromArray + SAFromArray * [getOccLoading doubleValue]/1000.00)/12.00 * RiderAllocFromArray;
            if (aaPolicyYear > RiderTermFromArray) {
                tempTotal = tempTotal + 0.00;
            }
            else
            {
                if (aaPolicyYear > 15) {
                    tempTotal = tempTotal +  (SAFromArray * (RiderMortFromArray/1000.00) * (1.00 + HLPctFromArray/100.00)  + SAFromArray * (tempOccloading + HLFromArray)/1000.00)/12.00 * (1.00 - [[UnitizeRiderCOIDiscount objectAtIndex:i] doubleValue ]);
                    
                    //first level at 6
                    tempTotal = tempTotal +  ((SAFromArray * 0.25) * (RiderMortFromArray/1000.00) * (1.00 + HLPctFromArray/100.00)  + (SAFromArray * 0.25) * (tempOccloading + HLFromArray)/1000.00)/12.00 *
                    (1.00 - [self RiderDiscountRate:RidercodeFromArray andDiscountYear:(aaPolicyYear - (6 - 1)) andALB:Age + 6 - 1]);
                    
                    //second level at 16
                    tempTotal = tempTotal +  ((SAFromArray * 0.5) * (RiderMortFromArray/1000.00) * (1.00 + HLPctFromArray/100.00)  + (SAFromArray * 0.5) * (tempOccloading + HLFromArray)/1000.00)/12.00 *
                    (1.00 - [self RiderDiscountRate:RidercodeFromArray andDiscountYear:(aaPolicyYear - (16 - 1)) andALB:Age + 16 - 1]);
                }
                else if (aaPolicyYear > 5) {
                    tempTotal = tempTotal +  (SAFromArray * (RiderMortFromArray/1000.00) * (1.00 + HLPctFromArray/100.00)  + SAFromArray * (tempOccloading + HLFromArray)/1000.00)/12.00 * (1.00 - [[UnitizeRiderCOIDiscount objectAtIndex:i] doubleValue ]);
                    
                    tempTotal = tempTotal +  ((SAFromArray * 0.25) * (RiderMortFromArray/1000.00) * (1.00 + HLPctFromArray/100.00)  + (SAFromArray * 0.25) * (tempOccloading + HLFromArray)/1000.00)/12.00 *
                    (1.00 - [self RiderDiscountRate:RidercodeFromArray andDiscountYear:(aaPolicyYear - (6 - 1)) andALB:Age + (6 - 1)]);
                    
                }
                else
                {
                    tempTotal = tempTotal +  (SAFromArray * (RiderMortFromArray/1000.00) * (1.00 + HLPctFromArray/100.00)  + SAFromArray * (tempOccloading + HLFromArray)/1000.00)/12.00 *
                    (1.00 - [self RiderDiscountRate:RidercodeFromArray andDiscountYear:aaPolicyYear  andALB:Age + aaPolicyYear]);
                }
            }
            
            
		}
        else if ([RidercodeFromArray isEqualToString:@"LDYR-PCB" ] ) {
			//tempTotal = tempTotal +  (SAFromArray * (RiderMortFromArray/1000.00) * (1.00 + HLPctFromArray/100.00) + HLFromArray + SAFromArray * [getOccLoading doubleValue]/1000.00)/12.00 * RiderAllocFromArray;
            if (aaPolicyYear > RiderTermFromArray) {
                tempTotal = tempTotal + 0.00;
            }
            else
            {
                if (aaPolicyYear <= 1) {
                    tempTotal = tempTotal +  (SAFromArray * (RiderMortFromArray/1000.00) * (1.00 + HLPctFromArray/100.00)  + SAFromArray * (tempOccloading + HLFromArray)/1000.00)/12.00;
                }
                else
                {
                    tempTotal = tempTotal +  0.00;
                }
            }
            
            
		}
        else if ( [RidercodeFromArray isEqualToString:@"LDYR-BBB" ]) {
			//tempTotal = tempTotal +  (SAFromArray * (RiderMortFromArray/1000.00) * (1.00 + HLPctFromArray/100.00) + HLFromArray + SAFromArray * [getOccLoading doubleValue]/1000.00)/12.00 * RiderAllocFromArray;
            if (aaPolicyYear > RiderTermFromArray) {
                tempTotal = tempTotal + 0.00;
            }
            else
            {
                if (aaPolicyYear <= 8) {
                    tempTotal = tempTotal +  (SAFromArray * (RiderMortFromArray/1000.00) * (1.00 + HLPctFromArray/100.00)  + SAFromArray * (tempOccloading + HLFromArray)/1000.00)/12.00;
                }
                else
                {
                    tempTotal = tempTotal +  0.00;
                }
            }
            
            
		}

        else if ( [RidercodeFromArray isEqualToString:@"JCCR" ]) {
			//tempTotal = tempTotal +  (SAFromArray * (RiderMortFromArray/1000.00) * (1.00 + HLPctFromArray/100.00) + HLFromArray + SAFromArray * [getOccLoading doubleValue]/1000.00)/12.00 * RiderAllocFromArray;
            if (aaPolicyYear > RiderTermFromArray) {
                tempTotal = tempTotal + 0.00;
            }
            else
            {
                if (aaPolicyYear + Age > 30) {
                    tempTotal = tempTotal +  (SAFromArray * (RiderMortFromArray/1000.00) * (1.00 + HLPctFromArray/100.00)  + SAFromArray * (tempOccloading + HLFromArray)/1000.00)/12.00 * (1.00 - [[UnitizeRiderCOIDiscount objectAtIndex:i] doubleValue ]);
                    
                    //first level at 16
                    tempTotal = tempTotal +  ((SAFromArray * 0.25) * (RiderMortFromArray/1000.00) * (1.00 + HLPctFromArray/100.00)  + (SAFromArray * 0.25) * (tempOccloading + HLFromArray)/1000.00)/12.00 *
                    (1.00 - [self RiderDiscountRate:RidercodeFromArray andDiscountYear:(aaPolicyYear - (16 - Age)) andALB:16]);
                    
                    //second level at 30
                    tempTotal = tempTotal +  ((SAFromArray * 0.75) * (RiderMortFromArray/1000.00) * (1.00 + HLPctFromArray/100.00)  + (SAFromArray * 0.5) * (tempOccloading + HLFromArray)/1000.00)/12.00 *
                    (1.00 - [self RiderDiscountRate:RidercodeFromArray andDiscountYear:(aaPolicyYear - (30 - Age)) andALB:30]);
                }
                else if (aaPolicyYear + Age > 16) {
                    tempTotal = tempTotal +  (SAFromArray * (RiderMortFromArray/1000.00) * (1.00 + HLPctFromArray/100.00)  + SAFromArray * (tempOccloading + HLFromArray)/1000.00)/12.00 * (1.00 - [[UnitizeRiderCOIDiscount objectAtIndex:i] doubleValue ]);
                    
                    tempTotal = tempTotal +  ((SAFromArray * 0.25) * (RiderMortFromArray/1000.00) * (1.00 + HLPctFromArray/100.00)  + (SAFromArray * 0.25) * (tempOccloading + HLFromArray)/1000.00)/12.00 *
                    (1.00 - [self RiderDiscountRate:RidercodeFromArray andDiscountYear:(aaPolicyYear - (16 - Age)) andALB:Age + aaPolicyYear - 1]);
                    
                }
                else
                {
                    tempTotal = tempTotal +  (SAFromArray * (RiderMortFromArray/1000.00) * (1.00 + HLPctFromArray/100.00)  + SAFromArray * (tempOccloading + HLFromArray)/1000.00)/12.00 * (1.00 - [[UnitizeRiderCOIDiscount objectAtIndex:i] doubleValue ]);
                }
            }
            
            
		}
		else if ([RidercodeFromArray isEqualToString:@"WI"] || [RidercodeFromArray isEqualToString:@"PA" ] ||
				 [RidercodeFromArray isEqualToString:@"PA"] || [RidercodeFromArray isEqualToString:@"MR" ] ||
				 [RidercodeFromArray isEqualToString:@"TPDMLA"] || [RidercodeFromArray isEqualToString:@"DHI" ] ) {
			
			//tempTotal = tempTotal +  (SAFromArray * (RiderMortFromArray/100.00) * RiderAllocFromArray * (1 + HLPctFromArray/100.00) + HLFromArray + SAFromArray * [getOccLoading doubleValue ]/1000.00)/12.00;
			tempTotal = tempTotal +  (SAFromArray * (RiderMortFromArray/100.00)  * (1 + HLPctFromArray/100.00) + SAFromArray * (tempOccloading + HLFromArray)/1000.00)/12.00 * RiderAllocFromArray;
		}
		else if ([RidercodeFromArray isEqualToString:@"DCA"]) {
			//tempTotal = tempTotal +  ((10000.00 + SAFromArray) * (RiderMortFromArray/100.00) * RiderAllocFromArray * (1 + HLPctFromArray/100.00) + HLFromArray + (10000.00 + SAFromArray) * [getOccLoading doubleValue ]/1000.00)/12;
			tempTotal = tempTotal +  ((10000.00 + SAFromArray) * (RiderMortFromArray/100.00)  * (1 + HLPctFromArray/100.00) + (10000.00 + SAFromArray) * (tempOccloading + HLFromArray)/1000.00)/12 * RiderAllocFromArray;
		}
		else if ([RidercodeFromArray isEqualToString:@"HMM"] || [RidercodeFromArray isEqualToString:@"MG_IV"] ) {
			tempTotal = tempTotal +  (RiderMortFromArray * (1 + HLPctFromArray/100.00) + SAFromArray * (tempOccloading + HLFromArray)/1000.00)/12.00 * RiderAllocFromArray;
		}
		
	}
    
	return tempTotal;
}

-(double)RiderDiscountRate :(NSString *)Ridercode andDiscountYear :(int)aaDiscountYear andALB :(int)aaALB{
    sqlite3_stmt *statement;
	NSString *QuerySQL;
    double result = 0.00;
    
    /*
     Layer1 = 6;
     Layer2 = 16;
     if (aaDiscountYear >= Layer1) {
     tempPol = aaDiscountYear - Layer1 + 1;
     tempAge = Age + Layer1 - 1;
     }
     else if (aaPolicyYear >= Layer2) {
     tempPol = aaPolicyYear - Layer2 + 1;
     tempAge = Age + Layer2 - 1;
     }
     else
     {
     tempPol = aaPolicyYear;
     tempAge = Age + aaPolicyYear;
     }
     */
    
    if (sqlite3_open([UL_RatesDatabasePath UTF8String], &contactDB) == SQLITE_OK){
        if ([Ridercode isEqualToString:@"LDYR"]) {
                QuerySQL = [NSString stringWithFormat: @"select discount from ES_%@_COI_Discount where age = '%d' AND PolicyYearFrom = '%d'" , Ridercode,  aaALB, aaDiscountYear];
        }
        else if ([Ridercode isEqualToString:@"MDSR1"] || [Ridercode isEqualToString:@"MDSR2"] ) {
            QuerySQL = [NSString stringWithFormat: @"select discount from ES_MDSR_COI_Discount where age = '%d' AND PolicyYear = '%d'" ,  aaALB, aaDiscountYear];
        }
        else{
            QuerySQL = [NSString stringWithFormat: @"select discount from ES_%@_COI_Discount where age = '%d' AND PolicyYear = '%d'" , Ridercode,  aaALB, aaDiscountYear];
        }
        
        if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
            if (sqlite3_step(statement) == SQLITE_ROW) {
                result = sqlite3_column_double(statement, 0);
                
            }

            sqlite3_finalize(statement);
        }
     
        sqlite3_close(contactDB);
    }
    
    return result;
}

-(BOOL)ISRiderOccLoading : (NSString *)aaRiderCode{
	if ([aaRiderCode isEqualToString:@"CIWP"] || [aaRiderCode isEqualToString:@"HMM"] || [aaRiderCode isEqualToString:@"MG_IV"] || [aaRiderCode isEqualToString:@"ACIR"] ||
		[aaRiderCode isEqualToString:@"DHI"] || [aaRiderCode isEqualToString:@"TPDMLA"] || [aaRiderCode isEqualToString:@"MR"] || [aaRiderCode isEqualToString:@"PA"] ||
		[aaRiderCode isEqualToString:@"WI"] || [aaRiderCode isEqualToString:@"DCA"] || [aaRiderCode isEqualToString:@"CCR"] || [aaRiderCode isEqualToString:@"JCCR"] ||
        [aaRiderCode isEqualToString:@"TCCR"] || [aaRiderCode isEqualToString:@"MSR"] || [aaRiderCode isEqualToString:@"LDYR"] || [aaRiderCode isEqualToString:@"MDSR1"] ||
        [aaRiderCode isEqualToString:@"MDSR2"]) {
		return FALSE;
	}
	else{
		return TRUE;
	}
}

-(double)ReturnRiderPolicyFee: (int)aaPolicyYear{
	//sqlite3_stmt *statement;
	//NSString *QuerySQL;
    
	/*
     if (sqlite3_open([databasePath UTF8String], &contactDB) == SQLITE_OK){
     QuerySQL = [NSString stringWithFormat: @"Select * From UL_Rider_Details Where sino = '%@' AND ridercode in ('CIRD')", SINo];
     
     //NSLog(@"%@", QuerySQL);
     if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
     if (sqlite3_step(statement) == SQLITE_ROW) {
     cird
     }
     sqlite3_finalize(statement);
     }
     
     sqlite3_close(contactDB);
     }
	 */
	if (CIRDExist == TRUE) {
		if (aaPolicyYear <= 10) {
			return 3.00;
		}
		else{
			return 0.00;
		}
	}
	else{
		return 0.00;
	}
}

-(double)ReturnBasicCommisionFee: (int)aaPolicyYear{
	sqlite3_stmt *statement;
	NSString *QuerySQL;
	double value = 0.00;
	
    if (sqlite3_open([UL_RatesDatabasePath UTF8String], &contactDB) == SQLITE_OK){
        QuerySQL = [NSString stringWithFormat: @"Select Rate From ES_Sys_Basic_Commission Where Year = %d", aaPolicyYear];
        
        //NSLog(@"%@", QuerySQL);
        if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
            if (sqlite3_step(statement) == SQLITE_ROW) {
                value = sqlite3_column_double(statement, 0);
            }
            else{
                value = 0.00;
            }
            sqlite3_finalize(statement);
		}
		sqlite3_close(contactDB);
    }
    
	
	return value;
}

-(double)ReturnRiderCommisionFee: (int)aaPolicyYear{
	sqlite3_stmt *statement;
	NSString *QuerySQL;
	double value = 0.00;
	double TotalValue = 0.00;
	
	if (sqlite3_open([UL_RatesDatabasePath UTF8String], &contactDB) == SQLITE_OK){
		for (int i =0; i < [UnitizeRiderCode count]; i++) {

                QuerySQL = [NSString stringWithFormat: @"Select Rate From ES_Sys_Rider_Commission Where PolYear = %d AND RiderTerm = '%@' ",
                            aaPolicyYear, [UnitizeRiderTerm objectAtIndex:i]];
                

			
            //NSLog(@"%@", QuerySQL);
            if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
                if (sqlite3_step(statement) == SQLITE_ROW) {
                    value = sqlite3_column_double(statement, 0);
                }
                else{
                    value = 0.00;
                }
                sqlite3_finalize(statement);
            }

			
            if ([[UnitizeRiderCode objectAtIndex:i] isEqualToString:@"CCR"] || [[UnitizeRiderCode objectAtIndex:i] isEqualToString:@"TCCR"] || [[UnitizeRiderCode objectAtIndex:i] isEqualToString:@"LDYR"] ||
                [[UnitizeRiderCode objectAtIndex:i] isEqualToString:@"MSR"]) {
                double PremAtLayer1 = [[UnitizeRiderPremium2 objectAtIndex:i] doubleValue] - [[UnitizeRiderPremium objectAtIndex:i] doubleValue];
                double PremAtLayer2 = [[UnitizeRiderPremium3 objectAtIndex:i] doubleValue] - [[UnitizeRiderPremium2 objectAtIndex:i] doubleValue];
                
                if (aaPolicyYear > 15) {
                    TotalValue = TotalValue + ([[UnitizeRiderPremium objectAtIndex:i] doubleValue ] * value)/100.00;

                    QuerySQL = [NSString stringWithFormat: @"Select Rate From ES_Sys_Rider_Commission Where PolYear = %d AND RiderTerm = '%d' ",
                                    aaPolicyYear - 6 + 1, [[UnitizeRiderTerm objectAtIndex:i] intValue] - 5];
                    
                    if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
                        if (sqlite3_step(statement) == SQLITE_ROW) {
                            value = sqlite3_column_double(statement, 0);
                        }
                        else{
                            value = 0.00;
                        }
                        sqlite3_finalize(statement);
                    }
                    TotalValue = TotalValue + (PremAtLayer1 * value)/100.00;
                    
                    QuerySQL = [NSString stringWithFormat: @"Select Rate From ES_Sys_Rider_Commission Where PolYear = %d AND RiderTerm = '%d' ",
                                aaPolicyYear - 16 + 1, [[UnitizeRiderTerm objectAtIndex:i] intValue] - 15];
                    
                    if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
                        if (sqlite3_step(statement) == SQLITE_ROW) {
                            value = sqlite3_column_double(statement, 0);
                        }
                        else{
                            value = 0.00;
                        }
                        sqlite3_finalize(statement);
                    }
                    TotalValue = TotalValue + (PremAtLayer2 * value)/100.00;
                }
                else if (aaPolicyYear > 5){
                    TotalValue = TotalValue + ([[UnitizeRiderPremium objectAtIndex:i] doubleValue ] * value)/100.00;
                    
                    QuerySQL = [NSString stringWithFormat: @"Select Rate From ES_Sys_Rider_Commission Where PolYear = %d AND RiderTerm = '%d' ",
                                aaPolicyYear - 6 + 1, [[UnitizeRiderTerm objectAtIndex:i] intValue] - 5];
                    
                    if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
                        if (sqlite3_step(statement) == SQLITE_ROW) {
                            value = sqlite3_column_double(statement, 0);
                        }
                        else{
                            value = 0.00;
                        }
                        sqlite3_finalize(statement);
                    }
                    TotalValue = TotalValue + (PremAtLayer1 * value)/100.00;
                    
                }
                else{
                    TotalValue = TotalValue + ([[UnitizeRiderPremium objectAtIndex:i] doubleValue ] * value)/100.00;
                }
                
            }
            else if ([[UnitizeRiderCode objectAtIndex:i] isEqualToString:@"LDYR-PCB"]) {
                
                if (aaPolicyYear <= 1){
                    TotalValue = TotalValue + ([[UnitizeRiderPremium objectAtIndex:i] doubleValue ] * 3.75)/100.00;
                }
                else{
                    TotalValue = TotalValue + 0.00;
                }
                
                
            }
            else if ( [[UnitizeRiderCode objectAtIndex:i] isEqualToString:@"LDYR-BBB"]) {
                
                if (aaPolicyYear <= 1){
                    TotalValue = TotalValue + ([[UnitizeRiderPremium objectAtIndex:i] doubleValue ] * 2)/100.00;
                }
                else
                {
                    TotalValue = TotalValue + 0.00;
                }
                
            }
            else if ([[UnitizeRiderCode objectAtIndex:i] isEqualToString:@"JCCR"] ) {
                double PremAtLayer1 = [[UnitizeRiderPremium2 objectAtIndex:i] doubleValue] - [[UnitizeRiderPremium objectAtIndex:i] doubleValue];
                double PremAtLayer2 = [[UnitizeRiderPremium3 objectAtIndex:i] doubleValue] - [[UnitizeRiderPremium2 objectAtIndex:i] doubleValue];
                
                if (aaPolicyYear + Age > 30) {
                    TotalValue = TotalValue + ([[UnitizeRiderPremium objectAtIndex:i] doubleValue ] * value)/100.00;
                    
                    QuerySQL = [NSString stringWithFormat: @"Select Rate From ES_Sys_Rider_Commission Where PolYear = %d AND RiderTerm = '%d' ",
                                aaPolicyYear - (16 - Age), [[UnitizeRiderTerm objectAtIndex:i] intValue] - (16 - Age)];
                    
                    if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
                        if (sqlite3_step(statement) == SQLITE_ROW) {
                            value = sqlite3_column_double(statement, 0);
                        }
                        else{
                            value = 0.00;
                        }
                        sqlite3_finalize(statement);
                    }
                    TotalValue = TotalValue + (PremAtLayer1 * value)/100.00;
                    
                    QuerySQL = [NSString stringWithFormat: @"Select Rate From ES_Sys_Rider_Commission Where PolYear = %d AND RiderTerm = '%d' ",
                                aaPolicyYear - (30 - Age), [[UnitizeRiderTerm objectAtIndex:i] intValue] - (30 - Age)];
                    
                    if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
                        if (sqlite3_step(statement) == SQLITE_ROW) {
                            value = sqlite3_column_double(statement, 0);
                        }
                        else{
                            value = 0.00;
                        }
                        sqlite3_finalize(statement);
                    }
                    TotalValue = TotalValue + (PremAtLayer2 * value)/100.00;
                }
                else if (aaPolicyYear + Age > 16){
                    TotalValue = TotalValue + ([[UnitizeRiderPremium objectAtIndex:i] doubleValue ] * value)/100.00;
                    
                    QuerySQL = [NSString stringWithFormat: @"Select Rate From ES_Sys_Rider_Commission Where PolYear = %d AND RiderTerm = '%d' ",
                                aaPolicyYear - (16 - Age), [[UnitizeRiderTerm objectAtIndex:i] intValue] - (16 - Age)];
                    
                    if(sqlite3_prepare_v2(contactDB, [QuerySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
                        if (sqlite3_step(statement) == SQLITE_ROW) {
                            value = sqlite3_column_double(statement, 0);
                        }
                        else{
                            value = 0.00;
                        }
                        sqlite3_finalize(statement);
                    }
                    TotalValue = TotalValue + (PremAtLayer1 * value)/100.00;
                    
                }
                else{
                    TotalValue = TotalValue + ([[UnitizeRiderPremium objectAtIndex:i] doubleValue ] * value)/100.00;
                }
                
            }
            else{
                    TotalValue = TotalValue + ([[UnitizeRiderPremium objectAtIndex:i] doubleValue ] * value)/100.00;
            }
			
		}
		
		sqlite3_close(contactDB);
	}
	
	
	return TotalValue;
}



-(double)ReturnVUCashHigh{
	//double VUCashHighS = pow((1.00 + [self ReturnVUCashInstHigh:@""]), 1.00/12.00) - 1.00 ;
    double VUCashHighS = pow((1.00 + [self ReturnVUCashInstHigh:@"A"]), 1.00/12.00) - 1.00 ;
	double temp = (pow((1.00 + VUCashHighS), 12.00) - 1.00)/(VUCashHighS / (1.00 + VUCashHighS));
	return temp;
}

-(double)ReturnVUCashMedian{
	//double VUCashMedianS = pow((1.00 + [self ReturnVUCashInstMedian:@""]), 1.00/12.00) - 1.00 ;
	double VUCashMedianS = pow((1.00 + [self ReturnVUCashInstMedian:@"A"]), 1.00/12.00) - 1.00 ;
	return (pow((1.00 + VUCashMedianS), 12.00) - 1.00)/(VUCashMedianS / (1.00 + VUCashMedianS));
}

-(double)ReturnVUCashLow{
	//double VUCashLowS = pow((1.00 + [self ReturnVUCashInstLow:@""]), 1.00/12.00) - 1.00 ;
	double VUCashLowS = pow((1.00 + [self ReturnVUCashInstLow:@"A"]), 1.00/12.00) - 1.00 ;
	return (pow((1.00 + VUCashLowS), 12) - 1)/(VUCashLowS / (1.00 + VUCashLowS));
}

-(double)ReturnVU2023InstHigh: (NSString *)aaMOP{
	if ([aaMOP isEqualToString:@"A"]) {
		return 0.0532298;
	}
	else{
		return 0.00;
	}
}

-(double)ReturnVU2025InstHigh: (NSString *)aaMOP{
	if ([aaMOP isEqualToString:@"A"]) {
		return 0.0588615;
	}
	else{
		return 0.00;
	}
}

-(double)ReturnVU2028InstHigh: (NSString *)aaMOP{
	if ([aaMOP isEqualToString:@"A"]) {
		return 0.0739896;
	}
	else{
		return 0.00;
	}
}

-(double)ReturnVU2030InstHigh: (NSString *)aaMOP{
	if ([aaMOP isEqualToString:@"A"]) {
		return 0.077761;
	}
	else{
		return 0.00;
	}
}

-(double)ReturnVU2035InstHigh: (NSString *)aaMOP{
	if ([aaMOP isEqualToString:@"A"]) {
		return 0.0817997;
	}
	else{
		return 0.00;
	}
}

-(double)ReturnVU2023InstMedian: (NSString *)aaMOP{
	if ([aaMOP isEqualToString:@"A"]) {
		return 0.0290813;
	}
	else{
		return 0;
	}
}

-(double)ReturnVU2025InstMedian: (NSString *)aaMOP{
	if ([aaMOP isEqualToString:@"A"]) {
		return 0.0340098;
	}
	else{
		return 0;
	}
}

-(double)ReturnVU2028InstMedian: (NSString *)aaMOP{
	if ([aaMOP isEqualToString:@"A"]) {
		return 0.0389747;
	}
	else{
		return 0;
	}
}

-(double)ReturnVU2030InstMedian: (NSString *)aaMOP{
	if ([aaMOP isEqualToString:@"A"]) {
		return 0.0413285;
	}
	else{
		return 0;
	}
}

-(double)ReturnVU2035InstMedian: (NSString *)aaMOP{
	if ([aaMOP isEqualToString:@"A"]) {
		return 0.0439735;
	}
	else{
		return 0;
	}
}

-(double)ReturnVU2023InstLow: (NSString *)aaMOP{
	if ([aaMOP isEqualToString:@"A"]) {
		return 0.0113432;
	}
	else{
		return 0;
	}
}

-(double)ReturnVU2025InstLow: (NSString *)aaMOP{
	if ([aaMOP isEqualToString:@"A"]) {
		return 0.01146;
	}
	else{
		return 0;
	}
}

-(double)ReturnVU2028InstLow: (NSString *)aaMOP{
	if ([aaMOP isEqualToString:@"A"]) {
		return 0.0121202;
	}
	else{
		return 0;
	}
}

-(double)ReturnVU2030InstLow: (NSString *)aaMOP{
	if ([aaMOP isEqualToString:@"A"]) {
		return 0.0121884;
	}
	else{
		return 0;
	}
}

-(double)ReturnVU2035InstLow: (NSString *)aaMOP{
	if ([aaMOP isEqualToString:@"A"]) {
		return 0.0122828;
	}
	else{
		return 0;
	}
}

-(void)CalcInst: (NSString *)aaMOP{
	sqlite3_stmt *statement;
	NSString *querySQL;
	NSString *MOP;
	
	if ([aaMOP isEqualToString:@""]) {
		MOP = strBumpMode;
	} else {
		MOP = aaMOP;
	}
	
	if (sqlite3_open([UL_RatesDatabasePath UTF8String], &contactDB) == SQLITE_OK){
		
		
        if ([MOP isEqualToString:@"A"]) {
            querySQL = [NSString stringWithFormat:@"Select Year_Bull_Rate From ES_Sys_Fund_Growth_Rate WHERE Fund_Term = '13' AND Fund_Year = '1'"];
        }
        else if ([MOP isEqualToString:@"S"]) {
            querySQL = [NSString stringWithFormat:@"Select Half_Year_Bull_Rate From ES_Sys_Fund_Growth_Rate WHERE Fund_Term = '13' AND Fund_Year = '1'"];
        }
        else if ([MOP isEqualToString:@"Q"]) {
            querySQL = [NSString stringWithFormat:@"Select Quarter_Bull_Rate From ES_Sys_Fund_Growth_Rate WHERE Fund_Term = '13' AND Fund_Year = '1'"];
        }
        else {
            querySQL = [NSString stringWithFormat:@"Select Month_Bull_Rate From ES_Sys_Fund_Growth_Rate WHERE Fund_Term = '13' AND Fund_Year = '1'"];
        }
        
        if(sqlite3_prepare_v2(contactDB, [querySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
            if (sqlite3_step(statement) == SQLITE_ROW){
                VU2023InstHigh = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 0)] doubleValue ];
            }
            sqlite3_finalize(statement);
        }
		
		
        if ([MOP isEqualToString:@"A"]) {
            querySQL = [NSString stringWithFormat:@"Select Year_Flat_Rate From ES_Sys_Fund_Growth_Rate WHERE Fund_Term = '13' AND Fund_Year = '1'"];
        }
        else if ([MOP isEqualToString:@"S"]) {
            querySQL = [NSString stringWithFormat:@"Select Half_Year_Flat_Rate From ES_Sys_Fund_Growth_Rate WHERE Fund_Term = '13' AND Fund_Year = '1'"];
        }
        else if ([MOP isEqualToString:@"Q"]) {
            querySQL = [NSString stringWithFormat:@"Select Quarter_Flat_Rate From ES_Sys_Fund_Growth_Rate WHERE Fund_Term = '13' AND Fund_Year = '1'"];
        }
        else {
            querySQL = [NSString stringWithFormat:@"Select Month_Flat_Rate From ES_Sys_Fund_Growth_Rate WHERE Fund_Term = '13' AND Fund_Year = '1'"];
        }
        
        if(sqlite3_prepare_v2(contactDB, [querySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
            if (sqlite3_step(statement) == SQLITE_ROW){
                VU2023InstMedian = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 0)] doubleValue ];
            }
            sqlite3_finalize(statement);
        }
		
		
		
        if ([MOP isEqualToString:@"A"]) {
            querySQL = [NSString stringWithFormat:@"Select Year_Bear_Rate From ES_Sys_Fund_Growth_Rate WHERE Fund_Term = '13' AND Fund_Year = '1'"];
        }
        else if ([MOP isEqualToString:@"S"]) {
            querySQL = [NSString stringWithFormat:@"Select Half_Year_Bear_Rate From ES_Sys_Fund_Growth_Rate WHERE Fund_Term = '13' AND Fund_Year = '1'"];
        }
        else if ([MOP isEqualToString:@"Q"]) {
            querySQL = [NSString stringWithFormat:@"Select Quarter_Bear_Rate From ES_Sys_Fund_Growth_Rate WHERE Fund_Term = '13' AND Fund_Year = '1'"];
        }
        else {
            querySQL = [NSString stringWithFormat:@"Select Month_Bear_Rate From ES_Sys_Fund_Growth_Rate WHERE Fund_Term = '13' AND Fund_Year = '1'"];
        }
        
        if(sqlite3_prepare_v2(contactDB, [querySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
            if (sqlite3_step(statement) == SQLITE_ROW){
                VU2023InstLow = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 0)] doubleValue ];
            }
            sqlite3_finalize(statement);
        }
		
		
		
		//------------
		
        if ([MOP isEqualToString:@"A"]) {
            querySQL = [NSString stringWithFormat:@"Select Year_Bull_Rate From ES_Sys_Fund_Growth_Rate WHERE Fund_Term = '15' AND Fund_Year = '1'"];
        }
        else if ([MOP isEqualToString:@"S"]) {
            querySQL = [NSString stringWithFormat:@"Select Half_Year_Bull_Rate From ES_Sys_Fund_Growth_Rate WHERE Fund_Term = '15' AND Fund_Year = '1'"];
        }
        else if ([MOP isEqualToString:@"Q"]) {
            querySQL = [NSString stringWithFormat:@"Select Quarter_Bull_Rate From ES_Sys_Fund_Growth_Rate WHERE Fund_Term = '15' AND Fund_Year = '1'"];
        }
        else {
            querySQL = [NSString stringWithFormat:@"Select Month_Bull_Rate From ES_Sys_Fund_Growth_Rate WHERE Fund_Term = '15' AND Fund_Year = '1'"];
        }
        
        if(sqlite3_prepare_v2(contactDB, [querySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
            if (sqlite3_step(statement) == SQLITE_ROW){
                VU2025InstHigh = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 0)] doubleValue ];
            }
            sqlite3_finalize(statement);
        }
		
		
        if ([MOP isEqualToString:@"A"]) {
            querySQL = [NSString stringWithFormat:@"Select Year_Flat_Rate From ES_Sys_Fund_Growth_Rate WHERE Fund_Term = '15' AND Fund_Year = '1'"];
        }
        else if ([MOP isEqualToString:@"S"]) {
            querySQL = [NSString stringWithFormat:@"Select Half_Year_Flat_Rate From ES_Sys_Fund_Growth_Rate WHERE Fund_Term = '15' AND Fund_Year = '1'"];
        }
        else if ([MOP isEqualToString:@"Q"]) {
            querySQL = [NSString stringWithFormat:@"Select Quarter_Flat_Rate From ES_Sys_Fund_Growth_Rate WHERE Fund_Term = '15' AND Fund_Year = '1'"];
        }
        else {
            querySQL = [NSString stringWithFormat:@"Select Month_Flat_Rate From ES_Sys_Fund_Growth_Rate WHERE Fund_Term = '15' AND Fund_Year = '1'"];
        }
        
        if(sqlite3_prepare_v2(contactDB, [querySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
            if (sqlite3_step(statement) == SQLITE_ROW){
                VU2025InstMedian = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 0)] doubleValue ];
            }
            sqlite3_finalize(statement);
        }
		
		
        if ([MOP isEqualToString:@"A"]) {
            querySQL = [NSString stringWithFormat:@"Select Year_Bear_Rate From ES_Sys_Fund_Growth_Rate WHERE Fund_Term = '15' AND Fund_Year = '1'"];
        }
        else if ([MOP isEqualToString:@"S"]) {
            querySQL = [NSString stringWithFormat:@"Select Half_Year_Bear_Rate From ES_Sys_Fund_Growth_Rate WHERE Fund_Term = '15' AND Fund_Year = '1'"];
        }
        else if ([MOP isEqualToString:@"Q"]) {
            querySQL = [NSString stringWithFormat:@"Select Quarter_Bear_Rate From ES_Sys_Fund_Growth_Rate WHERE Fund_Term = '15' AND Fund_Year = '1'"];
        }
        else {
            querySQL = [NSString stringWithFormat:@"Select Month_Bear_Rate From ES_Sys_Fund_Growth_Rate WHERE Fund_Term = '15' AND Fund_Year = '1'"];
        }
        
        if(sqlite3_prepare_v2(contactDB, [querySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
            if (sqlite3_step(statement) == SQLITE_ROW){
                VU2025InstLow = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 0)] doubleValue ];
            }
            sqlite3_finalize(statement);
        }
		
		//-----------
		
		
        if ([MOP isEqualToString:@"A"]) {
            querySQL = [NSString stringWithFormat:@"Select Year_Bull_Rate From ES_Sys_Fund_Growth_Rate WHERE Fund_Term = '18' AND Fund_Year = '1'"];
        }
        else if ([MOP isEqualToString:@"S"]) {
            querySQL = [NSString stringWithFormat:@"Select Half_Year_Bull_Rate From ES_Sys_Fund_Growth_Rate WHERE Fund_Term = '18' AND Fund_Year = '1'"];
        }
        else if ([MOP isEqualToString:@"Q"]) {
            querySQL = [NSString stringWithFormat:@"Select Quarter_Bull_Rate From ES_Sys_Fund_Growth_Rate WHERE Fund_Term = '18' AND Fund_Year = '1'"];
        }
        else {
            querySQL = [NSString stringWithFormat:@"Select Month_Bull_Rate From ES_Sys_Fund_Growth_Rate WHERE Fund_Term = '18' AND Fund_Year = '1'"];
        }
        
        if(sqlite3_prepare_v2(contactDB, [querySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
            if (sqlite3_step(statement) == SQLITE_ROW){
                VU2028InstHigh = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 0)] doubleValue ];
            }
            sqlite3_finalize(statement);
        }
		
		
        if ([MOP isEqualToString:@"A"]) {
            querySQL = [NSString stringWithFormat:@"Select Year_Flat_Rate From ES_Sys_Fund_Growth_Rate WHERE Fund_Term = '18' AND Fund_Year = '1'"];
        }
        else if ([MOP isEqualToString:@"S"]) {
            querySQL = [NSString stringWithFormat:@"Select Half_Year_Flat_Rate From ES_Sys_Fund_Growth_Rate WHERE Fund_Term = '18' AND Fund_Year = '1'"];
        }
        else if ([MOP isEqualToString:@"Q"]) {
            querySQL = [NSString stringWithFormat:@"Select Quarter_Flat_Rate From ES_Sys_Fund_Growth_Rate WHERE Fund_Term = '18' AND Fund_Year = '1'"];
        }
        else {
            querySQL = [NSString stringWithFormat:@"Select Month_Flat_Rate From ES_Sys_Fund_Growth_Rate WHERE Fund_Term = '18' AND Fund_Year = '1'"];
        }
        
        if(sqlite3_prepare_v2(contactDB, [querySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
            if (sqlite3_step(statement) == SQLITE_ROW){
                VU2028InstMedian = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 0)] doubleValue ];
            }
            sqlite3_finalize(statement);
        }
		
		
		
        if ([MOP isEqualToString:@"A"]) {
            querySQL = [NSString stringWithFormat:@"Select Year_Bear_Rate From ES_Sys_Fund_Growth_Rate WHERE Fund_Term = '18' AND Fund_Year = '1'"];
        }
        else if ([MOP isEqualToString:@"S"]) {
            querySQL = [NSString stringWithFormat:@"Select Half_Year_Bear_Rate From ES_Sys_Fund_Growth_Rate WHERE Fund_Term = '18' AND Fund_Year = '1'"];
        }
        else if ([MOP isEqualToString:@"Q"]) {
            querySQL = [NSString stringWithFormat:@"Select Quarter_Bear_Rate From ES_Sys_Fund_Growth_Rate WHERE Fund_Term = '18' AND Fund_Year = '1'"];
        }
        else {
            querySQL = [NSString stringWithFormat:@"Select Month_Bear_Rate From ES_Sys_Fund_Growth_Rate WHERE Fund_Term = '18' AND Fund_Year = '1'"];
        }
        
        
        if(sqlite3_prepare_v2(contactDB, [querySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
            if (sqlite3_step(statement) == SQLITE_ROW){
                VU2028InstLow = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 0)] doubleValue ];
            }
            sqlite3_finalize(statement);
        }
		
		//--------
		
		
        if ([MOP isEqualToString:@"A"]) {
            querySQL = [NSString stringWithFormat:@"Select Year_Bull_Rate From ES_Sys_Fund_Growth_Rate WHERE Fund_Term = '20' AND Fund_Year = '1'"];
        }
        else if ([MOP isEqualToString:@"S"]) {
            querySQL = [NSString stringWithFormat:@"Select Half_Year_Bull_Rate From ES_Sys_Fund_Growth_Rate WHERE Fund_Term = '20' AND Fund_Year = '1'"];
        }
        else if ([MOP isEqualToString:@"Q"]) {
            querySQL = [NSString stringWithFormat:@"Select Quarter_Bull_Rate From ES_Sys_Fund_Growth_Rate WHERE Fund_Term = '20' AND Fund_Year = '1'"];
        }
        else {
            querySQL = [NSString stringWithFormat:@"Select Month_Bull_Rate From ES_Sys_Fund_Growth_Rate WHERE Fund_Term = '20' AND Fund_Year = '1'"];
        }
        
        if(sqlite3_prepare_v2(contactDB, [querySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
            if (sqlite3_step(statement) == SQLITE_ROW){
                VU2030InstHigh = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 0)] doubleValue ];
            }
            sqlite3_finalize(statement);
        }
		
		
        if ([MOP isEqualToString:@"A"]) {
            querySQL = [NSString stringWithFormat:@"Select Year_Flat_Rate From ES_Sys_Fund_Growth_Rate WHERE Fund_Term = '20' AND Fund_Year = '1'"];
        }
        else if ([MOP isEqualToString:@"S"]) {
            querySQL = [NSString stringWithFormat:@"Select Half_Year_Flat_Rate From ES_Sys_Fund_Growth_Rate WHERE Fund_Term = '20' AND Fund_Year = '1'"];
        }
        else if ([MOP isEqualToString:@"Q"]) {
            querySQL = [NSString stringWithFormat:@"Select Quarter_Flat_Rate From ES_Sys_Fund_Growth_Rate WHERE Fund_Term = '20' AND Fund_Year = '1'"];
        }
        else {
            querySQL = [NSString stringWithFormat:@"Select Month_Flat_Rate From ES_Sys_Fund_Growth_Rate WHERE Fund_Term = '20' AND Fund_Year = '1'"];
        }
        
        if(sqlite3_prepare_v2(contactDB, [querySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
            if (sqlite3_step(statement) == SQLITE_ROW){
                VU2030InstMedian = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 0)] doubleValue ];
            }
            sqlite3_finalize(statement);
        }
		
		
        if ([MOP isEqualToString:@"A"]) {
            querySQL = [NSString stringWithFormat:@"Select Year_Bear_Rate From ES_Sys_Fund_Growth_Rate WHERE Fund_Term = '20' AND Fund_Year = '1'"];
        }
        else if ([MOP isEqualToString:@"S"]) {
            querySQL = [NSString stringWithFormat:@"Select Half_Year_Bear_Rate From ES_Sys_Fund_Growth_Rate WHERE Fund_Term = '20' AND Fund_Year = '1'"];
        }
        else if ([MOP isEqualToString:@"Q"]) {
            querySQL = [NSString stringWithFormat:@"Select Quarter_Bear_Rate From ES_Sys_Fund_Growth_Rate WHERE Fund_Term = '20' AND Fund_Year = '1'"];
        }
        else {
            querySQL = [NSString stringWithFormat:@"Select Month_Bear_Rate From ES_Sys_Fund_Growth_Rate WHERE Fund_Term = '20' AND Fund_Year = '1'"];
        }
        
        if(sqlite3_prepare_v2(contactDB, [querySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
            if (sqlite3_step(statement) == SQLITE_ROW){
                VU2030InstLow = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 0)] doubleValue ];
            }
            sqlite3_finalize(statement);
        }
		
		// ----------
		
		
		
        if ([MOP isEqualToString:@"A"]) {
            querySQL = [NSString stringWithFormat:@"Select Year_Bull_Rate From ES_Sys_Fund_Growth_Rate WHERE Fund_Term = '25' AND Fund_Year = '1'"];
        }
        else if ([MOP isEqualToString:@"S"]) {
            querySQL = [NSString stringWithFormat:@"Select Half_Year_Bull_Rate From ES_Sys_Fund_Growth_Rate WHERE Fund_Term = '25' AND Fund_Year = '1'"];
        }
        else if ([MOP isEqualToString:@"Q"]) {
            querySQL = [NSString stringWithFormat:@"Select Quarter_Bull_Rate From ES_Sys_Fund_Growth_Rate WHERE Fund_Term = '25' AND Fund_Year = '1'"];
        }
        else {
            querySQL = [NSString stringWithFormat:@"Select Month_Bull_Rate From ES_Sys_Fund_Growth_Rate WHERE Fund_Term = '25' AND Fund_Year = '1'"];
        }
        
        if(sqlite3_prepare_v2(contactDB, [querySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
            if (sqlite3_step(statement) == SQLITE_ROW){
                VU2035InstHigh = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 0)] doubleValue ];
            }
            sqlite3_finalize(statement);
        }
		
		
        if ([MOP isEqualToString:@"A"]) {
            querySQL = [NSString stringWithFormat:@"Select Year_Flat_Rate From ES_Sys_Fund_Growth_Rate WHERE Fund_Term = '25' AND Fund_Year = '1'"];
        }
        else if ([MOP isEqualToString:@"S"]) {
            querySQL = [NSString stringWithFormat:@"Select Half_Year_Flat_Rate From ES_Sys_Fund_Growth_Rate WHERE Fund_Term = '25' AND Fund_Year = '1'"];
        }
        else if ([MOP isEqualToString:@"Q"]) {
            querySQL = [NSString stringWithFormat:@"Select Quarter_Flat_Rate From ES_Sys_Fund_Growth_Rate WHERE Fund_Term = '25' AND Fund_Year = '1'"];
        }
        else {
            querySQL = [NSString stringWithFormat:@"Select Month_Flat_Rate From ES_Sys_Fund_Growth_Rate WHERE Fund_Term = '25' AND Fund_Year = '1'"];
        }
        
        if(sqlite3_prepare_v2(contactDB, [querySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
            if (sqlite3_step(statement) == SQLITE_ROW){
                VU2035InstMedian = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 0)] doubleValue ];
            }
            sqlite3_finalize(statement);
        }
		
		
        if ([MOP isEqualToString:@"A"]) {
            querySQL = [NSString stringWithFormat:@"Select Year_Bear_Rate From ES_Sys_Fund_Growth_Rate WHERE Fund_Term = '25' AND Fund_Year = '1'"];
        }
        else if ([MOP isEqualToString:@"S"]) {
            querySQL = [NSString stringWithFormat:@"Select Half_Year_Bear_Rate From ES_Sys_Fund_Growth_Rate WHERE Fund_Term = '25' AND Fund_Year = '1'"];
        }
        else if ([MOP isEqualToString:@"Q"]) {
            querySQL = [NSString stringWithFormat:@"Select Quarter_Bear_Rate From ES_Sys_Fund_Growth_Rate WHERE Fund_Term = '25' AND Fund_Year = '1'"];
        }
        else {
            querySQL = [NSString stringWithFormat:@"Select Month_Bear_Rate From ES_Sys_Fund_Growth_Rate WHERE Fund_Term = '25' AND Fund_Year = '1'"];
        }
        
        if(sqlite3_prepare_v2(contactDB, [querySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
            if (sqlite3_step(statement) == SQLITE_ROW){
                VU2035InstLow = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 0)] doubleValue ];
            }
            sqlite3_finalize(statement);
        }
		
		sqlite3_close(contactDB);
	}
}

-(double)CalculateInst: (NSString *)aaMOP andFund:(NSString *)aaFund andLowMediumHigh:(NSString *)aaLowMediumHigh{
	sqlite3_stmt *statement;
	NSString *querySQL;
	NSString *MOP;
	
	if ([aaMOP isEqualToString:@""]) {
		MOP = strBumpMode;
	} else {
		MOP = aaMOP;
	}
	
	NSString *FundTerm;
	NSString *MOPRate;
	double tempResult = 0.00;
	
	if (sqlite3_open([UL_RatesDatabasePath UTF8String], &contactDB) == SQLITE_OK){
		
		if ([aaFund isEqualToString:@"2023"]) {
			FundTerm = @"13";
		}
		else if ([aaFund isEqualToString:@"2025"]) {
			FundTerm = @"15";
		}
		else if ([aaFund isEqualToString:@"2028"]) {
			FundTerm = @"18";
		}
		else if ([aaFund isEqualToString:@"2030"]) {
			FundTerm = @"20";
		}
		else {
			FundTerm = @"25";
		}
		
		if ([aaLowMediumHigh isEqualToString:@"H"]) {
			if ([aaMOP isEqualToString:@"A"]) {
				MOPRate = @"Year_Bull_Rate";
			}
			else if ([aaMOP isEqualToString:@"S"]) {
				MOPRate = @"Half_Year_Bull_Rate";
			}
			else if ([aaMOP isEqualToString:@"Q"]) {
				MOPRate = @"Quarter_Bull_Rate";
			}
			else if ([aaMOP isEqualToString:@"M"]) {
				MOPRate = @"Month_Bull_Rate";
			}
		}
		else if ([aaLowMediumHigh isEqualToString:@"M"]) {
			if ([aaMOP isEqualToString:@"A"]) {
				MOPRate = @"Year_Flat_Rate";
			}
			else if ([aaMOP isEqualToString:@"S"]) {
				MOPRate = @"Half_Year_Flat_Rate";
			}
			else if ([aaMOP isEqualToString:@"Q"]) {
				MOPRate = @"Quarter_Flat_Rate";
			}
			else if ([aaMOP isEqualToString:@"M"]) {
				MOPRate = @"Month_Flat_Rate";
			}
		}
		else{
			if ([aaMOP isEqualToString:@"A"]) {
				MOPRate = @"Year_Bear_Rate";
			}
			else if ([aaMOP isEqualToString:@"S"]) {
				MOPRate = @"Half_Year_Bear_Rate";
			}
			else if ([aaMOP isEqualToString:@"Q"]) {
				MOPRate = @"Quarter_Bear_Rate";
			}
			else if ([aaMOP isEqualToString:@"M"]) {
				MOPRate = @"Month_Bear_Rate";
			}
		}
		
        
		querySQL = [NSString stringWithFormat:@"Select %@ From ES_Sys_Fund_Growth_Rate WHERE Fund_Term = '%@' AND Fund_Year = '1'", MOPRate, FundTerm];
        
        
		if(sqlite3_prepare_v2(contactDB, [querySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
			if (sqlite3_step(statement) == SQLITE_ROW){
				tempResult = [[[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 0)] doubleValue ];
			}
			sqlite3_finalize(statement);
		}
		
		
		sqlite3_close(contactDB);
	}
	
	return tempResult;
}


-(double)ReturnVUCashInstHigh :(NSString *)aaMOP{
	
	NSString *MOP;
	if ([aaMOP isEqualToString:@""]) {
		MOP = strBumpMode;
	}
	else{
		MOP = aaMOP;
	}
	
	if ([MOP isEqualToString:@"A"]) {
		return 0.0251;
	}
	else if ([MOP isEqualToString:@"S"]) {
		return 0.0187861;
	}
	else if ([MOP isEqualToString:@"Q"]) {
		return 0.0156389;
	}
	else {
		return 0.0135443;
	}
}

-(double)ReturnVUCashInstMedian :(NSString *)aaMOP{
	NSString *MOP;
	if ([aaMOP isEqualToString:@""]) {
		MOP = strBumpMode;
	}
	else{
		MOP = aaMOP;
	}
	
	if ([MOP isEqualToString:@"A"]) {
		return 0.0228;
	}
	else if ([MOP isEqualToString:@"S"]) {
		return 0.0170679;
	}
	else if ([MOP isEqualToString:@"Q"]) {
		return 0.0142098;
	}
	else {
		return 0.0123075;
	}
}

-(double)ReturnVUCashInstLow :(NSString *)aaMOP{
	NSString *MOP;
	if ([aaMOP isEqualToString:@""]) {
		MOP = strBumpMode;
	}
	else{
		MOP = aaMOP;
	}
	
	if ([MOP isEqualToString:@"A"]) {
		return 0.0205;
	}
	else if ([MOP isEqualToString:@"S"]) {
		return 0.015349;
	}
	else if ([MOP isEqualToString:@"Q"]) {
		return 0.01278;
	}
	else {
		return 0.0110697;
	}
}

-(double)ReturnVURetInstHigh :(int)aaPolicyYear  andMOP:(NSString *)aaMOP{
	NSString *MOP = strBumpMode;
	
	if ([aaMOP isEqualToString:@""]) {
		MOP = strBumpMode;
	}
	else{
		MOP = aaMOP;
	}
	
	if ([MOP isEqualToString:@"A"]) {
		if (aaPolicyYear <= 20) {
			return 0.05808;
		}
		else{
			return 0.03784;
		}
	}
	else if ([MOP isEqualToString:@"S"]) {
		if (aaPolicyYear <= 20) {
			return 0.0433551;
		}
		else{
			return 0.0282922;
		}
	}
	else if ([MOP isEqualToString:@"Q"]) {
		if (aaPolicyYear <= 20) {
			return 0.0360438;
		}
		else{
			return 0.0235402;
		}
	}
	else {
		if (aaPolicyYear <= 20) {
			return 0.0311887;
		}
		else{
			return 0.0203804;
		}
	}
}

-(double)ReturnVURetInstMedian :(NSString *)aaMOP{
	
	NSString *MOP = strBumpMode;
	
	if ([aaMOP isEqualToString:@""]) {
		MOP = strBumpMode;
	}
	else{
		MOP = aaMOP;
	}
	
	if ([MOP isEqualToString:@"A"]) {
		return 0.03324;
	}
	else if ([MOP isEqualToString:@"S"]) {
		return 0.0248621;
	}
	else if ([MOP isEqualToString:@"Q"]) {
		return 0.0206901;
	}
	else {
		return 0.0179151;
	}
}

-(double)ReturnVURetInstLow :(NSString *)aaMOP{
	
	NSString *MOP = strBumpMode;
	
	if ([aaMOP isEqualToString:@""]) {
		MOP = strBumpMode;
	}
	else{
		MOP = aaMOP;
	}
	
	if ([MOP isEqualToString:@"A"]) {
		return 0.02312;
	}
	else if ([MOP isEqualToString:@"S"]) {
		return 0.017307;
	}
	else if ([MOP isEqualToString:@"Q"]) {
		return 0.0144087;
	}
	else {
		return 0.0124796;
	}
}

-(double)ReturnVUDanaInstHigh :(int)aaPolicyYear  andMOP:(NSString *)aaMOP{
	NSString *MOP = strBumpMode;
	
	if ([aaMOP isEqualToString:@""]) {
		MOP = strBumpMode;
	}
	else{
		MOP = aaMOP;
	}
	
	if ([MOP isEqualToString:@"A"]) {
		if (aaPolicyYear <= 20) {
			return 0.0606;
		}
		else{
			return 0.0376;
		}
	}
	else if ([MOP isEqualToString:@"S"]) {
		if (aaPolicyYear <= 20) {
			return 0.0452272;
		}
		else{
			return 0.0281133;
		}
	}
	else if ([MOP isEqualToString:@"Q"]) {
		if (aaPolicyYear <= 20) {
			return 0.0375965;
		}
		else{
			return 0.0233916;
		}
	}
	else {
		if (aaPolicyYear <= 20) {
			return 0.03253;
		}
		else{
			return 0.0202518;
		}
	}
}

-(double)ReturnVUDanaInstMedian :(NSString *)aaMOP{
	
	NSString *MOP = strBumpMode;
	
	if ([aaMOP isEqualToString:@""]) {
		MOP = strBumpMode;
	}
	else{
		MOP = aaMOP;
	}
	
	if ([MOP isEqualToString:@"A"]) {
		return 0.0376;
	}
	else if ([MOP isEqualToString:@"S"]) {
		return 0.0281133;
	}
	else if ([MOP isEqualToString:@"Q"]) {
		return 0.0233916;
	}
	else {
		return 0.0202518;
	}
}

-(double)ReturnVUDanaInstLow :(NSString *)aaMOP{
	NSString *MOP = strBumpMode;
	
	if ([aaMOP isEqualToString:@""]) {
		MOP = strBumpMode;
	}
	else{
		MOP = aaMOP;
	}
	
	if ([MOP isEqualToString:@"A"]) {
		return 0.0146;
	}
	else if ([MOP isEqualToString:@"S"]) {
		return 0.0109368;
	}
	else if ([MOP isEqualToString:@"Q"]) {
		return 0.0091085;
	}
	else {
		return 0.0078908;
	}
}

-(double)ReturnVUSmartInstHigh :(int)aaPolicyYear  andMOP:(NSString *)aaMOP{
	NSString *MOP = strBumpMode;
	
	if ([aaMOP isEqualToString:@""]) {
		MOP = strBumpMode;
	}
	else{
		MOP = aaMOP;
	}
	
	if ([MOP isEqualToString:@"A"]) {
		if (aaPolicyYear <= 20) {
			return  0.0678;
		}
		else{
			return 0.0402;
		}
	}
	else if ([MOP isEqualToString:@"S"]) {
		if (aaPolicyYear <= 20) {
			return 0.050572;
		}
		else{
			return 0.030051;
		}
	}
	else if ([MOP isEqualToString:@"Q"]) {
		if (aaPolicyYear <= 20) {
			return  0.0420275;
		}
		else{
			return 0.0250012;
		}
	}
	else {
		if (aaPolicyYear <= 20) {
			return 0.036357;
		}
		else{
			return 0.0216439;
		}
	}
}

-(double)ReturnVUSmartInstMedian :(NSString *)aaMOP{
	
	NSString *MOP = strBumpMode;
	
	if ([aaMOP isEqualToString:@""]) {
		MOP = strBumpMode;
	}
	else{
		MOP = aaMOP;
	}
	
	if ([MOP isEqualToString:@"A"]) {
		return 0.0356;
	}
	else if ([MOP isEqualToString:@"S"]) {
		return 0.0266222;
	}
	else if ([MOP isEqualToString:@"Q"]) {
		return 0.0221527;
	}
	else {
		return  0.0191803;
	}
}

-(double)ReturnVUSmartInstLow :(NSString *)aaMOP{
	NSString *MOP = strBumpMode;
	
	if ([aaMOP isEqualToString:@""]) {
		MOP = strBumpMode;
	}
	else{
		MOP = aaMOP;
	}
	
	if ([MOP isEqualToString:@"A"]) {
		return 0.0034;
	}
	else if ([MOP isEqualToString:@"S"]) {
		return  0.0025493;
	}
	else if ([MOP isEqualToString:@"Q"]) {
		return 0.0021241;
	}
	else {
		return 0.0018407;
	}
}

-(double)ReturnVUVentureInstHigh :(int)aaPolicyYear  andMOP:(NSString *)aaMOP{
	NSString *MOP = strBumpMode;
	
	if ([aaMOP isEqualToString:@""]) {
		MOP = strBumpMode;
	}
	else{
		MOP = aaMOP;
	}
	
	if ([MOP isEqualToString:@"A"]) {
		if (aaPolicyYear <= 20) {
			return 0.0686;
		}
		else{
			return 0.041;
		}
	}
	else if ([MOP isEqualToString:@"S"]) {
		if (aaPolicyYear <= 20) {
			return 0.0511656;
		}
		else{
			return  0.030647;
		}
	}
	else if ([MOP isEqualToString:@"Q"]) {
		if (aaPolicyYear <= 20) {
			return 0.0425194;
		}
		else{
			return  0.0254963;
		}
	}
	else {
		if (aaPolicyYear <= 20) {
			return 0.0367817;
		}
		else{
			return 0.022072;
		}
	}
}

-(double)ReturnVUVentureInstMedian :(NSString *)aaMOP{
	
	NSString *MOP = strBumpMode;
	
	if ([aaMOP isEqualToString:@""]) {
		MOP = strBumpMode;
	}
	else{
		MOP = aaMOP;
	}
	
	if ([MOP isEqualToString:@"A"]) {
		return 0.0364;
	}
	else if ([MOP isEqualToString:@"S"]) {
		return 0.0272187;
	}
	else if ([MOP isEqualToString:@"Q"]) {
		return  0.0226483;
	}
	else {
		return 0.019609;
	}
}

-(double)ReturnVUVentureInstLow :(NSString *)aaMOP{
	NSString *MOP = strBumpMode;
	
	if ([aaMOP isEqualToString:@""]) {
		MOP = strBumpMode;
	}
	else{
		MOP = aaMOP;
	}
	
	if ([MOP isEqualToString:@"A"]) {
		return 0.0042;
	}
	else if ([MOP isEqualToString:@"S"]) {
		return 0.0031489;
	}
	else if ([MOP isEqualToString:@"Q"]) {
		return 0.0026236;
	}
	else {
		return 0.0022735;
	}
}


-(double)ReturnVUVentureGrowthFac :(int)aaPolicyYear {
    double factor1 = 0.00;
    double factor2 = 0.00;
    double factor3 = 0.00;
    double factor4 = 0.00;
    double factor5 = 0.00;
    double factor6 = 0.00;
    
    if (VUVentureGrowthFactor > 0) {
        factor1 =(double)VUVentureGrowthFactor;
        factor2 = factor1 + (double)VU2023Factor * (double)(factor1/[self FactorGroup:2]);
        factor3 = factor2 + (double)VU2025Factor * (double)(factor2/[self FactorGroup:3]);
        factor4 = factor3 + (double)VU2028Factor * (double)(factor3/[self FactorGroup:4]);
        factor5 = factor4 + (double)VU2030Factor * (double)(factor4/[self FactorGroup:5]);
        factor6 = factor5 + (double)VU2035Factor * (double)(factor5/[self FactorGroup:6]);
    }
    else if (VUVentureGrowthOptFactor > 0){
        if ([self FactorGroup:2] == 0) {
            factor2 = (double)VUVentureGrowthOptFactor;
        }
        else{
            factor2 = 0.00;
        }
        
        if ([self FactorGroup:3] == 0) {
            factor3 = (double)VUVentureGrowthOptFactor;
        }
        else{
            factor3 = 0.00;
        }
        
        if ([self FactorGroup:4] == 0) {
            factor4 = (double)VUVentureGrowthOptFactor;
        }
        else{
            factor4 = 0.00;
        }
        
        if ([self FactorGroup:5] == 0) {
            factor5 = (double)VUVentureGrowthOptFactor;
        }
        else{
            factor5 = 0.00;
        }
        
        if ([self FactorGroup:6] == 0) {
            factor6 = (double)VUVentureGrowthOptFactor;
        }
        else{
            factor6 = 0.00;
        }
    }
    
    if (aaPolicyYear >= FundTerm2023 && aaPolicyYear <= FundTermPrev2025) {
        return factor2/100.00;
    }
    else if (aaPolicyYear >= FundTerm2025 && aaPolicyYear <= FundTermPrev2028) {
        return factor3/100.00;
    }
    else if (aaPolicyYear >= FundTerm2028 && aaPolicyYear <= FundTermPrev2030) {
        return factor4/100.00;
    }
    else if (aaPolicyYear >= FundTerm2030 && aaPolicyYear <= FundTermPrev2035) {
        return factor5/100.00;
    }
    else if (aaPolicyYear > FundTermPrev2035) {
        return factor6/100.00;
    }
    else{
        return (double)VUVentureGrowthFactor/100.00;
    }
}

-(double)ReturnVUVentureGrowthFac :(int)aaPolicyYear andMonth:(int) aaMonth {
    double factor1 = 0.00;
    double factor2 = 0.00;
    double factor3 = 0.00;
    double factor4 = 0.00;
    double factor5 = 0.00;
    double factor6 = 0.00;
    
    if (VUVentureGrowthFactor > 0) {
        factor1 =(double)VUVentureGrowthFactor;
        factor2 = factor1 + (double)VU2023Factor * (factor1/[self FactorGroup:2]);
        factor3 = factor2 + (double)VU2025Factor * (factor2/[self FactorGroup:3]);
        factor4 = factor3 + (double)VU2028Factor * (factor3/[self FactorGroup:4]);
        factor5 = factor4 + (double)VU2030Factor * (factor4/[self FactorGroup:5]);
        factor6 = factor5 + (double)VU2035Factor * (factor5/[self FactorGroup:6]);
    }
    else if (VUVentureGrowthOptFactor > 0){
        if ([self FactorGroup:2] == 0) {
            factor2 = (double)VUVentureGrowthOptFactor;
        }
        else{
            factor2 = 0.00;
        }
        
        if ([self FactorGroup:3] == 0) {
            factor3 = (double)VUVentureGrowthOptFactor;
        }
        else{
            factor3 = 0.00;
        }
        
        if ([self FactorGroup:4] == 0) {
            factor4 = (double)VUVentureGrowthOptFactor;
        }
        else{
            factor4 = 0.00;
        }
        
        if ([self FactorGroup:5] == 0) {
            factor5 = (double)VUVentureGrowthOptFactor;
        }
        else{
            factor5 = 0.00;
        }
        
        if ([self FactorGroup:6] == 0) {
            factor6 = (double)VUVentureGrowthOptFactor;
        }
        else{
            factor6 = 0.00;
        }
    }
    
    if(aaPolicyYear >= FundTerm2023 && aaPolicyYear <= FundTermPrev2025 && aaMonth > MonthDiff2023 ){
        return factor2/100.00;
    }
    else if(aaPolicyYear == FundTerm2025 && aaMonth <= MonthDiff2023){
        return factor2/100.00;
    }
    else if(aaPolicyYear >= FundTerm2025 && aaPolicyYear <= FundTermPrev2028 && aaMonth > MonthDiff2025 ){
        return factor3/100.00;
    }
    else if(aaPolicyYear == FundTerm2028 && aaMonth <= MonthDiff2028){
        return factor3/100.00;
    }
    else if(aaPolicyYear >= FundTerm2028 && aaPolicyYear <= FundTermPrev2030 && aaMonth > MonthDiff2028 ){
        return factor4/100.00;
    }
    else if(aaPolicyYear == FundTerm2030 && aaMonth <= MonthDiff2030){
        return factor4/100.00;
    }
    else if(aaPolicyYear >= FundTerm2030 && aaPolicyYear <= FundTermPrev2035 && aaMonth > MonthDiff2030 ){
        return factor5/100.00;
    }
    else if(aaPolicyYear > FundTermPrev2035 && aaMonth <= MonthDiff2035){
        return factor5/100.00;
    }
    else if(aaPolicyYear > FundTermPrev2035 && aaMonth > MonthDiff2035){
        return factor6/100.00;
    }
    else{
        return (double)VUVentureGrowthFactor/100.00;
    }
}


-(double)ReturnVUVentureGrowthInstHigh :(int)aaPolicyYear  andMOP:(NSString *)aaMOP{
    NSString *MOP = strBumpMode;
    
    if ([aaMOP isEqualToString:@""]) {
        MOP = strBumpMode;
    }
    else{
        MOP = aaMOP;
    }
    
    if ([MOP isEqualToString:@"A"]) {
        if (aaPolicyYear <= 20) {
            return 0.0684;
        }
        else{
            return 0.0408;
        }
    }
    else if ([MOP isEqualToString:@"S"]) {
        if (aaPolicyYear <= 20) {
            return 0.0510172;
        }
        else{
            return 0.030498;
        }
    }
    else if ([MOP isEqualToString:@"Q"]) {
        if (aaPolicyYear <= 20) {
            return 0.0423965;
        }
        else{
            return 0.0253725;
        }
    }
    else {
        if (aaPolicyYear <= 20) {
            return 0.0366755;
        }
        else{
            return 0.021965;
        }
    }
}

-(double)ReturnVUVentureGrowthInstMedian :(NSString *)aaMOP{
    
    NSString *MOP = strBumpMode;
    
    if ([aaMOP isEqualToString:@""]) {
        MOP = strBumpMode;
    }
    else{
        MOP = aaMOP;
    }
    
    if ([MOP isEqualToString:@"A"]) {
        return 0.0362;
    }
    else if ([MOP isEqualToString:@"S"]) {
        return 0.0270695;
    }
    else if ([MOP isEqualToString:@"Q"]) {
        return 0.0225244;
    }
    else {
        return 0.0195018;
    }
}

-(double)ReturnVUVentureGrowthInstLow :(NSString *)aaMOP{
    
    NSString *MOP = strBumpMode;
    
    if ([aaMOP isEqualToString:@""]) {
        MOP = strBumpMode;
    }
    else{
        MOP = aaMOP;
    }

    if ([MOP isEqualToString:@"A"]) {
        return 0.004;
    }
    else if ([MOP isEqualToString:@"S"]) {
        return 0.002999;
    }
    else if ([MOP isEqualToString:@"Q"]) {
        return 0.0024988;
    }
    else {
        return 0.0021653;
    }
}


-(double)ReturnVUVentureBlueChipFac :(int)aaPolicyYear {
    double factor1 = 0.00;
    double factor2 = 0.00;
    double factor3 = 0.00;
    double factor4 = 0.00;
    double factor5 = 0.00;
    double factor6 = 0.00;
    
    if (VUVentureBlueChipFactor > 0) {
        factor1 =(double)VUVentureBlueChipFactor;
        factor2 = factor1 + (double)VU2023Factor * (double)(factor1/[self FactorGroup:2]);
        factor3 = factor2 + (double)VU2025Factor * (double)(factor2/[self FactorGroup:3]);
        factor4 = factor3 + (double)VU2028Factor * (double)(factor3/[self FactorGroup:4]);
        factor5 = factor4 + (double)VU2030Factor * (double)(factor4/[self FactorGroup:5]);
        factor6 = factor5 + (double)VU2035Factor * (double)(factor5/[self FactorGroup:6]);
    }
    else if (VUVentureBlueChipOptFactor > 0){
        if ([self FactorGroup:2] == 0) {
            factor2 = (double)VUVentureBlueChipOptFactor;
        }
        else{
            factor2 = 0.00;
        }
        
        if ([self FactorGroup:3] == 0) {
            factor3 = (double)VUVentureBlueChipOptFactor;
        }
        else{
            factor3 = 0.00;
        }
        
        if ([self FactorGroup:4] == 0) {
            factor4 = (double)VUVentureBlueChipOptFactor;
        }
        else{
            factor4 = 0.00;
        }
        
        if ([self FactorGroup:5] == 0) {
            factor5 = (double)VUVentureBlueChipOptFactor;
        }
        else{
            factor5 = 0.00;
        }
        
        if ([self FactorGroup:6] == 0) {
            factor6 = (double)VUVentureBlueChipOptFactor;
        }
        else{
            factor6 = 0.00;
        }
    }
    
    if (aaPolicyYear >= FundTerm2023 && aaPolicyYear <= FundTermPrev2025) {
        return factor2/100.00;
    }
    else if (aaPolicyYear >= FundTerm2025 && aaPolicyYear <= FundTermPrev2028) {
        return factor3/100.00;
    }
    else if (aaPolicyYear >= FundTerm2028 && aaPolicyYear <= FundTermPrev2030) {
        return factor4/100.00;
    }
    else if (aaPolicyYear >= FundTerm2030 && aaPolicyYear <= FundTermPrev2035) {
        return factor5/100.00;
    }
    else if (aaPolicyYear > FundTermPrev2035) {
        return factor6/100.00;
    }
    else{
        return (double)VUVentureBlueChipFactor/100.00;
    }
}

-(double)ReturnVUVentureBlueChipFac :(int)aaPolicyYear andMonth:(int) aaMonth {
    double factor1 = 0.00;
    double factor2 = 0.00;
    double factor3 = 0.00;
    double factor4 = 0.00;
    double factor5 = 0.00;
    double factor6 = 0.00;
    
    if (VUVentureBlueChipFactor > 0) {
        factor1 =(double)VUVentureBlueChipFactor;
        factor2 = factor1 + (double)VU2023Factor * (factor1/[self FactorGroup:2]);
        factor3 = factor2 + (double)VU2025Factor * (factor2/[self FactorGroup:3]);
        factor4 = factor3 + (double)VU2028Factor * (factor3/[self FactorGroup:4]);
        factor5 = factor4 + (double)VU2030Factor * (factor4/[self FactorGroup:5]);
        factor6 = factor5 + (double)VU2035Factor * (factor5/[self FactorGroup:6]);
    }
    else if (VUVentureBlueChipOptFactor > 0){
        if ([self FactorGroup:2] == 0) {
            factor2 = (double)VUVentureBlueChipOptFactor;
        }
        else{
            factor2 = 0.00;
        }
        
        if ([self FactorGroup:3] == 0) {
            factor3 = (double)VUVentureBlueChipOptFactor;
        }
        else{
            factor3 = 0.00;
        }
        
        if ([self FactorGroup:4] == 0) {
            factor4 = (double)VUVentureBlueChipOptFactor;
        }
        else{
            factor4 = 0.00;
        }
        
        if ([self FactorGroup:5] == 0) {
            factor5 = (double)VUVentureBlueChipOptFactor;
        }
        else{
            factor5 = 0.00;
        }
        
        if ([self FactorGroup:6] == 0) {
            factor6 = (double)VUVentureBlueChipOptFactor;
        }
        else{
            factor6 = 0.00;
        }
    }
    
    if(aaPolicyYear >= FundTerm2023 && aaPolicyYear <= FundTermPrev2025 && aaMonth > MonthDiff2023 ){
        return factor2/100.00;
    }
    else if(aaPolicyYear == FundTerm2025 && aaMonth <= MonthDiff2023){
        return factor2/100.00;
    }
    else if(aaPolicyYear >= FundTerm2025 && aaPolicyYear <= FundTermPrev2028 && aaMonth > MonthDiff2025 ){
        return factor3/100.00;
    }
    else if(aaPolicyYear == FundTerm2028 && aaMonth <= MonthDiff2028){
        return factor3/100.00;
    }
    else if(aaPolicyYear >= FundTerm2028 && aaPolicyYear <= FundTermPrev2030 && aaMonth > MonthDiff2028 ){
        return factor4/100.00;
    }
    else if(aaPolicyYear == FundTerm2030 && aaMonth <= MonthDiff2030){
        return factor4/100.00;
    }
    else if(aaPolicyYear >= FundTerm2030 && aaPolicyYear <= FundTermPrev2035 && aaMonth > MonthDiff2030 ){
        return factor5/100.00;
    }
    else if(aaPolicyYear > FundTermPrev2035 && aaMonth <= MonthDiff2035){
        return factor5/100.00;
    }
    else if(aaPolicyYear > FundTermPrev2035 && aaMonth > MonthDiff2035){
        return factor6/100.00;
    }
    else{
        return (double)VUVentureBlueChipFactor/100.00;
    }
}


-(double)ReturnVUVentureBlueChipInstHigh :(int)aaPolicyYear  andMOP:(NSString *)aaMOP{
    NSString *MOP = strBumpMode;
    
    if ([aaMOP isEqualToString:@""]) {
        MOP = strBumpMode;
    }
    else{
        MOP = aaMOP;
    }

    if ([MOP isEqualToString:@"A"]) {
        if (aaPolicyYear <= 20) {
            return 0.0681;
        }
        else{
            return 0.0405;
        }
    }
    else if ([MOP isEqualToString:@"S"]) {
        if (aaPolicyYear <= 20) {
            return 0.0507946;
        }
        else{
            return 0.0302745;
        }
    }
    else if ([MOP isEqualToString:@"Q"]) {
        if (aaPolicyYear <= 20) {
            return 0.042212;
        }
        else{
            return 0.0251869;
        }
    }
    else {
        if (aaPolicyYear <= 20) {
            return 0.0365162;
        }
        else{
            return 0.0218044;
        }
    }
}

-(double)ReturnVUVentureBlueChipInstMedian :(NSString *)aaMOP{
    
    NSString *MOP = strBumpMode;
    
    if ([aaMOP isEqualToString:@""]) {
        MOP = strBumpMode;
    }
    else{
        MOP = aaMOP;
    }

    if ([MOP isEqualToString:@"A"]) {
        return 0.0359;
    }
    else if ([MOP isEqualToString:@"S"]) {
        return 0.0268459;
    }
    else if ([MOP isEqualToString:@"Q"]) {
        return 0.0223386;
    }
    else {
        return 0.0193411;
    }
}

-(double)ReturnVUVentureBlueChipInstLow :(NSString *)aaMOP{
    
    NSString *MOP = strBumpMode;
    
    if ([aaMOP isEqualToString:@""]) {
        MOP = strBumpMode;
    }
    else{
        MOP = aaMOP;
    }

    if ([MOP isEqualToString:@"A"]) {
        return 0.0037;
    }
    else if ([MOP isEqualToString:@"S"]) {
        return 0.0027741;
    }
    else if ([MOP isEqualToString:@"Q"]) {
        return 0.0023114;
    }
    else {
        return 0.002003;
    }
}


-(double)ReturnVUVentureDanaFac :(int)aaPolicyYear {
    double factor1 = 0.00;
    double factor2 = 0.00;
    double factor3 = 0.00;
    double factor4 = 0.00;
    double factor5 = 0.00;
    double factor6 = 0.00;
    
    if (VUVentureDanaFactor > 0) {
        factor1 =(double)VUVentureDanaFactor;
        factor2 = factor1 + (double)VU2023Factor * (double)(factor1/[self FactorGroup:2]);
        factor3 = factor2 + (double)VU2025Factor * (double)(factor2/[self FactorGroup:3]);
        factor4 = factor3 + (double)VU2028Factor * (double)(factor3/[self FactorGroup:4]);
        factor5 = factor4 + (double)VU2030Factor * (double)(factor4/[self FactorGroup:5]);
        factor6 = factor5 + (double)VU2035Factor * (double)(factor5/[self FactorGroup:6]);
    }
    else if (VUVentureDanaOptFactor > 0){
        if ([self FactorGroup:2] == 0) {
            factor2 = (double)VUVentureDanaOptFactor;
        }
        else{
            factor2 = 0.00;
        }
        
        if ([self FactorGroup:3] == 0) {
            factor3 = (double)VUVentureDanaOptFactor;
        }
        else{
            factor3 = 0.00;
        }
        
        if ([self FactorGroup:4] == 0) {
            factor4 = (double)VUVentureDanaOptFactor;
        }
        else{
            factor4 = 0.00;
        }
        
        if ([self FactorGroup:5] == 0) {
            factor5 = (double)VUVentureDanaOptFactor;
        }
        else{
            factor5 = 0.00;
        }
        
        if ([self FactorGroup:6] == 0) {
            factor6 = (double)VUVentureDanaOptFactor;
        }
        else{
            factor6 = 0.00;
        }
    }
    
    if (aaPolicyYear >= FundTerm2023 && aaPolicyYear <= FundTermPrev2025) {
        return factor2/100.00;
    }
    else if (aaPolicyYear >= FundTerm2025 && aaPolicyYear <= FundTermPrev2028) {
        return factor3/100.00;
    }
    else if (aaPolicyYear >= FundTerm2028 && aaPolicyYear <= FundTermPrev2030) {
        return factor4/100.00;
    }
    else if (aaPolicyYear >= FundTerm2030 && aaPolicyYear <= FundTermPrev2035) {
        return factor5/100.00;
    }
    else if (aaPolicyYear > FundTermPrev2035) {
        return factor6/100.00;
    }
    else{
        return (double)VUVentureDanaFactor/100.00;
    }
}

-(double)ReturnVUVentureDanaFac :(int)aaPolicyYear andMonth:(int) aaMonth {
    double factor1 = 0.00;
    double factor2 = 0.00;
    double factor3 = 0.00;
    double factor4 = 0.00;
    double factor5 = 0.00;
    double factor6 = 0.00;
    
    if (VUVentureDanaFactor > 0) {
        factor1 =(double)VUVentureDanaFactor;
        factor2 = factor1 + (double)VU2023Factor * (factor1/[self FactorGroup:2]);
        factor3 = factor2 + (double)VU2025Factor * (factor2/[self FactorGroup:3]);
        factor4 = factor3 + (double)VU2028Factor * (factor3/[self FactorGroup:4]);
        factor5 = factor4 + (double)VU2030Factor * (factor4/[self FactorGroup:5]);
        factor6 = factor5 + (double)VU2035Factor * (factor5/[self FactorGroup:6]);
    }
    else if (VUVentureDanaOptFactor > 0){
        if ([self FactorGroup:2] == 0) {
            factor2 = (double)VUVentureDanaOptFactor;
        }
        else{
            factor2 = 0.00;
        }
        
        if ([self FactorGroup:3] == 0) {
            factor3 = (double)VUVentureDanaOptFactor;
        }
        else{
            factor3 = 0.00;
        }
        
        if ([self FactorGroup:4] == 0) {
            factor4 = (double)VUVentureDanaOptFactor;
        }
        else{
            factor4 = 0.00;
        }
        
        if ([self FactorGroup:5] == 0) {
            factor5 = (double)VUVentureDanaOptFactor;
        }
        else{
            factor5 = 0.00;
        }
        
        if ([self FactorGroup:6] == 0) {
            factor6 = (double)VUVentureDanaOptFactor;
        }
        else{
            factor6 = 0.00;
        }
    }
    
    if(aaPolicyYear >= FundTerm2023 && aaPolicyYear <= FundTermPrev2025 && aaMonth > MonthDiff2023 ){
        return factor2/100.00;
    }
    else if(aaPolicyYear == FundTerm2025 && aaMonth <= MonthDiff2023){
        return factor2/100.00;
    }
    else if(aaPolicyYear >= FundTerm2025 && aaPolicyYear <= FundTermPrev2028 && aaMonth > MonthDiff2025 ){
        return factor3/100.00;
    }
    else if(aaPolicyYear == FundTerm2028 && aaMonth <= MonthDiff2028){
        return factor3/100.00;
    }
    else if(aaPolicyYear >= FundTerm2028 && aaPolicyYear <= FundTermPrev2030 && aaMonth > MonthDiff2028 ){
        return factor4/100.00;
    }
    else if(aaPolicyYear == FundTerm2030 && aaMonth <= MonthDiff2030){
        return factor4/100.00;
    }
    else if(aaPolicyYear >= FundTerm2030 && aaPolicyYear <= FundTermPrev2035 && aaMonth > MonthDiff2030 ){
        return factor5/100.00;
    }
    else if(aaPolicyYear > FundTermPrev2035 && aaMonth <= MonthDiff2035){
        return factor5/100.00;
    }
    else if(aaPolicyYear > FundTermPrev2035 && aaMonth > MonthDiff2035){
        return factor6/100.00;
    }
    else{
        return (double)VUVentureDanaFactor/100.00;
    }
}


-(double)ReturnVUVentureDanaInstHigh :(int)aaPolicyYear  andMOP:(NSString *)aaMOP{
    NSString *MOP = strBumpMode;
    
    if ([aaMOP isEqualToString:@""]) {
        MOP = strBumpMode;
    }
    else{
        MOP = aaMOP;
    }
    
    if ([MOP isEqualToString:@"A"]) {
        if (aaPolicyYear <= 20) {
            return 0.0688;
        }
        else{
            return 0.0412;
        }
    }
    else if ([MOP isEqualToString:@"S"]) {
        if (aaPolicyYear <= 20) {
            return 0.0513139;
        }
        else{
            return 0.030796;
        }
    }
    else if ([MOP isEqualToString:@"Q"]) {
        if (aaPolicyYear <= 20) {
            return 0.0426424;
        }
        else{
            return 0.0256201;
        }
    }
    else {
        if (aaPolicyYear <= 20) {
            return 0.0368879;
        }
        else{
            return 0.022179;
        }
    }
}

-(double)ReturnVUVentureDanaInstMedian :(NSString *)aaMOP{
    
    NSString *MOP = strBumpMode;
    
    if ([aaMOP isEqualToString:@""]) {
        MOP = strBumpMode;
    }
    else{
        MOP = aaMOP;
    }
    
    if ([MOP isEqualToString:@"A"]) {
        return 0.0366;
    }
    else if ([MOP isEqualToString:@"S"]) {
        return 0.0273678;
    }
    else if ([MOP isEqualToString:@"Q"]) {
        return 0.0227722;
    }
    else {
        return 0.0197161;
    }
}

-(double)ReturnVUVentureDanaInstLow :(NSString *)aaMOP{
    
    NSString *MOP = strBumpMode;
    
    if ([aaMOP isEqualToString:@""]) {
        MOP = strBumpMode;
    }
    else{
        MOP = aaMOP;
    }

    if ([MOP isEqualToString:@"A"]) {
        return 0.0044;
    }
    else if ([MOP isEqualToString:@"S"]) {
        return 0.0032988;
    }
    else if ([MOP isEqualToString:@"Q"]) {
        return 0.0027485;
    }
    else {
        return 0.0023817;
    }
}


-(double)ReturnVUVentureManagedFac :(int)aaPolicyYear {
    double factor1 = 0.00;
    double factor2 = 0.00;
    double factor3 = 0.00;
    double factor4 = 0.00;
    double factor5 = 0.00;
    double factor6 = 0.00;
    
    if (VUVentureManagedFactor > 0) {
        factor1 =(double)VUVentureManagedFactor;
        factor2 = factor1 + (double)VU2023Factor * (double)(factor1/[self FactorGroup:2]);
        factor3 = factor2 + (double)VU2025Factor * (double)(factor2/[self FactorGroup:3]);
        factor4 = factor3 + (double)VU2028Factor * (double)(factor3/[self FactorGroup:4]);
        factor5 = factor4 + (double)VU2030Factor * (double)(factor4/[self FactorGroup:5]);
        factor6 = factor5 + (double)VU2035Factor * (double)(factor5/[self FactorGroup:6]);
    }
    else if (VUVentureManagedOptFactor > 0){
        if ([self FactorGroup:2] == 0) {
            factor2 = (double)VUVentureManagedOptFactor;
        }
        else{
            factor2 = 0.00;
        }
        
        if ([self FactorGroup:3] == 0) {
            factor3 = (double)VUVentureManagedOptFactor;
        }
        else{
            factor3 = 0.00;
        }
        
        if ([self FactorGroup:4] == 0) {
            factor4 = (double)VUVentureManagedOptFactor;
        }
        else{
            factor4 = 0.00;
        }
        
        if ([self FactorGroup:5] == 0) {
            factor5 = (double)VUVentureManagedOptFactor;
        }
        else{
            factor5 = 0.00;
        }
        
        if ([self FactorGroup:6] == 0) {
            factor6 = (double)VUVentureManagedOptFactor;
        }
        else{
            factor6 = 0.00;
        }
    }
    
    if (aaPolicyYear >= FundTerm2023 && aaPolicyYear <= FundTermPrev2025) {
        return factor2/100.00;
    }
    else if (aaPolicyYear >= FundTerm2025 && aaPolicyYear <= FundTermPrev2028) {
        return factor3/100.00;
    }
    else if (aaPolicyYear >= FundTerm2028 && aaPolicyYear <= FundTermPrev2030) {
        return factor4/100.00;
    }
    else if (aaPolicyYear >= FundTerm2030 && aaPolicyYear <= FundTermPrev2035) {
        return factor5/100.00;
    }
    else if (aaPolicyYear > FundTermPrev2035) {
        return factor6/100.00;
    }
    else{
        return (double)VUVentureManagedFactor/100.00;
    }
}

-(double)ReturnVUVentureManagedFac :(int)aaPolicyYear andMonth:(int) aaMonth {
    double factor1 = 0.00;
    double factor2 = 0.00;
    double factor3 = 0.00;
    double factor4 = 0.00;
    double factor5 = 0.00;
    double factor6 = 0.00;
    
    if (VUVentureManagedFactor > 0) {
        factor1 =(double)VUVentureManagedFactor;
        factor2 = factor1 + (double)VU2023Factor * (factor1/[self FactorGroup:2]);
        factor3 = factor2 + (double)VU2025Factor * (factor2/[self FactorGroup:3]);
        factor4 = factor3 + (double)VU2028Factor * (factor3/[self FactorGroup:4]);
        factor5 = factor4 + (double)VU2030Factor * (factor4/[self FactorGroup:5]);
        factor6 = factor5 + (double)VU2035Factor * (factor5/[self FactorGroup:6]);
    }
    else if (VUVentureManagedOptFactor > 0){
        if ([self FactorGroup:2] == 0) {
            factor2 = (double)VUVentureManagedOptFactor;
        }
        else{
            factor2 = 0.00;
        }
        
        if ([self FactorGroup:3] == 0) {
            factor3 = (double)VUVentureManagedOptFactor;
        }
        else{
            factor3 = 0.00;
        }
        
        if ([self FactorGroup:4] == 0) {
            factor4 = (double)VUVentureManagedOptFactor;
        }
        else{
            factor4 = 0.00;
        }
        
        if ([self FactorGroup:5] == 0) {
            factor5 = (double)VUVentureManagedOptFactor;
        }
        else{
            factor5 = 0.00;
        }
        
        if ([self FactorGroup:6] == 0) {
            factor6 = (double)VUVentureManagedOptFactor;
        }
        else{
            factor6 = 0.00;
        }
    }
    
    if(aaPolicyYear >= FundTerm2023 && aaPolicyYear <= FundTermPrev2025 && aaMonth > MonthDiff2023 ){
        return factor2/100.00;
    }
    else if(aaPolicyYear == FundTerm2025 && aaMonth <= MonthDiff2023){
        return factor2/100.00;
    }
    else if(aaPolicyYear >= FundTerm2025 && aaPolicyYear <= FundTermPrev2028 && aaMonth > MonthDiff2025 ){
        return factor3/100.00;
    }
    else if(aaPolicyYear == FundTerm2028 && aaMonth <= MonthDiff2028){
        return factor3/100.00;
    }
    else if(aaPolicyYear >= FundTerm2028 && aaPolicyYear <= FundTermPrev2030 && aaMonth > MonthDiff2028 ){
        return factor4/100.00;
    }
    else if(aaPolicyYear == FundTerm2030 && aaMonth <= MonthDiff2030){
        return factor4/100.00;
    }
    else if(aaPolicyYear >= FundTerm2030 && aaPolicyYear <= FundTermPrev2035 && aaMonth > MonthDiff2030 ){
        return factor5/100.00;
    }
    else if(aaPolicyYear > FundTermPrev2035 && aaMonth <= MonthDiff2035){
        return factor5/100.00;
    }
    else if(aaPolicyYear > FundTermPrev2035 && aaMonth > MonthDiff2035){
        return factor6/100.00;
    }
    else{
        return (double)VUVentureManagedFactor/100.00;
    }
}


-(double)ReturnVUVentureManagedInstHigh :(int)aaPolicyYear  andMOP:(NSString *)aaMOP{
    NSString *MOP = strBumpMode;
    
    if ([aaMOP isEqualToString:@""]) {
        MOP = strBumpMode;
    }
    else{
        MOP = aaMOP;
    }
    
    if ([MOP isEqualToString:@"A"]) {
        if (aaPolicyYear <= 20) {
            return 0.0612;
        }
        else{
            return 0.0382;
        }
    }
    else if ([MOP isEqualToString:@"S"]) {
        if (aaPolicyYear <= 20) {
            return 0.0456728;
        }
        else{
            return 0.0285605;
        }
    }
    else if ([MOP isEqualToString:@"Q"]) {
        if (aaPolicyYear <= 20) {
            return 0.037966;
        }
        else{
            return 0.0237631;
        }
    }
    else {
        if (aaPolicyYear <= 20) {
            return 0.0328492;
        }
        else{
            return 0.0205732;
        }
    }
}

-(double)ReturnVUVentureManagedInstMedian :(NSString *)aaMOP{
    
    NSString *MOP = strBumpMode;
    
    if ([aaMOP isEqualToString:@""]) {
        MOP = strBumpMode;
    }
    else{
        MOP = aaMOP;
    }
    
    if ([MOP isEqualToString:@"A"]) {
        return 0.0382;
    }
    else if ([MOP isEqualToString:@"S"]) {
        return 0.0285605;
    }
    else if ([MOP isEqualToString:@"Q"]) {
        return 0.0237631;
    }
    else {
        return 0.0205732;
    }
}

-(double)ReturnVUVentureManagedInstLow :(NSString *)aaMOP{
    
    NSString *MOP = strBumpMode;
    
    if ([aaMOP isEqualToString:@""]) {
        MOP = strBumpMode;
    }
    else{
        MOP = aaMOP;
    }

    if ([MOP isEqualToString:@"A"]) {
        return 0.0152;
    }
    else if ([MOP isEqualToString:@"S"]) {
        return 0.0113857;
    }
    else if ([MOP isEqualToString:@"Q"]) {
        return 0.0094821;
    }
    else {
        return 0.0082144;
    }
}


-(double)ReturnVUVentureIncomeFac :(int)aaPolicyYear {
    double factor1 = 0.00;
    double factor2 = 0.00;
    double factor3 = 0.00;
    double factor4 = 0.00;
    double factor5 = 0.00;
    double factor6 = 0.00;
    
    if (VUVentureIncomeFactor > 0) {
        factor1 =(double)VUVentureIncomeFactor;
        factor2 = factor1 + (double)VU2023Factor * (double)(factor1/[self FactorGroup:2]);
        factor3 = factor2 + (double)VU2025Factor * (double)(factor2/[self FactorGroup:3]);
        factor4 = factor3 + (double)VU2028Factor * (double)(factor3/[self FactorGroup:4]);
        factor5 = factor4 + (double)VU2030Factor * (double)(factor4/[self FactorGroup:5]);
        factor6 = factor5 + (double)VU2035Factor * (double)(factor5/[self FactorGroup:6]);
    }
    else if (VUVentureIncomeOptFactor > 0){
        if ([self FactorGroup:2] == 0) {
            factor2 = (double)VUVentureIncomeOptFactor;
        }
        else{
            factor2 = 0.00;
        }
        
        if ([self FactorGroup:3] == 0) {
            factor3 = (double)VUVentureIncomeOptFactor;
        }
        else{
            factor3 = 0.00;
        }
        
        if ([self FactorGroup:4] == 0) {
            factor4 = (double)VUVentureIncomeOptFactor;
        }
        else{
            factor4 = 0.00;
        }
        
        if ([self FactorGroup:5] == 0) {
            factor5 = (double)VUVentureIncomeOptFactor;
        }
        else{
            factor5 = 0.00;
        }
        
        if ([self FactorGroup:6] == 0) {
            factor6 = (double)VUVentureIncomeOptFactor;
        }
        else{
            factor6 = 0.00;
        }
    }
    
    if (aaPolicyYear >= FundTerm2023 && aaPolicyYear <= FundTermPrev2025) {
        return factor2/100.00;
    }
    else if (aaPolicyYear >= FundTerm2025 && aaPolicyYear <= FundTermPrev2028) {
        return factor3/100.00;
    }
    else if (aaPolicyYear >= FundTerm2028 && aaPolicyYear <= FundTermPrev2030) {
        return factor4/100.00;
    }
    else if (aaPolicyYear >= FundTerm2030 && aaPolicyYear <= FundTermPrev2035) {
        return factor5/100.00;
    }
    else if (aaPolicyYear > FundTermPrev2035) {
        return factor6/100.00;
    }
    else{
        return (double)VUVentureIncomeFactor/100.00;
    }
}

-(double)ReturnVUVentureIncomeFac :(int)aaPolicyYear andMonth:(int) aaMonth {
    double factor1 = 0.00;
    double factor2 = 0.00;
    double factor3 = 0.00;
    double factor4 = 0.00;
    double factor5 = 0.00;
    double factor6 = 0.00;
    
    if (VUVentureIncomeFactor > 0) {
        factor1 =(double)VUVentureIncomeFactor;
        factor2 = factor1 + (double)VU2023Factor * (factor1/[self FactorGroup:2]);
        factor3 = factor2 + (double)VU2025Factor * (factor2/[self FactorGroup:3]);
        factor4 = factor3 + (double)VU2028Factor * (factor3/[self FactorGroup:4]);
        factor5 = factor4 + (double)VU2030Factor * (factor4/[self FactorGroup:5]);
        factor6 = factor5 + (double)VU2035Factor * (factor5/[self FactorGroup:6]);
    }
    else if (VUVentureIncomeOptFactor > 0){
        if ([self FactorGroup:2] == 0) {
            factor2 = (double)VUVentureIncomeOptFactor;
        }
        else{
            factor2 = 0.00;
        }
        
        if ([self FactorGroup:3] == 0) {
            factor3 = (double)VUVentureIncomeOptFactor;
        }
        else{
            factor3 = 0.00;
        }
        
        if ([self FactorGroup:4] == 0) {
            factor4 = (double)VUVentureIncomeOptFactor;
        }
        else{
            factor4 = 0.00;
        }
        
        if ([self FactorGroup:5] == 0) {
            factor5 = (double)VUVentureIncomeOptFactor;
        }
        else{
            factor5 = 0.00;
        }
        
        if ([self FactorGroup:6] == 0) {
            factor6 = (double)VUVentureIncomeOptFactor;
        }
        else{
            factor6 = 0.00;
        }
    }
    
    if(aaPolicyYear >= FundTerm2023 && aaPolicyYear <= FundTermPrev2025 && aaMonth > MonthDiff2023 ){
        return factor2/100.00;
    }
    else if(aaPolicyYear == FundTerm2025 && aaMonth <= MonthDiff2023){
        return factor2/100.00;
    }
    else if(aaPolicyYear >= FundTerm2025 && aaPolicyYear <= FundTermPrev2028 && aaMonth > MonthDiff2025 ){
        return factor3/100.00;
    }
    else if(aaPolicyYear == FundTerm2028 && aaMonth <= MonthDiff2028){
        return factor3/100.00;
    }
    else if(aaPolicyYear >= FundTerm2028 && aaPolicyYear <= FundTermPrev2030 && aaMonth > MonthDiff2028 ){
        return factor4/100.00;
    }
    else if(aaPolicyYear == FundTerm2030 && aaMonth <= MonthDiff2030){
        return factor4/100.00;
    }
    else if(aaPolicyYear >= FundTerm2030 && aaPolicyYear <= FundTermPrev2035 && aaMonth > MonthDiff2030 ){
        return factor5/100.00;
    }
    else if(aaPolicyYear > FundTermPrev2035 && aaMonth <= MonthDiff2035){
        return factor5/100.00;
    }
    else if(aaPolicyYear > FundTermPrev2035 && aaMonth > MonthDiff2035){
        return factor6/100.00;
    }
    else{
        return (double)VUVentureIncomeFactor/100.00;
    }
}


-(double)ReturnVUVentureIncomeInstHigh :(int)aaPolicyYear  andMOP:(NSString *)aaMOP{
    NSString *MOP = strBumpMode;
    
    if ([aaMOP isEqualToString:@""]) {
        MOP = strBumpMode;
    }
    else{
        MOP = aaMOP;
    }
    
    if ([MOP isEqualToString:@"A"]) {
        if (aaPolicyYear <= 20) {
            return 0.0594;
        }
        else{
            return 0.041;
        }
    }
    else if ([MOP isEqualToString:@"S"]) {
        if (aaPolicyYear <= 20) {
            return 0.0443358;
        }
        else{
            return 0.030647;
        }
    }
    else if ([MOP isEqualToString:@"Q"]) {
        if (aaPolicyYear <= 20) {
            return 0.0368572;
        }
        else{
            return 0.0254963;
        }
    }
    else {
        if (aaPolicyYear <= 20) {
            return 0.0318914;
        }
        else{
            return 0.022072;
        }
    }
}

-(double)ReturnVUVentureIncomeInstMedian :(NSString *)aaMOP{
    
    NSString *MOP = strBumpMode;
    
    if ([aaMOP isEqualToString:@""]) {
        MOP = strBumpMode;
    }
    else{
        MOP = aaMOP;
    }
    
    if ([MOP isEqualToString:@"A"]) {
        return 0.0364;
    }
    else if ([MOP isEqualToString:@"S"]) {
        return 0.0272187;
    }
    else if ([MOP isEqualToString:@"Q"]) {
        return 0.0226483;
    }
    else {
        return 0.019609;
    }
}

-(double)ReturnVUVentureIncomeInstLow :(NSString *)aaMOP{
    
    NSString *MOP = strBumpMode;
    
    if ([aaMOP isEqualToString:@""]) {
        MOP = strBumpMode;
    }
    else{
        MOP = aaMOP;
    }
    
    if ([MOP isEqualToString:@"A"]) {
        return 0.0318;
    }
    else if ([MOP isEqualToString:@"S"]) {
        return 0.0237878;
    }
    else if ([MOP isEqualToString:@"Q"]) {
        return 0.0197972;
    }
    else {
        return 0.0171426;
    }
}


-(double)ReturnVUVenture6666Fac :(int)aaPolicyYear {
    double factor1 = 0.00;
    double factor2 = 0.00;
    double factor3 = 0.00;
    double factor4 = 0.00;
    double factor5 = 0.00;
    double factor6 = 0.00;
    
    if (VUVenture6666Factor > 0) {
        factor1 =(double)VUVenture6666Factor;
        factor2 = factor1 + (double)VU2023Factor * (double)(factor1/[self FactorGroup:2]);
        factor3 = factor2 + (double)VU2025Factor * (double)(factor2/[self FactorGroup:3]);
        factor4 = factor3 + (double)VU2028Factor * (double)(factor3/[self FactorGroup:4]);
        factor5 = factor4 + (double)VU2030Factor * (double)(factor4/[self FactorGroup:5]);
        factor6 = factor5 + (double)VU2035Factor * (double)(factor5/[self FactorGroup:6]);
    }
    else if (VUVenture6666OptFactor > 0){
        if ([self FactorGroup:2] == 0) {
            factor2 = (double)VUVenture6666OptFactor;
        }
        else{
            factor2 = 0.00;
        }
        
        if ([self FactorGroup:3] == 0) {
            factor3 = (double)VUVenture6666OptFactor;
        }
        else{
            factor3 = 0.00;
        }
        
        if ([self FactorGroup:4] == 0) {
            factor4 = (double)VUVenture6666OptFactor;
        }
        else{
            factor4 = 0.00;
        }
        
        if ([self FactorGroup:5] == 0) {
            factor5 = (double)VUVenture6666OptFactor;
        }
        else{
            factor5 = 0.00;
        }
        
        if ([self FactorGroup:6] == 0) {
            factor6 = (double)VUVenture6666OptFactor;
        }
        else{
            factor6 = 0.00;
        }
    }
    
    if (aaPolicyYear >= FundTerm2023 && aaPolicyYear <= FundTermPrev2025) {
        return factor2/100.00;
    }
    else if (aaPolicyYear >= FundTerm2025 && aaPolicyYear <= FundTermPrev2028) {
        return factor3/100.00;
    }
    else if (aaPolicyYear >= FundTerm2028 && aaPolicyYear <= FundTermPrev2030) {
        return factor4/100.00;
    }
    else if (aaPolicyYear >= FundTerm2030 && aaPolicyYear <= FundTermPrev2035) {
        return factor5/100.00;
    }
    else if (aaPolicyYear > FundTermPrev2035) {
        return factor6/100.00;
    }
    else{
        return (double)VUVenture6666Factor/100.00;
    }
}

-(double)ReturnVUVenture6666Fac :(int)aaPolicyYear andMonth:(int) aaMonth {
    double factor1 = 0.00;
    double factor2 = 0.00;
    double factor3 = 0.00;
    double factor4 = 0.00;
    double factor5 = 0.00;
    double factor6 = 0.00;
    
    if (VUVenture6666Factor > 0) {
        factor1 =(double)VUVenture6666Factor;
        factor2 = factor1 + (double)VU2023Factor * (factor1/[self FactorGroup:2]);
        factor3 = factor2 + (double)VU2025Factor * (factor2/[self FactorGroup:3]);
        factor4 = factor3 + (double)VU2028Factor * (factor3/[self FactorGroup:4]);
        factor5 = factor4 + (double)VU2030Factor * (factor4/[self FactorGroup:5]);
        factor6 = factor5 + (double)VU2035Factor * (factor5/[self FactorGroup:6]);
    }
    else if (VUVenture6666OptFactor > 0){
        if ([self FactorGroup:2] == 0) {
            factor2 = (double)VUVenture6666OptFactor;
        }
        else{
            factor2 = 0.00;
        }
        
        if ([self FactorGroup:3] == 0) {
            factor3 = (double)VUVenture6666OptFactor;
        }
        else{
            factor3 = 0.00;
        }
        
        if ([self FactorGroup:4] == 0) {
            factor4 = (double)VUVenture6666OptFactor;
        }
        else{
            factor4 = 0.00;
        }
        
        if ([self FactorGroup:5] == 0) {
            factor5 = (double)VUVenture6666OptFactor;
        }
        else{
            factor5 = 0.00;
        }
        
        if ([self FactorGroup:6] == 0) {
            factor6 = (double)VUVenture6666OptFactor;
        }
        else{
            factor6 = 0.00;
        }
    }
    
    if(aaPolicyYear >= FundTerm2023 && aaPolicyYear <= FundTermPrev2025 && aaMonth > MonthDiff2023 ){
        return factor2/100.00;
    }
    else if(aaPolicyYear == FundTerm2025 && aaMonth <= MonthDiff2023){
        return factor2/100.00;
    }
    else if(aaPolicyYear >= FundTerm2025 && aaPolicyYear <= FundTermPrev2028 && aaMonth > MonthDiff2025 ){
        return factor3/100.00;
    }
    else if(aaPolicyYear == FundTerm2028 && aaMonth <= MonthDiff2028){
        return factor3/100.00;
    }
    else if(aaPolicyYear >= FundTerm2028 && aaPolicyYear <= FundTermPrev2030 && aaMonth > MonthDiff2028 ){
        return factor4/100.00;
    }
    else if(aaPolicyYear == FundTerm2030 && aaMonth <= MonthDiff2030){
        return factor4/100.00;
    }
    else if(aaPolicyYear >= FundTerm2030 && aaPolicyYear <= FundTermPrev2035 && aaMonth > MonthDiff2030 ){
        return factor5/100.00;
    }
    else if(aaPolicyYear > FundTermPrev2035 && aaMonth <= MonthDiff2035){
        return factor5/100.00;
    }
    else if(aaPolicyYear > FundTermPrev2035 && aaMonth > MonthDiff2035){
        return factor6/100.00;
    }
    else{
        return (double)VUVenture6666Factor/100.00;
    }
}


-(double)ReturnVUVenture6666InstHigh :(int)aaPolicyYear  andMOP:(NSString *)aaMOP{
    NSString *MOP = strBumpMode;
    
    if ([aaMOP isEqualToString:@""]) {
        MOP = strBumpMode;
    }
    else{
        MOP = aaMOP;
    }
    
    if ([MOP isEqualToString:@"A"]) {
        if (aaPolicyYear <= 20) {
            return 0.05808;
        }
        else{
            return 0.03784;
        }
    }
    else if ([MOP isEqualToString:@"S"]) {
        if (aaPolicyYear <= 20) {
            return 0.0433551;
        }
        else{
            return 0.0282922;
        }
    }
    else if ([MOP isEqualToString:@"Q"]) {
        if (aaPolicyYear <= 20) {
            return 0.0360438;
        }
        else{
            return 0.0235402;
        }
    }
    else {
        if (aaPolicyYear <= 20) {
            return 0.0311887;
        }
        else{
            return 0.0203804;
        }
    }
}

-(double)ReturnVUVenture6666InstMedian :(NSString *)aaMOP{
    
    NSString *MOP = strBumpMode;
    
    if ([aaMOP isEqualToString:@""]) {
        MOP = strBumpMode;
    }
    else{
        MOP = aaMOP;
    }
    
    if ([MOP isEqualToString:@"A"]) {
        return 0.03324;
    }
    else if ([MOP isEqualToString:@"S"]) {
        return 0.0248621;
    }
    else if ([MOP isEqualToString:@"Q"]) {
        return 0.0206901;
    }
    else {
        return 0.0179151;
    }
}

-(double)ReturnVUVenture6666InstLow :(NSString *)aaMOP{
    
    NSString *MOP = strBumpMode;
    
    if ([aaMOP isEqualToString:@""]) {
        MOP = strBumpMode;
    }
    else{
        MOP = aaMOP;
    }
    
    if ([MOP isEqualToString:@"A"]) {
        return 0.02312;
    }
    else if ([MOP isEqualToString:@"S"]) {
        return 0.017307;
    }
    else if ([MOP isEqualToString:@"Q"]) {
        return 0.0144087;
    }
    else {
        return 0.0124796;
    }
}

-(double)ReturnVUVenture7777Fac :(int)aaPolicyYear {
    double factor1 = 0.00;
    double factor2 = 0.00;
    double factor3 = 0.00;
    double factor4 = 0.00;
    double factor5 = 0.00;
    double factor6 = 0.00;
    
    if (VUVenture7777Factor > 0) {
        factor1 =(double)VUVenture7777Factor;
        factor2 = factor1 + (double)VU2023Factor * (double)(factor1/[self FactorGroup:2]);
        factor3 = factor2 + (double)VU2025Factor * (double)(factor2/[self FactorGroup:3]);
        factor4 = factor3 + (double)VU2028Factor * (double)(factor3/[self FactorGroup:4]);
        factor5 = factor4 + (double)VU2030Factor * (double)(factor4/[self FactorGroup:5]);
        factor6 = factor5 + (double)VU2035Factor * (double)(factor5/[self FactorGroup:6]);
    }
    else if (VUVenture7777OptFactor > 0){
        if ([self FactorGroup:2] == 0) {
            factor2 = (double)VUVenture7777OptFactor;
        }
        else{
            factor2 = 0.00;
        }
        
        if ([self FactorGroup:3] == 0) {
            factor3 = (double)VUVenture7777OptFactor;
        }
        else{
            factor3 = 0.00;
        }
        
        if ([self FactorGroup:4] == 0) {
            factor4 = (double)VUVenture7777OptFactor;
        }
        else{
            factor4 = 0.00;
        }
        
        if ([self FactorGroup:5] == 0) {
            factor5 = (double)VUVenture7777OptFactor;
        }
        else{
            factor5 = 0.00;
        }
        
        if ([self FactorGroup:6] == 0) {
            factor6 = (double)VUVenture7777OptFactor;
        }
        else{
            factor6 = 0.00;
        }
    }
    
    if (aaPolicyYear >= FundTerm2023 && aaPolicyYear <= FundTermPrev2025) {
        return factor2/100.00;
    }
    else if (aaPolicyYear >= FundTerm2025 && aaPolicyYear <= FundTermPrev2028) {
        return factor3/100.00;
    }
    else if (aaPolicyYear >= FundTerm2028 && aaPolicyYear <= FundTermPrev2030) {
        return factor4/100.00;
    }
    else if (aaPolicyYear >= FundTerm2030 && aaPolicyYear <= FundTermPrev2035) {
        return factor5/100.00;
    }
    else if (aaPolicyYear > FundTermPrev2035) {
        return factor6/100.00;
    }
    else{
        return (double)VUVenture7777Factor/100.00;
    }
}

-(double)ReturnVUVenture7777Fac :(int)aaPolicyYear andMonth:(int) aaMonth {
    double factor1 = 0.00;
    double factor2 = 0.00;
    double factor3 = 0.00;
    double factor4 = 0.00;
    double factor5 = 0.00;
    double factor6 = 0.00;
    
    if (VUVenture7777Factor > 0) {
        factor1 =(double)VUVenture7777Factor;
        factor2 = factor1 + (double)VU2023Factor * (factor1/[self FactorGroup:2]);
        factor3 = factor2 + (double)VU2025Factor * (factor2/[self FactorGroup:3]);
        factor4 = factor3 + (double)VU2028Factor * (factor3/[self FactorGroup:4]);
        factor5 = factor4 + (double)VU2030Factor * (factor4/[self FactorGroup:5]);
        factor6 = factor5 + (double)VU2035Factor * (factor5/[self FactorGroup:6]);
    }
    else if (VUVenture7777OptFactor > 0){
        if ([self FactorGroup:2] == 0) {
            factor2 = (double)VUVenture7777OptFactor;
        }
        else{
            factor2 = 0.00;
        }
        
        if ([self FactorGroup:3] == 0) {
            factor3 = (double)VUVenture7777OptFactor;
        }
        else{
            factor3 = 0.00;
        }
        
        if ([self FactorGroup:4] == 0) {
            factor4 = (double)VUVenture7777OptFactor;
        }
        else{
            factor4 = 0.00;
        }
        
        if ([self FactorGroup:5] == 0) {
            factor5 = (double)VUVenture7777OptFactor;
        }
        else{
            factor5 = 0.00;
        }
        
        if ([self FactorGroup:6] == 0) {
            factor6 = (double)VUVenture7777OptFactor;
        }
        else{
            factor6 = 0.00;
        }
    }
    
    if(aaPolicyYear >= FundTerm2023 && aaPolicyYear <= FundTermPrev2025 && aaMonth > MonthDiff2023 ){
        return factor2/100.00;
    }
    else if(aaPolicyYear == FundTerm2025 && aaMonth <= MonthDiff2023){
        return factor2/100.00;
    }
    else if(aaPolicyYear >= FundTerm2025 && aaPolicyYear <= FundTermPrev2028 && aaMonth > MonthDiff2025 ){
        return factor3/100.00;
    }
    else if(aaPolicyYear == FundTerm2028 && aaMonth <= MonthDiff2028){
        return factor3/100.00;
    }
    else if(aaPolicyYear >= FundTerm2028 && aaPolicyYear <= FundTermPrev2030 && aaMonth > MonthDiff2028 ){
        return factor4/100.00;
    }
    else if(aaPolicyYear == FundTerm2030 && aaMonth <= MonthDiff2030){
        return factor4/100.00;
    }
    else if(aaPolicyYear >= FundTerm2030 && aaPolicyYear <= FundTermPrev2035 && aaMonth > MonthDiff2030 ){
        return factor5/100.00;
    }
    else if(aaPolicyYear > FundTermPrev2035 && aaMonth <= MonthDiff2035){
        return factor5/100.00;
    }
    else if(aaPolicyYear > FundTermPrev2035 && aaMonth > MonthDiff2035){
        return factor6/100.00;
    }
    else{
        return (double)VUVenture7777Factor/100.00;
    }
}


-(double)ReturnVUVenture7777InstHigh :(int)aaPolicyYear  andMOP:(NSString *)aaMOP{
    NSString *MOP = strBumpMode;
    
    if ([aaMOP isEqualToString:@""]) {
        MOP = strBumpMode;
    }
    else{
        MOP = aaMOP;
    }
    
    if ([MOP isEqualToString:@"A"]) {
        if (aaPolicyYear <= 20) {
            return 0.05808;
        }
        else{
            return 0.03784;
        }
    }
    else if ([MOP isEqualToString:@"S"]) {
        if (aaPolicyYear <= 20) {
            return 0.0433551;
        }
        else{
            return 0.0282922;
        }
    }
    else if ([MOP isEqualToString:@"Q"]) {
        if (aaPolicyYear <= 20) {
            return 0.0360438;
        }
        else{
            return 0.0235402;
        }
    }
    else {
        if (aaPolicyYear <= 20) {
            return 0.0311887;
        }
        else{
            return 0.0203804;
        }
    }
}

-(double)ReturnVUVenture7777InstMedian :(NSString *)aaMOP{
    
    NSString *MOP = strBumpMode;
    
    if ([aaMOP isEqualToString:@""]) {
        MOP = strBumpMode;
    }
    else{
        MOP = aaMOP;
    }
    
    if ([MOP isEqualToString:@"A"]) {
        return 0.03324;
    }
    else if ([MOP isEqualToString:@"S"]) {
        return 0.0248621;
    }
    else if ([MOP isEqualToString:@"Q"]) {
        return 0.0206901;
    }
    else {
        return 0.0179151;
    }
}

-(double)ReturnVUVenture7777InstLow :(NSString *)aaMOP{
    
    NSString *MOP = strBumpMode;
    
    if ([aaMOP isEqualToString:@""]) {
        MOP = strBumpMode;
    }
    else{
        MOP = aaMOP;
    }
    
    if ([MOP isEqualToString:@"A"]) {
        return 0.02312;
    }
    else if ([MOP isEqualToString:@"S"]) {
        return 0.017307;
    }
    else if ([MOP isEqualToString:@"Q"]) {
        return 0.0144087;
    }
    else {
        return 0.0124796;
    }
}

-(double)ReturnVUVenture8888Fac :(int)aaPolicyYear {
    double factor1 = 0.00;
    double factor2 = 0.00;
    double factor3 = 0.00;
    double factor4 = 0.00;
    double factor5 = 0.00;
    double factor6 = 0.00;
    
    if (VUVenture8888Factor > 0) {
        factor1 =(double)VUVenture8888Factor;
        factor2 = factor1 + (double)VU2023Factor * (double)(factor1/[self FactorGroup:2]);
        factor3 = factor2 + (double)VU2025Factor * (double)(factor2/[self FactorGroup:3]);
        factor4 = factor3 + (double)VU2028Factor * (double)(factor3/[self FactorGroup:4]);
        factor5 = factor4 + (double)VU2030Factor * (double)(factor4/[self FactorGroup:5]);
        factor6 = factor5 + (double)VU2035Factor * (double)(factor5/[self FactorGroup:6]);
    }
    else if (VUVenture8888OptFactor > 0){
        if ([self FactorGroup:2] == 0) {
            factor2 = (double)VUVenture8888OptFactor;
        }
        else{
            factor2 = 0.00;
        }
        
        if ([self FactorGroup:3] == 0) {
            factor3 = (double)VUVenture8888OptFactor;
        }
        else{
            factor3 = 0.00;
        }
        
        if ([self FactorGroup:4] == 0) {
            factor4 = (double)VUVenture8888OptFactor;
        }
        else{
            factor4 = 0.00;
        }
        
        if ([self FactorGroup:5] == 0) {
            factor5 = (double)VUVenture8888OptFactor;
        }
        else{
            factor5 = 0.00;
        }
        
        if ([self FactorGroup:6] == 0) {
            factor6 = (double)VUVenture8888OptFactor;
        }
        else{
            factor6 = 0.00;
        }
    }
    
    if (aaPolicyYear >= FundTerm2023 && aaPolicyYear <= FundTermPrev2025) {
        return factor2/100.00;
    }
    else if (aaPolicyYear >= FundTerm2025 && aaPolicyYear <= FundTermPrev2028) {
        return factor3/100.00;
    }
    else if (aaPolicyYear >= FundTerm2028 && aaPolicyYear <= FundTermPrev2030) {
        return factor4/100.00;
    }
    else if (aaPolicyYear >= FundTerm2030 && aaPolicyYear <= FundTermPrev2035) {
        return factor5/100.00;
    }
    else if (aaPolicyYear > FundTermPrev2035) {
        return factor6/100.00;
    }
    else{
        return (double)VUVenture8888Factor/100.00;
    }
}

-(double)ReturnVUVenture8888Fac :(int)aaPolicyYear andMonth:(int) aaMonth {
    double factor1 = 0.00;
    double factor2 = 0.00;
    double factor3 = 0.00;
    double factor4 = 0.00;
    double factor5 = 0.00;
    double factor6 = 0.00;
    
    if (VUVenture8888Factor > 0) {
        factor1 =(double)VUVenture8888Factor;
        factor2 = factor1 + (double)VU2023Factor * (factor1/[self FactorGroup:2]);
        factor3 = factor2 + (double)VU2025Factor * (factor2/[self FactorGroup:3]);
        factor4 = factor3 + (double)VU2028Factor * (factor3/[self FactorGroup:4]);
        factor5 = factor4 + (double)VU2030Factor * (factor4/[self FactorGroup:5]);
        factor6 = factor5 + (double)VU2035Factor * (factor5/[self FactorGroup:6]);
    }
    else if (VUVenture8888OptFactor > 0){
        if ([self FactorGroup:2] == 0) {
            factor2 = (double)VUVenture8888OptFactor;
        }
        else{
            factor2 = 0.00;
        }
        
        if ([self FactorGroup:3] == 0) {
            factor3 = (double)VUVenture8888OptFactor;
        }
        else{
            factor3 = 0.00;
        }
        
        if ([self FactorGroup:4] == 0) {
            factor4 = (double)VUVenture8888OptFactor;
        }
        else{
            factor4 = 0.00;
        }
        
        if ([self FactorGroup:5] == 0) {
            factor5 = (double)VUVenture8888OptFactor;
        }
        else{
            factor5 = 0.00;
        }
        
        if ([self FactorGroup:6] == 0) {
            factor6 = (double)VUVenture8888OptFactor;
        }
        else{
            factor6 = 0.00;
        }
    }
    
    if(aaPolicyYear >= FundTerm2023 && aaPolicyYear <= FundTermPrev2025 && aaMonth > MonthDiff2023 ){
        return factor2/100.00;
    }
    else if(aaPolicyYear == FundTerm2025 && aaMonth <= MonthDiff2023){
        return factor2/100.00;
    }
    else if(aaPolicyYear >= FundTerm2025 && aaPolicyYear <= FundTermPrev2028 && aaMonth > MonthDiff2025 ){
        return factor3/100.00;
    }
    else if(aaPolicyYear == FundTerm2028 && aaMonth <= MonthDiff2028){
        return factor3/100.00;
    }
    else if(aaPolicyYear >= FundTerm2028 && aaPolicyYear <= FundTermPrev2030 && aaMonth > MonthDiff2028 ){
        return factor4/100.00;
    }
    else if(aaPolicyYear == FundTerm2030 && aaMonth <= MonthDiff2030){
        return factor4/100.00;
    }
    else if(aaPolicyYear >= FundTerm2030 && aaPolicyYear <= FundTermPrev2035 && aaMonth > MonthDiff2030 ){
        return factor5/100.00;
    }
    else if(aaPolicyYear > FundTermPrev2035 && aaMonth <= MonthDiff2035){
        return factor5/100.00;
    }
    else if(aaPolicyYear > FundTermPrev2035 && aaMonth > MonthDiff2035){
        return factor6/100.00;
    }
    else{
        return (double)VUVenture8888Factor/100.00;
    }
}


-(double)ReturnVUVenture8888InstHigh :(int)aaPolicyYear  andMOP:(NSString *)aaMOP{
    NSString *MOP = strBumpMode;
    
    if ([aaMOP isEqualToString:@""]) {
        MOP = strBumpMode;
    }
    else{
        MOP = aaMOP;
    }
    
    if ([MOP isEqualToString:@"A"]) {
        if (aaPolicyYear <= 20) {
            return 0.05808;
        }
        else{
            return 0.03784;
        }
    }
    else if ([MOP isEqualToString:@"S"]) {
        if (aaPolicyYear <= 20) {
            return 0.0433551;
        }
        else{
            return 0.0282922;
        }
    }
    else if ([MOP isEqualToString:@"Q"]) {
        if (aaPolicyYear <= 20) {
            return 0.0360438;
        }
        else{
            return 0.0235402;
        }
    }
    else {
        if (aaPolicyYear <= 20) {
            return 0.0311887;
        }
        else{
            return 0.0203804;
        }
    }
}

-(double)ReturnVUVenture8888InstMedian :(NSString *)aaMOP{
    
    NSString *MOP = strBumpMode;
    
    if ([aaMOP isEqualToString:@""]) {
        MOP = strBumpMode;
    }
    else{
        MOP = aaMOP;
    }
    
    if ([MOP isEqualToString:@"A"]) {
        return 0.03324;
    }
    else if ([MOP isEqualToString:@"S"]) {
        return 0.0248621;
    }
    else if ([MOP isEqualToString:@"Q"]) {
        return 0.0206901;
    }
    else {
        return 0.0179151;
    }
}

-(double)ReturnVUVenture8888InstLow :(NSString *)aaMOP{
    
    NSString *MOP = strBumpMode;
    
    if ([aaMOP isEqualToString:@""]) {
        MOP = strBumpMode;
    }
    else{
        MOP = aaMOP;
    }
    
    if ([MOP isEqualToString:@"A"]) {
        return 0.02312;
    }
    else if ([MOP isEqualToString:@"S"]) {
        return 0.017307;
    }
    else if ([MOP isEqualToString:@"Q"]) {
        return 0.0144087;
    }
    else {
        return 0.0124796;
    }
}

-(double)ReturnVUVenture9999Fac :(int)aaPolicyYear {
    double factor1 = 0.00;
    double factor2 = 0.00;
    double factor3 = 0.00;
    double factor4 = 0.00;
    double factor5 = 0.00;
    double factor6 = 0.00;
    
    if (VUVenture9999Factor > 0) {
        factor1 =(double)VUVenture9999Factor;
        factor2 = factor1 + (double)VU2023Factor * (double)(factor1/[self FactorGroup:2]);
        factor3 = factor2 + (double)VU2025Factor * (double)(factor2/[self FactorGroup:3]);
        factor4 = factor3 + (double)VU2028Factor * (double)(factor3/[self FactorGroup:4]);
        factor5 = factor4 + (double)VU2030Factor * (double)(factor4/[self FactorGroup:5]);
        factor6 = factor5 + (double)VU2035Factor * (double)(factor5/[self FactorGroup:6]);
    }
    else if (VUVenture9999OptFactor > 0){
        if ([self FactorGroup:2] == 0) {
            factor2 = (double)VUVenture9999OptFactor;
        }
        else{
            factor2 = 0.00;
        }
        
        if ([self FactorGroup:3] == 0) {
            factor3 = (double)VUVenture9999OptFactor;
        }
        else{
            factor3 = 0.00;
        }
        
        if ([self FactorGroup:4] == 0) {
            factor4 = (double)VUVenture9999OptFactor;
        }
        else{
            factor4 = 0.00;
        }
        
        if ([self FactorGroup:5] == 0) {
            factor5 = (double)VUVenture9999OptFactor;
        }
        else{
            factor5 = 0.00;
        }
        
        if ([self FactorGroup:6] == 0) {
            factor6 = (double)VUVenture9999OptFactor;
        }
        else{
            factor6 = 0.00;
        }
    }
    
    if (aaPolicyYear >= FundTerm2023 && aaPolicyYear <= FundTermPrev2025) {
        return factor2/100.00;
    }
    else if (aaPolicyYear >= FundTerm2025 && aaPolicyYear <= FundTermPrev2028) {
        return factor3/100.00;
    }
    else if (aaPolicyYear >= FundTerm2028 && aaPolicyYear <= FundTermPrev2030) {
        return factor4/100.00;
    }
    else if (aaPolicyYear >= FundTerm2030 && aaPolicyYear <= FundTermPrev2035) {
        return factor5/100.00;
    }
    else if (aaPolicyYear > FundTermPrev2035) {
        return factor6/100.00;
    }
    else{
        return (double)VUVenture9999Factor/100.00;
    }
}

-(double)ReturnVUVenture9999Fac :(int)aaPolicyYear andMonth:(int) aaMonth {
    double factor1 = 0.00;
    double factor2 = 0.00;
    double factor3 = 0.00;
    double factor4 = 0.00;
    double factor5 = 0.00;
    double factor6 = 0.00;
    
    if (VUVenture9999Factor > 0) {
        factor1 =(double)VUVenture9999Factor;
        factor2 = factor1 + (double)VU2023Factor * (factor1/[self FactorGroup:2]);
        factor3 = factor2 + (double)VU2025Factor * (factor2/[self FactorGroup:3]);
        factor4 = factor3 + (double)VU2028Factor * (factor3/[self FactorGroup:4]);
        factor5 = factor4 + (double)VU2030Factor * (factor4/[self FactorGroup:5]);
        factor6 = factor5 + (double)VU2035Factor * (factor5/[self FactorGroup:6]);
    }
    else if (VUVenture9999OptFactor > 0){
        if ([self FactorGroup:2] == 0) {
            factor2 = (double)VUVenture9999OptFactor;
        }
        else{
            factor2 = 0.00;
        }
        
        if ([self FactorGroup:3] == 0) {
            factor3 = (double)VUVenture9999OptFactor;
        }
        else{
            factor3 = 0.00;
        }
        
        if ([self FactorGroup:4] == 0) {
            factor4 = (double)VUVenture9999OptFactor;
        }
        else{
            factor4 = 0.00;
        }
        
        if ([self FactorGroup:5] == 0) {
            factor5 = (double)VUVenture9999OptFactor;
        }
        else{
            factor5 = 0.00;
        }
        
        if ([self FactorGroup:6] == 0) {
            factor6 = (double)VUVenture9999OptFactor;
        }
        else{
            factor6 = 0.00;
        }
    }
    
    if(aaPolicyYear >= FundTerm2023 && aaPolicyYear <= FundTermPrev2025 && aaMonth > MonthDiff2023 ){
        return factor2/100.00;
    }
    else if(aaPolicyYear == FundTerm2025 && aaMonth <= MonthDiff2023){
        return factor2/100.00;
    }
    else if(aaPolicyYear >= FundTerm2025 && aaPolicyYear <= FundTermPrev2028 && aaMonth > MonthDiff2025 ){
        return factor3/100.00;
    }
    else if(aaPolicyYear == FundTerm2028 && aaMonth <= MonthDiff2028){
        return factor3/100.00;
    }
    else if(aaPolicyYear >= FundTerm2028 && aaPolicyYear <= FundTermPrev2030 && aaMonth > MonthDiff2028 ){
        return factor4/100.00;
    }
    else if(aaPolicyYear == FundTerm2030 && aaMonth <= MonthDiff2030){
        return factor4/100.00;
    }
    else if(aaPolicyYear >= FundTerm2030 && aaPolicyYear <= FundTermPrev2035 && aaMonth > MonthDiff2030 ){
        return factor5/100.00;
    }
    else if(aaPolicyYear > FundTermPrev2035 && aaMonth <= MonthDiff2035){
        return factor5/100.00;
    }
    else if(aaPolicyYear > FundTermPrev2035 && aaMonth > MonthDiff2035){
        return factor6/100.00;
    }
    else{
        return (double)VUVenture9999Factor/100.00;
    }
}


-(double)ReturnVUVenture9999InstHigh :(int)aaPolicyYear  andMOP:(NSString *)aaMOP{
    NSString *MOP = strBumpMode;
    
    if ([aaMOP isEqualToString:@""]) {
        MOP = strBumpMode;
    }
    else{
        MOP = aaMOP;
    }
    
    if ([MOP isEqualToString:@"A"]) {
        if (aaPolicyYear <= 20) {
            return 0.05808;
        }
        else{
            return 0.03784;
        }
    }
    else if ([MOP isEqualToString:@"S"]) {
        if (aaPolicyYear <= 20) {
            return 0.0433551;
        }
        else{
            return 0.0282922;
        }
    }
    else if ([MOP isEqualToString:@"Q"]) {
        if (aaPolicyYear <= 20) {
            return 0.0360438;
        }
        else{
            return 0.0235402;
        }
    }
    else {
        if (aaPolicyYear <= 20) {
            return 0.0311887;
        }
        else{
            return 0.0203804;
        }
    }
}

-(double)ReturnVUVenture9999InstMedian :(NSString *)aaMOP{
    
    NSString *MOP = strBumpMode;
    
    if ([aaMOP isEqualToString:@""]) {
        MOP = strBumpMode;
    }
    else{
        MOP = aaMOP;
    }
    
    if ([MOP isEqualToString:@"A"]) {
        return 0.03324;
    }
    else if ([MOP isEqualToString:@"S"]) {
        return 0.0248621;
    }
    else if ([MOP isEqualToString:@"Q"]) {
        return 0.0206901;
    }
    else {
        return 0.0179151;
    }
}

-(double)ReturnVUVenture9999InstLow :(NSString *)aaMOP{
    
    NSString *MOP = strBumpMode;
    
    if ([aaMOP isEqualToString:@""]) {
        MOP = strBumpMode;
    }
    else{
        MOP = aaMOP;
    }
    
    if ([MOP isEqualToString:@"A"]) {
        return 0.02312;
    }
    else if ([MOP isEqualToString:@"S"]) {
        return 0.017307;
    }
    else if ([MOP isEqualToString:@"Q"]) {
        return 0.0144087;
    }
    else {
        return 0.0124796;
    }
}



-(double)ReturnLoyaltyBonus :(int)aaPolicyYear{
	if (aaPolicyYear == 7) {
		return 0.04;
	}
	else if (aaPolicyYear == 8){
		return 0.08;
	}
	else if (aaPolicyYear == 9){
		return 0.12;
	}
	else if (aaPolicyYear == 10){
		return 0.16;
	}
	else if (aaPolicyYear > 10){
		return 0.2;
	}
	else{
		return 0;
	}
}

-(int)ReturnLoyaltyBonusFactor: (int)aaMonth{
	if (aaMonth == 1) {
		return 1;
	}
	else{
		return 0;
	}
}

-(double)ReturnPremiumFactor: (int)aaMonth{
	NSString *MOP = strBumpMode;
	
	if ([MOP isEqualToString:@"A" ]) {
		if (aaMonth == 1) {
			return 1.00;
		}
		else{
			return 0;
		}
	}
	else if([MOP isEqualToString:@"S" ]) {
		if (aaMonth == 1 || aaMonth == 7 ) {
			return 0.5;
		}
		else{
			return 0;
		}
	}
	else if([MOP isEqualToString:@"Q" ]) {
		if (aaMonth == 1 || aaMonth == 4 || aaMonth == 7 || aaMonth == 10 ) {
			return 0.25;
		}
		else{
			return 0;
		}
	}
	else {
		return 1.00/12.00;
	}
	
}

-(void)CalcYearDiff{
	NSDateFormatter* df = [[NSDateFormatter alloc] init];
	[df setDateFormat:@"dd/MM/yyyy"];
	NSDate* d = [df dateFromString:getPlanCommDate];
	NSDate* d2 = [df dateFromString:@"26/12/2023"];
	NSDate* d3 = [df dateFromString:@"26/12/2025"];
	NSDate* d4 = [df dateFromString:@"26/12/2028"];
	NSDate* d5 = [df dateFromString:@"26/12/2030"];
	NSDate* d6 = [df dateFromString:@"26/12/2035"];
	NSDate *fromDate;
    NSDate *toDate2;
	NSDate *toDate3;
	NSDate *toDate4;
	NSDate *toDate5;
	NSDate *toDate6;    
        
    NSCalendar *calendar = [NSCalendar currentCalendar];
	
    [calendar rangeOfUnit:NSDayCalendarUnit startDate:&fromDate
				 interval:NULL forDate:d];
    [calendar rangeOfUnit:NSDayCalendarUnit startDate:&toDate2
				 interval:NULL forDate:d2];
	[calendar rangeOfUnit:NSDayCalendarUnit startDate:&toDate3
				 interval:NULL forDate:d3];
	[calendar rangeOfUnit:NSDayCalendarUnit startDate:&toDate4
				 interval:NULL forDate:d4];
	[calendar rangeOfUnit:NSDayCalendarUnit startDate:&toDate5
				 interval:NULL forDate:d5];
	[calendar rangeOfUnit:NSDayCalendarUnit startDate:&toDate6
				 interval:NULL forDate:d6];
	
    NSDateComponents *difference2 = [calendar components:NSDayCalendarUnit
												fromDate:fromDate toDate:toDate2 options:0];
    NSDateComponents *difference3 = [calendar components:NSDayCalendarUnit
												fromDate:fromDate toDate:toDate3 options:0];
    NSDateComponents *difference4 = [calendar components:NSDayCalendarUnit
												fromDate:fromDate toDate:toDate4 options:0];
    NSDateComponents *difference5 = [calendar components:NSDayCalendarUnit
												fromDate:fromDate toDate:toDate5 options:0];
    NSDateComponents *difference6 = [calendar components:NSDayCalendarUnit
												fromDate:fromDate toDate:toDate6 options:0];
	
	
	NSString *round2 = [NSString stringWithFormat:@"%.2f", [difference2 day]/365.25];
	NSString *round3 = [NSString stringWithFormat:@"%.2f", [difference3 day]/365.25];
	NSString *round4 = [NSString stringWithFormat:@"%.2f", [difference4 day]/365.25];
	NSString *round5 = [NSString stringWithFormat:@"%.2f", [difference5 day]/365.25];
	NSString *round6 = [NSString stringWithFormat:@"%.2f", [difference6 day]/365.25];
	
	
	//YearDiff2023 = round([round2 doubleValue]);
	//YearDiff2025 = round([round3 doubleValue]);
	//YearDiff2028 = round([round4 doubleValue]);
	//YearDiff2030 = round([round5 doubleValue]);
	//YearDiff2035 = round([round6 doubleValue]);
	
	YearDiff2023 = ceil([round2 doubleValue]);  
	YearDiff2025 = ceil([round3 doubleValue]);
	YearDiff2028 = ceil([round4 doubleValue]);
	YearDiff2030 = ceil([round5 doubleValue]);
	YearDiff2035 = ceil([round6 doubleValue]);
	
	FundTermPrev2023 = YearDiff2023 - 1;
	FundTerm2023 = YearDiff2023;
	FundTermPrev2025 = YearDiff2025 - 1;
	FundTerm2025 = YearDiff2025;
	FundTermPrev2028 = YearDiff2028 - 1;
	FundTerm2028 = YearDiff2028;
	FundTermPrev2030 = YearDiff2030 - 1;
	FundTerm2030 = YearDiff2030;
	FundTermPrev2035 = YearDiff2035 - 1;
	FundTerm2035 = YearDiff2035;
	
	MonthDiff2023 = ceil(([round2 doubleValue ] - (YearDiff2023 - 1))/(1.00/12.00));
	MonthDiff2025 = ceil(([round3 doubleValue ] - (YearDiff2025 - 1))/(1.00/12.00));
	MonthDiff2028 = ceil(([round4 doubleValue ] - (YearDiff2028 - 1))/(1.00/12.00));
	MonthDiff2030 = ceil(([round5 doubleValue ] - (YearDiff2030 - 1))/(1.00/12.00));
	MonthDiff2035 = ceil(([round6 doubleValue ] - (YearDiff2035 - 1))/(1.00/12.00));
	
	NSLog(@"yeardiff2023:%d, yeardiff2025:%d, yeardiff2028:%d, yeardiff2030:%d,yeardiff2035:%d ", YearDiff2023,YearDiff2025,
		  YearDiff2028, YearDiff2030, YearDiff2035);
	
	
	if (MonthDiff2023 == 12) {
		Allo2023 = YearDiff2023 + 1;
	}
	else{
		Allo2023 = YearDiff2023;
	}
	
	if (MonthDiff2025 == 12) {
		Allo2025 = YearDiff2025 + 1;
	}
	else{
		Allo2025 = YearDiff2025;
	}
	
	if (MonthDiff2028 == 12) {
		Allo2028 = YearDiff2028 + 1;
	}
	else{
		Allo2028 = YearDiff2028;
	}
	
	if (MonthDiff2030 == 12) {
		Allo2030 = YearDiff2030 + 1;
	}
	else{
		Allo2030 = YearDiff2030;
	}
	
	if (MonthDiff2035 == 12) {
		Allo2035 = YearDiff2035 + 1;
	}
	else{
		Allo2035 = YearDiff2035;
	}
	
	
	NSDate* aa = [df dateFromString:getPlanCommDate];
	NSDateComponents* components2 = [calendar components:NSYearCalendarUnit|NSMonthCalendarUnit|NSDayCalendarUnit
												fromDate:aa];
	CommMonth = [components2 month];
}

-(double)ReturnModeRate: (NSString *)MOP{
	if ([MOP isEqualToString:@"A"]) {
		return 0.85;
	}
	else if ([MOP isEqualToString:@"S"]){
		return 0.9;
	}
	else if ([MOP isEqualToString:@"Q"]){
		return 0.9;
	}
	else{
		return 0.95;
	}
}

-(double)ReturnExcessPrem: (int)aaPolicyYear{
	if ([strRTUPAmount isEqualToString:@""]) {
		return 0;
	}
	else {
		if (aaPolicyYear > [strRTUPFrom intValue ] && aaPolicyYear <= [strRTUPFrom intValue] + [strRTUPFor intValue] ) {
            if ([strBumpMode isEqualToString:@"A"]) {
                return [strRTUPAmount doubleValue ];
            }
            else if ([strBumpMode isEqualToString:@"S"]) {
                return [strRTUPAmount doubleValue ]/0.5;
            }
            else if ([strBumpMode isEqualToString:@"Q"]) {
                return [strRTUPAmount doubleValue ]/0.25;
            }
            else {
                return [strRTUPAmount doubleValue ]/0.0833333;
            }
		}
		else{
			return 0;
		}
	}
}

-(double)ReturnDivideMode{
	if ([strBumpMode isEqualToString:@"A"]) {
		return 1.00;
	}
	else if ([strBumpMode isEqualToString:@"S"]) {
		return 2.00;
	}
	else if ([strBumpMode isEqualToString:@"Q"]) {
		return 4.00;
	}
	else{
		return 12.00;
	}
}

-(double)ReturnPremAllocation: (int)aaPolYear{
	if (aaPolYear == 1) {
		if ([strBasicPremium doubleValue ] >= 12000 && [strBasicPremium doubleValue ] < 24000 ) {
			return 0.45 + 0.02;
		}
		else if ([strBasicPremium doubleValue ] >= 24000){
			return 0.45 + 0.04;
		}
		else{
			return 0.45;
		}
	}
	else if (aaPolYear == 2){
		if ([strBasicPremium doubleValue ] >= 12000 && [strBasicPremium doubleValue ] < 24000 ) {
			return 0.5 + 0.02;
		}
		else if ([strBasicPremium doubleValue ] >= 24000){
			return 0.5 + 0.04;
		}
		else{
			return 0.5;
		}
		
	}
	else if (aaPolYear == 3){
		return 0.76;
	}
	else if (aaPolYear == 4){
		return 0.76;
	}
	else if (aaPolYear >=5 && aaPolYear < 7){
		return 0.9;
	}
	else{
		return 1.00;
	}
}

-(double)ReturnPremAllocation_V: (int)aaPolYear{
	if (aaPolYear == 1) {
		if ([strBasicPremium doubleValue ] >= 12000 && [strBasicPremium doubleValue ] < 24000 ) {
			return 0.4 + 0.02;
		}
		else if ([strBasicPremium doubleValue ] >= 24000){
			return 0.4 + 0.04;
		}
		else{
			return 0.4;
		}
	}
	else if (aaPolYear == 2){
		if ([strBasicPremium doubleValue ] >= 12000 && [strBasicPremium doubleValue ] < 24000 ) {
			return 0.52 + 0.02;
		}
		else if ([strBasicPremium doubleValue ] >= 24000){
			return 0.52 + 0.04;
		}
		else{
			return 0.52;
		}
		
	}
	else if (aaPolYear == 3){
		return 0.785;
	}
	else if (aaPolYear == 4){
		return 0.835;
	}
	else if (aaPolYear >=5 && aaPolYear < 7){
		return 0.925;
	}
	else{
		return 1.00;
	}
}


-(double)ReturnBasicMort: (int)zzAge{
	NSString *MortRate;
	sqlite3_stmt *statement;
	NSString *querySQL;
    
	querySQL = [NSString stringWithFormat:@"Select Rate From ES_Sys_Basic_Mort WHERE PlanCode = '%@' AND Sex = '%@' AND Age='%d' AND Smoker ='%@' "
				,getPlanCode, getSexLA, zzAge, getSmokerLA];
	
	//NSLog(@"%@", querySQL);
	if (sqlite3_open([UL_RatesDatabasePath UTF8String], &contactDB) == SQLITE_OK){
		if(sqlite3_prepare_v2(contactDB, [querySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
			if (sqlite3_step(statement) == SQLITE_ROW){
				MortRate = [[NSString alloc] initWithUTF8String:(const char *)sqlite3_column_text(statement, 0)];
			}
			sqlite3_finalize(statement);
		}
		sqlite3_close(contactDB);
	}
	
	return [MortRate doubleValue];
}

-(int)GetMortDate{
	
	
	if (![getPlanCommDate isEqualToString:@""] && ![getDOB isEqualToString:@""]  ) {
		
		NSDateFormatter* df = [[NSDateFormatter alloc] init];
		[df setDateFormat:@"dd/MM/yyyy"];
     	NSDate* d = [[df dateFromString:getDOB] dateByAddingTimeInterval:8*60*60 - 1800 ];
		NSDate* d2 = [[df dateFromString:getPlanCommDate]dateByAddingTimeInterval:8*60*60  ];
		
		NSCalendar* calendar = [NSCalendar currentCalendar];
		NSDateComponents* components = [calendar components:NSYearCalendarUnit|NSMonthCalendarUnit|NSDayCalendarUnit
												   fromDate:d];
		NSDateComponents* components2 = [calendar components:NSYearCalendarUnit|NSMonthCalendarUnit|NSDayCalendarUnit
													fromDate:d2];
		
		if ([components month] == [components2 month] && [components day] == [components2 day]) {
			return 12;
		}
		else{
            
            if (IsEDD == TRUE) {
                return ([self monthsBetweenDate:d andDate:d2])%12;
            }
            else
            {
                return 12 - ([self monthsBetweenDate:d andDate:d2])%12;
            }
			
		}
	}
	else{
		NSLog(@"error, no DOB and plan Comm date");
		return -1;
	}
}

- (NSUInteger)monthsBetweenDate:(NSDate*)fromDateTime andDate:(NSDate*)toDateTime
{
    NSDate *fromDate;
    NSDate *toDate;
	
    NSCalendar *calendar = [NSCalendar currentCalendar];
	//NSLog(@"%@ %@", fromDateTime, toDateTime);
	
    [calendar rangeOfUnit:NSMonthCalendarUnit startDate:&fromDate
				 interval:NULL forDate:fromDateTime];
    [calendar rangeOfUnit:NSMonthCalendarUnit startDate:&toDate
				 interval:NULL forDate:toDateTime];
	
    NSDateComponents *difference = [calendar components:NSMonthCalendarUnit
											   fromDate:fromDate toDate:toDate options:0];
	
    
	NSLog(@"%d", [difference month]);
    return [difference month];
}

- (NSInteger)daysBetweenDate:(NSDate*)fromDateTime andDate:(NSDate*)toDateTime
{
    NSDate *fromDate;
    NSDate *toDate;
	
    NSCalendar *calendar = [NSCalendar currentCalendar];
	
    [calendar rangeOfUnit:NSDayCalendarUnit startDate:&fromDate
				 interval:NULL forDate:fromDateTime];
    [calendar rangeOfUnit:NSDayCalendarUnit startDate:&toDate
				 interval:NULL forDate:toDateTime];
	
    NSDateComponents *difference = [calendar components:NSDayCalendarUnit
											   fromDate:fromDate toDate:toDate options:0];
    
    return [difference day];
}

-(NSInteger)roundUp :(double)aaDouble{
	return round(ceil(aaDouble));
}

-(NSInteger)roundDown :(double)aaDouble{
	return round(floor(aaDouble));
}

-(double)ReturnJuvenilienFactor :(int)aaAge{
	if (aaAge >= 0 && aaAge <= 1 ) {
		return 0.2;
	}
	else if (aaAge == 2 ) {
		return 0.4;
	}
	else if (aaAge == 3 ) {
		return 0.6;
	}
	else if (aaAge == 4 ) {
		return 0.8;
	}
	else{
		return 1.00;
	}
}

-(void)CheckSustainForNegativeBump :(double)aaBumpValue{
	double modeRate = 0.00;
	int RTUOPremium = 0.00;
	
	/*
    if ([strBumpMode isEqualToString:@"A"]) {
        modeRate = 1.00;
    }
    else if ([strBumpMode isEqualToString:@"S"]) {
        modeRate = 0.9;
    }
    else if ([strBumpMode isEqualToString:@"Q"]) {
        modeRate = 0.9;
    }
    else {
        modeRate = 0.8;
    }
    */
    modeRate = [self ReturnModeRate:strBumpMode];
    
    NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
    [formatter setNumberStyle:NSNumberFormatterCurrencyStyle];
    [formatter setCurrencySymbol:@""];
    [formatter setNegativeFormat:@"-"];
    [formatter setRoundingMode:NSNumberFormatterRoundHalfUp];
    
    //int tempRTUO = ceil(ABS(aaBumpValue/(0.85 * 0.95)) * modeRate); 20150129
    int tempRTUO = ceil(ABS(aaBumpValue/(modeRate * 0.95)) * modeRate);
    RTUOPremium = 10 * (tempRTUO % 10 > 0 ? ceil(tempRTUO/10.00) : (tempRTUO/10.00 + 1.00) );
    
    strGrayRTUPAmount =  [NSString stringWithFormat:@"%d", RTUOPremium + [strGrayRTUPAmount intValue] ];
    
    CurrentBump = [self CalculateBUMP];
    
    if (CurrentBump > 0 ) {
        [self UpdateUL_Details];
    }
    else{
        for (int i = 0; i < 5; i++) {
            
            tempRTUO = ceil(ABS(CurrentBump/(modeRate * 0.95)) * modeRate);
            RTUOPremium = 10 * (tempRTUO % 10 > 0 ? ceil(tempRTUO/10.00) : (tempRTUO/10.00 + 1.00) );
            
            strGrayRTUPAmount = [NSString stringWithFormat:@"%d", ([strGrayRTUPAmount integerValue] +  RTUOPremium)];

            CurrentBump = [self CalculateBUMP];
            
            if (CurrentBump > 0) {
                //strGrayRTUPAmount =  @"100" ;
                [self UpdateUL_Details];
                break;
            }
        }
    }
    

	
	
	
	
	
	//NSLog(@"%@", [self ErrorMsg:@"R0" andInput1:[NSString stringWithFormat:@"%d", RTUOPremium ] andInput2:@"" andInput3:@""]);
	
}

-(void)UpdateUL_Details{
	sqlite3_stmt *statement;
	NSString *querySQL;
	
	querySQL = [NSString stringWithFormat:@"Update UL_Details SET Atu = '%@' WHERE sino = '%@' ", strGrayRTUPAmount, SINo];
	
	//NSLog(@"%@", querySQL);
	if (sqlite3_open([databasePath UTF8String], &contactDB) == SQLITE_OK){
		if(sqlite3_prepare_v2(contactDB, [querySQL UTF8String], -1, &statement, NULL) == SQLITE_OK) {
			if (sqlite3_step(statement) == SQLITE_DONE){
				
			}
			sqlite3_finalize(statement);
		}
		sqlite3_close(contactDB);
	}
}

-(double)PremRequired{
	return PremReq;
}

-(double)FromBasic:(NSString *)aaATPrem andGetHL:(NSString *)aaGetHL andGetHLPct:(NSString *)aaGetHLPct
	   andBumpMode:(NSString *)aaBumpMode andBasicSA:(NSString *)aaBasicSA
	   andRTUPFrom:(NSString *)aaRTUPFrom andRTUPFor:(NSString *)aaRTUPFor andRTUPAmount:(NSString *)aaRTUPAmount
	   andSmokerLA:(NSString *)aaSmokerLA andOccLoading:(NSString *)aaOccLoading andPlanCommDate:(NSString *)aaPlanCommDate
			andDOB:(NSString *)aaDOB andSexLA:(NSString *)aaSexLA andSino:(NSString *)aaSino andLAAge:(int)aaLAAge
	   andGrayRTUO:(double)aaGrayRTUO andPlanCode:(NSString *)aaPlanCode{
	
	NSArray *dirPaths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);
    NSString *docsDir = [dirPaths objectAtIndex:0];
    databasePath = [[NSString alloc] initWithString: [docsDir stringByAppendingPathComponent: @"hladb.sqlite"]];
    UL_RatesDatabasePath = [[NSString alloc] initWithString: [docsDir stringByAppendingPathComponent: @"UL_Rates.sqlite"]];
	
	strBasicPremium = aaATPrem;
	strBasicPremium_Bump = strBasicPremium;
	getHL = aaGetHL;
	getHLPct = aaGetHLPct;
	strBumpMode = aaBumpMode;
	strBasicSA = aaBasicSA;
	BasicSA = [aaBasicSA doubleValue];
	strRTUPFrom = aaRTUPFrom;
	strRTUPFor = aaRTUPFor;
	strRTUPAmount = aaRTUPAmount;
	getSmokerLA = aaSmokerLA;
	getOccLoading = aaOccLoading;
	getPlanCommDate = aaPlanCommDate;
	getDOB = aaDOB;
	getSexLA = aaSexLA;
	SINo = aaSino;
	Age = aaLAAge;
	getPlanCode = aaPlanCode;
	strGrayRTUPAmount = [NSString stringWithFormat:@"%f", aaGrayRTUO];
	
	NSLog(@"%@ %@ %@ %@ %@ %@ %@ %@ %@ %@ %@ %@ %@ %@ %d %f", aaATPrem, aaGetHL, aaGetHLPct, aaBumpMode, aaBasicSA, aaRTUPFrom, aaRTUPFor,
		  aaRTUPAmount, aaSmokerLA, aaOccLoading, aaPlanCommDate, aaDOB, aaSexLA, aaSino, aaLAAge, aaGrayRTUO);
	SimpleOrDetail = @"Simple";
	[self PopulateData];
	
	return [self CalculateBUMP];
}

-(NSString *)ErrorMsg :(NSString *)aaCode andInput1:(NSString *)aaInput1 andInput2:(NSString *)aaInput2 andInput3:(NSString *)aaInput3 {
	if ([aaCode isEqual:@"X1"]) {
		return  [NSString stringWithFormat:@"%@The Rider Unit Account is projected to be able to sustain up to %@th policy year only based on BULL scenario.",aaCode, aaInput1 ];
	}
	else if([aaCode isEqual:@"X2"]){
		return  [NSString stringWithFormat:@"%@The Basic Unit Account is projected to be able to sustain up to %@th policy year only based on BULL scenario",aaCode,aaInput1 ];
	}
	else if([aaCode isEqual:@"X3"]){
		return  [NSString stringWithFormat:@"%@The Basic Unit Account and Rider Unit Account are projected to be able to sustain up to %@th and %@th policy year only respectively,"
				 "based on BULL scenario.",aaCode,aaInput1, aaInput2];
	}
	else if([aaCode isEqual:@"Y1"]){
		return  [NSString stringWithFormat:@"%@The Rider Unit Account is projected to be able to sustain up to %@th policy year only based on BULL scenario. "
				 "Generation of SI & PDS is not allowed if Rider Unit Account lapse before 10th policy year. You may increase your Rider Unit Account sustainability year by:\n"
				 "1. Reinvesting your matured fund value fully partially (option at fund maturity).\n"
				 "2. Adding Rider Regular Top Up.",aaCode, aaInput1 ];
	}
	else if([aaCode isEqual:@"Y2"]){
		return  [NSString stringWithFormat:@"%@The Basic Unit Account is projected to be able to sustain up to %@th policy year only based on BULL scenario. "
				 "Generation of SI & PDS is not allowed if Basic Unit Account lapse before 10th policy year. You may increase your Basic Unit Account sustainability year by:\n"
				 "1. Reinvesting your matured fund value fully/partially (option at fund maturity).\n"
				 "2. Reducing regular withdrawal if you have opted for regular withdrawal.\n"
				 "3. Reducing your BSA if the BSA is higher than minimum allowable BSA.\n"
				 "4. Adding Basic Plan Regular Top Up.",aaCode, aaInput1];
	}
	else if([aaCode isEqual:@"Y3"]){
		return  [NSString stringWithFormat:@"%@The Basic Unit Account and Rider Unit Account are projected to be able to sustain up to %@th and %@th policy year only respectively, "
				 "based on BULL scenario. Generation of SI & PDS is not allowed if either Basic Unit Account or Rider Unit Account lapse before 10th policy year. "
				 "You may increase your Basic Unit Account or Rider Unit Account sustainability year by:\n"
				 "1. Reinvesting your matured fund value fully/partially (option at fund maturity).\n"
				 "2. Reducing regular withdrawal if you opted for regular withdrawal.\n"
				 "3. Reducing your BSA if the BSA is higher than minimum allowable BSA.\n"
				 "4. Adding Basic Plan/ Rider Regular Top Up.",aaCode, aaInput1, aaInput2];
	}
	else if([aaCode isEqual:@"Z1"]){
		return  [NSString stringWithFormat:@"%@Regular Top Up Premium will be revised to RM%@. However, the Basic Unit Account and Rider Unit Account are projected to be able to "
				 "sustain up to %@th and %@th policy year only respectively, based on BULL scenario. Generation of SI & PDS is not allowed if either "
				 "Basic Unit Account or Rider Unit Account lapse before 10th policy year. You may increase your Basic Unit Account or Rider Unit Account sustainability year by:\n"
				 "1. Reinvesting your matured fund value fully/partially (option at fund maturity).\n"
				 "2. Reducing regular withdrawal if you opted for regular withdrawal.\n"
				 "3. Reducing your BSA if the BSA is higher than minimum allowable BSA.\n"
				 "4. Adding Basic Plan/ Rider Regular Top Up.",aaCode, aaInput1, aaInput2, aaInput3];
	}
	else if([aaCode isEqual:@"Z2"]){
		return  [NSString stringWithFormat:@"%@Regular Top Up Premium will be revised to RM%@. However, the Basic Unit Account and Rider Unit Account are projected to be able to "
				 "sustain up to %@th and %@th policy year only respectively, based on BULL scenario. You may increase your Basic Unit Account or Rider Unit Account sustainability year by:\n"
				 "1. Reinvesting your matured fund value fully/partially (option at fund maturity).\n"
				 "2. Reducing regular withdrawal if you opted for regular withdrawal.\n"
				 "3. Reducing your BSA if the BSA higher than minimum allowable BSA.\n"
				 "4. Adding Basic Plan/ Rider Regular Top Up.",aaCode, aaInput1, aaInput2, aaInput3];
	}
    else if ([aaCode isEqual:@"A0"]) {
		return  [NSString stringWithFormat:@"%@Allocated premium is insufficeint to support insurance charges due to health loading and/ or occupation loading.\n Please refer to underwriter for special Sales Illustration.",aaCode];
	}
	else if ([aaCode isEqual:@"A1"]) {
		return  [NSString stringWithFormat:@"%@Reinvest your matured fund value fully/partially (option at fund maturity) to increase policy sustainability year.",aaCode];
	}
	else if ([aaCode isEqual:@"A2"]) {
		return  [NSString stringWithFormat:@"%@a. Reinvest your matured fund value fully/partially (option at fund maturity); or\n "
                 "b. Reduce regular withdrawal if you have opted for regular withdrawal; to increase policy sustainability year.",aaCode];
	}
	else if ([aaCode isEqual:@"A3"]) {
		return  [NSString stringWithFormat:@"%@a. Reinvest your matured fund value fully/partially (option at fund maturity); or\n "
                 "b. Reduce regular withdrawal if you have opted for regular withdrawal; to increase policy sustainability year.",aaCode];
	}
	else if ([aaCode isEqual:@"B0"]) {
		return  [NSString stringWithFormat:@"%@Reduce policy sustainability year.",aaCode];
	}
	else if ([aaCode isEqual:@"C1"]) {
		return  [NSString stringWithFormat:@"%@Add Rider Regular Top Up to increase policy sustainability year.",aaCode];
	}
	else if ([aaCode isEqual:@"C2"]) {
		return  [NSString stringWithFormat:@"%@Add Basic Plan Regular Top Up to increase policy sustainability year.",aaCode];
	}
	else if ([aaCode isEqual:@"C3"]) {
		return  [NSString stringWithFormat:@"%@Add Basic Plan/ Rider Regular Top Up to increase policy sustainability year.",aaCode];
	}
	else if ([aaCode isEqual:@"D0"]) {
		return  [NSString stringWithFormat:@"%@Reduce Basic Sum Assured to increase policy sustainability year.",aaCode];
	}
	else if([aaCode isEqual:@"R0"]){
		return  [NSString stringWithFormat:@"%@Regular Top Up Premium will be revised to RM%@.",aaCode, strGrayRTUPAmount];
	}
	else if([aaCode isEqual:@"R1"]){
		return  [NSString stringWithFormat:@"%@The Fund Value is insufficient to convert the policy to reduced paid up plan. To convert, the BSA shall be revised to RM%@",aaCode, aaInput1];
        
	}
	else if([aaCode isEqual:@"R2"]){
		return  [NSString stringWithFormat:@"%@Reset the conversion year and Sum Assured",aaCode];
	}
	else if([aaCode isEqual:@"R3"]){
		return  [NSString stringWithFormat:@"%@The Fund Value at %@th policy anniversart is insufficient to convert the policy to reduced paid up plan even with minimum BSA."
				 "To convert, the conversion year shall be %@th policy anniversary with minimum BSA of RM%@",aaCode, aaInput1, aaInput2, aaInput3];
	}
	else if([aaCode isEqual:@"R4"]){
		NSString *temp;
		if ([[aaInput1 substringFromIndex:aaInput1.length - 1 ] isEqualToString:@"1"]) {
			temp = [aaInput1 stringByAppendingString:@"st"];
		}
		else if ([[aaInput1 substringFromIndex:aaInput1.length - 1] isEqualToString:@"2"]) {
			temp = [aaInput1 stringByAppendingString:@"nd"];
		}
		else if ([[aaInput1 substringFromIndex:aaInput1.length - 1] isEqualToString:@"3"]) {
			temp = [aaInput1 stringByAppendingString:@"rd"];
		}
		else{
			temp = [aaInput1 stringByAppendingString:@"th"];
		}
		
		NSString *temp2;
		if ([[aaInput2 substringFromIndex:aaInput2.length - 1] isEqualToString:@"1"]) {
			temp2 = [aaInput2 stringByAppendingString:@"st"];
		}
		else if ([[aaInput2 substringFromIndex:aaInput2.length - 1] isEqualToString:@"2"]) {
			temp2 = [aaInput2 stringByAppendingString:@"nd"];
		}
		else if ([[aaInput2 substringFromIndex:aaInput2.length - 1] isEqualToString:@"3"]) {
			temp2 = [aaInput2 stringByAppendingString:@"rd"];
		}
		else{
			temp2 = [aaInput2 stringByAppendingString:@"th"];
		}
		
		return  [NSString stringWithFormat:@"%@Based on projection, the Fund Value at %@ up to %@ policy anniversary is insufficient to convert the policy to reduced paid up plan even with minimum BSA.",aaCode, temp, temp2];
        
	}
	else if([aaCode isEqual:@"T1"]){
		return  [NSString stringWithFormat:@"%@Based on projection, the policy will lapse. Please increase Basic Premium to RM%@",aaCode, aaInput1];
	}
	else if([aaCode isEqual:@"T2"]){
		return  [NSString stringWithFormat:@"%@Based on projection, the policy will lapse. Please reduce Basic Sum Assured.",aaCode];
		
	}
	else if([aaCode isEqual:@"00"]){ //not allow quotation
		return  [NSString stringWithFormat:@"%@OK",aaCode];
		
	}
	else if([aaCode isEqual:@"01"]){ 
		return  [NSString stringWithFormat:@"%@OK",aaCode];
		
	}
	else{
		return @"";
	}
}

#pragma mark - Sustainability

-(BOOL)CalculateRPUO_WithMinSA{
    PaidOpCharge2023_H = 0;
    PaidOpCharge2025_H = 0;
    PaidOpCharge2028_H = 0;
    PaidOpCharge2030_H = 0;
    PaidOpCharge2035_H = 0;
    PaidOpChargeRet_H = 0;
    PaidOpChargeVentureGrowth_H = 0;//
    PaidOpChargeVentureBlueChip_H = 0;//
    PaidOpChargeVentureDana_H = 0;//
    PaidOpChargeVentureManaged_H = 0;//
    PaidOpChargeVentureIncome_H = 0;//
    PaidOpChargeVenture6666_H = 0;//
    PaidOpChargeVenture7777_H = 0;//
    PaidOpChargeVenture8888_H = 0;//
    PaidOpChargeVenture9999_H = 0;//
    PaidOpChargeDana_H = 0;
    PaidOpCharge2023_M = 0;
    PaidOpCharge2025_M = 0;
    PaidOpCharge2028_M = 0;
    PaidOpCharge2030_M = 0;
    PaidOpCharge2035_M = 0;
    PaidOpChargeRet_M = 0;
    PaidOpChargeVentureGrowth_M = 0;//
    PaidOpChargeVentureBlueChip_M = 0;//
    PaidOpChargeVentureDana_M = 0;//
    PaidOpChargeVentureManaged_M = 0;//
    PaidOpChargeVentureIncome_M = 0;//
    PaidOpChargeVenture6666_M = 0;//
    PaidOpChargeVenture7777_M = 0;//
    PaidOpChargeVenture8888_M = 0;//
    PaidOpChargeVenture9999_M = 0;//
    PaidOpChargeDana_M = 0;
    PaidOpCharge2023_L = 0;
    PaidOpCharge2025_L = 0;
    PaidOpCharge2028_L = 0;
    PaidOpCharge2030_L = 0;
    PaidOpCharge2035_L = 0;
    PaidOpChargeRet_L = 0;
    PaidOpChargeVentureGrowth_L = 0;//
    PaidOpChargeVentureBlueChip_L = 0;//
    PaidOpChargeVentureDana_L = 0;//
    PaidOpChargeVentureManaged_L = 0;//
    PaidOpChargeVentureIncome_L = 0;//
    PaidOpChargeVenture6666_L = 0;//
    PaidOpChargeVenture7777_L = 0;//
    PaidOpChargeVenture8888_L = 0;//
    PaidOpChargeVenture9999_L = 0;//
    PaidOpChargeDana_L = 0;
    PaidOpChargeCash_H = 0;
    PaidOpChargeCash_M = 0;
    PaidOpChargeCash_L = 0;
    PaidOpChargeSum_H = 0;
    PaidOpChargeSum_M = 0;
    PaidOpChargeSum_L = 0;
    ProjDeduction2023_H = 0;
    ProjDeduction2025_H = 0;
    ProjDeduction2028_H = 0;
    ProjDeduction2030_H = 0;
    ProjDeduction2035_H = 0;
    ProjDeductionRet_H = 0;
    ProjDeductionVentureGrowth_H = 0;//
    ProjDeductionVentureBlueChip_H = 0;//
    ProjDeductionVentureDana_H = 0;//
    ProjDeductionVentureManaged_H = 0;//
    ProjDeductionVentureIncome_H = 0;//
    ProjDeductionVenture6666_H = 0;//
    ProjDeductionVenture7777_H = 0;//
    ProjDeductionVenture8888_H = 0;//
    ProjDeductionVenture9999_H = 0;//
    ProjDeductionDana_H = 0;
    ProjDeductionCash_H = 0;
    ProjDeductionSum_H = 0;
    ProjDeduction2023_M = 0;
    ProjDeduction2025_M = 0;
    ProjDeduction2028_M = 0;
    ProjDeduction2030_M = 0;
    ProjDeduction2035_M = 0;
    ProjDeductionRet_M = 0;
    ProjDeductionVentureGrowth_M = 0;//
    ProjDeductionVentureBlueChip_M = 0;//
    ProjDeductionVentureDana_M = 0;//
    ProjDeductionVentureManaged_M = 0;//
    ProjDeductionVentureIncome_M = 0;//
    ProjDeductionVenture6666_M = 0;//
    ProjDeductionVenture7777_M = 0;//
    ProjDeductionVenture8888_M = 0;//
    ProjDeductionVenture9999_M = 0;//
    ProjDeductionDana_M = 0;
    ProjDeductionCash_M = 0;
    ProjDeductionSum_M = 0;
    ProjDeduction2023_L = 0;
    ProjDeduction2025_L = 0;
    ProjDeduction2028_L = 0;
    ProjDeduction2030_L = 0;
    ProjDeduction2035_L = 0;
    ProjDeductionRet_L = 0;
    ProjDeductionVentureGrowth_L = 0;//
    ProjDeductionVentureBlueChip_L = 0;//
    ProjDeductionVentureDana_L = 0;//
    ProjDeductionVentureManaged_L = 0;//
    ProjDeductionVentureIncome_L = 0;//
    ProjDeductionVenture6666_L = 0;//
    ProjDeductionVenture7777_L = 0;//
    ProjDeductionVenture8888_L = 0;//
    ProjDeductionVenture9999_L = 0;//
    ProjDeductionDana_L = 0;
    ProjDeductionCash_L = 0;
    ProjDeductionSum_L = 0;
    ReinvestCashFund2023_H = 0;
    ReinvestCashFund2025_H = 0;
    ReinvestCashFund2028_H = 0;
    ReinvestCashFund2030_H = 0;
    ReinvestCashFund2035_H = 0;
    ReinvestCashFundRet_H = 0;
    ReinvestCashFundVentureGrowth_H = 0;//
    ReinvestCashFundVentureBlueChip_H = 0;//
    ReinvestCashFundVentureDana_H = 0;//
    ReinvestCashFundVentureManaged_H = 0;//
    ReinvestCashFundVentureIncome_H = 0;//
    ReinvestCashFundVenture6666_H = 0;//
    ReinvestCashFundVenture7777_H = 0;//
    ReinvestCashFundVenture8888_H = 0;//
    ReinvestCashFundVenture9999_H = 0;//
    ReinvestCashFundDana_H = 0;
    ReinvestCashFund2023_M = 0;
    ReinvestCashFund2025_M = 0;
    ReinvestCashFund2028_M = 0;
    ReinvestCashFund2030_M = 0;
    ReinvestCashFund2035_M = 0;
    ReinvestCashFundRet_M = 0;
    ReinvestCashFundVentureGrowth_M = 0;//
    ReinvestCashFundVentureBlueChip_M = 0;//
    ReinvestCashFundVentureDana_M = 0;//
    ReinvestCashFundVentureManaged_M = 0;//
    ReinvestCashFundVentureIncome_M = 0;//
    ReinvestCashFundVenture6666_M = 0;//
    ReinvestCashFundVenture7777_M = 0;//
    ReinvestCashFundVenture8888_M = 0;//
    ReinvestCashFundVenture9999_M = 0;//
    ReinvestCashFundDana_M = 0;
    ReinvestCashFund2023_L = 0;
    ReinvestCashFund2025_L = 0;
    ReinvestCashFund2028_L = 0;
    ReinvestCashFund2030_L = 0;
    ReinvestCashFund2035_L = 0;
    ReinvestCashFundRet_L = 0;
    ReinvestCashFundVentureGrowth_L = 0;//
    ReinvestCashFundVentureBlueChip_L = 0;//
    ReinvestCashFundVentureDana_L = 0;//
    ReinvestCashFundVentureManaged_L = 0;//
    ReinvestCashFundVentureIncome_L = 0;//
    ReinvestCashFundVenture6666_L = 0;//
    ReinvestCashFundVenture7777_L = 0;//
    ReinvestCashFundVenture8888_L = 0;//
    ReinvestCashFundVenture9999_L = 0;//
    ReinvestCashFundDana_L = 0;
    ReinvestCashFundCase_H = 0;
    ReinvestCashFundCase_M = 0;
    ReinvestCashFundCase_L = 0;
    ReinvestCashFundSum_H = 0;
    ReinvestCashFundSum_M = 0;
    ReinvestCashFundSum_L = 0;
    ProjValAfterReinvestSum_H = 0;
    ProjValAfterReinvestSum_M = 0;
    ProjValAfterReinvestSum_L = 0;
    ProjValAfterReinvest2023_H = 0;
    ProjValAfterReinvest2025_H = 0;
    ProjValAfterReinvest2028_H = 0;
    ProjValAfterReinvest2030_H = 0;
    ProjValAfterReinvest2035_H = 0;
    ProjValAfterReinvestRet_H = 0;
    ProjValAfterReinvestVentureGrowth_H = 0;//
    ProjValAfterReinvestVentureBlueChip_H = 0;//
    ProjValAfterReinvestVentureDana_H = 0;//
    ProjValAfterReinvestVentureManaged_H = 0;//
    ProjValAfterReinvestVentureIncome_H = 0;//
    ProjValAfterReinvestVenture6666_H = 0;//
    ProjValAfterReinvestVenture7777_H = 0;//
    ProjValAfterReinvestVenture8888_H = 0;//
    ProjValAfterReinvestVenture9999_H = 0;//
    ProjValAfterReinvestDana_H = 0;
    ProjValAfterReinvestCash_H = 0;
    ProjValAfterReinvestSum_H = 0;
    ProjValAfterReinvest2023_M = 0;
    ProjValAfterReinvest2025_M = 0;
    ProjValAfterReinvest2028_M = 0;
    ProjValAfterReinvest2030_M = 0;
    ProjValAfterReinvest2035_M = 0;
    ProjValAfterReinvestRet_M = 0;
    ProjValAfterReinvestVentureGrowth_M = 0;//
    ProjValAfterReinvestVentureBlueChip_M = 0;//
    ProjValAfterReinvestVentureDana_M = 0;//
    ProjValAfterReinvestVentureManaged_M = 0;//
    ProjValAfterReinvestVentureIncome_M = 0;//
    ProjValAfterReinvestVenture6666_M = 0;//
    ProjValAfterReinvestVenture7777_M = 0;//
    ProjValAfterReinvestVenture8888_M = 0;//
    ProjValAfterReinvestVenture9999_M = 0;//
    ProjValAfterReinvestDana_M = 0;
    ProjValAfterReinvestCash_M = 0;
    ProjValAfterReinvestSum_M = 0;
    ProjValAfterReinvest2023_L = 0;
    ProjValAfterReinvest2025_L = 0;
    ProjValAfterReinvest2028_L = 0;
    ProjValAfterReinvest2030_L = 0;
    ProjValAfterReinvest2035_L = 0;
    ProjValAfterReinvestRet_L = 0;
    ProjValAfterReinvestVentureGrowth_L = 0;//
    ProjValAfterReinvestVentureBlueChip_L = 0;//
    ProjValAfterReinvestVentureDana_L = 0;//
    ProjValAfterReinvestVentureManaged_L = 0;//
    ProjValAfterReinvestVentureIncome_L = 0;//
    ProjValAfterReinvestVenture6666_L = 0;//
    ProjValAfterReinvestVenture7777_L = 0;//
    ProjValAfterReinvestVenture8888_L = 0;//
    ProjValAfterReinvestVenture9999_L = 0;//
    ProjValAfterReinvestDana_L = 0;
    ProjValAfterReinvestCash_L = 0;
    ProjValAfterReinvestSum_L = 0;
    PrevPaidUpOptionTable_2023_High = 0;
    PrevPaidUpOptionTable_2025_High = 0;
    PrevPaidUpOptionTable_2028_High = 0;
    PrevPaidUpOptionTable_2030_High = 0;
    PrevPaidUpOptionTable_2035_High = 0;
    PrevPaidUpOptionTable_Cash_High = 0;
    PrevPaidUpOptionTable_Ret_High = 0;
    PrevPaidUpOptionTable_VentureGrowth_High = 0;//
    PrevPaidUpOptionTable_VentureBlueChip_High = 0;//
    PrevPaidUpOptionTable_VentureDana_High = 0;//
    PrevPaidUpOptionTable_VentureManaged_High = 0;//
    PrevPaidUpOptionTable_VentureIncome_High = 0;//
    PrevPaidUpOptionTable_Venture6666_High = 0;//
    PrevPaidUpOptionTable_Venture7777_High = 0;//
    PrevPaidUpOptionTable_Venture8888_High = 0;//
    PrevPaidUpOptionTable_Venture9999_High = 0;//
    PrevPaidUpOptionTable_Dana_High = 0;
    PrevPaidUpOptionTable_2023_Median = 0;
    PrevPaidUpOptionTable_2025_Median = 0;
    PrevPaidUpOptionTable_2028_Median = 0;
    PrevPaidUpOptionTable_2030_Median = 0;
    PrevPaidUpOptionTable_2035_Median = 0;
    PrevPaidUpOptionTable_Cash_Median = 0;
    PrevPaidUpOptionTable_Ret_Median = 0;
    PrevPaidUpOptionTable_VentureGrowth_Median = 0;//
    PrevPaidUpOptionTable_VentureBlueChip_Median = 0;//
    PrevPaidUpOptionTable_VentureDana_Median = 0;//
    PrevPaidUpOptionTable_VentureManaged_Median = 0;//
    PrevPaidUpOptionTable_VentureIncome_Median = 0;//
    PrevPaidUpOptionTable_Venture6666_Median = 0;//
    PrevPaidUpOptionTable_Venture7777_Median = 0;//
    PrevPaidUpOptionTable_Venture8888_Median = 0;//
    PrevPaidUpOptionTable_Venture9999_Median = 0;//
    PrevPaidUpOptionTable_Dana_Median = 0;
    PrevPaidUpOptionTable_2023_Low = 0;
    PrevPaidUpOptionTable_2025_Low = 0;
    PrevPaidUpOptionTable_2028_Low = 0;
    PrevPaidUpOptionTable_2030_Low = 0;
    PrevPaidUpOptionTable_2035_Low = 0;
    PrevPaidUpOptionTable_Cash_Low = 0;
    PrevPaidUpOptionTable_Ret_Low = 0;
    PrevPaidUpOptionTable_VentureGrowth_Low = 0;//
    PrevPaidUpOptionTable_VentureBlueChip_Low = 0;//
    PrevPaidUpOptionTable_VentureDana_Low = 0;//
    PrevPaidUpOptionTable_VentureManaged_Low = 0;//
    PrevPaidUpOptionTable_VentureIncome_Low = 0;//
    PrevPaidUpOptionTable_Venture6666_Low = 0;//
    PrevPaidUpOptionTable_Venture7777_Low = 0;//
    PrevPaidUpOptionTable_Venture8888_Low = 0;//
    PrevPaidUpOptionTable_Venture9999_Low = 0;//
    PrevPaidUpOptionTable_Dana_Low = 0;
    ProjValueMaturity2023_H= 0,ProjValueMaturity2023_M= 0,ProjValueMaturity2023_L= 0,ProjValueMaturity2025_H= 0,ProjValueMaturity2025_M= 0,ProjValueMaturity2025_L= 0;
    ProjValueMaturity2028_H= 0,ProjValueMaturity2028_M= 0,ProjValueMaturity2028_L= 0,ProjValueMaturity2030_H= 0,ProjValueMaturity2030_M= 0,ProjValueMaturity2030_L= 0;
    ProjValueMaturity2035_H= 0,ProjValueMaturity2035_M= 0,ProjValueMaturity2035_L= 0,ProjValueMaturityRet_H= 0,ProjValueMaturityRet_M= 0,ProjValueMaturityRet_L= 0;
    ProjValueMaturityVentureGrowth_H= 0,ProjValueMaturityVentureGrowth_M= 0,ProjValueMaturityVentureGrowth_L= 0;//
    ProjValueMaturityVentureBlueChip_H= 0,ProjValueMaturityVentureBlueChip_M= 0,ProjValueMaturityVentureBlueChip_L= 0;//
    ProjValueMaturityVentureDana_H= 0,ProjValueMaturityVentureDana_M= 0,ProjValueMaturityVentureDana_L= 0;//
    ProjValueMaturityVentureManaged_H= 0,ProjValueMaturityVentureManaged_M= 0,ProjValueMaturityVentureManaged_L= 0;//
    ProjValueMaturityVentureIncome_H= 0,ProjValueMaturityVentureIncome_M= 0,ProjValueMaturityVentureIncome_L= 0;//
    ProjValueMaturityVenture6666_H= 0,ProjValueMaturityVenture6666_M= 0,ProjValueMaturityVenture6666_L= 0;//
    ProjValueMaturityVenture7777_H= 0,ProjValueMaturityVenture7777_M= 0,ProjValueMaturityVenture7777_L= 0;//
    ProjValueMaturityVenture8888_H= 0,ProjValueMaturityVenture8888_M= 0,ProjValueMaturityVenture8888_L= 0;//
    ProjValueMaturityVenture9999_H= 0,ProjValueMaturityVenture9999_M= 0,ProjValueMaturityVenture9999_L= 0;//
    
    ProjValueMaturityCash_H= 0,ProjValueMaturityCash_M= 0,ProjValueMaturityCash_L= 0,ProjValueMaturityDana_H= 0,ProjValueMaturityDana_M= 0,ProjValueMaturityDana_L= 0;
    ProjWithdraw2023_H = 0,ProjWithdraw2023_M= 0,ProjWithdraw2023_L= 0,ProjWithdraw2025_H= 0,ProjWithdraw2025_M= 0,ProjWithdraw2025_L= 0;
    ProjWithdraw2028_H= 0,ProjWithdraw2028_M= 0,ProjWithdraw2028_L= 0,ProjWithdraw2030_H= 0,ProjWithdraw2030_M= 0,ProjWithdraw2030_L= 0;
    ProjWithdraw2035_H= 0,ProjWithdraw2035_M= 0,ProjWithdraw2035_L= 0,ProjWithdrawRet_H= 0,ProjWithdrawRet_M= 0,ProjWithdrawRet_L= 0;
    ProjWithdrawVentureGrowth_H= 0,ProjWithdrawVentureGrowth_M= 0,ProjWithdrawVentureGrowth_L= 0;//
    ProjWithdrawVentureBlueChip_H= 0,ProjWithdrawVentureBlueChip_M= 0,ProjWithdrawVentureBlueChip_L= 0;//
    ProjWithdrawVentureDana_H= 0,ProjWithdrawVentureDana_M= 0,ProjWithdrawVentureDana_L= 0;//
    ProjWithdrawVentureManaged_H= 0,ProjWithdrawVentureManaged_M= 0,ProjWithdrawVentureManaged_L= 0;//
    ProjWithdrawVentureIncome_H= 0,ProjWithdrawVentureIncome_M= 0,ProjWithdrawVentureIncome_L= 0;//
    ProjWithdrawVenture6666_H= 0,ProjWithdrawVenture6666_M= 0,ProjWithdrawVenture6666_L= 0;//
    ProjWithdrawVenture7777_H= 0,ProjWithdrawVenture7777_M= 0,ProjWithdrawVenture7777_L= 0;//
    ProjWithdrawVenture8888_H= 0,ProjWithdrawVenture8888_M= 0,ProjWithdrawVenture8888_L= 0;//
    ProjWithdrawVenture9999_H= 0,ProjWithdrawVenture9999_M= 0,ProjWithdrawVenture9999_L= 0;//
    
    ProjWithdrawCash_H= 0,ProjWithdrawCash_M= 0,ProjWithdrawCash_L= 0,ProjWithdrawDana_H= 0,ProjWithdrawDana_M= 0,ProjWithdrawDana_L= 0;
    ProjReinvest2023_H= 0,ProjReinvest2023_M= 0,ProjReinvest2023_L= 0,ProjReinvest2025_H= 0,ProjReinvest2025_M= 0,ProjReinvest2025_L= 0;
    ProjReinvest2028_H= 0,ProjReinvest2028_M= 0,ProjReinvest2028_L= 0,ProjReinvest2030_H= 0,ProjReinvest2030_M= 0,ProjReinvest2030_L= 0;
    ProjReinvest2035_H= 0,ProjReinvest2035_M= 0,ProjReinvest2035_L= 0,ProjReinvestRet_H= 0,ProjReinvestRet_M= 0,ProjReinvestRet_L= 0;
    ProjReinvestVentureGrowth_H= 0,ProjReinvestVentureGrowth_M= 0,ProjReinvestVentureGrowth_L= 0;//
    ProjReinvestVentureBlueChip_H= 0,ProjReinvestVentureBlueChip_M= 0,ProjReinvestVentureBlueChip_L= 0;//
    ProjReinvestVentureDana_H= 0,ProjReinvestVentureDana_M= 0,ProjReinvestVentureDana_L= 0;//
    ProjReinvestVentureManaged_H= 0,ProjReinvestVentureManaged_M= 0,ProjReinvestVentureManaged_L= 0;//
    ProjReinvestVentureIncome_H= 0,ProjReinvestVentureIncome_M= 0,ProjReinvestVentureIncome_L= 0;//
    ProjReinvestVenture6666_H= 0,ProjReinvestVenture6666_M= 0,ProjReinvestVenture6666_L= 0;//
    ProjReinvestVenture7777_H= 0,ProjReinvestVenture7777_M= 0,ProjReinvestVenture7777_L= 0;//
    ProjReinvestVenture8888_H= 0,ProjReinvestVenture8888_M= 0,ProjReinvestVenture8888_L= 0;//
    ProjReinvestVenture9999_H= 0,ProjReinvestVenture9999_M= 0,ProjReinvestVenture9999_L= 0;//
    
    ProjReinvestCash_H= 0,ProjReinvestCash_M= 0,ProjReinvestCash_L= 0,ProjReinvestDana_H= 0,ProjReinvestDana_M= 0,ProjReinvestDana_L= 0;
    
    
    ReinvestAmount2023toVentureGrowth_H = 0;//
    ReinvestAmount2025toVentureGrowth_H = 0;
    ReinvestAmount2028toVentureGrowth_H = 0;
    ReinvestAmount2030toVentureGrowth_H = 0;
    ReinvestAmount2035toVentureGrowth_H = 0;
    ReinvestAmount2023toVentureGrowth_M = 0;
    ReinvestAmount2025toVentureGrowth_M = 0;
    ReinvestAmount2028toVentureGrowth_M = 0;
    ReinvestAmount2030toVentureGrowth_M = 0;
    ReinvestAmount2035toVentureGrowth_M = 0;
    ReinvestAmount2023toVentureGrowth_L = 0;
    ReinvestAmount2025toVentureGrowth_L = 0;
    ReinvestAmount2028toVentureGrowth_L = 0;
    ReinvestAmount2030toVentureGrowth_L = 0;
    ReinvestAmount2035toVentureGrowth_L = 0;//
    
    ReinvestAmount2023toVentureBlueChip_H = 0;//
    ReinvestAmount2025toVentureBlueChip_H = 0;
    ReinvestAmount2028toVentureBlueChip_H = 0;
    ReinvestAmount2030toVentureBlueChip_H = 0;
    ReinvestAmount2035toVentureBlueChip_H = 0;
    ReinvestAmount2023toVentureBlueChip_M = 0;
    ReinvestAmount2025toVentureBlueChip_M = 0;
    ReinvestAmount2028toVentureBlueChip_M = 0;
    ReinvestAmount2030toVentureBlueChip_M = 0;
    ReinvestAmount2035toVentureBlueChip_M = 0;
    ReinvestAmount2023toVentureBlueChip_L = 0;
    ReinvestAmount2025toVentureBlueChip_L = 0;
    ReinvestAmount2028toVentureBlueChip_L = 0;
    ReinvestAmount2030toVentureBlueChip_L = 0;
    ReinvestAmount2035toVentureBlueChip_L = 0;//
    
    ReinvestAmount2023toVentureDana_H = 0;//
    ReinvestAmount2025toVentureDana_H = 0;
    ReinvestAmount2028toVentureDana_H = 0;
    ReinvestAmount2030toVentureDana_H = 0;
    ReinvestAmount2035toVentureDana_H = 0;
    ReinvestAmount2023toVentureDana_M = 0;
    ReinvestAmount2025toVentureDana_M = 0;
    ReinvestAmount2028toVentureDana_M = 0;
    ReinvestAmount2030toVentureDana_M = 0;
    ReinvestAmount2035toVentureDana_M = 0;
    ReinvestAmount2023toVentureDana_L = 0;
    ReinvestAmount2025toVentureDana_L = 0;
    ReinvestAmount2028toVentureDana_L = 0;
    ReinvestAmount2030toVentureDana_L = 0;
    ReinvestAmount2035toVentureDana_L = 0;//
    
    ReinvestAmount2023toVentureManaged_H = 0;//
    ReinvestAmount2025toVentureManaged_H = 0;
    ReinvestAmount2028toVentureManaged_H = 0;
    ReinvestAmount2030toVentureManaged_H = 0;
    ReinvestAmount2035toVentureManaged_H = 0;
    ReinvestAmount2023toVentureManaged_M = 0;
    ReinvestAmount2025toVentureManaged_M = 0;
    ReinvestAmount2028toVentureManaged_M = 0;
    ReinvestAmount2030toVentureManaged_M = 0;
    ReinvestAmount2035toVentureManaged_M = 0;
    ReinvestAmount2023toVentureManaged_L = 0;
    ReinvestAmount2025toVentureManaged_L = 0;
    ReinvestAmount2028toVentureManaged_L = 0;
    ReinvestAmount2030toVentureManaged_L = 0;
    ReinvestAmount2035toVentureManaged_L = 0;//
    
    ReinvestAmount2023toVentureIncome_H = 0;//
    ReinvestAmount2025toVentureIncome_H = 0;
    ReinvestAmount2028toVentureIncome_H = 0;
    ReinvestAmount2030toVentureIncome_H = 0;
    ReinvestAmount2035toVentureIncome_H = 0;
    ReinvestAmount2023toVentureIncome_M = 0;
    ReinvestAmount2025toVentureIncome_M = 0;
    ReinvestAmount2028toVentureIncome_M = 0;
    ReinvestAmount2030toVentureIncome_M = 0;
    ReinvestAmount2035toVentureIncome_M = 0;
    ReinvestAmount2023toVentureIncome_L = 0;
    ReinvestAmount2025toVentureIncome_L = 0;
    ReinvestAmount2028toVentureIncome_L = 0;
    ReinvestAmount2030toVentureIncome_L = 0;
    ReinvestAmount2035toVentureIncome_L = 0;//
    
    ReinvestAmount2023toVenture6666_H = 0;//
    ReinvestAmount2025toVenture6666_H = 0;
    ReinvestAmount2028toVenture6666_H = 0;
    ReinvestAmount2030toVenture6666_H = 0;
    ReinvestAmount2035toVenture6666_H = 0;
    ReinvestAmount2023toVenture6666_M = 0;
    ReinvestAmount2025toVenture6666_M = 0;
    ReinvestAmount2028toVenture6666_M = 0;
    ReinvestAmount2030toVenture6666_M = 0;
    ReinvestAmount2035toVenture6666_M = 0;
    ReinvestAmount2023toVenture6666_L = 0;
    ReinvestAmount2025toVenture6666_L = 0;
    ReinvestAmount2028toVenture6666_L = 0;
    ReinvestAmount2030toVenture6666_L = 0;
    ReinvestAmount2035toVenture6666_L = 0;//
    
    ReinvestAmount2023toVenture7777_H = 0;//
    ReinvestAmount2025toVenture7777_H = 0;
    ReinvestAmount2028toVenture7777_H = 0;
    ReinvestAmount2030toVenture7777_H = 0;
    ReinvestAmount2035toVenture7777_H = 0;
    ReinvestAmount2023toVenture7777_M = 0;
    ReinvestAmount2025toVenture7777_M = 0;
    ReinvestAmount2028toVenture7777_M = 0;
    ReinvestAmount2030toVenture7777_M = 0;
    ReinvestAmount2035toVenture7777_M = 0;
    ReinvestAmount2023toVenture7777_L = 0;
    ReinvestAmount2025toVenture7777_L = 0;
    ReinvestAmount2028toVenture7777_L = 0;
    ReinvestAmount2030toVenture7777_L = 0;
    ReinvestAmount2035toVenture7777_L = 0;//
    
    ReinvestAmount2023toVenture8888_H = 0;//
    ReinvestAmount2025toVenture8888_H = 0;
    ReinvestAmount2028toVenture8888_H = 0;
    ReinvestAmount2030toVenture8888_H = 0;
    ReinvestAmount2035toVenture8888_H = 0;
    ReinvestAmount2023toVenture8888_M = 0;
    ReinvestAmount2025toVenture8888_M = 0;
    ReinvestAmount2028toVenture8888_M = 0;
    ReinvestAmount2030toVenture8888_M = 0;
    ReinvestAmount2035toVenture8888_M = 0;
    ReinvestAmount2023toVenture8888_L = 0;
    ReinvestAmount2025toVenture8888_L = 0;
    ReinvestAmount2028toVenture8888_L = 0;
    ReinvestAmount2030toVenture8888_L = 0;
    ReinvestAmount2035toVenture8888_L = 0;//
    
    ReinvestAmount2023toVenture9999_H = 0;//
    ReinvestAmount2025toVenture9999_H = 0;
    ReinvestAmount2028toVenture9999_H = 0;
    ReinvestAmount2030toVenture9999_H = 0;
    ReinvestAmount2035toVenture9999_H = 0;
    ReinvestAmount2023toVenture9999_M = 0;
    ReinvestAmount2025toVenture9999_M = 0;
    ReinvestAmount2028toVenture9999_M = 0;
    ReinvestAmount2030toVenture9999_M = 0;
    ReinvestAmount2035toVenture9999_M = 0;
    ReinvestAmount2023toVenture9999_L = 0;
    ReinvestAmount2025toVenture9999_L = 0;
    ReinvestAmount2028toVenture9999_L = 0;
    ReinvestAmount2030toVenture9999_L = 0;
    ReinvestAmount2035toVenture9999_L = 0;//
    
    
    ReinvestAmount2023to2025_H= 0, ReinvestAmount2023to2028_H= 0,ReinvestAmount2023to2030_H= 0,ReinvestAmount2023to2035_H= 0,ReinvestAmount2023toRet_H= 0,ReinvestAmount2023toCash_H= 0,ReinvestAmount2023toDana_H= 0;
    ReinvestAmount2025to2028_H= 0,ReinvestAmount2025to2030_H= 0,ReinvestAmount2025to2035_H= 0,ReinvestAmount2025toRet_H= 0,ReinvestAmount2025toCash_H= 0,ReinvestAmount2025toDana_H= 0;
    ReinvestAmount2028to2030_H= 0,ReinvestAmount2028to2035_H= 0,ReinvestAmount2028toRet_H= 0,ReinvestAmount2028toCash_H= 0,ReinvestAmount2028toDana_H= 0;
    ReinvestAmount2030to2035_H= 0,ReinvestAmount2030toRet_H= 0,ReinvestAmount2030toCash_H= 0,ReinvestAmount2030toDana_H= 0;
    ReinvestAmount2035toRet_H= 0,ReinvestAmount2035toCash_H= 0,ReinvestAmount2035toDana_H= 0;
    ReinvestAmount2023to2025_M= 0, ReinvestAmount2023to2028_M= 0,ReinvestAmount2023to2030_M= 0,ReinvestAmount2023to2035_M= 0,ReinvestAmount2023toRet_M= 0,ReinvestAmount2023toCash_M= 0,ReinvestAmount2023toDana_M= 0;
    ReinvestAmount2025to2028_M= 0,ReinvestAmount2025to2030_M= 0,ReinvestAmount2025to2035_M= 0,ReinvestAmount2025toRet_M= 0,ReinvestAmount2025toCash_M= 0,ReinvestAmount2025toDana_M= 0;
    ReinvestAmount2028to2030_M= 0,ReinvestAmount2028to2035_M= 0,ReinvestAmount2028toRet_M= 0,ReinvestAmount2028toCash_M= 0,ReinvestAmount2028toDana_M= 0;
    ReinvestAmount2030to2035_M= 0,ReinvestAmount2030toRet_M= 0,ReinvestAmount2030toCash_M= 0,ReinvestAmount2030toDana_M= 0;
    ReinvestAmount2035toRet_M= 0,ReinvestAmount2035toCash_M= 0,ReinvestAmount2035toDana_M= 0;
    ReinvestAmount2023to2025_L= 0, ReinvestAmount2023to2028_L= 0,ReinvestAmount2023to2030_L= 0,ReinvestAmount2023to2035_L= 0,ReinvestAmount2023toRet_L= 0,ReinvestAmount2023toCash_L= 0,ReinvestAmount2023toDana_L= 0;
    ReinvestAmount2025to2028_L= 0,ReinvestAmount2025to2030_L= 0,ReinvestAmount2025to2035_L= 0,ReinvestAmount2025toRet_L= 0,ReinvestAmount2025toCash_L= 0,ReinvestAmount2025toDana_L= 0;
    ReinvestAmount2028to2030_L= 0,ReinvestAmount2028to2035_L= 0,ReinvestAmount2028toRet_L= 0,ReinvestAmount2028toCash_L= 0,ReinvestAmount2028toDana_L= 0;
    ReinvestAmount2030to2035_L= 0,ReinvestAmount2030toRet_L= 0,ReinvestAmount2030toCash_L= 0,ReinvestAmount2030toDana_L= 0;
    ReinvestAmount2035toRet_L= 0,ReinvestAmount2035toCash_L= 0,ReinvestAmount2035toDana_L= 0;
    
    
    //
    PaidOpCharge2023_H = [self Calc_PaidUpOptionCharges:VU2023ValueHigh andVUCash:VUCashValueHigh andHighMedLow:@"High"];
    PaidOpCharge2025_H = [self Calc_PaidUpOptionCharges:VU2025ValueHigh andVUCash:VUCashValueHigh andHighMedLow:@"High"];
    PaidOpCharge2028_H = [self Calc_PaidUpOptionCharges:VU2028ValueHigh andVUCash:VUCashValueHigh andHighMedLow:@"High"];
    PaidOpCharge2030_H = [self Calc_PaidUpOptionCharges:VU2030ValueHigh andVUCash:VUCashValueHigh andHighMedLow:@"High"];
    PaidOpCharge2035_H = [self Calc_PaidUpOptionCharges:VU2035ValueHigh andVUCash:VUCashValueHigh andHighMedLow:@"High"];
    PaidOpChargeRet_H = [self Calc_PaidUpOptionCharges:VURetValueHigh andVUCash:VUCashValueHigh andHighMedLow:@"High"];
    PaidOpChargeVentureGrowth_H = [self Calc_PaidUpOptionCharges:VUVentureGrowthValueHigh andVUCash:VUCashValueHigh andHighMedLow:@"High"];//
    PaidOpChargeVentureBlueChip_H = [self Calc_PaidUpOptionCharges:VUVentureBlueChipValueHigh andVUCash:VUCashValueHigh andHighMedLow:@"High"];//
    PaidOpChargeVentureDana_H = [self Calc_PaidUpOptionCharges:VUVentureDanaValueHigh andVUCash:VUCashValueHigh andHighMedLow:@"High"];//
    PaidOpChargeVentureManaged_H = [self Calc_PaidUpOptionCharges:VUVentureManagedValueHigh andVUCash:VUCashValueHigh andHighMedLow:@"High"];//
    PaidOpChargeVentureIncome_H = [self Calc_PaidUpOptionCharges:VUVentureIncomeValueHigh andVUCash:VUCashValueHigh andHighMedLow:@"High"];//
    PaidOpChargeVenture6666_H = [self Calc_PaidUpOptionCharges:VUVenture6666ValueHigh andVUCash:VUCashValueHigh andHighMedLow:@"High"];//
    PaidOpChargeVenture7777_H = [self Calc_PaidUpOptionCharges:VUVenture7777ValueHigh andVUCash:VUCashValueHigh andHighMedLow:@"High"];//
    PaidOpChargeVenture8888_H = [self Calc_PaidUpOptionCharges:VUVenture8888ValueHigh andVUCash:VUCashValueHigh andHighMedLow:@"High"];//
    PaidOpChargeVenture9999_H = [self Calc_PaidUpOptionCharges:VUVenture9999ValueHigh andVUCash:VUCashValueHigh andHighMedLow:@"High"];//
    PaidOpChargeDana_H = [self Calc_PaidUpOptionCharges:VUDanaValueHigh andVUCash:VUCashValueHigh andHighMedLow:@"High"];
    
    PaidOpCharge2023_M = [self Calc_PaidUpOptionCharges:VU2023ValueMedian andVUCash:VUCashValueMedian andHighMedLow:@"Med"];
    PaidOpCharge2025_M = [self Calc_PaidUpOptionCharges:VU2025ValueMedian andVUCash:VUCashValueMedian andHighMedLow:@"Med"];
    PaidOpCharge2028_M = [self Calc_PaidUpOptionCharges:VU2028ValueMedian andVUCash:VUCashValueMedian andHighMedLow:@"Med"];
    PaidOpCharge2030_M = [self Calc_PaidUpOptionCharges:VU2030ValueMedian andVUCash:VUCashValueMedian andHighMedLow:@"Med"];
    PaidOpCharge2035_M = [self Calc_PaidUpOptionCharges:VU2035ValueMedian andVUCash:VUCashValueMedian andHighMedLow:@"Med"];
    PaidOpChargeRet_M = [self Calc_PaidUpOptionCharges:VURetValueMedian andVUCash:VUCashValueMedian andHighMedLow:@"Med"];
    PaidOpChargeVentureGrowth_M = [self Calc_PaidUpOptionCharges:VUVentureGrowthValueMedian andVUCash:VUCashValueMedian andHighMedLow:@"Med"];//
    PaidOpChargeVentureBlueChip_M = [self Calc_PaidUpOptionCharges:VUVentureBlueChipValueMedian andVUCash:VUCashValueMedian andHighMedLow:@"Med"];//
    PaidOpChargeVentureDana_M = [self Calc_PaidUpOptionCharges:VUVentureDanaValueMedian andVUCash:VUCashValueMedian andHighMedLow:@"Med"];//
    PaidOpChargeVentureManaged_M = [self Calc_PaidUpOptionCharges:VUVentureManagedValueMedian andVUCash:VUCashValueMedian andHighMedLow:@"Med"];//
    PaidOpChargeVentureIncome_M = [self Calc_PaidUpOptionCharges:VUVentureIncomeValueMedian andVUCash:VUCashValueMedian andHighMedLow:@"Med"];//
    PaidOpChargeVenture6666_M = [self Calc_PaidUpOptionCharges:VUVenture6666ValueMedian andVUCash:VUCashValueMedian andHighMedLow:@"Med"];//
    PaidOpChargeVenture7777_M = [self Calc_PaidUpOptionCharges:VUVenture7777ValueMedian andVUCash:VUCashValueMedian andHighMedLow:@"Med"];//
    PaidOpChargeVenture8888_M = [self Calc_PaidUpOptionCharges:VUVenture8888ValueMedian andVUCash:VUCashValueMedian andHighMedLow:@"Med"];//
    PaidOpChargeVenture9999_M = [self Calc_PaidUpOptionCharges:VUVenture9999ValueMedian andVUCash:VUCashValueMedian andHighMedLow:@"Med"];//
    PaidOpChargeDana_M = [self Calc_PaidUpOptionCharges:VUDanaValueMedian andVUCash:VUCashValueMedian andHighMedLow:@"Med"];
    
    PaidOpCharge2023_L = [self Calc_PaidUpOptionCharges:VU2023ValueLow andVUCash:VUCashValueLow andHighMedLow:@"Low"];
    PaidOpCharge2025_L = [self Calc_PaidUpOptionCharges:VU2025ValueLow andVUCash:VUCashValueLow andHighMedLow:@"Low"];
    PaidOpCharge2028_L = [self Calc_PaidUpOptionCharges:VU2028ValueLow andVUCash:VUCashValueLow andHighMedLow:@"Low"];
    PaidOpCharge2030_L = [self Calc_PaidUpOptionCharges:VU2030ValueLow andVUCash:VUCashValueLow andHighMedLow:@"Low"];
    PaidOpCharge2035_L = [self Calc_PaidUpOptionCharges:VU2035ValueLow andVUCash:VUCashValueLow andHighMedLow:@"Low"];
    PaidOpChargeRet_L = [self Calc_PaidUpOptionCharges:VURetValueLow andVUCash:VUCashValueLow andHighMedLow:@"Low"];
    PaidOpChargeVentureGrowth_L = [self Calc_PaidUpOptionCharges:VUVentureGrowthValueLow andVUCash:VUCashValueLow andHighMedLow:@"Low"];//
    PaidOpChargeVentureBlueChip_L = [self Calc_PaidUpOptionCharges:VUVentureBlueChipValueLow andVUCash:VUCashValueLow andHighMedLow:@"Low"];//
    PaidOpChargeVentureDana_L = [self Calc_PaidUpOptionCharges:VUVentureDanaValueLow andVUCash:VUCashValueLow andHighMedLow:@"Low"];//
    PaidOpChargeVentureManaged_L = [self Calc_PaidUpOptionCharges:VUVentureManagedValueLow andVUCash:VUCashValueLow andHighMedLow:@"Low"];//
    PaidOpChargeVentureIncome_L = [self Calc_PaidUpOptionCharges:VUVentureIncomeValueLow andVUCash:VUCashValueLow andHighMedLow:@"Low"];//
    PaidOpChargeVenture6666_L = [self Calc_PaidUpOptionCharges:VUVenture6666ValueLow andVUCash:VUCashValueLow andHighMedLow:@"Low"];//
    PaidOpChargeVenture7777_L = [self Calc_PaidUpOptionCharges:VUVenture7777ValueLow andVUCash:VUCashValueLow andHighMedLow:@"Low"];//
    PaidOpChargeVenture8888_L = [self Calc_PaidUpOptionCharges:VUVenture8888ValueLow andVUCash:VUCashValueLow andHighMedLow:@"Low"];//
    PaidOpChargeVenture9999_L = [self Calc_PaidUpOptionCharges:VUVenture9999ValueLow andVUCash:VUCashValueLow andHighMedLow:@"Low"];//
    PaidOpChargeDana_L = [self Calc_PaidUpOptionCharges:VUDanaValueLow andVUCash:VUCashValueLow andHighMedLow:@"Low"];
    
    PaidOpChargeCash_H = VUCashValueHigh >= OneTimePayOut ? OneTimePayOut:VUCashValueHigh;
    PaidOpChargeCash_M = VUCashValueMedian >= OneTimePayOut ? OneTimePayOut:VUCashValueMedian;
    PaidOpChargeCash_L = VUCashValueLow >= OneTimePayOut ? OneTimePayOut:VUCashValueLow;
    
    PaidOpChargeSum_H = PaidOpCharge2023_H + PaidOpCharge2025_H + PaidOpCharge2028_H + PaidOpCharge2030_H + PaidOpCharge2035_H + PaidOpChargeRet_H + PaidOpChargeDana_H + PaidOpChargeCash_H + PaidOpChargeVentureGrowth_H + PaidOpChargeVentureBlueChip_H + PaidOpChargeVentureDana_H + PaidOpChargeVentureManaged_H + PaidOpChargeVentureIncome_H + PaidOpChargeVenture6666_H + PaidOpChargeVenture7777_H + PaidOpChargeVenture8888_H + PaidOpChargeVenture9999_H;//
    PaidOpChargeSum_M = PaidOpCharge2023_M + PaidOpCharge2025_M + PaidOpCharge2028_M + PaidOpCharge2030_M + PaidOpCharge2035_M + PaidOpChargeRet_M + PaidOpChargeDana_M + PaidOpChargeCash_M + PaidOpChargeVentureGrowth_M + PaidOpChargeVentureBlueChip_M + PaidOpChargeVentureDana_M + PaidOpChargeVentureManaged_M + PaidOpChargeVentureIncome_M + PaidOpChargeVenture6666_M + PaidOpChargeVenture7777_M + PaidOpChargeVenture8888_M + PaidOpChargeVenture9999_M;//
    PaidOpChargeSum_L = PaidOpCharge2023_L + PaidOpCharge2025_L + PaidOpCharge2028_L + PaidOpCharge2030_L + PaidOpCharge2035_L + PaidOpChargeRet_L + PaidOpChargeDana_L + PaidOpChargeCash_L + PaidOpChargeVentureGrowth_L + PaidOpChargeVentureBlueChip_L + PaidOpChargeVentureDana_L + PaidOpChargeVentureManaged_L + PaidOpChargeVentureIncome_L + PaidOpChargeVenture6666_L + PaidOpChargeVenture7777_L + PaidOpChargeVenture8888_L + PaidOpChargeVenture9999_L;//
    
    ProjDeduction2023_H = VU2023ValueHigh - PaidOpCharge2023_H;
    ProjDeduction2025_H = VU2025ValueHigh - PaidOpCharge2025_H;
    ProjDeduction2028_H = VU2028ValueHigh - PaidOpCharge2028_H;
    ProjDeduction2030_H = VU2030ValueHigh - PaidOpCharge2030_H;
    ProjDeduction2035_H = VU2035ValueHigh - PaidOpCharge2035_H;
    ProjDeductionRet_H = VURetValueHigh - PaidOpChargeRet_H;
    ProjDeductionVentureGrowth_H = VUVentureGrowthValueHigh - PaidOpChargeVentureGrowth_H;//
    ProjDeductionVentureBlueChip_H = VUVentureBlueChipValueHigh - PaidOpChargeVentureBlueChip_H;//
    ProjDeductionVentureDana_H = VUVentureDanaValueHigh - PaidOpChargeVentureDana_H;//
    ProjDeductionVentureManaged_H = VUVentureManagedValueHigh - PaidOpChargeVentureManaged_H;//
    ProjDeductionVentureIncome_H = VUVentureIncomeValueHigh - PaidOpChargeVentureIncome_H;//
    ProjDeductionVenture6666_H = VUVenture6666ValueHigh - PaidOpChargeVenture6666_H;//
    ProjDeductionVenture7777_H = VUVenture7777ValueHigh - PaidOpChargeVenture7777_H;//
    ProjDeductionVenture8888_H = VUVenture8888ValueHigh - PaidOpChargeVenture8888_H;//
    ProjDeductionVenture9999_H = VUVenture9999ValueHigh - PaidOpChargeVenture9999_H;//
    ProjDeductionDana_H = VUDanaValueHigh - PaidOpChargeDana_H;
    ProjDeductionCash_H = VUCashValueHigh - PaidOpChargeCash_H;
    ProjDeductionSum_H = ProjDeduction2023_H + ProjDeduction2025_H + ProjDeduction2028_H + ProjDeduction2030_H + ProjDeduction2035_H + ProjDeductionCash_H + ProjDeductionRet_H + ProjDeductionDana_H + ProjDeductionVentureGrowth_H + ProjDeductionVentureBlueChip_H + ProjDeductionVentureDana_H + ProjDeductionVentureManaged_H + ProjDeductionVentureIncome_H + ProjDeductionVenture6666_H + ProjDeductionVenture7777_H + ProjDeductionVenture8888_H + ProjDeductionVenture9999_H;//
    
    ProjDeduction2023_M = VU2023ValueMedian - PaidOpCharge2023_M;
    ProjDeduction2025_M = VU2025ValueMedian - PaidOpCharge2025_M;
    ProjDeduction2028_M = VU2028ValueMedian - PaidOpCharge2028_M;
    ProjDeduction2030_M = VU2030ValueMedian - PaidOpCharge2030_M;
    ProjDeduction2035_M = VU2035ValueMedian - PaidOpCharge2035_M;
    ProjDeductionRet_M = VURetValueMedian - PaidOpChargeRet_M;
    ProjDeductionVentureGrowth_M = VUVentureGrowthValueMedian - PaidOpChargeVentureGrowth_M;//
    ProjDeductionVentureBlueChip_M = VUVentureBlueChipValueMedian - PaidOpChargeVentureBlueChip_M;//
    ProjDeductionVentureDana_M = VUVentureDanaValueMedian - PaidOpChargeVentureDana_M;//
    ProjDeductionVentureManaged_M = VUVentureManagedValueMedian - PaidOpChargeVentureManaged_M;//
    ProjDeductionVentureIncome_M = VUVentureIncomeValueMedian - PaidOpChargeVentureIncome_M;//
    ProjDeductionVenture6666_M = VUVenture6666ValueMedian - PaidOpChargeVenture6666_M;//
    ProjDeductionVenture7777_M = VUVenture7777ValueMedian - PaidOpChargeVenture7777_M;//
    ProjDeductionVenture8888_M = VUVenture8888ValueMedian - PaidOpChargeVenture8888_M;//
    ProjDeductionVenture9999_M = VUVenture9999ValueMedian - PaidOpChargeVenture9999_M;//
    ProjDeductionDana_M = VUDanaValueMedian - PaidOpChargeDana_M;
    ProjDeductionCash_M = VUCashValueMedian - PaidOpChargeCash_M;
    ProjDeductionSum_M = ProjDeduction2023_M + ProjDeduction2025_M + ProjDeduction2028_M + ProjDeduction2030_M + ProjDeduction2035_M + ProjDeductionCash_M + ProjDeductionRet_M + ProjDeductionDana_M + ProjDeductionVentureGrowth_M + ProjDeductionVentureBlueChip_M + ProjDeductionVentureDana_M + ProjDeductionVentureManaged_M + ProjDeductionVentureIncome_M + ProjDeductionVenture6666_M + ProjDeductionVenture7777_M + ProjDeductionVenture8888_M + ProjDeductionVenture9999_M;//
    
    ProjDeduction2023_L = VU2023ValueLow - PaidOpCharge2023_L;
    ProjDeduction2025_L = VU2025ValueLow - PaidOpCharge2025_L;
    ProjDeduction2028_L = VU2028ValueLow - PaidOpCharge2028_L;
    ProjDeduction2030_L = VU2030ValueLow - PaidOpCharge2030_L;
    ProjDeduction2035_L = VU2035ValueLow - PaidOpCharge2035_L;
    ProjDeductionRet_L = VURetValueLow - PaidOpChargeRet_L;
    ProjDeductionVentureGrowth_L = VUVentureGrowthValueLow - PaidOpChargeVentureGrowth_L;//
    ProjDeductionVentureBlueChip_L = VUVentureBlueChipValueLow - PaidOpChargeVentureBlueChip_L;//
    ProjDeductionVentureDana_L = VUVentureDanaValueLow - PaidOpChargeVentureDana_L;//
    ProjDeductionVentureManaged_L = VUVentureManagedValueLow - PaidOpChargeVentureManaged_L;//
    ProjDeductionVentureIncome_L = VUVentureIncomeValueLow - PaidOpChargeVentureIncome_L;//
    ProjDeductionVenture6666_L = VUVenture6666ValueLow - PaidOpChargeVenture6666_L;//
    ProjDeductionVenture7777_L = VUVenture7777ValueLow - PaidOpChargeVenture7777_L;//
    ProjDeductionVenture8888_L = VUVenture8888ValueLow - PaidOpChargeVenture8888_L;//
    ProjDeductionVenture9999_L = VUVenture9999ValueLow - PaidOpChargeVenture9999_L;//
    ProjDeductionDana_L = VUDanaValueLow - PaidOpChargeDana_L;
    ProjDeductionCash_L = VUCashValueLow - PaidOpChargeCash_L;
    ProjDeductionSum_L = ProjDeduction2023_L + ProjDeduction2025_L + ProjDeduction2028_L + ProjDeduction2030_L + ProjDeduction2035_L + ProjDeductionCash_L + ProjDeductionRet_L + ProjDeductionDana_L + ProjDeductionVentureGrowth_L + ProjDeductionVentureBlueChip_L + ProjDeductionVentureDana_L + ProjDeductionVentureManaged_L + ProjDeductionVentureIncome_L + ProjDeductionVenture6666_L + ProjDeductionVenture7777_L + ProjDeductionVenture8888_L + ProjDeductionVenture9999_L;//
    
    if(ProjDeductionSum_H < 0 || ProjDeductionSum_M < 0 || ProjDeductionSum_L < 0 ){
        //NSLog(@"%f %f %f", ProjDeductionSum_H, ProjDeductionSum_M, ProjDeductionSum_L);
        return FALSE;
    }
    //-----------------------------
    ReinvestCashFund2023_H = [self Calc_CashFundReinvest:VU2023ValueHigh andVUCash:ProjDeductionCash_H andHighMedLow:@"High"];
    ReinvestCashFund2025_H = [self Calc_CashFundReinvest:VU2025ValueHigh andVUCash:ProjDeductionCash_H andHighMedLow:@"High"];
    ReinvestCashFund2028_H = [self Calc_CashFundReinvest:VU2028ValueHigh andVUCash:ProjDeductionCash_H andHighMedLow:@"High"];
    ReinvestCashFund2030_H = [self Calc_CashFundReinvest:VU2030ValueHigh andVUCash:ProjDeductionCash_H andHighMedLow:@"High"];
    ReinvestCashFund2035_H = [self Calc_CashFundReinvest:VU2035ValueHigh andVUCash:ProjDeductionCash_H andHighMedLow:@"High"];
    ReinvestCashFundRet_H = [self Calc_CashFundReinvest:VURetValueHigh andVUCash:ProjDeductionCash_H andHighMedLow:@"High"];
    ReinvestCashFundVentureGrowth_H = [self Calc_CashFundReinvest:VUVentureGrowthValueHigh andVUCash:ProjDeductionCash_H andHighMedLow:@"High"];//
    ReinvestCashFundVentureBlueChip_H = [self Calc_CashFundReinvest:VUVentureBlueChipValueHigh andVUCash:ProjDeductionCash_H andHighMedLow:@"High"];//
    ReinvestCashFundVentureDana_H = [self Calc_CashFundReinvest:VUVentureDanaValueHigh andVUCash:ProjDeductionCash_H andHighMedLow:@"High"];//
    ReinvestCashFundVentureManaged_H = [self Calc_CashFundReinvest:VUVentureManagedValueHigh andVUCash:ProjDeductionCash_H andHighMedLow:@"High"];//
    ReinvestCashFundVentureIncome_H = [self Calc_CashFundReinvest:VUVentureIncomeValueHigh andVUCash:ProjDeductionCash_H andHighMedLow:@"High"];//
    ReinvestCashFundVenture6666_H = [self Calc_CashFundReinvest:VUVenture6666ValueHigh andVUCash:ProjDeductionCash_H andHighMedLow:@"High"];//
    ReinvestCashFundVenture7777_H = [self Calc_CashFundReinvest:VUVenture7777ValueHigh andVUCash:ProjDeductionCash_H andHighMedLow:@"High"];//
    ReinvestCashFundVenture8888_H = [self Calc_CashFundReinvest:VUVenture8888ValueHigh andVUCash:ProjDeductionCash_H andHighMedLow:@"High"];//
    ReinvestCashFundVenture9999_H = [self Calc_CashFundReinvest:VUVenture9999ValueHigh andVUCash:ProjDeductionCash_H andHighMedLow:@"High"];//
    ReinvestCashFundDana_H = [self Calc_CashFundReinvest:VUCashValueHigh andVUCash:ProjDeductionCash_H andHighMedLow:@"High"];
    
    ReinvestCashFund2023_M = [self Calc_CashFundReinvest:VU2023ValueMedian andVUCash:ProjDeductionCash_M andHighMedLow:@"Med"];
    ReinvestCashFund2025_M = [self Calc_CashFundReinvest:VU2025ValueMedian andVUCash:ProjDeductionCash_M andHighMedLow:@"Med"];
    ReinvestCashFund2028_M = [self Calc_CashFundReinvest:VU2028ValueMedian andVUCash:ProjDeductionCash_M andHighMedLow:@"Med"];
    ReinvestCashFund2030_M = [self Calc_CashFundReinvest:VU2030ValueMedian andVUCash:ProjDeductionCash_M andHighMedLow:@"Med"];
    ReinvestCashFund2035_M = [self Calc_CashFundReinvest:VU2035ValueMedian andVUCash:ProjDeductionCash_M andHighMedLow:@"Med"];
    ReinvestCashFundRet_M = [self Calc_CashFundReinvest:VURetValueMedian andVUCash:ProjDeductionCash_M andHighMedLow:@"Med"];
    ReinvestCashFundVentureGrowth_M = [self Calc_CashFundReinvest:VUVentureGrowthValueMedian andVUCash:ProjDeductionCash_M andHighMedLow:@"Med"];//
    ReinvestCashFundVentureBlueChip_M = [self Calc_CashFundReinvest:VUVentureBlueChipValueMedian andVUCash:ProjDeductionCash_M andHighMedLow:@"Med"];//
    ReinvestCashFundVentureDana_M = [self Calc_CashFundReinvest:VUVentureDanaValueMedian andVUCash:ProjDeductionCash_M andHighMedLow:@"Med"];//
    ReinvestCashFundVentureManaged_M = [self Calc_CashFundReinvest:VUVentureManagedValueMedian andVUCash:ProjDeductionCash_M andHighMedLow:@"Med"];//
    ReinvestCashFundVentureIncome_M = [self Calc_CashFundReinvest:VUVentureIncomeValueMedian andVUCash:ProjDeductionCash_M andHighMedLow:@"Med"];//
    ReinvestCashFundVenture6666_M = [self Calc_CashFundReinvest:VUVenture6666ValueMedian andVUCash:ProjDeductionCash_M andHighMedLow:@"Med"];//
    ReinvestCashFundVenture7777_M = [self Calc_CashFundReinvest:VUVenture7777ValueMedian andVUCash:ProjDeductionCash_M andHighMedLow:@"Med"];//
    ReinvestCashFundVenture8888_M = [self Calc_CashFundReinvest:VUVenture8888ValueMedian andVUCash:ProjDeductionCash_M andHighMedLow:@"Med"];//
    ReinvestCashFundVenture9999_M = [self Calc_CashFundReinvest:VUVenture9999ValueMedian andVUCash:ProjDeductionCash_M andHighMedLow:@"Med"];//
    ReinvestCashFundDana_M = [self Calc_CashFundReinvest:VUCashValueMedian andVUCash:ProjDeductionCash_M andHighMedLow:@"Med"];
    
    ReinvestCashFund2023_L = [self Calc_CashFundReinvest:VU2023ValueLow andVUCash:ProjDeductionCash_L andHighMedLow:@"Low"];
    ReinvestCashFund2025_L = [self Calc_CashFundReinvest:VU2025ValueLow andVUCash:ProjDeductionCash_L andHighMedLow:@"Low"];
    ReinvestCashFund2028_L = [self Calc_CashFundReinvest:VU2028ValueLow andVUCash:ProjDeductionCash_L andHighMedLow:@"Low"];
    ReinvestCashFund2030_L = [self Calc_CashFundReinvest:VU2030ValueLow andVUCash:ProjDeductionCash_L andHighMedLow:@"Low"];
    ReinvestCashFund2035_L = [self Calc_CashFundReinvest:VU2035ValueLow andVUCash:ProjDeductionCash_L andHighMedLow:@"Low"];
    ReinvestCashFundRet_L = [self Calc_CashFundReinvest:VURetValueLow andVUCash:ProjDeductionCash_L andHighMedLow:@"Low"];
    ReinvestCashFundVentureGrowth_L = [self Calc_CashFundReinvest:VUVentureGrowthValueLow andVUCash:ProjDeductionCash_L andHighMedLow:@"Low"];//
    ReinvestCashFundVentureBlueChip_L = [self Calc_CashFundReinvest:VUVentureBlueChipValueLow andVUCash:ProjDeductionCash_L andHighMedLow:@"Low"];//
    ReinvestCashFundVentureDana_L = [self Calc_CashFundReinvest:VUVentureDanaValueLow andVUCash:ProjDeductionCash_L andHighMedLow:@"Low"];//
    ReinvestCashFundVentureManaged_L = [self Calc_CashFundReinvest:VUVentureManagedValueLow andVUCash:ProjDeductionCash_L andHighMedLow:@"Low"];//
    ReinvestCashFundVentureIncome_L = [self Calc_CashFundReinvest:VUVentureIncomeValueLow andVUCash:ProjDeductionCash_L andHighMedLow:@"Low"];//
    ReinvestCashFundVenture6666_L = [self Calc_CashFundReinvest:VUVenture6666ValueLow andVUCash:ProjDeductionCash_L andHighMedLow:@"Low"];//
    ReinvestCashFundVenture7777_L = [self Calc_CashFundReinvest:VUVenture7777ValueLow andVUCash:ProjDeductionCash_L andHighMedLow:@"Low"];//
    ReinvestCashFundVenture8888_L = [self Calc_CashFundReinvest:VUVenture8888ValueLow andVUCash:ProjDeductionCash_L andHighMedLow:@"Low"];//
    ReinvestCashFundVenture9999_L = [self Calc_CashFundReinvest:VUVenture9999ValueLow andVUCash:ProjDeductionCash_L andHighMedLow:@"Low"];//
    ReinvestCashFundDana_L = [self Calc_CashFundReinvest:VUCashValueLow andVUCash:ProjDeductionCash_L andHighMedLow:@"Low"];
    
    if (ReinvestCashFund2023_H + ReinvestCashFund2025_H + ReinvestCashFund2028_H + ReinvestCashFund2030_H + ReinvestCashFund2035_H + ReinvestCashFundRet_H + ReinvestCashFundDana_H + ReinvestCashFundVentureGrowth_H + ReinvestCashFundVentureBlueChip_H + ReinvestCashFundVentureDana_H + ReinvestCashFundVentureManaged_H + ReinvestCashFundVentureIncome_H + ReinvestCashFundVenture6666_H + ReinvestCashFundVenture7777_H + ReinvestCashFundVenture8888_H + ReinvestCashFundVenture9999_H == 0 ) {//
        ReinvestCashFundCase_H = ProjDeductionCash_H;
    }
    else{
        if (ProjDeductionCash_H > 0) {
            ReinvestCashFundCase_H = -ProjDeductionCash_H;
        }
        else{
            ReinvestCashFundCase_H = 0;
        }
    }
    
    if (ReinvestCashFund2023_M + ReinvestCashFund2025_M + ReinvestCashFund2028_M + ReinvestCashFund2030_M + ReinvestCashFund2035_M + ReinvestCashFundRet_M + ReinvestCashFundDana_M + ReinvestCashFundVentureGrowth_M + ReinvestCashFundVentureBlueChip_M + ReinvestCashFundVentureDana_M + ReinvestCashFundVentureManaged_M + ReinvestCashFundVentureIncome_M + ReinvestCashFundVenture6666_M + ReinvestCashFundVenture7777_M + ReinvestCashFundVenture8888_M + ReinvestCashFundVenture9999_M == 0 ) {//
        ReinvestCashFundCase_M = ProjDeductionCash_M;
    }
    else{
        if (ProjDeductionCash_M > 0) {
            ReinvestCashFundCase_M = -ProjDeductionCash_M;
        }
        else{
            ReinvestCashFundCase_M = 0;
        }
    }
    
    if (ReinvestCashFund2023_L + ReinvestCashFund2025_L + ReinvestCashFund2028_L + ReinvestCashFund2030_L + ReinvestCashFund2035_L + ReinvestCashFundRet_L + ReinvestCashFundDana_L + ReinvestCashFundVentureGrowth_L + ReinvestCashFundVentureBlueChip_L + ReinvestCashFundVentureDana_L + ReinvestCashFundVentureManaged_L + ReinvestCashFundVentureIncome_L + ReinvestCashFundVenture6666_L + ReinvestCashFundVenture7777_L + ReinvestCashFundVenture8888_L + ReinvestCashFundVenture9999_L == 0 ) {//
        ReinvestCashFundCase_L = ProjDeductionCash_L;
    }
    else{
        if (ProjDeductionCash_L > 0) {
            ReinvestCashFundCase_L = -ProjDeductionCash_L;
        }
        else{
            ReinvestCashFundCase_L = 0;
        }
    }
    
    ReinvestCashFundSum_H = ReinvestCashFund2023_H + ReinvestCashFund2025_H + ReinvestCashFund2028_H + ReinvestCashFund2030_H + ReinvestCashFund2035_H + ReinvestCashFundRet_H + ReinvestCashFundDana_H + ReinvestCashFundCase_H + ReinvestCashFundVentureGrowth_H + ReinvestCashFundVentureBlueChip_H + ReinvestCashFundVentureDana_H + ReinvestCashFundVentureManaged_H + ReinvestCashFundVentureIncome_H + ReinvestCashFundVenture6666_H + ReinvestCashFundVenture7777_H + ReinvestCashFundVenture8888_H + ReinvestCashFundVenture9999_H;//
    ReinvestCashFundSum_M = ReinvestCashFund2023_M + ReinvestCashFund2025_M + ReinvestCashFund2028_M + ReinvestCashFund2030_M + ReinvestCashFund2035_M + ReinvestCashFundRet_M + ReinvestCashFundDana_M + ReinvestCashFundCase_M + ReinvestCashFundVentureGrowth_M + ReinvestCashFundVentureBlueChip_M + ReinvestCashFundVentureDana_M + ReinvestCashFundVentureManaged_M + ReinvestCashFundVentureIncome_M + ReinvestCashFundVenture6666_M + ReinvestCashFundVenture7777_M + ReinvestCashFundVenture8888_M + ReinvestCashFundVenture9999_M;//
    ReinvestCashFundSum_L = ReinvestCashFund2023_L + ReinvestCashFund2025_L + ReinvestCashFund2028_L + ReinvestCashFund2030_L + ReinvestCashFund2035_L + ReinvestCashFundRet_L + ReinvestCashFundDana_L + ReinvestCashFundCase_L + ReinvestCashFundVentureGrowth_L + ReinvestCashFundVentureBlueChip_L + ReinvestCashFundVentureDana_L + ReinvestCashFundVentureManaged_L + ReinvestCashFundVentureIncome_L + ReinvestCashFundVenture6666_L + ReinvestCashFundVenture7777_L + ReinvestCashFundVenture8888_L + ReinvestCashFundVenture9999_L;//
    
    if (VUCash_FundAllo_Percen == 100) {
        ProjValAfterReinvestCash_H = ProjDeductionCash_H;
        ProjValAfterReinvestCash_M = ProjDeductionCash_M;
        ProjValAfterReinvestCash_L = ProjDeductionCash_L;
        
        ProjValAfterReinvestSum_H = ProjDeductionCash_H;
        ProjValAfterReinvestSum_M = ProjDeductionCash_M;
        ProjValAfterReinvestSum_L = ProjDeductionCash_L;
    }
    else{
        ProjValAfterReinvest2023_H = ProjDeduction2023_H + ReinvestCashFund2023_H;
        ProjValAfterReinvest2025_H = ProjDeduction2025_H + ReinvestCashFund2025_H;
        ProjValAfterReinvest2028_H = ProjDeduction2028_H + ReinvestCashFund2028_H;
        ProjValAfterReinvest2030_H = ProjDeduction2030_H + ReinvestCashFund2030_H;
        ProjValAfterReinvest2035_H = ProjDeduction2035_H + ReinvestCashFund2035_H;
        ProjValAfterReinvestRet_H = ProjDeductionRet_H + ReinvestCashFundRet_H;
        ProjValAfterReinvestVentureGrowth_H = ProjDeductionVentureGrowth_H + ReinvestCashFundVentureGrowth_H;//
        ProjValAfterReinvestVentureBlueChip_H = ProjDeductionVentureBlueChip_H + ReinvestCashFundVentureBlueChip_H;//
        ProjValAfterReinvestVentureDana_H = ProjDeductionVentureDana_H + ReinvestCashFundVentureDana_H;//
        ProjValAfterReinvestVentureManaged_H = ProjDeductionVentureManaged_H + ReinvestCashFundVentureManaged_H;//
        ProjValAfterReinvestVentureIncome_H = ProjDeductionVentureIncome_H + ReinvestCashFundVentureIncome_H;//
        ProjValAfterReinvestVenture6666_H = ProjDeductionVenture6666_H + ReinvestCashFundVenture6666_H;//
        ProjValAfterReinvestVenture7777_H = ProjDeductionVenture7777_H + ReinvestCashFundVenture7777_H;//
        ProjValAfterReinvestVenture8888_H = ProjDeductionVenture8888_H + ReinvestCashFundVenture8888_H;//
        ProjValAfterReinvestVenture9999_H = ProjDeductionVenture9999_H + ReinvestCashFundVenture9999_H;//
        ProjValAfterReinvestDana_H = ProjDeductionDana_H + ReinvestCashFundDana_H;
        ProjValAfterReinvestCash_H = ReinvestCashFundSum_H;
        ProjValAfterReinvestSum_H = ProjValAfterReinvest2023_H + ProjValAfterReinvest2025_H + ProjValAfterReinvest2028_H + ProjValAfterReinvest2030_H + ProjValAfterReinvest2035_H + ProjValAfterReinvestRet_H +
        ProjValAfterReinvestDana_H + ProjValAfterReinvestVentureGrowth_H + ProjValAfterReinvestVentureBlueChip_H + ProjValAfterReinvestVentureDana_H + ProjValAfterReinvestVentureManaged_H + ProjValAfterReinvestVentureIncome_H + ProjValAfterReinvestVenture6666_H + ProjValAfterReinvestVenture7777_H + ProjValAfterReinvestVenture8888_H + ProjValAfterReinvestVenture9999_H;//
        
        ProjValAfterReinvest2023_M = ProjDeduction2023_M + ReinvestCashFund2023_M;
        ProjValAfterReinvest2025_M = ProjDeduction2025_M + ReinvestCashFund2025_M;
        ProjValAfterReinvest2028_M = ProjDeduction2028_M + ReinvestCashFund2028_M;
        ProjValAfterReinvest2030_M = ProjDeduction2030_M + ReinvestCashFund2030_M;
        ProjValAfterReinvest2035_M = ProjDeduction2035_M + ReinvestCashFund2035_M;
        ProjValAfterReinvestRet_M = ProjDeductionRet_M + ReinvestCashFundRet_M;
        ProjValAfterReinvestVentureGrowth_M = ProjDeductionVentureGrowth_M + ReinvestCashFundVentureGrowth_M;//
        ProjValAfterReinvestVentureBlueChip_M = ProjDeductionVentureBlueChip_M + ReinvestCashFundVentureBlueChip_M;//
        ProjValAfterReinvestVentureDana_M = ProjDeductionVentureDana_M + ReinvestCashFundVentureDana_M;//
        ProjValAfterReinvestVentureManaged_M = ProjDeductionVentureManaged_M + ReinvestCashFundVentureManaged_M;//
        ProjValAfterReinvestVentureIncome_M = ProjDeductionVentureIncome_M + ReinvestCashFundVentureIncome_M;//
        ProjValAfterReinvestVenture6666_M = ProjDeductionVenture6666_M + ReinvestCashFundVenture6666_M;//
        ProjValAfterReinvestVenture7777_M = ProjDeductionVenture7777_M + ReinvestCashFundVenture7777_M;//
        ProjValAfterReinvestVenture8888_M = ProjDeductionVenture8888_M + ReinvestCashFundVenture8888_M;//
        ProjValAfterReinvestVenture9999_M = ProjDeductionVenture9999_M + ReinvestCashFundVenture9999_M;//
        ProjValAfterReinvestDana_M = ProjDeductionDana_M + ReinvestCashFundDana_M;
        ProjValAfterReinvestCash_M = ReinvestCashFundSum_M;
        ProjValAfterReinvestSum_M = ProjValAfterReinvest2023_M + ProjValAfterReinvest2025_M + ProjValAfterReinvest2028_M + ProjValAfterReinvest2030_M + ProjValAfterReinvest2035_M + ProjValAfterReinvestRet_M +
        ProjValAfterReinvestDana_M + ProjValAfterReinvestVentureGrowth_M + ProjValAfterReinvestVentureBlueChip_M + ProjValAfterReinvestVentureDana_M + ProjValAfterReinvestVentureManaged_M + ProjValAfterReinvestVentureIncome_M + ProjValAfterReinvestVenture6666_M + ProjValAfterReinvestVenture7777_M + ProjValAfterReinvestVenture8888_M + ProjValAfterReinvestVenture9999_M;//
        
        ProjValAfterReinvest2023_L = ProjDeduction2023_L + ReinvestCashFund2023_L;
        ProjValAfterReinvest2025_L = ProjDeduction2025_L + ReinvestCashFund2025_L;
        ProjValAfterReinvest2028_L = ProjDeduction2028_L + ReinvestCashFund2028_L;
        ProjValAfterReinvest2030_L = ProjDeduction2030_L + ReinvestCashFund2030_L;
        ProjValAfterReinvest2035_L = ProjDeduction2035_L + ReinvestCashFund2035_L;
        ProjValAfterReinvestRet_L = ProjDeductionRet_L + ReinvestCashFundRet_L;
        ProjValAfterReinvestVentureGrowth_L = ProjDeductionVentureGrowth_L + ReinvestCashFundVentureGrowth_L;//
        ProjValAfterReinvestVentureBlueChip_L = ProjDeductionVentureBlueChip_L + ReinvestCashFundVentureBlueChip_L;//
        ProjValAfterReinvestVentureDana_L = ProjDeductionVentureDana_L + ReinvestCashFundVentureDana_L;//
        ProjValAfterReinvestVentureManaged_L = ProjDeductionVentureManaged_L + ReinvestCashFundVentureManaged_L;//
        ProjValAfterReinvestVentureIncome_L = ProjDeductionVentureIncome_L + ReinvestCashFundVentureIncome_L;//
        ProjValAfterReinvestVenture6666_L = ProjDeductionVenture6666_L + ReinvestCashFundVenture6666_L;//
        ProjValAfterReinvestVenture7777_L = ProjDeductionVenture7777_L + ReinvestCashFundVenture7777_L;//
        ProjValAfterReinvestVenture8888_L = ProjDeductionVenture8888_L + ReinvestCashFundVenture8888_L;//
        ProjValAfterReinvestVenture9999_L = ProjDeductionVenture9999_L + ReinvestCashFundVenture9999_L;//
        ProjValAfterReinvestDana_L = ProjDeductionDana_L + ReinvestCashFundDana_L;
        ProjValAfterReinvestCash_L = ReinvestCashFundSum_L;
        ProjValAfterReinvestSum_L = ProjValAfterReinvest2023_L + ProjValAfterReinvest2025_L + ProjValAfterReinvest2028_L + ProjValAfterReinvest2030_L + ProjValAfterReinvest2035_L + ProjValAfterReinvestRet_L +
        ProjValAfterReinvestDana_L + ProjValAfterReinvestVentureGrowth_L + ProjValAfterReinvestVentureBlueChip_L + ProjValAfterReinvestVentureDana_L + ProjValAfterReinvestVentureManaged_L + ProjValAfterReinvestVentureIncome_L + ProjValAfterReinvestVenture6666_L + ProjValAfterReinvestVenture7777_L + ProjValAfterReinvestVenture8888_L + ProjValAfterReinvestVenture9999_L;//
    }
    //-------------------
    
    PrevPaidUpOptionTable_2023_High = ProjValAfterReinvest2023_H;
    PrevPaidUpOptionTable_2025_High = ProjValAfterReinvest2025_H;
    PrevPaidUpOptionTable_2028_High = ProjValAfterReinvest2028_H;
    PrevPaidUpOptionTable_2030_High = ProjValAfterReinvest2030_H;
    PrevPaidUpOptionTable_2035_High = ProjValAfterReinvest2035_H;
    PrevPaidUpOptionTable_Cash_High = ProjValAfterReinvestCash_H;
    PrevPaidUpOptionTable_Ret_High = ProjValAfterReinvestRet_H;
    PrevPaidUpOptionTable_VentureGrowth_High = ProjValAfterReinvestVentureGrowth_H;//
    PrevPaidUpOptionTable_VentureBlueChip_High = ProjValAfterReinvestVentureBlueChip_H;//
    PrevPaidUpOptionTable_VentureDana_High = ProjValAfterReinvestVentureDana_H;//
    PrevPaidUpOptionTable_VentureManaged_High = ProjValAfterReinvestVentureManaged_H;//
    PrevPaidUpOptionTable_VentureIncome_High = ProjValAfterReinvestVentureIncome_H;//
    PrevPaidUpOptionTable_Venture6666_High = ProjValAfterReinvestVenture6666_H;//
    PrevPaidUpOptionTable_Venture7777_High = ProjValAfterReinvestVenture7777_H;//
    PrevPaidUpOptionTable_Venture8888_High = ProjValAfterReinvestVenture8888_H;//
    PrevPaidUpOptionTable_Venture9999_High = ProjValAfterReinvestVenture9999_H;//
    PrevPaidUpOptionTable_Dana_High = ProjValAfterReinvestDana_H;
    
    PrevPaidUpOptionTable_2023_Median = ProjValAfterReinvest2023_M;
    PrevPaidUpOptionTable_2025_Median = ProjValAfterReinvest2025_M;
    PrevPaidUpOptionTable_2028_Median = ProjValAfterReinvest2028_M;
    PrevPaidUpOptionTable_2030_Median = ProjValAfterReinvest2030_M;
    PrevPaidUpOptionTable_2035_Median = ProjValAfterReinvest2035_M;
    PrevPaidUpOptionTable_Cash_Median = ProjValAfterReinvestCash_M;
    PrevPaidUpOptionTable_Ret_Median = ProjValAfterReinvestRet_M;
    PrevPaidUpOptionTable_VentureGrowth_Median = ProjValAfterReinvestVentureGrowth_M;//
    PrevPaidUpOptionTable_VentureBlueChip_Median = ProjValAfterReinvestVentureBlueChip_M;//
    PrevPaidUpOptionTable_VentureDana_Median = ProjValAfterReinvestVentureDana_M;//
    PrevPaidUpOptionTable_VentureManaged_Median = ProjValAfterReinvestVentureManaged_M;//
    PrevPaidUpOptionTable_VentureIncome_Median = ProjValAfterReinvestVentureIncome_M;//
    PrevPaidUpOptionTable_Venture6666_Median = ProjValAfterReinvestVenture6666_M;//
    PrevPaidUpOptionTable_Venture7777_Median = ProjValAfterReinvestVenture7777_M;//
    PrevPaidUpOptionTable_Venture8888_Median = ProjValAfterReinvestVenture8888_M;//
    PrevPaidUpOptionTable_Venture9999_Median = ProjValAfterReinvestVenture9999_M;//
    PrevPaidUpOptionTable_Dana_Median = ProjValAfterReinvestDana_M;
    
    PrevPaidUpOptionTable_2023_Low = ProjValAfterReinvest2023_L;
    PrevPaidUpOptionTable_2025_Low = ProjValAfterReinvest2025_L;
    PrevPaidUpOptionTable_2028_Low = ProjValAfterReinvest2028_L;
    PrevPaidUpOptionTable_2030_Low = ProjValAfterReinvest2030_L;
    PrevPaidUpOptionTable_2035_Low = ProjValAfterReinvest2035_L;
    PrevPaidUpOptionTable_Cash_Low = ProjValAfterReinvestCash_L;
    PrevPaidUpOptionTable_Ret_Low = ProjValAfterReinvestRet_L;
    PrevPaidUpOptionTable_VentureGrowth_Low = ProjValAfterReinvestVentureGrowth_L;//
    PrevPaidUpOptionTable_VentureBlueChip_Low = ProjValAfterReinvestVentureBlueChip_L;//
    PrevPaidUpOptionTable_VentureDana_Low = ProjValAfterReinvestVentureDana_L;//
    PrevPaidUpOptionTable_VentureManaged_Low = ProjValAfterReinvestVentureManaged_L;//
    PrevPaidUpOptionTable_VentureIncome_Low = ProjValAfterReinvestVentureIncome_L;//
    PrevPaidUpOptionTable_Venture6666_Low = ProjValAfterReinvestVenture6666_L;//
    PrevPaidUpOptionTable_Venture7777_Low = ProjValAfterReinvestVenture7777_L;//
    PrevPaidUpOptionTable_Venture8888_Low = ProjValAfterReinvestVenture8888_L;//
    PrevPaidUpOptionTable_Venture9999_Low = ProjValAfterReinvestVenture9999_L;//
    PrevPaidUpOptionTable_Dana_Low = ProjValAfterReinvestDana_L;
    
    
    int FromYear = [RPUOYear intValue] + 1;
    int ToYear;
    if (Age > 50) {
        ToYear = 75 - Age;
    }
    else{
        ToYear = 25;
    }
    
    double ReinvestRate2023 = 0.00;
    double ReinvestRate2025 = 0.00;
    double ReinvestRate2028 = 0.00;
    double ReinvestRate2030 = 0.00;
    double ReinvestRate2035 = 0.00;
    int ReinvestRate2023to2025, ReinvestRate2023to2028,ReinvestRate2023to2030,ReinvestRate2023to2035,ReinvestRate2023toCash,ReinvestRate2023toRet,ReinvestRate2023toDana,ReinvestRate2023toVentureGrowth,ReinvestRate2023toVentureBlueChip,ReinvestRate2023toVentureDana,ReinvestRate2023toVentureManaged,ReinvestRate2023toVentureIncome,ReinvestRate2023toVenture6666,ReinvestRate2023toVenture7777,ReinvestRate2023toVenture8888,ReinvestRate2023toVenture9999;//
    int ReinvestRate2025to2028, ReinvestRate2025to2030,ReinvestRate2025to2035,ReinvestRate2025toCash,ReinvestRate2025toRet,ReinvestRate2025toDana,ReinvestRate2025toVentureGrowth,ReinvestRate2025toVentureBlueChip,ReinvestRate2025toVentureDana,ReinvestRate2025toVentureManaged,ReinvestRate2025toVentureIncome,ReinvestRate2025toVenture6666,ReinvestRate2025toVenture7777,ReinvestRate2025toVenture8888,ReinvestRate2025toVenture9999;//
    int ReinvestRate2028to2030, ReinvestRate2028to2035,ReinvestRate2028toCash,ReinvestRate2028toRet,ReinvestRate2028toDana,ReinvestRate2028toVentureGrowth,ReinvestRate2028toVentureBlueChip,ReinvestRate2028toVentureDana,ReinvestRate2028toVentureManaged,ReinvestRate2028toVentureIncome,ReinvestRate2028toVenture6666,ReinvestRate2028toVenture7777,ReinvestRate2028toVenture8888,ReinvestRate2028toVenture9999;//
    int ReinvestRate2030to2035, ReinvestRate2030toCash,ReinvestRate2030toRet,ReinvestRate2030toDana,ReinvestRate2030toVentureGrowth,ReinvestRate2030toVentureBlueChip,ReinvestRate2030toVentureDana,ReinvestRate2030toVentureManaged,ReinvestRate2030toVentureIncome,ReinvestRate2030toVenture6666,ReinvestRate2030toVenture7777,ReinvestRate2030toVenture8888,ReinvestRate2030toVenture9999;//
    int ReinvestRate2035toCash, ReinvestRate2035toRet,ReinvestRate2035toDana,ReinvestRate2035toVentureGrowth,ReinvestRate2035toVentureBlueChip,ReinvestRate2035toVentureDana,ReinvestRate2035toVentureManaged,ReinvestRate2035toVentureIncome,ReinvestRate2035toVenture6666,ReinvestRate2035toVenture7777,ReinvestRate2035toVenture8888,ReinvestRate2035toVenture9999;//
    
    for (int polYear = FromYear; polYear <= ToYear; polYear++) {
        if (polYear == FundTerm2023) {
            if (Fund2023PartialReinvest == 0) {
                ReinvestRate2023 = 100; //meaning fully reinvest
            }
            else{
                ReinvestRate2023 = 100 - Fund2023PartialReinvest;
            }
            
            if (Fund2023PartialReinvest != 100) { //meaning not withdraw
                ReinvestRate2023to2025 = Fund2023ReinvestTo2025Fac;
                ReinvestRate2023to2028 = Fund2023ReinvestTo2028Fac;
                ReinvestRate2023to2030 = Fund2023ReinvestTo2030Fac;
                ReinvestRate2023to2035 = Fund2023ReinvestTo2035Fac;
                ReinvestRate2023toCash = Fund2023ReinvestToCashFac;
                ReinvestRate2023toDana = Fund2023ReinvestToDanaFac;
                ReinvestRate2023toRet = Fund2023ReinvestToRetFac;
                ReinvestRate2023toVentureGrowth = Fund2023ReinvestToVentureGrowthFac;//
                ReinvestRate2023toVentureBlueChip = Fund2023ReinvestToVentureBlueChipFac;//
                ReinvestRate2023toVentureDana = Fund2023ReinvestToVentureDanaFac;//
                ReinvestRate2023toVentureManaged = Fund2023ReinvestToVentureManagedFac;//
                ReinvestRate2023toVentureIncome = Fund2023ReinvestToVentureIncomeFac;//
                ReinvestRate2023toVenture6666 = Fund2023ReinvestToVenture6666Fac;//
                ReinvestRate2023toVenture7777 = Fund2023ReinvestToVenture7777Fac;//
                ReinvestRate2023toVenture8888 = Fund2023ReinvestToVenture8888Fac;//
                ReinvestRate2023toVenture9999 = Fund2023ReinvestToVenture9999Fac;//
            }
            else{
                ReinvestRate2023to2025 = 0.00;
                ReinvestRate2023to2028 = 0.00;
                ReinvestRate2023to2030 = 0.00;
                ReinvestRate2023to2035 = 0.00;
                ReinvestRate2023toCash = 0.00;
                ReinvestRate2023toDana = 0.00;
                ReinvestRate2023toRet = 0.00;
                ReinvestRate2023toVentureGrowth = 0.00;//
                ReinvestRate2023toVentureBlueChip = 0.00;//
                ReinvestRate2023toVentureDana = 0.00;//
                ReinvestRate2023toVentureManaged = 0.00;//
                ReinvestRate2023toVentureIncome = 0.00;//
                ReinvestRate2023toVenture6666 = 0.00;//
                ReinvestRate2023toVenture7777 = 0.00;//
                ReinvestRate2023toVenture8888 = 0.00;//
                ReinvestRate2023toVenture9999 = 0.00;//
            }
            
            
            //---- for 2023
            ProjValueMaturity2023_H = [self PaidUpOptionTable_2023_H_Balance:PrevPaidUpOptionTable_2023_High andPolicyYear:polYear];
            ProjWithdraw2023_H = ProjValueMaturity2023_H * ((100 - ReinvestRate2023)/100.00);
            ProjReinvest2023_H = ProjValueMaturity2023_H - ProjWithdraw2023_H;
            
            ProjValueMaturity2023_M = [self PaidUpOptionTable_2023_M_Balance:PrevPaidUpOptionTable_2023_Median andPolicyYear:polYear];
            ProjWithdraw2023_M = ProjValueMaturity2023_M * ((100 - ReinvestRate2023)/100.00);
            ProjReinvest2023_M = ProjValueMaturity2023_M - ProjWithdraw2023_M;
            
            ProjValueMaturity2023_L = [self PaidUpOptionTable_2023_L_Balance:PrevPaidUpOptionTable_2023_Low andPolicyYear:polYear];
            ProjWithdraw2023_L = ProjValueMaturity2023_L * ((100 - ReinvestRate2023)/100.00);
            ProjReinvest2023_L = ProjValueMaturity2023_L - ProjWithdraw2023_L;
            //-------
            
            //-- for 2025---
            ReinvestAmount2023to2025_H = ProjValueMaturity2023_H * (ReinvestRate2023/100.00) * (ReinvestRate2023to2025/100.00);
            ProjValueMaturity2025_H = [self PaidUpOptionTable_2025_High:PrevPaidUpOptionTable_2025_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_2025_High = ProjValueMaturity2025_H;
            
            ReinvestAmount2023to2025_M = ProjValueMaturity2023_M * (ReinvestRate2023/100.00) * (ReinvestRate2023to2025/100.00);
            ProjValueMaturity2025_M = [self PaidUpOptionTable_2025_Median:PrevPaidUpOptionTable_2025_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_2025_Median = ProjValueMaturity2025_M;
            
            ReinvestAmount2023to2025_L = ProjValueMaturity2023_L * (ReinvestRate2023/100.00) * (ReinvestRate2023to2025/100.00);
            ProjValueMaturity2025_L = [self PaidUpOptionTable_2025_Low:PrevPaidUpOptionTable_2025_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_2025_Low = ProjValueMaturity2025_L;
            //------------
            
            //-- for 2028---
            ReinvestAmount2023to2028_H = ProjValueMaturity2023_H * (ReinvestRate2023/100.00) * (ReinvestRate2023to2028/100.00);
            ProjValueMaturity2028_H = [self PaidUpOptionTable_2028_High:PrevPaidUpOptionTable_2028_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_2028_High = ProjValueMaturity2028_H;
            
            ReinvestAmount2023to2028_M = ProjValueMaturity2023_M * (ReinvestRate2023/100.00) * (ReinvestRate2023to2028/100.00);
            ProjValueMaturity2028_M = [self PaidUpOptionTable_2028_Median:PrevPaidUpOptionTable_2028_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_2028_Median = ProjValueMaturity2028_M;
            
            ReinvestAmount2023to2028_L = ProjValueMaturity2023_L * (ReinvestRate2023/100.00) * (ReinvestRate2023to2028/100.00);
            ProjValueMaturity2028_L = [self PaidUpOptionTable_2028_Low:PrevPaidUpOptionTable_2028_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_2028_Low = ProjValueMaturity2028_L;
            //------------
            
            //-- for 2030---
            ReinvestAmount2023to2030_H = ProjValueMaturity2023_H * (ReinvestRate2023/100.00) * (ReinvestRate2023to2030/100.00);
            ProjValueMaturity2030_H = [self PaidUpOptionTable_2030_High:PrevPaidUpOptionTable_2030_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_2030_High = ProjValueMaturity2030_H;
            
            ReinvestAmount2023to2030_M = ProjValueMaturity2023_M * (ReinvestRate2023/100.00) * (ReinvestRate2023to2030/100.00);
            ProjValueMaturity2030_M = [self PaidUpOptionTable_2030_Median:PrevPaidUpOptionTable_2030_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_2030_Median = ProjValueMaturity2030_M;
            
            ReinvestAmount2023to2030_L = ProjValueMaturity2023_L * (ReinvestRate2023/100.00) * (ReinvestRate2023to2030/100.00);
            ProjValueMaturity2030_L = [self PaidUpOptionTable_2030_Low:PrevPaidUpOptionTable_2030_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_2030_Low = ProjValueMaturity2030_L;
            //------------
            
            //-- for 2035---
            ReinvestAmount2023to2035_H = ProjValueMaturity2023_H * (ReinvestRate2023/100.00) * (ReinvestRate2023to2035/100.00);
            ProjValueMaturity2035_H = [self PaidUpOptionTable_2035_High:PrevPaidUpOptionTable_2035_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_2035_High = ProjValueMaturity2035_H;
            
            ReinvestAmount2023to2035_M = ProjValueMaturity2023_M * (ReinvestRate2023/100.00) * (ReinvestRate2023to2035/100.00);
            ProjValueMaturity2035_M = [self PaidUpOptionTable_2035_Median:PrevPaidUpOptionTable_2035_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_2035_Median = ProjValueMaturity2035_M;
            
            ReinvestAmount2023to2035_L = ProjValueMaturity2023_L * (ReinvestRate2023/100.00) * (ReinvestRate2023to2035/100.00);
            ProjValueMaturity2035_L = [self PaidUpOptionTable_2035_Low:PrevPaidUpOptionTable_2035_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_2035_Low = ProjValueMaturity2035_L;
            //------------
            
            //-- for Secure Fund---
            ReinvestAmount2023toRet_H = ProjValueMaturity2023_H * (ReinvestRate2023/100.00) * (ReinvestRate2023toRet/100.00);
            ProjValueMaturityRet_H = [self PaidUpOptionTable_Ret_High:PrevPaidUpOptionTable_Ret_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_Ret_High = ProjValueMaturityRet_H;
            
            ReinvestAmount2023toRet_M = ProjValueMaturity2023_M * (ReinvestRate2023/100.00) * (ReinvestRate2023toRet/100.00);
            ProjValueMaturityRet_M = [self PaidUpOptionTable_Ret_Median:PrevPaidUpOptionTable_Ret_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_Ret_Median = ProjValueMaturityRet_M;
            
            ReinvestAmount2023toRet_L = ProjValueMaturity2023_L * (ReinvestRate2023/100.00) * (ReinvestRate2023toRet/100.00);
            ProjValueMaturityRet_L = [self PaidUpOptionTable_Ret_Low:PrevPaidUpOptionTable_Ret_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_Ret_Low = ProjValueMaturityRet_L;
            //------------
            
            //-- for Secure Fund--- Venture 1111
            ReinvestAmount2023toVentureGrowth_H = ProjValueMaturity2023_H * (ReinvestRate2023/100.00) * (ReinvestRate2023toVentureGrowth/100.00);
            ProjValueMaturityVentureGrowth_H = [self PaidUpOptionTable_VentureGrowth_High:PrevPaidUpOptionTable_VentureGrowth_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureGrowth_High = ProjValueMaturityVentureGrowth_H;
            
            ReinvestAmount2023toVentureGrowth_M = ProjValueMaturity2023_M * (ReinvestRate2023/100.00) * (ReinvestRate2023toVentureGrowth/100.00);
            ProjValueMaturityVentureGrowth_M = [self PaidUpOptionTable_VentureGrowth_Median:PrevPaidUpOptionTable_VentureGrowth_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureGrowth_Median = ProjValueMaturityVentureGrowth_M;
            
            ReinvestAmount2023toVentureGrowth_L = ProjValueMaturity2023_L * (ReinvestRate2023/100.00) * (ReinvestRate2023toVentureGrowth/100.00);
            ProjValueMaturityVentureGrowth_L = [self PaidUpOptionTable_VentureGrowth_Low:PrevPaidUpOptionTable_VentureGrowth_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureGrowth_Low = ProjValueMaturityVentureGrowth_L;
            //------------
            
            
            //-- for Secure Fund--- Venture 2222
            ReinvestAmount2023toVentureBlueChip_H = ProjValueMaturity2023_H * (ReinvestRate2023/100.00) * (ReinvestRate2023toVentureBlueChip/100.00);
            ProjValueMaturityVentureBlueChip_H = [self PaidUpOptionTable_VentureBlueChip_High:PrevPaidUpOptionTable_VentureBlueChip_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureBlueChip_High = ProjValueMaturityVentureBlueChip_H;
            
            ReinvestAmount2023toVentureBlueChip_M = ProjValueMaturity2023_M * (ReinvestRate2023/100.00) * (ReinvestRate2023toVentureBlueChip/100.00);
            ProjValueMaturityVentureBlueChip_M = [self PaidUpOptionTable_VentureBlueChip_Median:PrevPaidUpOptionTable_VentureBlueChip_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureBlueChip_Median = ProjValueMaturityVentureBlueChip_M;
            
            ReinvestAmount2023toVentureBlueChip_L = ProjValueMaturity2023_L * (ReinvestRate2023/100.00) * (ReinvestRate2023toVentureBlueChip/100.00);
            ProjValueMaturityVentureBlueChip_L = [self PaidUpOptionTable_VentureBlueChip_Low:PrevPaidUpOptionTable_VentureBlueChip_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureBlueChip_Low = ProjValueMaturityVentureBlueChip_L;
            //------------
            
            
            //-- for Secure Fund--- Venture 3333
            ReinvestAmount2023toVentureDana_H = ProjValueMaturity2023_H * (ReinvestRate2023/100.00) * (ReinvestRate2023toVentureDana/100.00);
            ProjValueMaturityVentureDana_H = [self PaidUpOptionTable_VentureDana_High:PrevPaidUpOptionTable_VentureDana_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureDana_High = ProjValueMaturityVentureDana_H;
            
            ReinvestAmount2023toVentureDana_M = ProjValueMaturity2023_M * (ReinvestRate2023/100.00) * (ReinvestRate2023toVentureDana/100.00);
            ProjValueMaturityVentureDana_M = [self PaidUpOptionTable_VentureDana_Median:PrevPaidUpOptionTable_VentureDana_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureDana_Median = ProjValueMaturityVentureDana_M;
            
            ReinvestAmount2023toVentureDana_L = ProjValueMaturity2023_L * (ReinvestRate2023/100.00) * (ReinvestRate2023toVentureDana/100.00);
            ProjValueMaturityVentureDana_L = [self PaidUpOptionTable_VentureDana_Low:PrevPaidUpOptionTable_VentureDana_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureDana_Low = ProjValueMaturityVentureDana_L;
            //------------
            
            //-- for Secure Fund--- Venture 4444
            ReinvestAmount2023toVentureManaged_H = ProjValueMaturity2023_H * (ReinvestRate2023/100.00) * (ReinvestRate2023toVentureManaged/100.00);
            ProjValueMaturityVentureManaged_H = [self PaidUpOptionTable_VentureManaged_High:PrevPaidUpOptionTable_VentureManaged_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureManaged_High = ProjValueMaturityVentureManaged_H;
            
            ReinvestAmount2023toVentureManaged_M = ProjValueMaturity2023_M * (ReinvestRate2023/100.00) * (ReinvestRate2023toVentureManaged/100.00);
            ProjValueMaturityVentureManaged_M = [self PaidUpOptionTable_VentureManaged_Median:PrevPaidUpOptionTable_VentureManaged_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureManaged_Median = ProjValueMaturityVentureManaged_M;
            
            ReinvestAmount2023toVentureManaged_L = ProjValueMaturity2023_L * (ReinvestRate2023/100.00) * (ReinvestRate2023toVentureManaged/100.00);
            ProjValueMaturityVentureManaged_L = [self PaidUpOptionTable_VentureManaged_Low:PrevPaidUpOptionTable_VentureManaged_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureManaged_Low = ProjValueMaturityVentureManaged_L;
            //------------
            
            //-- for Secure Fund--- Venture 5555
            ReinvestAmount2023toVentureIncome_H = ProjValueMaturity2023_H * (ReinvestRate2023/100.00) * (ReinvestRate2023toVentureIncome/100.00);
            ProjValueMaturityVentureIncome_H = [self PaidUpOptionTable_VentureIncome_High:PrevPaidUpOptionTable_VentureIncome_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureIncome_High = ProjValueMaturityVentureIncome_H;
            
            ReinvestAmount2023toVentureIncome_M = ProjValueMaturity2023_M * (ReinvestRate2023/100.00) * (ReinvestRate2023toVentureIncome/100.00);
            ProjValueMaturityVentureIncome_M = [self PaidUpOptionTable_VentureIncome_Median:PrevPaidUpOptionTable_VentureIncome_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureIncome_Median = ProjValueMaturityVentureIncome_M;
            
            ReinvestAmount2023toVentureIncome_L = ProjValueMaturity2023_L * (ReinvestRate2023/100.00) * (ReinvestRate2023toVentureIncome/100.00);
            ProjValueMaturityVentureIncome_L = [self PaidUpOptionTable_VentureIncome_Low:PrevPaidUpOptionTable_VentureIncome_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureIncome_Low = ProjValueMaturityVentureIncome_L;
            //------------
            
            //-- for Secure Fund--- Venture 6666
            ReinvestAmount2023toVenture6666_H = ProjValueMaturity2023_H * (ReinvestRate2023/100.00) * (ReinvestRate2023toVenture6666/100.00);
            ProjValueMaturityVenture6666_H = [self PaidUpOptionTable_Venture6666_High:PrevPaidUpOptionTable_Venture6666_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture6666_High = ProjValueMaturityVenture6666_H;
            
            ReinvestAmount2023toVenture6666_M = ProjValueMaturity2023_M * (ReinvestRate2023/100.00) * (ReinvestRate2023toVenture6666/100.00);
            ProjValueMaturityVenture6666_M = [self PaidUpOptionTable_Venture6666_Median:PrevPaidUpOptionTable_Venture6666_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture6666_Median = ProjValueMaturityVenture6666_M;
            
            ReinvestAmount2023toVenture6666_L = ProjValueMaturity2023_L * (ReinvestRate2023/100.00) * (ReinvestRate2023toVenture6666/100.00);
            ProjValueMaturityVenture6666_L = [self PaidUpOptionTable_Venture6666_Low:PrevPaidUpOptionTable_Venture6666_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture6666_Low = ProjValueMaturityVenture6666_L;
            //------------
            
            //-- for Secure Fund--- Venture 7777
            ReinvestAmount2023toVenture7777_H = ProjValueMaturity2023_H * (ReinvestRate2023/100.00) * (ReinvestRate2023toVenture7777/100.00);
            ProjValueMaturityVenture7777_H = [self PaidUpOptionTable_Venture7777_High:PrevPaidUpOptionTable_Venture7777_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture7777_High = ProjValueMaturityVenture7777_H;
            
            ReinvestAmount2023toVenture7777_M = ProjValueMaturity2023_M * (ReinvestRate2023/100.00) * (ReinvestRate2023toVenture7777/100.00);
            ProjValueMaturityVenture7777_M = [self PaidUpOptionTable_Venture7777_Median:PrevPaidUpOptionTable_Venture7777_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture7777_Median = ProjValueMaturityVenture7777_M;
            
            ReinvestAmount2023toVenture7777_L = ProjValueMaturity2023_L * (ReinvestRate2023/100.00) * (ReinvestRate2023toVenture7777/100.00);
            ProjValueMaturityVenture7777_L = [self PaidUpOptionTable_Venture7777_Low:PrevPaidUpOptionTable_Venture7777_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture7777_Low = ProjValueMaturityVenture7777_L;
            //------------
            
            //-- for Secure Fund--- Venture 8888
            ReinvestAmount2023toVenture8888_H = ProjValueMaturity2023_H * (ReinvestRate2023/100.00) * (ReinvestRate2023toVenture8888/100.00);
            ProjValueMaturityVenture8888_H = [self PaidUpOptionTable_Venture8888_High:PrevPaidUpOptionTable_Venture8888_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture8888_High = ProjValueMaturityVenture8888_H;
            
            ReinvestAmount2023toVenture8888_M = ProjValueMaturity2023_M * (ReinvestRate2023/100.00) * (ReinvestRate2023toVenture8888/100.00);
            ProjValueMaturityVenture8888_M = [self PaidUpOptionTable_Venture8888_Median:PrevPaidUpOptionTable_Venture8888_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture8888_Median = ProjValueMaturityVenture8888_M;
            
            ReinvestAmount2023toVenture8888_L = ProjValueMaturity2023_L * (ReinvestRate2023/100.00) * (ReinvestRate2023toVenture8888/100.00);
            ProjValueMaturityVenture8888_L = [self PaidUpOptionTable_Venture8888_Low:PrevPaidUpOptionTable_Venture8888_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture8888_Low = ProjValueMaturityVenture8888_L;
            //------------
            
            //-- for Secure Fund--- Venture 9999
            ReinvestAmount2023toVenture9999_H = ProjValueMaturity2023_H * (ReinvestRate2023/100.00) * (ReinvestRate2023toVenture9999/100.00);
            ProjValueMaturityVenture9999_H = [self PaidUpOptionTable_Venture9999_High:PrevPaidUpOptionTable_Venture9999_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture9999_High = ProjValueMaturityVenture9999_H;
            
            ReinvestAmount2023toVenture9999_M = ProjValueMaturity2023_M * (ReinvestRate2023/100.00) * (ReinvestRate2023toVenture9999/100.00);
            ProjValueMaturityVenture9999_M = [self PaidUpOptionTable_Venture9999_Median:PrevPaidUpOptionTable_Venture9999_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture9999_Median = ProjValueMaturityVenture9999_M;
            
            ReinvestAmount2023toVenture9999_L = ProjValueMaturity2023_L * (ReinvestRate2023/100.00) * (ReinvestRate2023toVenture9999/100.00);
            ProjValueMaturityVenture9999_L = [self PaidUpOptionTable_Venture9999_Low:PrevPaidUpOptionTable_Venture9999_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture9999_Low = ProjValueMaturityVenture9999_L;
            //------------
            
            //-- for Dana Fund---
            ReinvestAmount2023toDana_H = ProjValueMaturity2023_H * (ReinvestRate2023/100.00) * (ReinvestRate2023toDana/100.00);
            ProjValueMaturityDana_H = [self PaidUpOptionTable_Dana_High:PrevPaidUpOptionTable_Dana_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_Dana_High = ProjValueMaturityDana_H;
            
            ReinvestAmount2023toDana_M = ProjValueMaturity2023_M * (ReinvestRate2023/100.00) * (ReinvestRate2023toDana/100.00);
            ProjValueMaturityDana_M = [self PaidUpOptionTable_Dana_Median:PrevPaidUpOptionTable_Dana_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_Dana_Median = ProjValueMaturityDana_M;
            
            ReinvestAmount2023toDana_L = ProjValueMaturity2023_L * (ReinvestRate2023/100.00) * (ReinvestRate2023toDana/100.00);
            ProjValueMaturityDana_L = [self PaidUpOptionTable_Dana_Low:PrevPaidUpOptionTable_Dana_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_Dana_Low = ProjValueMaturityDana_L;
            //------------
            
            //-- for Cash Fund---
            ReinvestAmount2023toCash_H = ProjValueMaturity2023_H * (ReinvestRate2023/100.00) * (ReinvestRate2023toCash/100.00);
            ProjValueMaturityCash_H = [self PaidUpOptionTable_Cash_High:PrevPaidUpOptionTable_Cash_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_Cash_High = ProjValueMaturityCash_H;
            
            ReinvestAmount2023toCash_M = ProjValueMaturity2023_M * (ReinvestRate2023/100.00) * (ReinvestRate2023toCash/100.00);
            ProjValueMaturityCash_M = [self PaidUpOptionTable_Cash_Median:PrevPaidUpOptionTable_Cash_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_Cash_Median = ProjValueMaturityCash_M;
            
            ReinvestAmount2023toCash_L = ProjValueMaturity2023_L * (ReinvestRate2023/100.00) * (ReinvestRate2023toCash/100.00);
            ProjValueMaturityCash_L = [self PaidUpOptionTable_Cash_Low:PrevPaidUpOptionTable_Cash_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_Cash_Low = ProjValueMaturityCash_L;
            //------------
            
        }
        
        else if (polYear == FundTerm2025) {
            
            if (Fund2025PartialReinvest == 0) {
                ReinvestRate2025 = 100; //meaning 2025 is fully reinvest
            }
            else{
                ReinvestRate2025 = 100 - Fund2025PartialReinvest;
            }
            
            if (Fund2025PartialReinvest != 100) { //meaning 2025 is not withdraw
                ReinvestRate2025to2028 = Fund2025ReinvestTo2028Fac;
                ReinvestRate2025to2030 = Fund2025ReinvestTo2030Fac;
                ReinvestRate2025to2035 = Fund2025ReinvestTo2035Fac;
                ReinvestRate2025toCash = Fund2025ReinvestToCashFac;
                ReinvestRate2025toDana = Fund2025ReinvestToDanaFac;
                ReinvestRate2025toRet = Fund2025ReinvestToRetFac;
                ReinvestRate2025toVentureGrowth = Fund2025ReinvestToVentureGrowthFac;//
                ReinvestRate2025toVentureBlueChip = Fund2025ReinvestToVentureBlueChipFac;//
                ReinvestRate2025toVentureDana = Fund2025ReinvestToVentureDanaFac;//
                ReinvestRate2025toVentureManaged = Fund2025ReinvestToVentureManagedFac;//
                ReinvestRate2025toVentureIncome = Fund2025ReinvestToVentureIncomeFac;//
                ReinvestRate2025toVenture6666 = Fund2025ReinvestToVenture6666Fac;//
                ReinvestRate2025toVenture7777 = Fund2025ReinvestToVenture7777Fac;//
                ReinvestRate2025toVenture8888 = Fund2025ReinvestToVenture8888Fac;//
                ReinvestRate2025toVenture9999 = Fund2025ReinvestToVenture9999Fac;//
            }
            else{
                ReinvestRate2025to2028 = 0.00;
                ReinvestRate2025to2030 = 0.00;
                ReinvestRate2025to2035 = 0.00;
                ReinvestRate2025toCash = 0.00;
                ReinvestRate2025toDana = 0.00;
                ReinvestRate2025toRet = 0.00;
                ReinvestRate2025toVentureGrowth = 0.00;//
                ReinvestRate2025toVentureBlueChip = 0.00;//
                ReinvestRate2025toVentureDana = 0.00;//
                ReinvestRate2025toVentureManaged = 0.00;//
                ReinvestRate2025toVentureIncome = 0.00;//
                ReinvestRate2025toVenture6666 = 0.00;//
                ReinvestRate2025toVenture7777 = 0.00;//
                ReinvestRate2025toVenture8888 = 0.00;//
                ReinvestRate2025toVenture9999 = 0.00;//
            }
            
            //---- for 2025
            ProjValueMaturity2025_H = [self PaidUpOptionTable_2025_H_Balance:PrevPaidUpOptionTable_2025_High andPolicyYear:polYear];
            ProjWithdraw2025_H = ProjValueMaturity2025_H * ((100 - ReinvestRate2025)/100.00);
            ProjReinvest2025_H = ProjValueMaturity2025_H - ProjWithdraw2025_H;
            
            ProjValueMaturity2025_M = [self PaidUpOptionTable_2025_M_Balance:PrevPaidUpOptionTable_2025_Median andPolicyYear:polYear];
            ProjWithdraw2025_M = ProjValueMaturity2025_M * ((100 - ReinvestRate2025)/100.00);
            ProjReinvest2025_M = ProjValueMaturity2025_M - ProjWithdraw2025_M;
            
            ProjValueMaturity2025_L = [self PaidUpOptionTable_2025_L_Balance:PrevPaidUpOptionTable_2025_Low andPolicyYear:polYear];
            ProjWithdraw2025_L = ProjValueMaturity2025_L * ((100 - ReinvestRate2025)/100.00);
            ProjReinvest2025_L = ProjValueMaturity2025_L - ProjWithdraw2025_L;
            //-------
            
            // ---- for 2028
            ReinvestAmount2025to2028_H = ProjValueMaturity2025_H * (ReinvestRate2025/100.00) * (ReinvestRate2025to2028/100.00);
            ProjValueMaturity2028_H = [self PaidUpOptionTable_2028_High:PrevPaidUpOptionTable_2028_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_2028_High = ProjValueMaturity2028_H;
            
            ReinvestAmount2025to2028_M = ProjValueMaturity2025_M * (ReinvestRate2025/100.00) * (ReinvestRate2025to2028/100.00);
            ProjValueMaturity2028_M = [self PaidUpOptionTable_2028_Median:PrevPaidUpOptionTable_2028_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_2028_Median = ProjValueMaturity2028_M;
            
            ReinvestAmount2025to2028_L = ProjValueMaturity2025_L * (ReinvestRate2025/100.00) * (ReinvestRate2025to2028/100.00);
            ProjValueMaturity2028_L = [self PaidUpOptionTable_2028_Low:PrevPaidUpOptionTable_2028_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_2028_Low = ProjValueMaturity2028_L;
            // -----
            
            // ---- for 2030
            ReinvestAmount2025to2030_H = ProjValueMaturity2025_H * (ReinvestRate2025/100.00) * (ReinvestRate2025to2030/100.00);
            ProjValueMaturity2030_H = [self PaidUpOptionTable_2030_High:PrevPaidUpOptionTable_2030_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_2030_High = ProjValueMaturity2030_H;
            
            ReinvestAmount2025to2030_M = ProjValueMaturity2025_M * (ReinvestRate2025/100.00) * (ReinvestRate2025to2030/100.00);
            ProjValueMaturity2030_M = [self PaidUpOptionTable_2030_Median:PrevPaidUpOptionTable_2030_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_2030_Median = ProjValueMaturity2030_M;
            
            ReinvestAmount2025to2030_L = ProjValueMaturity2025_L * (ReinvestRate2025/100.00) * (ReinvestRate2025to2030/100.00);
            ProjValueMaturity2030_L = [self PaidUpOptionTable_2030_Low:PrevPaidUpOptionTable_2030_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_2030_Low = ProjValueMaturity2030_L;
            // -----
            
            // ---- for 2035
            ReinvestAmount2025to2035_H = ProjValueMaturity2025_H * (ReinvestRate2025/100.00) * (ReinvestRate2025to2035/100.00);
            ProjValueMaturity2035_H = [self PaidUpOptionTable_2035_High:PrevPaidUpOptionTable_2035_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_2035_High = ProjValueMaturity2035_H;
            
            ReinvestAmount2025to2035_M = ProjValueMaturity2025_M * (ReinvestRate2025/100.00) * (ReinvestRate2025to2035/100.00);
            ProjValueMaturity2035_M = [self PaidUpOptionTable_2035_Median:PrevPaidUpOptionTable_2035_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_2035_Median = ProjValueMaturity2035_M;
            
            ReinvestAmount2025to2035_L = ProjValueMaturity2025_L * (ReinvestRate2025/100.00) * (ReinvestRate2025to2035/100.00);
            ProjValueMaturity2035_L = [self PaidUpOptionTable_2035_Low:PrevPaidUpOptionTable_2035_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_2035_Low = ProjValueMaturity2035_L;
            // -----
            
            //-- for Secure Fund---
            ReinvestAmount2025toRet_H = ProjValueMaturity2025_H * (ReinvestRate2025/100.00) * (ReinvestRate2025toRet/100.00);
            ProjValueMaturityRet_H = [self PaidUpOptionTable_Ret_High:PrevPaidUpOptionTable_Ret_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_Ret_High = ProjValueMaturityRet_H;
            
            ReinvestAmount2025toRet_M = ProjValueMaturity2025_M * (ReinvestRate2025/100.00) * (ReinvestRate2025toRet/100.00);
            ProjValueMaturityRet_M = [self PaidUpOptionTable_Ret_Median:PrevPaidUpOptionTable_Ret_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_Ret_Median = ProjValueMaturityRet_M;
            
            ReinvestAmount2025toRet_L = ProjValueMaturity2025_L * (ReinvestRate2025/100.00) * (ReinvestRate2025toRet/100.00);
            ProjValueMaturityRet_L = [self PaidUpOptionTable_Ret_Low:PrevPaidUpOptionTable_Ret_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_Ret_Low = ProjValueMaturityRet_L;
            //------------
            
            //-- for Secure Fund--- Venture 1111
            ReinvestAmount2025toVentureGrowth_H = ProjValueMaturity2025_H * (ReinvestRate2025/100.00) * (ReinvestRate2025toVentureGrowth/100.00);
            ProjValueMaturityVentureGrowth_H = [self PaidUpOptionTable_VentureGrowth_High:PrevPaidUpOptionTable_VentureGrowth_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureGrowth_High = ProjValueMaturityVentureGrowth_H;
            
            ReinvestAmount2025toVentureGrowth_M = ProjValueMaturity2025_M * (ReinvestRate2025/100.00) * (ReinvestRate2025toVentureGrowth/100.00);
            ProjValueMaturityVentureGrowth_M = [self PaidUpOptionTable_VentureGrowth_Median:PrevPaidUpOptionTable_VentureGrowth_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureGrowth_Median = ProjValueMaturityVentureGrowth_M;
            
            ReinvestAmount2025toVentureGrowth_L = ProjValueMaturity2025_L * (ReinvestRate2025/100.00) * (ReinvestRate2025toVentureGrowth/100.00);
            ProjValueMaturityVentureGrowth_L = [self PaidUpOptionTable_VentureGrowth_Low:PrevPaidUpOptionTable_VentureGrowth_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureGrowth_Low = ProjValueMaturityVentureGrowth_L;
            //------------
            
            
            //-- for Secure Fund--- Venture 2222
            ReinvestAmount2025toVentureBlueChip_H = ProjValueMaturity2025_H * (ReinvestRate2025/100.00) * (ReinvestRate2025toVentureBlueChip/100.00);
            ProjValueMaturityVentureBlueChip_H = [self PaidUpOptionTable_VentureBlueChip_High:PrevPaidUpOptionTable_VentureBlueChip_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureBlueChip_High = ProjValueMaturityVentureBlueChip_H;
            
            ReinvestAmount2025toVentureBlueChip_M = ProjValueMaturity2025_M * (ReinvestRate2025/100.00) * (ReinvestRate2025toVentureBlueChip/100.00);
            ProjValueMaturityVentureBlueChip_M = [self PaidUpOptionTable_VentureBlueChip_Median:PrevPaidUpOptionTable_VentureBlueChip_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureBlueChip_Median = ProjValueMaturityVentureBlueChip_M;
            
            ReinvestAmount2025toVentureBlueChip_L = ProjValueMaturity2025_L * (ReinvestRate2025/100.00) * (ReinvestRate2025toVentureBlueChip/100.00);
            ProjValueMaturityVentureBlueChip_L = [self PaidUpOptionTable_VentureBlueChip_Low:PrevPaidUpOptionTable_VentureBlueChip_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureBlueChip_Low = ProjValueMaturityVentureBlueChip_L;
            //------------
            
            //-- for Secure Fund--- Venture 3333
            ReinvestAmount2025toVentureDana_H = ProjValueMaturity2025_H * (ReinvestRate2025/100.00) * (ReinvestRate2025toVentureDana/100.00);
            ProjValueMaturityVentureDana_H = [self PaidUpOptionTable_VentureDana_High:PrevPaidUpOptionTable_VentureDana_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureDana_High = ProjValueMaturityVentureDana_H;
            
            ReinvestAmount2025toVentureDana_M = ProjValueMaturity2025_M * (ReinvestRate2025/100.00) * (ReinvestRate2025toVentureDana/100.00);
            ProjValueMaturityVentureDana_M = [self PaidUpOptionTable_VentureDana_Median:PrevPaidUpOptionTable_VentureDana_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureDana_Median = ProjValueMaturityVentureDana_M;
            
            ReinvestAmount2025toVentureDana_L = ProjValueMaturity2025_L * (ReinvestRate2025/100.00) * (ReinvestRate2025toVentureDana/100.00);
            ProjValueMaturityVentureDana_L = [self PaidUpOptionTable_VentureDana_Low:PrevPaidUpOptionTable_VentureDana_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureDana_Low = ProjValueMaturityVentureDana_L;
            //------------
            
            //-- for Secure Fund--- Venture 4444
            ReinvestAmount2025toVentureManaged_H = ProjValueMaturity2025_H * (ReinvestRate2025/100.00) * (ReinvestRate2025toVentureManaged/100.00);
            ProjValueMaturityVentureManaged_H = [self PaidUpOptionTable_VentureManaged_High:PrevPaidUpOptionTable_VentureManaged_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureManaged_High = ProjValueMaturityVentureManaged_H;
            
            ReinvestAmount2025toVentureManaged_M = ProjValueMaturity2025_M * (ReinvestRate2025/100.00) * (ReinvestRate2025toVentureManaged/100.00);
            ProjValueMaturityVentureManaged_M = [self PaidUpOptionTable_VentureManaged_Median:PrevPaidUpOptionTable_VentureManaged_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureManaged_Median = ProjValueMaturityVentureManaged_M;
            
            ReinvestAmount2025toVentureManaged_L = ProjValueMaturity2025_L * (ReinvestRate2025/100.00) * (ReinvestRate2025toVentureManaged/100.00);
            ProjValueMaturityVentureManaged_L = [self PaidUpOptionTable_VentureManaged_Low:PrevPaidUpOptionTable_VentureManaged_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureManaged_Low = ProjValueMaturityVentureManaged_L;
            //------------
            
            //-- for Secure Fund--- Venture 5555
            ReinvestAmount2025toVentureIncome_H = ProjValueMaturity2025_H * (ReinvestRate2025/100.00) * (ReinvestRate2025toVentureIncome/100.00);
            ProjValueMaturityVentureIncome_H = [self PaidUpOptionTable_VentureIncome_High:PrevPaidUpOptionTable_VentureIncome_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureIncome_High = ProjValueMaturityVentureIncome_H;
            
            ReinvestAmount2025toVentureIncome_M = ProjValueMaturity2025_M * (ReinvestRate2025/100.00) * (ReinvestRate2025toVentureIncome/100.00);
            ProjValueMaturityVentureIncome_M = [self PaidUpOptionTable_VentureIncome_Median:PrevPaidUpOptionTable_VentureIncome_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureIncome_Median = ProjValueMaturityVentureIncome_M;
            
            ReinvestAmount2025toVentureIncome_L = ProjValueMaturity2025_L * (ReinvestRate2025/100.00) * (ReinvestRate2025toVentureIncome/100.00);
            ProjValueMaturityVentureIncome_L = [self PaidUpOptionTable_VentureIncome_Low:PrevPaidUpOptionTable_VentureIncome_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureIncome_Low = ProjValueMaturityVentureIncome_L;
            //------------
            
            //-- for Secure Fund--- Venture 6666
            ReinvestAmount2025toVenture6666_H = ProjValueMaturity2025_H * (ReinvestRate2025/100.00) * (ReinvestRate2025toVenture6666/100.00);
            ProjValueMaturityVenture6666_H = [self PaidUpOptionTable_Venture6666_High:PrevPaidUpOptionTable_Venture6666_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture6666_High = ProjValueMaturityVenture6666_H;
            
            ReinvestAmount2025toVenture6666_M = ProjValueMaturity2025_M * (ReinvestRate2025/100.00) * (ReinvestRate2025toVenture6666/100.00);
            ProjValueMaturityVenture6666_M = [self PaidUpOptionTable_Venture6666_Median:PrevPaidUpOptionTable_Venture6666_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture6666_Median = ProjValueMaturityVenture6666_M;
            
            ReinvestAmount2025toVenture6666_L = ProjValueMaturity2025_L * (ReinvestRate2025/100.00) * (ReinvestRate2025toVenture6666/100.00);
            ProjValueMaturityVenture6666_L = [self PaidUpOptionTable_Venture6666_Low:PrevPaidUpOptionTable_Venture6666_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture6666_Low = ProjValueMaturityVenture6666_L;
            //------------
            
            //-- for Secure Fund--- Venture 7777
            ReinvestAmount2025toVenture7777_H = ProjValueMaturity2025_H * (ReinvestRate2025/100.00) * (ReinvestRate2025toVenture7777/100.00);
            ProjValueMaturityVenture7777_H = [self PaidUpOptionTable_Venture7777_High:PrevPaidUpOptionTable_Venture7777_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture7777_High = ProjValueMaturityVenture7777_H;
            
            ReinvestAmount2025toVenture7777_M = ProjValueMaturity2025_M * (ReinvestRate2025/100.00) * (ReinvestRate2025toVenture7777/100.00);
            ProjValueMaturityVenture7777_M = [self PaidUpOptionTable_Venture7777_Median:PrevPaidUpOptionTable_Venture7777_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture7777_Median = ProjValueMaturityVenture7777_M;
            
            ReinvestAmount2025toVenture7777_L = ProjValueMaturity2025_L * (ReinvestRate2025/100.00) * (ReinvestRate2025toVenture7777/100.00);
            ProjValueMaturityVenture7777_L = [self PaidUpOptionTable_Venture7777_Low:PrevPaidUpOptionTable_Venture7777_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture7777_Low = ProjValueMaturityVenture7777_L;
            //------------
            
            //-- for Secure Fund--- Venture 8888
            ReinvestAmount2025toVenture8888_H = ProjValueMaturity2025_H * (ReinvestRate2025/100.00) * (ReinvestRate2025toVenture8888/100.00);
            ProjValueMaturityVenture8888_H = [self PaidUpOptionTable_Venture8888_High:PrevPaidUpOptionTable_Venture8888_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture8888_High = ProjValueMaturityVenture8888_H;
            
            ReinvestAmount2025toVenture8888_M = ProjValueMaturity2025_M * (ReinvestRate2025/100.00) * (ReinvestRate2025toVenture8888/100.00);
            ProjValueMaturityVenture8888_M = [self PaidUpOptionTable_Venture8888_Median:PrevPaidUpOptionTable_Venture8888_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture8888_Median = ProjValueMaturityVenture8888_M;
            
            ReinvestAmount2025toVenture8888_L = ProjValueMaturity2025_L * (ReinvestRate2025/100.00) * (ReinvestRate2025toVenture8888/100.00);
            ProjValueMaturityVenture8888_L = [self PaidUpOptionTable_Venture8888_Low:PrevPaidUpOptionTable_Venture8888_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture8888_Low = ProjValueMaturityVenture8888_L;
            //------------
            
            //-- for Secure Fund--- Venture 9999
            ReinvestAmount2025toVenture9999_H = ProjValueMaturity2025_H * (ReinvestRate2025/100.00) * (ReinvestRate2025toVenture9999/100.00);
            ProjValueMaturityVenture9999_H = [self PaidUpOptionTable_Venture9999_High:PrevPaidUpOptionTable_Venture9999_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture9999_High = ProjValueMaturityVenture9999_H;
            
            ReinvestAmount2025toVenture9999_M = ProjValueMaturity2025_M * (ReinvestRate2025/100.00) * (ReinvestRate2025toVenture9999/100.00);
            ProjValueMaturityVenture9999_M = [self PaidUpOptionTable_Venture9999_Median:PrevPaidUpOptionTable_Venture9999_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture9999_Median = ProjValueMaturityVenture9999_M;
            
            ReinvestAmount2025toVenture9999_L = ProjValueMaturity2025_L * (ReinvestRate2025/100.00) * (ReinvestRate2025toVenture9999/100.00);
            ProjValueMaturityVenture9999_L = [self PaidUpOptionTable_Venture9999_Low:PrevPaidUpOptionTable_Venture9999_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture9999_Low = ProjValueMaturityVenture9999_L;
            //------------
            
            
            //-- for Dana Fund---
            ReinvestAmount2025toDana_H = ProjValueMaturity2025_H * (ReinvestRate2025/100.00) * (ReinvestRate2025toDana/100.00);
            ProjValueMaturityDana_H = [self PaidUpOptionTable_Dana_High:PrevPaidUpOptionTable_Dana_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_Dana_High = ProjValueMaturityDana_H;
            
            ReinvestAmount2025toDana_M = ProjValueMaturity2025_M * (ReinvestRate2025/100.00) * (ReinvestRate2025toDana/100.00);
            ProjValueMaturityDana_M = [self PaidUpOptionTable_Dana_Median:PrevPaidUpOptionTable_Dana_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_Dana_Median = ProjValueMaturityDana_M;
            
            ReinvestAmount2025toDana_L = ProjValueMaturity2025_L * (ReinvestRate2025/100.00) * (ReinvestRate2025toDana/100.00);
            ProjValueMaturityDana_L = [self PaidUpOptionTable_Dana_Low:PrevPaidUpOptionTable_Dana_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_Dana_Low = ProjValueMaturityDana_L;
            //------------
            
            //-- for Cash Fund---
            ReinvestAmount2025toCash_H = ProjValueMaturity2025_H * (ReinvestRate2025/100.00) * (ReinvestRate2025toCash/100.00);
            ProjValueMaturityCash_H = [self PaidUpOptionTable_Cash_High:PrevPaidUpOptionTable_Cash_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_Cash_High = ProjValueMaturityCash_H;
            
            ReinvestAmount2025toCash_M = ProjValueMaturity2025_M * (ReinvestRate2025/100.00) * (ReinvestRate2025toCash/100.00);
            ProjValueMaturityCash_M = [self PaidUpOptionTable_Cash_Median:PrevPaidUpOptionTable_Cash_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_Cash_Median = ProjValueMaturityCash_M;
            
            ReinvestAmount2025toCash_L = ProjValueMaturity2025_L * (ReinvestRate2025/100.00) * (ReinvestRate2025toCash/100.00);
            ProjValueMaturityCash_L = [self PaidUpOptionTable_Cash_Low:PrevPaidUpOptionTable_Cash_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_Cash_Low = ProjValueMaturityCash_L;
            //------------
            
        }
        else if (polYear == FundTerm2028) {
            
            if (Fund2028PartialReinvest == 0) {
                ReinvestRate2028 = 100; //meaning 2028 is fully reinvest
            }
            else{
                ReinvestRate2028 = 100 - Fund2028PartialReinvest;
            }
            
            if (Fund2028PartialReinvest != 100) { //meaning 2028 is not withdraw
                ReinvestRate2028to2030 = Fund2028ReinvestTo2030Fac;
                ReinvestRate2028to2035 = Fund2028ReinvestTo2035Fac;
                ReinvestRate2028toCash = Fund2028ReinvestToCashFac;
                ReinvestRate2028toDana = Fund2028ReinvestToDanaFac;
                ReinvestRate2028toRet = Fund2028ReinvestToRetFac;
                ReinvestRate2028toVentureGrowth = Fund2028ReinvestToVentureGrowthFac;//
                ReinvestRate2028toVentureBlueChip = Fund2028ReinvestToVentureBlueChipFac;//
                ReinvestRate2028toVentureDana = Fund2028ReinvestToVentureDanaFac;//
                ReinvestRate2028toVentureManaged = Fund2028ReinvestToVentureManagedFac;//
                ReinvestRate2028toVentureIncome = Fund2028ReinvestToVentureIncomeFac;//
                ReinvestRate2028toVenture6666 = Fund2028ReinvestToVenture6666Fac;//
                ReinvestRate2028toVenture7777 = Fund2028ReinvestToVenture7777Fac;//
                ReinvestRate2028toVenture8888 = Fund2028ReinvestToVenture8888Fac;//
                ReinvestRate2028toVenture9999 = Fund2028ReinvestToVenture9999Fac;//
            }
            else{
                ReinvestRate2028to2030 = 0.00;
                ReinvestRate2028to2035 = 0.00;
                ReinvestRate2028toCash = 0.00;
                ReinvestRate2028toDana = 0.00;
                ReinvestRate2028toRet = 0.00;
                ReinvestRate2028toVentureGrowth = 0.00;//
                ReinvestRate2028toVentureBlueChip = 0.00;//
                ReinvestRate2028toVentureDana = 0.00;//
                ReinvestRate2028toVentureManaged = 0.00;//
                ReinvestRate2028toVentureIncome = 0.00;//
                ReinvestRate2028toVenture6666 = 0.00;//
                ReinvestRate2028toVenture7777 = 0.00;//
                ReinvestRate2028toVenture8888 = 0.00;//
                ReinvestRate2028toVenture9999 = 0.00;//
            }
            
            //---- for 2028
            ProjValueMaturity2028_H = [self PaidUpOptionTable_2028_H_Balance:PrevPaidUpOptionTable_2028_High andPolicyYear:polYear];
            ProjWithdraw2028_H = ProjValueMaturity2028_H * ((100 - ReinvestRate2028)/100.00);
            ProjReinvest2028_H = ProjValueMaturity2028_H - ProjWithdraw2028_H;
            
            ProjValueMaturity2028_M = [self PaidUpOptionTable_2028_M_Balance:PrevPaidUpOptionTable_2028_Median andPolicyYear:polYear];
            ProjWithdraw2028_M = ProjValueMaturity2028_M * ((100 - ReinvestRate2028)/100.00);
            ProjReinvest2028_M = ProjValueMaturity2028_M - ProjWithdraw2028_M;
            
            ProjValueMaturity2028_L = [self PaidUpOptionTable_2028_L_Balance:PrevPaidUpOptionTable_2028_Low andPolicyYear:polYear];
            ProjWithdraw2028_L = ProjValueMaturity2028_L * ((100 - ReinvestRate2028)/100.00);
            ProjReinvest2028_L = ProjValueMaturity2028_L - ProjWithdraw2028_L;
            //-------
            
            // ---- for 2030
            ReinvestAmount2028to2030_H = ProjValueMaturity2028_H * (ReinvestRate2028/100.00) * (ReinvestRate2028to2030/100.00);
            ProjValueMaturity2030_H = [self PaidUpOptionTable_2030_High:PrevPaidUpOptionTable_2030_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_2030_High = ProjValueMaturity2030_H;
            
            ReinvestAmount2028to2030_M = ProjValueMaturity2028_M * (ReinvestRate2028/100.00) * (ReinvestRate2028to2030/100.00);
            ProjValueMaturity2030_M = [self PaidUpOptionTable_2030_Median:PrevPaidUpOptionTable_2030_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_2030_Median = ProjValueMaturity2030_M;
            
            ReinvestAmount2028to2030_L = ProjValueMaturity2028_L * (ReinvestRate2028/100.00) * (ReinvestRate2028to2030/100.00);
            ProjValueMaturity2030_L = [self PaidUpOptionTable_2030_Low:PrevPaidUpOptionTable_2030_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_2030_Low = ProjValueMaturity2030_L;
            // -----
            
            // ---- for 2035
            ReinvestAmount2028to2035_H = ProjValueMaturity2028_H * (ReinvestRate2028/100.00) * (ReinvestRate2028to2035/100.00);
            ProjValueMaturity2035_H = [self PaidUpOptionTable_2035_High:PrevPaidUpOptionTable_2035_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_2035_High = ProjValueMaturity2035_H;
            
            ReinvestAmount2028to2035_M = ProjValueMaturity2028_M * (ReinvestRate2028/100.00) * (ReinvestRate2028to2035/100.00);
            ProjValueMaturity2035_M = [self PaidUpOptionTable_2035_Median:PrevPaidUpOptionTable_2035_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_2035_Median = ProjValueMaturity2035_M;
            
            ReinvestAmount2028to2035_L = ProjValueMaturity2028_L * (ReinvestRate2028/100.00) * (ReinvestRate2028to2035/100.00);
            ProjValueMaturity2035_L = [self PaidUpOptionTable_2035_Low:PrevPaidUpOptionTable_2035_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_2035_Low = ProjValueMaturity2035_L;
            // -----
            
            //-- for Secure Fund---
            ReinvestAmount2028toRet_H = ProjValueMaturity2028_H * (ReinvestRate2028/100.00) * (ReinvestRate2028toRet/100.00);
            ProjValueMaturityRet_H = [self PaidUpOptionTable_Ret_High:PrevPaidUpOptionTable_Ret_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_Ret_High = ProjValueMaturityRet_H;
            
            ReinvestAmount2028toRet_M = ProjValueMaturity2028_M * (ReinvestRate2028/100.00) * (ReinvestRate2028toRet/100.00);
            ProjValueMaturityRet_M = [self PaidUpOptionTable_Ret_Median:PrevPaidUpOptionTable_Ret_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_Ret_Median = ProjValueMaturityRet_M;
            
            ReinvestAmount2028toRet_L = ProjValueMaturity2028_L * (ReinvestRate2028/100.00) * (ReinvestRate2028toRet/100.00);
            ProjValueMaturityRet_L = [self PaidUpOptionTable_Ret_Low:PrevPaidUpOptionTable_Ret_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_Ret_Low = ProjValueMaturityRet_L;
            //------------
            
            //-- for Secure Fund--- Venture 1111
            ReinvestAmount2028toVentureGrowth_H = ProjValueMaturity2028_H * (ReinvestRate2028/100.00) * (ReinvestRate2028toVentureGrowth/100.00);
            ProjValueMaturityVentureGrowth_H = [self PaidUpOptionTable_VentureGrowth_High:PrevPaidUpOptionTable_VentureGrowth_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureGrowth_High = ProjValueMaturityVentureGrowth_H;
            
            ReinvestAmount2028toVentureGrowth_M = ProjValueMaturity2028_M * (ReinvestRate2028/100.00) * (ReinvestRate2028toVentureGrowth/100.00);
            ProjValueMaturityVentureGrowth_M = [self PaidUpOptionTable_VentureGrowth_Median:PrevPaidUpOptionTable_VentureGrowth_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureGrowth_Median = ProjValueMaturityVentureGrowth_M;
            
            ReinvestAmount2028toVentureGrowth_L = ProjValueMaturity2028_L * (ReinvestRate2028/100.00) * (ReinvestRate2028toVentureGrowth/100.00);
            ProjValueMaturityVentureGrowth_L = [self PaidUpOptionTable_VentureGrowth_Low:PrevPaidUpOptionTable_VentureGrowth_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureGrowth_Low = ProjValueMaturityVentureGrowth_L;
            //------------
            
            //-- for Secure Fund--- Venture 2222
            ReinvestAmount2028toVentureBlueChip_H = ProjValueMaturity2028_H * (ReinvestRate2028/100.00) * (ReinvestRate2028toVentureBlueChip/100.00);
            ProjValueMaturityVentureBlueChip_H = [self PaidUpOptionTable_VentureBlueChip_High:PrevPaidUpOptionTable_VentureBlueChip_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureBlueChip_High = ProjValueMaturityVentureBlueChip_H;
            
            ReinvestAmount2028toVentureBlueChip_M = ProjValueMaturity2028_M * (ReinvestRate2028/100.00) * (ReinvestRate2028toVentureBlueChip/100.00);
            ProjValueMaturityVentureBlueChip_M = [self PaidUpOptionTable_VentureBlueChip_Median:PrevPaidUpOptionTable_VentureBlueChip_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureBlueChip_Median = ProjValueMaturityVentureBlueChip_M;
            
            ReinvestAmount2028toVentureBlueChip_L = ProjValueMaturity2028_L * (ReinvestRate2028/100.00) * (ReinvestRate2028toVentureBlueChip/100.00);
            ProjValueMaturityVentureBlueChip_L = [self PaidUpOptionTable_VentureBlueChip_Low:PrevPaidUpOptionTable_VentureBlueChip_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureBlueChip_Low = ProjValueMaturityVentureBlueChip_L;
            //------------
            
            //-- for Secure Fund--- Venture 3333
            ReinvestAmount2028toVentureDana_H = ProjValueMaturity2028_H * (ReinvestRate2028/100.00) * (ReinvestRate2028toVentureDana/100.00);
            ProjValueMaturityVentureDana_H = [self PaidUpOptionTable_VentureDana_High:PrevPaidUpOptionTable_VentureDana_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureDana_High = ProjValueMaturityVentureDana_H;
            
            ReinvestAmount2028toVentureDana_M = ProjValueMaturity2028_M * (ReinvestRate2028/100.00) * (ReinvestRate2028toVentureDana/100.00);
            ProjValueMaturityVentureDana_M = [self PaidUpOptionTable_VentureDana_Median:PrevPaidUpOptionTable_VentureDana_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureDana_Median = ProjValueMaturityVentureDana_M;
            
            ReinvestAmount2028toVentureDana_L = ProjValueMaturity2028_L * (ReinvestRate2028/100.00) * (ReinvestRate2028toVentureDana/100.00);
            ProjValueMaturityVentureDana_L = [self PaidUpOptionTable_VentureDana_Low:PrevPaidUpOptionTable_VentureDana_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureDana_Low = ProjValueMaturityVentureDana_L;
            //------------
            
            //-- for Secure Fund--- Venture 4444
            ReinvestAmount2028toVentureManaged_H = ProjValueMaturity2028_H * (ReinvestRate2028/100.00) * (ReinvestRate2028toVentureManaged/100.00);
            ProjValueMaturityVentureManaged_H = [self PaidUpOptionTable_VentureManaged_High:PrevPaidUpOptionTable_VentureManaged_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureManaged_High = ProjValueMaturityVentureManaged_H;
            
            ReinvestAmount2028toVentureManaged_M = ProjValueMaturity2028_M * (ReinvestRate2028/100.00) * (ReinvestRate2028toVentureManaged/100.00);
            ProjValueMaturityVentureManaged_M = [self PaidUpOptionTable_VentureManaged_Median:PrevPaidUpOptionTable_VentureManaged_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureManaged_Median = ProjValueMaturityVentureManaged_M;
            
            ReinvestAmount2028toVentureManaged_L = ProjValueMaturity2028_L * (ReinvestRate2028/100.00) * (ReinvestRate2028toVentureManaged/100.00);
            ProjValueMaturityVentureManaged_L = [self PaidUpOptionTable_VentureManaged_Low:PrevPaidUpOptionTable_VentureManaged_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureManaged_Low = ProjValueMaturityVentureManaged_L;
            //------------
            
            //-- for Secure Fund--- Venture 5555
            ReinvestAmount2028toVentureIncome_H = ProjValueMaturity2028_H * (ReinvestRate2028/100.00) * (ReinvestRate2028toVentureIncome/100.00);
            ProjValueMaturityVentureIncome_H = [self PaidUpOptionTable_VentureIncome_High:PrevPaidUpOptionTable_VentureIncome_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureIncome_High = ProjValueMaturityVentureIncome_H;
            
            ReinvestAmount2028toVentureIncome_M = ProjValueMaturity2028_M * (ReinvestRate2028/100.00) * (ReinvestRate2028toVentureIncome/100.00);
            ProjValueMaturityVentureIncome_M = [self PaidUpOptionTable_VentureIncome_Median:PrevPaidUpOptionTable_VentureIncome_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureIncome_Median = ProjValueMaturityVentureIncome_M;
            
            ReinvestAmount2028toVentureIncome_L = ProjValueMaturity2028_L * (ReinvestRate2028/100.00) * (ReinvestRate2028toVentureIncome/100.00);
            ProjValueMaturityVentureIncome_L = [self PaidUpOptionTable_VentureIncome_Low:PrevPaidUpOptionTable_VentureIncome_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureIncome_Low = ProjValueMaturityVentureIncome_L;
            //------------
            
            //-- for Secure Fund--- Venture 6666
            ReinvestAmount2028toVenture6666_H = ProjValueMaturity2028_H * (ReinvestRate2028/100.00) * (ReinvestRate2028toVenture6666/100.00);
            ProjValueMaturityVenture6666_H = [self PaidUpOptionTable_Venture6666_High:PrevPaidUpOptionTable_Venture6666_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture6666_High = ProjValueMaturityVenture6666_H;
            
            ReinvestAmount2028toVenture6666_M = ProjValueMaturity2028_M * (ReinvestRate2028/100.00) * (ReinvestRate2028toVenture6666/100.00);
            ProjValueMaturityVenture6666_M = [self PaidUpOptionTable_Venture6666_Median:PrevPaidUpOptionTable_Venture6666_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture6666_Median = ProjValueMaturityVenture6666_M;
            
            ReinvestAmount2028toVenture6666_L = ProjValueMaturity2028_L * (ReinvestRate2028/100.00) * (ReinvestRate2028toVenture6666/100.00);
            ProjValueMaturityVenture6666_L = [self PaidUpOptionTable_Venture6666_Low:PrevPaidUpOptionTable_Venture6666_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture6666_Low = ProjValueMaturityVenture6666_L;
            //------------
            
            //-- for Secure Fund--- Venture 7777
            ReinvestAmount2028toVenture7777_H = ProjValueMaturity2028_H * (ReinvestRate2028/100.00) * (ReinvestRate2028toVenture7777/100.00);
            ProjValueMaturityVenture7777_H = [self PaidUpOptionTable_Venture7777_High:PrevPaidUpOptionTable_Venture7777_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture7777_High = ProjValueMaturityVenture7777_H;
            
            ReinvestAmount2028toVenture7777_M = ProjValueMaturity2028_M * (ReinvestRate2028/100.00) * (ReinvestRate2028toVenture7777/100.00);
            ProjValueMaturityVenture7777_M = [self PaidUpOptionTable_Venture7777_Median:PrevPaidUpOptionTable_Venture7777_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture7777_Median = ProjValueMaturityVenture7777_M;
            
            ReinvestAmount2028toVenture7777_L = ProjValueMaturity2028_L * (ReinvestRate2028/100.00) * (ReinvestRate2028toVenture7777/100.00);
            ProjValueMaturityVenture7777_L = [self PaidUpOptionTable_Venture7777_Low:PrevPaidUpOptionTable_Venture7777_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture7777_Low = ProjValueMaturityVenture7777_L;
            //------------
            
            //-- for Secure Fund--- Venture 8888
            ReinvestAmount2028toVenture8888_H = ProjValueMaturity2028_H * (ReinvestRate2028/100.00) * (ReinvestRate2028toVenture8888/100.00);
            ProjValueMaturityVenture8888_H = [self PaidUpOptionTable_Venture8888_High:PrevPaidUpOptionTable_Venture8888_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture8888_High = ProjValueMaturityVenture8888_H;
            
            ReinvestAmount2028toVenture8888_M = ProjValueMaturity2028_M * (ReinvestRate2028/100.00) * (ReinvestRate2028toVenture8888/100.00);
            ProjValueMaturityVenture8888_M = [self PaidUpOptionTable_Venture8888_Median:PrevPaidUpOptionTable_Venture8888_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture8888_Median = ProjValueMaturityVenture8888_M;
            
            ReinvestAmount2028toVenture8888_L = ProjValueMaturity2028_L * (ReinvestRate2028/100.00) * (ReinvestRate2028toVenture8888/100.00);
            ProjValueMaturityVenture8888_L = [self PaidUpOptionTable_Venture8888_Low:PrevPaidUpOptionTable_Venture8888_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture8888_Low = ProjValueMaturityVenture8888_L;
            //------------
            
            //-- for Secure Fund--- Venture 9999
            ReinvestAmount2028toVenture9999_H = ProjValueMaturity2028_H * (ReinvestRate2028/100.00) * (ReinvestRate2028toVenture9999/100.00);
            ProjValueMaturityVenture9999_H = [self PaidUpOptionTable_Venture9999_High:PrevPaidUpOptionTable_Venture9999_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture9999_High = ProjValueMaturityVenture9999_H;
            
            ReinvestAmount2028toVenture9999_M = ProjValueMaturity2028_M * (ReinvestRate2028/100.00) * (ReinvestRate2028toVenture9999/100.00);
            ProjValueMaturityVenture9999_M = [self PaidUpOptionTable_Venture9999_Median:PrevPaidUpOptionTable_Venture9999_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture9999_Median = ProjValueMaturityVenture9999_M;
            
            ReinvestAmount2028toVenture9999_L = ProjValueMaturity2028_L * (ReinvestRate2028/100.00) * (ReinvestRate2028toVenture9999/100.00);
            ProjValueMaturityVenture9999_L = [self PaidUpOptionTable_Venture9999_Low:PrevPaidUpOptionTable_Venture9999_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture9999_Low = ProjValueMaturityVenture9999_L;
            //------------
            
            
            
            //-- for Dana Fund---
            ReinvestAmount2028toDana_H = ProjValueMaturity2028_H * (ReinvestRate2028/100.00) * (ReinvestRate2028toDana/100.00);
            ProjValueMaturityDana_H = [self PaidUpOptionTable_Dana_High:PrevPaidUpOptionTable_Dana_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_Dana_High = ProjValueMaturityDana_H;
            
            ReinvestAmount2028toDana_M = ProjValueMaturity2028_M * (ReinvestRate2028/100.00) * (ReinvestRate2028toDana/100.00);
            ProjValueMaturityDana_M = [self PaidUpOptionTable_Dana_Median:PrevPaidUpOptionTable_Dana_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_Dana_Median = ProjValueMaturityDana_M;
            
            ReinvestAmount2028toDana_L = ProjValueMaturity2028_L * (ReinvestRate2028/100.00) * (ReinvestRate2028toDana/100.00);
            ProjValueMaturityDana_L = [self PaidUpOptionTable_Dana_Low:PrevPaidUpOptionTable_Dana_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_Dana_Low = ProjValueMaturityDana_L;
            //------------
            
            //-- for Cash Fund---
            ReinvestAmount2028toCash_H = ProjValueMaturity2028_H * (ReinvestRate2028/100.00) * (ReinvestRate2028toCash/100.00);
            ProjValueMaturityCash_H = [self PaidUpOptionTable_Cash_High:PrevPaidUpOptionTable_Cash_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_Cash_High = ProjValueMaturityCash_H;
            
            ReinvestAmount2028toCash_M = ProjValueMaturity2028_M * (ReinvestRate2028/100.00) * (ReinvestRate2028toCash/100.00);
            ProjValueMaturityCash_M = [self PaidUpOptionTable_Cash_Median:PrevPaidUpOptionTable_Cash_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_Cash_Median = ProjValueMaturityCash_M;
            
            ReinvestAmount2028toCash_L = ProjValueMaturity2028_L * (ReinvestRate2028/100.00) * (ReinvestRate2028toCash/100.00);
            ProjValueMaturityCash_L = [self PaidUpOptionTable_Cash_Low:PrevPaidUpOptionTable_Cash_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_Cash_Low = ProjValueMaturityCash_L;
            //------------
            
        }
        else if (polYear == FundTerm2030) {
            
            if (Fund2030PartialReinvest == 0) {
                ReinvestRate2030 = 100; //meaning 2030 is fully reinvest
            }
            else{
                ReinvestRate2030 = 100 - Fund2030PartialReinvest;
            }
            
            if (Fund2030PartialReinvest != 100) { //meaning 2030 is not withdraw
                ReinvestRate2030to2035 = Fund2030ReinvestTo2035Fac;
                ReinvestRate2030toCash = Fund2030ReinvestToCashFac;
                ReinvestRate2030toDana = Fund2030ReinvestToDanaFac;
                ReinvestRate2030toRet = Fund2030ReinvestToRetFac;
                ReinvestRate2030toVentureGrowth = Fund2030ReinvestToVentureGrowthFac;//
                ReinvestRate2030toVentureBlueChip = Fund2030ReinvestToVentureBlueChipFac;//
                ReinvestRate2030toVentureDana = Fund2030ReinvestToVentureDanaFac;//
                ReinvestRate2030toVentureManaged = Fund2030ReinvestToVentureManagedFac;//
                ReinvestRate2030toVentureIncome = Fund2030ReinvestToVentureIncomeFac;//
                ReinvestRate2030toVenture6666 = Fund2030ReinvestToVenture6666Fac;//
                ReinvestRate2030toVenture7777 = Fund2030ReinvestToVenture7777Fac;//
                ReinvestRate2030toVenture8888 = Fund2030ReinvestToVenture8888Fac;//
                ReinvestRate2030toVenture9999 = Fund2030ReinvestToVenture9999Fac;//
            }
            else{
                ReinvestRate2030to2035 = 0.00;
                ReinvestRate2030toCash = 0.00;
                ReinvestRate2030toDana = 0.00;
                ReinvestRate2030toRet = 0.00;
                ReinvestRate2030toVentureGrowth = 0.00;//
                ReinvestRate2030toVentureBlueChip = 0.00;//
                ReinvestRate2030toVentureDana = 0.00;//
                ReinvestRate2030toVentureManaged = 0.00;//
                ReinvestRate2030toVentureIncome = 0.00;//
                ReinvestRate2030toVenture6666 = 0.00;//
                ReinvestRate2030toVenture7777 = 0.00;//
                ReinvestRate2030toVenture8888 = 0.00;//
                ReinvestRate2030toVenture9999 = 0.00;//
            }
            
            //---- for 2030
            ProjValueMaturity2030_H = [self PaidUpOptionTable_2030_H_Balance:PrevPaidUpOptionTable_2030_High andPolicyYear:polYear];
            ProjWithdraw2030_H = ProjValueMaturity2030_H * ((100 - ReinvestRate2030)/100.00);
            ProjReinvest2030_H = ProjValueMaturity2030_H - ProjWithdraw2030_H;
            
            ProjValueMaturity2030_M = [self PaidUpOptionTable_2030_M_Balance:PrevPaidUpOptionTable_2030_Median andPolicyYear:polYear];
            ProjWithdraw2030_M = ProjValueMaturity2030_M * ((100 - ReinvestRate2030)/100.00);
            ProjReinvest2030_M = ProjValueMaturity2030_M - ProjWithdraw2030_M;
            
            ProjValueMaturity2030_L = [self PaidUpOptionTable_2030_L_Balance:PrevPaidUpOptionTable_2030_Low andPolicyYear:polYear];
            ProjWithdraw2030_L = ProjValueMaturity2030_L * ((100 - ReinvestRate2030)/100.00);
            ProjReinvest2030_L = ProjValueMaturity2030_L - ProjWithdraw2030_L;
            //-------
            
            // ---- for 2035
            ReinvestAmount2030to2035_H = ProjValueMaturity2030_H * (ReinvestRate2030/100.00) * (ReinvestRate2030to2035/100.00);
            ProjValueMaturity2035_H = [self PaidUpOptionTable_2035_High:PrevPaidUpOptionTable_2035_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_2035_High = ProjValueMaturity2035_H;
            
            ReinvestAmount2030to2035_M = ProjValueMaturity2030_M * (ReinvestRate2030/100.00) * (ReinvestRate2030to2035/100.00);
            ProjValueMaturity2035_M = [self PaidUpOptionTable_2035_Median:PrevPaidUpOptionTable_2035_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_2035_Median = ProjValueMaturity2035_M;
            
            ReinvestAmount2030to2035_L = ProjValueMaturity2030_L * (ReinvestRate2030/100.00) * (ReinvestRate2030to2035/100.00);
            ProjValueMaturity2035_L = [self PaidUpOptionTable_2035_Low:PrevPaidUpOptionTable_2035_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_2035_Low = ProjValueMaturity2035_L;
            // -----
            
            //-- for Secure Fund---
            ReinvestAmount2030toRet_H = ProjValueMaturity2030_H * (ReinvestRate2030/100.00) * (ReinvestRate2030toRet/100.00);
            ProjValueMaturityRet_H = [self PaidUpOptionTable_Ret_High:PrevPaidUpOptionTable_Ret_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_Ret_High = ProjValueMaturityRet_H;
            
            ReinvestAmount2030toRet_M = ProjValueMaturity2030_M * (ReinvestRate2030/100.00) * (ReinvestRate2030toRet/100.00);
            ProjValueMaturityRet_M = [self PaidUpOptionTable_Ret_Median:PrevPaidUpOptionTable_Ret_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_Ret_Median = ProjValueMaturityRet_M;
            
            ReinvestAmount2030toRet_L = ProjValueMaturity2030_L * (ReinvestRate2030/100.00) * (ReinvestRate2030toRet/100.00);
            ProjValueMaturityRet_L = [self PaidUpOptionTable_Ret_Low:PrevPaidUpOptionTable_Ret_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_Ret_Low = ProjValueMaturityRet_L;
            //------------
            
            //-- for Secure Fund--- Venture 1111
            ReinvestAmount2030toVentureGrowth_H = ProjValueMaturity2030_H * (ReinvestRate2030/100.00) * (ReinvestRate2030toVentureGrowth/100.00);
            ProjValueMaturityVentureGrowth_H = [self PaidUpOptionTable_VentureGrowth_High:PrevPaidUpOptionTable_VentureGrowth_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureGrowth_High = ProjValueMaturityVentureGrowth_H;
            
            ReinvestAmount2030toVentureGrowth_M = ProjValueMaturity2030_M * (ReinvestRate2030/100.00) * (ReinvestRate2030toVentureGrowth/100.00);
            ProjValueMaturityVentureGrowth_M = [self PaidUpOptionTable_VentureGrowth_Median:PrevPaidUpOptionTable_VentureGrowth_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureGrowth_Median = ProjValueMaturityVentureGrowth_M;
            
            ReinvestAmount2030toVentureGrowth_L = ProjValueMaturity2030_L * (ReinvestRate2030/100.00) * (ReinvestRate2030toVentureGrowth/100.00);
            ProjValueMaturityVentureGrowth_L = [self PaidUpOptionTable_VentureGrowth_Low:PrevPaidUpOptionTable_VentureGrowth_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureGrowth_Low = ProjValueMaturityVentureGrowth_L;
            //------------
            
            //-- for Secure Fund--- Venture 2222
            ReinvestAmount2030toVentureBlueChip_H = ProjValueMaturity2030_H * (ReinvestRate2030/100.00) * (ReinvestRate2030toVentureBlueChip/100.00);
            ProjValueMaturityVentureBlueChip_H = [self PaidUpOptionTable_VentureBlueChip_High:PrevPaidUpOptionTable_VentureBlueChip_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureBlueChip_High = ProjValueMaturityVentureBlueChip_H;
            
            ReinvestAmount2030toVentureBlueChip_M = ProjValueMaturity2030_M * (ReinvestRate2030/100.00) * (ReinvestRate2030toVentureBlueChip/100.00);
            ProjValueMaturityVentureBlueChip_M = [self PaidUpOptionTable_VentureBlueChip_Median:PrevPaidUpOptionTable_VentureBlueChip_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureBlueChip_Median = ProjValueMaturityVentureBlueChip_M;
            
            ReinvestAmount2030toVentureBlueChip_L = ProjValueMaturity2030_L * (ReinvestRate2030/100.00) * (ReinvestRate2030toVentureBlueChip/100.00);
            ProjValueMaturityVentureBlueChip_L = [self PaidUpOptionTable_VentureBlueChip_Low:PrevPaidUpOptionTable_VentureBlueChip_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureBlueChip_Low = ProjValueMaturityVentureBlueChip_L;
            //------------
            
            //-- for Secure Fund--- Venture 3333
            ReinvestAmount2030toVentureDana_H = ProjValueMaturity2030_H * (ReinvestRate2030/100.00) * (ReinvestRate2030toVentureDana/100.00);
            ProjValueMaturityVentureDana_H = [self PaidUpOptionTable_VentureDana_High:PrevPaidUpOptionTable_VentureDana_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureDana_High = ProjValueMaturityVentureDana_H;
            
            ReinvestAmount2030toVentureDana_M = ProjValueMaturity2030_M * (ReinvestRate2030/100.00) * (ReinvestRate2030toVentureDana/100.00);
            ProjValueMaturityVentureDana_M = [self PaidUpOptionTable_VentureDana_Median:PrevPaidUpOptionTable_VentureDana_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureDana_Median = ProjValueMaturityVentureDana_M;
            
            ReinvestAmount2030toVentureDana_L = ProjValueMaturity2030_L * (ReinvestRate2030/100.00) * (ReinvestRate2030toVentureDana/100.00);
            ProjValueMaturityVentureDana_L = [self PaidUpOptionTable_VentureDana_Low:PrevPaidUpOptionTable_VentureDana_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureDana_Low = ProjValueMaturityVentureDana_L;
            //------------
            
            //-- for Secure Fund--- Venture 4444
            ReinvestAmount2030toVentureManaged_H = ProjValueMaturity2030_H * (ReinvestRate2030/100.00) * (ReinvestRate2030toVentureManaged/100.00);
            ProjValueMaturityVentureManaged_H = [self PaidUpOptionTable_VentureManaged_High:PrevPaidUpOptionTable_VentureManaged_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureManaged_High = ProjValueMaturityVentureManaged_H;
            
            ReinvestAmount2030toVentureManaged_M = ProjValueMaturity2030_M * (ReinvestRate2030/100.00) * (ReinvestRate2030toVentureManaged/100.00);
            ProjValueMaturityVentureManaged_M = [self PaidUpOptionTable_VentureManaged_Median:PrevPaidUpOptionTable_VentureManaged_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureManaged_Median = ProjValueMaturityVentureManaged_M;
            
            ReinvestAmount2030toVentureManaged_L = ProjValueMaturity2030_L * (ReinvestRate2030/100.00) * (ReinvestRate2030toVentureManaged/100.00);
            ProjValueMaturityVentureManaged_L = [self PaidUpOptionTable_VentureManaged_Low:PrevPaidUpOptionTable_VentureManaged_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureManaged_Low = ProjValueMaturityVentureManaged_L;
            //------------
            
            //-- for Secure Fund--- Venture 5555
            ReinvestAmount2030toVentureIncome_H = ProjValueMaturity2030_H * (ReinvestRate2030/100.00) * (ReinvestRate2030toVentureIncome/100.00);
            ProjValueMaturityVentureIncome_H = [self PaidUpOptionTable_VentureIncome_High:PrevPaidUpOptionTable_VentureIncome_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureIncome_High = ProjValueMaturityVentureIncome_H;
            
            ReinvestAmount2030toVentureIncome_M = ProjValueMaturity2030_M * (ReinvestRate2030/100.00) * (ReinvestRate2030toVentureIncome/100.00);
            ProjValueMaturityVentureIncome_M = [self PaidUpOptionTable_VentureIncome_Median:PrevPaidUpOptionTable_VentureIncome_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureIncome_Median = ProjValueMaturityVentureIncome_M;
            
            ReinvestAmount2030toVentureIncome_L = ProjValueMaturity2030_L * (ReinvestRate2030/100.00) * (ReinvestRate2030toVentureIncome/100.00);
            ProjValueMaturityVentureIncome_L = [self PaidUpOptionTable_VentureIncome_Low:PrevPaidUpOptionTable_VentureIncome_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureIncome_Low = ProjValueMaturityVentureIncome_L;
            //------------
            
            //-- for Secure Fund--- Venture 6666
            ReinvestAmount2030toVenture6666_H = ProjValueMaturity2030_H * (ReinvestRate2030/100.00) * (ReinvestRate2030toVenture6666/100.00);
            ProjValueMaturityVenture6666_H = [self PaidUpOptionTable_Venture6666_High:PrevPaidUpOptionTable_Venture6666_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture6666_High = ProjValueMaturityVenture6666_H;
            
            ReinvestAmount2030toVenture6666_M = ProjValueMaturity2030_M * (ReinvestRate2030/100.00) * (ReinvestRate2030toVenture6666/100.00);
            ProjValueMaturityVenture6666_M = [self PaidUpOptionTable_Venture6666_Median:PrevPaidUpOptionTable_Venture6666_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture6666_Median = ProjValueMaturityVenture6666_M;
            
            ReinvestAmount2030toVenture6666_L = ProjValueMaturity2030_L * (ReinvestRate2030/100.00) * (ReinvestRate2030toVenture6666/100.00);
            ProjValueMaturityVenture6666_L = [self PaidUpOptionTable_Venture6666_Low:PrevPaidUpOptionTable_Venture6666_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture6666_Low = ProjValueMaturityVenture6666_L;
            //------------
            
            //-- for Secure Fund--- Venture 7777
            ReinvestAmount2030toVenture7777_H = ProjValueMaturity2030_H * (ReinvestRate2030/100.00) * (ReinvestRate2030toVenture7777/100.00);
            ProjValueMaturityVenture7777_H = [self PaidUpOptionTable_Venture7777_High:PrevPaidUpOptionTable_Venture7777_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture7777_High = ProjValueMaturityVenture7777_H;
            
            ReinvestAmount2030toVenture7777_M = ProjValueMaturity2030_M * (ReinvestRate2030/100.00) * (ReinvestRate2030toVenture7777/100.00);
            ProjValueMaturityVenture7777_M = [self PaidUpOptionTable_Venture7777_Median:PrevPaidUpOptionTable_Venture7777_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture7777_Median = ProjValueMaturityVenture7777_M;
            
            ReinvestAmount2030toVenture7777_L = ProjValueMaturity2030_L * (ReinvestRate2030/100.00) * (ReinvestRate2030toVenture7777/100.00);
            ProjValueMaturityVenture7777_L = [self PaidUpOptionTable_Venture7777_Low:PrevPaidUpOptionTable_Venture7777_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture7777_Low = ProjValueMaturityVenture7777_L;
            //------------
            
            //-- for Secure Fund--- Venture 8888
            ReinvestAmount2030toVenture8888_H = ProjValueMaturity2030_H * (ReinvestRate2030/100.00) * (ReinvestRate2030toVenture8888/100.00);
            ProjValueMaturityVenture8888_H = [self PaidUpOptionTable_Venture8888_High:PrevPaidUpOptionTable_Venture8888_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture8888_High = ProjValueMaturityVenture8888_H;
            
            ReinvestAmount2030toVenture8888_M = ProjValueMaturity2030_M * (ReinvestRate2030/100.00) * (ReinvestRate2030toVenture8888/100.00);
            ProjValueMaturityVenture8888_M = [self PaidUpOptionTable_Venture8888_Median:PrevPaidUpOptionTable_Venture8888_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture8888_Median = ProjValueMaturityVenture8888_M;
            
            ReinvestAmount2030toVenture8888_L = ProjValueMaturity2030_L * (ReinvestRate2030/100.00) * (ReinvestRate2030toVenture8888/100.00);
            ProjValueMaturityVenture8888_L = [self PaidUpOptionTable_Venture8888_Low:PrevPaidUpOptionTable_Venture8888_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture8888_Low = ProjValueMaturityVenture8888_L;
            //------------
            
            //-- for Secure Fund--- Venture 9999
            ReinvestAmount2030toVenture9999_H = ProjValueMaturity2030_H * (ReinvestRate2030/100.00) * (ReinvestRate2030toVenture9999/100.00);
            ProjValueMaturityVenture9999_H = [self PaidUpOptionTable_Venture9999_High:PrevPaidUpOptionTable_Venture9999_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture9999_High = ProjValueMaturityVenture9999_H;
            
            ReinvestAmount2030toVenture9999_M = ProjValueMaturity2030_M * (ReinvestRate2030/100.00) * (ReinvestRate2030toVenture9999/100.00);
            ProjValueMaturityVenture9999_M = [self PaidUpOptionTable_Venture9999_Median:PrevPaidUpOptionTable_Venture9999_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture9999_Median = ProjValueMaturityVenture9999_M;
            
            ReinvestAmount2030toVenture9999_L = ProjValueMaturity2030_L * (ReinvestRate2030/100.00) * (ReinvestRate2030toVenture9999/100.00);
            ProjValueMaturityVenture9999_L = [self PaidUpOptionTable_Venture9999_Low:PrevPaidUpOptionTable_Venture9999_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture9999_Low = ProjValueMaturityVenture9999_L;
            //------------
            
            
            
            //-- for Dana Fund---
            ReinvestAmount2030toDana_H = ProjValueMaturity2030_H * (ReinvestRate2030/100.00) * (ReinvestRate2030toDana/100.00);
            ProjValueMaturityDana_H = [self PaidUpOptionTable_Dana_High:PrevPaidUpOptionTable_Dana_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_Dana_High = ProjValueMaturityDana_H;
            
            ReinvestAmount2030toDana_M = ProjValueMaturity2030_M * (ReinvestRate2030/100.00) * (ReinvestRate2030toDana/100.00);
            ProjValueMaturityDana_M = [self PaidUpOptionTable_Dana_Median:PrevPaidUpOptionTable_Dana_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_Dana_Median = ProjValueMaturityDana_M;
            
            ReinvestAmount2030toDana_L = ProjValueMaturity2030_L * (ReinvestRate2030/100.00) * (ReinvestRate2030toDana/100.00);
            ProjValueMaturityDana_L = [self PaidUpOptionTable_Dana_Low:PrevPaidUpOptionTable_Dana_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_Dana_Low = ProjValueMaturityDana_L;
            //------------
            
            //-- for Cash Fund---
            ReinvestAmount2030toCash_H = ProjValueMaturity2030_H * (ReinvestRate2030/100.00) * (ReinvestRate2030toCash/100.00);
            ProjValueMaturityCash_H = [self PaidUpOptionTable_Cash_High:PrevPaidUpOptionTable_Cash_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_Cash_High = ProjValueMaturityCash_H;
            
            ReinvestAmount2030toCash_M = ProjValueMaturity2030_M * (ReinvestRate2030/100.00) * (ReinvestRate2030toCash/100.00);
            ProjValueMaturityCash_M = [self PaidUpOptionTable_Cash_Median:PrevPaidUpOptionTable_Cash_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_Cash_Median = ProjValueMaturityCash_M;
            
            ReinvestAmount2030toCash_L = ProjValueMaturity2030_L * (ReinvestRate2030/100.00) * (ReinvestRate2030toCash/100.00);
            ProjValueMaturityCash_L = [self PaidUpOptionTable_Cash_Low:PrevPaidUpOptionTable_Cash_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_Cash_Low = ProjValueMaturityCash_L;
            //------------
            
        }
        else if (polYear == FundTerm2035) {
            
            if (Fund2035PartialReinvest == 0) {
                ReinvestRate2035 = 100; //meaning 2035 is fully reinvest
            }
            else{
                ReinvestRate2035 = 100 - Fund2035PartialReinvest;
            }
            
            if (Fund2035PartialReinvest != 100) { //meaning 2035 is not withdraw
                ReinvestRate2035toCash = Fund2035ReinvestToCashFac;
                ReinvestRate2035toDana = Fund2035ReinvestToDanaFac;
                ReinvestRate2035toRet = Fund2035ReinvestToRetFac;
                ReinvestRate2035toVentureGrowth = Fund2035ReinvestToVentureGrowthFac;//
                ReinvestRate2035toVentureBlueChip = Fund2035ReinvestToVentureBlueChipFac;//
                ReinvestRate2035toVentureDana = Fund2035ReinvestToVentureDanaFac;//
                ReinvestRate2035toVentureManaged = Fund2035ReinvestToVentureManagedFac;//
                ReinvestRate2035toVentureIncome = Fund2035ReinvestToVentureIncomeFac;//
                ReinvestRate2035toVenture6666 = Fund2035ReinvestToVenture6666Fac;//
                ReinvestRate2035toVenture7777 = Fund2035ReinvestToVenture7777Fac;//
                ReinvestRate2035toVenture8888 = Fund2035ReinvestToVenture8888Fac;//
                ReinvestRate2035toVenture9999 = Fund2035ReinvestToVenture9999Fac;//
            }
            else{
                ReinvestRate2035toCash = 0.00;
                ReinvestRate2035toDana = 0.00;
                ReinvestRate2035toRet = 0.00;
                ReinvestRate2035toVentureGrowth = 0.00;//
                ReinvestRate2035toVentureBlueChip = 0.00;//
                ReinvestRate2035toVentureDana = 0.00;//
                ReinvestRate2035toVentureManaged = 0.00;//
                ReinvestRate2035toVentureIncome = 0.00;//
                ReinvestRate2035toVenture6666 = 0.00;//
                ReinvestRate2035toVenture7777 = 0.00;//
                ReinvestRate2035toVenture8888 = 0.00;//
                ReinvestRate2035toVenture9999 = 0.00;//
            }
            
            //---- for 2035
            ProjValueMaturity2035_H = [self PaidUpOptionTable_2035_H_Balance:PrevPaidUpOptionTable_2035_High andPolicyYear:polYear];
            ProjWithdraw2035_H = ProjValueMaturity2035_H * ((100 - ReinvestRate2035)/100.00);
            ProjReinvest2035_H = ProjValueMaturity2035_H - ProjWithdraw2035_H;
            
            ProjValueMaturity2035_M = [self PaidUpOptionTable_2035_M_Balance:PrevPaidUpOptionTable_2035_Median andPolicyYear:polYear];
            ProjWithdraw2035_M = ProjValueMaturity2035_M * ((100 - ReinvestRate2035)/100.00);
            ProjReinvest2035_M = ProjValueMaturity2035_M - ProjWithdraw2035_M;
            
            ProjValueMaturity2035_L = [self PaidUpOptionTable_2035_L_Balance:PrevPaidUpOptionTable_2035_Low andPolicyYear:polYear];
            ProjWithdraw2035_L = ProjValueMaturity2035_L * ((100 - ReinvestRate2035)/100.00);
            ProjReinvest2035_L = ProjValueMaturity2035_L - ProjWithdraw2035_L;
            //-------
            
            //-- for Secure Fund---
            ReinvestAmount2035toRet_H = ProjValueMaturity2035_H * (ReinvestRate2035/100.00) * (ReinvestRate2035toRet/100.00);
            ProjValueMaturityRet_H = [self PaidUpOptionTable_Ret_High:PrevPaidUpOptionTable_Ret_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_Ret_High = ProjValueMaturityRet_H;
            
            ReinvestAmount2035toRet_M = ProjValueMaturity2035_M * (ReinvestRate2035/100.00) * (ReinvestRate2035toRet/100.00);
            ProjValueMaturityRet_M = [self PaidUpOptionTable_Ret_Median:PrevPaidUpOptionTable_Ret_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_Ret_Median = ProjValueMaturityRet_M;
            
            ReinvestAmount2035toRet_L = ProjValueMaturity2035_L * (ReinvestRate2035/100.00) * (ReinvestRate2035toRet/100.00);
            ProjValueMaturityRet_L = [self PaidUpOptionTable_Ret_Low:PrevPaidUpOptionTable_Ret_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_Ret_Low = ProjValueMaturityRet_L;
            //------------
            
            
            //-- for Secure Fund--- Venture 1111
            ReinvestAmount2035toVentureGrowth_H = ProjValueMaturity2035_H * (ReinvestRate2035/100.00) * (ReinvestRate2035toVentureGrowth/100.00);
            ProjValueMaturityVentureGrowth_H = [self PaidUpOptionTable_VentureGrowth_High:PrevPaidUpOptionTable_VentureGrowth_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureGrowth_High = ProjValueMaturityVentureGrowth_H;
            
            ReinvestAmount2035toVentureGrowth_M = ProjValueMaturity2035_M * (ReinvestRate2035/100.00) * (ReinvestRate2035toVentureGrowth/100.00);
            ProjValueMaturityVentureGrowth_M = [self PaidUpOptionTable_VentureGrowth_Median:PrevPaidUpOptionTable_VentureGrowth_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureGrowth_Median = ProjValueMaturityVentureGrowth_M;
            
            ReinvestAmount2035toVentureGrowth_L = ProjValueMaturity2035_L * (ReinvestRate2035/100.00) * (ReinvestRate2035toVentureGrowth/100.00);
            ProjValueMaturityVentureGrowth_L = [self PaidUpOptionTable_VentureGrowth_Low:PrevPaidUpOptionTable_VentureGrowth_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureGrowth_Low = ProjValueMaturityVentureGrowth_L;
            //------------
            
            //-- for Secure Fund--- Venture 2222
            ReinvestAmount2035toVentureBlueChip_H = ProjValueMaturity2035_H * (ReinvestRate2035/100.00) * (ReinvestRate2035toVentureBlueChip/100.00);
            ProjValueMaturityVentureBlueChip_H = [self PaidUpOptionTable_VentureBlueChip_High:PrevPaidUpOptionTable_VentureBlueChip_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureBlueChip_High = ProjValueMaturityVentureBlueChip_H;
            
            ReinvestAmount2035toVentureBlueChip_M = ProjValueMaturity2035_M * (ReinvestRate2035/100.00) * (ReinvestRate2035toVentureBlueChip/100.00);
            ProjValueMaturityVentureBlueChip_M = [self PaidUpOptionTable_VentureBlueChip_Median:PrevPaidUpOptionTable_VentureBlueChip_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureBlueChip_Median = ProjValueMaturityVentureBlueChip_M;
            
            ReinvestAmount2035toVentureBlueChip_L = ProjValueMaturity2035_L * (ReinvestRate2035/100.00) * (ReinvestRate2035toVentureBlueChip/100.00);
            ProjValueMaturityVentureBlueChip_L = [self PaidUpOptionTable_VentureBlueChip_Low:PrevPaidUpOptionTable_VentureBlueChip_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureBlueChip_Low = ProjValueMaturityVentureBlueChip_L;
            //------------
            
            //-- for Secure Fund--- Venture 3333
            ReinvestAmount2035toVentureDana_H = ProjValueMaturity2035_H * (ReinvestRate2035/100.00) * (ReinvestRate2035toVentureDana/100.00);
            ProjValueMaturityVentureDana_H = [self PaidUpOptionTable_VentureDana_High:PrevPaidUpOptionTable_VentureDana_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureDana_High = ProjValueMaturityVentureDana_H;
            
            ReinvestAmount2035toVentureDana_M = ProjValueMaturity2035_M * (ReinvestRate2035/100.00) * (ReinvestRate2035toVentureDana/100.00);
            ProjValueMaturityVentureDana_M = [self PaidUpOptionTable_VentureDana_Median:PrevPaidUpOptionTable_VentureDana_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureDana_Median = ProjValueMaturityVentureDana_M;
            
            ReinvestAmount2035toVentureDana_L = ProjValueMaturity2035_L * (ReinvestRate2035/100.00) * (ReinvestRate2035toVentureDana/100.00);
            ProjValueMaturityVentureDana_L = [self PaidUpOptionTable_VentureDana_Low:PrevPaidUpOptionTable_VentureDana_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureDana_Low = ProjValueMaturityVentureDana_L;
            //------------
            
            //-- for Secure Fund--- Venture 4444
            ReinvestAmount2035toVentureManaged_H = ProjValueMaturity2035_H * (ReinvestRate2035/100.00) * (ReinvestRate2035toVentureManaged/100.00);
            ProjValueMaturityVentureManaged_H = [self PaidUpOptionTable_VentureManaged_High:PrevPaidUpOptionTable_VentureManaged_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureManaged_High = ProjValueMaturityVentureManaged_H;
            
            ReinvestAmount2035toVentureManaged_M = ProjValueMaturity2035_M * (ReinvestRate2035/100.00) * (ReinvestRate2035toVentureManaged/100.00);
            ProjValueMaturityVentureManaged_M = [self PaidUpOptionTable_VentureManaged_Median:PrevPaidUpOptionTable_VentureManaged_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureManaged_Median = ProjValueMaturityVentureManaged_M;
            
            ReinvestAmount2035toVentureManaged_L = ProjValueMaturity2035_L * (ReinvestRate2035/100.00) * (ReinvestRate2035toVentureManaged/100.00);
            ProjValueMaturityVentureManaged_L = [self PaidUpOptionTable_VentureManaged_Low:PrevPaidUpOptionTable_VentureManaged_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureManaged_Low = ProjValueMaturityVentureManaged_L;
            //------------
            
            //-- for Secure Fund--- Venture 5555
            ReinvestAmount2035toVentureIncome_H = ProjValueMaturity2035_H * (ReinvestRate2035/100.00) * (ReinvestRate2035toVentureIncome/100.00);
            ProjValueMaturityVentureIncome_H = [self PaidUpOptionTable_VentureIncome_High:PrevPaidUpOptionTable_VentureIncome_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureIncome_High = ProjValueMaturityVentureIncome_H;
            
            ReinvestAmount2035toVentureIncome_M = ProjValueMaturity2035_M * (ReinvestRate2035/100.00) * (ReinvestRate2035toVentureIncome/100.00);
            ProjValueMaturityVentureIncome_M = [self PaidUpOptionTable_VentureIncome_Median:PrevPaidUpOptionTable_VentureIncome_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureIncome_Median = ProjValueMaturityVentureIncome_M;
            
            ReinvestAmount2035toVentureIncome_L = ProjValueMaturity2035_L * (ReinvestRate2035/100.00) * (ReinvestRate2035toVentureIncome/100.00);
            ProjValueMaturityVentureIncome_L = [self PaidUpOptionTable_VentureIncome_Low:PrevPaidUpOptionTable_VentureIncome_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureIncome_Low = ProjValueMaturityVentureIncome_L;
            //------------
            
            //-- for Secure Fund--- Venture 6666
            ReinvestAmount2035toVenture6666_H = ProjValueMaturity2035_H * (ReinvestRate2035/100.00) * (ReinvestRate2035toVenture6666/100.00);
            ProjValueMaturityVenture6666_H = [self PaidUpOptionTable_Venture6666_High:PrevPaidUpOptionTable_Venture6666_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture6666_High = ProjValueMaturityVenture6666_H;
            
            ReinvestAmount2035toVenture6666_M = ProjValueMaturity2035_M * (ReinvestRate2035/100.00) * (ReinvestRate2035toVenture6666/100.00);
            ProjValueMaturityVenture6666_M = [self PaidUpOptionTable_Venture6666_Median:PrevPaidUpOptionTable_Venture6666_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture6666_Median = ProjValueMaturityVenture6666_M;
            
            ReinvestAmount2035toVenture6666_L = ProjValueMaturity2035_L * (ReinvestRate2035/100.00) * (ReinvestRate2035toVenture6666/100.00);
            ProjValueMaturityVenture6666_L = [self PaidUpOptionTable_Venture6666_Low:PrevPaidUpOptionTable_Venture6666_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture6666_Low = ProjValueMaturityVenture6666_L;
            //------------
            
            //-- for Secure Fund--- Venture 7777
            ReinvestAmount2035toVenture7777_H = ProjValueMaturity2035_H * (ReinvestRate2035/100.00) * (ReinvestRate2035toVenture7777/100.00);
            ProjValueMaturityVenture7777_H = [self PaidUpOptionTable_Venture7777_High:PrevPaidUpOptionTable_Venture7777_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture7777_High = ProjValueMaturityVenture7777_H;
            
            ReinvestAmount2035toVenture7777_M = ProjValueMaturity2035_M * (ReinvestRate2035/100.00) * (ReinvestRate2035toVenture7777/100.00);
            ProjValueMaturityVenture7777_M = [self PaidUpOptionTable_Venture7777_Median:PrevPaidUpOptionTable_Venture7777_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture7777_Median = ProjValueMaturityVenture7777_M;
            
            ReinvestAmount2035toVenture7777_L = ProjValueMaturity2035_L * (ReinvestRate2035/100.00) * (ReinvestRate2035toVenture7777/100.00);
            ProjValueMaturityVenture7777_L = [self PaidUpOptionTable_Venture7777_Low:PrevPaidUpOptionTable_Venture7777_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture7777_Low = ProjValueMaturityVenture7777_L;
            //------------
            
            //-- for Secure Fund--- Venture 8888
            ReinvestAmount2035toVenture8888_H = ProjValueMaturity2035_H * (ReinvestRate2035/100.00) * (ReinvestRate2035toVenture8888/100.00);
            ProjValueMaturityVenture8888_H = [self PaidUpOptionTable_Venture8888_High:PrevPaidUpOptionTable_Venture8888_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture8888_High = ProjValueMaturityVenture8888_H;
            
            ReinvestAmount2035toVenture8888_M = ProjValueMaturity2035_M * (ReinvestRate2035/100.00) * (ReinvestRate2035toVenture8888/100.00);
            ProjValueMaturityVenture8888_M = [self PaidUpOptionTable_Venture8888_Median:PrevPaidUpOptionTable_Venture8888_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture8888_Median = ProjValueMaturityVenture8888_M;
            
            ReinvestAmount2035toVenture8888_L = ProjValueMaturity2035_L * (ReinvestRate2035/100.00) * (ReinvestRate2035toVenture8888/100.00);
            ProjValueMaturityVenture8888_L = [self PaidUpOptionTable_Venture8888_Low:PrevPaidUpOptionTable_Venture8888_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture8888_Low = ProjValueMaturityVenture8888_L;
            //------------
            
            //-- for Secure Fund--- Venture 9999
            ReinvestAmount2035toVenture9999_H = ProjValueMaturity2035_H * (ReinvestRate2035/100.00) * (ReinvestRate2035toVenture9999/100.00);
            ProjValueMaturityVenture9999_H = [self PaidUpOptionTable_Venture9999_High:PrevPaidUpOptionTable_Venture9999_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture9999_High = ProjValueMaturityVenture9999_H;
            
            ReinvestAmount2035toVenture9999_M = ProjValueMaturity2035_M * (ReinvestRate2035/100.00) * (ReinvestRate2035toVenture9999/100.00);
            ProjValueMaturityVenture9999_M = [self PaidUpOptionTable_Venture9999_Median:PrevPaidUpOptionTable_Venture9999_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture9999_Median = ProjValueMaturityVenture9999_M;
            
            ReinvestAmount2035toVenture9999_L = ProjValueMaturity2035_L * (ReinvestRate2035/100.00) * (ReinvestRate2035toVenture9999/100.00);
            ProjValueMaturityVenture9999_L = [self PaidUpOptionTable_Venture9999_Low:PrevPaidUpOptionTable_Venture9999_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture9999_Low = ProjValueMaturityVenture9999_L;
            //------------
            
            
            
            //-- for Dana Fund---
            ReinvestAmount2035toDana_H = ProjValueMaturity2035_H * (ReinvestRate2035/100.00) * (ReinvestRate2035toDana/100.00);
            ProjValueMaturityDana_H = [self PaidUpOptionTable_Dana_High:PrevPaidUpOptionTable_Dana_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_Dana_High = ProjValueMaturityDana_H;
            
            ReinvestAmount2035toDana_M = ProjValueMaturity2035_M * (ReinvestRate2035/100.00) * (ReinvestRate2035toDana/100.00);
            ProjValueMaturityDana_M = [self PaidUpOptionTable_Dana_Median:PrevPaidUpOptionTable_Dana_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_Dana_Median = ProjValueMaturityDana_M;
            
            ReinvestAmount2035toDana_L = ProjValueMaturity2035_L * (ReinvestRate2035/100.00) * (ReinvestRate2035toDana/100.00);
            ProjValueMaturityDana_L = [self PaidUpOptionTable_Dana_Low:PrevPaidUpOptionTable_Dana_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_Dana_Low = ProjValueMaturityDana_L;
            //------------
            
            //-- for Cash Fund---
            ReinvestAmount2035toCash_H = ProjValueMaturity2035_H * (ReinvestRate2035/100.00) * (ReinvestRate2035toCash/100.00);
            ProjValueMaturityCash_H = [self PaidUpOptionTable_Cash_High:PrevPaidUpOptionTable_Cash_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_Cash_High = ProjValueMaturityCash_H;
            
            ReinvestAmount2035toCash_M = ProjValueMaturity2035_M * (ReinvestRate2035/100.00) * (ReinvestRate2035toCash/100.00);
            ProjValueMaturityCash_M = [self PaidUpOptionTable_Cash_Median:PrevPaidUpOptionTable_Cash_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_Cash_Median = ProjValueMaturityCash_M;
            
            ReinvestAmount2035toCash_L = ProjValueMaturity2035_L * (ReinvestRate2035/100.00) * (ReinvestRate2035toCash/100.00);
            ProjValueMaturityCash_L = [self PaidUpOptionTable_Cash_Low:PrevPaidUpOptionTable_Cash_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_Cash_Low = ProjValueMaturityCash_L;
            //------------
            
            
        }
        else{
            ProjValueMaturityRet_H = [self PaidUpOptionTable_Ret_High:PrevPaidUpOptionTable_Ret_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_Ret_High = ProjValueMaturityRet_H;
            ProjValueMaturityRet_M = [self PaidUpOptionTable_Ret_Median:PrevPaidUpOptionTable_Ret_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_Ret_Median = ProjValueMaturityRet_M;
            ProjValueMaturityRet_L = [self PaidUpOptionTable_Ret_Low:PrevPaidUpOptionTable_Ret_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_Ret_Low = ProjValueMaturityRet_L;
            
            //Venture 1111
            ProjValueMaturityVentureGrowth_H = [self PaidUpOptionTable_VentureGrowth_High:PrevPaidUpOptionTable_VentureGrowth_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureGrowth_High = ProjValueMaturityVentureGrowth_H;
            ProjValueMaturityVentureGrowth_M = [self PaidUpOptionTable_VentureGrowth_Median:PrevPaidUpOptionTable_VentureGrowth_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureGrowth_Median = ProjValueMaturityVentureGrowth_M;
            ProjValueMaturityVentureGrowth_L = [self PaidUpOptionTable_VentureGrowth_Low:PrevPaidUpOptionTable_VentureGrowth_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureGrowth_Low = ProjValueMaturityVentureGrowth_L;
            //
            
            //Venture 2222
            ProjValueMaturityVentureBlueChip_H = [self PaidUpOptionTable_VentureBlueChip_High:PrevPaidUpOptionTable_VentureBlueChip_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureBlueChip_High = ProjValueMaturityVentureBlueChip_H;
            ProjValueMaturityVentureBlueChip_M = [self PaidUpOptionTable_VentureBlueChip_Median:PrevPaidUpOptionTable_VentureBlueChip_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureBlueChip_Median = ProjValueMaturityVentureBlueChip_M;
            ProjValueMaturityVentureBlueChip_L = [self PaidUpOptionTable_VentureBlueChip_Low:PrevPaidUpOptionTable_VentureBlueChip_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureBlueChip_Low = ProjValueMaturityVentureBlueChip_L;
            //
            
            //Venture 3333
            ProjValueMaturityVentureDana_H = [self PaidUpOptionTable_VentureDana_High:PrevPaidUpOptionTable_VentureDana_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureDana_High = ProjValueMaturityVentureDana_H;
            ProjValueMaturityVentureDana_M = [self PaidUpOptionTable_VentureDana_Median:PrevPaidUpOptionTable_VentureDana_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureDana_Median = ProjValueMaturityVentureDana_M;
            ProjValueMaturityVentureDana_L = [self PaidUpOptionTable_VentureDana_Low:PrevPaidUpOptionTable_VentureDana_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureDana_Low = ProjValueMaturityVentureDana_L;
            //
            
            //Venture 4444
            ProjValueMaturityVentureManaged_H = [self PaidUpOptionTable_VentureManaged_High:PrevPaidUpOptionTable_VentureManaged_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureManaged_High = ProjValueMaturityVentureManaged_H;
            ProjValueMaturityVentureManaged_M = [self PaidUpOptionTable_VentureManaged_Median:PrevPaidUpOptionTable_VentureManaged_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureManaged_Median = ProjValueMaturityVentureManaged_M;
            ProjValueMaturityVentureManaged_L = [self PaidUpOptionTable_VentureManaged_Low:PrevPaidUpOptionTable_VentureManaged_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureManaged_Low = ProjValueMaturityVentureManaged_L;
            //
            
            //Venture 5555
            ProjValueMaturityVentureIncome_H = [self PaidUpOptionTable_VentureIncome_High:PrevPaidUpOptionTable_VentureIncome_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureIncome_High = ProjValueMaturityVentureIncome_H;
            ProjValueMaturityVentureIncome_M = [self PaidUpOptionTable_VentureIncome_Median:PrevPaidUpOptionTable_VentureIncome_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureIncome_Median = ProjValueMaturityVentureIncome_M;
            ProjValueMaturityVentureIncome_L = [self PaidUpOptionTable_VentureIncome_Low:PrevPaidUpOptionTable_VentureIncome_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_VentureIncome_Low = ProjValueMaturityVentureIncome_L;
            //
            
            //Venture 6666
            ProjValueMaturityVenture6666_H = [self PaidUpOptionTable_Venture6666_High:PrevPaidUpOptionTable_Venture6666_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture6666_High = ProjValueMaturityVenture6666_H;
            ProjValueMaturityVenture6666_M = [self PaidUpOptionTable_Venture6666_Median:PrevPaidUpOptionTable_Venture6666_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture6666_Median = ProjValueMaturityVenture6666_M;
            ProjValueMaturityVenture6666_L = [self PaidUpOptionTable_Venture6666_Low:PrevPaidUpOptionTable_Venture6666_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture6666_Low = ProjValueMaturityVenture6666_L;
            //
            
            //Venture 7777
            ProjValueMaturityVenture7777_H = [self PaidUpOptionTable_Venture7777_High:PrevPaidUpOptionTable_Venture7777_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture7777_High = ProjValueMaturityVenture7777_H;
            ProjValueMaturityVenture7777_M = [self PaidUpOptionTable_Venture7777_Median:PrevPaidUpOptionTable_Venture7777_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture7777_Median = ProjValueMaturityVenture7777_M;
            ProjValueMaturityVenture7777_L = [self PaidUpOptionTable_Venture7777_Low:PrevPaidUpOptionTable_Venture7777_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture7777_Low = ProjValueMaturityVenture7777_L;
            //
            
            //Venture 8888
            ProjValueMaturityVenture8888_H = [self PaidUpOptionTable_Venture8888_High:PrevPaidUpOptionTable_Venture8888_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture8888_High = ProjValueMaturityVenture8888_H;
            ProjValueMaturityVenture8888_M = [self PaidUpOptionTable_Venture8888_Median:PrevPaidUpOptionTable_Venture8888_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture8888_Median = ProjValueMaturityVenture8888_M;
            ProjValueMaturityVenture8888_L = [self PaidUpOptionTable_Venture8888_Low:PrevPaidUpOptionTable_Venture8888_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture8888_Low = ProjValueMaturityVenture8888_L;
            //
            
            //Venture 9999
            ProjValueMaturityVenture9999_H = [self PaidUpOptionTable_Venture9999_High:PrevPaidUpOptionTable_Venture9999_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture9999_High = ProjValueMaturityVenture9999_H;
            ProjValueMaturityVenture9999_M = [self PaidUpOptionTable_Venture9999_Median:PrevPaidUpOptionTable_Venture9999_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture9999_Median = ProjValueMaturityVenture9999_M;
            ProjValueMaturityVenture9999_L = [self PaidUpOptionTable_Venture9999_Low:PrevPaidUpOptionTable_Venture9999_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_Venture9999_Low = ProjValueMaturityVenture9999_L;
            //
            
            ProjValueMaturityCash_H = [self PaidUpOptionTable_Cash_High:PrevPaidUpOptionTable_Cash_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_Cash_High = ProjValueMaturityCash_H;
            ProjValueMaturityCash_M = [self PaidUpOptionTable_Cash_Median:PrevPaidUpOptionTable_Cash_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_Cash_Median = ProjValueMaturityCash_M;
            ProjValueMaturityCash_L = [self PaidUpOptionTable_Cash_Low:PrevPaidUpOptionTable_Cash_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_Cash_Low = ProjValueMaturityCash_L;
            
            ProjValueMaturityDana_H = [self PaidUpOptionTable_Dana_High:PrevPaidUpOptionTable_Dana_High andPolicyYear:polYear];
            PrevPaidUpOptionTable_Dana_High = ProjValueMaturityDana_H;
            ProjValueMaturityDana_M = [self PaidUpOptionTable_Dana_Median:PrevPaidUpOptionTable_Dana_Median andPolicyYear:polYear];
            PrevPaidUpOptionTable_Dana_Median = ProjValueMaturityDana_M;
            ProjValueMaturityDana_L = [self PaidUpOptionTable_Dana_Low:PrevPaidUpOptionTable_Dana_Low andPolicyYear:polYear];
            PrevPaidUpOptionTable_Dana_Low = ProjValueMaturityDana_L;
            
            
            if(polYear < FundTerm2023){
                ProjValueMaturity2023_H = [self PaidUpOptionTable_2023_High:PrevPaidUpOptionTable_2023_High andPolicyYear:polYear];
                PrevPaidUpOptionTable_2023_High = ProjValueMaturity2023_H;
                ProjValueMaturity2023_M = [self PaidUpOptionTable_2023_Median:PrevPaidUpOptionTable_2023_Median andPolicyYear:polYear];
                PrevPaidUpOptionTable_2023_Median = ProjValueMaturity2023_M;
                ProjValueMaturity2023_L = [self PaidUpOptionTable_2023_Low:PrevPaidUpOptionTable_2023_Low andPolicyYear:polYear];
                PrevPaidUpOptionTable_2023_Low = ProjValueMaturity2023_L;
                
                ProjValueMaturity2025_H = [self PaidUpOptionTable_2025_High:PrevPaidUpOptionTable_2025_High andPolicyYear:polYear];
                PrevPaidUpOptionTable_2025_High = ProjValueMaturity2025_H;
                ProjValueMaturity2025_M = [self PaidUpOptionTable_2025_Median:PrevPaidUpOptionTable_2025_Median andPolicyYear:polYear];
                PrevPaidUpOptionTable_2025_Median = ProjValueMaturity2025_M;
                ProjValueMaturity2025_L = [self PaidUpOptionTable_2025_Low:PrevPaidUpOptionTable_2025_Low andPolicyYear:polYear];
                PrevPaidUpOptionTable_2025_Low = ProjValueMaturity2025_L;
                
                ProjValueMaturity2028_H = [self PaidUpOptionTable_2028_High:PrevPaidUpOptionTable_2028_High andPolicyYear:polYear];
                PrevPaidUpOptionTable_2028_High = ProjValueMaturity2028_H;
                ProjValueMaturity2028_M = [self PaidUpOptionTable_2028_Median:PrevPaidUpOptionTable_2028_Median andPolicyYear:polYear];
                PrevPaidUpOptionTable_2028_Median = ProjValueMaturity2028_M;
                ProjValueMaturity2028_L = [self PaidUpOptionTable_2028_Low:PrevPaidUpOptionTable_2028_Low andPolicyYear:polYear];
                PrevPaidUpOptionTable_2028_Low = ProjValueMaturity2028_L;
                
                ProjValueMaturity2030_H = [self PaidUpOptionTable_2030_High:PrevPaidUpOptionTable_2030_High andPolicyYear:polYear];
                PrevPaidUpOptionTable_2030_High = ProjValueMaturity2030_H;
                ProjValueMaturity2030_M = [self PaidUpOptionTable_2030_Median:PrevPaidUpOptionTable_2030_Median andPolicyYear:polYear];
                PrevPaidUpOptionTable_2030_Median = ProjValueMaturity2030_M;
                ProjValueMaturity2030_L = [self PaidUpOptionTable_2030_Low:PrevPaidUpOptionTable_2030_Low andPolicyYear:polYear];
                PrevPaidUpOptionTable_2030_Low = ProjValueMaturity2030_L;
                
                ProjValueMaturity2035_H = [self PaidUpOptionTable_2035_High:PrevPaidUpOptionTable_2035_High andPolicyYear:polYear];
                PrevPaidUpOptionTable_2035_High = ProjValueMaturity2035_H;
                ProjValueMaturity2035_M = [self PaidUpOptionTable_2035_Median:PrevPaidUpOptionTable_2035_Median andPolicyYear:polYear];
                PrevPaidUpOptionTable_2035_Median = ProjValueMaturity2035_M;
                ProjValueMaturity2035_L = [self PaidUpOptionTable_2035_Low:PrevPaidUpOptionTable_2035_Low andPolicyYear:polYear];
                PrevPaidUpOptionTable_2035_Low = ProjValueMaturity2035_L;
            }
            else if(polYear < FundTerm2025){
                ProjValueMaturity2025_H = [self PaidUpOptionTable_2025_High:PrevPaidUpOptionTable_2025_High andPolicyYear:polYear];
                PrevPaidUpOptionTable_2025_High = ProjValueMaturity2025_H;
                ProjValueMaturity2025_M = [self PaidUpOptionTable_2025_Median:PrevPaidUpOptionTable_2025_Median andPolicyYear:polYear];
                PrevPaidUpOptionTable_2025_Median = ProjValueMaturity2025_M;
                ProjValueMaturity2025_L = [self PaidUpOptionTable_2025_Low:PrevPaidUpOptionTable_2025_Low andPolicyYear:polYear];
                PrevPaidUpOptionTable_2025_Low = ProjValueMaturity2025_L;
                
                ProjValueMaturity2028_H = [self PaidUpOptionTable_2028_High:PrevPaidUpOptionTable_2028_High andPolicyYear:polYear];
                PrevPaidUpOptionTable_2028_High = ProjValueMaturity2028_H;
                ProjValueMaturity2028_M = [self PaidUpOptionTable_2028_Median:PrevPaidUpOptionTable_2028_Median andPolicyYear:polYear];
                PrevPaidUpOptionTable_2028_Median = ProjValueMaturity2028_M;
                ProjValueMaturity2028_L = [self PaidUpOptionTable_2028_Low:PrevPaidUpOptionTable_2028_Low andPolicyYear:polYear];
                PrevPaidUpOptionTable_2028_Low = ProjValueMaturity2028_L;
                
                ProjValueMaturity2030_H = [self PaidUpOptionTable_2030_High:PrevPaidUpOptionTable_2030_High andPolicyYear:polYear];
                PrevPaidUpOptionTable_2030_High = ProjValueMaturity2030_H;
                ProjValueMaturity2030_M = [self PaidUpOptionTable_2030_Median:PrevPaidUpOptionTable_2030_Median andPolicyYear:polYear];
                PrevPaidUpOptionTable_2030_Median = ProjValueMaturity2030_M;
                ProjValueMaturity2030_L = [self PaidUpOptionTable_2030_Low:PrevPaidUpOptionTable_2030_Low andPolicyYear:polYear];
                PrevPaidUpOptionTable_2030_Low = ProjValueMaturity2030_L;
                
                ProjValueMaturity2035_H = [self PaidUpOptionTable_2035_High:PrevPaidUpOptionTable_2035_High andPolicyYear:polYear];
                PrevPaidUpOptionTable_2035_High = ProjValueMaturity2035_H;
                ProjValueMaturity2035_M = [self PaidUpOptionTable_2035_Median:PrevPaidUpOptionTable_2035_Median andPolicyYear:polYear];
                PrevPaidUpOptionTable_2035_Median = ProjValueMaturity2035_M;
                ProjValueMaturity2035_L = [self PaidUpOptionTable_2035_Low:PrevPaidUpOptionTable_2035_Low andPolicyYear:polYear];
                PrevPaidUpOptionTable_2035_Low = ProjValueMaturity2035_L;
            }
            else if(polYear < FundTerm2028){
                
                ProjValueMaturity2028_H = [self PaidUpOptionTable_2028_High:PrevPaidUpOptionTable_2028_High andPolicyYear:polYear];
                PrevPaidUpOptionTable_2028_High = ProjValueMaturity2028_H;
                ProjValueMaturity2028_M = [self PaidUpOptionTable_2028_Median:PrevPaidUpOptionTable_2028_Median andPolicyYear:polYear];
                PrevPaidUpOptionTable_2028_Median = ProjValueMaturity2028_M;
                ProjValueMaturity2028_L = [self PaidUpOptionTable_2028_Low:PrevPaidUpOptionTable_2028_Low andPolicyYear:polYear];
                PrevPaidUpOptionTable_2028_Low = ProjValueMaturity2028_L;
                
                ProjValueMaturity2030_H = [self PaidUpOptionTable_2030_High:PrevPaidUpOptionTable_2030_High andPolicyYear:polYear];
                PrevPaidUpOptionTable_2030_High = ProjValueMaturity2030_H;
                ProjValueMaturity2030_M = [self PaidUpOptionTable_2030_Median:PrevPaidUpOptionTable_2030_Median andPolicyYear:polYear];
                PrevPaidUpOptionTable_2030_Median = ProjValueMaturity2030_M;
                ProjValueMaturity2030_L = [self PaidUpOptionTable_2030_Low:PrevPaidUpOptionTable_2030_Low andPolicyYear:polYear];
                PrevPaidUpOptionTable_2030_Low = ProjValueMaturity2030_L;
                
                ProjValueMaturity2035_H = [self PaidUpOptionTable_2035_High:PrevPaidUpOptionTable_2035_High andPolicyYear:polYear];
                PrevPaidUpOptionTable_2035_High = ProjValueMaturity2035_H;
                ProjValueMaturity2035_M = [self PaidUpOptionTable_2035_Median:PrevPaidUpOptionTable_2035_Median andPolicyYear:polYear];
                PrevPaidUpOptionTable_2035_Median = ProjValueMaturity2035_M;
                ProjValueMaturity2035_L = [self PaidUpOptionTable_2035_Low:PrevPaidUpOptionTable_2035_Low andPolicyYear:polYear];
                PrevPaidUpOptionTable_2035_Low = ProjValueMaturity2035_L;
            }
            else if(polYear < FundTerm2030){
                
                ProjValueMaturity2030_H = [self PaidUpOptionTable_2030_High:PrevPaidUpOptionTable_2030_High andPolicyYear:polYear];
                PrevPaidUpOptionTable_2030_High = ProjValueMaturity2030_H;
                ProjValueMaturity2030_M = [self PaidUpOptionTable_2030_Median:PrevPaidUpOptionTable_2030_Median andPolicyYear:polYear];
                PrevPaidUpOptionTable_2030_Median = ProjValueMaturity2030_M;
                ProjValueMaturity2030_L = [self PaidUpOptionTable_2030_Low:PrevPaidUpOptionTable_2030_Low andPolicyYear:polYear];
                PrevPaidUpOptionTable_2030_Low = ProjValueMaturity2030_L;
                
                ProjValueMaturity2035_H = [self PaidUpOptionTable_2035_High:PrevPaidUpOptionTable_2035_High andPolicyYear:polYear];
                PrevPaidUpOptionTable_2035_High = ProjValueMaturity2035_H;
                ProjValueMaturity2035_M = [self PaidUpOptionTable_2035_Median:PrevPaidUpOptionTable_2035_Median andPolicyYear:polYear];
                PrevPaidUpOptionTable_2035_Median = ProjValueMaturity2035_M;
                ProjValueMaturity2035_L = [self PaidUpOptionTable_2035_Low:PrevPaidUpOptionTable_2035_Low andPolicyYear:polYear];
                PrevPaidUpOptionTable_2035_Low = ProjValueMaturity2035_L;
            }
            else if(polYear < FundTerm2035){
                
                ProjValueMaturity2035_H = [self PaidUpOptionTable_2035_High:PrevPaidUpOptionTable_2035_High andPolicyYear:polYear];
                PrevPaidUpOptionTable_2035_High = ProjValueMaturity2035_H;
                ProjValueMaturity2035_M = [self PaidUpOptionTable_2035_Median:PrevPaidUpOptionTable_2035_Median andPolicyYear:polYear];
                PrevPaidUpOptionTable_2035_Median = ProjValueMaturity2035_M;
                ProjValueMaturity2035_L = [self PaidUpOptionTable_2035_Low:PrevPaidUpOptionTable_2035_Low andPolicyYear:polYear];
                PrevPaidUpOptionTable_2035_Low = ProjValueMaturity2035_L;
            }
        }
        
        //NSLog(@"dasda %d %f %f %f", polYear, ProjValueMaturityCash_H,ProjValueMaturityCash_M,ProjValueMaturityCash_L);
        //NSLog(@"dasda %d %f %f %f", polYear, ProjValueMaturityRet_H,ProjValueMaturityRet_M,ProjValueMaturityRet_L);
        //NSLog(@"dasda %d %f %f %f", polYear, ProjValueMaturityDana_H,ProjValueMaturityDana_M,ProjValueMaturityDana_L);
        //NSLog(@"dasda %d %f %f %f", polYear, ProjValueMaturity2023_H,ProjValueMaturity2023_M,ProjValueMaturity2023_L);
        //NSLog(@"dasda %d %f %f %f", polYear, ProjValueMaturity2025_H,ProjValueMaturity2025_M,ProjValueMaturity2025_L);
        //NSLog(@"dasda %d %f %f %f", polYear, ProjValueMaturity2028_H,ProjValueMaturity2028_M,ProjValueMaturity2028_L);
        //NSLog(@"dasda %d %f %f %f", polYear, ProjValueMaturity2030_H,ProjValueMaturity2030_M,ProjValueMaturity2030_L);
        //NSLog(@"dasda %d %f %f %f", polYear, ProjValueMaturity2035_H,ProjValueMaturity2035_M,ProjValueMaturity2035_L);
        
    }
    
    return TRUE;
    
}

#pragma mark - PDF generation

-(void)copySIToDoc{
	NSString *directory = @"EverLife_SI";
    NSFileManager *fileManager = [NSFileManager defaultManager];
    NSError *error;
    NSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);
    NSString *documentsDirectory = [paths objectAtIndex:0];
    NSString *documentSIFolderPath = [documentsDirectory stringByAppendingPathComponent:directory];
    NSString *resourceSIFolderPath = [[[NSBundle mainBundle] resourcePath] stringByAppendingPathComponent:directory];
    
    
    if (![fileManager fileExistsAtPath:documentSIFolderPath]) {
        [fileManager createDirectoryAtPath:documentSIFolderPath withIntermediateDirectories:NO attributes:nil error:&error];
    }
	else{
		[fileManager removeItemAtPath:documentSIFolderPath error:&error];
		[fileManager createDirectoryAtPath:documentSIFolderPath withIntermediateDirectories:NO attributes:nil error:&error];
	}
    
    NSArray *fileList = [fileManager contentsOfDirectoryAtPath:resourceSIFolderPath error:&error];
    for (NSString *SIFiles in fileList) {
        NSString *newFilePath = [documentSIFolderPath stringByAppendingPathComponent:SIFiles];
        NSString *oldFilePath = [resourceSIFolderPath stringByAppendingPathComponent:SIFiles];
        [fileManager copyItemAtPath:oldFilePath toPath:newFilePath error:&error];
    }
	
}

-(void)copySIToDoc_BM{
	NSString *directory = @"EverLife_SI_BM";
    NSFileManager *fileManager = [NSFileManager defaultManager];
    NSError *error;
    NSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);
    NSString *documentsDirectory = [paths objectAtIndex:0];
    NSString *documentSIFolderPath = [documentsDirectory stringByAppendingPathComponent:directory];
    NSString *resourceSIFolderPath = [[[NSBundle mainBundle] resourcePath] stringByAppendingPathComponent:directory];
    
    
    if (![fileManager fileExistsAtPath:documentSIFolderPath]) {
        [fileManager createDirectoryAtPath:documentSIFolderPath withIntermediateDirectories:NO attributes:nil error:&error];
    }
	else{
		[fileManager removeItemAtPath:documentSIFolderPath error:&error];
		[fileManager createDirectoryAtPath:documentSIFolderPath withIntermediateDirectories:NO attributes:nil error:&error];
	}
    
    NSArray *fileList = [fileManager contentsOfDirectoryAtPath:resourceSIFolderPath error:&error];
    for (NSString *SIFiles in fileList) {
        NSString *newFilePath = [documentSIFolderPath stringByAppendingPathComponent:SIFiles];
        NSString *oldFilePath = [resourceSIFolderPath stringByAppendingPathComponent:SIFiles];
        [fileManager copyItemAtPath:oldFilePath toPath:newFilePath error:&error];
    }
	
}


-(void)generateJSON_UV{
	NSArray *paths2 = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);
    NSString *docsPath2 = [paths2 objectAtIndex:0];
    NSString *path2 = [docsPath2 stringByAppendingPathComponent:@"hladb.sqlite"];
    
	
	FMDatabase *database = [FMDatabase databaseWithPath:path2];
    [database open];
	
	FMResultSet *results;
    NSString *query;
    int totalRecords = 0;
    int currentRecord = 0;
    
    results = [database executeQuery:@"select AgentCode,AgentName from Agent_profile"];
    NSString *agentCode;
    NSString *agentName;
    while([results next]) {
        agentCode = [results stringForColumn:@"AgentCode"];
        agentName  = [results stringForColumn:@"AgentName"];
    }
	
	results = [database executeQuery:[NSString stringWithFormat:@"select Class,OccLoading_UL,OccLoading_TL from Adm_Occp_Loading_Penta where occpcode = '%@'", OccpCode]];
    NSString *OccpClass;
	NSString *OccpLoading;
	NSString *OccpLoadingTL;
	
    while([results next]) {
		OccpClass = [results stringForColumn:@"Class"];
		OccpLoading = [results stringForColumn:@"OccLoading_UL"];
		OccpLoadingTL = [results stringForColumn:@"OccLoading_TL"];
    }
	
	int TotalPages = 0;
	
	results = [database executeQuery:@"select count(*) as cnt from UL_Temp_Pages"];
	
	if ([results next]) {
        TotalPages = [results intForColumn:@"cnt"];
    }
	
	results = Nil;
	query = [NSString stringWithFormat:@"Select FromYear, ForYear, Amount from UL_TPExcess where SINo ='%@'",SINo];
    
	results = [database executeQuery:query];
	NSString *TopupStart;
	NSString *TopupEnd;
	NSString *TopupAmount;
    
	if ( results.next == TRUE) {
		//[results next];
		TopupStart = [NSString stringWithFormat:@"%d", [[results stringForColumnIndex:0] integerValue ] - 1];
		TopupEnd = [NSString stringWithFormat:@"%d", [TopupStart intValue ] + [[results stringForColumnIndex:1] intValue ]];
		TopupAmount = [NSString stringWithFormat:@"%f",[[results stringForColumnIndex:2] doubleValue ]];
	}
	else{
		TopupStart = @"-";
		TopupEnd = @"-";
		TopupAmount = @"-";
	}
	
	results = Nil;
	query = [NSString stringWithFormat:@"Select FromAge, ToAge, YearInt, Amount  from UL_RegWithdrawal where SINo ='%@'",SINo];
	
	results = [database executeQuery:query];
	NSString *WithdrawAgeFrom;
	NSString *WithdrawAgeTo;
	NSString *WithdrawAmount;
	NSString *WithdrawInterval;
	if ( results.next == TRUE) {
		WithdrawAgeFrom = [results stringForColumnIndex:0];
		WithdrawAgeTo = [results stringForColumnIndex:1];
		WithdrawInterval = [results stringForColumnIndex:2];
		WithdrawAmount = [results stringForColumnIndex:3];
        
	}
	else{
		WithdrawAgeFrom = @"-";
		WithdrawAgeTo = @"-";
		WithdrawAmount = @"-";
		WithdrawInterval = @"-";
	}
	
	results = Nil;
	query = [NSString stringWithFormat:@"Select RRTUOFromYear, RRTUOYear, Premium from UL_Rider_Details where SINo ='%@' AND ridercode = 'RRTUO'",SINo];
	
	results = [database executeQuery:query];
	NSString *RRTUOFrom;
	NSString *RRTUOTo;
	NSString *RRTUOAmount;
    
	if ( results.next == TRUE) {
		RRTUOFrom = [results stringForColumnIndex:0];
		RRTUOTo = [NSString stringWithFormat:@"%d", [[results stringForColumnIndex:1] intValue ] + [RRTUOFrom intValue ] - 1];
		RRTUOAmount = [results stringForColumnIndex:2];
		
	}
	else{
		RRTUOFrom = @"-";
		RRTUOTo = @"-";
		RRTUOAmount = @"-";
        
	}
	
	NSString *ReducedPaidUpYear;
	NSString *ReducedSA;
	NSString *ReducedCharge;
	
	query = [NSString stringWithFormat:@"SELECT * FROM UL_ReducedPaidUp Where sino = '%@'", SINo];
	results = [database executeQuery:query];
    if (results.next == TRUE){
        ReducedPaidUpYear = [results stringForColumn:@"ReducedYear"];
        ReducedSA = [results stringForColumn:@"Amount"];
    }
	
	query = [NSString stringWithFormat:@"SELECT col2 FROM UL_Temp_RPUO Where col1 = 'Charge'"];
    results = [database executeQuery:query];
    if (results.next == TRUE){
        ReducedCharge = [results stringForColumnIndex:0];
    }
	
	query = [NSString stringWithFormat:@"SELECT col8,col9 FROM UL_Temp_ECAR60 where seqno = '1'"];
    results = [database executeQuery:query];
	NSString *Annuity;
	NSString *AnnuityPrem;
	
	if ([results next]) {
		Annuity = [results stringForColumnIndex:0];
		AnnuityPrem = [results stringForColumnIndex:1];
	}
	
	query = [NSString stringWithFormat:@"Select DateModified, ComDate, ATPrem, basicSA, CovPeriod, replace(Hloading, '(null)', '0') Hloading, HloadingTerm, "
             "hloadingPct, hloadingPctTerm, BumpMode, plancode, ATU from UL_Details where SINo ='%@'",SINo];
    
	results = [database executeQuery:query];
    NSString *DateModified;
	NSString *ComDate;
	NSString *ATPrem;
	NSString *bSA;
	NSString *CovPeriod;
	NSString *HLoad;
	NSString *HLoadTerm;
	NSString *HLoadPct;
	NSString *HLoadPctTerm;
	NSString *BumpMode;
	NSString *tempPlanCode;
	NSString *tempATU;
	
    if ([results next]) {
		DateModified = [results stringForColumnIndex:0];
        ComDate = [results stringForColumnIndex:1];
		ATPrem = [results stringForColumnIndex:2];
		bSA = [results stringForColumnIndex:3];
		CovPeriod = [results stringForColumnIndex:4];
		HLoad = [[results stringForColumnIndex:5] isEqualToString:@""] ? @"0" : [results stringForColumnIndex:5];
		HLoadTerm = [results stringForColumnIndex:6];
		HLoadPct = [[results stringForColumnIndex:7] isEqualToString:@""] ? @"0" : [results stringForColumnIndex:7];
		HLoadPctTerm = [results stringForColumnIndex:8];
		BumpMode = [results stringForColumnIndex:9];
		tempPlanCode = [results stringForColumnIndex:10];
		tempATU = [results stringForColumnIndex:11];
    }
	
	NSString *jsonFile = [docsPath2 stringByAppendingPathComponent:@"SI.json"];
	NSString *content = @"{\n";
    content = [content stringByAppendingString:@"\"SI\": [\n"];
	
	content = [content stringByAppendingString:@"{\n"];
    content = [content stringByAppendingFormat:@"\"agentCode\":\"%@\",\n", agentCode];
    content = [content stringByAppendingFormat:@"\"agentName\":\"%@\",\n", agentName];
	content = [content stringByAppendingFormat:@"\"DateModified\":\"%@\",\n", DateModified];
	content = [content stringByAppendingFormat:@"\"TotalPages\":\"%d\",\n", TotalPages];
	content = [content stringByAppendingFormat:@"\"ComDate\":\"%@\",\n", ComDate];
	content = [content stringByAppendingFormat:@"\"ATPrem\":\"%@\",\n", ATPrem];
	content = [content stringByAppendingFormat:@"\"BasicSA\":\"%@\",\n", bSA];
	content = [content stringByAppendingFormat:@"\"CovPeriod\":\"%@\",\n", CovPeriod];
	content = [content stringByAppendingFormat:@"\"HLoad\":\"%@\",\n", HLoad];
	content = [content stringByAppendingFormat:@"\"HLoadTerm\":\"%@\",\n", HLoadTerm];
	content = [content stringByAppendingFormat:@"\"HLoadPct\":\"%@\",\n", HLoadPct];
	content = [content stringByAppendingFormat:@"\"HLoadPctTerm\":\"%@\",\n", HLoadPctTerm];
	content = [content stringByAppendingFormat:@"\"TopupStart\":\"%@\",\n", TopupStart];
	content = [content stringByAppendingFormat:@"\"TopupEnd\":\"%@\",\n", TopupEnd];
	content = [content stringByAppendingFormat:@"\"TopupAmount\":\"%@\",\n", TopupAmount];
	content = [content stringByAppendingFormat:@"\"WithdrawAgeFrom\":\"%@\",\n", WithdrawAgeFrom];
	content = [content stringByAppendingFormat:@"\"WithdrawAgeTo\":\"%@\",\n", WithdrawAgeTo];
	content = [content stringByAppendingFormat:@"\"WithdrawAmount\":\"%@\",\n", WithdrawAmount];
	content = [content stringByAppendingFormat:@"\"WithdrawInterval\":\"%@\",\n", WithdrawInterval];
	content = [content stringByAppendingFormat:@"\"RRTUOFrom\":\"%@\",\n", RRTUOFrom];
	content = [content stringByAppendingFormat:@"\"RRTUOTo\":\"%@\",\n", RRTUOTo];
	content = [content stringByAppendingFormat:@"\"RRTUOAmount\":\"%@\",\n", RRTUOAmount];
	content = [content stringByAppendingFormat:@"\"Annuity\":\"%@\",\n", Annuity];
	content = [content stringByAppendingFormat:@"\"AnnuityPrem\":\"%@\",\n", AnnuityPrem];
	content = [content stringByAppendingFormat:@"\"ReducedPaidUpYear\":\"%@\",\n", ReducedPaidUpYear];
	content = [content stringByAppendingFormat:@"\"ReducedSA\":\"%@\",\n", ReducedSA];
	content = [content stringByAppendingFormat:@"\"ReducedCharge\":\"%@\",\n", ReducedCharge];
	content = [content stringByAppendingFormat:@"\"BumpMode\":\"%@\",\n", BumpMode];
	content = [content stringByAppendingFormat:@"\"PlanCode\":\"%@\",\n", tempPlanCode];
	content = [content stringByAppendingFormat:@"\"ATU\":\"%@\",\n", tempATU];
	content = [content stringByAppendingFormat:@"\"SINo\":\"%@\",\n", SINo];
	if ([OccpClass integerValue ] > 4) {
		content = [content stringByAppendingFormat:@"\"OccpClass\":\" Class D\",\n"];
	}
	else{
		content = [content stringByAppendingFormat:@"\"OccpClass\":\"Class %@\",\n", OccpClass ];
	}
	
	if ([OccpLoading integerValue ] > 0) {
		content = [content stringByAppendingFormat:@"\"OccpLoading\":\"%@\",\n", OccpLoading ];
	}
	else{
		content = [content stringByAppendingFormat:@"\"OccpLoading\":\"STD\",\n" ];
	}
	
	if ([OccpLoadingTL integerValue ] > 0) {
		content = [content stringByAppendingFormat:@"\"OccpLoadingTL\":\"%@\",\n", OccpLoadingTL ];
	}
	else{
		content = [content stringByAppendingFormat:@"\"OccpLoadingTL\":\"STD\",\n" ];
	}
	
	//UL_Temp_Trad_LA start
    totalRecords = 0;
    currentRecord = 0;
    
    query = [NSString stringWithFormat:@"Select count(*) as cnt from UL_Temp_Trad_LA where SINo ='%@'",SINo];
    results = [database executeQuery:query];
    if ([results next]) {
        totalRecords = [results intForColumn:@"cnt"];
    }
	
	NSString *PayorOrSecondOccpClass;
	NSString *PayorOrSecondOccpLoading;
	
	if (totalRecords > 1) {
		if (OccpCodePayor.length > 0) {
			results = [database executeQuery:[NSString stringWithFormat:@"select Class,OccLoading_UL from Adm_Occp_Loading_Penta where occpcode = '%@'", OccpCodePayor]];
			
		}
		else{
			results = [database executeQuery:[NSString stringWithFormat:@"select Class,OccLoading_UL from Adm_Occp_Loading_Penta where occpcode = '%@'", OccpCode2nd]];
			
		}
		
		while([results next]) {
			PayorOrSecondOccpClass = [results stringForColumn:@"Class"];
			PayorOrSecondOccpLoading = [results stringForColumn:@"OccLoading_UL"];
		}
		
	}
	
    results = Nil;
    query = [NSString stringWithFormat:@"Select LADesc,LADescM,Name,Age,Sex,Smoker,PTypeCode from UL_Temp_trad_LA where SINo ='%@'",SINo];
    results = [database executeQuery:query];
    if (results != Nil){
        content = [content stringByAppendingString:@"\"UL_Temp_trad_LA\":{\n"];
        content = [content stringByAppendingString:@"\"data\":[\n"];
    }
    while([results next]) {
        currentRecord++;
        content = [content stringByAppendingString:@"{\n"];
        content = [content stringByAppendingFormat:@"\"LADesc\":\"%@\",\n", [results stringForColumn:@"LADesc"]];
        content = [content stringByAppendingFormat:@"\"LADescM\":\"%@\",\n", [results stringForColumn:@"LADescM"]];
        content = [content stringByAppendingFormat:@"\"Name\":\"%@\",\n", [results stringForColumn:@"Name"]];
        content = [content stringByAppendingFormat:@"\"Age\":\"%@\",\n", [results stringForColumn:@"Age"]];
        content = [content stringByAppendingFormat:@"\"Sex\":\"%@\",\n", [results stringForColumn:@"Sex"]];
        content = [content stringByAppendingFormat:@"\"Smoker\":\"%@\",\n", [results stringForColumn:@"Smoker"]];
		if (currentRecord == 2) {
			if ([[results stringForColumn:@"PTypeCode"] isEqualToString:@"LA"]) {
				content = [content stringByAppendingFormat:@"\"DOB\":\"%@\",\n", getDOB2nd];
			}
			else{
				content = [content stringByAppendingFormat:@"\"DOB\":\"%@\",\n", getDOBPayor];
			}
			content = [content stringByAppendingFormat:@"\"OccpClass\":\"%@\",\n", PayorOrSecondOccpClass ];
			content = [content stringByAppendingFormat:@"\"OccpLoading\":\"%@\",\n", PayorOrSecondOccpLoading ];
		}
		else if (currentRecord == 3){
			content = [content stringByAppendingFormat:@"\"OccpClass\":\"%@\",\n", PayorOrSecondOccpClass ];
			content = [content stringByAppendingFormat:@"\"OccpLoading\":\"%@\",\n", PayorOrSecondOccpLoading ];
		}
		else{
			content = [content stringByAppendingFormat:@"\"DOB\":\"%@\",\n", getDOB];
			content = [content stringByAppendingFormat:@"\"OccpClass\":\"%@\",\n", OccpClass ];
			content = [content stringByAppendingFormat:@"\"OccpLoading\":\"%@\",\n", OccpLoading ];
		}
        content = [content stringByAppendingFormat:@"\"PTypeCode\":\"%@\"\n", [results stringForColumn:@"PTypeCode"]];
        if (currentRecord == totalRecords){ //last record
            content = [content stringByAppendingString:@"}\n"];
        }
        else{
            content = [content stringByAppendingString:@"},\n"];
        }
    }
    content = [content stringByAppendingString:@"]\n"];
    content = [content stringByAppendingString:@"},\n"];
    //UL_Temp_Trad_LA end
	
	//LA info starts********************** @added by Edwin 24-10-2013
    query = [NSString stringWithFormat:
             @"SELECT b.Name, b.ANB, b.ALB FROM UL_LAPayor a LEFT JOIN Clt_Profile b ON a.CustCode=b.CustCode "
             "WHERE a.SINo=\"%@\" AND a.PTypeCode=\"LA\" AND a.Seq=1",SINo];
    
    totalRecords = 0;
    currentRecord = 0;
    
    results = [database executeQuery:query];
    if ([results next]) {
        totalRecords = [results intForColumn:@"cnt"];
    }
    results = Nil;
    results = [database executeQuery:query];
    if (results != Nil){
        content = [content stringByAppendingString:@"\"LAInfo\":{\n"];
        content = [content stringByAppendingString:@"\"data\":[\n"];
    }
    while([results next]) {
        //currentRecord++;
        content = [content stringByAppendingString:@"{\n"];
        content = [content stringByAppendingFormat:@"\"Name\":\"%@\",\n", [results stringForColumn:@"Name"]];
        content = [content stringByAppendingFormat:@"\"ALB\":\"%@\",\n", [results stringForColumn:@"ALB"]];
        content = [content stringByAppendingFormat:@"\"ANB\":\"%@\"\n", [results stringForColumn:@"ANB"]];
        content = [content stringByAppendingString:@"}\n"];
    }
    content = [content stringByAppendingString:@"]\n"];
    content = [content stringByAppendingString:@"},\n"];
    //LA info ends*****************************************************//
	
	//UL_Temp_Pages start
    totalRecords = 0;
    currentRecord = 0;
    results = [database executeQuery:@"select count(*) as cnt from UL_Temp_Pages"];
    if ([results next]) {
        totalRecords = [results intForColumn:@"cnt"];
    }
	
	if (totalRecords == 0) {
		NSLog(@"generate json - no data found in UL_Temp_Pages ");
	}
	
    results = Nil;
    query = [NSString stringWithFormat:@"SELECT * FROM UL_Temp_Pages ORDER BY PageNum"];
    results = [database executeQuery:query];
    
    if (results != Nil){
        content = [content stringByAppendingString:@"\"UL_Temp_Pages\":{\n"];
        content = [content stringByAppendingString:@"\"data\":[\n"];
    }
    while([results next]) {
        currentRecord++;
        content = [content stringByAppendingString:@"{\n"];
        content = [content stringByAppendingFormat:@"\"htmlName\":\"%@\",\n", [results stringForColumn:@"htmlName"]];
        content = [content stringByAppendingFormat:@"\"PageNum\":\"%@\",\n", [results stringForColumn:@"PageNum"]];
        content = [content stringByAppendingFormat:@"\"PageDesc\":\"%@\",\n", [results stringForColumn:@"PageDesc"]];
        content = [content stringByAppendingFormat:@"\"riders\":\"%@\"\n", [results stringForColumn:@"riders"]];
        if (currentRecord == totalRecords){ //last record
            content = [content stringByAppendingString:@"}\n"];
        }
        else{
            content = [content stringByAppendingString:@"},\n"];
        }
    }
    content = [content stringByAppendingString:@"]\n"];
    content = [content stringByAppendingString:@"},\n"];
    //SI_Temp_Pages end
	
	//UL_Temp_Fund start
    totalRecords = 0;
    currentRecord = 0;
    results = [database executeQuery: [NSString stringWithFormat:@"select count(*) as cnt from UL_Fund_Maturity_Option Where sino = '%@'", SINo]];
    if ([results next]) {
        totalRecords = [results intForColumn:@"cnt"];
    }
	
    results = Nil;
    query = [NSString stringWithFormat:@"select * from ul_fund_maturity_option as A, ul_temp_fund as B where "
             "A.sino = B.sino AND A.fund = B.col1 AND A.sino = '%@' order by Fund", SINo];
    results = [database executeQuery:query];
    
    if (results != Nil){
        content = [content stringByAppendingString:@"\"UL_Temp_Fund\":{\n"];
        content = [content stringByAppendingString:@"\"data\":[\n"];
    }
    while([results next]) {
        currentRecord++;
        content = [content stringByAppendingString:@"{\n"];
        if ([[results stringForColumn:@"Fund"] isEqualToString:@"HLA EverGreen 2025"]) {
            content = [content stringByAppendingFormat:@"\"Fund\":\"%@\",\n", @"HLA EverGreen 2025<br/>(Fund Maturity Date: 26/12/2025)"];
        }
        else if ([[results stringForColumn:@"Fund"] isEqualToString:@"HLA EverGreen 2028"]) {
            content = [content stringByAppendingFormat:@"\"Fund\":\"%@\",\n", @"HLA EverGreen 2028<br/>(Fund Maturity Date: 26/12/2028)"];
        }
        else if ([[results stringForColumn:@"Fund"] isEqualToString:@"HLA EverGreen 2030"]) {
            content = [content stringByAppendingFormat:@"\"Fund\":\"%@\",\n", @"HLA EverGreen 2030<br/>(Fund Maturity Date: 26/12/2030)"];
        }
        else if ([[results stringForColumn:@"Fund"] isEqualToString:@"HLA EverGreen 2035"]) {
            content = [content stringByAppendingFormat:@"\"Fund\":\"%@\",\n", @"HLA EverGreen 2035<br/>(Fund Maturity Date: 26/12/2035)"];
        }
        
        content = [content stringByAppendingFormat:@"\"Option\":\"%@\",\n", [results stringForColumn:@"option"]];
        content = [content stringByAppendingFormat:@"\"Partial\":\"%@\",\n", [results stringForColumn:@"Partial_Withd_Pct"]];
		content = [content stringByAppendingFormat:@"\"Fund2025\":\"%@\",\n", [results stringForColumn:@"EverGreen2025"]];
		content = [content stringByAppendingFormat:@"\"Fund2028\":\"%@\",\n", [results stringForColumn:@"EverGreen2028"]];
		content = [content stringByAppendingFormat:@"\"Fund2030\":\"%@\",\n", [results stringForColumn:@"EverGreen2030"]];
		content = [content stringByAppendingFormat:@"\"Fund2035\":\"%@\",\n", [results stringForColumn:@"EverGreen2035"]];
		content = [content stringByAppendingFormat:@"\"CashFund\":\"%@\",\n", [results stringForColumn:@"CashFund"]];
        content = [content stringByAppendingFormat:@"\"RetireFund\":\"%@\",\n", [results stringForColumn:@"RetireFund"]];
		content = [content stringByAppendingFormat:@"\"DanaFund\":\"%@\",\n", [results stringForColumn:@"DanaFund"]];
        content = [content stringByAppendingFormat:@"\"VentureFund\":\"%@\",\n", [results stringForColumn:@"VentureFund"]];
		content = [content stringByAppendingFormat:@"\"WithdrawBull\":\"%@\",\n", [results stringForColumn:@"col2"]];
        content = [content stringByAppendingFormat:@"\"WithdrawFlat\":\"%@\",\n", [results stringForColumn:@"col3"]];
		content = [content stringByAppendingFormat:@"\"WithdrawBear\":\"%@\",\n", [results stringForColumn:@"col4"]];
		content = [content stringByAppendingFormat:@"\"ReInvestBull\":\"%@\",\n", [results stringForColumn:@"col5"]];
		content = [content stringByAppendingFormat:@"\"ReInvestFlat\":\"%@\",\n", [results stringForColumn:@"col6"]];
		content = [content stringByAppendingFormat:@"\"ReInvestBear\":\"%@\"\n", [results stringForColumn:@"col7"]];
        if (currentRecord == totalRecords){ //last record
            content = [content stringByAppendingString:@"}\n"];
        }
        else{
            content = [content stringByAppendingString:@"},\n"];
        }
    }
    content = [content stringByAppendingString:@"]\n"];
    content = [content stringByAppendingString:@"},\n"];
    //UL_Temp_Fund end
	
	/*
     //UL_Temp_Fund start
     totalRecords = 0;
     currentRecord = 0;
     results = [database executeQuery: [NSString stringWithFormat:@"select count(*) as cnt from UL_Temp_Fund Where sino = '%@'", getSINo]];
     if ([results next]) {
     totalRecords = [results intForColumn:@"cnt"];
     }
     
     results = Nil;
     query = [NSString stringWithFormat:@"SELECT * FROM UL_Temp_Fund Where sino = '%@' order by col1", getSINo];
     results = [database executeQuery:query];
     
     if (results != Nil){
     content = [content stringByAppendingString:@"\"UL_Temp_Fund\":{\n"];
     content = [content stringByAppendingString:@"\"data\":[\n"];
     }
     while([results next]) {
     currentRecord++;
     content = [content stringByAppendingString:@"{\n"];
     content = [content stringByAppendingFormat:@"\"Fund\":\"%@\",\n", [results stringForColumn:@"col1"]];
     content = [content stringByAppendingFormat:@"\"WithdrawBull\":\"%@\",\n", [results stringForColumn:@"col2"]];
     content = [content stringByAppendingFormat:@"\"WithdrawFlat\":\"%@\",\n", [results stringForColumn:@"col3"]];
     content = [content stringByAppendingFormat:@"\"WithdrawBear\":\"%@\",\n", [results stringForColumn:@"col4"]];
     content = [content stringByAppendingFormat:@"\"ReInvestBull\":\"%@\",\n", [results stringForColumn:@"col5"]];
     content = [content stringByAppendingFormat:@"\"ReInvestFlat\":\"%@\",\n", [results stringForColumn:@"col6"]];
     content = [content stringByAppendingFormat:@"\"ReInvestBear\":\"%@\"\n", [results stringForColumn:@"col7"]];
     
     if (currentRecord == totalRecords){ //last record
     content = [content stringByAppendingString:@"}\n"];
     }
     else{
     content = [content stringByAppendingString:@"},\n"];
     }
     }
     content = [content stringByAppendingString:@"]\n"];
     content = [content stringByAppendingString:@"},\n"];
     //UL_Temp_Fund end
     */
	//UL_Temp_Trad_Details start
    totalRecords = 0;
    currentRecord = 0;
    
    query = [NSString stringWithFormat:@"Select count(*) as cnt from UL_Rider_Details where SINo ='%@'",SINo];
    results = [database executeQuery:query];
    if ([results next]) {
        totalRecords = [results intForColumn:@"cnt"];
    }
    results = Nil;
    query = [NSString stringWithFormat:@"Select RiderCode, RiderDesc, PTypeCode, Seq, RiderTerm, SumAssured, Units, "
             "PlanOption, HLoading, HLoadingTerm, HLoadingPct, HLoadingPctTerm, Premium, "
             "PaymentTerm, Deductible, RRTUOFromYear,RRTUOYear, ReinvestGYI, RiderLoadingPremium "
             "from UL_Rider_Details where SINo ='%@' ORDER BY RiderCode",SINo];
	
    results = [database executeQuery:query];
    if (results != Nil){
        content = [content stringByAppendingString:@"\"UL_Temp_trad_Details\":{\n"];
        content = [content stringByAppendingString:@"\"data\":[\n"];
    }
    while([results next]) {
        currentRecord++;
        content = [content stringByAppendingString:@"{\n"];
        content = [content stringByAppendingFormat:@"\"RiderCode\":\"%@\",\n", [results stringForColumn:@"RiderCode"]];
        content = [content stringByAppendingFormat:@"\"RiderDesc\":\"%@\",\n", [results stringForColumn:@"RiderDesc"]];
		content = [content stringByAppendingFormat:@"\"PTypeCode\":\"%@\",\n", [results stringForColumn:@"PTypeCode"]];
		content = [content stringByAppendingFormat:@"\"Seq\":\"%@\",\n", [results stringForColumn:@"Seq"]];
		
		if ([[results stringForColumn:@"PTypeCode" ] isEqualToString:@"LA"]) {
			if ([[results stringForColumn:@"Seq" ] isEqualToString:@"1" ]) {
				content = [content stringByAppendingFormat:@"\"InsuredLives\":\"1st Life Assured\",\n" ];
			}
			else{
				content = [content stringByAppendingFormat:@"\"InsuredLives\":\"2nd Life Assured\",\n"];
			}
		}
		else{
			content = [content stringByAppendingFormat:@"\"InsuredLives\":\"Payor\",\n"];
		}
        
        content = [content stringByAppendingFormat:@"\"SumAssured\":\"%@\",\n", [results stringForColumn:@"SumAssured"]];
        content = [content stringByAppendingFormat:@"\"CovPeriod\":\"%@\",\n", [results stringForColumn:@"RiderTerm"]];
        content = [content stringByAppendingFormat:@"\"PaymentTerm\":\"%@\",\n", [results stringForColumn:@"PaymentTerm"]];
        content = [content stringByAppendingFormat:@"\"AnnualTarget\":\"%@\",\n", [results stringForColumn:@"Premium"]];
		content = [content stringByAppendingFormat:@"\"AnnualLoading\":\"%@\",\n", @"0.00"];
		content = [content stringByAppendingFormat:@"\"RiderHLoading\":\"%@\",\n", [[results stringForColumn:@"HLoading"] isEqualToString:@""] ? @"0" : [results stringForColumn:@"HLoading"]];
		content = [content stringByAppendingFormat:@"\"RiderHLoadingTerm\":\"%@\",\n", [results stringForColumn:@"HLoadingTerm"]];
		content = [content stringByAppendingFormat:@"\"RiderHLoadingPct\":\"%@\",\n", [[results stringForColumn:@"HLoadingPct"] isEqualToString:@""] ? @"0" : [results stringForColumn:@"HLoadingPct"]];
		content = [content stringByAppendingFormat:@"\"RiderHLoadingPctTerm\":\"%@\",\n", [results stringForColumn:@"HLoadingPctTerm"]];
		content = [content stringByAppendingFormat:@"\"TotalPremium\":\"%@\",\n", [results stringForColumn:@"Premium"]];
		content = [content stringByAppendingFormat:@"\"RiderLoadingPremium\":\"%@\",\n", [results stringForColumn:@"RiderLoadingPremium"]];
		content = [content stringByAppendingFormat:@"\"PlanOption\":\"%@\",\n", [results stringForColumn:@"PlanOption"]];
		content = [content stringByAppendingFormat:@"\"Deductible\":\"%@\",\n", [results stringForColumn:@"Deductible"]];
		content = [content stringByAppendingFormat:@"\"ReinvestGYI\":\"%@\",\n", [results stringForColumn:@"ReinvestGYI"]];
		content = [content stringByAppendingFormat:@"\"RRTUOFromYear\":\"%@\",\n", [results stringForColumn:@"RRTUOFromYear"]];
		content = [content stringByAppendingFormat:@"\"RRTUOYear\":\"%@\"\n", [results stringForColumn:@"RRTUOYear"]];
		
        if (currentRecord == totalRecords){ //last record
            content = [content stringByAppendingString:@"}\n"];
        }
        else{
            content = [content stringByAppendingString:@"},\n"];
        }
    }
    content = [content stringByAppendingString:@"]\n"];
    content = [content stringByAppendingString:@"},\n"];
    //UL_Temp_Trad_Details end
    
	//UL_Temp_Trad_Basic start
    totalRecords = 0;
    currentRecord = 0;
    results = [database executeQuery:@"select count(*) as cnt from UL_Temp_Trad_Basic where DataType = 'DATA'"];
    if ([results next]) {
        totalRecords = [results intForColumn:@"cnt"];
    }
    
	if (totalRecords == 0) {
		NSLog(@"generate json - no data found in UL_Temp_Trad_Basic ");
	}
	
    results = Nil;
    query = [NSString stringWithFormat:@"SELECT col0_1,col0_2,col1,col2,col3,col4,col5,col6,col7,col8,col9,col10 "
             ",col11,col12,col13,col14,col15,col16,col17,col18,col19,col20,col21,col22, "
             "col23,col24,col25,col26,col27,col28,col29,col30,col31 FROM UL_Temp_Trad_Basic where DataType = 'DATA'"];
    results = [database executeQuery:query];
    if (results != Nil){
        content = [content stringByAppendingString:@"\"UL_Temp_Trad_Basic\":{\n"];
        content = [content stringByAppendingString:@"\"data\":[\n"];
    }
    while([results next]) {
        currentRecord++;
        content = [content stringByAppendingString:@"{\n"];
        content = [content stringByAppendingFormat:@"\"col0_1\":\"%@\",\n", [results stringForColumn:@"col0_1"]];
        content = [content stringByAppendingFormat:@"\"col0_2\":\"%@\",\n", [results stringForColumn:@"col0_2"]];
        content = [content stringByAppendingFormat:@"\"col1\":\"%@\",\n", [results stringForColumn:@"col1"]];
        content = [content stringByAppendingFormat:@"\"col2\":\"%@\",\n", [results stringForColumn:@"col2"]];
        content = [content stringByAppendingFormat:@"\"col3\":\"%@\",\n", [results stringForColumn:@"col3"]];
        content = [content stringByAppendingFormat:@"\"col4\":\"%@\",\n", [results stringForColumn:@"col4"]];
        content = [content stringByAppendingFormat:@"\"col5\":\"%@\",\n", [results stringForColumn:@"col5"]];
        content = [content stringByAppendingFormat:@"\"col6\":\"%@\",\n", [results stringForColumn:@"col6"]];
        content = [content stringByAppendingFormat:@"\"col7\":\"%@\",\n", [results stringForColumn:@"col7"]];
        content = [content stringByAppendingFormat:@"\"col8\":\"%@\",\n", [results stringForColumn:@"col8"]];
        content = [content stringByAppendingFormat:@"\"col9\":\"%@\",\n", [results stringForColumn:@"col9"]];
        content = [content stringByAppendingFormat:@"\"col10\":\"%@\",\n", [results stringForColumn:@"col10"]];
        content = [content stringByAppendingFormat:@"\"col11\":\"%@\",\n", [results stringForColumn:@"col11"]];
        content = [content stringByAppendingFormat:@"\"col12\":\"%@\",\n", [results stringForColumn:@"col12"]];
        content = [content stringByAppendingFormat:@"\"col13\":\"%@\",\n", [results stringForColumn:@"col13"]];
        content = [content stringByAppendingFormat:@"\"col14\":\"%@\",\n", [results stringForColumn:@"col14"]];
        content = [content stringByAppendingFormat:@"\"col15\":\"%@\",\n", [results stringForColumn:@"col15"]];
        content = [content stringByAppendingFormat:@"\"col16\":\"%@\",\n", [results stringForColumn:@"col16"]];
        content = [content stringByAppendingFormat:@"\"col17\":\"%@\",\n", [results stringForColumn:@"col17"]];
        content = [content stringByAppendingFormat:@"\"col18\":\"%@\",\n", [results stringForColumn:@"col18"]];
        content = [content stringByAppendingFormat:@"\"col19\":\"%@\",\n", [results stringForColumn:@"col19"]];
        content = [content stringByAppendingFormat:@"\"col20\":\"%@\",\n", [results stringForColumn:@"col20"]];
        content = [content stringByAppendingFormat:@"\"col21\":\"%@\",\n", [results stringForColumn:@"col21"]];
        content = [content stringByAppendingFormat:@"\"col22\":\"%@\",\n", [results stringForColumn:@"col22"]];
        content = [content stringByAppendingFormat:@"\"col23\":\"%@\",\n", [results stringForColumn:@"col23"]];
		content = [content stringByAppendingFormat:@"\"col24\":\"%@\",\n", [results stringForColumn:@"col24"]];
        content = [content stringByAppendingFormat:@"\"col25\":\"%@\",\n", [results stringForColumn:@"col25"]];
        content = [content stringByAppendingFormat:@"\"col26\":\"%@\",\n", [results stringForColumn:@"col26"]];
        content = [content stringByAppendingFormat:@"\"col27\":\"%@\",\n", [results stringForColumn:@"col27"]];
        content = [content stringByAppendingFormat:@"\"col28\":\"%@\",\n", [results stringForColumn:@"col28"]];
        content = [content stringByAppendingFormat:@"\"col29\":\"%@\",\n", [results stringForColumn:@"col29"]];
        content = [content stringByAppendingFormat:@"\"col30\":\"%@\",\n", [results stringForColumn:@"col30"]];
        content = [content stringByAppendingFormat:@"\"col31\":\"%@\"\n", [results stringForColumn:@"col31"]];
        
        if (currentRecord == totalRecords){ //last record
            content = [content stringByAppendingString:@"}\n"];
        }
        else{
            content = [content stringByAppendingString:@"},\n"];
        }
    }
    content = [content stringByAppendingString:@"]\n"];
    content = [content stringByAppendingString:@"},\n"];
    //SI_Temp_Trad_Basic end
    
    //UL_Temp_Rider start
    totalRecords = 0;
    currentRecord = 0;
    results = [database executeQuery:@"select count(*) as cnt from UL_Temp_Rider"];
    if ([results next]) {
        totalRecords = [results intForColumn:@"cnt"];
    }
	
    results = Nil;
    query = [NSString stringWithFormat:@"SELECT * FROM UL_Temp_rider"];
    results = [database executeQuery:query];
    if (results != Nil){
        content = [content stringByAppendingString:@"\"UL_Temp_Rider\":{\n"];
        content = [content stringByAppendingString:@"\"data\":[\n"];
    }
    while([results next]) {
        currentRecord++;
        content = [content stringByAppendingString:@"{\n"];
        content = [content stringByAppendingFormat:@"\"col1\":\"%@\",\n", [results stringForColumn:@"col1"]];
        content = [content stringByAppendingFormat:@"\"col2\":\"%@\",\n", [results stringForColumn:@"col2"]];
        content = [content stringByAppendingFormat:@"\"col3\":\"%@\",\n", [results stringForColumn:@"col3"]];
        content = [content stringByAppendingFormat:@"\"col4\":\"%@\",\n", [results stringForColumn:@"col4"]];
        content = [content stringByAppendingFormat:@"\"col5\":\"%@\",\n", [results stringForColumn:@"col5"]];
        content = [content stringByAppendingFormat:@"\"col6\":\"%@\",\n", [results stringForColumn:@"col6"]];
        content = [content stringByAppendingFormat:@"\"col7\":\"%@\",\n", [results stringForColumn:@"col7"]];
        content = [content stringByAppendingFormat:@"\"col8\":\"%@\",\n", [results stringForColumn:@"col8"]];
        content = [content stringByAppendingFormat:@"\"col9\":\"%@\",\n", [results stringForColumn:@"col9"]];
        content = [content stringByAppendingFormat:@"\"col10\":\"%@\",\n", [results stringForColumn:@"col10"]];
        content = [content stringByAppendingFormat:@"\"col11\":\"%@\"\n", [results stringForColumn:@"col11"]];
        
        if (currentRecord == totalRecords){ //last record
            content = [content stringByAppendingString:@"}\n"];
        }
        else{
            content = [content stringByAppendingString:@"},\n"];
        }
    }
    content = [content stringByAppendingString:@"]\n"];
    content = [content stringByAppendingString:@"},\n"];
    //SI_Temp_Rider end
    
	//SI_Temp_Trad_Rider start
    content = [content stringByAppendingString:@"\"UL_Temp_Trad_Rider\":{\n"];
    //page1 start
    content = [content stringByAppendingString:@"\"p1\":[\n"];
    content = [content stringByAppendingString:@"{\n"];
    content = [content stringByAppendingString:@"\"data\":[\n"];
    
    totalRecords = 0;
    currentRecord = 0;
    results = [database executeQuery:@"SELECT count(*) as cnt FROM UL_Temp_Trad_Rider where PageNo = '1' order by CAST(SeqNo AS INT) asc"];
    if ([results next]) {
        totalRecords = [results intForColumn:@"cnt"];
    }
    results = Nil;
    query = [NSString stringWithFormat:@"SELECT * FROM UL_Temp_Trad_Rider where PageNo = '1' order by CAST(SeqNo AS INT) asc"];
    results = [database executeQuery:query];
    while([results next]) {
        currentRecord++;
        content = [content stringByAppendingString:@"{\n"];
        content = [content stringByAppendingFormat:@"\"SeqNo\":\"%@\",\n", [results stringForColumn:@"SeqNo"]];
        content = [content stringByAppendingFormat:@"\"DataType\":\"%@\",\n", [results stringForColumn:@"DataType"]];
        content = [content stringByAppendingFormat:@"\"PageNo\":\"%@\",\n", [results stringForColumn:@"PageNo"]];
        content = [content stringByAppendingFormat:@"\"col0_1\":\"%@\",\n", [results stringForColumn:@"col0_1"]];
        content = [content stringByAppendingFormat:@"\"col0_2\":\"%@\",\n", [results stringForColumn:@"col0_2"]];
        content = [content stringByAppendingFormat:@"\"col1\":\"%@\",\n", [results stringForColumn:@"col1"]];
        content = [content stringByAppendingFormat:@"\"col2\":\"%@\",\n", [results stringForColumn:@"col2"]];
        content = [content stringByAppendingFormat:@"\"col3\":\"%@\",\n", [results stringForColumn:@"col3"]];
        content = [content stringByAppendingFormat:@"\"col4\":\"%@\",\n", [results stringForColumn:@"col4"]];
        content = [content stringByAppendingFormat:@"\"col5\":\"%@\",\n", [results stringForColumn:@"col5"]];
        content = [content stringByAppendingFormat:@"\"col6\":\"%@\",\n", [results stringForColumn:@"col6"]];
        content = [content stringByAppendingFormat:@"\"col7\":\"%@\",\n", [results stringForColumn:@"col7"]];
        content = [content stringByAppendingFormat:@"\"col8\":\"%@\",\n", [results stringForColumn:@"col8"]];
        content = [content stringByAppendingFormat:@"\"col9\":\"%@\",\n", [results stringForColumn:@"col9"]];
        content = [content stringByAppendingFormat:@"\"col10\":\"%@\",\n", [results stringForColumn:@"col10"]];
        content = [content stringByAppendingFormat:@"\"col11\":\"%@\",\n", [results stringForColumn:@"col11"]];
        content = [content stringByAppendingFormat:@"\"col12\":\"%@\",\n", [results stringForColumn:@"col12"]];
		content = [content stringByAppendingFormat:@"\"col13\":\"%@\"\n", [results stringForColumn:@"col13"]];
        if (currentRecord == totalRecords){ //last record
            content = [content stringByAppendingString:@"}\n"];
        }
        else{
            content = [content stringByAppendingString:@"},\n"];
        }
    }
    content = [content stringByAppendingString:@"]\n"];
    content = [content stringByAppendingString:@"}\n"];
    content = [content stringByAppendingString:@"],\n"];
    //page1 end
    
    //page2 start
    content = [content stringByAppendingString:@"\"p2\":[\n"];
    content = [content stringByAppendingString:@"{\n"];
    content = [content stringByAppendingString:@"\"data\":[\n"];
    
    totalRecords = 0;
    currentRecord = 0;
    results = [database executeQuery:@"SELECT count(*) as cnt FROM UL_Temp_Trad_Rider where PageNo = '2' order by CAST(SeqNo AS INT) asc"];
    if ([results next]) {
        totalRecords = [results intForColumn:@"cnt"];
    }
    results = Nil;
    query = [NSString stringWithFormat:@"SELECT * FROM UL_Temp_Trad_Rider where PageNo = '2' order by CAST(SeqNo AS INT) asc"];
    results = [database executeQuery:query];
    while([results next]) {
        currentRecord++;
        content = [content stringByAppendingString:@"{\n"];
        content = [content stringByAppendingFormat:@"\"SeqNo\":\"%@\",\n", [results stringForColumn:@"SeqNo"]];
        content = [content stringByAppendingFormat:@"\"DataType\":\"%@\",\n", [results stringForColumn:@"DataType"]];
        content = [content stringByAppendingFormat:@"\"PageNo\":\"%@\",\n", [results stringForColumn:@"PageNo"]];
        content = [content stringByAppendingFormat:@"\"col0_1\":\"%@\",\n", [results stringForColumn:@"col0_1"]];
        content = [content stringByAppendingFormat:@"\"col0_2\":\"%@\",\n", [results stringForColumn:@"col0_2"]];
        content = [content stringByAppendingFormat:@"\"col1\":\"%@\",\n", [results stringForColumn:@"col1"]];
        content = [content stringByAppendingFormat:@"\"col2\":\"%@\",\n", [results stringForColumn:@"col2"]];
        content = [content stringByAppendingFormat:@"\"col3\":\"%@\",\n", [results stringForColumn:@"col3"]];
        content = [content stringByAppendingFormat:@"\"col4\":\"%@\",\n", [results stringForColumn:@"col4"]];
        content = [content stringByAppendingFormat:@"\"col5\":\"%@\",\n", [results stringForColumn:@"col5"]];
        content = [content stringByAppendingFormat:@"\"col6\":\"%@\",\n", [results stringForColumn:@"col6"]];
        content = [content stringByAppendingFormat:@"\"col7\":\"%@\",\n", [results stringForColumn:@"col7"]];
        content = [content stringByAppendingFormat:@"\"col8\":\"%@\",\n", [results stringForColumn:@"col8"]];
        content = [content stringByAppendingFormat:@"\"col9\":\"%@\",\n", [results stringForColumn:@"col9"]];
        content = [content stringByAppendingFormat:@"\"col10\":\"%@\",\n", [results stringForColumn:@"col10"]];
        content = [content stringByAppendingFormat:@"\"col11\":\"%@\",\n", [results stringForColumn:@"col11"]];
        content = [content stringByAppendingFormat:@"\"col12\":\"%@\",\n", [results stringForColumn:@"col12"]];
		content = [content stringByAppendingFormat:@"\"col13\":\"%@\"\n", [results stringForColumn:@"col13"]];
        if (currentRecord == totalRecords){ //last record
            content = [content stringByAppendingString:@"}\n"];
        }
        else{
            content = [content stringByAppendingString:@"},\n"];
        }
    }
    content = [content stringByAppendingString:@"]\n"];
    content = [content stringByAppendingString:@"}\n"];
    content = [content stringByAppendingString:@"],\n"];
    //page2 end
    
    //page3 start
    content = [content stringByAppendingString:@"\"p3\":[\n"];
    content = [content stringByAppendingString:@"{\n"];
    content = [content stringByAppendingString:@"\"data\":[\n"];
    
    totalRecords = 0;
    currentRecord = 0;
    results = [database executeQuery:@"SELECT count(*) as cnt FROM UL_Temp_Trad_Rider where PageNo = '3' order by CAST(SeqNo AS INT) asc"];
    if ([results next]) {
        totalRecords = [results intForColumn:@"cnt"];
    }
    results = Nil;
    query = [NSString stringWithFormat:@"SELECT * FROM UL_Temp_Trad_Rider where PageNo = '3' order by CAST(SeqNo AS INT) asc"];
    results = [database executeQuery:query];
    while([results next]) {
        currentRecord++;
        content = [content stringByAppendingString:@"{\n"];
        content = [content stringByAppendingFormat:@"\"SeqNo\":\"%@\",\n", [results stringForColumn:@"SeqNo"]];
        content = [content stringByAppendingFormat:@"\"DataType\":\"%@\",\n", [results stringForColumn:@"DataType"]];
        content = [content stringByAppendingFormat:@"\"PageNo\":\"%@\",\n", [results stringForColumn:@"PageNo"]];
        content = [content stringByAppendingFormat:@"\"col0_1\":\"%@\",\n", [results stringForColumn:@"col0_1"]];
        content = [content stringByAppendingFormat:@"\"col0_2\":\"%@\",\n", [results stringForColumn:@"col0_2"]];
        content = [content stringByAppendingFormat:@"\"col1\":\"%@\",\n", [results stringForColumn:@"col1"]];
        content = [content stringByAppendingFormat:@"\"col2\":\"%@\",\n", [results stringForColumn:@"col2"]];
        content = [content stringByAppendingFormat:@"\"col3\":\"%@\",\n", [results stringForColumn:@"col3"]];
        content = [content stringByAppendingFormat:@"\"col4\":\"%@\",\n", [results stringForColumn:@"col4"]];
        content = [content stringByAppendingFormat:@"\"col5\":\"%@\",\n", [results stringForColumn:@"col5"]];
        content = [content stringByAppendingFormat:@"\"col6\":\"%@\",\n", [results stringForColumn:@"col6"]];
        content = [content stringByAppendingFormat:@"\"col7\":\"%@\",\n", [results stringForColumn:@"col7"]];
        content = [content stringByAppendingFormat:@"\"col8\":\"%@\",\n", [results stringForColumn:@"col8"]];
        content = [content stringByAppendingFormat:@"\"col9\":\"%@\",\n", [results stringForColumn:@"col9"]];
        content = [content stringByAppendingFormat:@"\"col10\":\"%@\",\n", [results stringForColumn:@"col10"]];
        content = [content stringByAppendingFormat:@"\"col11\":\"%@\",\n", [results stringForColumn:@"col11"]];
        content = [content stringByAppendingFormat:@"\"col12\":\"%@\",\n", [results stringForColumn:@"col12"]];
		content = [content stringByAppendingFormat:@"\"col13\":\"%@\"\n", [results stringForColumn:@"col13"]];
        if (currentRecord == totalRecords){ //last record
            content = [content stringByAppendingString:@"}\n"];
        }
        else{
            content = [content stringByAppendingString:@"},\n"];
        }
    }
    content = [content stringByAppendingString:@"]\n"];
    content = [content stringByAppendingString:@"}\n"];
    content = [content stringByAppendingString:@"]\n"];
    //page3 end
    
    
    content = [content stringByAppendingString:@"},\n"];
    //UL_Temp_Trad_Rider end
    
	//UL_Temp_ECAR60 start
    totalRecords = 0;
    currentRecord = 0;
    results = [database executeQuery:@"select count(*) as cnt from UL_Temp_ECAR60 where DataType = 'DATA'"];
    if ([results next]) {
        totalRecords = [results intForColumn:@"cnt"];
    }
    
    results = Nil;
    query = [NSString stringWithFormat:@"SELECT col0_1,col0_2,col1,col2,col3,col4,col5,col6,col7 FROM UL_Temp_ECAR60 where DataType = 'DATA'"];
    results = [database executeQuery:query];
    if (results != Nil){
        content = [content stringByAppendingString:@"\"UL_Temp_ECAR60\":{\n"];
        content = [content stringByAppendingString:@"\"data\":[\n"];
    }
    while([results next]) {
        currentRecord++;
        content = [content stringByAppendingString:@"{\n"];
        content = [content stringByAppendingFormat:@"\"col0_1\":\"%@\",\n", [results stringForColumn:@"col0_1"]];
        content = [content stringByAppendingFormat:@"\"col0_2\":\"%@\",\n", [results stringForColumn:@"col0_2"]];
        content = [content stringByAppendingFormat:@"\"col1\":\"%@\",\n", [results stringForColumn:@"col1"]];
        content = [content stringByAppendingFormat:@"\"col2\":\"%@\",\n", [results stringForColumn:@"col2"]];
        content = [content stringByAppendingFormat:@"\"col3\":\"%@\",\n", [results stringForColumn:@"col3"]];
        content = [content stringByAppendingFormat:@"\"col4\":\"%@\",\n", [results stringForColumn:@"col4"]];
        content = [content stringByAppendingFormat:@"\"col5\":\"%@\",\n", [results stringForColumn:@"col5"]];
        content = [content stringByAppendingFormat:@"\"col6\":\"%@\",\n", [results stringForColumn:@"col6"]];
        content = [content stringByAppendingFormat:@"\"col7\":\"%@\"\n", [results stringForColumn:@"col7"]];
        
		
        if (currentRecord == totalRecords){ //last record
            content = [content stringByAppendingString:@"}\n"];
        }
        else{
            content = [content stringByAppendingString:@"},\n"];
        }
    }
    content = [content stringByAppendingString:@"]\n"];
    content = [content stringByAppendingString:@"},\n"];
    //SI_Temp_ECAR60 end
    
	//UL_Temp_ECAR1 start
    totalRecords = 0;
    currentRecord = 0;
    results = [database executeQuery:@"select count(*) as cnt from UL_Temp_ECAR where DataType = 'DATA'"];
    if ([results next]) {
        totalRecords = [results intForColumn:@"cnt"];
    }
    
    results = Nil;
    query = [NSString stringWithFormat:@"SELECT col0_1,col0_2,col1,col2,col3,col4,col5,col6,col7,col8 FROM UL_Temp_ECAR where DataType = 'DATA'"];
    results = [database executeQuery:query];
    if (results != Nil){
        content = [content stringByAppendingString:@"\"UL_Temp_ECAR\":{\n"];
        content = [content stringByAppendingString:@"\"data\":[\n"];
    }
    while([results next]) {
        currentRecord++;
        content = [content stringByAppendingString:@"{\n"];
        content = [content stringByAppendingFormat:@"\"col0_1\":\"%@\",\n", [results stringForColumn:@"col0_1"]];
        content = [content stringByAppendingFormat:@"\"col0_2\":\"%@\",\n", [results stringForColumn:@"col0_2"]];
        content = [content stringByAppendingFormat:@"\"col1\":\"%@\",\n", [results stringForColumn:@"col1"]];
        content = [content stringByAppendingFormat:@"\"col2\":\"%@\",\n", [results stringForColumn:@"col2"]];
        content = [content stringByAppendingFormat:@"\"col3\":\"%@\",\n", [results stringForColumn:@"col3"]];
        content = [content stringByAppendingFormat:@"\"col4\":\"%@\",\n", [results stringForColumn:@"col4"]];
        content = [content stringByAppendingFormat:@"\"col5\":\"%@\",\n", [results stringForColumn:@"col5"]];
        content = [content stringByAppendingFormat:@"\"col6\":\"%@\",\n", [results stringForColumn:@"col6"]];
		content = [content stringByAppendingFormat:@"\"col7\":\"%@\",\n", [results stringForColumn:@"col7"]];
        content = [content stringByAppendingFormat:@"\"col8\":\"%@\"\n", [results stringForColumn:@"col8"]];
		
		
        if (currentRecord == totalRecords){ //last record
            content = [content stringByAppendingString:@"}\n"];
        }
        else{
            content = [content stringByAppendingString:@"},\n"];
        }
    }
    content = [content stringByAppendingString:@"]\n"];
    content = [content stringByAppendingString:@"},\n"];
    //SI_Temp_ECAR1 end
    
	//UL_Temp_ECAR6 start
    totalRecords = 0;
    currentRecord = 0;
    results = [database executeQuery:@"select count(*) as cnt from UL_Temp_ECAR6 where DataType = 'DATA'"];
    if ([results next]) {
        totalRecords = [results intForColumn:@"cnt"];
    }
    
    results = Nil;
    query = [NSString stringWithFormat:@"SELECT col0_1,col0_2,col1,col2,col3,col4,col5,col6,col7,col8 FROM UL_Temp_ECAR6 where DataType = 'DATA'"];
    results = [database executeQuery:query];
    if (results != Nil){
        content = [content stringByAppendingString:@"\"UL_Temp_ECAR6\":{\n"];
        content = [content stringByAppendingString:@"\"data\":[\n"];
    }
    while([results next]) {
        currentRecord++;
        content = [content stringByAppendingString:@"{\n"];
        content = [content stringByAppendingFormat:@"\"col0_1\":\"%@\",\n", [results stringForColumn:@"col0_1"]];
        content = [content stringByAppendingFormat:@"\"col0_2\":\"%@\",\n", [results stringForColumn:@"col0_2"]];
        content = [content stringByAppendingFormat:@"\"col1\":\"%@\",\n", [results stringForColumn:@"col1"]];
        content = [content stringByAppendingFormat:@"\"col2\":\"%@\",\n", [results stringForColumn:@"col2"]];
        content = [content stringByAppendingFormat:@"\"col3\":\"%@\",\n", [results stringForColumn:@"col3"]];
        content = [content stringByAppendingFormat:@"\"col4\":\"%@\",\n", [results stringForColumn:@"col4"]];
        content = [content stringByAppendingFormat:@"\"col5\":\"%@\",\n", [results stringForColumn:@"col5"]];
        content = [content stringByAppendingFormat:@"\"col6\":\"%@\",\n", [results stringForColumn:@"col6"]];
		content = [content stringByAppendingFormat:@"\"col7\":\"%@\",\n", [results stringForColumn:@"col7"]];
        content = [content stringByAppendingFormat:@"\"col8\":\"%@\"\n", [results stringForColumn:@"col8"]];
		
		
        if (currentRecord == totalRecords){ //last record
            content = [content stringByAppendingString:@"}\n"];
        }
        else{
            content = [content stringByAppendingString:@"},\n"];
        }
    }
    content = [content stringByAppendingString:@"]\n"];
    content = [content stringByAppendingString:@"},\n"];
    //SI_Temp_ECAR6 end
	
	//UL_Temp_RPUO start
    totalRecords = 0;
    currentRecord = 0;
    
	
    results = [database executeQuery:@"select count(*) as cnt from UL_Temp_RPUO WHERE SeqNo <> 0"];
    if ([results next]) {
        totalRecords = [results intForColumn:@"cnt"];
    }
    
    results = Nil;
    query = [NSString stringWithFormat:@"SELECT * FROM UL_Temp_RPUO WHERE SeqNo <> 0 ORDER BY col1, SeqNo"];
    results = [database executeQuery:query];
    if (results != Nil){
        content = [content stringByAppendingString:@"\"UL_Temp_RPUO\":{\n"];
        content = [content stringByAppendingString:@"\"data\":[\n"];
    }
    while([results next]) {
        currentRecord++;
        content = [content stringByAppendingString:@"{\n"];
		content = [content stringByAppendingFormat:@"\"SeqNo\":\"%@\",\n", [results stringForColumn:@"SeqNo"]];
        content = [content stringByAppendingFormat:@"\"col1\":\"%@\",\n", [results stringForColumn:@"col1"]];
        content = [content stringByAppendingFormat:@"\"col2\":\"%@\",\n", [results stringForColumn:@"col2"]];
        content = [content stringByAppendingFormat:@"\"col3\":\"%@\",\n", [results stringForColumn:@"col3"]];
        content = [content stringByAppendingFormat:@"\"col4\":\"%@\",\n", [results stringForColumn:@"col4"]];
        content = [content stringByAppendingFormat:@"\"col5\":\"%@\",\n", [results stringForColumn:@"col5"]];
        content = [content stringByAppendingFormat:@"\"col6\":\"%@\",\n", [results stringForColumn:@"col6"]];
        content = [content stringByAppendingFormat:@"\"col7\":\"%@\",\n", [results stringForColumn:@"col7"]];
		content = [content stringByAppendingFormat:@"\"col8\":\"%@\",\n", [results stringForColumn:@"col8"]];
		content = [content stringByAppendingFormat:@"\"col9\":\"%@\",\n", [results stringForColumn:@"col9"]];
		content = [content stringByAppendingFormat:@"\"col10\":\"%@\",\n", [results stringForColumn:@"col10"]];
		content = [content stringByAppendingFormat:@"\"col11\":\"%@\",\n", [results stringForColumn:@"col11"]];
        content = [content stringByAppendingFormat:@"\"col12\":\"%@\"\n", [results stringForColumn:@"col12"]];
		
        if (currentRecord == totalRecords){ //last record
            content = [content stringByAppendingString:@"}\n"];
        }
        else{
            content = [content stringByAppendingString:@"},\n"];
        }
    }
    content = [content stringByAppendingString:@"]\n"];
    content = [content stringByAppendingString:@"},\n"];
    //SI_Temp_RPUO end
	
	//UL_Temp_Summary start
    totalRecords = 0;
    currentRecord = 0;
    results = [database executeQuery:@"select count(*) as cnt from UL_Temp_Summary where DataType = 'DATA'"];
    if ([results next]) {
        totalRecords = [results intForColumn:@"cnt"];
    }
    
    results = Nil;
    query = [NSString stringWithFormat:@"SELECT col0_1,col0_2,col1,col2,col3,col4,col5,col6,col7,col8,col9,col10 "
			 ",col11,col12,col13,col14,col15,col16,col17,col18,col19,col20,col21,col22, "
			 "col23,col24,col25,col26,col27,col28,col29,col30,col31 FROM UL_Temp_Summary where DataType = 'DATA'"];
	
    results = [database executeQuery:query];
    if (results != Nil){
        content = [content stringByAppendingString:@"\"UL_Temp_Summary\":{\n"];
        content = [content stringByAppendingString:@"\"data\":[\n"];
    }
    while([results next]) {
        currentRecord++;
        content = [content stringByAppendingString:@"{\n"];
        content = [content stringByAppendingFormat:@"\"col0_1\":\"%@\",\n", [results stringForColumn:@"col0_1"]];
        content = [content stringByAppendingFormat:@"\"col0_2\":\"%@\",\n", [results stringForColumn:@"col0_2"]];
        content = [content stringByAppendingFormat:@"\"col1\":\"%@\",\n", [results stringForColumn:@"col1"]];
        content = [content stringByAppendingFormat:@"\"col2\":\"%@\",\n", [results stringForColumn:@"col2"]];
        content = [content stringByAppendingFormat:@"\"col3\":\"%@\",\n", [results stringForColumn:@"col3"]];
        content = [content stringByAppendingFormat:@"\"col4\":\"%@\",\n", [results stringForColumn:@"col4"]];
        content = [content stringByAppendingFormat:@"\"col5\":\"%@\",\n", [results stringForColumn:@"col5"]];
        content = [content stringByAppendingFormat:@"\"col6\":\"%@\",\n", [results stringForColumn:@"col6"]];
        content = [content stringByAppendingFormat:@"\"col7\":\"%@\",\n", [results stringForColumn:@"col7"]];
        content = [content stringByAppendingFormat:@"\"col8\":\"%@\",\n", [results stringForColumn:@"col8"]];
        content = [content stringByAppendingFormat:@"\"col9\":\"%@\",\n", [results stringForColumn:@"col9"]];
        content = [content stringByAppendingFormat:@"\"col10\":\"%@\",\n", [results stringForColumn:@"col10"]];
        content = [content stringByAppendingFormat:@"\"col11\":\"%@\",\n", [results stringForColumn:@"col11"]];
        content = [content stringByAppendingFormat:@"\"col12\":\"%@\",\n", [results stringForColumn:@"col12"]];
        content = [content stringByAppendingFormat:@"\"col13\":\"%@\",\n", [results stringForColumn:@"col13"]];
        content = [content stringByAppendingFormat:@"\"col14\":\"%@\",\n", [results stringForColumn:@"col14"]];
        content = [content stringByAppendingFormat:@"\"col15\":\"%@\",\n", [results stringForColumn:@"col15"]];
        content = [content stringByAppendingFormat:@"\"col16\":\"%@\",\n", [results stringForColumn:@"col16"]];
        content = [content stringByAppendingFormat:@"\"col17\":\"%@\",\n", [results stringForColumn:@"col17"]];
        content = [content stringByAppendingFormat:@"\"col18\":\"%@\",\n", [results stringForColumn:@"col18"]];
        content = [content stringByAppendingFormat:@"\"col19\":\"%@\",\n", [results stringForColumn:@"col19"]];
        content = [content stringByAppendingFormat:@"\"col20\":\"%@\",\n", [results stringForColumn:@"col20"]];
        content = [content stringByAppendingFormat:@"\"col21\":\"%@\",\n", [results stringForColumn:@"col21"]];
        content = [content stringByAppendingFormat:@"\"col22\":\"%@\",\n", [results stringForColumn:@"col22"]];
        content = [content stringByAppendingFormat:@"\"col23\":\"%@\",\n", [results stringForColumn:@"col23"]];
		content = [content stringByAppendingFormat:@"\"col24\":\"%@\",\n", [results stringForColumn:@"col24"]];
        content = [content stringByAppendingFormat:@"\"col25\":\"%@\",\n", [results stringForColumn:@"col25"]];
        content = [content stringByAppendingFormat:@"\"col26\":\"%@\",\n", [results stringForColumn:@"col26"]];
        content = [content stringByAppendingFormat:@"\"col27\":\"%@\",\n", [results stringForColumn:@"col27"]];
        content = [content stringByAppendingFormat:@"\"col28\":\"%@\",\n", [results stringForColumn:@"col28"]];
        content = [content stringByAppendingFormat:@"\"col29\":\"%@\",\n", [results stringForColumn:@"col29"]];
        content = [content stringByAppendingFormat:@"\"col30\":\"%@\",\n", [results stringForColumn:@"col30"]];
        content = [content stringByAppendingFormat:@"\"col31\":\"%@\"\n", [results stringForColumn:@"col31"]];
		
        if (currentRecord == totalRecords){ //last record
            content = [content stringByAppendingString:@"}\n"];
        }
        else{
            content = [content stringByAppendingString:@"},\n"];
        }
    }
    content = [content stringByAppendingString:@"]\n"];
    content = [content stringByAppendingString:@"},\n"];
    //SI_Temp_Summary end
    /*
     //SI_Store_Premium start
     totalRecords = 0;
     currentRecord = 0;
     
     NSString *dasdas = [NSString stringWithFormat:@"select count(*) as cnt from SI_Store_premium where Sino = '%@'", getSINo];
     
     //NSLog(@"%@", dasdas);
     results = [database executeQuery:dasdas];
     if ([results next]) {
     totalRecords = [results intForColumn:@"cnt"];
     
     }
     results = Nil;
     query = [NSString stringWithFormat:@"SELECT * FROM SI_Store_premium where SIno = '%@'", getSINo];
     results = [database executeQuery:query];
     
     if (results != Nil){
     content = [content stringByAppendingString:@"\"SI_Store_Premium\":{\n"];
     content = [content stringByAppendingString:@"\"data\":[\n"];
     }
     while([results next]) {
     currentRecord++;
     content = [content stringByAppendingString:@"{\n"];
     content = [content stringByAppendingFormat:@"\"Type\":\"%@\",\n", [results stringForColumn:@"Type"]];
     content = [content stringByAppendingFormat:@"\"Annually\":\"%@\",\n", [results stringForColumn:@"Annually"]];
     content = [content stringByAppendingFormat:@"\"SemiAnnually\":\"%@\",\n", [results stringForColumn:@"SemiAnnually"]];
     content = [content stringByAppendingFormat:@"\"Quarterly\":\"%@\",\n", [results stringForColumn:@"Quarterly"]];
     content = [content stringByAppendingFormat:@"\"Monthly\":\"%@\",\n", [results stringForColumn:@"Monthly"]];
     content = [content stringByAppendingFormat:@"\"FromAge\":\"%@\",\n", [results stringForColumn:@"FromAge"]];
     content = [content stringByAppendingFormat:@"\"ToAge\":\"%@\"\n", [results stringForColumn:@"ToAge"]];
     if (currentRecord == totalRecords){ //last record
     content = [content stringByAppendingString:@"}\n"];
     }
     else{
     content = [content stringByAppendingString:@"},\n"];
     }
     }
     content = [content stringByAppendingString:@"]\n"];
     content = [content stringByAppendingString:@"},\n"];
     //SI_Store_Premium end
     */
	
	//page3 start
    totalRecords = 0;
    currentRecord = 0;
    
	NSDateFormatter* df = [[NSDateFormatter alloc] init];
	[df setDateFormat:@"dd/MM/yyyy"];
	NSDate* now =  [NSDate date];
	NSString* ccc = [df stringFromDate:now];
	NSDate* d = [df dateFromString:ccc];
	NSDate* d2 = [df dateFromString:@"26/12/2023"];
	NSDate* d3 = [df dateFromString:@"26/12/2025"];
	NSDate* d4 = [df dateFromString:@"26/12/2028"];
	NSDate* d5 = [df dateFromString:@"26/12/2030"];
	NSDate* d6 = [df dateFromString:@"26/12/2035"];
	NSDate *fromDate;
	NSDate *toDate2;
	NSDate *toDate3;
	NSDate *toDate4;
	NSDate *toDate5;
	NSDate *toDate6;
	
	NSCalendar *calendar = [NSCalendar currentCalendar];
	
	[calendar rangeOfUnit:NSDayCalendarUnit startDate:&fromDate
				 interval:NULL forDate:d];
	[calendar rangeOfUnit:NSDayCalendarUnit startDate:&toDate2
				 interval:NULL forDate:d2];
	[calendar rangeOfUnit:NSDayCalendarUnit startDate:&toDate3
				 interval:NULL forDate:d3];
	[calendar rangeOfUnit:NSDayCalendarUnit startDate:&toDate4
				 interval:NULL forDate:d4];
	[calendar rangeOfUnit:NSDayCalendarUnit startDate:&toDate5
				 interval:NULL forDate:d5];
	[calendar rangeOfUnit:NSDayCalendarUnit startDate:&toDate6
				 interval:NULL forDate:d6];
	
	NSDateComponents *difference2 = [calendar components:NSDayCalendarUnit
												fromDate:fromDate toDate:toDate2 options:0];
	NSDateComponents *difference3 = [calendar components:NSDayCalendarUnit
												fromDate:fromDate toDate:toDate3 options:0];
	NSDateComponents *difference4 = [calendar components:NSDayCalendarUnit
												fromDate:fromDate toDate:toDate4 options:0];
	NSDateComponents *difference5 = [calendar components:NSDayCalendarUnit
												fromDate:fromDate toDate:toDate5 options:0];
	NSDateComponents *difference6 = [calendar components:NSDayCalendarUnit
												fromDate:fromDate toDate:toDate6 options:0];
	
	
	NSString *round2 = [NSString stringWithFormat:@"%.2f", [difference2 day]/365.25];
	NSString *round3 = [NSString stringWithFormat:@"%.2f", [difference3 day]/365.25];
	NSString *round4 = [NSString stringWithFormat:@"%.2f", [difference4 day]/365.25];
	NSString *round5 = [NSString stringWithFormat:@"%.2f", [difference5 day]/365.25];
	NSString *round6 = [NSString stringWithFormat:@"%.2f", [difference6 day]/365.25];
	
	
	double YearDiff2023 = [round2 doubleValue];
	double YearDiff2025 = [round3 doubleValue];
	double YearDiff2028 = [round4 doubleValue];
	double YearDiff2030 = [round5 doubleValue];
	double YearDiff2035 = [round6 doubleValue];
	
	query = [NSString stringWithFormat:@"Select VU2023,VU2025,VU2028,VU2030,VU2035,VUCash,VUDana,VURet,VUSmart,VUVenture,VURetOpt, VUCashOpt,VUDanaOpt,VUSmartOpt,VUVentureOpt From UL_Details "
             " WHERE sino = '%@'", SINo];
	
    results = [database executeQuery:query];
    if (results != Nil){
		[results next];
        content = [content stringByAppendingString:@"\"UL_Page3\":{\n"];
        content = [content stringByAppendingString:@"\"data\":[\n"];
		content = [content stringByAppendingString:@"{\n"];
        content = [content stringByAppendingFormat:@"\"VU2023\":\"%@\",\n", [results stringForColumn:@"VU2023"]];
        content = [content stringByAppendingFormat:@"\"VU2025\":\"%@\",\n", [results stringForColumn:@"VU2025"]];
        content = [content stringByAppendingFormat:@"\"VU2028\":\"%@\",\n", [results stringForColumn:@"VU2028"]];
        content = [content stringByAppendingFormat:@"\"VU2030\":\"%@\",\n", [results stringForColumn:@"VU2030"]];
        content = [content stringByAppendingFormat:@"\"VU2035\":\"%@\",\n", [results stringForColumn:@"VU2035"]];
		content = [content stringByAppendingFormat:@"\"VUDana\":\"%@\",\n", [results stringForColumn:@"VUDana"]];
        content = [content stringByAppendingFormat:@"\"VURet\":\"%@\",\n", [results stringForColumn:@"VURet"]];
        content = [content stringByAppendingFormat:@"\"VUSmart\":\"%@\",\n", [results stringForColumn:@"VUSmart"]];
        content = [content stringByAppendingFormat:@"\"VUVenture\":\"%@\",\n", [results stringForColumn:@"VUVenture"]];
		content = [content stringByAppendingFormat:@"\"VUCash\":\"%@\",\n", [results stringForColumn:@"VUCash"]];
		content = [content stringByAppendingFormat:@"\"VUDanaOpt\":\"%@\",\n", [results stringForColumn:@"VUDanaOpt"]];
        content = [content stringByAppendingFormat:@"\"VURetOpt\":\"%@\",\n", [results stringForColumn:@"VURetOpt"]];
		content = [content stringByAppendingFormat:@"\"VUCashOpt\":\"%@\",\n", [results stringForColumn:@"VUCashOpt"]];
		content = [content stringByAppendingFormat:@"\"YearDiff2023\":\"%f\",\n", YearDiff2023 ];
		content = [content stringByAppendingFormat:@"\"YearDiff2025\":\"%f\",\n", YearDiff2025 ];
		content = [content stringByAppendingFormat:@"\"YearDiff2028\":\"%f\",\n", YearDiff2028 ];
		content = [content stringByAppendingFormat:@"\"YearDiff2030\":\"%f\",\n", YearDiff2030 ];
		content = [content stringByAppendingFormat:@"\"YearDiff2035\":\"%f\"\n", YearDiff2035 ];
		content = [content stringByAppendingString:@"}\n"];
    }
	
    content = [content stringByAppendingString:@"]\n"];
    content = [content stringByAppendingString:@"}\n"];
    //page3 end
    
    
	
	content = [content stringByAppendingString:@"}\n"];
    content = [content stringByAppendingString:@"]\n"];
    content = [content stringByAppendingString:@"}"];
	
	[content writeToFile:jsonFile atomically:NO encoding:NSStringEncodingConversionAllowLossy error:nil];
    [database close];
    
	
	
	
}



@end
